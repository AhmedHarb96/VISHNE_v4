
VISHNE_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024f0  0800b0b8  0800b0b8  0000c0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5a8  0800d5a8  0000f1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5a8  0800d5a8  0000e5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5b0  0800d5b0  0000f1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5b0  0800d5b0  0000e5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d5b4  0800d5b4  0000e5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800d5b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1fc  2**0
                  CONTENTS
 10 .bss          0000118c  200001fc  200001fc  0000f1fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001388  20001388  0000f1fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001731f  00000000  00000000  0000f22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000349b  00000000  00000000  0002654b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  000299e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001052  00000000  00000000  0002aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257e9  00000000  00000000  0002bf22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7d2  00000000  00000000  0005170b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df2ce  00000000  00000000  0006cedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014c1ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000694c  00000000  00000000  0014c1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00152b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0a0 	.word	0x0800b0a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800b0a0 	.word	0x0800b0a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 fa04 	bl	80022a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f816 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fa3c 	bl	8001320 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f000 f9fc 	bl	80012a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 f9d0 	bl	8001250 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f92e 	bl	8001110 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000eb4:	f000 f876 	bl	8000fa4 <MX_ADC3_Init>
  MX_SPI3_Init();
 8000eb8:	f000 f8f4 	bl	80010a4 <MX_SPI3_Init>
  MX_I2C3_Init();
 8000ebc:	f000 f8c4 	bl	8001048 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8000ec0:	f007 f9b4 	bl	800822c <DWT_Init>

  systemSetup();
 8000ec4:	f007 fa04 	bl	80082d0 <systemSetup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  systemLoop();
 8000ec8:	f007 f9f8 	bl	80082bc <systemLoop>
  {
 8000ecc:	bf00      	nop
 8000ece:	e7fb      	b.n	8000ec8 <main+0x30>

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	@ 0x50
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	2230      	movs	r2, #48	@ 0x30
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f008 f82d 	bl	8008f3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <SystemClock_Config+0xcc>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efc:	4a27      	ldr	r2, [pc, #156]	@ (8000f9c <SystemClock_Config+0xcc>)
 8000efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f04:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <SystemClock_Config+0xcc>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <SystemClock_Config+0xd0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a21      	ldr	r2, [pc, #132]	@ (8000fa0 <SystemClock_Config+0xd0>)
 8000f1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <SystemClock_Config+0xd0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2302      	movs	r3, #2
 8000f38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f40:	2304      	movs	r3, #4
 8000f42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f44:	2348      	movs	r3, #72	@ 0x48
 8000f46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	4618      	mov	r0, r3
 8000f56:	f003 fd43 	bl	80049e0 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f60:	f000 fad6 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2102      	movs	r1, #2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 ffa4 	bl	8004ed0 <HAL_RCC_ClockConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f8e:	f000 fabf 	bl	8001510 <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3750      	adds	r7, #80	@ 0x50
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40007000 	.word	0x40007000

08000fa4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <MX_ADC3_Init+0x98>)
 8000fb8:	4a21      	ldr	r2, [pc, #132]	@ (8001040 <MX_ADC3_Init+0x9c>)
 8000fba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <MX_ADC3_Init+0x98>)
 8000fbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fc2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <MX_ADC3_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <MX_ADC3_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <MX_ADC3_Init+0x98>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	@ (800103c <MX_ADC3_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fde:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_ADC3_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_ADC3_Init+0x98>)
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <MX_ADC3_Init+0xa0>)
 8000fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_ADC3_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_ADC3_Init+0x98>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_ADC3_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_ADC3_Init+0x98>)
 8001000:	2201      	movs	r2, #1
 8001002:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001004:	480d      	ldr	r0, [pc, #52]	@ (800103c <MX_ADC3_Init+0x98>)
 8001006:	f001 f9e5 	bl	80023d4 <HAL_ADC_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001010:	f000 fa7e 	bl	8001510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001014:	2301      	movs	r3, #1
 8001016:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001018:	2301      	movs	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	@ (800103c <MX_ADC3_Init+0x98>)
 8001026:	f001 fb47 	bl	80026b8 <HAL_ADC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001030:	f000 fa6e 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000218 	.word	0x20000218
 8001040:	40012200 	.word	0x40012200
 8001044:	0f000001 	.word	0x0f000001

08001048 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_I2C3_Init+0x50>)
 800104e:	4a13      	ldr	r2, [pc, #76]	@ (800109c <MX_I2C3_Init+0x54>)
 8001050:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;         //100000    max=400khz
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_I2C3_Init+0x50>)
 8001054:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <MX_I2C3_Init+0x58>)
 8001056:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_I2C3_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_I2C3_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_I2C3_Init+0x50>)
 8001066:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800106a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <MX_I2C3_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_I2C3_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <MX_I2C3_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_I2C3_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <MX_I2C3_Init+0x50>)
 8001086:	f002 fcb1 	bl	80039ec <HAL_I2C_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001090:	f000 fa3e 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200002c0 	.word	0x200002c0
 800109c:	40005c00 	.word	0x40005c00
 80010a0:	000186a0 	.word	0x000186a0

080010a4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010a8:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010aa:	4a18      	ldr	r2, [pc, #96]	@ (800110c <MX_SPI3_Init+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010b6:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c2:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010d8:	2230      	movs	r2, #48	@ 0x30
 80010da:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e8:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010f0:	220a      	movs	r2, #10
 80010f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	@ (8001108 <MX_SPI3_Init+0x64>)
 80010f6:	f004 f90b 	bl	8005310 <HAL_SPI_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001100:	f000 fa06 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000314 	.word	0x20000314
 800110c:	40003c00 	.word	0x40003c00

08001110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b096      	sub	sp, #88	@ 0x58
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2220      	movs	r2, #32
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f007 fef8 	bl	8008f3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800114e:	4b3e      	ldr	r3, [pc, #248]	@ (8001248 <MX_TIM1_Init+0x138>)
 8001150:	4a3e      	ldr	r2, [pc, #248]	@ (800124c <MX_TIM1_Init+0x13c>)
 8001152:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 53-1;
 8001154:	4b3c      	ldr	r3, [pc, #240]	@ (8001248 <MX_TIM1_Init+0x138>)
 8001156:	2234      	movs	r2, #52	@ 0x34
 8001158:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b3b      	ldr	r3, [pc, #236]	@ (8001248 <MX_TIM1_Init+0x138>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8001160:	4b39      	ldr	r3, [pc, #228]	@ (8001248 <MX_TIM1_Init+0x138>)
 8001162:	2209      	movs	r2, #9
 8001164:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001166:	4b38      	ldr	r3, [pc, #224]	@ (8001248 <MX_TIM1_Init+0x138>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800116c:	4b36      	ldr	r3, [pc, #216]	@ (8001248 <MX_TIM1_Init+0x138>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b35      	ldr	r3, [pc, #212]	@ (8001248 <MX_TIM1_Init+0x138>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001178:	4833      	ldr	r0, [pc, #204]	@ (8001248 <MX_TIM1_Init+0x138>)
 800117a:	f004 fb71 	bl	8005860 <HAL_TIM_Base_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001184:	f000 f9c4 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800118c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800118e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001192:	4619      	mov	r1, r3
 8001194:	482c      	ldr	r0, [pc, #176]	@ (8001248 <MX_TIM1_Init+0x138>)
 8001196:	f004 fd95 	bl	8005cc4 <HAL_TIM_ConfigClockSource>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80011a0:	f000 f9b6 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011a4:	4828      	ldr	r0, [pc, #160]	@ (8001248 <MX_TIM1_Init+0x138>)
 80011a6:	f004 fbaa 	bl	80058fe <HAL_TIM_PWM_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80011b0:	f000 f9ae 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011c0:	4619      	mov	r1, r3
 80011c2:	4821      	ldr	r0, [pc, #132]	@ (8001248 <MX_TIM1_Init+0x138>)
 80011c4:	f005 f962 	bl	800648c <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80011ce:	f000 f99f 	bl	8001510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d2:	2360      	movs	r3, #96	@ 0x60
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f2:	2200      	movs	r2, #0
 80011f4:	4619      	mov	r1, r3
 80011f6:	4814      	ldr	r0, [pc, #80]	@ (8001248 <MX_TIM1_Init+0x138>)
 80011f8:	f004 fca2 	bl	8005b40 <HAL_TIM_PWM_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001202:	f000 f985 	bl	8001510 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800121e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4807      	ldr	r0, [pc, #28]	@ (8001248 <MX_TIM1_Init+0x138>)
 800122a:	f005 f9ab 	bl	8006584 <HAL_TIMEx_ConfigBreakDeadTime>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001234:	f000 f96c 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001238:	4803      	ldr	r0, [pc, #12]	@ (8001248 <MX_TIM1_Init+0x138>)
 800123a:	f000 fe1f 	bl	8001e7c <HAL_TIM_MspPostInit>

}
 800123e:	bf00      	nop
 8001240:	3758      	adds	r7, #88	@ 0x58
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000036c 	.word	0x2000036c
 800124c:	40010000 	.word	0x40010000

08001250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <MX_USART2_UART_Init+0x50>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_USART2_UART_Init+0x4c>)
 8001288:	f005 f9ce 	bl	8006628 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001292:	f000 f93d 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000414 	.word	0x20000414
 80012a0:	40004400 	.word	0x40004400

080012a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <MX_DMA_Init+0x78>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a1a      	ldr	r2, [pc, #104]	@ (800131c <MX_DMA_Init+0x78>)
 80012b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_DMA_Init+0x78>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_DMA_Init+0x78>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a13      	ldr	r2, [pc, #76]	@ (800131c <MX_DMA_Init+0x78>)
 80012d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_DMA_Init+0x78>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2010      	movs	r0, #16
 80012e8:	f001 fd61 	bl	8002dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012ec:	2010      	movs	r0, #16
 80012ee:	f001 fd7a 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2038      	movs	r0, #56	@ 0x38
 80012f8:	f001 fd59 	bl	8002dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012fc:	2038      	movs	r0, #56	@ 0x38
 80012fe:	f001 fd72 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2039      	movs	r0, #57	@ 0x39
 8001308:	f001 fd51 	bl	8002dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800130c:	2039      	movs	r0, #57	@ 0x39
 800130e:	f001 fd6a 	bl	8002de6 <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	@ 0x30
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	4b70      	ldr	r3, [pc, #448]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a6f      	ldr	r2, [pc, #444]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b6d      	ldr	r3, [pc, #436]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	4b69      	ldr	r3, [pc, #420]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a68      	ldr	r2, [pc, #416]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b66      	ldr	r3, [pc, #408]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b62      	ldr	r3, [pc, #392]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a61      	ldr	r2, [pc, #388]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b5f      	ldr	r3, [pc, #380]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b5b      	ldr	r3, [pc, #364]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a5a      	ldr	r2, [pc, #360]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b58      	ldr	r3, [pc, #352]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b54      	ldr	r3, [pc, #336]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a53      	ldr	r2, [pc, #332]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b4d      	ldr	r3, [pc, #308]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a4c      	ldr	r2, [pc, #304]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <MX_GPIO_Init+0x1dc>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2140      	movs	r1, #64	@ 0x40
 80013e2:	4847      	ldr	r0, [pc, #284]	@ (8001500 <MX_GPIO_Init+0x1e0>)
 80013e4:	f002 fad0 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin|READY_LED_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80013ee:	4845      	ldr	r0, [pc, #276]	@ (8001504 <MX_GPIO_Init+0x1e4>)
 80013f0:	f002 faca 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CE_Pin|LCD_DC_Pin|LCD_RST_Pin|LCD_BL_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	210f      	movs	r1, #15
 80013f8:	4843      	ldr	r0, [pc, #268]	@ (8001508 <MX_GPIO_Init+0x1e8>)
 80013fa:	f002 fac5 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin|SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001404:	4841      	ldr	r0, [pc, #260]	@ (800150c <MX_GPIO_Init+0x1ec>)
 8001406:	f002 fabf 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EOS_Pin */
  GPIO_InitStruct.Pin = EOS_Pin;
 800140a:	2310      	movs	r3, #16
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EOS_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	4838      	ldr	r0, [pc, #224]	@ (8001500 <MX_GPIO_Init+0x1e0>)
 8001420:	f002 f8fe 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001424:	2320      	movs	r3, #32
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	4832      	ldr	r0, [pc, #200]	@ (8001500 <MX_GPIO_Init+0x1e0>)
 8001438:	f002 f8f2 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800143c:	2340      	movs	r3, #64	@ 0x40
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	482b      	ldr	r0, [pc, #172]	@ (8001500 <MX_GPIO_Init+0x1e0>)
 8001454:	f002 f8e4 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERR_BUZZER_Pin READY_LED_Pin */
  GPIO_InitStruct.Pin = ERR_BUZZER_Pin|READY_LED_Pin;
 8001458:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4824      	ldr	r0, [pc, #144]	@ (8001504 <MX_GPIO_Init+0x1e4>)
 8001472:	f002 f8d5 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : NEXT_BTN_Pin PREV_BTN_Pin */
  GPIO_InitStruct.Pin = NEXT_BTN_Pin|PREV_BTN_Pin;
 8001476:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	481e      	ldr	r0, [pc, #120]	@ (8001504 <MX_GPIO_Init+0x1e4>)
 800148c:	f002 f8c8 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : NAVIGATE_BTN_Pin */
  GPIO_InitStruct.Pin = NAVIGATE_BTN_Pin;
 8001490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NAVIGATE_BTN_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4819      	ldr	r0, [pc, #100]	@ (800150c <MX_GPIO_Init+0x1ec>)
 80014a6:	f002 f8bb 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CE_Pin LCD_DC_Pin LCD_RST_Pin LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_DC_Pin|LCD_RST_Pin|LCD_BL_Pin;
 80014aa:	230f      	movs	r3, #15
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4811      	ldr	r0, [pc, #68]	@ (8001508 <MX_GPIO_Init+0x1e8>)
 80014c2:	f002 f8ad 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEC_START_Pin SPEC_CLK_Pin SPEC_EOS_Pin SPEC_GAIN_Pin */
  GPIO_InitStruct.Pin = SPEC_START_Pin|SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin;
 80014c6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	480b      	ldr	r0, [pc, #44]	@ (800150c <MX_GPIO_Init+0x1ec>)
 80014e0:	f002 f89e 	bl	8003620 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* EXTI interrupt init */
      HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2102      	movs	r1, #2
 80014e8:	200a      	movs	r0, #10
 80014ea:	f001 fc60 	bl	8002dae <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014ee:	200a      	movs	r0, #10
 80014f0:	f001 fc79 	bl	8002de6 <HAL_NVIC_EnableIRQ>

     // HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin, GPIO_PIN_SET);
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f4:	bf00      	nop
 80014f6:	3730      	adds	r7, #48	@ 0x30
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40021000 	.word	0x40021000
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40020400 	.word	0x40020400

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <Error_Handler+0x8>

0800151c <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2101      	movs	r1, #1
 8001524:	480a      	ldr	r0, [pc, #40]	@ (8001550 <ssd1306_Reset+0x34>)
 8001526:	f002 fa2f 	bl	8003988 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2104      	movs	r1, #4
 800152e:	4808      	ldr	r0, [pc, #32]	@ (8001550 <ssd1306_Reset+0x34>)
 8001530:	f002 fa2a 	bl	8003988 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001534:	200a      	movs	r0, #10
 8001536:	f000 ff29 	bl	800238c <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2104      	movs	r1, #4
 800153e:	4804      	ldr	r0, [pc, #16]	@ (8001550 <ssd1306_Reset+0x34>)
 8001540:	f002 fa22 	bl	8003988 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001544:	200a      	movs	r0, #10
 8001546:	f000 ff21 	bl	800238c <HAL_Delay>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020c00 	.word	0x40020c00

08001554 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800155e:	2200      	movs	r2, #0
 8001560:	2101      	movs	r1, #1
 8001562:	480c      	ldr	r0, [pc, #48]	@ (8001594 <ssd1306_WriteCommand+0x40>)
 8001564:	f002 fa10 	bl	8003988 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001568:	2200      	movs	r2, #0
 800156a:	2102      	movs	r1, #2
 800156c:	4809      	ldr	r0, [pc, #36]	@ (8001594 <ssd1306_WriteCommand+0x40>)
 800156e:	f002 fa0b 	bl	8003988 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001572:	1df9      	adds	r1, r7, #7
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	2201      	movs	r2, #1
 800157a:	4807      	ldr	r0, [pc, #28]	@ (8001598 <ssd1306_WriteCommand+0x44>)
 800157c:	f003 ff51 	bl	8005422 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001580:	2201      	movs	r2, #1
 8001582:	2101      	movs	r1, #1
 8001584:	4803      	ldr	r0, [pc, #12]	@ (8001594 <ssd1306_WriteCommand+0x40>)
 8001586:	f002 f9ff 	bl	8003988 <HAL_GPIO_WritePin>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40020c00 	.word	0x40020c00
 8001598:	20000314 	.word	0x20000314

0800159c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80015a6:	2200      	movs	r2, #0
 80015a8:	2101      	movs	r1, #1
 80015aa:	480c      	ldr	r0, [pc, #48]	@ (80015dc <ssd1306_WriteData+0x40>)
 80015ac:	f002 f9ec 	bl	8003988 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80015b0:	2201      	movs	r2, #1
 80015b2:	2102      	movs	r1, #2
 80015b4:	4809      	ldr	r0, [pc, #36]	@ (80015dc <ssd1306_WriteData+0x40>)
 80015b6:	f002 f9e7 	bl	8003988 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4806      	ldr	r0, [pc, #24]	@ (80015e0 <ssd1306_WriteData+0x44>)
 80015c6:	f003 ff2c 	bl	8005422 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80015ca:	2201      	movs	r2, #1
 80015cc:	2101      	movs	r1, #1
 80015ce:	4803      	ldr	r0, [pc, #12]	@ (80015dc <ssd1306_WriteData+0x40>)
 80015d0:	f002 f9da 	bl	8003988 <HAL_GPIO_WritePin>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	20000314 	.word	0x20000314

080015e4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80015e8:	f7ff ff98 	bl	800151c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80015ec:	2064      	movs	r0, #100	@ 0x64
 80015ee:	f000 fecd 	bl	800238c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 fa7e 	bl	8001af4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80015f8:	2020      	movs	r0, #32
 80015fa:	f7ff ffab 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff ffa8 	bl	8001554 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001604:	20b0      	movs	r0, #176	@ 0xb0
 8001606:	f7ff ffa5 	bl	8001554 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800160a:	20c8      	movs	r0, #200	@ 0xc8
 800160c:	f7ff ffa2 	bl	8001554 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff ff9f 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001616:	2010      	movs	r0, #16
 8001618:	f7ff ff9c 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800161c:	2040      	movs	r0, #64	@ 0x40
 800161e:	f7ff ff99 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001622:	20ff      	movs	r0, #255	@ 0xff
 8001624:	f000 fa53 	bl	8001ace <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001628:	20a1      	movs	r0, #161	@ 0xa1
 800162a:	f7ff ff93 	bl	8001554 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800162e:	20a6      	movs	r0, #166	@ 0xa6
 8001630:	f7ff ff90 	bl	8001554 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001634:	20a8      	movs	r0, #168	@ 0xa8
 8001636:	f7ff ff8d 	bl	8001554 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800163a:	203f      	movs	r0, #63	@ 0x3f
 800163c:	f7ff ff8a 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001640:	20a4      	movs	r0, #164	@ 0xa4
 8001642:	f7ff ff87 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001646:	20d3      	movs	r0, #211	@ 0xd3
 8001648:	f7ff ff84 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff ff81 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001652:	20d5      	movs	r0, #213	@ 0xd5
 8001654:	f7ff ff7e 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001658:	20f0      	movs	r0, #240	@ 0xf0
 800165a:	f7ff ff7b 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800165e:	20d9      	movs	r0, #217	@ 0xd9
 8001660:	f7ff ff78 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001664:	2022      	movs	r0, #34	@ 0x22
 8001666:	f7ff ff75 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800166a:	20da      	movs	r0, #218	@ 0xda
 800166c:	f7ff ff72 	bl	8001554 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001670:	2012      	movs	r0, #18
 8001672:	f7ff ff6f 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001676:	20db      	movs	r0, #219	@ 0xdb
 8001678:	f7ff ff6c 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800167c:	2020      	movs	r0, #32
 800167e:	f7ff ff69 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001682:	208d      	movs	r0, #141	@ 0x8d
 8001684:	f7ff ff66 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001688:	2014      	movs	r0, #20
 800168a:	f7ff ff63 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800168e:	2001      	movs	r0, #1
 8001690:	f000 fa30 	bl	8001af4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001694:	2000      	movs	r0, #0
 8001696:	f000 f80f 	bl	80016b8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800169a:	f000 f825 	bl	80016e8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800169e:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <ssd1306_Init+0xd0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <ssd1306_Init+0xd0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80016aa:	4b02      	ldr	r3, [pc, #8]	@ (80016b4 <ssd1306_Init+0xd0>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	711a      	strb	r2, [r3, #4]
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200008bc 	.word	0x200008bc

080016b8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <ssd1306_Fill+0x14>
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <ssd1306_Fill+0x16>
 80016cc:	23ff      	movs	r3, #255	@ 0xff
 80016ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d2:	4619      	mov	r1, r3
 80016d4:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <ssd1306_Fill+0x2c>)
 80016d6:	f007 fc32 	bl	8008f3e <memset>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200004bc 	.word	0x200004bc

080016e8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	71fb      	strb	r3, [r7, #7]
 80016f2:	e016      	b.n	8001722 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	3b50      	subs	r3, #80	@ 0x50
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff2a 	bl	8001554 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff ff27 	bl	8001554 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001706:	2010      	movs	r0, #16
 8001708:	f7ff ff24 	bl	8001554 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	01db      	lsls	r3, r3, #7
 8001710:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <ssd1306_UpdateScreen+0x4c>)
 8001712:	4413      	add	r3, r2
 8001714:	2180      	movs	r1, #128	@ 0x80
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff40 	bl	800159c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	3301      	adds	r3, #1
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b07      	cmp	r3, #7
 8001726:	d9e5      	bls.n	80016f4 <ssd1306_UpdateScreen+0xc>
    }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200004bc 	.word	0x200004bc

08001738 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	460b      	mov	r3, r1
 8001744:	71bb      	strb	r3, [r7, #6]
 8001746:	4613      	mov	r3, r2
 8001748:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db3d      	blt.n	80017ce <ssd1306_DrawPixel+0x96>
 8001752:	79bb      	ldrb	r3, [r7, #6]
 8001754:	2b3f      	cmp	r3, #63	@ 0x3f
 8001756:	d83a      	bhi.n	80017ce <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001758:	797b      	ldrb	r3, [r7, #5]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d11a      	bne.n	8001794 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	08db      	lsrs	r3, r3, #3
 8001764:	b2d8      	uxtb	r0, r3
 8001766:	4603      	mov	r3, r0
 8001768:	01db      	lsls	r3, r3, #7
 800176a:	4413      	add	r3, r2
 800176c:	4a1b      	ldr	r2, [pc, #108]	@ (80017dc <ssd1306_DrawPixel+0xa4>)
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	b25a      	sxtb	r2, r3
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	2101      	movs	r1, #1
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	b25b      	sxtb	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	b259      	sxtb	r1, r3
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	4603      	mov	r3, r0
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	4413      	add	r3, r2
 800178c:	b2c9      	uxtb	r1, r1
 800178e:	4a13      	ldr	r2, [pc, #76]	@ (80017dc <ssd1306_DrawPixel+0xa4>)
 8001790:	54d1      	strb	r1, [r2, r3]
 8001792:	e01d      	b.n	80017d0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	08db      	lsrs	r3, r3, #3
 800179a:	b2d8      	uxtb	r0, r3
 800179c:	4603      	mov	r3, r0
 800179e:	01db      	lsls	r3, r3, #7
 80017a0:	4413      	add	r3, r2
 80017a2:	4a0e      	ldr	r2, [pc, #56]	@ (80017dc <ssd1306_DrawPixel+0xa4>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
 80017a6:	b25a      	sxtb	r2, r3
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	4013      	ands	r3, r2
 80017bc:	b259      	sxtb	r1, r3
 80017be:	79fa      	ldrb	r2, [r7, #7]
 80017c0:	4603      	mov	r3, r0
 80017c2:	01db      	lsls	r3, r3, #7
 80017c4:	4413      	add	r3, r2
 80017c6:	b2c9      	uxtb	r1, r1
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <ssd1306_DrawPixel+0xa4>)
 80017ca:	54d1      	strb	r1, [r2, r3]
 80017cc:	e000      	b.n	80017d0 <ssd1306_DrawPixel+0x98>
        return;
 80017ce:	bf00      	nop
    }
}
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200004bc 	.word	0x200004bc

080017e0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4604      	mov	r4, r0
 80017e8:	4638      	mov	r0, r7
 80017ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80017ee:	4623      	mov	r3, r4
 80017f0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	2b1f      	cmp	r3, #31
 80017f6:	d902      	bls.n	80017fe <ssd1306_WriteChar+0x1e>
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2b7e      	cmp	r3, #126	@ 0x7e
 80017fc:	d901      	bls.n	8001802 <ssd1306_WriteChar+0x22>
        return 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	e077      	b.n	80018f2 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001802:	4b3e      	ldr	r3, [pc, #248]	@ (80018fc <ssd1306_WriteChar+0x11c>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	783b      	ldrb	r3, [r7, #0]
 800180a:	4413      	add	r3, r2
 800180c:	2b80      	cmp	r3, #128	@ 0x80
 800180e:	dc06      	bgt.n	800181e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001810:	4b3a      	ldr	r3, [pc, #232]	@ (80018fc <ssd1306_WriteChar+0x11c>)
 8001812:	885b      	ldrh	r3, [r3, #2]
 8001814:	461a      	mov	r2, r3
 8001816:	787b      	ldrb	r3, [r7, #1]
 8001818:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800181a:	2b40      	cmp	r3, #64	@ 0x40
 800181c:	dd01      	ble.n	8001822 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800181e:	2300      	movs	r3, #0
 8001820:	e067      	b.n	80018f2 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e04e      	b.n	80018c6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	3b20      	subs	r3, #32
 800182e:	7879      	ldrb	r1, [r7, #1]
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4619      	mov	r1, r3
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	440b      	add	r3, r1
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	e036      	b.n	80018b6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001858:	4b28      	ldr	r3, [pc, #160]	@ (80018fc <ssd1306_WriteChar+0x11c>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b2d8      	uxtb	r0, r3
 8001866:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <ssd1306_WriteChar+0x11c>)
 8001868:	885b      	ldrh	r3, [r3, #2]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff ff5d 	bl	8001738 <ssd1306_DrawPixel>
 800187e:	e017      	b.n	80018b0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001880:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <ssd1306_WriteChar+0x11c>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4413      	add	r3, r2
 800188c:	b2d8      	uxtb	r0, r3
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <ssd1306_WriteChar+0x11c>)
 8001890:	885b      	ldrh	r3, [r3, #2]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b2d9      	uxtb	r1, r3
 800189c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf0c      	ite	eq
 80018a4:	2301      	moveq	r3, #1
 80018a6:	2300      	movne	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	f7ff ff44 	bl	8001738 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	3301      	adds	r3, #1
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	783b      	ldrb	r3, [r7, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4293      	cmp	r3, r2
 80018be:	d3c3      	bcc.n	8001848 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3301      	adds	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	787b      	ldrb	r3, [r7, #1]
 80018c8:	461a      	mov	r2, r3
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d3ab      	bcc.n	8001828 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <ssd1306_WriteChar+0x11c>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d005      	beq.n	80018e6 <ssd1306_WriteChar+0x106>
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	3a20      	subs	r2, #32
 80018e0:	440a      	add	r2, r1
 80018e2:	7812      	ldrb	r2, [r2, #0]
 80018e4:	e000      	b.n	80018e8 <ssd1306_WriteChar+0x108>
 80018e6:	783a      	ldrb	r2, [r7, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <ssd1306_WriteChar+0x11c>)
 80018ee:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200008bc 	.word	0x200008bc

08001900 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af02      	add	r7, sp, #8
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	4638      	mov	r0, r7
 800190a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800190e:	e013      	b.n	8001938 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	7818      	ldrb	r0, [r3, #0]
 8001914:	7e3b      	ldrb	r3, [r7, #24]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	463b      	mov	r3, r7
 800191a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800191c:	f7ff ff60 	bl	80017e0 <ssd1306_WriteChar>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d002      	beq.n	8001932 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	e008      	b.n	8001944 <ssd1306_WriteString+0x44>
        }
        str++;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3301      	adds	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e7      	bne.n	8001910 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	781b      	ldrb	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <ssd1306_SetCursor+0x2c>)
 8001962:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <ssd1306_SetCursor+0x2c>)
 800196a:	805a      	strh	r2, [r3, #2]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	200008bc 	.word	0x200008bc

0800197c <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	4604      	mov	r4, r0
 8001984:	4608      	mov	r0, r1
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4623      	mov	r3, r4
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	4603      	mov	r3, r0
 8001990:	71bb      	strb	r3, [r7, #6]
 8001992:	460b      	mov	r3, r1
 8001994:	717b      	strb	r3, [r7, #5]
 8001996:	4613      	mov	r3, r2
 8001998:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	797b      	ldrb	r3, [r7, #5]
 800199e:	4293      	cmp	r3, r2
 80019a0:	bf28      	it	cs
 80019a2:	4613      	movcs	r3, r2
 80019a4:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80019a6:	797a      	ldrb	r2, [r7, #5]
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4293      	cmp	r3, r2
 80019ac:	bf38      	it	cc
 80019ae:	4613      	movcc	r3, r2
 80019b0:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80019b2:	79ba      	ldrb	r2, [r7, #6]
 80019b4:	793b      	ldrb	r3, [r7, #4]
 80019b6:	4293      	cmp	r3, r2
 80019b8:	bf28      	it	cs
 80019ba:	4613      	movcs	r3, r2
 80019bc:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80019be:	793a      	ldrb	r2, [r7, #4]
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	4293      	cmp	r3, r2
 80019c4:	bf38      	it	cc
 80019c6:	4613      	movcc	r3, r2
 80019c8:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	e017      	b.n	8001a00 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80019d0:	7b7b      	ldrb	r3, [r7, #13]
 80019d2:	73bb      	strb	r3, [r7, #14]
 80019d4:	e009      	b.n	80019ea <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80019d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019da:	7bf9      	ldrb	r1, [r7, #15]
 80019dc:	7bbb      	ldrb	r3, [r7, #14]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff feaa 	bl	8001738 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	3301      	adds	r3, #1
 80019e8:	73bb      	strb	r3, [r7, #14]
 80019ea:	7bba      	ldrb	r2, [r7, #14]
 80019ec:	7b3b      	ldrb	r3, [r7, #12]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d803      	bhi.n	80019fa <ssd1306_FillRectangle+0x7e>
 80019f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	daed      	bge.n	80019d6 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	3301      	adds	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	7abb      	ldrb	r3, [r7, #10]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d803      	bhi.n	8001a10 <ssd1306_FillRectangle+0x94>
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a0c:	d9e0      	bls.n	80019d0 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
}
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd90      	pop	{r4, r7, pc}

08001a18 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	603a      	str	r2, [r7, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	460b      	mov	r3, r1
 8001a28:	71bb      	strb	r3, [r7, #6]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001a2e:	797b      	ldrb	r3, [r7, #5]
 8001a30:	3307      	adds	r3, #7
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da00      	bge.n	8001a38 <ssd1306_DrawBitmap+0x20>
 8001a36:	3307      	adds	r3, #7
 8001a38:	10db      	asrs	r3, r3, #3
 8001a3a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db3e      	blt.n	8001ac6 <ssd1306_DrawBitmap+0xae>
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a4c:	d83b      	bhi.n	8001ac6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73bb      	strb	r3, [r7, #14]
 8001a52:	e033      	b.n	8001abc <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	737b      	strb	r3, [r7, #13]
 8001a58:	e026      	b.n	8001aa8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001a5a:	7b7b      	ldrb	r3, [r7, #13]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	e00d      	b.n	8001a88 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001a6c:	7bbb      	ldrb	r3, [r7, #14]
 8001a6e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	7b7a      	ldrb	r2, [r7, #13]
 8001a78:	08d2      	lsrs	r2, r2, #3
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	461a      	mov	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da08      	bge.n	8001aa2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	7b7b      	ldrb	r3, [r7, #13]
 8001a94:	4413      	add	r3, r2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	7f3a      	ldrb	r2, [r7, #28]
 8001a9a:	79b9      	ldrb	r1, [r7, #6]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fe4b 	bl	8001738 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001aa2:	7b7b      	ldrb	r3, [r7, #13]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	737b      	strb	r3, [r7, #13]
 8001aa8:	7b7a      	ldrb	r2, [r7, #13]
 8001aaa:	797b      	ldrb	r3, [r7, #5]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d3d4      	bcc.n	8001a5a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	73bb      	strb	r3, [r7, #14]
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	71bb      	strb	r3, [r7, #6]
 8001abc:	7bba      	ldrb	r2, [r7, #14]
 8001abe:	7e3b      	ldrb	r3, [r7, #24]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3c7      	bcc.n	8001a54 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001ac4:	e000      	b.n	8001ac8 <ssd1306_DrawBitmap+0xb0>
        return;
 8001ac6:	bf00      	nop
}
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ad8:	2381      	movs	r3, #129	@ 0x81
 8001ada:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fd38 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fd34 	bl	8001554 <ssd1306_WriteCommand>
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001b04:	23af      	movs	r3, #175	@ 0xaf
 8001b06:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001b08:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <ssd1306_SetDisplayOn+0x38>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	715a      	strb	r2, [r3, #5]
 8001b0e:	e004      	b.n	8001b1a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001b10:	23ae      	movs	r3, #174	@ 0xae
 8001b12:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <ssd1306_SetDisplayOn+0x38>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fd19 	bl	8001554 <ssd1306_WriteCommand>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200008bc 	.word	0x200008bc

08001b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800

08001b80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c5c <HAL_ADC_MspInit+0xdc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d158      	bne.n	8001c54 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <HAL_ADC_MspInit+0xe0>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	4a2d      	ldr	r2, [pc, #180]	@ (8001c60 <HAL_ADC_MspInit+0xe0>)
 8001bac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <HAL_ADC_MspInit+0xe0>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <HAL_ADC_MspInit+0xe0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a26      	ldr	r2, [pc, #152]	@ (8001c60 <HAL_ADC_MspInit+0xe0>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b24      	ldr	r3, [pc, #144]	@ (8001c60 <HAL_ADC_MspInit+0xe0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = VIDEO_Pin;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bde:	2303      	movs	r3, #3
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VIDEO_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	481d      	ldr	r0, [pc, #116]	@ (8001c64 <HAL_ADC_MspInit+0xe4>)
 8001bee:	f001 fd17 	bl	8003620 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c6c <HAL_ADC_MspInit+0xec>)
 8001bf6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001bfa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bfe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c12:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c1a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c22:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c2a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c32:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001c38:	480b      	ldr	r0, [pc, #44]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c3a:	f001 f8ef 	bl	8002e1c <HAL_DMA_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001c44:	f7ff fc64 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a07      	ldr	r2, [pc, #28]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c4e:	4a06      	ldr	r2, [pc, #24]	@ (8001c68 <HAL_ADC_MspInit+0xe8>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	@ 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40012200 	.word	0x40012200
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	20000260 	.word	0x20000260
 8001c6c:	40026410 	.word	0x40026410

08001c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a29      	ldr	r2, [pc, #164]	@ (8001d34 <HAL_I2C_MspInit+0xc4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d14b      	bne.n	8001d2a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b28      	ldr	r3, [pc, #160]	@ (8001d38 <HAL_I2C_MspInit+0xc8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a27      	ldr	r2, [pc, #156]	@ (8001d38 <HAL_I2C_MspInit+0xc8>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <HAL_I2C_MspInit+0xc8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <HAL_I2C_MspInit+0xc8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a20      	ldr	r2, [pc, #128]	@ (8001d38 <HAL_I2C_MspInit+0xc8>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <HAL_I2C_MspInit+0xc8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd0:	2312      	movs	r3, #18
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4815      	ldr	r0, [pc, #84]	@ (8001d3c <HAL_I2C_MspInit+0xcc>)
 8001ce8:	f001 fc9a 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf2:	2312      	movs	r3, #18
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	480d      	ldr	r0, [pc, #52]	@ (8001d40 <HAL_I2C_MspInit+0xd0>)
 8001d0a:	f001 fc89 	bl	8003620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_I2C_MspInit+0xc8>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	4a08      	ldr	r2, [pc, #32]	@ (8001d38 <HAL_I2C_MspInit+0xc8>)
 8001d18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_I2C_MspInit+0xc8>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	@ 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40005c00 	.word	0x40005c00
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020000 	.word	0x40020000

08001d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	@ 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <HAL_SPI_MspInit+0x84>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d12c      	bne.n	8001dc0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <HAL_SPI_MspInit+0x88>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a17      	ldr	r2, [pc, #92]	@ (8001dcc <HAL_SPI_MspInit+0x88>)
 8001d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_SPI_MspInit+0x88>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <HAL_SPI_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a10      	ldr	r2, [pc, #64]	@ (8001dcc <HAL_SPI_MspInit+0x88>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <HAL_SPI_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d9e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001db0:	2306      	movs	r3, #6
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <HAL_SPI_MspInit+0x8c>)
 8001dbc:	f001 fc30 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	@ 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40003c00 	.word	0x40003c00
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020800 	.word	0x40020800

08001dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a22      	ldr	r2, [pc, #136]	@ (8001e6c <HAL_TIM_Base_MspInit+0x98>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d13d      	bne.n	8001e62 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <HAL_TIM_Base_MspInit+0x9c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	4a20      	ldr	r2, [pc, #128]	@ (8001e70 <HAL_TIM_Base_MspInit+0x9c>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <HAL_TIM_Base_MspInit+0x9c>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e04:	4a1c      	ldr	r2, [pc, #112]	@ (8001e78 <HAL_TIM_Base_MspInit+0xa4>)
 8001e06:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e0a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001e0e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e10:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e12:	2240      	movs	r2, #64	@ 0x40
 8001e14:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e16:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e22:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e24:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e2a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e32:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001e46:	480b      	ldr	r0, [pc, #44]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e48:	f000 ffe8 	bl	8002e1c <HAL_DMA_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001e52:	f7ff fb5d 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a06      	ldr	r2, [pc, #24]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e5c:	4a05      	ldr	r2, [pc, #20]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa0>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	40023800 	.word	0x40023800
 8001e74:	200003b4 	.word	0x200003b4
 8001e78:	40026428 	.word	0x40026428

08001e7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <HAL_TIM_MspPostInit+0x68>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d11e      	bne.n	8001edc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <HAL_TIM_MspPostInit+0x6c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <HAL_TIM_MspPostInit+0x6c>)
 8001ea8:	f043 0310 	orr.w	r3, r3, #16
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <HAL_TIM_MspPostInit+0x6c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ebe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4805      	ldr	r0, [pc, #20]	@ (8001eec <HAL_TIM_MspPostInit+0x70>)
 8001ed8:	f001 fba2 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a34      	ldr	r2, [pc, #208]	@ (8001fe0 <HAL_UART_MspInit+0xf0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d161      	bne.n	8001fd6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b33      	ldr	r3, [pc, #204]	@ (8001fe4 <HAL_UART_MspInit+0xf4>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	4a32      	ldr	r2, [pc, #200]	@ (8001fe4 <HAL_UART_MspInit+0xf4>)
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f22:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <HAL_UART_MspInit+0xf4>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe4 <HAL_UART_MspInit+0xf4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe4 <HAL_UART_MspInit+0xf4>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <HAL_UART_MspInit+0xf4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4820      	ldr	r0, [pc, #128]	@ (8001fe8 <HAL_UART_MspInit+0xf8>)
 8001f66:	f001 fb5b 	bl	8003620 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001f6c:	4a20      	ldr	r2, [pc, #128]	@ (8001ff0 <HAL_UART_MspInit+0x100>)
 8001f6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f70:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001f72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f76:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f78:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001f86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f92:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f9e:	4b13      	ldr	r3, [pc, #76]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001faa:	4810      	ldr	r0, [pc, #64]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001fac:	f000 ff36 	bl	8002e1c <HAL_DMA_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001fb6:	f7ff faab 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <HAL_UART_MspInit+0xfc>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2026      	movs	r0, #38	@ 0x26
 8001fcc:	f000 feef 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fd0:	2026      	movs	r0, #38	@ 0x26
 8001fd2:	f000 ff08 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	@ 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40004400 	.word	0x40004400
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	2000045c 	.word	0x2000045c
 8001ff0:	40026088 	.word	0x40026088

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <MemManage_Handler+0x4>

0800200c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <UsageFault_Handler+0x4>

0800201c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204a:	f000 f97f 	bl	800234c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <DMA1_Stream5_IRQHandler+0x10>)
 800205a:	f001 f877 	bl	800314c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000045c 	.word	0x2000045c

08002068 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <USART2_IRQHandler+0x10>)
 800206e:	f004 fbb7 	bl	80067e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000414 	.word	0x20000414

0800207c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <DMA2_Stream0_IRQHandler+0x10>)
 8002082:	f001 f863 	bl	800314c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000260 	.word	0x20000260

08002090 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <DMA2_Stream1_IRQHandler+0x10>)
 8002096:	f001 f859 	bl	800314c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200003b4 	.word	0x200003b4

080020a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_kill>:

int _kill(int pid, int sig)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020be:	f006 ff91 	bl	8008fe4 <__errno>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2216      	movs	r2, #22
 80020c6:	601a      	str	r2, [r3, #0]
  return -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_exit>:

void _exit (int status)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ffe7 	bl	80020b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020e6:	bf00      	nop
 80020e8:	e7fd      	b.n	80020e6 <_exit+0x12>

080020ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e00a      	b.n	8002112 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020fc:	f3af 8000 	nop.w
 8002100:	4601      	mov	r1, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	60ba      	str	r2, [r7, #8]
 8002108:	b2ca      	uxtb	r2, r1
 800210a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3301      	adds	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	dbf0      	blt.n	80020fc <_read+0x12>
  }

  return len;
 800211a:	687b      	ldr	r3, [r7, #4]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e009      	b.n	800214a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	60ba      	str	r2, [r7, #8]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	dbf1      	blt.n	8002136 <_write+0x12>
  }
  return len;
 8002152:	687b      	ldr	r3, [r7, #4]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <_close>:

int _close(int file)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002184:	605a      	str	r2, [r3, #4]
  return 0;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_isatty>:

int _isatty(int file)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021cc:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <_sbrk+0x5c>)
 80021ce:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <_sbrk+0x60>)
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d8:	4b13      	ldr	r3, [pc, #76]	@ (8002228 <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <_sbrk+0x64>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <_sbrk+0x68>)
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d207      	bcs.n	8002204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f4:	f006 fef6 	bl	8008fe4 <__errno>
 80021f8:	4603      	mov	r3, r0
 80021fa:	220c      	movs	r2, #12
 80021fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e009      	b.n	8002218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002204:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220a:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4a05      	ldr	r2, [pc, #20]	@ (8002228 <_sbrk+0x64>)
 8002214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20020000 	.word	0x20020000
 8002224:	00000400 	.word	0x00000400
 8002228:	200008c4 	.word	0x200008c4
 800222c:	20001388 	.word	0x20001388

08002230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002234:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <SystemInit+0x20>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223a:	4a05      	ldr	r2, [pc, #20]	@ (8002250 <SystemInit+0x20>)
 800223c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002240:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002254:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800228c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002258:	f7ff ffea 	bl	8002230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800225c:	480c      	ldr	r0, [pc, #48]	@ (8002290 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800225e:	490d      	ldr	r1, [pc, #52]	@ (8002294 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002260:	4a0d      	ldr	r2, [pc, #52]	@ (8002298 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002264:	e002      	b.n	800226c <LoopCopyDataInit>

08002266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226a:	3304      	adds	r3, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800226c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002270:	d3f9      	bcc.n	8002266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002272:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002274:	4c0a      	ldr	r4, [pc, #40]	@ (80022a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002278:	e001      	b.n	800227e <LoopFillZerobss>

0800227a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800227c:	3204      	adds	r2, #4

0800227e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002280:	d3fb      	bcc.n	800227a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002282:	f006 feb5 	bl	8008ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002286:	f7fe fe07 	bl	8000e98 <main>
  bx  lr    
 800228a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800228c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002298:	0800d5b8 	.word	0x0800d5b8
  ldr r2, =_sbss
 800229c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80022a0:	20001388 	.word	0x20001388

080022a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC_IRQHandler>
	...

080022a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ac:	4b0e      	ldr	r3, [pc, #56]	@ (80022e8 <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0d      	ldr	r2, [pc, #52]	@ (80022e8 <HAL_Init+0x40>)
 80022b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <HAL_Init+0x40>)
 80022be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	@ (80022e8 <HAL_Init+0x40>)
 80022ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 fd61 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d6:	200f      	movs	r0, #15
 80022d8:	f000 f808 	bl	80022ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022dc:	f7ff fc28 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023c00 	.word	0x40023c00

080022ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_InitTick+0x54>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <HAL_InitTick+0x58>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002302:	fbb3 f3f1 	udiv	r3, r3, r1
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fd79 	bl	8002e02 <HAL_SYSTICK_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e00e      	b.n	8002338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b0f      	cmp	r3, #15
 800231e:	d80a      	bhi.n	8002336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002320:	2200      	movs	r2, #0
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f000 fd41 	bl	8002dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800232c:	4a06      	ldr	r2, [pc, #24]	@ (8002348 <HAL_InitTick+0x5c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000000 	.word	0x20000000
 8002344:	20000008 	.word	0x20000008
 8002348:	20000004 	.word	0x20000004

0800234c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_IncTick+0x20>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_IncTick+0x24>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4413      	add	r3, r2
 800235c:	4a04      	ldr	r2, [pc, #16]	@ (8002370 <HAL_IncTick+0x24>)
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000008 	.word	0x20000008
 8002370:	200008c8 	.word	0x200008c8

08002374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return uwTick;
 8002378:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <HAL_GetTick+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	200008c8 	.word	0x200008c8

0800238c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002394:	f7ff ffee 	bl	8002374 <HAL_GetTick>
 8002398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d005      	beq.n	80023b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a6:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <HAL_Delay+0x44>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023b2:	bf00      	nop
 80023b4:	f7ff ffde 	bl	8002374 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d8f7      	bhi.n	80023b4 <HAL_Delay+0x28>
  {
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000008 	.word	0x20000008

080023d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e033      	b.n	8002452 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fbc4 	bl	8001b80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800241a:	f023 0302 	bic.w	r3, r3, #2
 800241e:	f043 0202 	orr.w	r2, r3, #2
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fa68 	bl	80028fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	@ 0x40
 8002442:	e001      	b.n	8002448 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_ADC_Start_DMA+0x1e>
 8002476:	2302      	movs	r3, #2
 8002478:	e0e9      	b.n	800264e <HAL_ADC_Start_DMA+0x1f2>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d018      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002658 <HAL_ADC_Start_DMA+0x1fc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6d      	ldr	r2, [pc, #436]	@ (800265c <HAL_ADC_Start_DMA+0x200>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9a      	lsrs	r2, r3, #18
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024d0:	d107      	bne.n	80024e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024e0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	f040 80a1 	bne.w	8002634 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800251c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800252c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002530:	d106      	bne.n	8002540 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	f023 0206 	bic.w	r2, r3, #6
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	645a      	str	r2, [r3, #68]	@ 0x44
 800253e:	e002      	b.n	8002546 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800254e:	4b44      	ldr	r3, [pc, #272]	@ (8002660 <HAL_ADC_Start_DMA+0x204>)
 8002550:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002556:	4a43      	ldr	r2, [pc, #268]	@ (8002664 <HAL_ADC_Start_DMA+0x208>)
 8002558:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255e:	4a42      	ldr	r2, [pc, #264]	@ (8002668 <HAL_ADC_Start_DMA+0x20c>)
 8002560:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	4a41      	ldr	r2, [pc, #260]	@ (800266c <HAL_ADC_Start_DMA+0x210>)
 8002568:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002572:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002582:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002592:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	334c      	adds	r3, #76	@ 0x4c
 800259e:	4619      	mov	r1, r3
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f000 fce8 	bl	8002f78 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d12a      	bne.n	800260a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002670 <HAL_ADC_Start_DMA+0x214>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d015      	beq.n	80025ea <HAL_ADC_Start_DMA+0x18e>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002674 <HAL_ADC_Start_DMA+0x218>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_Start_DMA+0x178>
 80025c8:	4b25      	ldr	r3, [pc, #148]	@ (8002660 <HAL_ADC_Start_DMA+0x204>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a27      	ldr	r2, [pc, #156]	@ (8002678 <HAL_ADC_Start_DMA+0x21c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d136      	bne.n	800264c <HAL_ADC_Start_DMA+0x1f0>
 80025de:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <HAL_ADC_Start_DMA+0x204>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d130      	bne.n	800264c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d129      	bne.n	800264c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	e020      	b.n	800264c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a18      	ldr	r2, [pc, #96]	@ (8002670 <HAL_ADC_Start_DMA+0x214>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d11b      	bne.n	800264c <HAL_ADC_Start_DMA+0x1f0>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d114      	bne.n	800264c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	e00b      	b.n	800264c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f043 0210 	orr.w	r2, r3, #16
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000000 	.word	0x20000000
 800265c:	431bde83 	.word	0x431bde83
 8002660:	40012300 	.word	0x40012300
 8002664:	08002af5 	.word	0x08002af5
 8002668:	08002baf 	.word	0x08002baf
 800266c:	08002bcb 	.word	0x08002bcb
 8002670:	40012000 	.word	0x40012000
 8002674:	40012100 	.word	0x40012100
 8002678:	40012200 	.word	0x40012200

0800267c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1c>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e105      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x228>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b09      	cmp	r3, #9
 80026e2:	d925      	bls.n	8002730 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68d9      	ldr	r1, [r3, #12]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	3b1e      	subs	r3, #30
 80026fa:	2207      	movs	r2, #7
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43da      	mvns	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	400a      	ands	r2, r1
 8002708:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68d9      	ldr	r1, [r3, #12]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	4618      	mov	r0, r3
 800271c:	4603      	mov	r3, r0
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4403      	add	r3, r0
 8002722:	3b1e      	subs	r3, #30
 8002724:	409a      	lsls	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	e022      	b.n	8002776 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6919      	ldr	r1, [r3, #16]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	2207      	movs	r2, #7
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	400a      	ands	r2, r1
 8002752:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6919      	ldr	r1, [r3, #16]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	4618      	mov	r0, r3
 8002766:	4603      	mov	r3, r0
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4403      	add	r3, r0
 800276c:	409a      	lsls	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b06      	cmp	r3, #6
 800277c:	d824      	bhi.n	80027c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	3b05      	subs	r3, #5
 8002790:	221f      	movs	r2, #31
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	400a      	ands	r2, r1
 800279e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4618      	mov	r0, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	3b05      	subs	r3, #5
 80027ba:	fa00 f203 	lsl.w	r2, r0, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027c6:	e04c      	b.n	8002862 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d824      	bhi.n	800281a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b23      	subs	r3, #35	@ 0x23
 80027e2:	221f      	movs	r2, #31
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43da      	mvns	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	400a      	ands	r2, r1
 80027f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	4618      	mov	r0, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	3b23      	subs	r3, #35	@ 0x23
 800280c:	fa00 f203 	lsl.w	r2, r0, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	631a      	str	r2, [r3, #48]	@ 0x30
 8002818:	e023      	b.n	8002862 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3b41      	subs	r3, #65	@ 0x41
 800282c:	221f      	movs	r2, #31
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	400a      	ands	r2, r1
 800283a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	3b41      	subs	r3, #65	@ 0x41
 8002856:	fa00 f203 	lsl.w	r2, r0, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002862:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <HAL_ADC_ConfigChannel+0x234>)
 8002864:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a21      	ldr	r2, [pc, #132]	@ (80028f0 <HAL_ADC_ConfigChannel+0x238>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d109      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1cc>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b12      	cmp	r3, #18
 8002876:	d105      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a19      	ldr	r2, [pc, #100]	@ (80028f0 <HAL_ADC_ConfigChannel+0x238>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d123      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x21e>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b10      	cmp	r3, #16
 8002894:	d003      	beq.n	800289e <HAL_ADC_ConfigChannel+0x1e6>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b11      	cmp	r3, #17
 800289c:	d11b      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d111      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028b2:	4b10      	ldr	r3, [pc, #64]	@ (80028f4 <HAL_ADC_ConfigChannel+0x23c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a10      	ldr	r2, [pc, #64]	@ (80028f8 <HAL_ADC_ConfigChannel+0x240>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	0c9a      	lsrs	r2, r3, #18
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028c8:	e002      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f9      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	40012300 	.word	0x40012300
 80028f0:	40012000 	.word	0x40012000
 80028f4:	20000000 	.word	0x20000000
 80028f8:	431bde83 	.word	0x431bde83

080028fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002904:	4b79      	ldr	r3, [pc, #484]	@ (8002aec <ADC_Init+0x1f0>)
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002930:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	021a      	lsls	r2, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298e:	4a58      	ldr	r2, [pc, #352]	@ (8002af0 <ADC_Init+0x1f4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	e00f      	b.n	80029fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0202 	bic.w	r2, r2, #2
 8002a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7e1b      	ldrb	r3, [r3, #24]
 8002a14:	005a      	lsls	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01b      	beq.n	8002a60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6859      	ldr	r1, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	3b01      	subs	r3, #1
 8002a54:	035a      	lsls	r2, r3, #13
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	e007      	b.n	8002a70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	051a      	lsls	r2, r3, #20
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ab2:	025a      	lsls	r2, r3, #9
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	029a      	lsls	r2, r3, #10
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40012300 	.word	0x40012300
 8002af0:	0f000001 	.word	0x0f000001

08002af4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d13c      	bne.n	8002b88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d12b      	bne.n	8002b80 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d127      	bne.n	8002b80 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b36:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d006      	beq.n	8002b4c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d119      	bne.n	8002b80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0220 	bic.w	r2, r2, #32
 8002b5a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	f043 0201 	orr.w	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff fd7b 	bl	800267c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b86:	e00e      	b.n	8002ba6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff fd85 	bl	80026a4 <HAL_ADC_ErrorCallback>
}
 8002b9a:	e004      	b.n	8002ba6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fd67 	bl	8002690 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2240      	movs	r2, #64	@ 0x40
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff fd5a 	bl	80026a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2a:	4a04      	ldr	r2, [pc, #16]	@ (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	60d3      	str	r3, [r2, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c44:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <__NVIC_GetPriorityGrouping+0x18>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 0307 	and.w	r3, r3, #7
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db0b      	blt.n	8002c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4907      	ldr	r1, [pc, #28]	@ (8002c94 <__NVIC_EnableIRQ+0x38>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000e100 	.word	0xe000e100

08002c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db0a      	blt.n	8002cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	490c      	ldr	r1, [pc, #48]	@ (8002ce4 <__NVIC_SetPriority+0x4c>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc0:	e00a      	b.n	8002cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4908      	ldr	r1, [pc, #32]	@ (8002ce8 <__NVIC_SetPriority+0x50>)
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	3b04      	subs	r3, #4
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	761a      	strb	r2, [r3, #24]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000e100 	.word	0xe000e100
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	@ 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f1c3 0307 	rsb	r3, r3, #7
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	bf28      	it	cs
 8002d0a:	2304      	movcs	r3, #4
 8002d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d902      	bls.n	8002d1c <NVIC_EncodePriority+0x30>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3b03      	subs	r3, #3
 8002d1a:	e000      	b.n	8002d1e <NVIC_EncodePriority+0x32>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	401a      	ands	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	43d9      	mvns	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	4313      	orrs	r3, r2
         );
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	@ 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d64:	d301      	bcc.n	8002d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00f      	b.n	8002d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d94 <SysTick_Config+0x40>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d72:	210f      	movs	r1, #15
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f7ff ff8e 	bl	8002c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <SysTick_Config+0x40>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d82:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <SysTick_Config+0x40>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000e010 	.word	0xe000e010

08002d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff29 	bl	8002bf8 <__NVIC_SetPriorityGrouping>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc0:	f7ff ff3e 	bl	8002c40 <__NVIC_GetPriorityGrouping>
 8002dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7ff ff8e 	bl	8002cec <NVIC_EncodePriority>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff5d 	bl	8002c98 <__NVIC_SetPriority>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff31 	bl	8002c5c <__NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ffa2 	bl	8002d54 <SysTick_Config>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff faa4 	bl	8002374 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e099      	b.n	8002f6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e58:	e00f      	b.n	8002e7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5a:	f7ff fa8b 	bl	8002374 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d908      	bls.n	8002e7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e078      	b.n	8002f6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e8      	bne.n	8002e5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4b38      	ldr	r3, [pc, #224]	@ (8002f74 <HAL_DMA_Init+0x158>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d107      	bne.n	8002ee4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	4313      	orrs	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f023 0307 	bic.w	r3, r3, #7
 8002efa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d117      	bne.n	8002f3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00e      	beq.n	8002f3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fb01 	bl	8003528 <DMA_CheckFifoParam>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2240      	movs	r2, #64	@ 0x40
 8002f30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e016      	b.n	8002f6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fab8 	bl	80034bc <DMA_CalcBaseAndBitshift>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	223f      	movs	r2, #63	@ 0x3f
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	f010803f 	.word	0xf010803f

08002f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_DMA_Start_IT+0x26>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e040      	b.n	8003020 <HAL_DMA_Start_IT+0xa8>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d12f      	bne.n	8003012 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fa4a 	bl	8003460 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd0:	223f      	movs	r2, #63	@ 0x3f
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0216 	orr.w	r2, r2, #22
 8002fe6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0208 	orr.w	r2, r2, #8
 8002ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e005      	b.n	800301e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800301a:	2302      	movs	r3, #2
 800301c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003036:	f7ff f99d 	bl	8002374 <HAL_GetTick>
 800303a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d008      	beq.n	800305a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2280      	movs	r2, #128	@ 0x80
 800304c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e052      	b.n	8003100 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0216 	bic.w	r2, r2, #22
 8003068:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003078:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_DMA_Abort+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0208 	bic.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030aa:	e013      	b.n	80030d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ac:	f7ff f962 	bl	8002374 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d90c      	bls.n	80030d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2203      	movs	r2, #3
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e015      	b.n	8003100 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e4      	bne.n	80030ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	223f      	movs	r2, #63	@ 0x3f
 80030e8:	409a      	lsls	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d004      	beq.n	8003126 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2280      	movs	r2, #128	@ 0x80
 8003120:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e00c      	b.n	8003140 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2205      	movs	r2, #5
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003158:	4b8e      	ldr	r3, [pc, #568]	@ (8003394 <HAL_DMA_IRQHandler+0x248>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a8e      	ldr	r2, [pc, #568]	@ (8003398 <HAL_DMA_IRQHandler+0x24c>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	2208      	movs	r2, #8
 8003178:	409a      	lsls	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01a      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0204 	bic.w	r2, r2, #4
 800319e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	2208      	movs	r2, #8
 80031a6:	409a      	lsls	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031bc:	2201      	movs	r2, #1
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d012      	beq.n	80031ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	2201      	movs	r2, #1
 80031dc:	409a      	lsls	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e6:	f043 0202 	orr.w	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f2:	2204      	movs	r2, #4
 80031f4:	409a      	lsls	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d012      	beq.n	8003224 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003210:	2204      	movs	r2, #4
 8003212:	409a      	lsls	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321c:	f043 0204 	orr.w	r2, r3, #4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003228:	2210      	movs	r2, #16
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d043      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d03c      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	2210      	movs	r2, #16
 8003248:	409a      	lsls	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d018      	beq.n	800328e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d108      	bne.n	800327c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d024      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
 800327a:	e01f      	b.n	80032bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01b      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
 800328c:	e016      	b.n	80032bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0208 	bic.w	r2, r2, #8
 80032aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c0:	2220      	movs	r2, #32
 80032c2:	409a      	lsls	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 808f 	beq.w	80033ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8087 	beq.w	80033ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e2:	2220      	movs	r2, #32
 80032e4:	409a      	lsls	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d136      	bne.n	8003364 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0216 	bic.w	r2, r2, #22
 8003304:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003314:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d103      	bne.n	8003326 <HAL_DMA_IRQHandler+0x1da>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0208 	bic.w	r2, r2, #8
 8003334:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333a:	223f      	movs	r2, #63	@ 0x3f
 800333c:	409a      	lsls	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003356:	2b00      	cmp	r3, #0
 8003358:	d07e      	beq.n	8003458 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
        }
        return;
 8003362:	e079      	b.n	8003458 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01d      	beq.n	80033ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10d      	bne.n	800339c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003384:	2b00      	cmp	r3, #0
 8003386:	d031      	beq.n	80033ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
 8003390:	e02c      	b.n	80033ec <HAL_DMA_IRQHandler+0x2a0>
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000
 8003398:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d023      	beq.n	80033ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
 80033ac:	e01e      	b.n	80033ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10f      	bne.n	80033dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0210 	bic.w	r2, r2, #16
 80033ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d032      	beq.n	800345a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d022      	beq.n	8003446 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2205      	movs	r2, #5
 8003404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3301      	adds	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	429a      	cmp	r2, r3
 8003422:	d307      	bcc.n	8003434 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f2      	bne.n	8003418 <HAL_DMA_IRQHandler+0x2cc>
 8003432:	e000      	b.n	8003436 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003434:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
 8003456:	e000      	b.n	800345a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003458:	bf00      	nop
    }
  }
}
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800347c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b40      	cmp	r3, #64	@ 0x40
 800348c:	d108      	bne.n	80034a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800349e:	e007      	b.n	80034b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	3b10      	subs	r3, #16
 80034cc:	4a14      	ldr	r2, [pc, #80]	@ (8003520 <DMA_CalcBaseAndBitshift+0x64>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034d6:	4a13      	ldr	r2, [pc, #76]	@ (8003524 <DMA_CalcBaseAndBitshift+0x68>)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d909      	bls.n	80034fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	1d1a      	adds	r2, r3, #4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80034fc:	e007      	b.n	800350e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	aaaaaaab 	.word	0xaaaaaaab
 8003524:	0800cc2c 	.word	0x0800cc2c

08003528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11f      	bne.n	8003582 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d856      	bhi.n	80035f6 <DMA_CheckFifoParam+0xce>
 8003548:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <DMA_CheckFifoParam+0x28>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003561 	.word	0x08003561
 8003554:	08003573 	.word	0x08003573
 8003558:	08003561 	.word	0x08003561
 800355c:	080035f7 	.word	0x080035f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d046      	beq.n	80035fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003570:	e043      	b.n	80035fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003576:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800357a:	d140      	bne.n	80035fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003580:	e03d      	b.n	80035fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800358a:	d121      	bne.n	80035d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d837      	bhi.n	8003602 <DMA_CheckFifoParam+0xda>
 8003592:	a201      	add	r2, pc, #4	@ (adr r2, 8003598 <DMA_CheckFifoParam+0x70>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035af 	.word	0x080035af
 80035a0:	080035a9 	.word	0x080035a9
 80035a4:	080035c1 	.word	0x080035c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e030      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d025      	beq.n	8003606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035be:	e022      	b.n	8003606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035c8:	d11f      	bne.n	800360a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ce:	e01c      	b.n	800360a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d903      	bls.n	80035de <DMA_CheckFifoParam+0xb6>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d003      	beq.n	80035e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035dc:	e018      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
      break;
 80035e2:	e015      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00e      	beq.n	800360e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      break;
 80035f4:	e00b      	b.n	800360e <DMA_CheckFifoParam+0xe6>
      break;
 80035f6:	bf00      	nop
 80035f8:	e00a      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;
 80035fa:	bf00      	nop
 80035fc:	e008      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;
 80035fe:	bf00      	nop
 8003600:	e006      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;
 8003602:	bf00      	nop
 8003604:	e004      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
 8003608:	e002      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;   
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;
 800360e:	bf00      	nop
    }
  } 
  
  return status; 
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	@ 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e16b      	b.n	8003914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800363c:	2201      	movs	r2, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	429a      	cmp	r2, r3
 8003656:	f040 815a 	bne.w	800390e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d005      	beq.n	8003672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800366e:	2b02      	cmp	r3, #2
 8003670:	d130      	bne.n	80036d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a8:	2201      	movs	r2, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 0201 	and.w	r2, r3, #1
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d017      	beq.n	8003710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d123      	bne.n	8003764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	08da      	lsrs	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3208      	adds	r2, #8
 8003724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	220f      	movs	r2, #15
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	08da      	lsrs	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3208      	adds	r2, #8
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	2203      	movs	r2, #3
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0203 	and.w	r2, r3, #3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80b4 	beq.w	800390e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	4b60      	ldr	r3, [pc, #384]	@ (800392c <HAL_GPIO_Init+0x30c>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	4a5f      	ldr	r2, [pc, #380]	@ (800392c <HAL_GPIO_Init+0x30c>)
 80037b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037b6:	4b5d      	ldr	r3, [pc, #372]	@ (800392c <HAL_GPIO_Init+0x30c>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003930 <HAL_GPIO_Init+0x310>)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a52      	ldr	r2, [pc, #328]	@ (8003934 <HAL_GPIO_Init+0x314>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d02b      	beq.n	8003846 <HAL_GPIO_Init+0x226>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a51      	ldr	r2, [pc, #324]	@ (8003938 <HAL_GPIO_Init+0x318>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d025      	beq.n	8003842 <HAL_GPIO_Init+0x222>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a50      	ldr	r2, [pc, #320]	@ (800393c <HAL_GPIO_Init+0x31c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01f      	beq.n	800383e <HAL_GPIO_Init+0x21e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4f      	ldr	r2, [pc, #316]	@ (8003940 <HAL_GPIO_Init+0x320>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d019      	beq.n	800383a <HAL_GPIO_Init+0x21a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4e      	ldr	r2, [pc, #312]	@ (8003944 <HAL_GPIO_Init+0x324>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_GPIO_Init+0x216>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4d      	ldr	r2, [pc, #308]	@ (8003948 <HAL_GPIO_Init+0x328>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00d      	beq.n	8003832 <HAL_GPIO_Init+0x212>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4c      	ldr	r2, [pc, #304]	@ (800394c <HAL_GPIO_Init+0x32c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <HAL_GPIO_Init+0x20e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4b      	ldr	r2, [pc, #300]	@ (8003950 <HAL_GPIO_Init+0x330>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_GPIO_Init+0x20a>
 8003826:	2307      	movs	r3, #7
 8003828:	e00e      	b.n	8003848 <HAL_GPIO_Init+0x228>
 800382a:	2308      	movs	r3, #8
 800382c:	e00c      	b.n	8003848 <HAL_GPIO_Init+0x228>
 800382e:	2306      	movs	r3, #6
 8003830:	e00a      	b.n	8003848 <HAL_GPIO_Init+0x228>
 8003832:	2305      	movs	r3, #5
 8003834:	e008      	b.n	8003848 <HAL_GPIO_Init+0x228>
 8003836:	2304      	movs	r3, #4
 8003838:	e006      	b.n	8003848 <HAL_GPIO_Init+0x228>
 800383a:	2303      	movs	r3, #3
 800383c:	e004      	b.n	8003848 <HAL_GPIO_Init+0x228>
 800383e:	2302      	movs	r3, #2
 8003840:	e002      	b.n	8003848 <HAL_GPIO_Init+0x228>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_GPIO_Init+0x228>
 8003846:	2300      	movs	r3, #0
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	f002 0203 	and.w	r2, r2, #3
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	4093      	lsls	r3, r2
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003858:	4935      	ldr	r1, [pc, #212]	@ (8003930 <HAL_GPIO_Init+0x310>)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	3302      	adds	r3, #2
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003866:	4b3b      	ldr	r3, [pc, #236]	@ (8003954 <HAL_GPIO_Init+0x334>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800388a:	4a32      	ldr	r2, [pc, #200]	@ (8003954 <HAL_GPIO_Init+0x334>)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003890:	4b30      	ldr	r3, [pc, #192]	@ (8003954 <HAL_GPIO_Init+0x334>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038b4:	4a27      	ldr	r2, [pc, #156]	@ (8003954 <HAL_GPIO_Init+0x334>)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ba:	4b26      	ldr	r3, [pc, #152]	@ (8003954 <HAL_GPIO_Init+0x334>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038de:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <HAL_GPIO_Init+0x334>)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <HAL_GPIO_Init+0x334>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003908:	4a12      	ldr	r2, [pc, #72]	@ (8003954 <HAL_GPIO_Init+0x334>)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	2b0f      	cmp	r3, #15
 8003918:	f67f ae90 	bls.w	800363c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	3724      	adds	r7, #36	@ 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800
 8003930:	40013800 	.word	0x40013800
 8003934:	40020000 	.word	0x40020000
 8003938:	40020400 	.word	0x40020400
 800393c:	40020800 	.word	0x40020800
 8003940:	40020c00 	.word	0x40020c00
 8003944:	40021000 	.word	0x40021000
 8003948:	40021400 	.word	0x40021400
 800394c:	40021800 	.word	0x40021800
 8003950:	40021c00 	.word	0x40021c00
 8003954:	40013c00 	.word	0x40013c00

08003958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
 8003974:	e001      	b.n	800397a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
 8003994:	4613      	mov	r3, r2
 8003996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003998:	787b      	ldrb	r3, [r7, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a4:	e003      	b.n	80039ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	041a      	lsls	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	619a      	str	r2, [r3, #24]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039c6:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039d2:	4a05      	ldr	r2, [pc, #20]	@ (80039e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	4618      	mov	r0, r3
 80039dc:	f004 fc12 	bl	8008204 <HAL_GPIO_EXTI_Callback>
  }
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40013c00 	.word	0x40013c00

080039ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e12b      	b.n	8003c56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe f92c 	bl	8001c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	@ 0x24
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a50:	f001 fc36 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8003a54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4a81      	ldr	r2, [pc, #516]	@ (8003c60 <HAL_I2C_Init+0x274>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d807      	bhi.n	8003a70 <HAL_I2C_Init+0x84>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a80      	ldr	r2, [pc, #512]	@ (8003c64 <HAL_I2C_Init+0x278>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	bf94      	ite	ls
 8003a68:	2301      	movls	r3, #1
 8003a6a:	2300      	movhi	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e006      	b.n	8003a7e <HAL_I2C_Init+0x92>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a7d      	ldr	r2, [pc, #500]	@ (8003c68 <HAL_I2C_Init+0x27c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	bf94      	ite	ls
 8003a78:	2301      	movls	r3, #1
 8003a7a:	2300      	movhi	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0e7      	b.n	8003c56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a78      	ldr	r2, [pc, #480]	@ (8003c6c <HAL_I2C_Init+0x280>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	0c9b      	lsrs	r3, r3, #18
 8003a90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c60 <HAL_I2C_Init+0x274>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d802      	bhi.n	8003ac0 <HAL_I2C_Init+0xd4>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3301      	adds	r3, #1
 8003abe:	e009      	b.n	8003ad4 <HAL_I2C_Init+0xe8>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	4a69      	ldr	r2, [pc, #420]	@ (8003c70 <HAL_I2C_Init+0x284>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ae6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	495c      	ldr	r1, [pc, #368]	@ (8003c60 <HAL_I2C_Init+0x274>)
 8003af0:	428b      	cmp	r3, r1
 8003af2:	d819      	bhi.n	8003b28 <HAL_I2C_Init+0x13c>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1e59      	subs	r1, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b02:	1c59      	adds	r1, r3, #1
 8003b04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b08:	400b      	ands	r3, r1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_I2C_Init+0x138>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1e59      	subs	r1, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b22:	e051      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003b24:	2304      	movs	r3, #4
 8003b26:	e04f      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d111      	bne.n	8003b54 <HAL_I2C_Init+0x168>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1e58      	subs	r0, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	440b      	add	r3, r1
 8003b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b42:	3301      	adds	r3, #1
 8003b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e012      	b.n	8003b7a <HAL_I2C_Init+0x18e>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	0099      	lsls	r1, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_I2C_Init+0x196>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e022      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10e      	bne.n	8003ba8 <HAL_I2C_Init+0x1bc>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1e58      	subs	r0, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	440b      	add	r3, r1
 8003b98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba6:	e00f      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e58      	subs	r0, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	0099      	lsls	r1, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	6809      	ldr	r1, [r1, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bf6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6911      	ldr	r1, [r2, #16]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68d2      	ldr	r2, [r2, #12]
 8003c02:	4311      	orrs	r1, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	000186a0 	.word	0x000186a0
 8003c64:	001e847f 	.word	0x001e847f
 8003c68:	003d08ff 	.word	0x003d08ff
 8003c6c:	431bde83 	.word	0x431bde83
 8003c70:	10624dd3 	.word	0x10624dd3

08003c74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	460b      	mov	r3, r1
 8003c82:	817b      	strh	r3, [r7, #10]
 8003c84:	4613      	mov	r3, r2
 8003c86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c88:	f7fe fb74 	bl	8002374 <HAL_GetTick>
 8003c8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	f040 80e0 	bne.w	8003e5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2319      	movs	r3, #25
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4970      	ldr	r1, [pc, #448]	@ (8003e68 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fc64 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0d3      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_I2C_Master_Transmit+0x50>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e0cc      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d007      	beq.n	8003cea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2221      	movs	r2, #33	@ 0x21
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2210      	movs	r2, #16
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	893a      	ldrh	r2, [r7, #8]
 8003d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4a50      	ldr	r2, [pc, #320]	@ (8003e6c <HAL_I2C_Master_Transmit+0x1f8>)
 8003d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d2c:	8979      	ldrh	r1, [r7, #10]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	6a3a      	ldr	r2, [r7, #32]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 face 	bl	80042d4 <I2C_MasterRequestWrite>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e08d      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d58:	e066      	b.n	8003e28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	6a39      	ldr	r1, [r7, #32]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fd22 	bl	80047a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d107      	bne.n	8003d82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06b      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d11b      	bne.n	8003dfc <HAL_I2C_Master_Transmit+0x188>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d017      	beq.n	8003dfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	6a39      	ldr	r1, [r7, #32]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fd19 	bl	8004838 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00d      	beq.n	8003e28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d107      	bne.n	8003e24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e01a      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d194      	bne.n	8003d5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	00100002 	.word	0x00100002
 8003e6c:	ffff0000 	.word	0xffff0000

08003e70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	@ 0x30
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	817b      	strh	r3, [r7, #10]
 8003e80:	4613      	mov	r3, r2
 8003e82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e84:	f7fe fa76 	bl	8002374 <HAL_GetTick>
 8003e88:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	f040 8217 	bne.w	80042c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2319      	movs	r3, #25
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	497c      	ldr	r1, [pc, #496]	@ (8004094 <HAL_I2C_Master_Receive+0x224>)
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fb66 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e20a      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_I2C_Master_Receive+0x50>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e203      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d007      	beq.n	8003ee6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ef4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2222      	movs	r2, #34	@ 0x22
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2210      	movs	r2, #16
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	893a      	ldrh	r2, [r7, #8]
 8003f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a5c      	ldr	r2, [pc, #368]	@ (8004098 <HAL_I2C_Master_Receive+0x228>)
 8003f26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f28:	8979      	ldrh	r1, [r7, #10]
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fa52 	bl	80043d8 <I2C_MasterRequestRead>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e1c4      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e198      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d11b      	bne.n	8003fae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e178      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d11b      	bne.n	8003fee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	e158      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004014:	e144      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401a:	2b03      	cmp	r3, #3
 800401c:	f200 80f1 	bhi.w	8004202 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	2b01      	cmp	r3, #1
 8004026:	d123      	bne.n	8004070 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fc4b 	bl	80048c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e145      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800406e:	e117      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004074:	2b02      	cmp	r3, #2
 8004076:	d14e      	bne.n	8004116 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	2200      	movs	r2, #0
 8004080:	4906      	ldr	r1, [pc, #24]	@ (800409c <HAL_I2C_Master_Receive+0x22c>)
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fa76 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e11a      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
 8004092:	bf00      	nop
 8004094:	00100002 	.word	0x00100002
 8004098:	ffff0000 	.word	0xffff0000
 800409c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004114:	e0c4      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411c:	2200      	movs	r2, #0
 800411e:	496c      	ldr	r1, [pc, #432]	@ (80042d0 <HAL_I2C_Master_Receive+0x460>)
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fa27 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0cb      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	2200      	movs	r2, #0
 800417a:	4955      	ldr	r1, [pc, #340]	@ (80042d0 <HAL_I2C_Master_Receive+0x460>)
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f9f9 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e09d      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004200:	e04e      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004204:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fb5e 	bl	80048c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e058      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d124      	bne.n	80042a0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425a:	2b03      	cmp	r3, #3
 800425c:	d107      	bne.n	800426e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f47f aeb6 	bne.w	8004016 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	@ 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	00010004 	.word	0x00010004

080042d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	460b      	mov	r3, r1
 80042e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d006      	beq.n	80042fe <I2C_MasterRequestWrite+0x2a>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d003      	beq.n	80042fe <I2C_MasterRequestWrite+0x2a>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042fc:	d108      	bne.n	8004310 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e00b      	b.n	8004328 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004314:	2b12      	cmp	r3, #18
 8004316:	d107      	bne.n	8004328 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f91d 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00d      	beq.n	800435c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800434e:	d103      	bne.n	8004358 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e035      	b.n	80043c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004364:	d108      	bne.n	8004378 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004366:	897b      	ldrh	r3, [r7, #10]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004374:	611a      	str	r2, [r3, #16]
 8004376:	e01b      	b.n	80043b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004378:	897b      	ldrh	r3, [r7, #10]
 800437a:	11db      	asrs	r3, r3, #7
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f003 0306 	and.w	r3, r3, #6
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f063 030f 	orn	r3, r3, #15
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	490e      	ldr	r1, [pc, #56]	@ (80043d0 <I2C_MasterRequestWrite+0xfc>)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f966 	bl	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e010      	b.n	80043c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4907      	ldr	r1, [pc, #28]	@ (80043d4 <I2C_MasterRequestWrite+0x100>)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f956 	bl	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	00010008 	.word	0x00010008
 80043d4:	00010002 	.word	0x00010002

080043d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	460b      	mov	r3, r1
 80043e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d006      	beq.n	8004412 <I2C_MasterRequestRead+0x3a>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d003      	beq.n	8004412 <I2C_MasterRequestRead+0x3a>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004410:	d108      	bne.n	8004424 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e00b      	b.n	800443c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004428:	2b11      	cmp	r3, #17
 800442a:	d107      	bne.n	800443c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800443a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f893 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00d      	beq.n	8004470 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004462:	d103      	bne.n	800446c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800446a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e079      	b.n	8004564 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004478:	d108      	bne.n	800448c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800447a:	897b      	ldrh	r3, [r7, #10]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	611a      	str	r2, [r3, #16]
 800448a:	e05f      	b.n	800454c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800448c:	897b      	ldrh	r3, [r7, #10]
 800448e:	11db      	asrs	r3, r3, #7
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f003 0306 	and.w	r3, r3, #6
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f063 030f 	orn	r3, r3, #15
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4930      	ldr	r1, [pc, #192]	@ (800456c <I2C_MasterRequestRead+0x194>)
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f8dc 	bl	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e054      	b.n	8004564 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044ba:	897b      	ldrh	r3, [r7, #10]
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4929      	ldr	r1, [pc, #164]	@ (8004570 <I2C_MasterRequestRead+0x198>)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f8cc 	bl	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e044      	b.n	8004564 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f831 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004526:	d103      	bne.n	8004530 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800452e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e017      	b.n	8004564 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004534:	897b      	ldrh	r3, [r7, #10]
 8004536:	11db      	asrs	r3, r3, #7
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f003 0306 	and.w	r3, r3, #6
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f063 030e 	orn	r3, r3, #14
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4907      	ldr	r1, [pc, #28]	@ (8004570 <I2C_MasterRequestRead+0x198>)
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f888 	bl	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	00010008 	.word	0x00010008
 8004570:	00010002 	.word	0x00010002

08004574 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004584:	e048      	b.n	8004618 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d044      	beq.n	8004618 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458e:	f7fd fef1 	bl	8002374 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d302      	bcc.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d139      	bne.n	8004618 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	0c1b      	lsrs	r3, r3, #16
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d10d      	bne.n	80045ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	43da      	mvns	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	e00c      	b.n	80045e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	43da      	mvns	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4013      	ands	r3, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d116      	bne.n	8004618 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e023      	b.n	8004660 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	0c1b      	lsrs	r3, r3, #16
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d10d      	bne.n	800463e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	43da      	mvns	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4013      	ands	r3, r2
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	e00c      	b.n	8004658 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	43da      	mvns	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4013      	ands	r3, r2
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	429a      	cmp	r2, r3
 800465c:	d093      	beq.n	8004586 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004676:	e071      	b.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004686:	d123      	bne.n	80046d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004696:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	f043 0204 	orr.w	r2, r3, #4
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e067      	b.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d041      	beq.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d8:	f7fd fe4c 	bl	8002374 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d302      	bcc.n	80046ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d136      	bne.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d10c      	bne.n	8004712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	43da      	mvns	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	e00b      	b.n	800472a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	43da      	mvns	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4013      	ands	r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d016      	beq.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	f043 0220 	orr.w	r2, r3, #32
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e021      	b.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10c      	bne.n	8004780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	43da      	mvns	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e00b      	b.n	8004798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	43da      	mvns	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4013      	ands	r3, r2
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	f47f af6d 	bne.w	8004678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b4:	e034      	b.n	8004820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f8e3 	bl	8004982 <I2C_IsAcknowledgeFailed>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e034      	b.n	8004830 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ce:	f7fd fdd1 	bl	8002374 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11d      	bne.n	8004820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ee:	2b80      	cmp	r3, #128	@ 0x80
 80047f0:	d016      	beq.n	8004820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480c:	f043 0220 	orr.w	r2, r3, #32
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e007      	b.n	8004830 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482a:	2b80      	cmp	r3, #128	@ 0x80
 800482c:	d1c3      	bne.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004844:	e034      	b.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f89b 	bl	8004982 <I2C_IsAcknowledgeFailed>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e034      	b.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d028      	beq.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fd fd89 	bl	8002374 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d11d      	bne.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d016      	beq.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f043 0220 	orr.w	r2, r3, #32
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e007      	b.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d1c3      	bne.n	8004846 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048d4:	e049      	b.n	800496a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d119      	bne.n	8004918 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0210 	mvn.w	r2, #16
 80048ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e030      	b.n	800497a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004918:	f7fd fd2c 	bl	8002374 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	429a      	cmp	r2, r3
 8004926:	d302      	bcc.n	800492e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d11d      	bne.n	800496a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	d016      	beq.n	800496a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	f043 0220 	orr.w	r2, r3, #32
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e007      	b.n	800497a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004974:	2b40      	cmp	r3, #64	@ 0x40
 8004976:	d1ae      	bne.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004998:	d11b      	bne.n	80049d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	f043 0204 	orr.w	r2, r3, #4
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e267      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d075      	beq.n	8004aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049fe:	4b88      	ldr	r3, [pc, #544]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d00c      	beq.n	8004a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0a:	4b85      	ldr	r3, [pc, #532]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d112      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a16:	4b82      	ldr	r3, [pc, #520]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a22:	d10b      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4b7e      	ldr	r3, [pc, #504]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d05b      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x108>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d157      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e242      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a44:	d106      	bne.n	8004a54 <HAL_RCC_OscConfig+0x74>
 8004a46:	4b76      	ldr	r3, [pc, #472]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a75      	ldr	r2, [pc, #468]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e01d      	b.n	8004a90 <HAL_RCC_OscConfig+0xb0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x98>
 8004a5e:	4b70      	ldr	r3, [pc, #448]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a6f      	ldr	r2, [pc, #444]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0xb0>
 8004a78:	4b69      	ldr	r3, [pc, #420]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a68      	ldr	r2, [pc, #416]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b66      	ldr	r3, [pc, #408]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a65      	ldr	r2, [pc, #404]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fd fc6c 	bl	8002374 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fd fc68 	bl	8002374 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	@ 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e207      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xc0>
 8004abe:	e014      	b.n	8004aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fd fc58 	bl	8002374 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fd fc54 	bl	8002374 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	@ 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e1f3      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	4b51      	ldr	r3, [pc, #324]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0xe8>
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d063      	beq.n	8004bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004af6:	4b4a      	ldr	r3, [pc, #296]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b02:	4b47      	ldr	r3, [pc, #284]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d11c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0e:	4b44      	ldr	r3, [pc, #272]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d116      	bne.n	8004b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	4b41      	ldr	r3, [pc, #260]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_RCC_OscConfig+0x152>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e1c7      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b32:	4b3b      	ldr	r3, [pc, #236]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4937      	ldr	r1, [pc, #220]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b46:	e03a      	b.n	8004bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b50:	4b34      	ldr	r3, [pc, #208]	@ (8004c24 <HAL_RCC_OscConfig+0x244>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b56:	f7fd fc0d 	bl	8002374 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7fd fc09 	bl	8002374 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1a8      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b70:	4b2b      	ldr	r3, [pc, #172]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7c:	4b28      	ldr	r3, [pc, #160]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4925      	ldr	r1, [pc, #148]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]
 8004b90:	e015      	b.n	8004bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b92:	4b24      	ldr	r3, [pc, #144]	@ (8004c24 <HAL_RCC_OscConfig+0x244>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd fbec 	bl	8002374 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fd fbe8 	bl	8002374 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e187      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d036      	beq.n	8004c38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d016      	beq.n	8004c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd2:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <HAL_RCC_OscConfig+0x248>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd fbcc 	bl	8002374 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be0:	f7fd fbc8 	bl	8002374 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e167      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x200>
 8004bfe:	e01b      	b.n	8004c38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c00:	4b09      	ldr	r3, [pc, #36]	@ (8004c28 <HAL_RCC_OscConfig+0x248>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c06:	f7fd fbb5 	bl	8002374 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c0c:	e00e      	b.n	8004c2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c0e:	f7fd fbb1 	bl	8002374 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d907      	bls.n	8004c2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e150      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
 8004c20:	40023800 	.word	0x40023800
 8004c24:	42470000 	.word	0x42470000
 8004c28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c2c:	4b88      	ldr	r3, [pc, #544]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ea      	bne.n	8004c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8097 	beq.w	8004d74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4a:	4b81      	ldr	r3, [pc, #516]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10f      	bne.n	8004c76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c66:	4b7a      	ldr	r3, [pc, #488]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c72:	2301      	movs	r3, #1
 8004c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c76:	4b77      	ldr	r3, [pc, #476]	@ (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d118      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c82:	4b74      	ldr	r3, [pc, #464]	@ (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a73      	ldr	r2, [pc, #460]	@ (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8e:	f7fd fb71 	bl	8002374 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c96:	f7fd fb6d 	bl	8002374 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e10c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d106      	bne.n	8004cca <HAL_RCC_OscConfig+0x2ea>
 8004cbc:	4b64      	ldr	r3, [pc, #400]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc0:	4a63      	ldr	r2, [pc, #396]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc8:	e01c      	b.n	8004d04 <HAL_RCC_OscConfig+0x324>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b05      	cmp	r3, #5
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0x30c>
 8004cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd6:	4a5e      	ldr	r2, [pc, #376]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	f043 0304 	orr.w	r3, r3, #4
 8004cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cde:	4b5c      	ldr	r3, [pc, #368]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	4a5b      	ldr	r2, [pc, #364]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0x324>
 8004cec:	4b58      	ldr	r3, [pc, #352]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf0:	4a57      	ldr	r2, [pc, #348]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf8:	4b55      	ldr	r3, [pc, #340]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	4a54      	ldr	r2, [pc, #336]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	f023 0304 	bic.w	r3, r3, #4
 8004d02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d015      	beq.n	8004d38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0c:	f7fd fb32 	bl	8002374 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d14:	f7fd fb2e 	bl	8002374 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e0cb      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2a:	4b49      	ldr	r3, [pc, #292]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0ee      	beq.n	8004d14 <HAL_RCC_OscConfig+0x334>
 8004d36:	e014      	b.n	8004d62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d38:	f7fd fb1c 	bl	8002374 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d40:	f7fd fb18 	bl	8002374 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0b5      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d56:	4b3e      	ldr	r3, [pc, #248]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1ee      	bne.n	8004d40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d105      	bne.n	8004d74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d68:	4b39      	ldr	r3, [pc, #228]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	4a38      	ldr	r2, [pc, #224]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80a1 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d7e:	4b34      	ldr	r3, [pc, #208]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d05c      	beq.n	8004e44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d141      	bne.n	8004e16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d92:	4b31      	ldr	r3, [pc, #196]	@ (8004e58 <HAL_RCC_OscConfig+0x478>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fd faec 	bl	8002374 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da0:	f7fd fae8 	bl	8002374 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e087      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db2:	4b27      	ldr	r3, [pc, #156]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	491b      	ldr	r1, [pc, #108]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e58 <HAL_RCC_OscConfig+0x478>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dee:	f7fd fac1 	bl	8002374 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df6:	f7fd fabd 	bl	8002374 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e05c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e08:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x416>
 8004e14:	e054      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e16:	4b10      	ldr	r3, [pc, #64]	@ (8004e58 <HAL_RCC_OscConfig+0x478>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fd faaa 	bl	8002374 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e24:	f7fd faa6 	bl	8002374 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e045      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e36:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x444>
 8004e42:	e03d      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e038      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40007000 	.word	0x40007000
 8004e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ecc <HAL_RCC_OscConfig+0x4ec>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d028      	beq.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d121      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d11a      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d111      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d107      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800

08004ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0cc      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b68      	ldr	r3, [pc, #416]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d90c      	bls.n	8004f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b65      	ldr	r3, [pc, #404]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b63      	ldr	r3, [pc, #396]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0b8      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f24:	4b59      	ldr	r3, [pc, #356]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4a58      	ldr	r2, [pc, #352]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f3c:	4b53      	ldr	r3, [pc, #332]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4a52      	ldr	r2, [pc, #328]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b50      	ldr	r3, [pc, #320]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	494d      	ldr	r1, [pc, #308]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d044      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6e:	4b47      	ldr	r3, [pc, #284]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d119      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e07f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d003      	beq.n	8004f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e06f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e067      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fae:	4b37      	ldr	r3, [pc, #220]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 0203 	bic.w	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4934      	ldr	r1, [pc, #208]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc0:	f7fd f9d8 	bl	8002374 <HAL_GetTick>
 8004fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc8:	f7fd f9d4 	bl	8002374 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e04f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fde:	4b2b      	ldr	r3, [pc, #172]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 020c 	and.w	r2, r3, #12
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d1eb      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b25      	ldr	r3, [pc, #148]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d20c      	bcs.n	8005018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b22      	ldr	r3, [pc, #136]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b20      	ldr	r3, [pc, #128]	@ (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e032      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005024:	4b19      	ldr	r3, [pc, #100]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4916      	ldr	r1, [pc, #88]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005042:	4b12      	ldr	r3, [pc, #72]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	490e      	ldr	r1, [pc, #56]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005056:	f000 f821 	bl	800509c <HAL_RCC_GetSysClockFreq>
 800505a:	4602      	mov	r2, r0
 800505c:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	490a      	ldr	r1, [pc, #40]	@ (8005090 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	5ccb      	ldrb	r3, [r1, r3]
 800506a:	fa22 f303 	lsr.w	r3, r2, r3
 800506e:	4a09      	ldr	r2, [pc, #36]	@ (8005094 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005072:	4b09      	ldr	r3, [pc, #36]	@ (8005098 <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd f938 	bl	80022ec <HAL_InitTick>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40023c00 	.word	0x40023c00
 800508c:	40023800 	.word	0x40023800
 8005090:	0800cc14 	.word	0x0800cc14
 8005094:	20000000 	.word	0x20000000
 8005098:	20000004 	.word	0x20000004

0800509c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800509c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a0:	b094      	sub	sp, #80	@ 0x50
 80050a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a8:	2300      	movs	r3, #0
 80050aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ac:	2300      	movs	r3, #0
 80050ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b4:	4b79      	ldr	r3, [pc, #484]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 030c 	and.w	r3, r3, #12
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d00d      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x40>
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	f200 80e1 	bhi.w	8005288 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x34>
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d003      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80050ce:	e0db      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d0:	4b73      	ldr	r3, [pc, #460]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80050d2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80050d4:	e0db      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050d6:	4b73      	ldr	r3, [pc, #460]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80050d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050da:	e0d8      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050dc:	4b6f      	ldr	r3, [pc, #444]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050e6:	4b6d      	ldr	r3, [pc, #436]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d063      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f2:	4b6a      	ldr	r3, [pc, #424]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	099b      	lsrs	r3, r3, #6
 80050f8:	2200      	movs	r2, #0
 80050fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
 8005106:	2300      	movs	r3, #0
 8005108:	637b      	str	r3, [r7, #52]	@ 0x34
 800510a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800510e:	4622      	mov	r2, r4
 8005110:	462b      	mov	r3, r5
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f04f 0100 	mov.w	r1, #0
 800511a:	0159      	lsls	r1, r3, #5
 800511c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005120:	0150      	lsls	r0, r2, #5
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4621      	mov	r1, r4
 8005128:	1a51      	subs	r1, r2, r1
 800512a:	6139      	str	r1, [r7, #16]
 800512c:	4629      	mov	r1, r5
 800512e:	eb63 0301 	sbc.w	r3, r3, r1
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005140:	4659      	mov	r1, fp
 8005142:	018b      	lsls	r3, r1, #6
 8005144:	4651      	mov	r1, sl
 8005146:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800514a:	4651      	mov	r1, sl
 800514c:	018a      	lsls	r2, r1, #6
 800514e:	4651      	mov	r1, sl
 8005150:	ebb2 0801 	subs.w	r8, r2, r1
 8005154:	4659      	mov	r1, fp
 8005156:	eb63 0901 	sbc.w	r9, r3, r1
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800516a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800516e:	4690      	mov	r8, r2
 8005170:	4699      	mov	r9, r3
 8005172:	4623      	mov	r3, r4
 8005174:	eb18 0303 	adds.w	r3, r8, r3
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	462b      	mov	r3, r5
 800517c:	eb49 0303 	adc.w	r3, r9, r3
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800518e:	4629      	mov	r1, r5
 8005190:	024b      	lsls	r3, r1, #9
 8005192:	4621      	mov	r1, r4
 8005194:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005198:	4621      	mov	r1, r4
 800519a:	024a      	lsls	r2, r1, #9
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a2:	2200      	movs	r2, #0
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ac:	f7fb fcfc 	bl	8000ba8 <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4613      	mov	r3, r2
 80051b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b8:	e058      	b.n	800526c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ba:	4b38      	ldr	r3, [pc, #224]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	099b      	lsrs	r3, r3, #6
 80051c0:	2200      	movs	r2, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	4611      	mov	r1, r2
 80051c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ca:	623b      	str	r3, [r7, #32]
 80051cc:	2300      	movs	r3, #0
 80051ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80051d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	f04f 0000 	mov.w	r0, #0
 80051dc:	f04f 0100 	mov.w	r1, #0
 80051e0:	0159      	lsls	r1, r3, #5
 80051e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051e6:	0150      	lsls	r0, r2, #5
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4641      	mov	r1, r8
 80051ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80051f2:	4649      	mov	r1, r9
 80051f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005204:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005208:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800520c:	ebb2 040a 	subs.w	r4, r2, sl
 8005210:	eb63 050b 	sbc.w	r5, r3, fp
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	00eb      	lsls	r3, r5, #3
 800521e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005222:	00e2      	lsls	r2, r4, #3
 8005224:	4614      	mov	r4, r2
 8005226:	461d      	mov	r5, r3
 8005228:	4643      	mov	r3, r8
 800522a:	18e3      	adds	r3, r4, r3
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	464b      	mov	r3, r9
 8005230:	eb45 0303 	adc.w	r3, r5, r3
 8005234:	607b      	str	r3, [r7, #4]
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005242:	4629      	mov	r1, r5
 8005244:	028b      	lsls	r3, r1, #10
 8005246:	4621      	mov	r1, r4
 8005248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800524c:	4621      	mov	r1, r4
 800524e:	028a      	lsls	r2, r1, #10
 8005250:	4610      	mov	r0, r2
 8005252:	4619      	mov	r1, r3
 8005254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005256:	2200      	movs	r2, #0
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	61fa      	str	r2, [r7, #28]
 800525c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005260:	f7fb fca2 	bl	8000ba8 <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4613      	mov	r3, r2
 800526a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800526c:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <HAL_RCC_GetSysClockFreq+0x200>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	3301      	adds	r3, #1
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800527c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800527e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005286:	e002      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005288:	4b05      	ldr	r3, [pc, #20]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800528a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800528c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800528e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005290:	4618      	mov	r0, r3
 8005292:	3750      	adds	r7, #80	@ 0x50
 8005294:	46bd      	mov	sp, r7
 8005296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	007a1200 	.word	0x007a1200

080052a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052ac:	4b03      	ldr	r3, [pc, #12]	@ (80052bc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ae:	681b      	ldr	r3, [r3, #0]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000000 	.word	0x20000000

080052c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052c4:	f7ff fff0 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	0a9b      	lsrs	r3, r3, #10
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4903      	ldr	r1, [pc, #12]	@ (80052e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40023800 	.word	0x40023800
 80052e4:	0800cc24 	.word	0x0800cc24

080052e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052ec:	f7ff ffdc 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	0b5b      	lsrs	r3, r3, #13
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4903      	ldr	r1, [pc, #12]	@ (800530c <HAL_RCC_GetPCLK2Freq+0x24>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40023800 	.word	0x40023800
 800530c:	0800cc24 	.word	0x0800cc24

08005310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e07b      	b.n	800541a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d108      	bne.n	800533c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005332:	d009      	beq.n	8005348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	61da      	str	r2, [r3, #28]
 800533a:	e005      	b.n	8005348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fc fcee 	bl	8001d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800537e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053cc:	ea42 0103 	orr.w	r1, r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	0c1b      	lsrs	r3, r3, #16
 80053e6:	f003 0104 	and.w	r1, r3, #4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	f003 0210 	and.w	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005408:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b088      	sub	sp, #32
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_SPI_Transmit+0x22>
 8005440:	2302      	movs	r3, #2
 8005442:	e12d      	b.n	80056a0 <HAL_SPI_Transmit+0x27e>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800544c:	f7fc ff92 	bl	8002374 <HAL_GetTick>
 8005450:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b01      	cmp	r3, #1
 8005460:	d002      	beq.n	8005468 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005462:	2302      	movs	r3, #2
 8005464:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005466:	e116      	b.n	8005696 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_SPI_Transmit+0x52>
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005478:	e10d      	b.n	8005696 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2203      	movs	r2, #3
 800547e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	88fa      	ldrh	r2, [r7, #6]
 8005492:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c0:	d10f      	bne.n	80054e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ec:	2b40      	cmp	r3, #64	@ 0x40
 80054ee:	d007      	beq.n	8005500 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005508:	d14f      	bne.n	80055aa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_SPI_Transmit+0xf6>
 8005512:	8afb      	ldrh	r3, [r7, #22]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d142      	bne.n	800559e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551c:	881a      	ldrh	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005528:	1c9a      	adds	r2, r3, #2
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800553c:	e02f      	b.n	800559e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b02      	cmp	r3, #2
 800554a:	d112      	bne.n	8005572 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005550:	881a      	ldrh	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555c:	1c9a      	adds	r2, r3, #2
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005570:	e015      	b.n	800559e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005572:	f7fc feff 	bl	8002374 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d803      	bhi.n	800558a <HAL_SPI_Transmit+0x168>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d102      	bne.n	8005590 <HAL_SPI_Transmit+0x16e>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d106      	bne.n	800559e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800559c:	e07b      	b.n	8005696 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1ca      	bne.n	800553e <HAL_SPI_Transmit+0x11c>
 80055a8:	e050      	b.n	800564c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Transmit+0x196>
 80055b2:	8afb      	ldrh	r3, [r7, #22]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d144      	bne.n	8005642 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	7812      	ldrb	r2, [r2, #0]
 80055c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055de:	e030      	b.n	8005642 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d113      	bne.n	8005616 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005614:	e015      	b.n	8005642 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005616:	f7fc fead 	bl	8002374 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d803      	bhi.n	800562e <HAL_SPI_Transmit+0x20c>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d102      	bne.n	8005634 <HAL_SPI_Transmit+0x212>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005640:	e029      	b.n	8005696 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1c9      	bne.n	80055e0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f8b1 	bl	80057b8 <SPI_EndRxTxTransaction>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	e003      	b.n	8005696 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800569e:	7ffb      	ldrb	r3, [r7, #31]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4613      	mov	r3, r2
 80056b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056b8:	f7fc fe5c 	bl	8002374 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	4413      	add	r3, r2
 80056c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056c8:	f7fc fe54 	bl	8002374 <HAL_GetTick>
 80056cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056ce:	4b39      	ldr	r3, [pc, #228]	@ (80057b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	015b      	lsls	r3, r3, #5
 80056d4:	0d1b      	lsrs	r3, r3, #20
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	fb02 f303 	mul.w	r3, r2, r3
 80056dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056de:	e054      	b.n	800578a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d050      	beq.n	800578a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056e8:	f7fc fe44 	bl	8002374 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d902      	bls.n	80056fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d13d      	bne.n	800577a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800570c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005716:	d111      	bne.n	800573c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005720:	d004      	beq.n	800572c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800572a:	d107      	bne.n	800573c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800573a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005744:	d10f      	bne.n	8005766 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005764:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e017      	b.n	80057aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	3b01      	subs	r3, #1
 8005788:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4013      	ands	r3, r2
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	bf0c      	ite	eq
 800579a:	2301      	moveq	r3, #1
 800579c:	2300      	movne	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d19b      	bne.n	80056e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3720      	adds	r7, #32
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000000 	.word	0x20000000

080057b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2201      	movs	r2, #1
 80057cc:	2102      	movs	r1, #2
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7ff ff6a 	bl	80056a8 <SPI_WaitFlagStateUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057de:	f043 0220 	orr.w	r2, r3, #32
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e032      	b.n	8005850 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005858 <SPI_EndRxTxTransaction+0xa0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1b      	ldr	r2, [pc, #108]	@ (800585c <SPI_EndRxTxTransaction+0xa4>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	0d5b      	lsrs	r3, r3, #21
 80057f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005808:	d112      	bne.n	8005830 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2200      	movs	r2, #0
 8005812:	2180      	movs	r1, #128	@ 0x80
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff ff47 	bl	80056a8 <SPI_WaitFlagStateUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d016      	beq.n	800584e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e00f      	b.n	8005850 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	3b01      	subs	r3, #1
 800583a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005846:	2b80      	cmp	r3, #128	@ 0x80
 8005848:	d0f2      	beq.n	8005830 <SPI_EndRxTxTransaction+0x78>
 800584a:	e000      	b.n	800584e <SPI_EndRxTxTransaction+0x96>
        break;
 800584c:	bf00      	nop
  }

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000000 	.word	0x20000000
 800585c:	165e9f81 	.word	0x165e9f81

08005860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e041      	b.n	80058f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fc faa4 	bl	8001dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f000 fad8 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e041      	b.n	8005994 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f839 	bl	800599c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3304      	adds	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f000 fa89 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <HAL_TIM_PWM_Start+0x24>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	e022      	b.n	8005a1a <HAL_TIM_PWM_Start+0x6a>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d109      	bne.n	80059ee <HAL_TIM_PWM_Start+0x3e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	bf14      	ite	ne
 80059e6:	2301      	movne	r3, #1
 80059e8:	2300      	moveq	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	e015      	b.n	8005a1a <HAL_TIM_PWM_Start+0x6a>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d109      	bne.n	8005a08 <HAL_TIM_PWM_Start+0x58>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e008      	b.n	8005a1a <HAL_TIM_PWM_Start+0x6a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	bf14      	ite	ne
 8005a14:	2301      	movne	r3, #1
 8005a16:	2300      	moveq	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e07c      	b.n	8005b1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_PWM_Start+0x82>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a30:	e013      	b.n	8005a5a <HAL_TIM_PWM_Start+0xaa>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_PWM_Start+0x92>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a40:	e00b      	b.n	8005a5a <HAL_TIM_PWM_Start+0xaa>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Start+0xa2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a50:	e003      	b.n	8005a5a <HAL_TIM_PWM_Start+0xaa>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fcec 	bl	8006440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b24 <HAL_TIM_PWM_Start+0x174>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_TIM_PWM_Start+0xcc>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2c      	ldr	r2, [pc, #176]	@ (8005b28 <HAL_TIM_PWM_Start+0x178>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_PWM_Start+0xd0>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <HAL_TIM_PWM_Start+0xd2>
 8005a80:	2300      	movs	r3, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a22      	ldr	r2, [pc, #136]	@ (8005b24 <HAL_TIM_PWM_Start+0x174>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d022      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x136>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa8:	d01d      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x136>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1f      	ldr	r2, [pc, #124]	@ (8005b2c <HAL_TIM_PWM_Start+0x17c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d018      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x136>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b30 <HAL_TIM_PWM_Start+0x180>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x136>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b34 <HAL_TIM_PWM_Start+0x184>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x136>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a16      	ldr	r2, [pc, #88]	@ (8005b28 <HAL_TIM_PWM_Start+0x178>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x136>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a18      	ldr	r2, [pc, #96]	@ (8005b38 <HAL_TIM_PWM_Start+0x188>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x136>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a16      	ldr	r2, [pc, #88]	@ (8005b3c <HAL_TIM_PWM_Start+0x18c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d111      	bne.n	8005b0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d010      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b08:	e007      	b.n	8005b1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40010400 	.word	0x40010400
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40001800 	.word	0x40001800

08005b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e0ae      	b.n	8005cbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b0c      	cmp	r3, #12
 8005b6a:	f200 809f 	bhi.w	8005cac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005ba9 	.word	0x08005ba9
 8005b78:	08005cad 	.word	0x08005cad
 8005b7c:	08005cad 	.word	0x08005cad
 8005b80:	08005cad 	.word	0x08005cad
 8005b84:	08005be9 	.word	0x08005be9
 8005b88:	08005cad 	.word	0x08005cad
 8005b8c:	08005cad 	.word	0x08005cad
 8005b90:	08005cad 	.word	0x08005cad
 8005b94:	08005c2b 	.word	0x08005c2b
 8005b98:	08005cad 	.word	0x08005cad
 8005b9c:	08005cad 	.word	0x08005cad
 8005ba0:	08005cad 	.word	0x08005cad
 8005ba4:	08005c6b 	.word	0x08005c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f9fc 	bl	8005fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0208 	orr.w	r2, r2, #8
 8005bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0204 	bic.w	r2, r2, #4
 8005bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6999      	ldr	r1, [r3, #24]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	619a      	str	r2, [r3, #24]
      break;
 8005be6:	e064      	b.n	8005cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fa4c 	bl	800608c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6999      	ldr	r1, [r3, #24]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	021a      	lsls	r2, r3, #8
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	619a      	str	r2, [r3, #24]
      break;
 8005c28:	e043      	b.n	8005cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 faa1 	bl	8006178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0208 	orr.w	r2, r2, #8
 8005c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0204 	bic.w	r2, r2, #4
 8005c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69d9      	ldr	r1, [r3, #28]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	691a      	ldr	r2, [r3, #16]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	61da      	str	r2, [r3, #28]
      break;
 8005c68:	e023      	b.n	8005cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 faf5 	bl	8006260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69d9      	ldr	r1, [r3, #28]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	021a      	lsls	r2, r3, #8
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	61da      	str	r2, [r3, #28]
      break;
 8005caa:	e002      	b.n	8005cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e0b4      	b.n	8005e4a <HAL_TIM_ConfigClockSource+0x186>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d18:	d03e      	beq.n	8005d98 <HAL_TIM_ConfigClockSource+0xd4>
 8005d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d1e:	f200 8087 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d26:	f000 8086 	beq.w	8005e36 <HAL_TIM_ConfigClockSource+0x172>
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2e:	d87f      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b70      	cmp	r3, #112	@ 0x70
 8005d32:	d01a      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0xa6>
 8005d34:	2b70      	cmp	r3, #112	@ 0x70
 8005d36:	d87b      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d38:	2b60      	cmp	r3, #96	@ 0x60
 8005d3a:	d050      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x11a>
 8005d3c:	2b60      	cmp	r3, #96	@ 0x60
 8005d3e:	d877      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d40:	2b50      	cmp	r3, #80	@ 0x50
 8005d42:	d03c      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0xfa>
 8005d44:	2b50      	cmp	r3, #80	@ 0x50
 8005d46:	d873      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d48:	2b40      	cmp	r3, #64	@ 0x40
 8005d4a:	d058      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x13a>
 8005d4c:	2b40      	cmp	r3, #64	@ 0x40
 8005d4e:	d86f      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d50:	2b30      	cmp	r3, #48	@ 0x30
 8005d52:	d064      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x15a>
 8005d54:	2b30      	cmp	r3, #48	@ 0x30
 8005d56:	d86b      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d060      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x15a>
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d867      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d05c      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x15a>
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d05a      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x15a>
 8005d68:	e062      	b.n	8005e30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d7a:	f000 fb41 	bl	8006400 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	609a      	str	r2, [r3, #8]
      break;
 8005d96:	e04f      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005da8:	f000 fb2a 	bl	8006400 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dba:	609a      	str	r2, [r3, #8]
      break;
 8005dbc:	e03c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f000 fa9e 	bl	800630c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2150      	movs	r1, #80	@ 0x50
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 faf7 	bl	80063ca <TIM_ITRx_SetConfig>
      break;
 8005ddc:	e02c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dea:	461a      	mov	r2, r3
 8005dec:	f000 fabd 	bl	800636a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2160      	movs	r1, #96	@ 0x60
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fae7 	bl	80063ca <TIM_ITRx_SetConfig>
      break;
 8005dfc:	e01c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f000 fa7e 	bl	800630c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2140      	movs	r1, #64	@ 0x40
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fad7 	bl	80063ca <TIM_ITRx_SetConfig>
      break;
 8005e1c:	e00c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f000 face 	bl	80063ca <TIM_ITRx_SetConfig>
      break;
 8005e2e:	e003      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
      break;
 8005e34:	e000      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a46      	ldr	r2, [pc, #280]	@ (8005f80 <TIM_Base_SetConfig+0x12c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <TIM_Base_SetConfig+0x40>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e72:	d00f      	beq.n	8005e94 <TIM_Base_SetConfig+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a43      	ldr	r2, [pc, #268]	@ (8005f84 <TIM_Base_SetConfig+0x130>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <TIM_Base_SetConfig+0x40>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a42      	ldr	r2, [pc, #264]	@ (8005f88 <TIM_Base_SetConfig+0x134>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <TIM_Base_SetConfig+0x40>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a41      	ldr	r2, [pc, #260]	@ (8005f8c <TIM_Base_SetConfig+0x138>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_Base_SetConfig+0x40>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a40      	ldr	r2, [pc, #256]	@ (8005f90 <TIM_Base_SetConfig+0x13c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d108      	bne.n	8005ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a35      	ldr	r2, [pc, #212]	@ (8005f80 <TIM_Base_SetConfig+0x12c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d02b      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb4:	d027      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a32      	ldr	r2, [pc, #200]	@ (8005f84 <TIM_Base_SetConfig+0x130>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d023      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a31      	ldr	r2, [pc, #196]	@ (8005f88 <TIM_Base_SetConfig+0x134>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d01f      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a30      	ldr	r2, [pc, #192]	@ (8005f8c <TIM_Base_SetConfig+0x138>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01b      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a2f      	ldr	r2, [pc, #188]	@ (8005f90 <TIM_Base_SetConfig+0x13c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d017      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8005f94 <TIM_Base_SetConfig+0x140>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d013      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f98 <TIM_Base_SetConfig+0x144>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00f      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8005f9c <TIM_Base_SetConfig+0x148>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00b      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8005fa0 <TIM_Base_SetConfig+0x14c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d007      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa4 <TIM_Base_SetConfig+0x150>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d003      	beq.n	8005f06 <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a29      	ldr	r2, [pc, #164]	@ (8005fa8 <TIM_Base_SetConfig+0x154>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d108      	bne.n	8005f18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a10      	ldr	r2, [pc, #64]	@ (8005f80 <TIM_Base_SetConfig+0x12c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_Base_SetConfig+0xf8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a12      	ldr	r2, [pc, #72]	@ (8005f90 <TIM_Base_SetConfig+0x13c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d103      	bne.n	8005f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d105      	bne.n	8005f72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f023 0201 	bic.w	r2, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	611a      	str	r2, [r3, #16]
  }
}
 8005f72:	bf00      	nop
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40010000 	.word	0x40010000
 8005f84:	40000400 	.word	0x40000400
 8005f88:	40000800 	.word	0x40000800
 8005f8c:	40000c00 	.word	0x40000c00
 8005f90:	40010400 	.word	0x40010400
 8005f94:	40014000 	.word	0x40014000
 8005f98:	40014400 	.word	0x40014400
 8005f9c:	40014800 	.word	0x40014800
 8005fa0:	40001800 	.word	0x40001800
 8005fa4:	40001c00 	.word	0x40001c00
 8005fa8:	40002000 	.word	0x40002000

08005fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f023 0201 	bic.w	r2, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0303 	bic.w	r3, r3, #3
 8005fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 0302 	bic.w	r3, r3, #2
 8005ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a20      	ldr	r2, [pc, #128]	@ (8006084 <TIM_OC1_SetConfig+0xd8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_OC1_SetConfig+0x64>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a1f      	ldr	r2, [pc, #124]	@ (8006088 <TIM_OC1_SetConfig+0xdc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10c      	bne.n	800602a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0308 	bic.w	r3, r3, #8
 8006016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 0304 	bic.w	r3, r3, #4
 8006028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a15      	ldr	r2, [pc, #84]	@ (8006084 <TIM_OC1_SetConfig+0xd8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_OC1_SetConfig+0x8e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a14      	ldr	r2, [pc, #80]	@ (8006088 <TIM_OC1_SetConfig+0xdc>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d111      	bne.n	800605e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	621a      	str	r2, [r3, #32]
}
 8006078:	bf00      	nop
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	40010000 	.word	0x40010000
 8006088:	40010400 	.word	0x40010400

0800608c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f023 0210 	bic.w	r2, r3, #16
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0320 	bic.w	r3, r3, #32
 80060d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a22      	ldr	r2, [pc, #136]	@ (8006170 <TIM_OC2_SetConfig+0xe4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_OC2_SetConfig+0x68>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a21      	ldr	r2, [pc, #132]	@ (8006174 <TIM_OC2_SetConfig+0xe8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d10d      	bne.n	8006110 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800610e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a17      	ldr	r2, [pc, #92]	@ (8006170 <TIM_OC2_SetConfig+0xe4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d003      	beq.n	8006120 <TIM_OC2_SetConfig+0x94>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a16      	ldr	r2, [pc, #88]	@ (8006174 <TIM_OC2_SetConfig+0xe8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d113      	bne.n	8006148 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800612e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	621a      	str	r2, [r3, #32]
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40010000 	.word	0x40010000
 8006174:	40010400 	.word	0x40010400

08006178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a21      	ldr	r2, [pc, #132]	@ (8006258 <TIM_OC3_SetConfig+0xe0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d003      	beq.n	80061de <TIM_OC3_SetConfig+0x66>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a20      	ldr	r2, [pc, #128]	@ (800625c <TIM_OC3_SetConfig+0xe4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d10d      	bne.n	80061fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a16      	ldr	r2, [pc, #88]	@ (8006258 <TIM_OC3_SetConfig+0xe0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_OC3_SetConfig+0x92>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a15      	ldr	r2, [pc, #84]	@ (800625c <TIM_OC3_SetConfig+0xe4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d113      	bne.n	8006232 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	621a      	str	r2, [r3, #32]
}
 800624c:	bf00      	nop
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	40010000 	.word	0x40010000
 800625c:	40010400 	.word	0x40010400

08006260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	021b      	lsls	r3, r3, #8
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	031b      	lsls	r3, r3, #12
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a12      	ldr	r2, [pc, #72]	@ (8006304 <TIM_OC4_SetConfig+0xa4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_OC4_SetConfig+0x68>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a11      	ldr	r2, [pc, #68]	@ (8006308 <TIM_OC4_SetConfig+0xa8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d109      	bne.n	80062dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	019b      	lsls	r3, r3, #6
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40010000 	.word	0x40010000
 8006308:	40010400 	.word	0x40010400

0800630c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f023 0201 	bic.w	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f023 030a 	bic.w	r3, r3, #10
 8006348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800636a:	b480      	push	{r7}
 800636c:	b087      	sub	sp, #28
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	f023 0210 	bic.w	r2, r3, #16
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	031b      	lsls	r3, r3, #12
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f043 0307 	orr.w	r3, r3, #7
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	609a      	str	r2, [r3, #8]
}
 80063f4:	bf00      	nop
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800641a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	021a      	lsls	r2, r3, #8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	431a      	orrs	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4313      	orrs	r3, r2
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	609a      	str	r2, [r3, #8]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f003 031f 	and.w	r3, r3, #31
 8006452:	2201      	movs	r2, #1
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	43db      	mvns	r3, r3
 8006462:	401a      	ands	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	fa01 f303 	lsl.w	r3, r1, r3
 8006478:	431a      	orrs	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e05a      	b.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a21      	ldr	r2, [pc, #132]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d022      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f0:	d01d      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1d      	ldr	r2, [pc, #116]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d018      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1b      	ldr	r2, [pc, #108]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1a      	ldr	r2, [pc, #104]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00e      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a18      	ldr	r2, [pc, #96]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d009      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a17      	ldr	r2, [pc, #92]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d10c      	bne.n	8006548 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40010000 	.word	0x40010000
 800656c:	40000400 	.word	0x40000400
 8006570:	40000800 	.word	0x40000800
 8006574:	40000c00 	.word	0x40000c00
 8006578:	40010400 	.word	0x40010400
 800657c:	40014000 	.word	0x40014000
 8006580:	40001800 	.word	0x40001800

08006584 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800659c:	2302      	movs	r3, #2
 800659e:	e03d      	b.n	800661c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e042      	b.n	80066c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fb fc4e 	bl	8001ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2224      	movs	r2, #36	@ 0x24
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800666a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fd69 	bl	8007144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	@ 0x28
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d175      	bne.n	80067d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <HAL_UART_Transmit+0x2c>
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e06e      	b.n	80067d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2221      	movs	r2, #33	@ 0x21
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006706:	f7fb fe35 	bl	8002374 <HAL_GetTick>
 800670a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	88fa      	ldrh	r2, [r7, #6]
 8006710:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	88fa      	ldrh	r2, [r7, #6]
 8006716:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006720:	d108      	bne.n	8006734 <HAL_UART_Transmit+0x6c>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	e003      	b.n	800673c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006738:	2300      	movs	r3, #0
 800673a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800673c:	e02e      	b.n	800679c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2200      	movs	r2, #0
 8006746:	2180      	movs	r1, #128	@ 0x80
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 fb05 	bl	8006d58 <UART_WaitOnFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e03a      	b.n	80067d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006774:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	3302      	adds	r3, #2
 800677a:	61bb      	str	r3, [r7, #24]
 800677c:	e007      	b.n	800678e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	3301      	adds	r3, #1
 800678c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1cb      	bne.n	800673e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2140      	movs	r1, #64	@ 0x40
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fad1 	bl	8006d58 <UART_WaitOnFlagUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e006      	b.n	80067d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e000      	b.n	80067d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80067d4:	2302      	movs	r3, #2
  }
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b0ba      	sub	sp, #232	@ 0xe8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006806:	2300      	movs	r3, #0
 8006808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800680c:	2300      	movs	r3, #0
 800680e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800681e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <HAL_UART_IRQHandler+0x66>
 8006832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fbc2 	bl	8006fc8 <UART_Receive_IT>
      return;
 8006844:	e25b      	b.n	8006cfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 80de 	beq.w	8006a0c <HAL_UART_IRQHandler+0x22c>
 8006850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800685c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006860:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80d1 	beq.w	8006a0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800686a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <HAL_UART_IRQHandler+0xae>
 8006876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800687a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006886:	f043 0201 	orr.w	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00b      	beq.n	80068b2 <HAL_UART_IRQHandler+0xd2>
 800689a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068aa:	f043 0202 	orr.w	r2, r3, #2
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00b      	beq.n	80068d6 <HAL_UART_IRQHandler+0xf6>
 80068be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ce:	f043 0204 	orr.w	r2, r3, #4
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d011      	beq.n	8006906 <HAL_UART_IRQHandler+0x126>
 80068e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d105      	bne.n	80068fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068fe:	f043 0208 	orr.w	r2, r3, #8
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 81f2 	beq.w	8006cf4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_UART_IRQHandler+0x14e>
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fb4d 	bl	8006fc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006938:	2b40      	cmp	r3, #64	@ 0x40
 800693a:	bf0c      	ite	eq
 800693c:	2301      	moveq	r3, #1
 800693e:	2300      	movne	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <HAL_UART_IRQHandler+0x17a>
 8006952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006956:	2b00      	cmp	r3, #0
 8006958:	d04f      	beq.n	80069fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa55 	bl	8006e0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696a:	2b40      	cmp	r3, #64	@ 0x40
 800696c:	d141      	bne.n	80069f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3314      	adds	r3, #20
 8006974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006984:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800698c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3314      	adds	r3, #20
 8006996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800699a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800699e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1d9      	bne.n	800696e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d013      	beq.n	80069ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c6:	4a7e      	ldr	r2, [pc, #504]	@ (8006bc0 <HAL_UART_IRQHandler+0x3e0>)
 80069c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fc fb9a 	bl	8003108 <HAL_DMA_Abort_IT>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d016      	beq.n	8006a08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80069e4:	4610      	mov	r0, r2
 80069e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e8:	e00e      	b.n	8006a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f99e 	bl	8006d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	e00a      	b.n	8006a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f99a 	bl	8006d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f8:	e006      	b.n	8006a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f996 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a06:	e175      	b.n	8006cf4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a08:	bf00      	nop
    return;
 8006a0a:	e173      	b.n	8006cf4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	f040 814f 	bne.w	8006cb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a1a:	f003 0310 	and.w	r3, r3, #16
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 8148 	beq.w	8006cb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8141 	beq.w	8006cb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a32:	2300      	movs	r3, #0
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a52:	2b40      	cmp	r3, #64	@ 0x40
 8006a54:	f040 80b6 	bne.w	8006bc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8145 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a76:	429a      	cmp	r2, r3
 8006a78:	f080 813e 	bcs.w	8006cf8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a8e:	f000 8088 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006abe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1d9      	bne.n	8006a92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3314      	adds	r3, #20
 8006ae4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e1      	bne.n	8006ade <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3314      	adds	r3, #20
 8006b20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3314      	adds	r3, #20
 8006b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e3      	bne.n	8006b1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b72:	f023 0310 	bic.w	r3, r3, #16
 8006b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	330c      	adds	r3, #12
 8006b80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e3      	bne.n	8006b60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fc fa43 	bl	8003028 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f8c1 	bl	8006d40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bbe:	e09b      	b.n	8006cf8 <HAL_UART_IRQHandler+0x518>
 8006bc0:	08006ed1 	.word	0x08006ed1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 808e 	beq.w	8006cfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006be0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8089 	beq.w	8006cfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	330c      	adds	r3, #12
 8006c0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e3      	bne.n	8006bea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3314      	adds	r3, #20
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	623b      	str	r3, [r7, #32]
   return(result);
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	f023 0301 	bic.w	r3, r3, #1
 8006c38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3314      	adds	r3, #20
 8006c42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c46:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e3      	bne.n	8006c22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	330c      	adds	r3, #12
 8006c6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0310 	bic.w	r3, r3, #16
 8006c7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c8c:	61fa      	str	r2, [r7, #28]
 8006c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	69b9      	ldr	r1, [r7, #24]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	617b      	str	r3, [r7, #20]
   return(result);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e3      	bne.n	8006c68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ca6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f847 	bl	8006d40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cb2:	e023      	b.n	8006cfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x4f4>
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f913 	bl	8006ef8 <UART_Transmit_IT>
    return;
 8006cd2:	e014      	b.n	8006cfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00e      	beq.n	8006cfe <HAL_UART_IRQHandler+0x51e>
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f953 	bl	8006f98 <UART_EndTransmit_IT>
    return;
 8006cf2:	e004      	b.n	8006cfe <HAL_UART_IRQHandler+0x51e>
    return;
 8006cf4:	bf00      	nop
 8006cf6:	e002      	b.n	8006cfe <HAL_UART_IRQHandler+0x51e>
      return;
 8006cf8:	bf00      	nop
 8006cfa:	e000      	b.n	8006cfe <HAL_UART_IRQHandler+0x51e>
      return;
 8006cfc:	bf00      	nop
  }
}
 8006cfe:	37e8      	adds	r7, #232	@ 0xe8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	4613      	mov	r3, r2
 8006d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d68:	e03b      	b.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d037      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d72:	f7fb faff 	bl	8002374 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	6a3a      	ldr	r2, [r7, #32]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d302      	bcc.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e03a      	b.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d023      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b80      	cmp	r3, #128	@ 0x80
 8006d9e:	d020      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b40      	cmp	r3, #64	@ 0x40
 8006da4:	d01d      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d116      	bne.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f81d 	bl	8006e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2208      	movs	r2, #8
 8006dd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e00f      	b.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4013      	ands	r3, r2
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	bf0c      	ite	eq
 8006df2:	2301      	moveq	r3, #1
 8006df4:	2300      	movne	r3, #0
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d0b4      	beq.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b095      	sub	sp, #84	@ 0x54
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	330c      	adds	r3, #12
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e32:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e5      	bne.n	8006e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3314      	adds	r3, #20
 8006e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3314      	adds	r3, #20
 8006e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e5      	bne.n	8006e46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d119      	bne.n	8006eb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	330c      	adds	r3, #12
 8006e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f023 0310 	bic.w	r3, r3, #16
 8006e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ea2:	61ba      	str	r2, [r7, #24]
 8006ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	6979      	ldr	r1, [r7, #20]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e5      	bne.n	8006e82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ec4:	bf00      	nop
 8006ec6:	3754      	adds	r7, #84	@ 0x54
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006edc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff ff1e 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b21      	cmp	r3, #33	@ 0x21
 8006f0a:	d13e      	bne.n	8006f8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f14:	d114      	bne.n	8006f40 <UART_Transmit_IT+0x48>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d110      	bne.n	8006f40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	1c9a      	adds	r2, r3, #2
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	621a      	str	r2, [r3, #32]
 8006f3e:	e008      	b.n	8006f52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	1c59      	adds	r1, r3, #1
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6211      	str	r1, [r2, #32]
 8006f4a:	781a      	ldrb	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10f      	bne.n	8006f86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e000      	b.n	8006f8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f8a:	2302      	movs	r3, #2
  }
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff fea3 	bl	8006d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08c      	sub	sp, #48	@ 0x30
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b22      	cmp	r3, #34	@ 0x22
 8006fda:	f040 80ae 	bne.w	800713a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe6:	d117      	bne.n	8007018 <UART_Receive_IT+0x50>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d113      	bne.n	8007018 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	b29a      	uxth	r2, r3
 8007008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	1c9a      	adds	r2, r3, #2
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	629a      	str	r2, [r3, #40]	@ 0x28
 8007016:	e026      	b.n	8007066 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800702a:	d007      	beq.n	800703c <UART_Receive_IT+0x74>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <UART_Receive_IT+0x82>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d106      	bne.n	800704a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e008      	b.n	800705c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007056:	b2da      	uxtb	r2, r3
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29b      	uxth	r3, r3
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4619      	mov	r1, r3
 8007074:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007076:	2b00      	cmp	r3, #0
 8007078:	d15d      	bne.n	8007136 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0220 	bic.w	r2, r2, #32
 8007088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695a      	ldr	r2, [r3, #20]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0201 	bic.w	r2, r2, #1
 80070a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d135      	bne.n	800712c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	330c      	adds	r3, #12
 80070cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	613b      	str	r3, [r7, #16]
   return(result);
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f023 0310 	bic.w	r3, r3, #16
 80070dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e6:	623a      	str	r2, [r7, #32]
 80070e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	69f9      	ldr	r1, [r7, #28]
 80070ec:	6a3a      	ldr	r2, [r7, #32]
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b10      	cmp	r3, #16
 8007106:	d10a      	bne.n	800711e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff fe0b 	bl	8006d40 <HAL_UARTEx_RxEventCallback>
 800712a:	e002      	b.n	8007132 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fdf3 	bl	8006d18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	e002      	b.n	800713c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	e000      	b.n	800713c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800713a:	2302      	movs	r3, #2
  }
}
 800713c:	4618      	mov	r0, r3
 800713e:	3730      	adds	r7, #48	@ 0x30
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007148:	b0c0      	sub	sp, #256	@ 0x100
 800714a:	af00      	add	r7, sp, #0
 800714c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007160:	68d9      	ldr	r1, [r3, #12]
 8007162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	ea40 0301 	orr.w	r3, r0, r1
 800716c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800716e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	431a      	orrs	r2, r3
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	431a      	orrs	r2, r3
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	4313      	orrs	r3, r2
 800718c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800719c:	f021 010c 	bic.w	r1, r1, #12
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071aa:	430b      	orrs	r3, r1
 80071ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071be:	6999      	ldr	r1, [r3, #24]
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	ea40 0301 	orr.w	r3, r0, r1
 80071ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b8f      	ldr	r3, [pc, #572]	@ (8007410 <UART_SetConfig+0x2cc>)
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d005      	beq.n	80071e4 <UART_SetConfig+0xa0>
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	4b8d      	ldr	r3, [pc, #564]	@ (8007414 <UART_SetConfig+0x2d0>)
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d104      	bne.n	80071ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071e4:	f7fe f880 	bl	80052e8 <HAL_RCC_GetPCLK2Freq>
 80071e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071ec:	e003      	b.n	80071f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071ee:	f7fe f867 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 80071f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007200:	f040 810c 	bne.w	800741c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007208:	2200      	movs	r2, #0
 800720a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800720e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007212:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007216:	4622      	mov	r2, r4
 8007218:	462b      	mov	r3, r5
 800721a:	1891      	adds	r1, r2, r2
 800721c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800721e:	415b      	adcs	r3, r3
 8007220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007222:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007226:	4621      	mov	r1, r4
 8007228:	eb12 0801 	adds.w	r8, r2, r1
 800722c:	4629      	mov	r1, r5
 800722e:	eb43 0901 	adc.w	r9, r3, r1
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800723e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007246:	4690      	mov	r8, r2
 8007248:	4699      	mov	r9, r3
 800724a:	4623      	mov	r3, r4
 800724c:	eb18 0303 	adds.w	r3, r8, r3
 8007250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007254:	462b      	mov	r3, r5
 8007256:	eb49 0303 	adc.w	r3, r9, r3
 800725a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800725e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800726a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800726e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007272:	460b      	mov	r3, r1
 8007274:	18db      	adds	r3, r3, r3
 8007276:	653b      	str	r3, [r7, #80]	@ 0x50
 8007278:	4613      	mov	r3, r2
 800727a:	eb42 0303 	adc.w	r3, r2, r3
 800727e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007284:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007288:	f7f9 fc8e 	bl	8000ba8 <__aeabi_uldivmod>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4b61      	ldr	r3, [pc, #388]	@ (8007418 <UART_SetConfig+0x2d4>)
 8007292:	fba3 2302 	umull	r2, r3, r3, r2
 8007296:	095b      	lsrs	r3, r3, #5
 8007298:	011c      	lsls	r4, r3, #4
 800729a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072ac:	4642      	mov	r2, r8
 80072ae:	464b      	mov	r3, r9
 80072b0:	1891      	adds	r1, r2, r2
 80072b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072b4:	415b      	adcs	r3, r3
 80072b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072bc:	4641      	mov	r1, r8
 80072be:	eb12 0a01 	adds.w	sl, r2, r1
 80072c2:	4649      	mov	r1, r9
 80072c4:	eb43 0b01 	adc.w	fp, r3, r1
 80072c8:	f04f 0200 	mov.w	r2, #0
 80072cc:	f04f 0300 	mov.w	r3, #0
 80072d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072dc:	4692      	mov	sl, r2
 80072de:	469b      	mov	fp, r3
 80072e0:	4643      	mov	r3, r8
 80072e2:	eb1a 0303 	adds.w	r3, sl, r3
 80072e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072ea:	464b      	mov	r3, r9
 80072ec:	eb4b 0303 	adc.w	r3, fp, r3
 80072f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007300:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007308:	460b      	mov	r3, r1
 800730a:	18db      	adds	r3, r3, r3
 800730c:	643b      	str	r3, [r7, #64]	@ 0x40
 800730e:	4613      	mov	r3, r2
 8007310:	eb42 0303 	adc.w	r3, r2, r3
 8007314:	647b      	str	r3, [r7, #68]	@ 0x44
 8007316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800731a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800731e:	f7f9 fc43 	bl	8000ba8 <__aeabi_uldivmod>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	4611      	mov	r1, r2
 8007328:	4b3b      	ldr	r3, [pc, #236]	@ (8007418 <UART_SetConfig+0x2d4>)
 800732a:	fba3 2301 	umull	r2, r3, r3, r1
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	2264      	movs	r2, #100	@ 0x64
 8007332:	fb02 f303 	mul.w	r3, r2, r3
 8007336:	1acb      	subs	r3, r1, r3
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800733e:	4b36      	ldr	r3, [pc, #216]	@ (8007418 <UART_SetConfig+0x2d4>)
 8007340:	fba3 2302 	umull	r2, r3, r3, r2
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800734c:	441c      	add	r4, r3
 800734e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007352:	2200      	movs	r2, #0
 8007354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007358:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800735c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007360:	4642      	mov	r2, r8
 8007362:	464b      	mov	r3, r9
 8007364:	1891      	adds	r1, r2, r2
 8007366:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007368:	415b      	adcs	r3, r3
 800736a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800736c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007370:	4641      	mov	r1, r8
 8007372:	1851      	adds	r1, r2, r1
 8007374:	6339      	str	r1, [r7, #48]	@ 0x30
 8007376:	4649      	mov	r1, r9
 8007378:	414b      	adcs	r3, r1
 800737a:	637b      	str	r3, [r7, #52]	@ 0x34
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007388:	4659      	mov	r1, fp
 800738a:	00cb      	lsls	r3, r1, #3
 800738c:	4651      	mov	r1, sl
 800738e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007392:	4651      	mov	r1, sl
 8007394:	00ca      	lsls	r2, r1, #3
 8007396:	4610      	mov	r0, r2
 8007398:	4619      	mov	r1, r3
 800739a:	4603      	mov	r3, r0
 800739c:	4642      	mov	r2, r8
 800739e:	189b      	adds	r3, r3, r2
 80073a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073a4:	464b      	mov	r3, r9
 80073a6:	460a      	mov	r2, r1
 80073a8:	eb42 0303 	adc.w	r3, r2, r3
 80073ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073c4:	460b      	mov	r3, r1
 80073c6:	18db      	adds	r3, r3, r3
 80073c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073ca:	4613      	mov	r3, r2
 80073cc:	eb42 0303 	adc.w	r3, r2, r3
 80073d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073da:	f7f9 fbe5 	bl	8000ba8 <__aeabi_uldivmod>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007418 <UART_SetConfig+0x2d4>)
 80073e4:	fba3 1302 	umull	r1, r3, r3, r2
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	2164      	movs	r1, #100	@ 0x64
 80073ec:	fb01 f303 	mul.w	r3, r1, r3
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	3332      	adds	r3, #50	@ 0x32
 80073f6:	4a08      	ldr	r2, [pc, #32]	@ (8007418 <UART_SetConfig+0x2d4>)
 80073f8:	fba2 2303 	umull	r2, r3, r2, r3
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	f003 0207 	and.w	r2, r3, #7
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4422      	add	r2, r4
 800740a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800740c:	e106      	b.n	800761c <UART_SetConfig+0x4d8>
 800740e:	bf00      	nop
 8007410:	40011000 	.word	0x40011000
 8007414:	40011400 	.word	0x40011400
 8007418:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800741c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007420:	2200      	movs	r2, #0
 8007422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007426:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800742a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800742e:	4642      	mov	r2, r8
 8007430:	464b      	mov	r3, r9
 8007432:	1891      	adds	r1, r2, r2
 8007434:	6239      	str	r1, [r7, #32]
 8007436:	415b      	adcs	r3, r3
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
 800743a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800743e:	4641      	mov	r1, r8
 8007440:	1854      	adds	r4, r2, r1
 8007442:	4649      	mov	r1, r9
 8007444:	eb43 0501 	adc.w	r5, r3, r1
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	f04f 0300 	mov.w	r3, #0
 8007450:	00eb      	lsls	r3, r5, #3
 8007452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007456:	00e2      	lsls	r2, r4, #3
 8007458:	4614      	mov	r4, r2
 800745a:	461d      	mov	r5, r3
 800745c:	4643      	mov	r3, r8
 800745e:	18e3      	adds	r3, r4, r3
 8007460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007464:	464b      	mov	r3, r9
 8007466:	eb45 0303 	adc.w	r3, r5, r3
 800746a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800746e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800747a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800747e:	f04f 0200 	mov.w	r2, #0
 8007482:	f04f 0300 	mov.w	r3, #0
 8007486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800748a:	4629      	mov	r1, r5
 800748c:	008b      	lsls	r3, r1, #2
 800748e:	4621      	mov	r1, r4
 8007490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007494:	4621      	mov	r1, r4
 8007496:	008a      	lsls	r2, r1, #2
 8007498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800749c:	f7f9 fb84 	bl	8000ba8 <__aeabi_uldivmod>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4b60      	ldr	r3, [pc, #384]	@ (8007628 <UART_SetConfig+0x4e4>)
 80074a6:	fba3 2302 	umull	r2, r3, r3, r2
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	011c      	lsls	r4, r3, #4
 80074ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074c0:	4642      	mov	r2, r8
 80074c2:	464b      	mov	r3, r9
 80074c4:	1891      	adds	r1, r2, r2
 80074c6:	61b9      	str	r1, [r7, #24]
 80074c8:	415b      	adcs	r3, r3
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074d0:	4641      	mov	r1, r8
 80074d2:	1851      	adds	r1, r2, r1
 80074d4:	6139      	str	r1, [r7, #16]
 80074d6:	4649      	mov	r1, r9
 80074d8:	414b      	adcs	r3, r1
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074e8:	4659      	mov	r1, fp
 80074ea:	00cb      	lsls	r3, r1, #3
 80074ec:	4651      	mov	r1, sl
 80074ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074f2:	4651      	mov	r1, sl
 80074f4:	00ca      	lsls	r2, r1, #3
 80074f6:	4610      	mov	r0, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	4642      	mov	r2, r8
 80074fe:	189b      	adds	r3, r3, r2
 8007500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007504:	464b      	mov	r3, r9
 8007506:	460a      	mov	r2, r1
 8007508:	eb42 0303 	adc.w	r3, r2, r3
 800750c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	67bb      	str	r3, [r7, #120]	@ 0x78
 800751a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007528:	4649      	mov	r1, r9
 800752a:	008b      	lsls	r3, r1, #2
 800752c:	4641      	mov	r1, r8
 800752e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007532:	4641      	mov	r1, r8
 8007534:	008a      	lsls	r2, r1, #2
 8007536:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800753a:	f7f9 fb35 	bl	8000ba8 <__aeabi_uldivmod>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4611      	mov	r1, r2
 8007544:	4b38      	ldr	r3, [pc, #224]	@ (8007628 <UART_SetConfig+0x4e4>)
 8007546:	fba3 2301 	umull	r2, r3, r3, r1
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	2264      	movs	r2, #100	@ 0x64
 800754e:	fb02 f303 	mul.w	r3, r2, r3
 8007552:	1acb      	subs	r3, r1, r3
 8007554:	011b      	lsls	r3, r3, #4
 8007556:	3332      	adds	r3, #50	@ 0x32
 8007558:	4a33      	ldr	r2, [pc, #204]	@ (8007628 <UART_SetConfig+0x4e4>)
 800755a:	fba2 2303 	umull	r2, r3, r2, r3
 800755e:	095b      	lsrs	r3, r3, #5
 8007560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007564:	441c      	add	r4, r3
 8007566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800756a:	2200      	movs	r2, #0
 800756c:	673b      	str	r3, [r7, #112]	@ 0x70
 800756e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007570:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007574:	4642      	mov	r2, r8
 8007576:	464b      	mov	r3, r9
 8007578:	1891      	adds	r1, r2, r2
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	415b      	adcs	r3, r3
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007584:	4641      	mov	r1, r8
 8007586:	1851      	adds	r1, r2, r1
 8007588:	6039      	str	r1, [r7, #0]
 800758a:	4649      	mov	r1, r9
 800758c:	414b      	adcs	r3, r1
 800758e:	607b      	str	r3, [r7, #4]
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800759c:	4659      	mov	r1, fp
 800759e:	00cb      	lsls	r3, r1, #3
 80075a0:	4651      	mov	r1, sl
 80075a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075a6:	4651      	mov	r1, sl
 80075a8:	00ca      	lsls	r2, r1, #3
 80075aa:	4610      	mov	r0, r2
 80075ac:	4619      	mov	r1, r3
 80075ae:	4603      	mov	r3, r0
 80075b0:	4642      	mov	r2, r8
 80075b2:	189b      	adds	r3, r3, r2
 80075b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075b6:	464b      	mov	r3, r9
 80075b8:	460a      	mov	r2, r1
 80075ba:	eb42 0303 	adc.w	r3, r2, r3
 80075be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80075ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075d8:	4649      	mov	r1, r9
 80075da:	008b      	lsls	r3, r1, #2
 80075dc:	4641      	mov	r1, r8
 80075de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075e2:	4641      	mov	r1, r8
 80075e4:	008a      	lsls	r2, r1, #2
 80075e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075ea:	f7f9 fadd 	bl	8000ba8 <__aeabi_uldivmod>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <UART_SetConfig+0x4e4>)
 80075f4:	fba3 1302 	umull	r1, r3, r3, r2
 80075f8:	095b      	lsrs	r3, r3, #5
 80075fa:	2164      	movs	r1, #100	@ 0x64
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	3332      	adds	r3, #50	@ 0x32
 8007606:	4a08      	ldr	r2, [pc, #32]	@ (8007628 <UART_SetConfig+0x4e4>)
 8007608:	fba2 2303 	umull	r2, r3, r2, r3
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	f003 020f 	and.w	r2, r3, #15
 8007612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4422      	add	r2, r4
 800761a:	609a      	str	r2, [r3, #8]
}
 800761c:	bf00      	nop
 800761e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007622:	46bd      	mov	sp, r7
 8007624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007628:	51eb851f 	.word	0x51eb851f
 800762c:	00000000 	.word	0x00000000

08007630 <capture_and_send_data>:
//};
float Bil=0;
float BilResult=0;

void capture_and_send_data(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08c      	sub	sp, #48	@ 0x30
 8007634:	af00      	add	r7, sp, #0

    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 8007636:	4b9c      	ldr	r3, [pc, #624]	@ (80078a8 <capture_and_send_data+0x278>)
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	e020      	b.n	8007680 <capture_and_send_data+0x50>
    {
        HAL_ADC_Start_DMA(&hadc3, &adc_value, 1);
 800763e:	2201      	movs	r2, #1
 8007640:	499a      	ldr	r1, [pc, #616]	@ (80078ac <capture_and_send_data+0x27c>)
 8007642:	489b      	ldr	r0, [pc, #620]	@ (80078b0 <capture_and_send_data+0x280>)
 8007644:	f7fa ff0a 	bl	800245c <HAL_ADC_Start_DMA>
        //HAL_Delay(1);
        DWT_Delay(9);
 8007648:	2009      	movs	r0, #9
 800764a:	f000 fe13 	bl	8008274 <DWT_Delay>
        // Store the adc_value in spectral_data
        spectral_data[idx++] = adc_value;
 800764e:	4b99      	ldr	r3, [pc, #612]	@ (80078b4 <capture_and_send_data+0x284>)
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	b291      	uxth	r1, r2
 8007656:	4a97      	ldr	r2, [pc, #604]	@ (80078b4 <capture_and_send_data+0x284>)
 8007658:	8011      	strh	r1, [r2, #0]
 800765a:	4619      	mov	r1, r3
 800765c:	4b93      	ldr	r3, [pc, #588]	@ (80078ac <capture_and_send_data+0x27c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a95      	ldr	r2, [pc, #596]	@ (80078b8 <capture_and_send_data+0x288>)
 8007662:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (idx >= NUM_WAVELENGTHS*2) idx=0;
 8007666:	4b93      	ldr	r3, [pc, #588]	@ (80078b4 <capture_and_send_data+0x284>)
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800766e:	d302      	bcc.n	8007676 <capture_and_send_data+0x46>
 8007670:	4b90      	ldr	r3, [pc, #576]	@ (80078b4 <capture_and_send_data+0x284>)
 8007672:	2200      	movs	r2, #0
 8007674:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 8007676:	4b8c      	ldr	r3, [pc, #560]	@ (80078a8 <capture_and_send_data+0x278>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3301      	adds	r3, #1
 800767c:	4a8a      	ldr	r2, [pc, #552]	@ (80078a8 <capture_and_send_data+0x278>)
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	4b89      	ldr	r3, [pc, #548]	@ (80078a8 <capture_and_send_data+0x278>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007688:	dbd9      	blt.n	800763e <capture_and_send_data+0xe>
    }
    // Filter out baseline values
	index2=0;
 800768a:	4b8c      	ldr	r3, [pc, #560]	@ (80078bc <capture_and_send_data+0x28c>)
 800768c:	2200      	movs	r2, #0
 800768e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < Filtered_Spec_Len; i++) spectral_data_256[i] = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007694:	e007      	b.n	80076a6 <capture_and_send_data+0x76>
 8007696:	4a8a      	ldr	r2, [pc, #552]	@ (80078c0 <capture_and_send_data+0x290>)
 8007698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769a:	2100      	movs	r1, #0
 800769c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80076a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a2:	3301      	adds	r3, #1
 80076a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a8:	2b13      	cmp	r3, #19
 80076aa:	ddf4      	ble.n	8007696 <capture_and_send_data+0x66>

	for (int i = 1; i < NUM_WAVELENGTHS * 2; i++)
 80076ac:	2301      	movs	r3, #1
 80076ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076b0:	e029      	b.n	8007706 <capture_and_send_data+0xd6>
	{
		uint32_t prev_value = spectral_data[i - 1];
 80076b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b4:	3b01      	subs	r3, #1
 80076b6:	4a80      	ldr	r2, [pc, #512]	@ (80078b8 <capture_and_send_data+0x288>)
 80076b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076bc:	617b      	str	r3, [r7, #20]
		uint32_t curr_value = spectral_data[i];
 80076be:	4a7e      	ldr	r2, [pc, #504]	@ (80078b8 <capture_and_send_data+0x288>)
 80076c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076c6:	613b      	str	r3, [r7, #16]

		// Consider a value as high if it's significantly higher than the previous one
		if (curr_value > prev_value + (prev_value / 10))       // Lower threshold Less indeces (4-only 600's)
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	4a7e      	ldr	r2, [pc, #504]	@ (80078c4 <capture_and_send_data+0x294>)
 80076cc:	fba2 2303 	umull	r2, r3, r2, r3
 80076d0:	08da      	lsrs	r2, r3, #3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	4413      	add	r3, r2
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d911      	bls.n	8007700 <capture_and_send_data+0xd0>
		{
			spectral_data_256[index2++] = curr_value;
 80076dc:	4b77      	ldr	r3, [pc, #476]	@ (80078bc <capture_and_send_data+0x28c>)
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	b291      	uxth	r1, r2
 80076e4:	4a75      	ldr	r2, [pc, #468]	@ (80078bc <capture_and_send_data+0x28c>)
 80076e6:	8011      	strh	r1, [r2, #0]
 80076e8:	4619      	mov	r1, r3
 80076ea:	4a75      	ldr	r2, [pc, #468]	@ (80078c0 <capture_and_send_data+0x290>)
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			if (index2 >= Filtered_Spec_Len) index2=0;
 80076f2:	4b72      	ldr	r3, [pc, #456]	@ (80078bc <capture_and_send_data+0x28c>)
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	2b13      	cmp	r3, #19
 80076f8:	d902      	bls.n	8007700 <capture_and_send_data+0xd0>
 80076fa:	4b70      	ldr	r3, [pc, #448]	@ (80078bc <capture_and_send_data+0x28c>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < NUM_WAVELENGTHS * 2; i++)
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	3301      	adds	r3, #1
 8007704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800770c:	dbd1      	blt.n	80076b2 <capture_and_send_data+0x82>
		}
	}

	sum_filtered_data=0;
 800770e:	4b6e      	ldr	r3, [pc, #440]	@ (80078c8 <capture_and_send_data+0x298>)
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
	average_filtered_data=0;
 8007714:	4b6d      	ldr	r3, [pc, #436]	@ (80078cc <capture_and_send_data+0x29c>)
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
	// Calculate the average of the filtered data
	for (int i = main_spec_start; i < main_spec_end; i++)
 800771c:	2363      	movs	r3, #99	@ 0x63
 800771e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007720:	e00b      	b.n	800773a <capture_and_send_data+0x10a>
	{   //45 main samples
		sum_filtered_data += spectral_data[i];
 8007722:	4a65      	ldr	r2, [pc, #404]	@ (80078b8 <capture_and_send_data+0x288>)
 8007724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007726:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800772a:	4b67      	ldr	r3, [pc, #412]	@ (80078c8 <capture_and_send_data+0x298>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4413      	add	r3, r2
 8007730:	4a65      	ldr	r2, [pc, #404]	@ (80078c8 <capture_and_send_data+0x298>)
 8007732:	6013      	str	r3, [r2, #0]
	for (int i = main_spec_start; i < main_spec_end; i++)
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	3301      	adds	r3, #1
 8007738:	627b      	str	r3, [r7, #36]	@ 0x24
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	2b90      	cmp	r3, #144	@ 0x90
 800773e:	ddf0      	ble.n	8007722 <capture_and_send_data+0xf2>
	}
	//if (index2 > 0)
	{
		average_filtered_data = (float)sum_filtered_data / (main_spec_end-main_spec_start);
 8007740:	4b61      	ldr	r3, [pc, #388]	@ (80078c8 <capture_and_send_data+0x298>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800774c:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80078d0 <capture_and_send_data+0x2a0>
 8007750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007754:	4b5d      	ldr	r3, [pc, #372]	@ (80078cc <capture_and_send_data+0x29c>)
 8007756:	edc3 7a00 	vstr	s15, [r3]
	}

	for(int r=0; r<(main_spec_end-main_spec_start); r++)
 800775a:	2300      	movs	r3, #0
 800775c:	623b      	str	r3, [r7, #32]
 800775e:	e016      	b.n	800778e <capture_and_send_data+0x15e>
	{
		Reflectance[r]=spectral_data[r+99]/average_filtered_data;
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	3363      	adds	r3, #99	@ 0x63
 8007764:	4a54      	ldr	r2, [pc, #336]	@ (80078b8 <capture_and_send_data+0x288>)
 8007766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007772:	4b56      	ldr	r3, [pc, #344]	@ (80078cc <capture_and_send_data+0x29c>)
 8007774:	ed93 7a00 	vldr	s14, [r3]
 8007778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800777c:	4a55      	ldr	r2, [pc, #340]	@ (80078d4 <capture_and_send_data+0x2a4>)
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	edc3 7a00 	vstr	s15, [r3]
	for(int r=0; r<(main_spec_end-main_spec_start); r++)
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	3301      	adds	r3, #1
 800778c:	623b      	str	r3, [r7, #32]
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	2b2d      	cmp	r3, #45	@ 0x2d
 8007792:	dde5      	ble.n	8007760 <capture_and_send_data+0x130>
	{
		Bil+=Reflectance[r];
	}
	BilResult[0]=(1.7016*Bil*Bil)-(20.6755*Bil)+(66.9023);
*/
	BilResult=0;sum_Reflectance=0;average_Reflectance=0;
 8007794:	4b50      	ldr	r3, [pc, #320]	@ (80078d8 <capture_and_send_data+0x2a8>)
 8007796:	f04f 0200 	mov.w	r2, #0
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	4b4f      	ldr	r3, [pc, #316]	@ (80078dc <capture_and_send_data+0x2ac>)
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	4b4e      	ldr	r3, [pc, #312]	@ (80078e0 <capture_and_send_data+0x2b0>)
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < (main_spec_end-main_spec_start); i++)
 80077ac:	2300      	movs	r3, #0
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	e01a      	b.n	80077e8 <capture_and_send_data+0x1b8>
	{
		 sum_Reflectance += Reflectance[i];
 80077b2:	4a48      	ldr	r2, [pc, #288]	@ (80078d4 <capture_and_send_data+0x2a4>)
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	ed93 7a00 	vldr	s14, [r3]
 80077be:	4b47      	ldr	r3, [pc, #284]	@ (80078dc <capture_and_send_data+0x2ac>)
 80077c0:	edd3 7a00 	vldr	s15, [r3]
 80077c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077c8:	4b44      	ldr	r3, [pc, #272]	@ (80078dc <capture_and_send_data+0x2ac>)
 80077ca:	edc3 7a00 	vstr	s15, [r3]
		 average_Reflectance = (float)sum_Reflectance / (main_spec_end-main_spec_start);
 80077ce:	4b43      	ldr	r3, [pc, #268]	@ (80078dc <capture_and_send_data+0x2ac>)
 80077d0:	ed93 7a00 	vldr	s14, [r3]
 80077d4:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80078d0 <capture_and_send_data+0x2a0>
 80077d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077dc:	4b40      	ldr	r3, [pc, #256]	@ (80078e0 <capture_and_send_data+0x2b0>)
 80077de:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < (main_spec_end-main_spec_start); i++)
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	3301      	adds	r3, #1
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80077ec:	dde1      	ble.n	80077b2 <capture_and_send_data+0x182>
	}
	//BilResult[0] = average_Reflectance*3;
	//BilResult[0]=(1.7016*average_Reflectance*average_Reflectance)-(20.6755*average_Reflectance)+(66.9023);
	 BilResult = (average_filtered_data-478)/120;     //avgSpecAtBlank_Ref = 478   //CalFactor=56;//80
 80077ee:	4b37      	ldr	r3, [pc, #220]	@ (80078cc <capture_and_send_data+0x29c>)
 80077f0:	edd3 7a00 	vldr	s15, [r3]
 80077f4:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80078e4 <capture_and_send_data+0x2b4>
 80077f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80077fc:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80078e8 <capture_and_send_data+0x2b8>
 8007800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007804:	4b34      	ldr	r3, [pc, #208]	@ (80078d8 <capture_and_send_data+0x2a8>)
 8007806:	edc3 7a00 	vstr	s15, [r3]
	 if(BilResult<=0.1) {
 800780a:	4b33      	ldr	r3, [pc, #204]	@ (80078d8 <capture_and_send_data+0x2a8>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f7f8 fe9a 	bl	8000548 <__aeabi_f2d>
 8007814:	a322      	add	r3, pc, #136	@ (adr r3, 80078a0 <capture_and_send_data+0x270>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7f9 f969 	bl	8000af0 <__aeabi_dcmple>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d017      	beq.n	8007854 <capture_and_send_data+0x224>
		 testDone = 0;
 8007824:	4b31      	ldr	r3, [pc, #196]	@ (80078ec <capture_and_send_data+0x2bc>)
 8007826:	2200      	movs	r2, #0
 8007828:	701a      	strb	r2, [r3, #0]
		 BilResult=0;
 800782a:	4b2b      	ldr	r3, [pc, #172]	@ (80078d8 <capture_and_send_data+0x2a8>)
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 8007832:	2201      	movs	r2, #1
 8007834:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007838:	482d      	ldr	r0, [pc, #180]	@ (80078f0 <capture_and_send_data+0x2c0>)
 800783a:	f7fc f8a5 	bl	8003988 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 800783e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007842:	f7fa fda3 	bl	800238c <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 8007846:	2200      	movs	r2, #0
 8007848:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800784c:	4828      	ldr	r0, [pc, #160]	@ (80078f0 <capture_and_send_data+0x2c0>)
 800784e:	f7fc f89b 	bl	8003988 <HAL_GPIO_WritePin>
 8007852:	e002      	b.n	800785a <capture_and_send_data+0x22a>
	 }
	 else
	 {
	 testDone = 1;
 8007854:	4b25      	ldr	r3, [pc, #148]	@ (80078ec <capture_and_send_data+0x2bc>)
 8007856:	2201      	movs	r2, #1
 8007858:	701a      	strb	r2, [r3, #0]
	 }
	 //if(currentTest<=avgValue) testDone = 1;

    // Format the concentration values as a string
	char message[10];            					//Result to be sent to UART and LCD
    for (int j = 0; j < NUM_WAVELENGTHS*2; j++)
 800785a:	2300      	movs	r3, #0
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	e015      	b.n	800788c <capture_and_send_data+0x25c>
    {
      //printf("%lu\n", spectral_data_256[j]);
      snprintf(message, sizeof(message), "%lu\n",spectral_data[j]);
 8007860:	4a15      	ldr	r2, [pc, #84]	@ (80078b8 <capture_and_send_data+0x288>)
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007868:	1d38      	adds	r0, r7, #4
 800786a:	4a22      	ldr	r2, [pc, #136]	@ (80078f4 <capture_and_send_data+0x2c4>)
 800786c:	210a      	movs	r1, #10
 800786e:	f001 fad5 	bl	8008e1c <sniprintf>
      // Send the concentration values via UART
      HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(spectral_data[j]), HAL_MAX_DELAY);
 8007872:	1d39      	adds	r1, r7, #4
 8007874:	f04f 33ff 	mov.w	r3, #4294967295
 8007878:	2204      	movs	r2, #4
 800787a:	481f      	ldr	r0, [pc, #124]	@ (80078f8 <capture_and_send_data+0x2c8>)
 800787c:	f7fe ff24 	bl	80066c8 <HAL_UART_Transmit>
      len = sizeof(spectral_data[j]);
 8007880:	4b1e      	ldr	r3, [pc, #120]	@ (80078fc <capture_and_send_data+0x2cc>)
 8007882:	2204      	movs	r2, #4
 8007884:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < NUM_WAVELENGTHS*2; j++)
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	3301      	adds	r3, #1
 800788a:	61bb      	str	r3, [r7, #24]
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007892:	dbe5      	blt.n	8007860 <capture_and_send_data+0x230>
      //send_uart_message(message);

      //LCD_WriteString("Hello, World!"); // Writing to LCD
    }
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	3730      	adds	r7, #48	@ 0x30
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	9999999a 	.word	0x9999999a
 80078a4:	3fb99999 	.word	0x3fb99999
 80078a8:	20001128 	.word	0x20001128
 80078ac:	2000111c 	.word	0x2000111c
 80078b0:	20000218 	.word	0x20000218
 80078b4:	20001120 	.word	0x20001120
 80078b8:	200008cc 	.word	0x200008cc
 80078bc:	20001122 	.word	0x20001122
 80078c0:	200010cc 	.word	0x200010cc
 80078c4:	cccccccd 	.word	0xcccccccd
 80078c8:	2000112c 	.word	0x2000112c
 80078cc:	20001130 	.word	0x20001130
 80078d0:	42380000 	.word	0x42380000
 80078d4:	2000113c 	.word	0x2000113c
 80078d8:	200011f4 	.word	0x200011f4
 80078dc:	20001134 	.word	0x20001134
 80078e0:	20001138 	.word	0x20001138
 80078e4:	43ef0000 	.word	0x43ef0000
 80078e8:	42f00000 	.word	0x42f00000
 80078ec:	20001125 	.word	0x20001125
 80078f0:	40021000 	.word	0x40021000
 80078f4:	0800b0b8 	.word	0x0800b0b8
 80078f8:	20000414 	.word	0x20000414
 80078fc:	20001124 	.word	0x20001124

08007900 <LCD>:
int set_line_Y = 44;   //30

int StartTestMenuFlag = 0;

void LCD(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
	//LCD_Init();      //LOGO
	LCD_DisplayMenu();
 8007904:	f000 f804 	bl	8007910 <LCD_DisplayMenu>
    LCD_HandleButtonPress();
 8007908:	f000 f97e 	bl	8007c08 <LCD_HandleButtonPress>
}
 800790c:	bf00      	nop
 800790e:	bd80      	pop	{r7, pc}

08007910 <LCD_DisplayMenu>:
    //ssd1306_UpdateScreen();
    LCD_DisplayMenu();
}*/

// Function to display the current menu
void LCD_DisplayMenu(void) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b092      	sub	sp, #72	@ 0x48
 8007914:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8007916:	2000      	movs	r0, #0
 8007918:	f7f9 fece 	bl	80016b8 <ssd1306_Fill>
    HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET); // Turn off Indication LED
 800791c:	2200      	movs	r2, #0
 800791e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007922:	48a4      	ldr	r0, [pc, #656]	@ (8007bb4 <LCD_DisplayMenu+0x2a4>)
 8007924:	f7fc f830 	bl	8003988 <HAL_GPIO_WritePin>

    switch (currentMenu)
 8007928:	4ba3      	ldr	r3, [pc, #652]	@ (8007bb8 <LCD_DisplayMenu+0x2a8>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b02      	cmp	r3, #2
 800792e:	f000 80ef 	beq.w	8007b10 <LCD_DisplayMenu+0x200>
 8007932:	2b02      	cmp	r3, #2
 8007934:	f300 8138 	bgt.w	8007ba8 <LCD_DisplayMenu+0x298>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <LCD_DisplayMenu+0x34>
 800793c:	2b01      	cmp	r3, #1
 800793e:	f000 8082 	beq.w	8007a46 <LCD_DisplayMenu+0x136>
 8007942:	e131      	b.n	8007ba8 <LCD_DisplayMenu+0x298>
    {
        case MENU_SET_AVG:
        	testDone=0;                       // Do not read any result here
 8007944:	4b9d      	ldr	r3, [pc, #628]	@ (8007bbc <LCD_DisplayMenu+0x2ac>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
        	StartTestMenuFlag = 2;
 800794a:	4b9d      	ldr	r3, [pc, #628]	@ (8007bc0 <LCD_DisplayMenu+0x2b0>)
 800794c:	2202      	movs	r2, #2
 800794e:	601a      	str	r2, [r3, #0]

        	if (currentCursor == CURSOR_ON_MENU) {
 8007950:	4b9c      	ldr	r3, [pc, #624]	@ (8007bc4 <LCD_DisplayMenu+0x2b4>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d121      	bne.n	800799c <LCD_DisplayMenu+0x8c>
				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 8007958:	4b9b      	ldr	r3, [pc, #620]	@ (8007bc8 <LCD_DisplayMenu+0x2b8>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	3b05      	subs	r3, #5
 8007960:	b2d8      	uxtb	r0, r3
 8007962:	4b9a      	ldr	r3, [pc, #616]	@ (8007bcc <LCD_DisplayMenu+0x2bc>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	3b05      	subs	r3, #5
 800796a:	b2d9      	uxtb	r1, r3
 800796c:	2301      	movs	r3, #1
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	2323      	movs	r3, #35	@ 0x23
 8007972:	225a      	movs	r2, #90	@ 0x5a
 8007974:	f7fa f802 	bl	800197c <ssd1306_FillRectangle>
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8007978:	4b93      	ldr	r3, [pc, #588]	@ (8007bc8 <LCD_DisplayMenu+0x2b8>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	4a93      	ldr	r2, [pc, #588]	@ (8007bcc <LCD_DisplayMenu+0x2bc>)
 8007980:	6812      	ldr	r2, [r2, #0]
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	4611      	mov	r1, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7f9 ffe0 	bl	800194c <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, Black);
 800798c:	4b90      	ldr	r3, [pc, #576]	@ (8007bd0 <LCD_DisplayMenu+0x2c0>)
 800798e:	2200      	movs	r2, #0
 8007990:	9200      	str	r2, [sp, #0]
 8007992:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007994:	488f      	ldr	r0, [pc, #572]	@ (8007bd4 <LCD_DisplayMenu+0x2c4>)
 8007996:	f7f9 ffb3 	bl	8001900 <ssd1306_WriteString>
 800799a:	e010      	b.n	80079be <LCD_DisplayMenu+0xae>
        	}else{
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800799c:	4b8a      	ldr	r3, [pc, #552]	@ (8007bc8 <LCD_DisplayMenu+0x2b8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	4a8a      	ldr	r2, [pc, #552]	@ (8007bcc <LCD_DisplayMenu+0x2bc>)
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7f9 ffce 	bl	800194c <ssd1306_SetCursor>
				ssd1306_WriteString(" Set AVG", Font_7x10, White);
 80079b0:	4b87      	ldr	r3, [pc, #540]	@ (8007bd0 <LCD_DisplayMenu+0x2c0>)
 80079b2:	2201      	movs	r2, #1
 80079b4:	9200      	str	r2, [sp, #0]
 80079b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079b8:	4887      	ldr	r0, [pc, #540]	@ (8007bd8 <LCD_DisplayMenu+0x2c8>)
 80079ba:	f7f9 ffa1 	bl	8001900 <ssd1306_WriteString>
        	}


            if (currentCursor == CURSOR_ON_VALUE) {
 80079be:	4b81      	ldr	r3, [pc, #516]	@ (8007bc4 <LCD_DisplayMenu+0x2b4>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d126      	bne.n	8007a14 <LCD_DisplayMenu+0x104>
            	ssd1306_FillRectangle(set_line_X, set_line_Y, 75, 52, White);
 80079c6:	4b85      	ldr	r3, [pc, #532]	@ (8007bdc <LCD_DisplayMenu+0x2cc>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	b2d8      	uxtb	r0, r3
 80079cc:	4b84      	ldr	r3, [pc, #528]	@ (8007be0 <LCD_DisplayMenu+0x2d0>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	b2d9      	uxtb	r1, r3
 80079d2:	2301      	movs	r3, #1
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	2334      	movs	r3, #52	@ 0x34
 80079d8:	224b      	movs	r2, #75	@ 0x4b
 80079da:	f7f9 ffcf 	bl	800197c <ssd1306_FillRectangle>
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 80079de:	4b7f      	ldr	r3, [pc, #508]	@ (8007bdc <LCD_DisplayMenu+0x2cc>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	4a7e      	ldr	r2, [pc, #504]	@ (8007be0 <LCD_DisplayMenu+0x2d0>)
 80079e6:	6812      	ldr	r2, [r2, #0]
 80079e8:	b2d2      	uxtb	r2, r2
 80079ea:	4611      	mov	r1, r2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7f9 ffad 	bl	800194c <ssd1306_SetCursor>

            	 char avgStr[10];
				 snprintf(avgStr, sizeof(avgStr), "-%02d-", avgValue);
 80079f2:	4b7c      	ldr	r3, [pc, #496]	@ (8007be4 <LCD_DisplayMenu+0x2d4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f107 000c 	add.w	r0, r7, #12
 80079fa:	4a7b      	ldr	r2, [pc, #492]	@ (8007be8 <LCD_DisplayMenu+0x2d8>)
 80079fc:	210a      	movs	r1, #10
 80079fe:	f001 fa0d 	bl	8008e1c <sniprintf>
				 ssd1306_WriteString(avgStr, Font_11x18, Black);
 8007a02:	4b7a      	ldr	r3, [pc, #488]	@ (8007bec <LCD_DisplayMenu+0x2dc>)
 8007a04:	f107 000c 	add.w	r0, r7, #12
 8007a08:	2200      	movs	r2, #0
 8007a0a:	9200      	str	r2, [sp, #0]
 8007a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a0e:	f7f9 ff77 	bl	8001900 <ssd1306_WriteString>

            //ssd1306_SetCursor(set_line_X, set_line_Y);
            /*char avgStr[10];
            snprintf(avgStr, sizeof(avgStr), "-%02d-", avgValue);
            ssd1306_WriteString(avgStr, Font_11x18, White);*/
            break;
 8007a12:	e0c9      	b.n	8007ba8 <LCD_DisplayMenu+0x298>
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 8007a14:	4b71      	ldr	r3, [pc, #452]	@ (8007bdc <LCD_DisplayMenu+0x2cc>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	4a71      	ldr	r2, [pc, #452]	@ (8007be0 <LCD_DisplayMenu+0x2d0>)
 8007a1c:	6812      	ldr	r2, [r2, #0]
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7f9 ff92 	bl	800194c <ssd1306_SetCursor>
				snprintf(avgStr, sizeof(avgStr), "-%02d-", avgValue);
 8007a28:	4b6e      	ldr	r3, [pc, #440]	@ (8007be4 <LCD_DisplayMenu+0x2d4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	4a6e      	ldr	r2, [pc, #440]	@ (8007be8 <LCD_DisplayMenu+0x2d8>)
 8007a30:	210a      	movs	r1, #10
 8007a32:	f001 f9f3 	bl	8008e1c <sniprintf>
				ssd1306_WriteString(avgStr, Font_11x18, White);
 8007a36:	4b6d      	ldr	r3, [pc, #436]	@ (8007bec <LCD_DisplayMenu+0x2dc>)
 8007a38:	4638      	mov	r0, r7
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	9200      	str	r2, [sp, #0]
 8007a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a40:	f7f9 ff5e 	bl	8001900 <ssd1306_WriteString>
            break;
 8007a44:	e0b0      	b.n	8007ba8 <LCD_DisplayMenu+0x298>

        case MENU_START_TEST:
        	StartTestMenuFlag = 1;
 8007a46:	4b5e      	ldr	r3, [pc, #376]	@ (8007bc0 <LCD_DisplayMenu+0x2b0>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]
            /*if (currentCursor == CURSOR_ON_VALUE) {
            	ssd1306_SetCursor(100, 14);
                ssd1306_WriteString("<-", Font_7x10, White);
            }*/
            if (currentCursor == CURSOR_ON_MENU){
 8007a4c:	4b5d      	ldr	r3, [pc, #372]	@ (8007bc4 <LCD_DisplayMenu+0x2b4>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d120      	bne.n	8007a96 <LCD_DisplayMenu+0x186>
				//ssd1306_SetCursor(menu_line_X+70 , menu_line_Y);
				//ssd1306_WriteString("<-", Font_7x10, White);
            	ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 100, 35, White);
 8007a54:	4b5c      	ldr	r3, [pc, #368]	@ (8007bc8 <LCD_DisplayMenu+0x2b8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	3b05      	subs	r3, #5
 8007a5c:	b2d8      	uxtb	r0, r3
 8007a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8007bcc <LCD_DisplayMenu+0x2bc>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	3b05      	subs	r3, #5
 8007a66:	b2d9      	uxtb	r1, r3
 8007a68:	2301      	movs	r3, #1
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2323      	movs	r3, #35	@ 0x23
 8007a6e:	2264      	movs	r2, #100	@ 0x64
 8007a70:	f7f9 ff84 	bl	800197c <ssd1306_FillRectangle>

            	ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8007a74:	4b54      	ldr	r3, [pc, #336]	@ (8007bc8 <LCD_DisplayMenu+0x2b8>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	4a54      	ldr	r2, [pc, #336]	@ (8007bcc <LCD_DisplayMenu+0x2bc>)
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7f9 ff62 	bl	800194c <ssd1306_SetCursor>
				ssd1306_WriteString("StartTest", Font_7x10, Black);
 8007a88:	4b51      	ldr	r3, [pc, #324]	@ (8007bd0 <LCD_DisplayMenu+0x2c0>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	9200      	str	r2, [sp, #0]
 8007a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a90:	4857      	ldr	r0, [pc, #348]	@ (8007bf0 <LCD_DisplayMenu+0x2e0>)
 8007a92:	f7f9 ff35 	bl	8001900 <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 10, set_line_Y);
 8007a96:	4b51      	ldr	r3, [pc, #324]	@ (8007bdc <LCD_DisplayMenu+0x2cc>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	3b0a      	subs	r3, #10
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8007be0 <LCD_DisplayMenu+0x2d0>)
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7f9 ff4f 	bl	800194c <ssd1306_SetCursor>
            char testStr[20];
            snprintf(testStr, sizeof(testStr), "%d of %d", currentTest, avgValue);
 8007aae:	4b51      	ldr	r3, [pc, #324]	@ (8007bf4 <LCD_DisplayMenu+0x2e4>)
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8007be4 <LCD_DisplayMenu+0x2d4>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	4613      	mov	r3, r2
 8007abe:	4a4e      	ldr	r2, [pc, #312]	@ (8007bf8 <LCD_DisplayMenu+0x2e8>)
 8007ac0:	2114      	movs	r1, #20
 8007ac2:	f001 f9ab 	bl	8008e1c <sniprintf>
            ssd1306_WriteString(testStr, Font_11x18, White);
 8007ac6:	4b49      	ldr	r3, [pc, #292]	@ (8007bec <LCD_DisplayMenu+0x2dc>)
 8007ac8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8007acc:	2201      	movs	r2, #1
 8007ace:	9200      	str	r2, [sp, #0]
 8007ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ad2:	f7f9 ff15 	bl	8001900 <ssd1306_WriteString>

            DoesTestComplete();             // **if test btn pressed ==> ++currentTest****//
 8007ad6:	f000 fa07 	bl	8007ee8 <DoesTestComplete>

            if (currentTest > avgValue){
 8007ada:	4b46      	ldr	r3, [pc, #280]	@ (8007bf4 <LCD_DisplayMenu+0x2e4>)
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	4b41      	ldr	r3, [pc, #260]	@ (8007be4 <LCD_DisplayMenu+0x2d4>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	dd0d      	ble.n	8007b02 <LCD_DisplayMenu+0x1f2>
            	currentTest = 1;
 8007ae6:	4b43      	ldr	r3, [pc, #268]	@ (8007bf4 <LCD_DisplayMenu+0x2e4>)
 8007ae8:	2201      	movs	r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
            	//********************//
            	MeasureAverage();
 8007aec:	f000 f974 	bl	8007dd8 <MeasureAverage>
            	HAL_Delay(10);
 8007af0:	200a      	movs	r0, #10
 8007af2:	f7fa fc4b 	bl	800238c <HAL_Delay>
            	//********************//
                currentMenu = MENU_SHOW_RESULT;
 8007af6:	4b30      	ldr	r3, [pc, #192]	@ (8007bb8 <LCD_DisplayMenu+0x2a8>)
 8007af8:	2202      	movs	r2, #2
 8007afa:	701a      	strb	r2, [r3, #0]
                LCD_DisplayMenu();
 8007afc:	f7ff ff08 	bl	8007910 <LCD_DisplayMenu>
            } else {
                // Turn on the indication LED (READY)
                HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_SET); // ***** IND LED ***//
            }
            break;
 8007b00:	e052      	b.n	8007ba8 <LCD_DisplayMenu+0x298>
                HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_SET); // ***** IND LED ***//
 8007b02:	2201      	movs	r2, #1
 8007b04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007b08:	482a      	ldr	r0, [pc, #168]	@ (8007bb4 <LCD_DisplayMenu+0x2a4>)
 8007b0a:	f7fb ff3d 	bl	8003988 <HAL_GPIO_WritePin>
            break;
 8007b0e:	e04b      	b.n	8007ba8 <LCD_DisplayMenu+0x298>

        case MENU_SHOW_RESULT:
        	StartTestMenuFlag = 2;
 8007b10:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc0 <LCD_DisplayMenu+0x2b0>)
 8007b12:	2202      	movs	r2, #2
 8007b14:	601a      	str	r2, [r3, #0]
            //ssd1306_SetCursor(menu_line_X, menu_line_Y);
            //ssd1306_WriteString("Result", Font_7x10, White);
            if (currentCursor == CURSOR_ON_MENU){
 8007b16:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc4 <LCD_DisplayMenu+0x2b4>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d120      	bne.n	8007b60 <LCD_DisplayMenu+0x250>
				//ssd1306_SetCursor(menu_line_X+70, menu_line_Y);
				//ssd1306_WriteString("<-", Font_7x10, White);

				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 8007b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8007bc8 <LCD_DisplayMenu+0x2b8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	3b05      	subs	r3, #5
 8007b26:	b2d8      	uxtb	r0, r3
 8007b28:	4b28      	ldr	r3, [pc, #160]	@ (8007bcc <LCD_DisplayMenu+0x2bc>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	3b05      	subs	r3, #5
 8007b30:	b2d9      	uxtb	r1, r3
 8007b32:	2301      	movs	r3, #1
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	2323      	movs	r3, #35	@ 0x23
 8007b38:	225a      	movs	r2, #90	@ 0x5a
 8007b3a:	f7f9 ff1f 	bl	800197c <ssd1306_FillRectangle>

				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8007b3e:	4b22      	ldr	r3, [pc, #136]	@ (8007bc8 <LCD_DisplayMenu+0x2b8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	4a21      	ldr	r2, [pc, #132]	@ (8007bcc <LCD_DisplayMenu+0x2bc>)
 8007b46:	6812      	ldr	r2, [r2, #0]
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7f9 fefd 	bl	800194c <ssd1306_SetCursor>
				ssd1306_WriteString(" Result", Font_7x10, Black);
 8007b52:	4b1f      	ldr	r3, [pc, #124]	@ (8007bd0 <LCD_DisplayMenu+0x2c0>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	9200      	str	r2, [sp, #0]
 8007b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b5a:	4828      	ldr	r0, [pc, #160]	@ (8007bfc <LCD_DisplayMenu+0x2ec>)
 8007b5c:	f7f9 fed0 	bl	8001900 <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 25, set_line_Y);
 8007b60:	4b1e      	ldr	r3, [pc, #120]	@ (8007bdc <LCD_DisplayMenu+0x2cc>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	3b19      	subs	r3, #25
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8007be0 <LCD_DisplayMenu+0x2d0>)
 8007b6c:	6812      	ldr	r2, [r2, #0]
 8007b6e:	b2d2      	uxtb	r2, r2
 8007b70:	4611      	mov	r1, r2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7f9 feea 	bl	800194c <ssd1306_SetCursor>
            char bilStr[20];
            snprintf(bilStr, sizeof(bilStr), "%.2f mg/dL", AveragedBil);
 8007b78:	4b21      	ldr	r3, [pc, #132]	@ (8007c00 <LCD_DisplayMenu+0x2f0>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7f8 fce3 	bl	8000548 <__aeabi_f2d>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	f107 0018 	add.w	r0, r7, #24
 8007b8a:	e9cd 2300 	strd	r2, r3, [sp]
 8007b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8007c04 <LCD_DisplayMenu+0x2f4>)
 8007b90:	2114      	movs	r1, #20
 8007b92:	f001 f943 	bl	8008e1c <sniprintf>
            ssd1306_WriteString(bilStr, Font_11x18, White);
 8007b96:	4b15      	ldr	r3, [pc, #84]	@ (8007bec <LCD_DisplayMenu+0x2dc>)
 8007b98:	f107 0018 	add.w	r0, r7, #24
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	9200      	str	r2, [sp, #0]
 8007ba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ba2:	f7f9 fead 	bl	8001900 <ssd1306_WriteString>
            break;
 8007ba6:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 8007ba8:	f7f9 fd9e 	bl	80016e8 <ssd1306_UpdateScreen>
}
 8007bac:	bf00      	nop
 8007bae:	3740      	adds	r7, #64	@ 0x40
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	40021000 	.word	0x40021000
 8007bb8:	200011f8 	.word	0x200011f8
 8007bbc:	20001125 	.word	0x20001125
 8007bc0:	20001234 	.word	0x20001234
 8007bc4:	200011f9 	.word	0x200011f9
 8007bc8:	2000001c 	.word	0x2000001c
 8007bcc:	20000020 	.word	0x20000020
 8007bd0:	0800cbfc 	.word	0x0800cbfc
 8007bd4:	0800b0c0 	.word	0x0800b0c0
 8007bd8:	0800b0c8 	.word	0x0800b0c8
 8007bdc:	20000024 	.word	0x20000024
 8007be0:	20000028 	.word	0x20000028
 8007be4:	2000000c 	.word	0x2000000c
 8007be8:	0800b0d4 	.word	0x0800b0d4
 8007bec:	0800cc08 	.word	0x0800cc08
 8007bf0:	0800b0dc 	.word	0x0800b0dc
 8007bf4:	20000010 	.word	0x20000010
 8007bf8:	0800b0e8 	.word	0x0800b0e8
 8007bfc:	0800b0f4 	.word	0x0800b0f4
 8007c00:	2000122c 	.word	0x2000122c
 8007c04:	0800b0fc 	.word	0x0800b0fc

08007c08 <LCD_HandleButtonPress>:

// Function to handle button presses
void LCD_HandleButtonPress(void) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
    // Assume button GPIOs are connected and configured
    if (HAL_GPIO_ReadPin(GPIOB, NAVIGATE_BTN_Pin) == GPIO_PIN_RESET) { // Navigate Button
 8007c0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c10:	4862      	ldr	r0, [pc, #392]	@ (8007d9c <LCD_HandleButtonPress+0x194>)
 8007c12:	f7fb fea1 	bl	8003958 <HAL_GPIO_ReadPin>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d133      	bne.n	8007c84 <LCD_HandleButtonPress+0x7c>
        holdNavigateBtn++;
 8007c1c:	4b60      	ldr	r3, [pc, #384]	@ (8007da0 <LCD_HandleButtonPress+0x198>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	3301      	adds	r3, #1
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	4b5e      	ldr	r3, [pc, #376]	@ (8007da0 <LCD_HandleButtonPress+0x198>)
 8007c26:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Debounce_Delay); // Debounce delay
 8007c28:	4b5e      	ldr	r3, [pc, #376]	@ (8007da4 <LCD_HandleButtonPress+0x19c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fa fbad 	bl	800238c <HAL_Delay>

        if (holdNavigateBtn >= 12) { // Assuming hold for 2000 ms
 8007c32:	4b5b      	ldr	r3, [pc, #364]	@ (8007da0 <LCD_HandleButtonPress+0x198>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b0b      	cmp	r3, #11
 8007c38:	d902      	bls.n	8007c40 <LCD_HandleButtonPress+0x38>
            LCD_Reset();
 8007c3a:	f000 f907 	bl	8007e4c <LCD_Reset>
        }

    } else {
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
    }
}
 8007c3e:	e0ab      	b.n	8007d98 <LCD_HandleButtonPress+0x190>
        	 if (currentMenu == MENU_SET_AVG)
 8007c40:	4b59      	ldr	r3, [pc, #356]	@ (8007da8 <LCD_HandleButtonPress+0x1a0>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f040 80a7 	bne.w	8007d98 <LCD_HandleButtonPress+0x190>
				currentCursor = (currentCursor + 1) % CURSOR_TOTAL;
 8007c4a:	4b58      	ldr	r3, [pc, #352]	@ (8007dac <LCD_HandleButtonPress+0x1a4>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	bfb8      	it	lt
 8007c58:	425b      	neglt	r3, r3
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	4b53      	ldr	r3, [pc, #332]	@ (8007dac <LCD_HandleButtonPress+0x1a4>)
 8007c5e:	701a      	strb	r2, [r3, #0]
				if(currentCursor>=2)  currentCursor = (currentCursor - 1) % CURSOR_TOTAL;
 8007c60:	4b52      	ldr	r3, [pc, #328]	@ (8007dac <LCD_HandleButtonPress+0x1a4>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d90a      	bls.n	8007c7e <LCD_HandleButtonPress+0x76>
 8007c68:	4b50      	ldr	r3, [pc, #320]	@ (8007dac <LCD_HandleButtonPress+0x1a4>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	bfb8      	it	lt
 8007c76:	425b      	neglt	r3, r3
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8007dac <LCD_HandleButtonPress+0x1a4>)
 8007c7c:	701a      	strb	r2, [r3, #0]
				LCD_UpdateMenu();
 8007c7e:	f000 f8a5 	bl	8007dcc <LCD_UpdateMenu>
}
 8007c82:	e089      	b.n	8007d98 <LCD_HandleButtonPress+0x190>
    } else if (HAL_GPIO_ReadPin(GPIOE, NEXT_BTN_Pin) == GPIO_PIN_RESET) { // Next Button
 8007c84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007c88:	4849      	ldr	r0, [pc, #292]	@ (8007db0 <LCD_HandleButtonPress+0x1a8>)
 8007c8a:	f7fb fe65 	bl	8003958 <HAL_GPIO_ReadPin>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d131      	bne.n	8007cf8 <LCD_HandleButtonPress+0xf0>
        HAL_Delay(Debounce_Delay); // Debounce delay
 8007c94:	4b43      	ldr	r3, [pc, #268]	@ (8007da4 <LCD_HandleButtonPress+0x19c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fa fb77 	bl	800238c <HAL_Delay>
        if (currentCursor == CURSOR_ON_MENU) {
 8007c9e:	4b43      	ldr	r3, [pc, #268]	@ (8007dac <LCD_HandleButtonPress+0x1a4>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d111      	bne.n	8007cca <LCD_HandleButtonPress+0xc2>
            currentMenu = (currentMenu + 1) % MENU_TOTAL;
 8007ca6:	4b40      	ldr	r3, [pc, #256]	@ (8007da8 <LCD_HandleButtonPress+0x1a0>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	4b41      	ldr	r3, [pc, #260]	@ (8007db4 <LCD_HandleButtonPress+0x1ac>)
 8007cae:	fb83 3102 	smull	r3, r1, r3, r2
 8007cb2:	17d3      	asrs	r3, r2, #31
 8007cb4:	1ac9      	subs	r1, r1, r3
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	440b      	add	r3, r1
 8007cbc:	1ad1      	subs	r1, r2, r3
 8007cbe:	b2ca      	uxtb	r2, r1
 8007cc0:	4b39      	ldr	r3, [pc, #228]	@ (8007da8 <LCD_HandleButtonPress+0x1a0>)
 8007cc2:	701a      	strb	r2, [r3, #0]
            LCD_UpdateMenu();
 8007cc4:	f000 f882 	bl	8007dcc <LCD_UpdateMenu>
}
 8007cc8:	e066      	b.n	8007d98 <LCD_HandleButtonPress+0x190>
        } else if (currentCursor == CURSOR_ON_VALUE) {
 8007cca:	4b38      	ldr	r3, [pc, #224]	@ (8007dac <LCD_HandleButtonPress+0x1a4>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d162      	bne.n	8007d98 <LCD_HandleButtonPress+0x190>
            if (currentMenu == MENU_SET_AVG) {
 8007cd2:	4b35      	ldr	r3, [pc, #212]	@ (8007da8 <LCD_HandleButtonPress+0x1a0>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d15e      	bne.n	8007d98 <LCD_HandleButtonPress+0x190>
                avgValue++;
 8007cda:	4b37      	ldr	r3, [pc, #220]	@ (8007db8 <LCD_HandleButtonPress+0x1b0>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	4a35      	ldr	r2, [pc, #212]	@ (8007db8 <LCD_HandleButtonPress+0x1b0>)
 8007ce2:	6013      	str	r3, [r2, #0]
                if (avgValue > 9) avgValue = 9; // Max AVG value
 8007ce4:	4b34      	ldr	r3, [pc, #208]	@ (8007db8 <LCD_HandleButtonPress+0x1b0>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b09      	cmp	r3, #9
 8007cea:	dd02      	ble.n	8007cf2 <LCD_HandleButtonPress+0xea>
 8007cec:	4b32      	ldr	r3, [pc, #200]	@ (8007db8 <LCD_HandleButtonPress+0x1b0>)
 8007cee:	2209      	movs	r2, #9
 8007cf0:	601a      	str	r2, [r3, #0]
                LCD_UpdateMenu();
 8007cf2:	f000 f86b 	bl	8007dcc <LCD_UpdateMenu>
}
 8007cf6:	e04f      	b.n	8007d98 <LCD_HandleButtonPress+0x190>
    } else if (HAL_GPIO_ReadPin(GPIOE, PREV_BTN_Pin) == GPIO_PIN_RESET) { // Prev Button
 8007cf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cfc:	482c      	ldr	r0, [pc, #176]	@ (8007db0 <LCD_HandleButtonPress+0x1a8>)
 8007cfe:	f7fb fe2b 	bl	8003958 <HAL_GPIO_ReadPin>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d144      	bne.n	8007d92 <LCD_HandleButtonPress+0x18a>
        HAL_Delay(Debounce_Delay); // Debounce delay
 8007d08:	4b26      	ldr	r3, [pc, #152]	@ (8007da4 <LCD_HandleButtonPress+0x19c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fa fb3d 	bl	800238c <HAL_Delay>
        if (currentMenu == MENU_SHOW_RESULT) {SumBil = 0;AveragedBil = 0;BilResult=0;testDone=0;}  //*//
 8007d12:	4b25      	ldr	r3, [pc, #148]	@ (8007da8 <LCD_HandleButtonPress+0x1a0>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d10e      	bne.n	8007d38 <LCD_HandleButtonPress+0x130>
 8007d1a:	4b28      	ldr	r3, [pc, #160]	@ (8007dbc <LCD_HandleButtonPress+0x1b4>)
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	4b27      	ldr	r3, [pc, #156]	@ (8007dc0 <LCD_HandleButtonPress+0x1b8>)
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	4b26      	ldr	r3, [pc, #152]	@ (8007dc4 <LCD_HandleButtonPress+0x1bc>)
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	4b25      	ldr	r3, [pc, #148]	@ (8007dc8 <LCD_HandleButtonPress+0x1c0>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	701a      	strb	r2, [r3, #0]
        if (currentCursor == CURSOR_ON_MENU) {
 8007d38:	4b1c      	ldr	r3, [pc, #112]	@ (8007dac <LCD_HandleButtonPress+0x1a4>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d111      	bne.n	8007d64 <LCD_HandleButtonPress+0x15c>
            currentMenu = (currentMenu - 1 + MENU_TOTAL) % MENU_TOTAL;
 8007d40:	4b19      	ldr	r3, [pc, #100]	@ (8007da8 <LCD_HandleButtonPress+0x1a0>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	1c9a      	adds	r2, r3, #2
 8007d46:	4b1b      	ldr	r3, [pc, #108]	@ (8007db4 <LCD_HandleButtonPress+0x1ac>)
 8007d48:	fb83 3102 	smull	r3, r1, r3, r2
 8007d4c:	17d3      	asrs	r3, r2, #31
 8007d4e:	1ac9      	subs	r1, r1, r3
 8007d50:	460b      	mov	r3, r1
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	440b      	add	r3, r1
 8007d56:	1ad1      	subs	r1, r2, r3
 8007d58:	b2ca      	uxtb	r2, r1
 8007d5a:	4b13      	ldr	r3, [pc, #76]	@ (8007da8 <LCD_HandleButtonPress+0x1a0>)
 8007d5c:	701a      	strb	r2, [r3, #0]
            LCD_UpdateMenu();
 8007d5e:	f000 f835 	bl	8007dcc <LCD_UpdateMenu>
}
 8007d62:	e019      	b.n	8007d98 <LCD_HandleButtonPress+0x190>
        } else if (currentCursor == CURSOR_ON_VALUE) {
 8007d64:	4b11      	ldr	r3, [pc, #68]	@ (8007dac <LCD_HandleButtonPress+0x1a4>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d115      	bne.n	8007d98 <LCD_HandleButtonPress+0x190>
            if (currentMenu == MENU_SET_AVG) {
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007da8 <LCD_HandleButtonPress+0x1a0>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d111      	bne.n	8007d98 <LCD_HandleButtonPress+0x190>
                avgValue--;
 8007d74:	4b10      	ldr	r3, [pc, #64]	@ (8007db8 <LCD_HandleButtonPress+0x1b0>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8007db8 <LCD_HandleButtonPress+0x1b0>)
 8007d7c:	6013      	str	r3, [r2, #0]
                if (avgValue < 1) avgValue = 1; // Min AVG value
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007db8 <LCD_HandleButtonPress+0x1b0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	dc02      	bgt.n	8007d8c <LCD_HandleButtonPress+0x184>
 8007d86:	4b0c      	ldr	r3, [pc, #48]	@ (8007db8 <LCD_HandleButtonPress+0x1b0>)
 8007d88:	2201      	movs	r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
                LCD_UpdateMenu();
 8007d8c:	f000 f81e 	bl	8007dcc <LCD_UpdateMenu>
}
 8007d90:	e002      	b.n	8007d98 <LCD_HandleButtonPress+0x190>
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
 8007d92:	4b03      	ldr	r3, [pc, #12]	@ (8007da0 <LCD_HandleButtonPress+0x198>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40020400 	.word	0x40020400
 8007da0:	200011fa 	.word	0x200011fa
 8007da4:	20000014 	.word	0x20000014
 8007da8:	200011f8 	.word	0x200011f8
 8007dac:	200011f9 	.word	0x200011f9
 8007db0:	40021000 	.word	0x40021000
 8007db4:	55555556 	.word	0x55555556
 8007db8:	2000000c 	.word	0x2000000c
 8007dbc:	20001230 	.word	0x20001230
 8007dc0:	2000122c 	.word	0x2000122c
 8007dc4:	200011f4 	.word	0x200011f4
 8007dc8:	20001125 	.word	0x20001125

08007dcc <LCD_UpdateMenu>:

// Function to handle menu updates
void LCD_UpdateMenu(void) {
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
    LCD_DisplayMenu();
 8007dd0:	f7ff fd9e 	bl	8007910 <LCD_DisplayMenu>
}
 8007dd4:	bf00      	nop
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <MeasureAverage>:

void MeasureAverage(void) {
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
for (int var = 1; var <= avgValue+1; var++)
 8007dde:	2301      	movs	r3, #1
 8007de0:	607b      	str	r3, [r7, #4]
 8007de2:	e010      	b.n	8007e06 <MeasureAverage+0x2e>
{
	SumBil += BilArray[var];
 8007de4:	4a15      	ldr	r2, [pc, #84]	@ (8007e3c <MeasureAverage+0x64>)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	ed93 7a00 	vldr	s14, [r3]
 8007df0:	4b13      	ldr	r3, [pc, #76]	@ (8007e40 <MeasureAverage+0x68>)
 8007df2:	edd3 7a00 	vldr	s15, [r3]
 8007df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dfa:	4b11      	ldr	r3, [pc, #68]	@ (8007e40 <MeasureAverage+0x68>)
 8007dfc:	edc3 7a00 	vstr	s15, [r3]
for (int var = 1; var <= avgValue+1; var++)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3301      	adds	r3, #1
 8007e04:	607b      	str	r3, [r7, #4]
 8007e06:	4b0f      	ldr	r3, [pc, #60]	@ (8007e44 <MeasureAverage+0x6c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	dde8      	ble.n	8007de4 <MeasureAverage+0xc>
}
AveragedBil = SumBil / avgValue;
 8007e12:	4b0b      	ldr	r3, [pc, #44]	@ (8007e40 <MeasureAverage+0x68>)
 8007e14:	edd3 6a00 	vldr	s13, [r3]
 8007e18:	4b0a      	ldr	r3, [pc, #40]	@ (8007e44 <MeasureAverage+0x6c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	ee07 3a90 	vmov	s15, r3
 8007e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e28:	4b07      	ldr	r3, [pc, #28]	@ (8007e48 <MeasureAverage+0x70>)
 8007e2a:	edc3 7a00 	vstr	s15, [r3]
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	200011fc 	.word	0x200011fc
 8007e40:	20001230 	.word	0x20001230
 8007e44:	2000000c 	.word	0x2000000c
 8007e48:	2000122c 	.word	0x2000122c

08007e4c <LCD_Reset>:

// Function to reset the menu to the initial state
void LCD_Reset(void) {
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
    currentMenu = MENU_SET_AVG;
 8007e52:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec0 <LCD_Reset+0x74>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	701a      	strb	r2, [r3, #0]
    currentCursor = CURSOR_ON_MENU;
 8007e58:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec4 <LCD_Reset+0x78>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	701a      	strb	r2, [r3, #0]
    avgValue = 1;
 8007e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec8 <LCD_Reset+0x7c>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
    currentTest = 1;
 8007e64:	4b19      	ldr	r3, [pc, #100]	@ (8007ecc <LCD_Reset+0x80>)
 8007e66:	2201      	movs	r2, #1
 8007e68:	601a      	str	r2, [r3, #0]
    //************************************//
    for (int i = 0; i <= 12-1; i++) BilArray[i]=0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	607b      	str	r3, [r7, #4]
 8007e6e:	e009      	b.n	8007e84 <LCD_Reset+0x38>
 8007e70:	4a17      	ldr	r2, [pc, #92]	@ (8007ed0 <LCD_Reset+0x84>)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	f04f 0200 	mov.w	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3301      	adds	r3, #1
 8007e82:	607b      	str	r3, [r7, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b0b      	cmp	r3, #11
 8007e88:	ddf2      	ble.n	8007e70 <LCD_Reset+0x24>
    SumBil = 0;
 8007e8a:	4b12      	ldr	r3, [pc, #72]	@ (8007ed4 <LCD_Reset+0x88>)
 8007e8c:	f04f 0200 	mov.w	r2, #0
 8007e90:	601a      	str	r2, [r3, #0]
    AveragedBil = 0;
 8007e92:	4b11      	ldr	r3, [pc, #68]	@ (8007ed8 <LCD_Reset+0x8c>)
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]
    BilResult=0;
 8007e9a:	4b10      	ldr	r3, [pc, #64]	@ (8007edc <LCD_Reset+0x90>)
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]
    testDone=0;
 8007ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee0 <LCD_Reset+0x94>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
    //***********************************//
    HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET); // Turn off the LED
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007eae:	480d      	ldr	r0, [pc, #52]	@ (8007ee4 <LCD_Reset+0x98>)
 8007eb0:	f7fb fd6a 	bl	8003988 <HAL_GPIO_WritePin>
    LCD_UpdateMenu();
 8007eb4:	f7ff ff8a 	bl	8007dcc <LCD_UpdateMenu>
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	200011f8 	.word	0x200011f8
 8007ec4:	200011f9 	.word	0x200011f9
 8007ec8:	2000000c 	.word	0x2000000c
 8007ecc:	20000010 	.word	0x20000010
 8007ed0:	200011fc 	.word	0x200011fc
 8007ed4:	20001230 	.word	0x20001230
 8007ed8:	2000122c 	.word	0x2000122c
 8007edc:	200011f4 	.word	0x200011f4
 8007ee0:	20001125 	.word	0x20001125
 8007ee4:	40021000 	.word	0x40021000

08007ee8 <DoesTestComplete>:

// Call this function after each test
void DoesTestComplete(void) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0

	if (testDone)    				 // if test btn pressed
 8007eec:	4b15      	ldr	r3, [pc, #84]	@ (8007f44 <DoesTestComplete+0x5c>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d025      	beq.n	8007f40 <DoesTestComplete+0x58>
	{
		testDone=0;
 8007ef4:	4b13      	ldr	r3, [pc, #76]	@ (8007f44 <DoesTestComplete+0x5c>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	701a      	strb	r2, [r3, #0]
		BilArray[currentTest]=BilResult;
 8007efa:	4b13      	ldr	r3, [pc, #76]	@ (8007f48 <DoesTestComplete+0x60>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a13      	ldr	r2, [pc, #76]	@ (8007f4c <DoesTestComplete+0x64>)
 8007f00:	6812      	ldr	r2, [r2, #0]
 8007f02:	4913      	ldr	r1, [pc, #76]	@ (8007f50 <DoesTestComplete+0x68>)
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET);
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007f10:	4810      	ldr	r0, [pc, #64]	@ (8007f54 <DoesTestComplete+0x6c>)
 8007f12:	f7fb fd39 	bl	8003988 <HAL_GPIO_WritePin>
		HAL_Delay(Tests_Intratime);     // Time between Tests
 8007f16:	4b10      	ldr	r3, [pc, #64]	@ (8007f58 <DoesTestComplete+0x70>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fa fa36 	bl	800238c <HAL_Delay>

		currentTest++;
 8007f20:	4b09      	ldr	r3, [pc, #36]	@ (8007f48 <DoesTestComplete+0x60>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3301      	adds	r3, #1
 8007f26:	4a08      	ldr	r2, [pc, #32]	@ (8007f48 <DoesTestComplete+0x60>)
 8007f28:	6013      	str	r3, [r2, #0]
		if (currentTest > avgValue)  currentMenu = MENU_SHOW_RESULT;
 8007f2a:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <DoesTestComplete+0x60>)
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f5c <DoesTestComplete+0x74>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	dd02      	ble.n	8007f3c <DoesTestComplete+0x54>
 8007f36:	4b0a      	ldr	r3, [pc, #40]	@ (8007f60 <DoesTestComplete+0x78>)
 8007f38:	2202      	movs	r2, #2
 8007f3a:	701a      	strb	r2, [r3, #0]
		LCD_UpdateMenu();
 8007f3c:	f7ff ff46 	bl	8007dcc <LCD_UpdateMenu>
	}
}
 8007f40:	bf00      	nop
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20001125 	.word	0x20001125
 8007f48:	20000010 	.word	0x20000010
 8007f4c:	200011f4 	.word	0x200011f4
 8007f50:	200011fc 	.word	0x200011fc
 8007f54:	40021000 	.word	0x40021000
 8007f58:	20000018 	.word	0x20000018
 8007f5c:	2000000c 	.word	0x2000000c
 8007f60:	200011f8 	.word	0x200011f8

08007f64 <bcdToDec>:
// BCD conversion helper functions
uint8_t decToBcd(int val) {
    return (uint8_t)((val / 10 * 16) + (val % 10));
}

int bcdToDec(uint8_t val) {
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	091b      	lsrs	r3, r3, #4
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	461a      	mov	r2, r3
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	461a      	mov	r2, r3
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	4413      	add	r3, r2
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <RTC_Init>:

// Function to initialize the DS1307 RTC
void RTC_Init(void) {
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af02      	add	r7, sp, #8
    // Ensure the RTC is started by setting the CH (Clock Halt) bit to 0
    uint8_t initData[2] = {0x00, 0x00};
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, initData, 2, HAL_MAX_DELAY);
 8007f9e:	1d3a      	adds	r2, r7, #4
 8007fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	21d0      	movs	r1, #208	@ 0xd0
 8007faa:	4803      	ldr	r0, [pc, #12]	@ (8007fb8 <RTC_Init+0x24>)
 8007fac:	f7fb fe62 	bl	8003c74 <HAL_I2C_Master_Transmit>
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	200002c0 	.word	0x200002c0

08007fbc <RTC_GetTime>:

    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, setData, 8, HAL_MAX_DELAY);
}

// Function to read the current time and date from the DS1307
void RTC_GetTime(uint8_t* hours, uint8_t* minutes, uint8_t* seconds, uint8_t* day, uint8_t* date, uint8_t* month, uint8_t* year) {
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08a      	sub	sp, #40	@ 0x28
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
    uint8_t readData[7];
    uint8_t startAddr = 0x00;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, &startAddr, 1, HAL_MAX_DELAY);
 8007fce:	f107 0217 	add.w	r2, r7, #23
 8007fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	2301      	movs	r3, #1
 8007fda:	21d0      	movs	r1, #208	@ 0xd0
 8007fdc:	4827      	ldr	r0, [pc, #156]	@ (800807c <RTC_GetTime+0xc0>)
 8007fde:	f7fb fe49 	bl	8003c74 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, DS1307_ADDRESS << 1, readData, 7, HAL_MAX_DELAY);
 8007fe2:	f107 0218 	add.w	r2, r7, #24
 8007fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	2307      	movs	r3, #7
 8007fee:	21d0      	movs	r1, #208	@ 0xd0
 8007ff0:	4822      	ldr	r0, [pc, #136]	@ (800807c <RTC_GetTime+0xc0>)
 8007ff2:	f7fb ff3d 	bl	8003e70 <HAL_I2C_Master_Receive>

    *seconds = bcdToDec(readData[0] & 0x7F);  // Mask to ignore CH bit
 8007ff6:	7e3b      	ldrb	r3, [r7, #24]
 8007ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff ffb0 	bl	8007f64 <bcdToDec>
 8008004:	4603      	mov	r3, r0
 8008006:	b2da      	uxtb	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	701a      	strb	r2, [r3, #0]
    *minutes = bcdToDec(readData[1]);
 800800c:	7e7b      	ldrb	r3, [r7, #25]
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff ffa8 	bl	8007f64 <bcdToDec>
 8008014:	4603      	mov	r3, r0
 8008016:	b2da      	uxtb	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	701a      	strb	r2, [r3, #0]
    *hours = bcdToDec(readData[2] & 0x3F);  // 24-hour format
 800801c:	7ebb      	ldrb	r3, [r7, #26]
 800801e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008022:	b2db      	uxtb	r3, r3
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff ff9d 	bl	8007f64 <bcdToDec>
 800802a:	4603      	mov	r3, r0
 800802c:	b2da      	uxtb	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	701a      	strb	r2, [r3, #0]
    *day = bcdToDec(readData[3]);
 8008032:	7efb      	ldrb	r3, [r7, #27]
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff ff95 	bl	8007f64 <bcdToDec>
 800803a:	4603      	mov	r3, r0
 800803c:	b2da      	uxtb	r2, r3
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	701a      	strb	r2, [r3, #0]
    *date = bcdToDec(readData[4]);
 8008042:	7f3b      	ldrb	r3, [r7, #28]
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff ff8d 	bl	8007f64 <bcdToDec>
 800804a:	4603      	mov	r3, r0
 800804c:	b2da      	uxtb	r2, r3
 800804e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008050:	701a      	strb	r2, [r3, #0]
    *month = bcdToDec(readData[5]);
 8008052:	7f7b      	ldrb	r3, [r7, #29]
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff ff85 	bl	8007f64 <bcdToDec>
 800805a:	4603      	mov	r3, r0
 800805c:	b2da      	uxtb	r2, r3
 800805e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008060:	701a      	strb	r2, [r3, #0]
    *year = bcdToDec(readData[6]);
 8008062:	7fbb      	ldrb	r3, [r7, #30]
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff ff7d 	bl	8007f64 <bcdToDec>
 800806a:	4603      	mov	r3, r0
 800806c:	b2da      	uxtb	r2, r3
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	701a      	strb	r2, [r3, #0]
}
 8008072:	bf00      	nop
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	200002c0 	.word	0x200002c0

08008080 <RTC_DisplayTime>:

// Function to display the time and date on the OLED
void RTC_DisplayTime(void) {
 8008080:	b590      	push	{r4, r7, lr}
 8008082:	b08d      	sub	sp, #52	@ 0x34
 8008084:	af04      	add	r7, sp, #16
    uint8_t hours, minutes, seconds, day, date, month, year;
    char buffer[20];

    RTC_GetTime(&hours, &minutes, &seconds, &day, &date, &month, &year);
 8008086:	f107 041c 	add.w	r4, r7, #28
 800808a:	f107 021d 	add.w	r2, r7, #29
 800808e:	f107 011e 	add.w	r1, r7, #30
 8008092:	f107 001f 	add.w	r0, r7, #31
 8008096:	f107 0319 	add.w	r3, r7, #25
 800809a:	9302      	str	r3, [sp, #8]
 800809c:	f107 031a 	add.w	r3, r7, #26
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	f107 031b 	add.w	r3, r7, #27
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	4623      	mov	r3, r4
 80080aa:	f7ff ff87 	bl	8007fbc <RTC_GetTime>

    ssd1306_Fill(Black);
 80080ae:	2000      	movs	r0, #0
 80080b0:	f7f9 fb02 	bl	80016b8 <ssd1306_Fill>

    // Format time
    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 80080b4:	7ffb      	ldrb	r3, [r7, #31]
 80080b6:	4619      	mov	r1, r3
 80080b8:	7fbb      	ldrb	r3, [r7, #30]
 80080ba:	7f7a      	ldrb	r2, [r7, #29]
 80080bc:	1d38      	adds	r0, r7, #4
 80080be:	9201      	str	r2, [sp, #4]
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	460b      	mov	r3, r1
 80080c4:	4a15      	ldr	r2, [pc, #84]	@ (800811c <RTC_DisplayTime+0x9c>)
 80080c6:	2114      	movs	r1, #20
 80080c8:	f000 fea8 	bl	8008e1c <sniprintf>
    ssd1306_SetCursor(2, 0);
 80080cc:	2100      	movs	r1, #0
 80080ce:	2002      	movs	r0, #2
 80080d0:	f7f9 fc3c 	bl	800194c <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, Font_6x8 ,White);
 80080d4:	4b12      	ldr	r3, [pc, #72]	@ (8008120 <RTC_DisplayTime+0xa0>)
 80080d6:	1d38      	adds	r0, r7, #4
 80080d8:	2201      	movs	r2, #1
 80080da:	9200      	str	r2, [sp, #0]
 80080dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080de:	f7f9 fc0f 	bl	8001900 <ssd1306_WriteString>

    // Format date
    snprintf(buffer, sizeof(buffer), "%02d/%02d/20%02d", date, month, year);
 80080e2:	7efb      	ldrb	r3, [r7, #27]
 80080e4:	4619      	mov	r1, r3
 80080e6:	7ebb      	ldrb	r3, [r7, #26]
 80080e8:	7e7a      	ldrb	r2, [r7, #25]
 80080ea:	1d38      	adds	r0, r7, #4
 80080ec:	9201      	str	r2, [sp, #4]
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	460b      	mov	r3, r1
 80080f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008124 <RTC_DisplayTime+0xa4>)
 80080f4:	2114      	movs	r1, #20
 80080f6:	f000 fe91 	bl	8008e1c <sniprintf>
    ssd1306_SetCursor(68, 0);
 80080fa:	2100      	movs	r1, #0
 80080fc:	2044      	movs	r0, #68	@ 0x44
 80080fe:	f7f9 fc25 	bl	800194c <ssd1306_SetCursor>
    ssd1306_WriteString(buffer,Font_6x8, White);
 8008102:	4b07      	ldr	r3, [pc, #28]	@ (8008120 <RTC_DisplayTime+0xa0>)
 8008104:	1d38      	adds	r0, r7, #4
 8008106:	2201      	movs	r2, #1
 8008108:	9200      	str	r2, [sp, #0]
 800810a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800810c:	f7f9 fbf8 	bl	8001900 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8008110:	f7f9 faea 	bl	80016e8 <ssd1306_UpdateScreen>
}
 8008114:	bf00      	nop
 8008116:	3724      	adds	r7, #36	@ 0x24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd90      	pop	{r4, r7, pc}
 800811c:	0800b108 	.word	0x0800b108
 8008120:	0800cbf0 	.word	0x0800cbf0
 8008124:	0800b118 	.word	0x0800b118

08008128 <spectrometer>:

volatile uint8_t eos_received = 0;


void spectrometer(void)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin) == GPIO_PIN_RESET) )
 800812c:	2120      	movs	r1, #32
 800812e:	4811      	ldr	r0, [pc, #68]	@ (8008174 <spectrometer+0x4c>)
 8008130:	f7fb fc12 	bl	8003958 <HAL_GPIO_ReadPin>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d11a      	bne.n	8008170 <spectrometer+0x48>
	{
		if(StartTestMenuFlag==1){
 800813a:	4b0f      	ldr	r3, [pc, #60]	@ (8008178 <spectrometer+0x50>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d102      	bne.n	8008148 <spectrometer+0x20>
			generate_spectrometer_signals();
 8008142:	f000 f81d 	bl	8008180 <generate_spectrometer_signals>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
			 HAL_Delay(1000);
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
		}
	}
}
 8008146:	e013      	b.n	8008170 <spectrometer+0x48>
		}else if (StartTestMenuFlag==2) {                               // if current menu != StartTest
 8008148:	4b0b      	ldr	r3, [pc, #44]	@ (8008178 <spectrometer+0x50>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b02      	cmp	r3, #2
 800814e:	d10f      	bne.n	8008170 <spectrometer+0x48>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 8008150:	2201      	movs	r2, #1
 8008152:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008156:	4809      	ldr	r0, [pc, #36]	@ (800817c <spectrometer+0x54>)
 8008158:	f7fb fc16 	bl	8003988 <HAL_GPIO_WritePin>
			 HAL_Delay(1000);
 800815c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008160:	f7fa f914 	bl	800238c <HAL_Delay>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 8008164:	2200      	movs	r2, #0
 8008166:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800816a:	4804      	ldr	r0, [pc, #16]	@ (800817c <spectrometer+0x54>)
 800816c:	f7fb fc0c 	bl	8003988 <HAL_GPIO_WritePin>
}
 8008170:	bf00      	nop
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40020000 	.word	0x40020000
 8008178:	20001234 	.word	0x20001234
 800817c:	40021000 	.word	0x40021000

08008180 <generate_spectrometer_signals>:

void generate_spectrometer_signals(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0

	// Button is pressed
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET); // Turn on the LED
 8008184:	2201      	movs	r2, #1
 8008186:	2140      	movs	r1, #64	@ 0x40
 8008188:	4817      	ldr	r0, [pc, #92]	@ (80081e8 <generate_spectrometer_signals+0x68>)
 800818a:	f7fb fbfd 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Wait for stabilization
 800818e:	2001      	movs	r0, #1
 8008190:	f7fa f8fc 	bl	800238c <HAL_Delay>

	// Generate start signal for the spectrometer
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_RESET);
 8008194:	2200      	movs	r2, #0
 8008196:	2120      	movs	r1, #32
 8008198:	4814      	ldr	r0, [pc, #80]	@ (80081ec <generate_spectrometer_signals+0x6c>)
 800819a:	f7fb fbf5 	bl	8003988 <HAL_GPIO_WritePin>
	//DWT_Delay(1);
	HAL_Delay(1);
 800819e:	2001      	movs	r0, #1
 80081a0:	f7fa f8f4 	bl	800238c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 80081a4:	2201      	movs	r2, #1
 80081a6:	2120      	movs	r1, #32
 80081a8:	4810      	ldr	r0, [pc, #64]	@ (80081ec <generate_spectrometer_signals+0x6c>)
 80081aa:	f7fb fbed 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_Delay(20); //8//500 									// Higher integration time Higher Spectrum Amplitude
 80081ae:	2014      	movs	r0, #20
 80081b0:	f7fa f8ec 	bl	800238c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_RESET);
 80081b4:	2200      	movs	r2, #0
 80081b6:	2120      	movs	r1, #32
 80081b8:	480c      	ldr	r0, [pc, #48]	@ (80081ec <generate_spectrometer_signals+0x6c>)
 80081ba:	f7fb fbe5 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80081be:	2001      	movs	r0, #1
 80081c0:	f7fa f8e4 	bl	800238c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 80081c4:	2201      	movs	r2, #1
 80081c6:	2120      	movs	r1, #32
 80081c8:	4808      	ldr	r0, [pc, #32]	@ (80081ec <generate_spectrometer_signals+0x6c>)
 80081ca:	f7fb fbdd 	bl	8003988 <HAL_GPIO_WritePin>

	// Wait for EOS signal
	//while (!eos_received) {}
	capture_and_send_data();
 80081ce:	f7ff fa2f 	bl	8007630 <capture_and_send_data>
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET); 			// Turn off the LED
 80081d2:	2200      	movs	r2, #0
 80081d4:	2140      	movs	r1, #64	@ 0x40
 80081d6:	4804      	ldr	r0, [pc, #16]	@ (80081e8 <generate_spectrometer_signals+0x68>)
 80081d8:	f7fb fbd6 	bl	8003988 <HAL_GPIO_WritePin>
	eos_received = 0;
 80081dc:	4b04      	ldr	r3, [pc, #16]	@ (80081f0 <generate_spectrometer_signals+0x70>)
 80081de:	2200      	movs	r2, #0
 80081e0:	701a      	strb	r2, [r3, #0]

}
 80081e2:	bf00      	nop
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	40020000 	.word	0x40020000
 80081ec:	40020400 	.word	0x40020400
 80081f0:	20001238 	.word	0x20001238

080081f4 <EXTI4_IRQHandler>:

/////////////////////////////////////// EOS Interrupt ///////////////////////////////////////////
/* EXTI4 IRQ Handler */
void EXTI4_IRQHandler(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80081f8:	2010      	movs	r0, #16
 80081fa:	f7fb fbdf 	bl	80039bc <HAL_GPIO_EXTI_IRQHandler>
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <HAL_GPIO_EXTI_Callback>:

// Callback for EOS interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4) {
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	2b10      	cmp	r3, #16
 8008212:	d102      	bne.n	800821a <HAL_GPIO_EXTI_Callback+0x16>
        eos_received = 1;
 8008214:	4b04      	ldr	r3, [pc, #16]	@ (8008228 <HAL_GPIO_EXTI_Callback+0x24>)
 8008216:	2201      	movs	r2, #1
 8008218:	701a      	strb	r2, [r3, #0]
    }
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	20001238 	.word	0x20001238

0800822c <DWT_Init>:
/////////////////////////////////////// us Delay Timer ///////////////////////////////////////////
// Function to initialize the DWT unit
void DWT_Init(void) {
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
    // Enable TRC
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008230:	4b08      	ldr	r3, [pc, #32]	@ (8008254 <DWT_Init+0x28>)
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	4a07      	ldr	r2, [pc, #28]	@ (8008254 <DWT_Init+0x28>)
 8008236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800823a:	60d3      	str	r3, [r2, #12]
    // Unlock DWT access
    //DWT->LAR = 0xC5ACCE55;
    // Enable the cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800823c:	4b06      	ldr	r3, [pc, #24]	@ (8008258 <DWT_Init+0x2c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a05      	ldr	r2, [pc, #20]	@ (8008258 <DWT_Init+0x2c>)
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	6013      	str	r3, [r2, #0]
}
 8008248:	bf00      	nop
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	e000edf0 	.word	0xe000edf0
 8008258:	e0001000 	.word	0xe0001000

0800825c <DWT_GetSysClockFreq>:
// Function to get the system clock frequency
uint32_t DWT_GetSysClockFreq(void) {
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 8008260:	4b03      	ldr	r3, [pc, #12]	@ (8008270 <DWT_GetSysClockFreq+0x14>)
 8008262:	681b      	ldr	r3, [r3, #0]
}
 8008264:	4618      	mov	r0, r3
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	20000000 	.word	0x20000000

08008274 <DWT_Delay>:

// Function to create a microsecond delay
void DWT_Delay(uint32_t us) {
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 800827c:	4b0d      	ldr	r3, [pc, #52]	@ (80082b4 <DWT_Delay+0x40>)
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (DWT_GetSysClockFreq() / 1000000);
 8008282:	f7ff ffeb 	bl	800825c <DWT_GetSysClockFreq>
 8008286:	4603      	mov	r3, r0
 8008288:	4a0b      	ldr	r2, [pc, #44]	@ (80082b8 <DWT_Delay+0x44>)
 800828a:	fba2 2303 	umull	r2, r3, r2, r3
 800828e:	0c9a      	lsrs	r2, r3, #18
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	fb02 f303 	mul.w	r3, r2, r3
 8008296:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - startTick) < delayTicks);
 8008298:	bf00      	nop
 800829a:	4b06      	ldr	r3, [pc, #24]	@ (80082b4 <DWT_Delay+0x40>)
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d8f8      	bhi.n	800829a <DWT_Delay+0x26>
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	e0001000 	.word	0xe0001000
 80082b8:	431bde83 	.word	0x431bde83

080082bc <systemLoop>:
int logo_time = 2500;    //2500
int text_time = 2500;    //2000


void systemLoop(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
	  spectrometer();
 80082c0:	f7ff ff32 	bl	8008128 <spectrometer>
	  LCD();
 80082c4:	f7ff fb1c 	bl	8007900 <LCD>
	  RTC_DisplayTime();
 80082c8:	f7ff feda 	bl	8008080 <RTC_DisplayTime>
}
 80082cc:	bf00      	nop
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <systemSetup>:

void systemSetup(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
	   SpectrometerSetup();
 80082d4:	f000 f806 	bl	80082e4 <SpectrometerSetup>
	   LCD_Setup();
 80082d8:	f000 f828 	bl	800832c <LCD_Setup>
	   RTC_Init();
 80082dc:	f7ff fe5a 	bl	8007f94 <RTC_Init>
}
 80082e0:	bf00      	nop
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <SpectrometerSetup>:

//################################################################################################//

void SpectrometerSetup(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
	  TIM1->CCR1=5;  //50   50% Duty Cycle ==> to generate 135khz
 80082e8:	4b0c      	ldr	r3, [pc, #48]	@ (800831c <SpectrometerSetup+0x38>)
 80082ea:	2205      	movs	r2, #5
 80082ec:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80082ee:	2100      	movs	r1, #0
 80082f0:	480b      	ldr	r0, [pc, #44]	@ (8008320 <SpectrometerSetup+0x3c>)
 80082f2:	f7fd fb5d 	bl	80059b0 <HAL_TIM_PWM_Start>

	  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 80082f6:	2201      	movs	r2, #1
 80082f8:	2120      	movs	r1, #32
 80082fa:	480a      	ldr	r0, [pc, #40]	@ (8008324 <SpectrometerSetup+0x40>)
 80082fc:	f7fb fb44 	bl	8003988 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 8008300:	2200      	movs	r2, #0
 8008302:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8008306:	4807      	ldr	r0, [pc, #28]	@ (8008324 <SpectrometerSetup+0x40>)
 8008308:	f7fb fb3e 	bl	8003988 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET); // Turn off the LED
 800830c:	2200      	movs	r2, #0
 800830e:	2140      	movs	r1, #64	@ 0x40
 8008310:	4805      	ldr	r0, [pc, #20]	@ (8008328 <SpectrometerSetup+0x44>)
 8008312:	f7fb fb39 	bl	8003988 <HAL_GPIO_WritePin>
}
 8008316:	bf00      	nop
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	40010000 	.word	0x40010000
 8008320:	2000036c 	.word	0x2000036c
 8008324:	40020400 	.word	0x40020400
 8008328:	40020000 	.word	0x40020000

0800832c <LCD_Setup>:

void LCD_Setup(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
	  ssd1306_Init();
 8008330:	f7f9 f958 	bl	80015e4 <ssd1306_Init>
	  Aymed_Logo();
 8008334:	f000 f804 	bl	8008340 <Aymed_Logo>
	  Aymed_Text();
 8008338:	f000 f824 	bl	8008384 <Aymed_Text>

}
 800833c:	bf00      	nop
 800833e:	bd80      	pop	{r7, pc}

08008340 <Aymed_Logo>:

void Aymed_Logo(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af02      	add	r7, sp, #8
	 ssd1306_Fill(Black);
 8008346:	2000      	movs	r0, #0
 8008348:	f7f9 f9b6 	bl	80016b8 <ssd1306_Fill>
	 ssd1306_SetCursor(0, 0);
 800834c:	2100      	movs	r1, #0
 800834e:	2000      	movs	r0, #0
 8008350:	f7f9 fafc 	bl	800194c <ssd1306_SetCursor>
     ssd1306_DrawBitmap(0,0,image_data_ss,128,64, White );
 8008354:	2301      	movs	r3, #1
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	2340      	movs	r3, #64	@ 0x40
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	2380      	movs	r3, #128	@ 0x80
 800835e:	4a07      	ldr	r2, [pc, #28]	@ (800837c <Aymed_Logo+0x3c>)
 8008360:	2100      	movs	r1, #0
 8008362:	2000      	movs	r0, #0
 8008364:	f7f9 fb58 	bl	8001a18 <ssd1306_DrawBitmap>
     ssd1306_UpdateScreen();
 8008368:	f7f9 f9be 	bl	80016e8 <ssd1306_UpdateScreen>
     HAL_Delay(logo_time);
 800836c:	4b04      	ldr	r3, [pc, #16]	@ (8008380 <Aymed_Logo+0x40>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f7fa f80b 	bl	800238c <HAL_Delay>
}
 8008376:	bf00      	nop
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	0800cc34 	.word	0x0800cc34
 8008380:	2000002c 	.word	0x2000002c

08008384 <Aymed_Text>:

void Aymed_Text(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 800838a:	2000      	movs	r0, #0
 800838c:	f7f9 f994 	bl	80016b8 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8008390:	2100      	movs	r1, #0
 8008392:	2000      	movs	r0, #0
 8008394:	f7f9 fada 	bl	800194c <ssd1306_SetCursor>
    ssd1306_DrawBitmap(0,0,image_data_logo_text,128,32, White );          //AYMED text
 8008398:	2301      	movs	r3, #1
 800839a:	9301      	str	r3, [sp, #4]
 800839c:	2320      	movs	r3, #32
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	2380      	movs	r3, #128	@ 0x80
 80083a2:	4a0d      	ldr	r2, [pc, #52]	@ (80083d8 <Aymed_Text+0x54>)
 80083a4:	2100      	movs	r1, #0
 80083a6:	2000      	movs	r0, #0
 80083a8:	f7f9 fb36 	bl	8001a18 <ssd1306_DrawBitmap>
    //---------------------------------------------------//
    ssd1306_SetCursor(34, 48);
 80083ac:	2130      	movs	r1, #48	@ 0x30
 80083ae:	2022      	movs	r0, #34	@ 0x22
 80083b0:	f7f9 facc 	bl	800194c <ssd1306_SetCursor>
    ssd1306_WriteString("VISHNE v4", Font_7x10, White);					  //Device's Version
 80083b4:	4b09      	ldr	r3, [pc, #36]	@ (80083dc <Aymed_Text+0x58>)
 80083b6:	2201      	movs	r2, #1
 80083b8:	9200      	str	r2, [sp, #0]
 80083ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083bc:	4808      	ldr	r0, [pc, #32]	@ (80083e0 <Aymed_Text+0x5c>)
 80083be:	f7f9 fa9f 	bl	8001900 <ssd1306_WriteString>
    //---------------------------------------------------//
    ssd1306_UpdateScreen();
 80083c2:	f7f9 f991 	bl	80016e8 <ssd1306_UpdateScreen>

    HAL_Delay(text_time);
 80083c6:	4b07      	ldr	r3, [pc, #28]	@ (80083e4 <Aymed_Text+0x60>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f9 ffde 	bl	800238c <HAL_Delay>

}
 80083d0:	bf00      	nop
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	0800d034 	.word	0x0800d034
 80083dc:	0800cbfc 	.word	0x0800cbfc
 80083e0:	0800b12c 	.word	0x0800b12c
 80083e4:	20000030 	.word	0x20000030

080083e8 <__cvt>:
 80083e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ec:	ec57 6b10 	vmov	r6, r7, d0
 80083f0:	2f00      	cmp	r7, #0
 80083f2:	460c      	mov	r4, r1
 80083f4:	4619      	mov	r1, r3
 80083f6:	463b      	mov	r3, r7
 80083f8:	bfbb      	ittet	lt
 80083fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80083fe:	461f      	movlt	r7, r3
 8008400:	2300      	movge	r3, #0
 8008402:	232d      	movlt	r3, #45	@ 0x2d
 8008404:	700b      	strb	r3, [r1, #0]
 8008406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008408:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800840c:	4691      	mov	r9, r2
 800840e:	f023 0820 	bic.w	r8, r3, #32
 8008412:	bfbc      	itt	lt
 8008414:	4632      	movlt	r2, r6
 8008416:	4616      	movlt	r6, r2
 8008418:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800841c:	d005      	beq.n	800842a <__cvt+0x42>
 800841e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008422:	d100      	bne.n	8008426 <__cvt+0x3e>
 8008424:	3401      	adds	r4, #1
 8008426:	2102      	movs	r1, #2
 8008428:	e000      	b.n	800842c <__cvt+0x44>
 800842a:	2103      	movs	r1, #3
 800842c:	ab03      	add	r3, sp, #12
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	ab02      	add	r3, sp, #8
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	ec47 6b10 	vmov	d0, r6, r7
 8008438:	4653      	mov	r3, sl
 800843a:	4622      	mov	r2, r4
 800843c:	f000 fe98 	bl	8009170 <_dtoa_r>
 8008440:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008444:	4605      	mov	r5, r0
 8008446:	d119      	bne.n	800847c <__cvt+0x94>
 8008448:	f019 0f01 	tst.w	r9, #1
 800844c:	d00e      	beq.n	800846c <__cvt+0x84>
 800844e:	eb00 0904 	add.w	r9, r0, r4
 8008452:	2200      	movs	r2, #0
 8008454:	2300      	movs	r3, #0
 8008456:	4630      	mov	r0, r6
 8008458:	4639      	mov	r1, r7
 800845a:	f7f8 fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800845e:	b108      	cbz	r0, 8008464 <__cvt+0x7c>
 8008460:	f8cd 900c 	str.w	r9, [sp, #12]
 8008464:	2230      	movs	r2, #48	@ 0x30
 8008466:	9b03      	ldr	r3, [sp, #12]
 8008468:	454b      	cmp	r3, r9
 800846a:	d31e      	bcc.n	80084aa <__cvt+0xc2>
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008470:	1b5b      	subs	r3, r3, r5
 8008472:	4628      	mov	r0, r5
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	b004      	add	sp, #16
 8008478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008480:	eb00 0904 	add.w	r9, r0, r4
 8008484:	d1e5      	bne.n	8008452 <__cvt+0x6a>
 8008486:	7803      	ldrb	r3, [r0, #0]
 8008488:	2b30      	cmp	r3, #48	@ 0x30
 800848a:	d10a      	bne.n	80084a2 <__cvt+0xba>
 800848c:	2200      	movs	r2, #0
 800848e:	2300      	movs	r3, #0
 8008490:	4630      	mov	r0, r6
 8008492:	4639      	mov	r1, r7
 8008494:	f7f8 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8008498:	b918      	cbnz	r0, 80084a2 <__cvt+0xba>
 800849a:	f1c4 0401 	rsb	r4, r4, #1
 800849e:	f8ca 4000 	str.w	r4, [sl]
 80084a2:	f8da 3000 	ldr.w	r3, [sl]
 80084a6:	4499      	add	r9, r3
 80084a8:	e7d3      	b.n	8008452 <__cvt+0x6a>
 80084aa:	1c59      	adds	r1, r3, #1
 80084ac:	9103      	str	r1, [sp, #12]
 80084ae:	701a      	strb	r2, [r3, #0]
 80084b0:	e7d9      	b.n	8008466 <__cvt+0x7e>

080084b2 <__exponent>:
 80084b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084b4:	2900      	cmp	r1, #0
 80084b6:	bfba      	itte	lt
 80084b8:	4249      	neglt	r1, r1
 80084ba:	232d      	movlt	r3, #45	@ 0x2d
 80084bc:	232b      	movge	r3, #43	@ 0x2b
 80084be:	2909      	cmp	r1, #9
 80084c0:	7002      	strb	r2, [r0, #0]
 80084c2:	7043      	strb	r3, [r0, #1]
 80084c4:	dd29      	ble.n	800851a <__exponent+0x68>
 80084c6:	f10d 0307 	add.w	r3, sp, #7
 80084ca:	461d      	mov	r5, r3
 80084cc:	270a      	movs	r7, #10
 80084ce:	461a      	mov	r2, r3
 80084d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80084d4:	fb07 1416 	mls	r4, r7, r6, r1
 80084d8:	3430      	adds	r4, #48	@ 0x30
 80084da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80084de:	460c      	mov	r4, r1
 80084e0:	2c63      	cmp	r4, #99	@ 0x63
 80084e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80084e6:	4631      	mov	r1, r6
 80084e8:	dcf1      	bgt.n	80084ce <__exponent+0x1c>
 80084ea:	3130      	adds	r1, #48	@ 0x30
 80084ec:	1e94      	subs	r4, r2, #2
 80084ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084f2:	1c41      	adds	r1, r0, #1
 80084f4:	4623      	mov	r3, r4
 80084f6:	42ab      	cmp	r3, r5
 80084f8:	d30a      	bcc.n	8008510 <__exponent+0x5e>
 80084fa:	f10d 0309 	add.w	r3, sp, #9
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	42ac      	cmp	r4, r5
 8008502:	bf88      	it	hi
 8008504:	2300      	movhi	r3, #0
 8008506:	3302      	adds	r3, #2
 8008508:	4403      	add	r3, r0
 800850a:	1a18      	subs	r0, r3, r0
 800850c:	b003      	add	sp, #12
 800850e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008510:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008514:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008518:	e7ed      	b.n	80084f6 <__exponent+0x44>
 800851a:	2330      	movs	r3, #48	@ 0x30
 800851c:	3130      	adds	r1, #48	@ 0x30
 800851e:	7083      	strb	r3, [r0, #2]
 8008520:	70c1      	strb	r1, [r0, #3]
 8008522:	1d03      	adds	r3, r0, #4
 8008524:	e7f1      	b.n	800850a <__exponent+0x58>
	...

08008528 <_printf_float>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	b08d      	sub	sp, #52	@ 0x34
 800852e:	460c      	mov	r4, r1
 8008530:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008534:	4616      	mov	r6, r2
 8008536:	461f      	mov	r7, r3
 8008538:	4605      	mov	r5, r0
 800853a:	f000 fd09 	bl	8008f50 <_localeconv_r>
 800853e:	6803      	ldr	r3, [r0, #0]
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	4618      	mov	r0, r3
 8008544:	f7f7 fe94 	bl	8000270 <strlen>
 8008548:	2300      	movs	r3, #0
 800854a:	930a      	str	r3, [sp, #40]	@ 0x28
 800854c:	f8d8 3000 	ldr.w	r3, [r8]
 8008550:	9005      	str	r0, [sp, #20]
 8008552:	3307      	adds	r3, #7
 8008554:	f023 0307 	bic.w	r3, r3, #7
 8008558:	f103 0208 	add.w	r2, r3, #8
 800855c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008560:	f8d4 b000 	ldr.w	fp, [r4]
 8008564:	f8c8 2000 	str.w	r2, [r8]
 8008568:	e9d3 8900 	ldrd	r8, r9, [r3]
 800856c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008570:	9307      	str	r3, [sp, #28]
 8008572:	f8cd 8018 	str.w	r8, [sp, #24]
 8008576:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800857a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800857e:	4b9c      	ldr	r3, [pc, #624]	@ (80087f0 <_printf_float+0x2c8>)
 8008580:	f04f 32ff 	mov.w	r2, #4294967295
 8008584:	f7f8 fad2 	bl	8000b2c <__aeabi_dcmpun>
 8008588:	bb70      	cbnz	r0, 80085e8 <_printf_float+0xc0>
 800858a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800858e:	4b98      	ldr	r3, [pc, #608]	@ (80087f0 <_printf_float+0x2c8>)
 8008590:	f04f 32ff 	mov.w	r2, #4294967295
 8008594:	f7f8 faac 	bl	8000af0 <__aeabi_dcmple>
 8008598:	bb30      	cbnz	r0, 80085e8 <_printf_float+0xc0>
 800859a:	2200      	movs	r2, #0
 800859c:	2300      	movs	r3, #0
 800859e:	4640      	mov	r0, r8
 80085a0:	4649      	mov	r1, r9
 80085a2:	f7f8 fa9b 	bl	8000adc <__aeabi_dcmplt>
 80085a6:	b110      	cbz	r0, 80085ae <_printf_float+0x86>
 80085a8:	232d      	movs	r3, #45	@ 0x2d
 80085aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ae:	4a91      	ldr	r2, [pc, #580]	@ (80087f4 <_printf_float+0x2cc>)
 80085b0:	4b91      	ldr	r3, [pc, #580]	@ (80087f8 <_printf_float+0x2d0>)
 80085b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80085b6:	bf94      	ite	ls
 80085b8:	4690      	movls	r8, r2
 80085ba:	4698      	movhi	r8, r3
 80085bc:	2303      	movs	r3, #3
 80085be:	6123      	str	r3, [r4, #16]
 80085c0:	f02b 0304 	bic.w	r3, fp, #4
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	f04f 0900 	mov.w	r9, #0
 80085ca:	9700      	str	r7, [sp, #0]
 80085cc:	4633      	mov	r3, r6
 80085ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80085d0:	4621      	mov	r1, r4
 80085d2:	4628      	mov	r0, r5
 80085d4:	f000 f9d2 	bl	800897c <_printf_common>
 80085d8:	3001      	adds	r0, #1
 80085da:	f040 808d 	bne.w	80086f8 <_printf_float+0x1d0>
 80085de:	f04f 30ff 	mov.w	r0, #4294967295
 80085e2:	b00d      	add	sp, #52	@ 0x34
 80085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e8:	4642      	mov	r2, r8
 80085ea:	464b      	mov	r3, r9
 80085ec:	4640      	mov	r0, r8
 80085ee:	4649      	mov	r1, r9
 80085f0:	f7f8 fa9c 	bl	8000b2c <__aeabi_dcmpun>
 80085f4:	b140      	cbz	r0, 8008608 <_printf_float+0xe0>
 80085f6:	464b      	mov	r3, r9
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bfbc      	itt	lt
 80085fc:	232d      	movlt	r3, #45	@ 0x2d
 80085fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008602:	4a7e      	ldr	r2, [pc, #504]	@ (80087fc <_printf_float+0x2d4>)
 8008604:	4b7e      	ldr	r3, [pc, #504]	@ (8008800 <_printf_float+0x2d8>)
 8008606:	e7d4      	b.n	80085b2 <_printf_float+0x8a>
 8008608:	6863      	ldr	r3, [r4, #4]
 800860a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800860e:	9206      	str	r2, [sp, #24]
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	d13b      	bne.n	800868c <_printf_float+0x164>
 8008614:	2306      	movs	r3, #6
 8008616:	6063      	str	r3, [r4, #4]
 8008618:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800861c:	2300      	movs	r3, #0
 800861e:	6022      	str	r2, [r4, #0]
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	ab0a      	add	r3, sp, #40	@ 0x28
 8008624:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008628:	ab09      	add	r3, sp, #36	@ 0x24
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	6861      	ldr	r1, [r4, #4]
 800862e:	ec49 8b10 	vmov	d0, r8, r9
 8008632:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008636:	4628      	mov	r0, r5
 8008638:	f7ff fed6 	bl	80083e8 <__cvt>
 800863c:	9b06      	ldr	r3, [sp, #24]
 800863e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008640:	2b47      	cmp	r3, #71	@ 0x47
 8008642:	4680      	mov	r8, r0
 8008644:	d129      	bne.n	800869a <_printf_float+0x172>
 8008646:	1cc8      	adds	r0, r1, #3
 8008648:	db02      	blt.n	8008650 <_printf_float+0x128>
 800864a:	6863      	ldr	r3, [r4, #4]
 800864c:	4299      	cmp	r1, r3
 800864e:	dd41      	ble.n	80086d4 <_printf_float+0x1ac>
 8008650:	f1aa 0a02 	sub.w	sl, sl, #2
 8008654:	fa5f fa8a 	uxtb.w	sl, sl
 8008658:	3901      	subs	r1, #1
 800865a:	4652      	mov	r2, sl
 800865c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008660:	9109      	str	r1, [sp, #36]	@ 0x24
 8008662:	f7ff ff26 	bl	80084b2 <__exponent>
 8008666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008668:	1813      	adds	r3, r2, r0
 800866a:	2a01      	cmp	r2, #1
 800866c:	4681      	mov	r9, r0
 800866e:	6123      	str	r3, [r4, #16]
 8008670:	dc02      	bgt.n	8008678 <_printf_float+0x150>
 8008672:	6822      	ldr	r2, [r4, #0]
 8008674:	07d2      	lsls	r2, r2, #31
 8008676:	d501      	bpl.n	800867c <_printf_float+0x154>
 8008678:	3301      	adds	r3, #1
 800867a:	6123      	str	r3, [r4, #16]
 800867c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0a2      	beq.n	80085ca <_printf_float+0xa2>
 8008684:	232d      	movs	r3, #45	@ 0x2d
 8008686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800868a:	e79e      	b.n	80085ca <_printf_float+0xa2>
 800868c:	9a06      	ldr	r2, [sp, #24]
 800868e:	2a47      	cmp	r2, #71	@ 0x47
 8008690:	d1c2      	bne.n	8008618 <_printf_float+0xf0>
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1c0      	bne.n	8008618 <_printf_float+0xf0>
 8008696:	2301      	movs	r3, #1
 8008698:	e7bd      	b.n	8008616 <_printf_float+0xee>
 800869a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800869e:	d9db      	bls.n	8008658 <_printf_float+0x130>
 80086a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086a4:	d118      	bne.n	80086d8 <_printf_float+0x1b0>
 80086a6:	2900      	cmp	r1, #0
 80086a8:	6863      	ldr	r3, [r4, #4]
 80086aa:	dd0b      	ble.n	80086c4 <_printf_float+0x19c>
 80086ac:	6121      	str	r1, [r4, #16]
 80086ae:	b913      	cbnz	r3, 80086b6 <_printf_float+0x18e>
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	07d0      	lsls	r0, r2, #31
 80086b4:	d502      	bpl.n	80086bc <_printf_float+0x194>
 80086b6:	3301      	adds	r3, #1
 80086b8:	440b      	add	r3, r1
 80086ba:	6123      	str	r3, [r4, #16]
 80086bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80086be:	f04f 0900 	mov.w	r9, #0
 80086c2:	e7db      	b.n	800867c <_printf_float+0x154>
 80086c4:	b913      	cbnz	r3, 80086cc <_printf_float+0x1a4>
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	07d2      	lsls	r2, r2, #31
 80086ca:	d501      	bpl.n	80086d0 <_printf_float+0x1a8>
 80086cc:	3302      	adds	r3, #2
 80086ce:	e7f4      	b.n	80086ba <_printf_float+0x192>
 80086d0:	2301      	movs	r3, #1
 80086d2:	e7f2      	b.n	80086ba <_printf_float+0x192>
 80086d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80086d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086da:	4299      	cmp	r1, r3
 80086dc:	db05      	blt.n	80086ea <_printf_float+0x1c2>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	6121      	str	r1, [r4, #16]
 80086e2:	07d8      	lsls	r0, r3, #31
 80086e4:	d5ea      	bpl.n	80086bc <_printf_float+0x194>
 80086e6:	1c4b      	adds	r3, r1, #1
 80086e8:	e7e7      	b.n	80086ba <_printf_float+0x192>
 80086ea:	2900      	cmp	r1, #0
 80086ec:	bfd4      	ite	le
 80086ee:	f1c1 0202 	rsble	r2, r1, #2
 80086f2:	2201      	movgt	r2, #1
 80086f4:	4413      	add	r3, r2
 80086f6:	e7e0      	b.n	80086ba <_printf_float+0x192>
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	055a      	lsls	r2, r3, #21
 80086fc:	d407      	bmi.n	800870e <_printf_float+0x1e6>
 80086fe:	6923      	ldr	r3, [r4, #16]
 8008700:	4642      	mov	r2, r8
 8008702:	4631      	mov	r1, r6
 8008704:	4628      	mov	r0, r5
 8008706:	47b8      	blx	r7
 8008708:	3001      	adds	r0, #1
 800870a:	d12b      	bne.n	8008764 <_printf_float+0x23c>
 800870c:	e767      	b.n	80085de <_printf_float+0xb6>
 800870e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008712:	f240 80dd 	bls.w	80088d0 <_printf_float+0x3a8>
 8008716:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800871a:	2200      	movs	r2, #0
 800871c:	2300      	movs	r3, #0
 800871e:	f7f8 f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008722:	2800      	cmp	r0, #0
 8008724:	d033      	beq.n	800878e <_printf_float+0x266>
 8008726:	4a37      	ldr	r2, [pc, #220]	@ (8008804 <_printf_float+0x2dc>)
 8008728:	2301      	movs	r3, #1
 800872a:	4631      	mov	r1, r6
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	f43f af54 	beq.w	80085de <_printf_float+0xb6>
 8008736:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800873a:	4543      	cmp	r3, r8
 800873c:	db02      	blt.n	8008744 <_printf_float+0x21c>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	07d8      	lsls	r0, r3, #31
 8008742:	d50f      	bpl.n	8008764 <_printf_float+0x23c>
 8008744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008748:	4631      	mov	r1, r6
 800874a:	4628      	mov	r0, r5
 800874c:	47b8      	blx	r7
 800874e:	3001      	adds	r0, #1
 8008750:	f43f af45 	beq.w	80085de <_printf_float+0xb6>
 8008754:	f04f 0900 	mov.w	r9, #0
 8008758:	f108 38ff 	add.w	r8, r8, #4294967295
 800875c:	f104 0a1a 	add.w	sl, r4, #26
 8008760:	45c8      	cmp	r8, r9
 8008762:	dc09      	bgt.n	8008778 <_printf_float+0x250>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	079b      	lsls	r3, r3, #30
 8008768:	f100 8103 	bmi.w	8008972 <_printf_float+0x44a>
 800876c:	68e0      	ldr	r0, [r4, #12]
 800876e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008770:	4298      	cmp	r0, r3
 8008772:	bfb8      	it	lt
 8008774:	4618      	movlt	r0, r3
 8008776:	e734      	b.n	80085e2 <_printf_float+0xba>
 8008778:	2301      	movs	r3, #1
 800877a:	4652      	mov	r2, sl
 800877c:	4631      	mov	r1, r6
 800877e:	4628      	mov	r0, r5
 8008780:	47b8      	blx	r7
 8008782:	3001      	adds	r0, #1
 8008784:	f43f af2b 	beq.w	80085de <_printf_float+0xb6>
 8008788:	f109 0901 	add.w	r9, r9, #1
 800878c:	e7e8      	b.n	8008760 <_printf_float+0x238>
 800878e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	dc39      	bgt.n	8008808 <_printf_float+0x2e0>
 8008794:	4a1b      	ldr	r2, [pc, #108]	@ (8008804 <_printf_float+0x2dc>)
 8008796:	2301      	movs	r3, #1
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	f43f af1d 	beq.w	80085de <_printf_float+0xb6>
 80087a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80087a8:	ea59 0303 	orrs.w	r3, r9, r3
 80087ac:	d102      	bne.n	80087b4 <_printf_float+0x28c>
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	07d9      	lsls	r1, r3, #31
 80087b2:	d5d7      	bpl.n	8008764 <_printf_float+0x23c>
 80087b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087b8:	4631      	mov	r1, r6
 80087ba:	4628      	mov	r0, r5
 80087bc:	47b8      	blx	r7
 80087be:	3001      	adds	r0, #1
 80087c0:	f43f af0d 	beq.w	80085de <_printf_float+0xb6>
 80087c4:	f04f 0a00 	mov.w	sl, #0
 80087c8:	f104 0b1a 	add.w	fp, r4, #26
 80087cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ce:	425b      	negs	r3, r3
 80087d0:	4553      	cmp	r3, sl
 80087d2:	dc01      	bgt.n	80087d8 <_printf_float+0x2b0>
 80087d4:	464b      	mov	r3, r9
 80087d6:	e793      	b.n	8008700 <_printf_float+0x1d8>
 80087d8:	2301      	movs	r3, #1
 80087da:	465a      	mov	r2, fp
 80087dc:	4631      	mov	r1, r6
 80087de:	4628      	mov	r0, r5
 80087e0:	47b8      	blx	r7
 80087e2:	3001      	adds	r0, #1
 80087e4:	f43f aefb 	beq.w	80085de <_printf_float+0xb6>
 80087e8:	f10a 0a01 	add.w	sl, sl, #1
 80087ec:	e7ee      	b.n	80087cc <_printf_float+0x2a4>
 80087ee:	bf00      	nop
 80087f0:	7fefffff 	.word	0x7fefffff
 80087f4:	0800d234 	.word	0x0800d234
 80087f8:	0800d238 	.word	0x0800d238
 80087fc:	0800d23c 	.word	0x0800d23c
 8008800:	0800d240 	.word	0x0800d240
 8008804:	0800d244 	.word	0x0800d244
 8008808:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800880a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800880e:	4553      	cmp	r3, sl
 8008810:	bfa8      	it	ge
 8008812:	4653      	movge	r3, sl
 8008814:	2b00      	cmp	r3, #0
 8008816:	4699      	mov	r9, r3
 8008818:	dc36      	bgt.n	8008888 <_printf_float+0x360>
 800881a:	f04f 0b00 	mov.w	fp, #0
 800881e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008822:	f104 021a 	add.w	r2, r4, #26
 8008826:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008828:	9306      	str	r3, [sp, #24]
 800882a:	eba3 0309 	sub.w	r3, r3, r9
 800882e:	455b      	cmp	r3, fp
 8008830:	dc31      	bgt.n	8008896 <_printf_float+0x36e>
 8008832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008834:	459a      	cmp	sl, r3
 8008836:	dc3a      	bgt.n	80088ae <_printf_float+0x386>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	07da      	lsls	r2, r3, #31
 800883c:	d437      	bmi.n	80088ae <_printf_float+0x386>
 800883e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008840:	ebaa 0903 	sub.w	r9, sl, r3
 8008844:	9b06      	ldr	r3, [sp, #24]
 8008846:	ebaa 0303 	sub.w	r3, sl, r3
 800884a:	4599      	cmp	r9, r3
 800884c:	bfa8      	it	ge
 800884e:	4699      	movge	r9, r3
 8008850:	f1b9 0f00 	cmp.w	r9, #0
 8008854:	dc33      	bgt.n	80088be <_printf_float+0x396>
 8008856:	f04f 0800 	mov.w	r8, #0
 800885a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800885e:	f104 0b1a 	add.w	fp, r4, #26
 8008862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008864:	ebaa 0303 	sub.w	r3, sl, r3
 8008868:	eba3 0309 	sub.w	r3, r3, r9
 800886c:	4543      	cmp	r3, r8
 800886e:	f77f af79 	ble.w	8008764 <_printf_float+0x23c>
 8008872:	2301      	movs	r3, #1
 8008874:	465a      	mov	r2, fp
 8008876:	4631      	mov	r1, r6
 8008878:	4628      	mov	r0, r5
 800887a:	47b8      	blx	r7
 800887c:	3001      	adds	r0, #1
 800887e:	f43f aeae 	beq.w	80085de <_printf_float+0xb6>
 8008882:	f108 0801 	add.w	r8, r8, #1
 8008886:	e7ec      	b.n	8008862 <_printf_float+0x33a>
 8008888:	4642      	mov	r2, r8
 800888a:	4631      	mov	r1, r6
 800888c:	4628      	mov	r0, r5
 800888e:	47b8      	blx	r7
 8008890:	3001      	adds	r0, #1
 8008892:	d1c2      	bne.n	800881a <_printf_float+0x2f2>
 8008894:	e6a3      	b.n	80085de <_printf_float+0xb6>
 8008896:	2301      	movs	r3, #1
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	9206      	str	r2, [sp, #24]
 800889e:	47b8      	blx	r7
 80088a0:	3001      	adds	r0, #1
 80088a2:	f43f ae9c 	beq.w	80085de <_printf_float+0xb6>
 80088a6:	9a06      	ldr	r2, [sp, #24]
 80088a8:	f10b 0b01 	add.w	fp, fp, #1
 80088ac:	e7bb      	b.n	8008826 <_printf_float+0x2fe>
 80088ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	d1c0      	bne.n	800883e <_printf_float+0x316>
 80088bc:	e68f      	b.n	80085de <_printf_float+0xb6>
 80088be:	9a06      	ldr	r2, [sp, #24]
 80088c0:	464b      	mov	r3, r9
 80088c2:	4442      	add	r2, r8
 80088c4:	4631      	mov	r1, r6
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b8      	blx	r7
 80088ca:	3001      	adds	r0, #1
 80088cc:	d1c3      	bne.n	8008856 <_printf_float+0x32e>
 80088ce:	e686      	b.n	80085de <_printf_float+0xb6>
 80088d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088d4:	f1ba 0f01 	cmp.w	sl, #1
 80088d8:	dc01      	bgt.n	80088de <_printf_float+0x3b6>
 80088da:	07db      	lsls	r3, r3, #31
 80088dc:	d536      	bpl.n	800894c <_printf_float+0x424>
 80088de:	2301      	movs	r3, #1
 80088e0:	4642      	mov	r2, r8
 80088e2:	4631      	mov	r1, r6
 80088e4:	4628      	mov	r0, r5
 80088e6:	47b8      	blx	r7
 80088e8:	3001      	adds	r0, #1
 80088ea:	f43f ae78 	beq.w	80085de <_printf_float+0xb6>
 80088ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088f2:	4631      	mov	r1, r6
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b8      	blx	r7
 80088f8:	3001      	adds	r0, #1
 80088fa:	f43f ae70 	beq.w	80085de <_printf_float+0xb6>
 80088fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008902:	2200      	movs	r2, #0
 8008904:	2300      	movs	r3, #0
 8008906:	f10a 3aff 	add.w	sl, sl, #4294967295
 800890a:	f7f8 f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800890e:	b9c0      	cbnz	r0, 8008942 <_printf_float+0x41a>
 8008910:	4653      	mov	r3, sl
 8008912:	f108 0201 	add.w	r2, r8, #1
 8008916:	4631      	mov	r1, r6
 8008918:	4628      	mov	r0, r5
 800891a:	47b8      	blx	r7
 800891c:	3001      	adds	r0, #1
 800891e:	d10c      	bne.n	800893a <_printf_float+0x412>
 8008920:	e65d      	b.n	80085de <_printf_float+0xb6>
 8008922:	2301      	movs	r3, #1
 8008924:	465a      	mov	r2, fp
 8008926:	4631      	mov	r1, r6
 8008928:	4628      	mov	r0, r5
 800892a:	47b8      	blx	r7
 800892c:	3001      	adds	r0, #1
 800892e:	f43f ae56 	beq.w	80085de <_printf_float+0xb6>
 8008932:	f108 0801 	add.w	r8, r8, #1
 8008936:	45d0      	cmp	r8, sl
 8008938:	dbf3      	blt.n	8008922 <_printf_float+0x3fa>
 800893a:	464b      	mov	r3, r9
 800893c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008940:	e6df      	b.n	8008702 <_printf_float+0x1da>
 8008942:	f04f 0800 	mov.w	r8, #0
 8008946:	f104 0b1a 	add.w	fp, r4, #26
 800894a:	e7f4      	b.n	8008936 <_printf_float+0x40e>
 800894c:	2301      	movs	r3, #1
 800894e:	4642      	mov	r2, r8
 8008950:	e7e1      	b.n	8008916 <_printf_float+0x3ee>
 8008952:	2301      	movs	r3, #1
 8008954:	464a      	mov	r2, r9
 8008956:	4631      	mov	r1, r6
 8008958:	4628      	mov	r0, r5
 800895a:	47b8      	blx	r7
 800895c:	3001      	adds	r0, #1
 800895e:	f43f ae3e 	beq.w	80085de <_printf_float+0xb6>
 8008962:	f108 0801 	add.w	r8, r8, #1
 8008966:	68e3      	ldr	r3, [r4, #12]
 8008968:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800896a:	1a5b      	subs	r3, r3, r1
 800896c:	4543      	cmp	r3, r8
 800896e:	dcf0      	bgt.n	8008952 <_printf_float+0x42a>
 8008970:	e6fc      	b.n	800876c <_printf_float+0x244>
 8008972:	f04f 0800 	mov.w	r8, #0
 8008976:	f104 0919 	add.w	r9, r4, #25
 800897a:	e7f4      	b.n	8008966 <_printf_float+0x43e>

0800897c <_printf_common>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	4616      	mov	r6, r2
 8008982:	4698      	mov	r8, r3
 8008984:	688a      	ldr	r2, [r1, #8]
 8008986:	690b      	ldr	r3, [r1, #16]
 8008988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800898c:	4293      	cmp	r3, r2
 800898e:	bfb8      	it	lt
 8008990:	4613      	movlt	r3, r2
 8008992:	6033      	str	r3, [r6, #0]
 8008994:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008998:	4607      	mov	r7, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b10a      	cbz	r2, 80089a2 <_printf_common+0x26>
 800899e:	3301      	adds	r3, #1
 80089a0:	6033      	str	r3, [r6, #0]
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	0699      	lsls	r1, r3, #26
 80089a6:	bf42      	ittt	mi
 80089a8:	6833      	ldrmi	r3, [r6, #0]
 80089aa:	3302      	addmi	r3, #2
 80089ac:	6033      	strmi	r3, [r6, #0]
 80089ae:	6825      	ldr	r5, [r4, #0]
 80089b0:	f015 0506 	ands.w	r5, r5, #6
 80089b4:	d106      	bne.n	80089c4 <_printf_common+0x48>
 80089b6:	f104 0a19 	add.w	sl, r4, #25
 80089ba:	68e3      	ldr	r3, [r4, #12]
 80089bc:	6832      	ldr	r2, [r6, #0]
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	42ab      	cmp	r3, r5
 80089c2:	dc26      	bgt.n	8008a12 <_printf_common+0x96>
 80089c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	3b00      	subs	r3, #0
 80089cc:	bf18      	it	ne
 80089ce:	2301      	movne	r3, #1
 80089d0:	0692      	lsls	r2, r2, #26
 80089d2:	d42b      	bmi.n	8008a2c <_printf_common+0xb0>
 80089d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089d8:	4641      	mov	r1, r8
 80089da:	4638      	mov	r0, r7
 80089dc:	47c8      	blx	r9
 80089de:	3001      	adds	r0, #1
 80089e0:	d01e      	beq.n	8008a20 <_printf_common+0xa4>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	f003 0306 	and.w	r3, r3, #6
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	bf02      	ittt	eq
 80089ee:	68e5      	ldreq	r5, [r4, #12]
 80089f0:	6833      	ldreq	r3, [r6, #0]
 80089f2:	1aed      	subeq	r5, r5, r3
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	bf0c      	ite	eq
 80089f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089fc:	2500      	movne	r5, #0
 80089fe:	4293      	cmp	r3, r2
 8008a00:	bfc4      	itt	gt
 8008a02:	1a9b      	subgt	r3, r3, r2
 8008a04:	18ed      	addgt	r5, r5, r3
 8008a06:	2600      	movs	r6, #0
 8008a08:	341a      	adds	r4, #26
 8008a0a:	42b5      	cmp	r5, r6
 8008a0c:	d11a      	bne.n	8008a44 <_printf_common+0xc8>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e008      	b.n	8008a24 <_printf_common+0xa8>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4652      	mov	r2, sl
 8008a16:	4641      	mov	r1, r8
 8008a18:	4638      	mov	r0, r7
 8008a1a:	47c8      	blx	r9
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d103      	bne.n	8008a28 <_printf_common+0xac>
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a28:	3501      	adds	r5, #1
 8008a2a:	e7c6      	b.n	80089ba <_printf_common+0x3e>
 8008a2c:	18e1      	adds	r1, r4, r3
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	2030      	movs	r0, #48	@ 0x30
 8008a32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a36:	4422      	add	r2, r4
 8008a38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a40:	3302      	adds	r3, #2
 8008a42:	e7c7      	b.n	80089d4 <_printf_common+0x58>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4622      	mov	r2, r4
 8008a48:	4641      	mov	r1, r8
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	47c8      	blx	r9
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0e6      	beq.n	8008a20 <_printf_common+0xa4>
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7d9      	b.n	8008a0a <_printf_common+0x8e>
	...

08008a58 <_printf_i>:
 8008a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5c:	7e0f      	ldrb	r7, [r1, #24]
 8008a5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a60:	2f78      	cmp	r7, #120	@ 0x78
 8008a62:	4691      	mov	r9, r2
 8008a64:	4680      	mov	r8, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	469a      	mov	sl, r3
 8008a6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a6e:	d807      	bhi.n	8008a80 <_printf_i+0x28>
 8008a70:	2f62      	cmp	r7, #98	@ 0x62
 8008a72:	d80a      	bhi.n	8008a8a <_printf_i+0x32>
 8008a74:	2f00      	cmp	r7, #0
 8008a76:	f000 80d2 	beq.w	8008c1e <_printf_i+0x1c6>
 8008a7a:	2f58      	cmp	r7, #88	@ 0x58
 8008a7c:	f000 80b9 	beq.w	8008bf2 <_printf_i+0x19a>
 8008a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a88:	e03a      	b.n	8008b00 <_printf_i+0xa8>
 8008a8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a8e:	2b15      	cmp	r3, #21
 8008a90:	d8f6      	bhi.n	8008a80 <_printf_i+0x28>
 8008a92:	a101      	add	r1, pc, #4	@ (adr r1, 8008a98 <_printf_i+0x40>)
 8008a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a98:	08008af1 	.word	0x08008af1
 8008a9c:	08008b05 	.word	0x08008b05
 8008aa0:	08008a81 	.word	0x08008a81
 8008aa4:	08008a81 	.word	0x08008a81
 8008aa8:	08008a81 	.word	0x08008a81
 8008aac:	08008a81 	.word	0x08008a81
 8008ab0:	08008b05 	.word	0x08008b05
 8008ab4:	08008a81 	.word	0x08008a81
 8008ab8:	08008a81 	.word	0x08008a81
 8008abc:	08008a81 	.word	0x08008a81
 8008ac0:	08008a81 	.word	0x08008a81
 8008ac4:	08008c05 	.word	0x08008c05
 8008ac8:	08008b2f 	.word	0x08008b2f
 8008acc:	08008bbf 	.word	0x08008bbf
 8008ad0:	08008a81 	.word	0x08008a81
 8008ad4:	08008a81 	.word	0x08008a81
 8008ad8:	08008c27 	.word	0x08008c27
 8008adc:	08008a81 	.word	0x08008a81
 8008ae0:	08008b2f 	.word	0x08008b2f
 8008ae4:	08008a81 	.word	0x08008a81
 8008ae8:	08008a81 	.word	0x08008a81
 8008aec:	08008bc7 	.word	0x08008bc7
 8008af0:	6833      	ldr	r3, [r6, #0]
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6032      	str	r2, [r6, #0]
 8008af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008afc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b00:	2301      	movs	r3, #1
 8008b02:	e09d      	b.n	8008c40 <_printf_i+0x1e8>
 8008b04:	6833      	ldr	r3, [r6, #0]
 8008b06:	6820      	ldr	r0, [r4, #0]
 8008b08:	1d19      	adds	r1, r3, #4
 8008b0a:	6031      	str	r1, [r6, #0]
 8008b0c:	0606      	lsls	r6, r0, #24
 8008b0e:	d501      	bpl.n	8008b14 <_printf_i+0xbc>
 8008b10:	681d      	ldr	r5, [r3, #0]
 8008b12:	e003      	b.n	8008b1c <_printf_i+0xc4>
 8008b14:	0645      	lsls	r5, r0, #25
 8008b16:	d5fb      	bpl.n	8008b10 <_printf_i+0xb8>
 8008b18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b1c:	2d00      	cmp	r5, #0
 8008b1e:	da03      	bge.n	8008b28 <_printf_i+0xd0>
 8008b20:	232d      	movs	r3, #45	@ 0x2d
 8008b22:	426d      	negs	r5, r5
 8008b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b28:	4859      	ldr	r0, [pc, #356]	@ (8008c90 <_printf_i+0x238>)
 8008b2a:	230a      	movs	r3, #10
 8008b2c:	e011      	b.n	8008b52 <_printf_i+0xfa>
 8008b2e:	6821      	ldr	r1, [r4, #0]
 8008b30:	6833      	ldr	r3, [r6, #0]
 8008b32:	0608      	lsls	r0, r1, #24
 8008b34:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b38:	d402      	bmi.n	8008b40 <_printf_i+0xe8>
 8008b3a:	0649      	lsls	r1, r1, #25
 8008b3c:	bf48      	it	mi
 8008b3e:	b2ad      	uxthmi	r5, r5
 8008b40:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b42:	4853      	ldr	r0, [pc, #332]	@ (8008c90 <_printf_i+0x238>)
 8008b44:	6033      	str	r3, [r6, #0]
 8008b46:	bf14      	ite	ne
 8008b48:	230a      	movne	r3, #10
 8008b4a:	2308      	moveq	r3, #8
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b52:	6866      	ldr	r6, [r4, #4]
 8008b54:	60a6      	str	r6, [r4, #8]
 8008b56:	2e00      	cmp	r6, #0
 8008b58:	bfa2      	ittt	ge
 8008b5a:	6821      	ldrge	r1, [r4, #0]
 8008b5c:	f021 0104 	bicge.w	r1, r1, #4
 8008b60:	6021      	strge	r1, [r4, #0]
 8008b62:	b90d      	cbnz	r5, 8008b68 <_printf_i+0x110>
 8008b64:	2e00      	cmp	r6, #0
 8008b66:	d04b      	beq.n	8008c00 <_printf_i+0x1a8>
 8008b68:	4616      	mov	r6, r2
 8008b6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b6e:	fb03 5711 	mls	r7, r3, r1, r5
 8008b72:	5dc7      	ldrb	r7, [r0, r7]
 8008b74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b78:	462f      	mov	r7, r5
 8008b7a:	42bb      	cmp	r3, r7
 8008b7c:	460d      	mov	r5, r1
 8008b7e:	d9f4      	bls.n	8008b6a <_printf_i+0x112>
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d10b      	bne.n	8008b9c <_printf_i+0x144>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	07df      	lsls	r7, r3, #31
 8008b88:	d508      	bpl.n	8008b9c <_printf_i+0x144>
 8008b8a:	6923      	ldr	r3, [r4, #16]
 8008b8c:	6861      	ldr	r1, [r4, #4]
 8008b8e:	4299      	cmp	r1, r3
 8008b90:	bfde      	ittt	le
 8008b92:	2330      	movle	r3, #48	@ 0x30
 8008b94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b9c:	1b92      	subs	r2, r2, r6
 8008b9e:	6122      	str	r2, [r4, #16]
 8008ba0:	f8cd a000 	str.w	sl, [sp]
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	aa03      	add	r2, sp, #12
 8008ba8:	4621      	mov	r1, r4
 8008baa:	4640      	mov	r0, r8
 8008bac:	f7ff fee6 	bl	800897c <_printf_common>
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d14a      	bne.n	8008c4a <_printf_i+0x1f2>
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	b004      	add	sp, #16
 8008bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	f043 0320 	orr.w	r3, r3, #32
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	4833      	ldr	r0, [pc, #204]	@ (8008c94 <_printf_i+0x23c>)
 8008bc8:	2778      	movs	r7, #120	@ 0x78
 8008bca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	6831      	ldr	r1, [r6, #0]
 8008bd2:	061f      	lsls	r7, r3, #24
 8008bd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bd8:	d402      	bmi.n	8008be0 <_printf_i+0x188>
 8008bda:	065f      	lsls	r7, r3, #25
 8008bdc:	bf48      	it	mi
 8008bde:	b2ad      	uxthmi	r5, r5
 8008be0:	6031      	str	r1, [r6, #0]
 8008be2:	07d9      	lsls	r1, r3, #31
 8008be4:	bf44      	itt	mi
 8008be6:	f043 0320 	orrmi.w	r3, r3, #32
 8008bea:	6023      	strmi	r3, [r4, #0]
 8008bec:	b11d      	cbz	r5, 8008bf6 <_printf_i+0x19e>
 8008bee:	2310      	movs	r3, #16
 8008bf0:	e7ac      	b.n	8008b4c <_printf_i+0xf4>
 8008bf2:	4827      	ldr	r0, [pc, #156]	@ (8008c90 <_printf_i+0x238>)
 8008bf4:	e7e9      	b.n	8008bca <_printf_i+0x172>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	f023 0320 	bic.w	r3, r3, #32
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	e7f6      	b.n	8008bee <_printf_i+0x196>
 8008c00:	4616      	mov	r6, r2
 8008c02:	e7bd      	b.n	8008b80 <_printf_i+0x128>
 8008c04:	6833      	ldr	r3, [r6, #0]
 8008c06:	6825      	ldr	r5, [r4, #0]
 8008c08:	6961      	ldr	r1, [r4, #20]
 8008c0a:	1d18      	adds	r0, r3, #4
 8008c0c:	6030      	str	r0, [r6, #0]
 8008c0e:	062e      	lsls	r6, r5, #24
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	d501      	bpl.n	8008c18 <_printf_i+0x1c0>
 8008c14:	6019      	str	r1, [r3, #0]
 8008c16:	e002      	b.n	8008c1e <_printf_i+0x1c6>
 8008c18:	0668      	lsls	r0, r5, #25
 8008c1a:	d5fb      	bpl.n	8008c14 <_printf_i+0x1bc>
 8008c1c:	8019      	strh	r1, [r3, #0]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	4616      	mov	r6, r2
 8008c24:	e7bc      	b.n	8008ba0 <_printf_i+0x148>
 8008c26:	6833      	ldr	r3, [r6, #0]
 8008c28:	1d1a      	adds	r2, r3, #4
 8008c2a:	6032      	str	r2, [r6, #0]
 8008c2c:	681e      	ldr	r6, [r3, #0]
 8008c2e:	6862      	ldr	r2, [r4, #4]
 8008c30:	2100      	movs	r1, #0
 8008c32:	4630      	mov	r0, r6
 8008c34:	f7f7 facc 	bl	80001d0 <memchr>
 8008c38:	b108      	cbz	r0, 8008c3e <_printf_i+0x1e6>
 8008c3a:	1b80      	subs	r0, r0, r6
 8008c3c:	6060      	str	r0, [r4, #4]
 8008c3e:	6863      	ldr	r3, [r4, #4]
 8008c40:	6123      	str	r3, [r4, #16]
 8008c42:	2300      	movs	r3, #0
 8008c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c48:	e7aa      	b.n	8008ba0 <_printf_i+0x148>
 8008c4a:	6923      	ldr	r3, [r4, #16]
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	47d0      	blx	sl
 8008c54:	3001      	adds	r0, #1
 8008c56:	d0ad      	beq.n	8008bb4 <_printf_i+0x15c>
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	079b      	lsls	r3, r3, #30
 8008c5c:	d413      	bmi.n	8008c86 <_printf_i+0x22e>
 8008c5e:	68e0      	ldr	r0, [r4, #12]
 8008c60:	9b03      	ldr	r3, [sp, #12]
 8008c62:	4298      	cmp	r0, r3
 8008c64:	bfb8      	it	lt
 8008c66:	4618      	movlt	r0, r3
 8008c68:	e7a6      	b.n	8008bb8 <_printf_i+0x160>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	4649      	mov	r1, r9
 8008c70:	4640      	mov	r0, r8
 8008c72:	47d0      	blx	sl
 8008c74:	3001      	adds	r0, #1
 8008c76:	d09d      	beq.n	8008bb4 <_printf_i+0x15c>
 8008c78:	3501      	adds	r5, #1
 8008c7a:	68e3      	ldr	r3, [r4, #12]
 8008c7c:	9903      	ldr	r1, [sp, #12]
 8008c7e:	1a5b      	subs	r3, r3, r1
 8008c80:	42ab      	cmp	r3, r5
 8008c82:	dcf2      	bgt.n	8008c6a <_printf_i+0x212>
 8008c84:	e7eb      	b.n	8008c5e <_printf_i+0x206>
 8008c86:	2500      	movs	r5, #0
 8008c88:	f104 0619 	add.w	r6, r4, #25
 8008c8c:	e7f5      	b.n	8008c7a <_printf_i+0x222>
 8008c8e:	bf00      	nop
 8008c90:	0800d246 	.word	0x0800d246
 8008c94:	0800d257 	.word	0x0800d257

08008c98 <std>:
 8008c98:	2300      	movs	r3, #0
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ca6:	6083      	str	r3, [r0, #8]
 8008ca8:	8181      	strh	r1, [r0, #12]
 8008caa:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cac:	81c2      	strh	r2, [r0, #14]
 8008cae:	6183      	str	r3, [r0, #24]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	2208      	movs	r2, #8
 8008cb4:	305c      	adds	r0, #92	@ 0x5c
 8008cb6:	f000 f942 	bl	8008f3e <memset>
 8008cba:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf0 <std+0x58>)
 8008cbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf4 <std+0x5c>)
 8008cc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf8 <std+0x60>)
 8008cc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cfc <std+0x64>)
 8008cc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008cca:	4b0d      	ldr	r3, [pc, #52]	@ (8008d00 <std+0x68>)
 8008ccc:	6224      	str	r4, [r4, #32]
 8008cce:	429c      	cmp	r4, r3
 8008cd0:	d006      	beq.n	8008ce0 <std+0x48>
 8008cd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cd6:	4294      	cmp	r4, r2
 8008cd8:	d002      	beq.n	8008ce0 <std+0x48>
 8008cda:	33d0      	adds	r3, #208	@ 0xd0
 8008cdc:	429c      	cmp	r4, r3
 8008cde:	d105      	bne.n	8008cec <std+0x54>
 8008ce0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ce8:	f000 b9a6 	b.w	8009038 <__retarget_lock_init_recursive>
 8008cec:	bd10      	pop	{r4, pc}
 8008cee:	bf00      	nop
 8008cf0:	08008e85 	.word	0x08008e85
 8008cf4:	08008ea7 	.word	0x08008ea7
 8008cf8:	08008edf 	.word	0x08008edf
 8008cfc:	08008f03 	.word	0x08008f03
 8008d00:	2000123c 	.word	0x2000123c

08008d04 <stdio_exit_handler>:
 8008d04:	4a02      	ldr	r2, [pc, #8]	@ (8008d10 <stdio_exit_handler+0xc>)
 8008d06:	4903      	ldr	r1, [pc, #12]	@ (8008d14 <stdio_exit_handler+0x10>)
 8008d08:	4803      	ldr	r0, [pc, #12]	@ (8008d18 <stdio_exit_handler+0x14>)
 8008d0a:	f000 b869 	b.w	8008de0 <_fwalk_sglue>
 8008d0e:	bf00      	nop
 8008d10:	20000034 	.word	0x20000034
 8008d14:	0800a9b5 	.word	0x0800a9b5
 8008d18:	20000044 	.word	0x20000044

08008d1c <cleanup_stdio>:
 8008d1c:	6841      	ldr	r1, [r0, #4]
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d50 <cleanup_stdio+0x34>)
 8008d20:	4299      	cmp	r1, r3
 8008d22:	b510      	push	{r4, lr}
 8008d24:	4604      	mov	r4, r0
 8008d26:	d001      	beq.n	8008d2c <cleanup_stdio+0x10>
 8008d28:	f001 fe44 	bl	800a9b4 <_fflush_r>
 8008d2c:	68a1      	ldr	r1, [r4, #8]
 8008d2e:	4b09      	ldr	r3, [pc, #36]	@ (8008d54 <cleanup_stdio+0x38>)
 8008d30:	4299      	cmp	r1, r3
 8008d32:	d002      	beq.n	8008d3a <cleanup_stdio+0x1e>
 8008d34:	4620      	mov	r0, r4
 8008d36:	f001 fe3d 	bl	800a9b4 <_fflush_r>
 8008d3a:	68e1      	ldr	r1, [r4, #12]
 8008d3c:	4b06      	ldr	r3, [pc, #24]	@ (8008d58 <cleanup_stdio+0x3c>)
 8008d3e:	4299      	cmp	r1, r3
 8008d40:	d004      	beq.n	8008d4c <cleanup_stdio+0x30>
 8008d42:	4620      	mov	r0, r4
 8008d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d48:	f001 be34 	b.w	800a9b4 <_fflush_r>
 8008d4c:	bd10      	pop	{r4, pc}
 8008d4e:	bf00      	nop
 8008d50:	2000123c 	.word	0x2000123c
 8008d54:	200012a4 	.word	0x200012a4
 8008d58:	2000130c 	.word	0x2000130c

08008d5c <global_stdio_init.part.0>:
 8008d5c:	b510      	push	{r4, lr}
 8008d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d8c <global_stdio_init.part.0+0x30>)
 8008d60:	4c0b      	ldr	r4, [pc, #44]	@ (8008d90 <global_stdio_init.part.0+0x34>)
 8008d62:	4a0c      	ldr	r2, [pc, #48]	@ (8008d94 <global_stdio_init.part.0+0x38>)
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	4620      	mov	r0, r4
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2104      	movs	r1, #4
 8008d6c:	f7ff ff94 	bl	8008c98 <std>
 8008d70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d74:	2201      	movs	r2, #1
 8008d76:	2109      	movs	r1, #9
 8008d78:	f7ff ff8e 	bl	8008c98 <std>
 8008d7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d80:	2202      	movs	r2, #2
 8008d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d86:	2112      	movs	r1, #18
 8008d88:	f7ff bf86 	b.w	8008c98 <std>
 8008d8c:	20001374 	.word	0x20001374
 8008d90:	2000123c 	.word	0x2000123c
 8008d94:	08008d05 	.word	0x08008d05

08008d98 <__sfp_lock_acquire>:
 8008d98:	4801      	ldr	r0, [pc, #4]	@ (8008da0 <__sfp_lock_acquire+0x8>)
 8008d9a:	f000 b94e 	b.w	800903a <__retarget_lock_acquire_recursive>
 8008d9e:	bf00      	nop
 8008da0:	2000137d 	.word	0x2000137d

08008da4 <__sfp_lock_release>:
 8008da4:	4801      	ldr	r0, [pc, #4]	@ (8008dac <__sfp_lock_release+0x8>)
 8008da6:	f000 b949 	b.w	800903c <__retarget_lock_release_recursive>
 8008daa:	bf00      	nop
 8008dac:	2000137d 	.word	0x2000137d

08008db0 <__sinit>:
 8008db0:	b510      	push	{r4, lr}
 8008db2:	4604      	mov	r4, r0
 8008db4:	f7ff fff0 	bl	8008d98 <__sfp_lock_acquire>
 8008db8:	6a23      	ldr	r3, [r4, #32]
 8008dba:	b11b      	cbz	r3, 8008dc4 <__sinit+0x14>
 8008dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc0:	f7ff bff0 	b.w	8008da4 <__sfp_lock_release>
 8008dc4:	4b04      	ldr	r3, [pc, #16]	@ (8008dd8 <__sinit+0x28>)
 8008dc6:	6223      	str	r3, [r4, #32]
 8008dc8:	4b04      	ldr	r3, [pc, #16]	@ (8008ddc <__sinit+0x2c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1f5      	bne.n	8008dbc <__sinit+0xc>
 8008dd0:	f7ff ffc4 	bl	8008d5c <global_stdio_init.part.0>
 8008dd4:	e7f2      	b.n	8008dbc <__sinit+0xc>
 8008dd6:	bf00      	nop
 8008dd8:	08008d1d 	.word	0x08008d1d
 8008ddc:	20001374 	.word	0x20001374

08008de0 <_fwalk_sglue>:
 8008de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de4:	4607      	mov	r7, r0
 8008de6:	4688      	mov	r8, r1
 8008de8:	4614      	mov	r4, r2
 8008dea:	2600      	movs	r6, #0
 8008dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008df0:	f1b9 0901 	subs.w	r9, r9, #1
 8008df4:	d505      	bpl.n	8008e02 <_fwalk_sglue+0x22>
 8008df6:	6824      	ldr	r4, [r4, #0]
 8008df8:	2c00      	cmp	r4, #0
 8008dfa:	d1f7      	bne.n	8008dec <_fwalk_sglue+0xc>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d907      	bls.n	8008e18 <_fwalk_sglue+0x38>
 8008e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	d003      	beq.n	8008e18 <_fwalk_sglue+0x38>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4638      	mov	r0, r7
 8008e14:	47c0      	blx	r8
 8008e16:	4306      	orrs	r6, r0
 8008e18:	3568      	adds	r5, #104	@ 0x68
 8008e1a:	e7e9      	b.n	8008df0 <_fwalk_sglue+0x10>

08008e1c <sniprintf>:
 8008e1c:	b40c      	push	{r2, r3}
 8008e1e:	b530      	push	{r4, r5, lr}
 8008e20:	4b17      	ldr	r3, [pc, #92]	@ (8008e80 <sniprintf+0x64>)
 8008e22:	1e0c      	subs	r4, r1, #0
 8008e24:	681d      	ldr	r5, [r3, #0]
 8008e26:	b09d      	sub	sp, #116	@ 0x74
 8008e28:	da08      	bge.n	8008e3c <sniprintf+0x20>
 8008e2a:	238b      	movs	r3, #139	@ 0x8b
 8008e2c:	602b      	str	r3, [r5, #0]
 8008e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e32:	b01d      	add	sp, #116	@ 0x74
 8008e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e38:	b002      	add	sp, #8
 8008e3a:	4770      	bx	lr
 8008e3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008e40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e44:	bf14      	ite	ne
 8008e46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e4a:	4623      	moveq	r3, r4
 8008e4c:	9304      	str	r3, [sp, #16]
 8008e4e:	9307      	str	r3, [sp, #28]
 8008e50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008e54:	9002      	str	r0, [sp, #8]
 8008e56:	9006      	str	r0, [sp, #24]
 8008e58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e5e:	ab21      	add	r3, sp, #132	@ 0x84
 8008e60:	a902      	add	r1, sp, #8
 8008e62:	4628      	mov	r0, r5
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	f001 fc25 	bl	800a6b4 <_svfiprintf_r>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	bfbc      	itt	lt
 8008e6e:	238b      	movlt	r3, #139	@ 0x8b
 8008e70:	602b      	strlt	r3, [r5, #0]
 8008e72:	2c00      	cmp	r4, #0
 8008e74:	d0dd      	beq.n	8008e32 <sniprintf+0x16>
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	e7d9      	b.n	8008e32 <sniprintf+0x16>
 8008e7e:	bf00      	nop
 8008e80:	20000040 	.word	0x20000040

08008e84 <__sread>:
 8008e84:	b510      	push	{r4, lr}
 8008e86:	460c      	mov	r4, r1
 8008e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8c:	f000 f886 	bl	8008f9c <_read_r>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	bfab      	itete	ge
 8008e94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e96:	89a3      	ldrhlt	r3, [r4, #12]
 8008e98:	181b      	addge	r3, r3, r0
 8008e9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e9e:	bfac      	ite	ge
 8008ea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008ea2:	81a3      	strhlt	r3, [r4, #12]
 8008ea4:	bd10      	pop	{r4, pc}

08008ea6 <__swrite>:
 8008ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eaa:	461f      	mov	r7, r3
 8008eac:	898b      	ldrh	r3, [r1, #12]
 8008eae:	05db      	lsls	r3, r3, #23
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	4616      	mov	r6, r2
 8008eb6:	d505      	bpl.n	8008ec4 <__swrite+0x1e>
 8008eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f000 f85a 	bl	8008f78 <_lseek_r>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	4632      	mov	r2, r6
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	f000 b871 	b.w	8008fc0 <_write_r>

08008ede <__sseek>:
 8008ede:	b510      	push	{r4, lr}
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee6:	f000 f847 	bl	8008f78 <_lseek_r>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	bf15      	itete	ne
 8008ef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008efa:	81a3      	strheq	r3, [r4, #12]
 8008efc:	bf18      	it	ne
 8008efe:	81a3      	strhne	r3, [r4, #12]
 8008f00:	bd10      	pop	{r4, pc}

08008f02 <__sclose>:
 8008f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f06:	f000 b827 	b.w	8008f58 <_close_r>

08008f0a <memmove>:
 8008f0a:	4288      	cmp	r0, r1
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	eb01 0402 	add.w	r4, r1, r2
 8008f12:	d902      	bls.n	8008f1a <memmove+0x10>
 8008f14:	4284      	cmp	r4, r0
 8008f16:	4623      	mov	r3, r4
 8008f18:	d807      	bhi.n	8008f2a <memmove+0x20>
 8008f1a:	1e43      	subs	r3, r0, #1
 8008f1c:	42a1      	cmp	r1, r4
 8008f1e:	d008      	beq.n	8008f32 <memmove+0x28>
 8008f20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f28:	e7f8      	b.n	8008f1c <memmove+0x12>
 8008f2a:	4402      	add	r2, r0
 8008f2c:	4601      	mov	r1, r0
 8008f2e:	428a      	cmp	r2, r1
 8008f30:	d100      	bne.n	8008f34 <memmove+0x2a>
 8008f32:	bd10      	pop	{r4, pc}
 8008f34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f3c:	e7f7      	b.n	8008f2e <memmove+0x24>

08008f3e <memset>:
 8008f3e:	4402      	add	r2, r0
 8008f40:	4603      	mov	r3, r0
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d100      	bne.n	8008f48 <memset+0xa>
 8008f46:	4770      	bx	lr
 8008f48:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4c:	e7f9      	b.n	8008f42 <memset+0x4>
	...

08008f50 <_localeconv_r>:
 8008f50:	4800      	ldr	r0, [pc, #0]	@ (8008f54 <_localeconv_r+0x4>)
 8008f52:	4770      	bx	lr
 8008f54:	20000180 	.word	0x20000180

08008f58 <_close_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4d06      	ldr	r5, [pc, #24]	@ (8008f74 <_close_r+0x1c>)
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4604      	mov	r4, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	602b      	str	r3, [r5, #0]
 8008f64:	f7f9 f8fa 	bl	800215c <_close>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_close_r+0x1a>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_close_r+0x1a>
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20001378 	.word	0x20001378

08008f78 <_lseek_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d07      	ldr	r5, [pc, #28]	@ (8008f98 <_lseek_r+0x20>)
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	4608      	mov	r0, r1
 8008f80:	4611      	mov	r1, r2
 8008f82:	2200      	movs	r2, #0
 8008f84:	602a      	str	r2, [r5, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	f7f9 f90f 	bl	80021aa <_lseek>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	d102      	bne.n	8008f96 <_lseek_r+0x1e>
 8008f90:	682b      	ldr	r3, [r5, #0]
 8008f92:	b103      	cbz	r3, 8008f96 <_lseek_r+0x1e>
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	20001378 	.word	0x20001378

08008f9c <_read_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4d07      	ldr	r5, [pc, #28]	@ (8008fbc <_read_r+0x20>)
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	602a      	str	r2, [r5, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	f7f9 f89d 	bl	80020ea <_read>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d102      	bne.n	8008fba <_read_r+0x1e>
 8008fb4:	682b      	ldr	r3, [r5, #0]
 8008fb6:	b103      	cbz	r3, 8008fba <_read_r+0x1e>
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	20001378 	.word	0x20001378

08008fc0 <_write_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	@ (8008fe0 <_write_r+0x20>)
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	602a      	str	r2, [r5, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f7f9 f8a8 	bl	8002124 <_write>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_write_r+0x1e>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_write_r+0x1e>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	20001378 	.word	0x20001378

08008fe4 <__errno>:
 8008fe4:	4b01      	ldr	r3, [pc, #4]	@ (8008fec <__errno+0x8>)
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	20000040 	.word	0x20000040

08008ff0 <__libc_init_array>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	4d0d      	ldr	r5, [pc, #52]	@ (8009028 <__libc_init_array+0x38>)
 8008ff4:	4c0d      	ldr	r4, [pc, #52]	@ (800902c <__libc_init_array+0x3c>)
 8008ff6:	1b64      	subs	r4, r4, r5
 8008ff8:	10a4      	asrs	r4, r4, #2
 8008ffa:	2600      	movs	r6, #0
 8008ffc:	42a6      	cmp	r6, r4
 8008ffe:	d109      	bne.n	8009014 <__libc_init_array+0x24>
 8009000:	4d0b      	ldr	r5, [pc, #44]	@ (8009030 <__libc_init_array+0x40>)
 8009002:	4c0c      	ldr	r4, [pc, #48]	@ (8009034 <__libc_init_array+0x44>)
 8009004:	f002 f84c 	bl	800b0a0 <_init>
 8009008:	1b64      	subs	r4, r4, r5
 800900a:	10a4      	asrs	r4, r4, #2
 800900c:	2600      	movs	r6, #0
 800900e:	42a6      	cmp	r6, r4
 8009010:	d105      	bne.n	800901e <__libc_init_array+0x2e>
 8009012:	bd70      	pop	{r4, r5, r6, pc}
 8009014:	f855 3b04 	ldr.w	r3, [r5], #4
 8009018:	4798      	blx	r3
 800901a:	3601      	adds	r6, #1
 800901c:	e7ee      	b.n	8008ffc <__libc_init_array+0xc>
 800901e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009022:	4798      	blx	r3
 8009024:	3601      	adds	r6, #1
 8009026:	e7f2      	b.n	800900e <__libc_init_array+0x1e>
 8009028:	0800d5b0 	.word	0x0800d5b0
 800902c:	0800d5b0 	.word	0x0800d5b0
 8009030:	0800d5b0 	.word	0x0800d5b0
 8009034:	0800d5b4 	.word	0x0800d5b4

08009038 <__retarget_lock_init_recursive>:
 8009038:	4770      	bx	lr

0800903a <__retarget_lock_acquire_recursive>:
 800903a:	4770      	bx	lr

0800903c <__retarget_lock_release_recursive>:
 800903c:	4770      	bx	lr

0800903e <memcpy>:
 800903e:	440a      	add	r2, r1
 8009040:	4291      	cmp	r1, r2
 8009042:	f100 33ff 	add.w	r3, r0, #4294967295
 8009046:	d100      	bne.n	800904a <memcpy+0xc>
 8009048:	4770      	bx	lr
 800904a:	b510      	push	{r4, lr}
 800904c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009054:	4291      	cmp	r1, r2
 8009056:	d1f9      	bne.n	800904c <memcpy+0xe>
 8009058:	bd10      	pop	{r4, pc}

0800905a <quorem>:
 800905a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905e:	6903      	ldr	r3, [r0, #16]
 8009060:	690c      	ldr	r4, [r1, #16]
 8009062:	42a3      	cmp	r3, r4
 8009064:	4607      	mov	r7, r0
 8009066:	db7e      	blt.n	8009166 <quorem+0x10c>
 8009068:	3c01      	subs	r4, #1
 800906a:	f101 0814 	add.w	r8, r1, #20
 800906e:	00a3      	lsls	r3, r4, #2
 8009070:	f100 0514 	add.w	r5, r0, #20
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800907a:	9301      	str	r3, [sp, #4]
 800907c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009084:	3301      	adds	r3, #1
 8009086:	429a      	cmp	r2, r3
 8009088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800908c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009090:	d32e      	bcc.n	80090f0 <quorem+0x96>
 8009092:	f04f 0a00 	mov.w	sl, #0
 8009096:	46c4      	mov	ip, r8
 8009098:	46ae      	mov	lr, r5
 800909a:	46d3      	mov	fp, sl
 800909c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090a0:	b298      	uxth	r0, r3
 80090a2:	fb06 a000 	mla	r0, r6, r0, sl
 80090a6:	0c02      	lsrs	r2, r0, #16
 80090a8:	0c1b      	lsrs	r3, r3, #16
 80090aa:	fb06 2303 	mla	r3, r6, r3, r2
 80090ae:	f8de 2000 	ldr.w	r2, [lr]
 80090b2:	b280      	uxth	r0, r0
 80090b4:	b292      	uxth	r2, r2
 80090b6:	1a12      	subs	r2, r2, r0
 80090b8:	445a      	add	r2, fp
 80090ba:	f8de 0000 	ldr.w	r0, [lr]
 80090be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80090c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80090cc:	b292      	uxth	r2, r2
 80090ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090d2:	45e1      	cmp	r9, ip
 80090d4:	f84e 2b04 	str.w	r2, [lr], #4
 80090d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80090dc:	d2de      	bcs.n	800909c <quorem+0x42>
 80090de:	9b00      	ldr	r3, [sp, #0]
 80090e0:	58eb      	ldr	r3, [r5, r3]
 80090e2:	b92b      	cbnz	r3, 80090f0 <quorem+0x96>
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	3b04      	subs	r3, #4
 80090e8:	429d      	cmp	r5, r3
 80090ea:	461a      	mov	r2, r3
 80090ec:	d32f      	bcc.n	800914e <quorem+0xf4>
 80090ee:	613c      	str	r4, [r7, #16]
 80090f0:	4638      	mov	r0, r7
 80090f2:	f001 f97b 	bl	800a3ec <__mcmp>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	db25      	blt.n	8009146 <quorem+0xec>
 80090fa:	4629      	mov	r1, r5
 80090fc:	2000      	movs	r0, #0
 80090fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8009102:	f8d1 c000 	ldr.w	ip, [r1]
 8009106:	fa1f fe82 	uxth.w	lr, r2
 800910a:	fa1f f38c 	uxth.w	r3, ip
 800910e:	eba3 030e 	sub.w	r3, r3, lr
 8009112:	4403      	add	r3, r0
 8009114:	0c12      	lsrs	r2, r2, #16
 8009116:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800911a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800911e:	b29b      	uxth	r3, r3
 8009120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009124:	45c1      	cmp	r9, r8
 8009126:	f841 3b04 	str.w	r3, [r1], #4
 800912a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800912e:	d2e6      	bcs.n	80090fe <quorem+0xa4>
 8009130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009134:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009138:	b922      	cbnz	r2, 8009144 <quorem+0xea>
 800913a:	3b04      	subs	r3, #4
 800913c:	429d      	cmp	r5, r3
 800913e:	461a      	mov	r2, r3
 8009140:	d30b      	bcc.n	800915a <quorem+0x100>
 8009142:	613c      	str	r4, [r7, #16]
 8009144:	3601      	adds	r6, #1
 8009146:	4630      	mov	r0, r6
 8009148:	b003      	add	sp, #12
 800914a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914e:	6812      	ldr	r2, [r2, #0]
 8009150:	3b04      	subs	r3, #4
 8009152:	2a00      	cmp	r2, #0
 8009154:	d1cb      	bne.n	80090ee <quorem+0x94>
 8009156:	3c01      	subs	r4, #1
 8009158:	e7c6      	b.n	80090e8 <quorem+0x8e>
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	3b04      	subs	r3, #4
 800915e:	2a00      	cmp	r2, #0
 8009160:	d1ef      	bne.n	8009142 <quorem+0xe8>
 8009162:	3c01      	subs	r4, #1
 8009164:	e7ea      	b.n	800913c <quorem+0xe2>
 8009166:	2000      	movs	r0, #0
 8009168:	e7ee      	b.n	8009148 <quorem+0xee>
 800916a:	0000      	movs	r0, r0
 800916c:	0000      	movs	r0, r0
	...

08009170 <_dtoa_r>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	69c7      	ldr	r7, [r0, #28]
 8009176:	b099      	sub	sp, #100	@ 0x64
 8009178:	ed8d 0b02 	vstr	d0, [sp, #8]
 800917c:	ec55 4b10 	vmov	r4, r5, d0
 8009180:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009182:	9109      	str	r1, [sp, #36]	@ 0x24
 8009184:	4683      	mov	fp, r0
 8009186:	920e      	str	r2, [sp, #56]	@ 0x38
 8009188:	9313      	str	r3, [sp, #76]	@ 0x4c
 800918a:	b97f      	cbnz	r7, 80091ac <_dtoa_r+0x3c>
 800918c:	2010      	movs	r0, #16
 800918e:	f000 fdfd 	bl	8009d8c <malloc>
 8009192:	4602      	mov	r2, r0
 8009194:	f8cb 001c 	str.w	r0, [fp, #28]
 8009198:	b920      	cbnz	r0, 80091a4 <_dtoa_r+0x34>
 800919a:	4ba7      	ldr	r3, [pc, #668]	@ (8009438 <_dtoa_r+0x2c8>)
 800919c:	21ef      	movs	r1, #239	@ 0xef
 800919e:	48a7      	ldr	r0, [pc, #668]	@ (800943c <_dtoa_r+0x2cc>)
 80091a0:	f001 fc40 	bl	800aa24 <__assert_func>
 80091a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80091a8:	6007      	str	r7, [r0, #0]
 80091aa:	60c7      	str	r7, [r0, #12]
 80091ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091b0:	6819      	ldr	r1, [r3, #0]
 80091b2:	b159      	cbz	r1, 80091cc <_dtoa_r+0x5c>
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	604a      	str	r2, [r1, #4]
 80091b8:	2301      	movs	r3, #1
 80091ba:	4093      	lsls	r3, r2
 80091bc:	608b      	str	r3, [r1, #8]
 80091be:	4658      	mov	r0, fp
 80091c0:	f000 feda 	bl	8009f78 <_Bfree>
 80091c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	1e2b      	subs	r3, r5, #0
 80091ce:	bfb9      	ittee	lt
 80091d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80091d4:	9303      	strlt	r3, [sp, #12]
 80091d6:	2300      	movge	r3, #0
 80091d8:	6033      	strge	r3, [r6, #0]
 80091da:	9f03      	ldr	r7, [sp, #12]
 80091dc:	4b98      	ldr	r3, [pc, #608]	@ (8009440 <_dtoa_r+0x2d0>)
 80091de:	bfbc      	itt	lt
 80091e0:	2201      	movlt	r2, #1
 80091e2:	6032      	strlt	r2, [r6, #0]
 80091e4:	43bb      	bics	r3, r7
 80091e6:	d112      	bne.n	800920e <_dtoa_r+0x9e>
 80091e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091f4:	4323      	orrs	r3, r4
 80091f6:	f000 854d 	beq.w	8009c94 <_dtoa_r+0xb24>
 80091fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009454 <_dtoa_r+0x2e4>
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 854f 	beq.w	8009ca4 <_dtoa_r+0xb34>
 8009206:	f10a 0303 	add.w	r3, sl, #3
 800920a:	f000 bd49 	b.w	8009ca0 <_dtoa_r+0xb30>
 800920e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009212:	2200      	movs	r2, #0
 8009214:	ec51 0b17 	vmov	r0, r1, d7
 8009218:	2300      	movs	r3, #0
 800921a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800921e:	f7f7 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 8009222:	4680      	mov	r8, r0
 8009224:	b158      	cbz	r0, 800923e <_dtoa_r+0xce>
 8009226:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009228:	2301      	movs	r3, #1
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800922e:	b113      	cbz	r3, 8009236 <_dtoa_r+0xc6>
 8009230:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009232:	4b84      	ldr	r3, [pc, #528]	@ (8009444 <_dtoa_r+0x2d4>)
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009458 <_dtoa_r+0x2e8>
 800923a:	f000 bd33 	b.w	8009ca4 <_dtoa_r+0xb34>
 800923e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009242:	aa16      	add	r2, sp, #88	@ 0x58
 8009244:	a917      	add	r1, sp, #92	@ 0x5c
 8009246:	4658      	mov	r0, fp
 8009248:	f001 f980 	bl	800a54c <__d2b>
 800924c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009250:	4681      	mov	r9, r0
 8009252:	2e00      	cmp	r6, #0
 8009254:	d077      	beq.n	8009346 <_dtoa_r+0x1d6>
 8009256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009258:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800925c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009264:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009268:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800926c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009270:	4619      	mov	r1, r3
 8009272:	2200      	movs	r2, #0
 8009274:	4b74      	ldr	r3, [pc, #464]	@ (8009448 <_dtoa_r+0x2d8>)
 8009276:	f7f7 f807 	bl	8000288 <__aeabi_dsub>
 800927a:	a369      	add	r3, pc, #420	@ (adr r3, 8009420 <_dtoa_r+0x2b0>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f7 f9ba 	bl	80005f8 <__aeabi_dmul>
 8009284:	a368      	add	r3, pc, #416	@ (adr r3, 8009428 <_dtoa_r+0x2b8>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f7f6 ffff 	bl	800028c <__adddf3>
 800928e:	4604      	mov	r4, r0
 8009290:	4630      	mov	r0, r6
 8009292:	460d      	mov	r5, r1
 8009294:	f7f7 f946 	bl	8000524 <__aeabi_i2d>
 8009298:	a365      	add	r3, pc, #404	@ (adr r3, 8009430 <_dtoa_r+0x2c0>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	f7f7 f9ab 	bl	80005f8 <__aeabi_dmul>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4620      	mov	r0, r4
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7f6 ffef 	bl	800028c <__adddf3>
 80092ae:	4604      	mov	r4, r0
 80092b0:	460d      	mov	r5, r1
 80092b2:	f7f7 fc51 	bl	8000b58 <__aeabi_d2iz>
 80092b6:	2200      	movs	r2, #0
 80092b8:	4607      	mov	r7, r0
 80092ba:	2300      	movs	r3, #0
 80092bc:	4620      	mov	r0, r4
 80092be:	4629      	mov	r1, r5
 80092c0:	f7f7 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80092c4:	b140      	cbz	r0, 80092d8 <_dtoa_r+0x168>
 80092c6:	4638      	mov	r0, r7
 80092c8:	f7f7 f92c 	bl	8000524 <__aeabi_i2d>
 80092cc:	4622      	mov	r2, r4
 80092ce:	462b      	mov	r3, r5
 80092d0:	f7f7 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80092d4:	b900      	cbnz	r0, 80092d8 <_dtoa_r+0x168>
 80092d6:	3f01      	subs	r7, #1
 80092d8:	2f16      	cmp	r7, #22
 80092da:	d851      	bhi.n	8009380 <_dtoa_r+0x210>
 80092dc:	4b5b      	ldr	r3, [pc, #364]	@ (800944c <_dtoa_r+0x2dc>)
 80092de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ea:	f7f7 fbf7 	bl	8000adc <__aeabi_dcmplt>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d048      	beq.n	8009384 <_dtoa_r+0x214>
 80092f2:	3f01      	subs	r7, #1
 80092f4:	2300      	movs	r3, #0
 80092f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80092f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092fa:	1b9b      	subs	r3, r3, r6
 80092fc:	1e5a      	subs	r2, r3, #1
 80092fe:	bf44      	itt	mi
 8009300:	f1c3 0801 	rsbmi	r8, r3, #1
 8009304:	2300      	movmi	r3, #0
 8009306:	9208      	str	r2, [sp, #32]
 8009308:	bf54      	ite	pl
 800930a:	f04f 0800 	movpl.w	r8, #0
 800930e:	9308      	strmi	r3, [sp, #32]
 8009310:	2f00      	cmp	r7, #0
 8009312:	db39      	blt.n	8009388 <_dtoa_r+0x218>
 8009314:	9b08      	ldr	r3, [sp, #32]
 8009316:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009318:	443b      	add	r3, r7
 800931a:	9308      	str	r3, [sp, #32]
 800931c:	2300      	movs	r3, #0
 800931e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009322:	2b09      	cmp	r3, #9
 8009324:	d864      	bhi.n	80093f0 <_dtoa_r+0x280>
 8009326:	2b05      	cmp	r3, #5
 8009328:	bfc4      	itt	gt
 800932a:	3b04      	subgt	r3, #4
 800932c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800932e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009330:	f1a3 0302 	sub.w	r3, r3, #2
 8009334:	bfcc      	ite	gt
 8009336:	2400      	movgt	r4, #0
 8009338:	2401      	movle	r4, #1
 800933a:	2b03      	cmp	r3, #3
 800933c:	d863      	bhi.n	8009406 <_dtoa_r+0x296>
 800933e:	e8df f003 	tbb	[pc, r3]
 8009342:	372a      	.short	0x372a
 8009344:	5535      	.short	0x5535
 8009346:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800934a:	441e      	add	r6, r3
 800934c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009350:	2b20      	cmp	r3, #32
 8009352:	bfc1      	itttt	gt
 8009354:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009358:	409f      	lslgt	r7, r3
 800935a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800935e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009362:	bfd6      	itet	le
 8009364:	f1c3 0320 	rsble	r3, r3, #32
 8009368:	ea47 0003 	orrgt.w	r0, r7, r3
 800936c:	fa04 f003 	lslle.w	r0, r4, r3
 8009370:	f7f7 f8c8 	bl	8000504 <__aeabi_ui2d>
 8009374:	2201      	movs	r2, #1
 8009376:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800937a:	3e01      	subs	r6, #1
 800937c:	9214      	str	r2, [sp, #80]	@ 0x50
 800937e:	e777      	b.n	8009270 <_dtoa_r+0x100>
 8009380:	2301      	movs	r3, #1
 8009382:	e7b8      	b.n	80092f6 <_dtoa_r+0x186>
 8009384:	9012      	str	r0, [sp, #72]	@ 0x48
 8009386:	e7b7      	b.n	80092f8 <_dtoa_r+0x188>
 8009388:	427b      	negs	r3, r7
 800938a:	930a      	str	r3, [sp, #40]	@ 0x28
 800938c:	2300      	movs	r3, #0
 800938e:	eba8 0807 	sub.w	r8, r8, r7
 8009392:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009394:	e7c4      	b.n	8009320 <_dtoa_r+0x1b0>
 8009396:	2300      	movs	r3, #0
 8009398:	930b      	str	r3, [sp, #44]	@ 0x2c
 800939a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800939c:	2b00      	cmp	r3, #0
 800939e:	dc35      	bgt.n	800940c <_dtoa_r+0x29c>
 80093a0:	2301      	movs	r3, #1
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	9307      	str	r3, [sp, #28]
 80093a6:	461a      	mov	r2, r3
 80093a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80093aa:	e00b      	b.n	80093c4 <_dtoa_r+0x254>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e7f3      	b.n	8009398 <_dtoa_r+0x228>
 80093b0:	2300      	movs	r3, #0
 80093b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	3301      	adds	r3, #1
 80093bc:	2b01      	cmp	r3, #1
 80093be:	9307      	str	r3, [sp, #28]
 80093c0:	bfb8      	it	lt
 80093c2:	2301      	movlt	r3, #1
 80093c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80093c8:	2100      	movs	r1, #0
 80093ca:	2204      	movs	r2, #4
 80093cc:	f102 0514 	add.w	r5, r2, #20
 80093d0:	429d      	cmp	r5, r3
 80093d2:	d91f      	bls.n	8009414 <_dtoa_r+0x2a4>
 80093d4:	6041      	str	r1, [r0, #4]
 80093d6:	4658      	mov	r0, fp
 80093d8:	f000 fd8e 	bl	8009ef8 <_Balloc>
 80093dc:	4682      	mov	sl, r0
 80093de:	2800      	cmp	r0, #0
 80093e0:	d13c      	bne.n	800945c <_dtoa_r+0x2ec>
 80093e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009450 <_dtoa_r+0x2e0>)
 80093e4:	4602      	mov	r2, r0
 80093e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80093ea:	e6d8      	b.n	800919e <_dtoa_r+0x2e>
 80093ec:	2301      	movs	r3, #1
 80093ee:	e7e0      	b.n	80093b2 <_dtoa_r+0x242>
 80093f0:	2401      	movs	r4, #1
 80093f2:	2300      	movs	r3, #0
 80093f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093f8:	f04f 33ff 	mov.w	r3, #4294967295
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	9307      	str	r3, [sp, #28]
 8009400:	2200      	movs	r2, #0
 8009402:	2312      	movs	r3, #18
 8009404:	e7d0      	b.n	80093a8 <_dtoa_r+0x238>
 8009406:	2301      	movs	r3, #1
 8009408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800940a:	e7f5      	b.n	80093f8 <_dtoa_r+0x288>
 800940c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	9307      	str	r3, [sp, #28]
 8009412:	e7d7      	b.n	80093c4 <_dtoa_r+0x254>
 8009414:	3101      	adds	r1, #1
 8009416:	0052      	lsls	r2, r2, #1
 8009418:	e7d8      	b.n	80093cc <_dtoa_r+0x25c>
 800941a:	bf00      	nop
 800941c:	f3af 8000 	nop.w
 8009420:	636f4361 	.word	0x636f4361
 8009424:	3fd287a7 	.word	0x3fd287a7
 8009428:	8b60c8b3 	.word	0x8b60c8b3
 800942c:	3fc68a28 	.word	0x3fc68a28
 8009430:	509f79fb 	.word	0x509f79fb
 8009434:	3fd34413 	.word	0x3fd34413
 8009438:	0800d275 	.word	0x0800d275
 800943c:	0800d28c 	.word	0x0800d28c
 8009440:	7ff00000 	.word	0x7ff00000
 8009444:	0800d245 	.word	0x0800d245
 8009448:	3ff80000 	.word	0x3ff80000
 800944c:	0800d388 	.word	0x0800d388
 8009450:	0800d2e4 	.word	0x0800d2e4
 8009454:	0800d271 	.word	0x0800d271
 8009458:	0800d244 	.word	0x0800d244
 800945c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009460:	6018      	str	r0, [r3, #0]
 8009462:	9b07      	ldr	r3, [sp, #28]
 8009464:	2b0e      	cmp	r3, #14
 8009466:	f200 80a4 	bhi.w	80095b2 <_dtoa_r+0x442>
 800946a:	2c00      	cmp	r4, #0
 800946c:	f000 80a1 	beq.w	80095b2 <_dtoa_r+0x442>
 8009470:	2f00      	cmp	r7, #0
 8009472:	dd33      	ble.n	80094dc <_dtoa_r+0x36c>
 8009474:	4bad      	ldr	r3, [pc, #692]	@ (800972c <_dtoa_r+0x5bc>)
 8009476:	f007 020f 	and.w	r2, r7, #15
 800947a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800947e:	ed93 7b00 	vldr	d7, [r3]
 8009482:	05f8      	lsls	r0, r7, #23
 8009484:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009488:	ea4f 1427 	mov.w	r4, r7, asr #4
 800948c:	d516      	bpl.n	80094bc <_dtoa_r+0x34c>
 800948e:	4ba8      	ldr	r3, [pc, #672]	@ (8009730 <_dtoa_r+0x5c0>)
 8009490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009498:	f7f7 f9d8 	bl	800084c <__aeabi_ddiv>
 800949c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a0:	f004 040f 	and.w	r4, r4, #15
 80094a4:	2603      	movs	r6, #3
 80094a6:	4da2      	ldr	r5, [pc, #648]	@ (8009730 <_dtoa_r+0x5c0>)
 80094a8:	b954      	cbnz	r4, 80094c0 <_dtoa_r+0x350>
 80094aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094b2:	f7f7 f9cb 	bl	800084c <__aeabi_ddiv>
 80094b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ba:	e028      	b.n	800950e <_dtoa_r+0x39e>
 80094bc:	2602      	movs	r6, #2
 80094be:	e7f2      	b.n	80094a6 <_dtoa_r+0x336>
 80094c0:	07e1      	lsls	r1, r4, #31
 80094c2:	d508      	bpl.n	80094d6 <_dtoa_r+0x366>
 80094c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094cc:	f7f7 f894 	bl	80005f8 <__aeabi_dmul>
 80094d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094d4:	3601      	adds	r6, #1
 80094d6:	1064      	asrs	r4, r4, #1
 80094d8:	3508      	adds	r5, #8
 80094da:	e7e5      	b.n	80094a8 <_dtoa_r+0x338>
 80094dc:	f000 80d2 	beq.w	8009684 <_dtoa_r+0x514>
 80094e0:	427c      	negs	r4, r7
 80094e2:	4b92      	ldr	r3, [pc, #584]	@ (800972c <_dtoa_r+0x5bc>)
 80094e4:	4d92      	ldr	r5, [pc, #584]	@ (8009730 <_dtoa_r+0x5c0>)
 80094e6:	f004 020f 	and.w	r2, r4, #15
 80094ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094f6:	f7f7 f87f 	bl	80005f8 <__aeabi_dmul>
 80094fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094fe:	1124      	asrs	r4, r4, #4
 8009500:	2300      	movs	r3, #0
 8009502:	2602      	movs	r6, #2
 8009504:	2c00      	cmp	r4, #0
 8009506:	f040 80b2 	bne.w	800966e <_dtoa_r+0x4fe>
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1d3      	bne.n	80094b6 <_dtoa_r+0x346>
 800950e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009510:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80b7 	beq.w	8009688 <_dtoa_r+0x518>
 800951a:	4b86      	ldr	r3, [pc, #536]	@ (8009734 <_dtoa_r+0x5c4>)
 800951c:	2200      	movs	r2, #0
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f7 fadb 	bl	8000adc <__aeabi_dcmplt>
 8009526:	2800      	cmp	r0, #0
 8009528:	f000 80ae 	beq.w	8009688 <_dtoa_r+0x518>
 800952c:	9b07      	ldr	r3, [sp, #28]
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 80aa 	beq.w	8009688 <_dtoa_r+0x518>
 8009534:	9b00      	ldr	r3, [sp, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	dd37      	ble.n	80095aa <_dtoa_r+0x43a>
 800953a:	1e7b      	subs	r3, r7, #1
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	4620      	mov	r0, r4
 8009540:	4b7d      	ldr	r3, [pc, #500]	@ (8009738 <_dtoa_r+0x5c8>)
 8009542:	2200      	movs	r2, #0
 8009544:	4629      	mov	r1, r5
 8009546:	f7f7 f857 	bl	80005f8 <__aeabi_dmul>
 800954a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800954e:	9c00      	ldr	r4, [sp, #0]
 8009550:	3601      	adds	r6, #1
 8009552:	4630      	mov	r0, r6
 8009554:	f7f6 ffe6 	bl	8000524 <__aeabi_i2d>
 8009558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800955c:	f7f7 f84c 	bl	80005f8 <__aeabi_dmul>
 8009560:	4b76      	ldr	r3, [pc, #472]	@ (800973c <_dtoa_r+0x5cc>)
 8009562:	2200      	movs	r2, #0
 8009564:	f7f6 fe92 	bl	800028c <__adddf3>
 8009568:	4605      	mov	r5, r0
 800956a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800956e:	2c00      	cmp	r4, #0
 8009570:	f040 808d 	bne.w	800968e <_dtoa_r+0x51e>
 8009574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009578:	4b71      	ldr	r3, [pc, #452]	@ (8009740 <_dtoa_r+0x5d0>)
 800957a:	2200      	movs	r2, #0
 800957c:	f7f6 fe84 	bl	8000288 <__aeabi_dsub>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009588:	462a      	mov	r2, r5
 800958a:	4633      	mov	r3, r6
 800958c:	f7f7 fac4 	bl	8000b18 <__aeabi_dcmpgt>
 8009590:	2800      	cmp	r0, #0
 8009592:	f040 828b 	bne.w	8009aac <_dtoa_r+0x93c>
 8009596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800959a:	462a      	mov	r2, r5
 800959c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80095a0:	f7f7 fa9c 	bl	8000adc <__aeabi_dcmplt>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	f040 8128 	bne.w	80097fa <_dtoa_r+0x68a>
 80095aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80095ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80095b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f2c0 815a 	blt.w	800986e <_dtoa_r+0x6fe>
 80095ba:	2f0e      	cmp	r7, #14
 80095bc:	f300 8157 	bgt.w	800986e <_dtoa_r+0x6fe>
 80095c0:	4b5a      	ldr	r3, [pc, #360]	@ (800972c <_dtoa_r+0x5bc>)
 80095c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095c6:	ed93 7b00 	vldr	d7, [r3]
 80095ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	ed8d 7b00 	vstr	d7, [sp]
 80095d2:	da03      	bge.n	80095dc <_dtoa_r+0x46c>
 80095d4:	9b07      	ldr	r3, [sp, #28]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f340 8101 	ble.w	80097de <_dtoa_r+0x66e>
 80095dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095e0:	4656      	mov	r6, sl
 80095e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095e6:	4620      	mov	r0, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	f7f7 f92f 	bl	800084c <__aeabi_ddiv>
 80095ee:	f7f7 fab3 	bl	8000b58 <__aeabi_d2iz>
 80095f2:	4680      	mov	r8, r0
 80095f4:	f7f6 ff96 	bl	8000524 <__aeabi_i2d>
 80095f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095fc:	f7f6 fffc 	bl	80005f8 <__aeabi_dmul>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4620      	mov	r0, r4
 8009606:	4629      	mov	r1, r5
 8009608:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800960c:	f7f6 fe3c 	bl	8000288 <__aeabi_dsub>
 8009610:	f806 4b01 	strb.w	r4, [r6], #1
 8009614:	9d07      	ldr	r5, [sp, #28]
 8009616:	eba6 040a 	sub.w	r4, r6, sl
 800961a:	42a5      	cmp	r5, r4
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	f040 8117 	bne.w	8009852 <_dtoa_r+0x6e2>
 8009624:	f7f6 fe32 	bl	800028c <__adddf3>
 8009628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800962c:	4604      	mov	r4, r0
 800962e:	460d      	mov	r5, r1
 8009630:	f7f7 fa72 	bl	8000b18 <__aeabi_dcmpgt>
 8009634:	2800      	cmp	r0, #0
 8009636:	f040 80f9 	bne.w	800982c <_dtoa_r+0x6bc>
 800963a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800963e:	4620      	mov	r0, r4
 8009640:	4629      	mov	r1, r5
 8009642:	f7f7 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009646:	b118      	cbz	r0, 8009650 <_dtoa_r+0x4e0>
 8009648:	f018 0f01 	tst.w	r8, #1
 800964c:	f040 80ee 	bne.w	800982c <_dtoa_r+0x6bc>
 8009650:	4649      	mov	r1, r9
 8009652:	4658      	mov	r0, fp
 8009654:	f000 fc90 	bl	8009f78 <_Bfree>
 8009658:	2300      	movs	r3, #0
 800965a:	7033      	strb	r3, [r6, #0]
 800965c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800965e:	3701      	adds	r7, #1
 8009660:	601f      	str	r7, [r3, #0]
 8009662:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 831d 	beq.w	8009ca4 <_dtoa_r+0xb34>
 800966a:	601e      	str	r6, [r3, #0]
 800966c:	e31a      	b.n	8009ca4 <_dtoa_r+0xb34>
 800966e:	07e2      	lsls	r2, r4, #31
 8009670:	d505      	bpl.n	800967e <_dtoa_r+0x50e>
 8009672:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	3601      	adds	r6, #1
 800967c:	2301      	movs	r3, #1
 800967e:	1064      	asrs	r4, r4, #1
 8009680:	3508      	adds	r5, #8
 8009682:	e73f      	b.n	8009504 <_dtoa_r+0x394>
 8009684:	2602      	movs	r6, #2
 8009686:	e742      	b.n	800950e <_dtoa_r+0x39e>
 8009688:	9c07      	ldr	r4, [sp, #28]
 800968a:	9704      	str	r7, [sp, #16]
 800968c:	e761      	b.n	8009552 <_dtoa_r+0x3e2>
 800968e:	4b27      	ldr	r3, [pc, #156]	@ (800972c <_dtoa_r+0x5bc>)
 8009690:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009692:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009696:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800969a:	4454      	add	r4, sl
 800969c:	2900      	cmp	r1, #0
 800969e:	d053      	beq.n	8009748 <_dtoa_r+0x5d8>
 80096a0:	4928      	ldr	r1, [pc, #160]	@ (8009744 <_dtoa_r+0x5d4>)
 80096a2:	2000      	movs	r0, #0
 80096a4:	f7f7 f8d2 	bl	800084c <__aeabi_ddiv>
 80096a8:	4633      	mov	r3, r6
 80096aa:	462a      	mov	r2, r5
 80096ac:	f7f6 fdec 	bl	8000288 <__aeabi_dsub>
 80096b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096b4:	4656      	mov	r6, sl
 80096b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ba:	f7f7 fa4d 	bl	8000b58 <__aeabi_d2iz>
 80096be:	4605      	mov	r5, r0
 80096c0:	f7f6 ff30 	bl	8000524 <__aeabi_i2d>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096cc:	f7f6 fddc 	bl	8000288 <__aeabi_dsub>
 80096d0:	3530      	adds	r5, #48	@ 0x30
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096da:	f806 5b01 	strb.w	r5, [r6], #1
 80096de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096e2:	f7f7 f9fb 	bl	8000adc <__aeabi_dcmplt>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d171      	bne.n	80097ce <_dtoa_r+0x65e>
 80096ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096ee:	4911      	ldr	r1, [pc, #68]	@ (8009734 <_dtoa_r+0x5c4>)
 80096f0:	2000      	movs	r0, #0
 80096f2:	f7f6 fdc9 	bl	8000288 <__aeabi_dsub>
 80096f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096fa:	f7f7 f9ef 	bl	8000adc <__aeabi_dcmplt>
 80096fe:	2800      	cmp	r0, #0
 8009700:	f040 8095 	bne.w	800982e <_dtoa_r+0x6be>
 8009704:	42a6      	cmp	r6, r4
 8009706:	f43f af50 	beq.w	80095aa <_dtoa_r+0x43a>
 800970a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800970e:	4b0a      	ldr	r3, [pc, #40]	@ (8009738 <_dtoa_r+0x5c8>)
 8009710:	2200      	movs	r2, #0
 8009712:	f7f6 ff71 	bl	80005f8 <__aeabi_dmul>
 8009716:	4b08      	ldr	r3, [pc, #32]	@ (8009738 <_dtoa_r+0x5c8>)
 8009718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800971c:	2200      	movs	r2, #0
 800971e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009722:	f7f6 ff69 	bl	80005f8 <__aeabi_dmul>
 8009726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800972a:	e7c4      	b.n	80096b6 <_dtoa_r+0x546>
 800972c:	0800d388 	.word	0x0800d388
 8009730:	0800d360 	.word	0x0800d360
 8009734:	3ff00000 	.word	0x3ff00000
 8009738:	40240000 	.word	0x40240000
 800973c:	401c0000 	.word	0x401c0000
 8009740:	40140000 	.word	0x40140000
 8009744:	3fe00000 	.word	0x3fe00000
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	f7f6 ff54 	bl	80005f8 <__aeabi_dmul>
 8009750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009754:	9415      	str	r4, [sp, #84]	@ 0x54
 8009756:	4656      	mov	r6, sl
 8009758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800975c:	f7f7 f9fc 	bl	8000b58 <__aeabi_d2iz>
 8009760:	4605      	mov	r5, r0
 8009762:	f7f6 fedf 	bl	8000524 <__aeabi_i2d>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800976e:	f7f6 fd8b 	bl	8000288 <__aeabi_dsub>
 8009772:	3530      	adds	r5, #48	@ 0x30
 8009774:	f806 5b01 	strb.w	r5, [r6], #1
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	42a6      	cmp	r6, r4
 800977e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009782:	f04f 0200 	mov.w	r2, #0
 8009786:	d124      	bne.n	80097d2 <_dtoa_r+0x662>
 8009788:	4bac      	ldr	r3, [pc, #688]	@ (8009a3c <_dtoa_r+0x8cc>)
 800978a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800978e:	f7f6 fd7d 	bl	800028c <__adddf3>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979a:	f7f7 f9bd 	bl	8000b18 <__aeabi_dcmpgt>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d145      	bne.n	800982e <_dtoa_r+0x6be>
 80097a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097a6:	49a5      	ldr	r1, [pc, #660]	@ (8009a3c <_dtoa_r+0x8cc>)
 80097a8:	2000      	movs	r0, #0
 80097aa:	f7f6 fd6d 	bl	8000288 <__aeabi_dsub>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b6:	f7f7 f991 	bl	8000adc <__aeabi_dcmplt>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	f43f aef5 	beq.w	80095aa <_dtoa_r+0x43a>
 80097c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80097c2:	1e73      	subs	r3, r6, #1
 80097c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80097c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097ca:	2b30      	cmp	r3, #48	@ 0x30
 80097cc:	d0f8      	beq.n	80097c0 <_dtoa_r+0x650>
 80097ce:	9f04      	ldr	r7, [sp, #16]
 80097d0:	e73e      	b.n	8009650 <_dtoa_r+0x4e0>
 80097d2:	4b9b      	ldr	r3, [pc, #620]	@ (8009a40 <_dtoa_r+0x8d0>)
 80097d4:	f7f6 ff10 	bl	80005f8 <__aeabi_dmul>
 80097d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097dc:	e7bc      	b.n	8009758 <_dtoa_r+0x5e8>
 80097de:	d10c      	bne.n	80097fa <_dtoa_r+0x68a>
 80097e0:	4b98      	ldr	r3, [pc, #608]	@ (8009a44 <_dtoa_r+0x8d4>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097e8:	f7f6 ff06 	bl	80005f8 <__aeabi_dmul>
 80097ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097f0:	f7f7 f988 	bl	8000b04 <__aeabi_dcmpge>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f000 8157 	beq.w	8009aa8 <_dtoa_r+0x938>
 80097fa:	2400      	movs	r4, #0
 80097fc:	4625      	mov	r5, r4
 80097fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009800:	43db      	mvns	r3, r3
 8009802:	9304      	str	r3, [sp, #16]
 8009804:	4656      	mov	r6, sl
 8009806:	2700      	movs	r7, #0
 8009808:	4621      	mov	r1, r4
 800980a:	4658      	mov	r0, fp
 800980c:	f000 fbb4 	bl	8009f78 <_Bfree>
 8009810:	2d00      	cmp	r5, #0
 8009812:	d0dc      	beq.n	80097ce <_dtoa_r+0x65e>
 8009814:	b12f      	cbz	r7, 8009822 <_dtoa_r+0x6b2>
 8009816:	42af      	cmp	r7, r5
 8009818:	d003      	beq.n	8009822 <_dtoa_r+0x6b2>
 800981a:	4639      	mov	r1, r7
 800981c:	4658      	mov	r0, fp
 800981e:	f000 fbab 	bl	8009f78 <_Bfree>
 8009822:	4629      	mov	r1, r5
 8009824:	4658      	mov	r0, fp
 8009826:	f000 fba7 	bl	8009f78 <_Bfree>
 800982a:	e7d0      	b.n	80097ce <_dtoa_r+0x65e>
 800982c:	9704      	str	r7, [sp, #16]
 800982e:	4633      	mov	r3, r6
 8009830:	461e      	mov	r6, r3
 8009832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009836:	2a39      	cmp	r2, #57	@ 0x39
 8009838:	d107      	bne.n	800984a <_dtoa_r+0x6da>
 800983a:	459a      	cmp	sl, r3
 800983c:	d1f8      	bne.n	8009830 <_dtoa_r+0x6c0>
 800983e:	9a04      	ldr	r2, [sp, #16]
 8009840:	3201      	adds	r2, #1
 8009842:	9204      	str	r2, [sp, #16]
 8009844:	2230      	movs	r2, #48	@ 0x30
 8009846:	f88a 2000 	strb.w	r2, [sl]
 800984a:	781a      	ldrb	r2, [r3, #0]
 800984c:	3201      	adds	r2, #1
 800984e:	701a      	strb	r2, [r3, #0]
 8009850:	e7bd      	b.n	80097ce <_dtoa_r+0x65e>
 8009852:	4b7b      	ldr	r3, [pc, #492]	@ (8009a40 <_dtoa_r+0x8d0>)
 8009854:	2200      	movs	r2, #0
 8009856:	f7f6 fecf 	bl	80005f8 <__aeabi_dmul>
 800985a:	2200      	movs	r2, #0
 800985c:	2300      	movs	r3, #0
 800985e:	4604      	mov	r4, r0
 8009860:	460d      	mov	r5, r1
 8009862:	f7f7 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8009866:	2800      	cmp	r0, #0
 8009868:	f43f aebb 	beq.w	80095e2 <_dtoa_r+0x472>
 800986c:	e6f0      	b.n	8009650 <_dtoa_r+0x4e0>
 800986e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009870:	2a00      	cmp	r2, #0
 8009872:	f000 80db 	beq.w	8009a2c <_dtoa_r+0x8bc>
 8009876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009878:	2a01      	cmp	r2, #1
 800987a:	f300 80bf 	bgt.w	80099fc <_dtoa_r+0x88c>
 800987e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009880:	2a00      	cmp	r2, #0
 8009882:	f000 80b7 	beq.w	80099f4 <_dtoa_r+0x884>
 8009886:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800988a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800988c:	4646      	mov	r6, r8
 800988e:	9a08      	ldr	r2, [sp, #32]
 8009890:	2101      	movs	r1, #1
 8009892:	441a      	add	r2, r3
 8009894:	4658      	mov	r0, fp
 8009896:	4498      	add	r8, r3
 8009898:	9208      	str	r2, [sp, #32]
 800989a:	f000 fc21 	bl	800a0e0 <__i2b>
 800989e:	4605      	mov	r5, r0
 80098a0:	b15e      	cbz	r6, 80098ba <_dtoa_r+0x74a>
 80098a2:	9b08      	ldr	r3, [sp, #32]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dd08      	ble.n	80098ba <_dtoa_r+0x74a>
 80098a8:	42b3      	cmp	r3, r6
 80098aa:	9a08      	ldr	r2, [sp, #32]
 80098ac:	bfa8      	it	ge
 80098ae:	4633      	movge	r3, r6
 80098b0:	eba8 0803 	sub.w	r8, r8, r3
 80098b4:	1af6      	subs	r6, r6, r3
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	9308      	str	r3, [sp, #32]
 80098ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098bc:	b1f3      	cbz	r3, 80098fc <_dtoa_r+0x78c>
 80098be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 80b7 	beq.w	8009a34 <_dtoa_r+0x8c4>
 80098c6:	b18c      	cbz	r4, 80098ec <_dtoa_r+0x77c>
 80098c8:	4629      	mov	r1, r5
 80098ca:	4622      	mov	r2, r4
 80098cc:	4658      	mov	r0, fp
 80098ce:	f000 fcc7 	bl	800a260 <__pow5mult>
 80098d2:	464a      	mov	r2, r9
 80098d4:	4601      	mov	r1, r0
 80098d6:	4605      	mov	r5, r0
 80098d8:	4658      	mov	r0, fp
 80098da:	f000 fc17 	bl	800a10c <__multiply>
 80098de:	4649      	mov	r1, r9
 80098e0:	9004      	str	r0, [sp, #16]
 80098e2:	4658      	mov	r0, fp
 80098e4:	f000 fb48 	bl	8009f78 <_Bfree>
 80098e8:	9b04      	ldr	r3, [sp, #16]
 80098ea:	4699      	mov	r9, r3
 80098ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ee:	1b1a      	subs	r2, r3, r4
 80098f0:	d004      	beq.n	80098fc <_dtoa_r+0x78c>
 80098f2:	4649      	mov	r1, r9
 80098f4:	4658      	mov	r0, fp
 80098f6:	f000 fcb3 	bl	800a260 <__pow5mult>
 80098fa:	4681      	mov	r9, r0
 80098fc:	2101      	movs	r1, #1
 80098fe:	4658      	mov	r0, fp
 8009900:	f000 fbee 	bl	800a0e0 <__i2b>
 8009904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009906:	4604      	mov	r4, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 81cf 	beq.w	8009cac <_dtoa_r+0xb3c>
 800990e:	461a      	mov	r2, r3
 8009910:	4601      	mov	r1, r0
 8009912:	4658      	mov	r0, fp
 8009914:	f000 fca4 	bl	800a260 <__pow5mult>
 8009918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800991a:	2b01      	cmp	r3, #1
 800991c:	4604      	mov	r4, r0
 800991e:	f300 8095 	bgt.w	8009a4c <_dtoa_r+0x8dc>
 8009922:	9b02      	ldr	r3, [sp, #8]
 8009924:	2b00      	cmp	r3, #0
 8009926:	f040 8087 	bne.w	8009a38 <_dtoa_r+0x8c8>
 800992a:	9b03      	ldr	r3, [sp, #12]
 800992c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009930:	2b00      	cmp	r3, #0
 8009932:	f040 8089 	bne.w	8009a48 <_dtoa_r+0x8d8>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800993c:	0d1b      	lsrs	r3, r3, #20
 800993e:	051b      	lsls	r3, r3, #20
 8009940:	b12b      	cbz	r3, 800994e <_dtoa_r+0x7de>
 8009942:	9b08      	ldr	r3, [sp, #32]
 8009944:	3301      	adds	r3, #1
 8009946:	9308      	str	r3, [sp, #32]
 8009948:	f108 0801 	add.w	r8, r8, #1
 800994c:	2301      	movs	r3, #1
 800994e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 81b0 	beq.w	8009cb8 <_dtoa_r+0xb48>
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800995e:	6918      	ldr	r0, [r3, #16]
 8009960:	f000 fb72 	bl	800a048 <__hi0bits>
 8009964:	f1c0 0020 	rsb	r0, r0, #32
 8009968:	9b08      	ldr	r3, [sp, #32]
 800996a:	4418      	add	r0, r3
 800996c:	f010 001f 	ands.w	r0, r0, #31
 8009970:	d077      	beq.n	8009a62 <_dtoa_r+0x8f2>
 8009972:	f1c0 0320 	rsb	r3, r0, #32
 8009976:	2b04      	cmp	r3, #4
 8009978:	dd6b      	ble.n	8009a52 <_dtoa_r+0x8e2>
 800997a:	9b08      	ldr	r3, [sp, #32]
 800997c:	f1c0 001c 	rsb	r0, r0, #28
 8009980:	4403      	add	r3, r0
 8009982:	4480      	add	r8, r0
 8009984:	4406      	add	r6, r0
 8009986:	9308      	str	r3, [sp, #32]
 8009988:	f1b8 0f00 	cmp.w	r8, #0
 800998c:	dd05      	ble.n	800999a <_dtoa_r+0x82a>
 800998e:	4649      	mov	r1, r9
 8009990:	4642      	mov	r2, r8
 8009992:	4658      	mov	r0, fp
 8009994:	f000 fcbe 	bl	800a314 <__lshift>
 8009998:	4681      	mov	r9, r0
 800999a:	9b08      	ldr	r3, [sp, #32]
 800999c:	2b00      	cmp	r3, #0
 800999e:	dd05      	ble.n	80099ac <_dtoa_r+0x83c>
 80099a0:	4621      	mov	r1, r4
 80099a2:	461a      	mov	r2, r3
 80099a4:	4658      	mov	r0, fp
 80099a6:	f000 fcb5 	bl	800a314 <__lshift>
 80099aa:	4604      	mov	r4, r0
 80099ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d059      	beq.n	8009a66 <_dtoa_r+0x8f6>
 80099b2:	4621      	mov	r1, r4
 80099b4:	4648      	mov	r0, r9
 80099b6:	f000 fd19 	bl	800a3ec <__mcmp>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	da53      	bge.n	8009a66 <_dtoa_r+0x8f6>
 80099be:	1e7b      	subs	r3, r7, #1
 80099c0:	9304      	str	r3, [sp, #16]
 80099c2:	4649      	mov	r1, r9
 80099c4:	2300      	movs	r3, #0
 80099c6:	220a      	movs	r2, #10
 80099c8:	4658      	mov	r0, fp
 80099ca:	f000 faf7 	bl	8009fbc <__multadd>
 80099ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099d0:	4681      	mov	r9, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 8172 	beq.w	8009cbc <_dtoa_r+0xb4c>
 80099d8:	2300      	movs	r3, #0
 80099da:	4629      	mov	r1, r5
 80099dc:	220a      	movs	r2, #10
 80099de:	4658      	mov	r0, fp
 80099e0:	f000 faec 	bl	8009fbc <__multadd>
 80099e4:	9b00      	ldr	r3, [sp, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	4605      	mov	r5, r0
 80099ea:	dc67      	bgt.n	8009abc <_dtoa_r+0x94c>
 80099ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	dc41      	bgt.n	8009a76 <_dtoa_r+0x906>
 80099f2:	e063      	b.n	8009abc <_dtoa_r+0x94c>
 80099f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80099f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099fa:	e746      	b.n	800988a <_dtoa_r+0x71a>
 80099fc:	9b07      	ldr	r3, [sp, #28]
 80099fe:	1e5c      	subs	r4, r3, #1
 8009a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a02:	42a3      	cmp	r3, r4
 8009a04:	bfbf      	itttt	lt
 8009a06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009a08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009a0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009a0c:	1ae3      	sublt	r3, r4, r3
 8009a0e:	bfb4      	ite	lt
 8009a10:	18d2      	addlt	r2, r2, r3
 8009a12:	1b1c      	subge	r4, r3, r4
 8009a14:	9b07      	ldr	r3, [sp, #28]
 8009a16:	bfbc      	itt	lt
 8009a18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009a1a:	2400      	movlt	r4, #0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bfb5      	itete	lt
 8009a20:	eba8 0603 	sublt.w	r6, r8, r3
 8009a24:	9b07      	ldrge	r3, [sp, #28]
 8009a26:	2300      	movlt	r3, #0
 8009a28:	4646      	movge	r6, r8
 8009a2a:	e730      	b.n	800988e <_dtoa_r+0x71e>
 8009a2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009a30:	4646      	mov	r6, r8
 8009a32:	e735      	b.n	80098a0 <_dtoa_r+0x730>
 8009a34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a36:	e75c      	b.n	80098f2 <_dtoa_r+0x782>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e788      	b.n	800994e <_dtoa_r+0x7de>
 8009a3c:	3fe00000 	.word	0x3fe00000
 8009a40:	40240000 	.word	0x40240000
 8009a44:	40140000 	.word	0x40140000
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	e780      	b.n	800994e <_dtoa_r+0x7de>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a50:	e782      	b.n	8009958 <_dtoa_r+0x7e8>
 8009a52:	d099      	beq.n	8009988 <_dtoa_r+0x818>
 8009a54:	9a08      	ldr	r2, [sp, #32]
 8009a56:	331c      	adds	r3, #28
 8009a58:	441a      	add	r2, r3
 8009a5a:	4498      	add	r8, r3
 8009a5c:	441e      	add	r6, r3
 8009a5e:	9208      	str	r2, [sp, #32]
 8009a60:	e792      	b.n	8009988 <_dtoa_r+0x818>
 8009a62:	4603      	mov	r3, r0
 8009a64:	e7f6      	b.n	8009a54 <_dtoa_r+0x8e4>
 8009a66:	9b07      	ldr	r3, [sp, #28]
 8009a68:	9704      	str	r7, [sp, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	dc20      	bgt.n	8009ab0 <_dtoa_r+0x940>
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	dd1e      	ble.n	8009ab4 <_dtoa_r+0x944>
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f47f aec0 	bne.w	80097fe <_dtoa_r+0x68e>
 8009a7e:	4621      	mov	r1, r4
 8009a80:	2205      	movs	r2, #5
 8009a82:	4658      	mov	r0, fp
 8009a84:	f000 fa9a 	bl	8009fbc <__multadd>
 8009a88:	4601      	mov	r1, r0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4648      	mov	r0, r9
 8009a8e:	f000 fcad 	bl	800a3ec <__mcmp>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	f77f aeb3 	ble.w	80097fe <_dtoa_r+0x68e>
 8009a98:	4656      	mov	r6, sl
 8009a9a:	2331      	movs	r3, #49	@ 0x31
 8009a9c:	f806 3b01 	strb.w	r3, [r6], #1
 8009aa0:	9b04      	ldr	r3, [sp, #16]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	e6ae      	b.n	8009806 <_dtoa_r+0x696>
 8009aa8:	9c07      	ldr	r4, [sp, #28]
 8009aaa:	9704      	str	r7, [sp, #16]
 8009aac:	4625      	mov	r5, r4
 8009aae:	e7f3      	b.n	8009a98 <_dtoa_r+0x928>
 8009ab0:	9b07      	ldr	r3, [sp, #28]
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 8104 	beq.w	8009cc4 <_dtoa_r+0xb54>
 8009abc:	2e00      	cmp	r6, #0
 8009abe:	dd05      	ble.n	8009acc <_dtoa_r+0x95c>
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4632      	mov	r2, r6
 8009ac4:	4658      	mov	r0, fp
 8009ac6:	f000 fc25 	bl	800a314 <__lshift>
 8009aca:	4605      	mov	r5, r0
 8009acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d05a      	beq.n	8009b88 <_dtoa_r+0xa18>
 8009ad2:	6869      	ldr	r1, [r5, #4]
 8009ad4:	4658      	mov	r0, fp
 8009ad6:	f000 fa0f 	bl	8009ef8 <_Balloc>
 8009ada:	4606      	mov	r6, r0
 8009adc:	b928      	cbnz	r0, 8009aea <_dtoa_r+0x97a>
 8009ade:	4b84      	ldr	r3, [pc, #528]	@ (8009cf0 <_dtoa_r+0xb80>)
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ae6:	f7ff bb5a 	b.w	800919e <_dtoa_r+0x2e>
 8009aea:	692a      	ldr	r2, [r5, #16]
 8009aec:	3202      	adds	r2, #2
 8009aee:	0092      	lsls	r2, r2, #2
 8009af0:	f105 010c 	add.w	r1, r5, #12
 8009af4:	300c      	adds	r0, #12
 8009af6:	f7ff faa2 	bl	800903e <memcpy>
 8009afa:	2201      	movs	r2, #1
 8009afc:	4631      	mov	r1, r6
 8009afe:	4658      	mov	r0, fp
 8009b00:	f000 fc08 	bl	800a314 <__lshift>
 8009b04:	f10a 0301 	add.w	r3, sl, #1
 8009b08:	9307      	str	r3, [sp, #28]
 8009b0a:	9b00      	ldr	r3, [sp, #0]
 8009b0c:	4453      	add	r3, sl
 8009b0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	462f      	mov	r7, r5
 8009b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	9b07      	ldr	r3, [sp, #28]
 8009b1e:	4621      	mov	r1, r4
 8009b20:	3b01      	subs	r3, #1
 8009b22:	4648      	mov	r0, r9
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	f7ff fa98 	bl	800905a <quorem>
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	9002      	str	r0, [sp, #8]
 8009b2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b32:	4648      	mov	r0, r9
 8009b34:	f000 fc5a 	bl	800a3ec <__mcmp>
 8009b38:	462a      	mov	r2, r5
 8009b3a:	9008      	str	r0, [sp, #32]
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	4658      	mov	r0, fp
 8009b40:	f000 fc70 	bl	800a424 <__mdiff>
 8009b44:	68c2      	ldr	r2, [r0, #12]
 8009b46:	4606      	mov	r6, r0
 8009b48:	bb02      	cbnz	r2, 8009b8c <_dtoa_r+0xa1c>
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	4648      	mov	r0, r9
 8009b4e:	f000 fc4d 	bl	800a3ec <__mcmp>
 8009b52:	4602      	mov	r2, r0
 8009b54:	4631      	mov	r1, r6
 8009b56:	4658      	mov	r0, fp
 8009b58:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b5a:	f000 fa0d 	bl	8009f78 <_Bfree>
 8009b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b62:	9e07      	ldr	r6, [sp, #28]
 8009b64:	ea43 0102 	orr.w	r1, r3, r2
 8009b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b6a:	4319      	orrs	r1, r3
 8009b6c:	d110      	bne.n	8009b90 <_dtoa_r+0xa20>
 8009b6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b72:	d029      	beq.n	8009bc8 <_dtoa_r+0xa58>
 8009b74:	9b08      	ldr	r3, [sp, #32]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	dd02      	ble.n	8009b80 <_dtoa_r+0xa10>
 8009b7a:	9b02      	ldr	r3, [sp, #8]
 8009b7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009b80:	9b00      	ldr	r3, [sp, #0]
 8009b82:	f883 8000 	strb.w	r8, [r3]
 8009b86:	e63f      	b.n	8009808 <_dtoa_r+0x698>
 8009b88:	4628      	mov	r0, r5
 8009b8a:	e7bb      	b.n	8009b04 <_dtoa_r+0x994>
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	e7e1      	b.n	8009b54 <_dtoa_r+0x9e4>
 8009b90:	9b08      	ldr	r3, [sp, #32]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	db04      	blt.n	8009ba0 <_dtoa_r+0xa30>
 8009b96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b98:	430b      	orrs	r3, r1
 8009b9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	d120      	bne.n	8009be2 <_dtoa_r+0xa72>
 8009ba0:	2a00      	cmp	r2, #0
 8009ba2:	dded      	ble.n	8009b80 <_dtoa_r+0xa10>
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	4658      	mov	r0, fp
 8009baa:	f000 fbb3 	bl	800a314 <__lshift>
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4681      	mov	r9, r0
 8009bb2:	f000 fc1b 	bl	800a3ec <__mcmp>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	dc03      	bgt.n	8009bc2 <_dtoa_r+0xa52>
 8009bba:	d1e1      	bne.n	8009b80 <_dtoa_r+0xa10>
 8009bbc:	f018 0f01 	tst.w	r8, #1
 8009bc0:	d0de      	beq.n	8009b80 <_dtoa_r+0xa10>
 8009bc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bc6:	d1d8      	bne.n	8009b7a <_dtoa_r+0xa0a>
 8009bc8:	9a00      	ldr	r2, [sp, #0]
 8009bca:	2339      	movs	r3, #57	@ 0x39
 8009bcc:	7013      	strb	r3, [r2, #0]
 8009bce:	4633      	mov	r3, r6
 8009bd0:	461e      	mov	r6, r3
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009bd8:	2a39      	cmp	r2, #57	@ 0x39
 8009bda:	d052      	beq.n	8009c82 <_dtoa_r+0xb12>
 8009bdc:	3201      	adds	r2, #1
 8009bde:	701a      	strb	r2, [r3, #0]
 8009be0:	e612      	b.n	8009808 <_dtoa_r+0x698>
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	dd07      	ble.n	8009bf6 <_dtoa_r+0xa86>
 8009be6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bea:	d0ed      	beq.n	8009bc8 <_dtoa_r+0xa58>
 8009bec:	9a00      	ldr	r2, [sp, #0]
 8009bee:	f108 0301 	add.w	r3, r8, #1
 8009bf2:	7013      	strb	r3, [r2, #0]
 8009bf4:	e608      	b.n	8009808 <_dtoa_r+0x698>
 8009bf6:	9b07      	ldr	r3, [sp, #28]
 8009bf8:	9a07      	ldr	r2, [sp, #28]
 8009bfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009bfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d028      	beq.n	8009c56 <_dtoa_r+0xae6>
 8009c04:	4649      	mov	r1, r9
 8009c06:	2300      	movs	r3, #0
 8009c08:	220a      	movs	r2, #10
 8009c0a:	4658      	mov	r0, fp
 8009c0c:	f000 f9d6 	bl	8009fbc <__multadd>
 8009c10:	42af      	cmp	r7, r5
 8009c12:	4681      	mov	r9, r0
 8009c14:	f04f 0300 	mov.w	r3, #0
 8009c18:	f04f 020a 	mov.w	r2, #10
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	4658      	mov	r0, fp
 8009c20:	d107      	bne.n	8009c32 <_dtoa_r+0xac2>
 8009c22:	f000 f9cb 	bl	8009fbc <__multadd>
 8009c26:	4607      	mov	r7, r0
 8009c28:	4605      	mov	r5, r0
 8009c2a:	9b07      	ldr	r3, [sp, #28]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	9307      	str	r3, [sp, #28]
 8009c30:	e774      	b.n	8009b1c <_dtoa_r+0x9ac>
 8009c32:	f000 f9c3 	bl	8009fbc <__multadd>
 8009c36:	4629      	mov	r1, r5
 8009c38:	4607      	mov	r7, r0
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	220a      	movs	r2, #10
 8009c3e:	4658      	mov	r0, fp
 8009c40:	f000 f9bc 	bl	8009fbc <__multadd>
 8009c44:	4605      	mov	r5, r0
 8009c46:	e7f0      	b.n	8009c2a <_dtoa_r+0xaba>
 8009c48:	9b00      	ldr	r3, [sp, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	bfcc      	ite	gt
 8009c4e:	461e      	movgt	r6, r3
 8009c50:	2601      	movle	r6, #1
 8009c52:	4456      	add	r6, sl
 8009c54:	2700      	movs	r7, #0
 8009c56:	4649      	mov	r1, r9
 8009c58:	2201      	movs	r2, #1
 8009c5a:	4658      	mov	r0, fp
 8009c5c:	f000 fb5a 	bl	800a314 <__lshift>
 8009c60:	4621      	mov	r1, r4
 8009c62:	4681      	mov	r9, r0
 8009c64:	f000 fbc2 	bl	800a3ec <__mcmp>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	dcb0      	bgt.n	8009bce <_dtoa_r+0xa5e>
 8009c6c:	d102      	bne.n	8009c74 <_dtoa_r+0xb04>
 8009c6e:	f018 0f01 	tst.w	r8, #1
 8009c72:	d1ac      	bne.n	8009bce <_dtoa_r+0xa5e>
 8009c74:	4633      	mov	r3, r6
 8009c76:	461e      	mov	r6, r3
 8009c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c7c:	2a30      	cmp	r2, #48	@ 0x30
 8009c7e:	d0fa      	beq.n	8009c76 <_dtoa_r+0xb06>
 8009c80:	e5c2      	b.n	8009808 <_dtoa_r+0x698>
 8009c82:	459a      	cmp	sl, r3
 8009c84:	d1a4      	bne.n	8009bd0 <_dtoa_r+0xa60>
 8009c86:	9b04      	ldr	r3, [sp, #16]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	9304      	str	r3, [sp, #16]
 8009c8c:	2331      	movs	r3, #49	@ 0x31
 8009c8e:	f88a 3000 	strb.w	r3, [sl]
 8009c92:	e5b9      	b.n	8009808 <_dtoa_r+0x698>
 8009c94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009cf4 <_dtoa_r+0xb84>
 8009c9a:	b11b      	cbz	r3, 8009ca4 <_dtoa_r+0xb34>
 8009c9c:	f10a 0308 	add.w	r3, sl, #8
 8009ca0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	4650      	mov	r0, sl
 8009ca6:	b019      	add	sp, #100	@ 0x64
 8009ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	f77f ae37 	ble.w	8009922 <_dtoa_r+0x7b2>
 8009cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cb8:	2001      	movs	r0, #1
 8009cba:	e655      	b.n	8009968 <_dtoa_r+0x7f8>
 8009cbc:	9b00      	ldr	r3, [sp, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f77f aed6 	ble.w	8009a70 <_dtoa_r+0x900>
 8009cc4:	4656      	mov	r6, sl
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4648      	mov	r0, r9
 8009cca:	f7ff f9c6 	bl	800905a <quorem>
 8009cce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cd2:	f806 8b01 	strb.w	r8, [r6], #1
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	eba6 020a 	sub.w	r2, r6, sl
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	ddb3      	ble.n	8009c48 <_dtoa_r+0xad8>
 8009ce0:	4649      	mov	r1, r9
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	4658      	mov	r0, fp
 8009ce8:	f000 f968 	bl	8009fbc <__multadd>
 8009cec:	4681      	mov	r9, r0
 8009cee:	e7ea      	b.n	8009cc6 <_dtoa_r+0xb56>
 8009cf0:	0800d2e4 	.word	0x0800d2e4
 8009cf4:	0800d268 	.word	0x0800d268

08009cf8 <_free_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	d041      	beq.n	8009d84 <_free_r+0x8c>
 8009d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d04:	1f0c      	subs	r4, r1, #4
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	bfb8      	it	lt
 8009d0a:	18e4      	addlt	r4, r4, r3
 8009d0c:	f000 f8e8 	bl	8009ee0 <__malloc_lock>
 8009d10:	4a1d      	ldr	r2, [pc, #116]	@ (8009d88 <_free_r+0x90>)
 8009d12:	6813      	ldr	r3, [r2, #0]
 8009d14:	b933      	cbnz	r3, 8009d24 <_free_r+0x2c>
 8009d16:	6063      	str	r3, [r4, #4]
 8009d18:	6014      	str	r4, [r2, #0]
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d20:	f000 b8e4 	b.w	8009eec <__malloc_unlock>
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	d908      	bls.n	8009d3a <_free_r+0x42>
 8009d28:	6820      	ldr	r0, [r4, #0]
 8009d2a:	1821      	adds	r1, r4, r0
 8009d2c:	428b      	cmp	r3, r1
 8009d2e:	bf01      	itttt	eq
 8009d30:	6819      	ldreq	r1, [r3, #0]
 8009d32:	685b      	ldreq	r3, [r3, #4]
 8009d34:	1809      	addeq	r1, r1, r0
 8009d36:	6021      	streq	r1, [r4, #0]
 8009d38:	e7ed      	b.n	8009d16 <_free_r+0x1e>
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	b10b      	cbz	r3, 8009d44 <_free_r+0x4c>
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	d9fa      	bls.n	8009d3a <_free_r+0x42>
 8009d44:	6811      	ldr	r1, [r2, #0]
 8009d46:	1850      	adds	r0, r2, r1
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d10b      	bne.n	8009d64 <_free_r+0x6c>
 8009d4c:	6820      	ldr	r0, [r4, #0]
 8009d4e:	4401      	add	r1, r0
 8009d50:	1850      	adds	r0, r2, r1
 8009d52:	4283      	cmp	r3, r0
 8009d54:	6011      	str	r1, [r2, #0]
 8009d56:	d1e0      	bne.n	8009d1a <_free_r+0x22>
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	6053      	str	r3, [r2, #4]
 8009d5e:	4408      	add	r0, r1
 8009d60:	6010      	str	r0, [r2, #0]
 8009d62:	e7da      	b.n	8009d1a <_free_r+0x22>
 8009d64:	d902      	bls.n	8009d6c <_free_r+0x74>
 8009d66:	230c      	movs	r3, #12
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	e7d6      	b.n	8009d1a <_free_r+0x22>
 8009d6c:	6820      	ldr	r0, [r4, #0]
 8009d6e:	1821      	adds	r1, r4, r0
 8009d70:	428b      	cmp	r3, r1
 8009d72:	bf04      	itt	eq
 8009d74:	6819      	ldreq	r1, [r3, #0]
 8009d76:	685b      	ldreq	r3, [r3, #4]
 8009d78:	6063      	str	r3, [r4, #4]
 8009d7a:	bf04      	itt	eq
 8009d7c:	1809      	addeq	r1, r1, r0
 8009d7e:	6021      	streq	r1, [r4, #0]
 8009d80:	6054      	str	r4, [r2, #4]
 8009d82:	e7ca      	b.n	8009d1a <_free_r+0x22>
 8009d84:	bd38      	pop	{r3, r4, r5, pc}
 8009d86:	bf00      	nop
 8009d88:	20001384 	.word	0x20001384

08009d8c <malloc>:
 8009d8c:	4b02      	ldr	r3, [pc, #8]	@ (8009d98 <malloc+0xc>)
 8009d8e:	4601      	mov	r1, r0
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	f000 b825 	b.w	8009de0 <_malloc_r>
 8009d96:	bf00      	nop
 8009d98:	20000040 	.word	0x20000040

08009d9c <sbrk_aligned>:
 8009d9c:	b570      	push	{r4, r5, r6, lr}
 8009d9e:	4e0f      	ldr	r6, [pc, #60]	@ (8009ddc <sbrk_aligned+0x40>)
 8009da0:	460c      	mov	r4, r1
 8009da2:	6831      	ldr	r1, [r6, #0]
 8009da4:	4605      	mov	r5, r0
 8009da6:	b911      	cbnz	r1, 8009dae <sbrk_aligned+0x12>
 8009da8:	f000 fe2c 	bl	800aa04 <_sbrk_r>
 8009dac:	6030      	str	r0, [r6, #0]
 8009dae:	4621      	mov	r1, r4
 8009db0:	4628      	mov	r0, r5
 8009db2:	f000 fe27 	bl	800aa04 <_sbrk_r>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	d103      	bne.n	8009dc2 <sbrk_aligned+0x26>
 8009dba:	f04f 34ff 	mov.w	r4, #4294967295
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	1cc4      	adds	r4, r0, #3
 8009dc4:	f024 0403 	bic.w	r4, r4, #3
 8009dc8:	42a0      	cmp	r0, r4
 8009dca:	d0f8      	beq.n	8009dbe <sbrk_aligned+0x22>
 8009dcc:	1a21      	subs	r1, r4, r0
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f000 fe18 	bl	800aa04 <_sbrk_r>
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d1f2      	bne.n	8009dbe <sbrk_aligned+0x22>
 8009dd8:	e7ef      	b.n	8009dba <sbrk_aligned+0x1e>
 8009dda:	bf00      	nop
 8009ddc:	20001380 	.word	0x20001380

08009de0 <_malloc_r>:
 8009de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de4:	1ccd      	adds	r5, r1, #3
 8009de6:	f025 0503 	bic.w	r5, r5, #3
 8009dea:	3508      	adds	r5, #8
 8009dec:	2d0c      	cmp	r5, #12
 8009dee:	bf38      	it	cc
 8009df0:	250c      	movcc	r5, #12
 8009df2:	2d00      	cmp	r5, #0
 8009df4:	4606      	mov	r6, r0
 8009df6:	db01      	blt.n	8009dfc <_malloc_r+0x1c>
 8009df8:	42a9      	cmp	r1, r5
 8009dfa:	d904      	bls.n	8009e06 <_malloc_r+0x26>
 8009dfc:	230c      	movs	r3, #12
 8009dfe:	6033      	str	r3, [r6, #0]
 8009e00:	2000      	movs	r0, #0
 8009e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009edc <_malloc_r+0xfc>
 8009e0a:	f000 f869 	bl	8009ee0 <__malloc_lock>
 8009e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009e12:	461c      	mov	r4, r3
 8009e14:	bb44      	cbnz	r4, 8009e68 <_malloc_r+0x88>
 8009e16:	4629      	mov	r1, r5
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7ff ffbf 	bl	8009d9c <sbrk_aligned>
 8009e1e:	1c43      	adds	r3, r0, #1
 8009e20:	4604      	mov	r4, r0
 8009e22:	d158      	bne.n	8009ed6 <_malloc_r+0xf6>
 8009e24:	f8d8 4000 	ldr.w	r4, [r8]
 8009e28:	4627      	mov	r7, r4
 8009e2a:	2f00      	cmp	r7, #0
 8009e2c:	d143      	bne.n	8009eb6 <_malloc_r+0xd6>
 8009e2e:	2c00      	cmp	r4, #0
 8009e30:	d04b      	beq.n	8009eca <_malloc_r+0xea>
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	4639      	mov	r1, r7
 8009e36:	4630      	mov	r0, r6
 8009e38:	eb04 0903 	add.w	r9, r4, r3
 8009e3c:	f000 fde2 	bl	800aa04 <_sbrk_r>
 8009e40:	4581      	cmp	r9, r0
 8009e42:	d142      	bne.n	8009eca <_malloc_r+0xea>
 8009e44:	6821      	ldr	r1, [r4, #0]
 8009e46:	1a6d      	subs	r5, r5, r1
 8009e48:	4629      	mov	r1, r5
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f7ff ffa6 	bl	8009d9c <sbrk_aligned>
 8009e50:	3001      	adds	r0, #1
 8009e52:	d03a      	beq.n	8009eca <_malloc_r+0xea>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	442b      	add	r3, r5
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	bb62      	cbnz	r2, 8009ebc <_malloc_r+0xdc>
 8009e62:	f8c8 7000 	str.w	r7, [r8]
 8009e66:	e00f      	b.n	8009e88 <_malloc_r+0xa8>
 8009e68:	6822      	ldr	r2, [r4, #0]
 8009e6a:	1b52      	subs	r2, r2, r5
 8009e6c:	d420      	bmi.n	8009eb0 <_malloc_r+0xd0>
 8009e6e:	2a0b      	cmp	r2, #11
 8009e70:	d917      	bls.n	8009ea2 <_malloc_r+0xc2>
 8009e72:	1961      	adds	r1, r4, r5
 8009e74:	42a3      	cmp	r3, r4
 8009e76:	6025      	str	r5, [r4, #0]
 8009e78:	bf18      	it	ne
 8009e7a:	6059      	strne	r1, [r3, #4]
 8009e7c:	6863      	ldr	r3, [r4, #4]
 8009e7e:	bf08      	it	eq
 8009e80:	f8c8 1000 	streq.w	r1, [r8]
 8009e84:	5162      	str	r2, [r4, r5]
 8009e86:	604b      	str	r3, [r1, #4]
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f82f 	bl	8009eec <__malloc_unlock>
 8009e8e:	f104 000b 	add.w	r0, r4, #11
 8009e92:	1d23      	adds	r3, r4, #4
 8009e94:	f020 0007 	bic.w	r0, r0, #7
 8009e98:	1ac2      	subs	r2, r0, r3
 8009e9a:	bf1c      	itt	ne
 8009e9c:	1a1b      	subne	r3, r3, r0
 8009e9e:	50a3      	strne	r3, [r4, r2]
 8009ea0:	e7af      	b.n	8009e02 <_malloc_r+0x22>
 8009ea2:	6862      	ldr	r2, [r4, #4]
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	bf0c      	ite	eq
 8009ea8:	f8c8 2000 	streq.w	r2, [r8]
 8009eac:	605a      	strne	r2, [r3, #4]
 8009eae:	e7eb      	b.n	8009e88 <_malloc_r+0xa8>
 8009eb0:	4623      	mov	r3, r4
 8009eb2:	6864      	ldr	r4, [r4, #4]
 8009eb4:	e7ae      	b.n	8009e14 <_malloc_r+0x34>
 8009eb6:	463c      	mov	r4, r7
 8009eb8:	687f      	ldr	r7, [r7, #4]
 8009eba:	e7b6      	b.n	8009e2a <_malloc_r+0x4a>
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d1fb      	bne.n	8009ebc <_malloc_r+0xdc>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	6053      	str	r3, [r2, #4]
 8009ec8:	e7de      	b.n	8009e88 <_malloc_r+0xa8>
 8009eca:	230c      	movs	r3, #12
 8009ecc:	6033      	str	r3, [r6, #0]
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f000 f80c 	bl	8009eec <__malloc_unlock>
 8009ed4:	e794      	b.n	8009e00 <_malloc_r+0x20>
 8009ed6:	6005      	str	r5, [r0, #0]
 8009ed8:	e7d6      	b.n	8009e88 <_malloc_r+0xa8>
 8009eda:	bf00      	nop
 8009edc:	20001384 	.word	0x20001384

08009ee0 <__malloc_lock>:
 8009ee0:	4801      	ldr	r0, [pc, #4]	@ (8009ee8 <__malloc_lock+0x8>)
 8009ee2:	f7ff b8aa 	b.w	800903a <__retarget_lock_acquire_recursive>
 8009ee6:	bf00      	nop
 8009ee8:	2000137c 	.word	0x2000137c

08009eec <__malloc_unlock>:
 8009eec:	4801      	ldr	r0, [pc, #4]	@ (8009ef4 <__malloc_unlock+0x8>)
 8009eee:	f7ff b8a5 	b.w	800903c <__retarget_lock_release_recursive>
 8009ef2:	bf00      	nop
 8009ef4:	2000137c 	.word	0x2000137c

08009ef8 <_Balloc>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	69c6      	ldr	r6, [r0, #28]
 8009efc:	4604      	mov	r4, r0
 8009efe:	460d      	mov	r5, r1
 8009f00:	b976      	cbnz	r6, 8009f20 <_Balloc+0x28>
 8009f02:	2010      	movs	r0, #16
 8009f04:	f7ff ff42 	bl	8009d8c <malloc>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	61e0      	str	r0, [r4, #28]
 8009f0c:	b920      	cbnz	r0, 8009f18 <_Balloc+0x20>
 8009f0e:	4b18      	ldr	r3, [pc, #96]	@ (8009f70 <_Balloc+0x78>)
 8009f10:	4818      	ldr	r0, [pc, #96]	@ (8009f74 <_Balloc+0x7c>)
 8009f12:	216b      	movs	r1, #107	@ 0x6b
 8009f14:	f000 fd86 	bl	800aa24 <__assert_func>
 8009f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f1c:	6006      	str	r6, [r0, #0]
 8009f1e:	60c6      	str	r6, [r0, #12]
 8009f20:	69e6      	ldr	r6, [r4, #28]
 8009f22:	68f3      	ldr	r3, [r6, #12]
 8009f24:	b183      	cbz	r3, 8009f48 <_Balloc+0x50>
 8009f26:	69e3      	ldr	r3, [r4, #28]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f2e:	b9b8      	cbnz	r0, 8009f60 <_Balloc+0x68>
 8009f30:	2101      	movs	r1, #1
 8009f32:	fa01 f605 	lsl.w	r6, r1, r5
 8009f36:	1d72      	adds	r2, r6, #5
 8009f38:	0092      	lsls	r2, r2, #2
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fd90 	bl	800aa60 <_calloc_r>
 8009f40:	b160      	cbz	r0, 8009f5c <_Balloc+0x64>
 8009f42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f46:	e00e      	b.n	8009f66 <_Balloc+0x6e>
 8009f48:	2221      	movs	r2, #33	@ 0x21
 8009f4a:	2104      	movs	r1, #4
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 fd87 	bl	800aa60 <_calloc_r>
 8009f52:	69e3      	ldr	r3, [r4, #28]
 8009f54:	60f0      	str	r0, [r6, #12]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1e4      	bne.n	8009f26 <_Balloc+0x2e>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
 8009f60:	6802      	ldr	r2, [r0, #0]
 8009f62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f66:	2300      	movs	r3, #0
 8009f68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f6c:	e7f7      	b.n	8009f5e <_Balloc+0x66>
 8009f6e:	bf00      	nop
 8009f70:	0800d275 	.word	0x0800d275
 8009f74:	0800d2f5 	.word	0x0800d2f5

08009f78 <_Bfree>:
 8009f78:	b570      	push	{r4, r5, r6, lr}
 8009f7a:	69c6      	ldr	r6, [r0, #28]
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	b976      	cbnz	r6, 8009fa0 <_Bfree+0x28>
 8009f82:	2010      	movs	r0, #16
 8009f84:	f7ff ff02 	bl	8009d8c <malloc>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	61e8      	str	r0, [r5, #28]
 8009f8c:	b920      	cbnz	r0, 8009f98 <_Bfree+0x20>
 8009f8e:	4b09      	ldr	r3, [pc, #36]	@ (8009fb4 <_Bfree+0x3c>)
 8009f90:	4809      	ldr	r0, [pc, #36]	@ (8009fb8 <_Bfree+0x40>)
 8009f92:	218f      	movs	r1, #143	@ 0x8f
 8009f94:	f000 fd46 	bl	800aa24 <__assert_func>
 8009f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f9c:	6006      	str	r6, [r0, #0]
 8009f9e:	60c6      	str	r6, [r0, #12]
 8009fa0:	b13c      	cbz	r4, 8009fb2 <_Bfree+0x3a>
 8009fa2:	69eb      	ldr	r3, [r5, #28]
 8009fa4:	6862      	ldr	r2, [r4, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fac:	6021      	str	r1, [r4, #0]
 8009fae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	0800d275 	.word	0x0800d275
 8009fb8:	0800d2f5 	.word	0x0800d2f5

08009fbc <__multadd>:
 8009fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc0:	690d      	ldr	r5, [r1, #16]
 8009fc2:	4607      	mov	r7, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	461e      	mov	r6, r3
 8009fc8:	f101 0c14 	add.w	ip, r1, #20
 8009fcc:	2000      	movs	r0, #0
 8009fce:	f8dc 3000 	ldr.w	r3, [ip]
 8009fd2:	b299      	uxth	r1, r3
 8009fd4:	fb02 6101 	mla	r1, r2, r1, r6
 8009fd8:	0c1e      	lsrs	r6, r3, #16
 8009fda:	0c0b      	lsrs	r3, r1, #16
 8009fdc:	fb02 3306 	mla	r3, r2, r6, r3
 8009fe0:	b289      	uxth	r1, r1
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fe8:	4285      	cmp	r5, r0
 8009fea:	f84c 1b04 	str.w	r1, [ip], #4
 8009fee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ff2:	dcec      	bgt.n	8009fce <__multadd+0x12>
 8009ff4:	b30e      	cbz	r6, 800a03a <__multadd+0x7e>
 8009ff6:	68a3      	ldr	r3, [r4, #8]
 8009ff8:	42ab      	cmp	r3, r5
 8009ffa:	dc19      	bgt.n	800a030 <__multadd+0x74>
 8009ffc:	6861      	ldr	r1, [r4, #4]
 8009ffe:	4638      	mov	r0, r7
 800a000:	3101      	adds	r1, #1
 800a002:	f7ff ff79 	bl	8009ef8 <_Balloc>
 800a006:	4680      	mov	r8, r0
 800a008:	b928      	cbnz	r0, 800a016 <__multadd+0x5a>
 800a00a:	4602      	mov	r2, r0
 800a00c:	4b0c      	ldr	r3, [pc, #48]	@ (800a040 <__multadd+0x84>)
 800a00e:	480d      	ldr	r0, [pc, #52]	@ (800a044 <__multadd+0x88>)
 800a010:	21ba      	movs	r1, #186	@ 0xba
 800a012:	f000 fd07 	bl	800aa24 <__assert_func>
 800a016:	6922      	ldr	r2, [r4, #16]
 800a018:	3202      	adds	r2, #2
 800a01a:	f104 010c 	add.w	r1, r4, #12
 800a01e:	0092      	lsls	r2, r2, #2
 800a020:	300c      	adds	r0, #12
 800a022:	f7ff f80c 	bl	800903e <memcpy>
 800a026:	4621      	mov	r1, r4
 800a028:	4638      	mov	r0, r7
 800a02a:	f7ff ffa5 	bl	8009f78 <_Bfree>
 800a02e:	4644      	mov	r4, r8
 800a030:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a034:	3501      	adds	r5, #1
 800a036:	615e      	str	r6, [r3, #20]
 800a038:	6125      	str	r5, [r4, #16]
 800a03a:	4620      	mov	r0, r4
 800a03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a040:	0800d2e4 	.word	0x0800d2e4
 800a044:	0800d2f5 	.word	0x0800d2f5

0800a048 <__hi0bits>:
 800a048:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a04c:	4603      	mov	r3, r0
 800a04e:	bf36      	itet	cc
 800a050:	0403      	lslcc	r3, r0, #16
 800a052:	2000      	movcs	r0, #0
 800a054:	2010      	movcc	r0, #16
 800a056:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a05a:	bf3c      	itt	cc
 800a05c:	021b      	lslcc	r3, r3, #8
 800a05e:	3008      	addcc	r0, #8
 800a060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a064:	bf3c      	itt	cc
 800a066:	011b      	lslcc	r3, r3, #4
 800a068:	3004      	addcc	r0, #4
 800a06a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a06e:	bf3c      	itt	cc
 800a070:	009b      	lslcc	r3, r3, #2
 800a072:	3002      	addcc	r0, #2
 800a074:	2b00      	cmp	r3, #0
 800a076:	db05      	blt.n	800a084 <__hi0bits+0x3c>
 800a078:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a07c:	f100 0001 	add.w	r0, r0, #1
 800a080:	bf08      	it	eq
 800a082:	2020      	moveq	r0, #32
 800a084:	4770      	bx	lr

0800a086 <__lo0bits>:
 800a086:	6803      	ldr	r3, [r0, #0]
 800a088:	4602      	mov	r2, r0
 800a08a:	f013 0007 	ands.w	r0, r3, #7
 800a08e:	d00b      	beq.n	800a0a8 <__lo0bits+0x22>
 800a090:	07d9      	lsls	r1, r3, #31
 800a092:	d421      	bmi.n	800a0d8 <__lo0bits+0x52>
 800a094:	0798      	lsls	r0, r3, #30
 800a096:	bf49      	itett	mi
 800a098:	085b      	lsrmi	r3, r3, #1
 800a09a:	089b      	lsrpl	r3, r3, #2
 800a09c:	2001      	movmi	r0, #1
 800a09e:	6013      	strmi	r3, [r2, #0]
 800a0a0:	bf5c      	itt	pl
 800a0a2:	6013      	strpl	r3, [r2, #0]
 800a0a4:	2002      	movpl	r0, #2
 800a0a6:	4770      	bx	lr
 800a0a8:	b299      	uxth	r1, r3
 800a0aa:	b909      	cbnz	r1, 800a0b0 <__lo0bits+0x2a>
 800a0ac:	0c1b      	lsrs	r3, r3, #16
 800a0ae:	2010      	movs	r0, #16
 800a0b0:	b2d9      	uxtb	r1, r3
 800a0b2:	b909      	cbnz	r1, 800a0b8 <__lo0bits+0x32>
 800a0b4:	3008      	adds	r0, #8
 800a0b6:	0a1b      	lsrs	r3, r3, #8
 800a0b8:	0719      	lsls	r1, r3, #28
 800a0ba:	bf04      	itt	eq
 800a0bc:	091b      	lsreq	r3, r3, #4
 800a0be:	3004      	addeq	r0, #4
 800a0c0:	0799      	lsls	r1, r3, #30
 800a0c2:	bf04      	itt	eq
 800a0c4:	089b      	lsreq	r3, r3, #2
 800a0c6:	3002      	addeq	r0, #2
 800a0c8:	07d9      	lsls	r1, r3, #31
 800a0ca:	d403      	bmi.n	800a0d4 <__lo0bits+0x4e>
 800a0cc:	085b      	lsrs	r3, r3, #1
 800a0ce:	f100 0001 	add.w	r0, r0, #1
 800a0d2:	d003      	beq.n	800a0dc <__lo0bits+0x56>
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	4770      	bx	lr
 800a0d8:	2000      	movs	r0, #0
 800a0da:	4770      	bx	lr
 800a0dc:	2020      	movs	r0, #32
 800a0de:	4770      	bx	lr

0800a0e0 <__i2b>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	f7ff ff07 	bl	8009ef8 <_Balloc>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	b928      	cbnz	r0, 800a0fa <__i2b+0x1a>
 800a0ee:	4b05      	ldr	r3, [pc, #20]	@ (800a104 <__i2b+0x24>)
 800a0f0:	4805      	ldr	r0, [pc, #20]	@ (800a108 <__i2b+0x28>)
 800a0f2:	f240 1145 	movw	r1, #325	@ 0x145
 800a0f6:	f000 fc95 	bl	800aa24 <__assert_func>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	6144      	str	r4, [r0, #20]
 800a0fe:	6103      	str	r3, [r0, #16]
 800a100:	bd10      	pop	{r4, pc}
 800a102:	bf00      	nop
 800a104:	0800d2e4 	.word	0x0800d2e4
 800a108:	0800d2f5 	.word	0x0800d2f5

0800a10c <__multiply>:
 800a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	4614      	mov	r4, r2
 800a112:	690a      	ldr	r2, [r1, #16]
 800a114:	6923      	ldr	r3, [r4, #16]
 800a116:	429a      	cmp	r2, r3
 800a118:	bfa8      	it	ge
 800a11a:	4623      	movge	r3, r4
 800a11c:	460f      	mov	r7, r1
 800a11e:	bfa4      	itt	ge
 800a120:	460c      	movge	r4, r1
 800a122:	461f      	movge	r7, r3
 800a124:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a128:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a12c:	68a3      	ldr	r3, [r4, #8]
 800a12e:	6861      	ldr	r1, [r4, #4]
 800a130:	eb0a 0609 	add.w	r6, sl, r9
 800a134:	42b3      	cmp	r3, r6
 800a136:	b085      	sub	sp, #20
 800a138:	bfb8      	it	lt
 800a13a:	3101      	addlt	r1, #1
 800a13c:	f7ff fedc 	bl	8009ef8 <_Balloc>
 800a140:	b930      	cbnz	r0, 800a150 <__multiply+0x44>
 800a142:	4602      	mov	r2, r0
 800a144:	4b44      	ldr	r3, [pc, #272]	@ (800a258 <__multiply+0x14c>)
 800a146:	4845      	ldr	r0, [pc, #276]	@ (800a25c <__multiply+0x150>)
 800a148:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a14c:	f000 fc6a 	bl	800aa24 <__assert_func>
 800a150:	f100 0514 	add.w	r5, r0, #20
 800a154:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a158:	462b      	mov	r3, r5
 800a15a:	2200      	movs	r2, #0
 800a15c:	4543      	cmp	r3, r8
 800a15e:	d321      	bcc.n	800a1a4 <__multiply+0x98>
 800a160:	f107 0114 	add.w	r1, r7, #20
 800a164:	f104 0214 	add.w	r2, r4, #20
 800a168:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a16c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a170:	9302      	str	r3, [sp, #8]
 800a172:	1b13      	subs	r3, r2, r4
 800a174:	3b15      	subs	r3, #21
 800a176:	f023 0303 	bic.w	r3, r3, #3
 800a17a:	3304      	adds	r3, #4
 800a17c:	f104 0715 	add.w	r7, r4, #21
 800a180:	42ba      	cmp	r2, r7
 800a182:	bf38      	it	cc
 800a184:	2304      	movcc	r3, #4
 800a186:	9301      	str	r3, [sp, #4]
 800a188:	9b02      	ldr	r3, [sp, #8]
 800a18a:	9103      	str	r1, [sp, #12]
 800a18c:	428b      	cmp	r3, r1
 800a18e:	d80c      	bhi.n	800a1aa <__multiply+0x9e>
 800a190:	2e00      	cmp	r6, #0
 800a192:	dd03      	ble.n	800a19c <__multiply+0x90>
 800a194:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d05b      	beq.n	800a254 <__multiply+0x148>
 800a19c:	6106      	str	r6, [r0, #16]
 800a19e:	b005      	add	sp, #20
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	f843 2b04 	str.w	r2, [r3], #4
 800a1a8:	e7d8      	b.n	800a15c <__multiply+0x50>
 800a1aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1ae:	f1ba 0f00 	cmp.w	sl, #0
 800a1b2:	d024      	beq.n	800a1fe <__multiply+0xf2>
 800a1b4:	f104 0e14 	add.w	lr, r4, #20
 800a1b8:	46a9      	mov	r9, r5
 800a1ba:	f04f 0c00 	mov.w	ip, #0
 800a1be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1c2:	f8d9 3000 	ldr.w	r3, [r9]
 800a1c6:	fa1f fb87 	uxth.w	fp, r7
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a1d4:	f8d9 7000 	ldr.w	r7, [r9]
 800a1d8:	4463      	add	r3, ip
 800a1da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1de:	fb0a c70b 	mla	r7, sl, fp, ip
 800a1e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1ec:	4572      	cmp	r2, lr
 800a1ee:	f849 3b04 	str.w	r3, [r9], #4
 800a1f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1f6:	d8e2      	bhi.n	800a1be <__multiply+0xb2>
 800a1f8:	9b01      	ldr	r3, [sp, #4]
 800a1fa:	f845 c003 	str.w	ip, [r5, r3]
 800a1fe:	9b03      	ldr	r3, [sp, #12]
 800a200:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a204:	3104      	adds	r1, #4
 800a206:	f1b9 0f00 	cmp.w	r9, #0
 800a20a:	d021      	beq.n	800a250 <__multiply+0x144>
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	f104 0c14 	add.w	ip, r4, #20
 800a212:	46ae      	mov	lr, r5
 800a214:	f04f 0a00 	mov.w	sl, #0
 800a218:	f8bc b000 	ldrh.w	fp, [ip]
 800a21c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a220:	fb09 770b 	mla	r7, r9, fp, r7
 800a224:	4457      	add	r7, sl
 800a226:	b29b      	uxth	r3, r3
 800a228:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a22c:	f84e 3b04 	str.w	r3, [lr], #4
 800a230:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a234:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a238:	f8be 3000 	ldrh.w	r3, [lr]
 800a23c:	fb09 330a 	mla	r3, r9, sl, r3
 800a240:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a244:	4562      	cmp	r2, ip
 800a246:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a24a:	d8e5      	bhi.n	800a218 <__multiply+0x10c>
 800a24c:	9f01      	ldr	r7, [sp, #4]
 800a24e:	51eb      	str	r3, [r5, r7]
 800a250:	3504      	adds	r5, #4
 800a252:	e799      	b.n	800a188 <__multiply+0x7c>
 800a254:	3e01      	subs	r6, #1
 800a256:	e79b      	b.n	800a190 <__multiply+0x84>
 800a258:	0800d2e4 	.word	0x0800d2e4
 800a25c:	0800d2f5 	.word	0x0800d2f5

0800a260 <__pow5mult>:
 800a260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a264:	4615      	mov	r5, r2
 800a266:	f012 0203 	ands.w	r2, r2, #3
 800a26a:	4607      	mov	r7, r0
 800a26c:	460e      	mov	r6, r1
 800a26e:	d007      	beq.n	800a280 <__pow5mult+0x20>
 800a270:	4c25      	ldr	r4, [pc, #148]	@ (800a308 <__pow5mult+0xa8>)
 800a272:	3a01      	subs	r2, #1
 800a274:	2300      	movs	r3, #0
 800a276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a27a:	f7ff fe9f 	bl	8009fbc <__multadd>
 800a27e:	4606      	mov	r6, r0
 800a280:	10ad      	asrs	r5, r5, #2
 800a282:	d03d      	beq.n	800a300 <__pow5mult+0xa0>
 800a284:	69fc      	ldr	r4, [r7, #28]
 800a286:	b97c      	cbnz	r4, 800a2a8 <__pow5mult+0x48>
 800a288:	2010      	movs	r0, #16
 800a28a:	f7ff fd7f 	bl	8009d8c <malloc>
 800a28e:	4602      	mov	r2, r0
 800a290:	61f8      	str	r0, [r7, #28]
 800a292:	b928      	cbnz	r0, 800a2a0 <__pow5mult+0x40>
 800a294:	4b1d      	ldr	r3, [pc, #116]	@ (800a30c <__pow5mult+0xac>)
 800a296:	481e      	ldr	r0, [pc, #120]	@ (800a310 <__pow5mult+0xb0>)
 800a298:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a29c:	f000 fbc2 	bl	800aa24 <__assert_func>
 800a2a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2a4:	6004      	str	r4, [r0, #0]
 800a2a6:	60c4      	str	r4, [r0, #12]
 800a2a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2b0:	b94c      	cbnz	r4, 800a2c6 <__pow5mult+0x66>
 800a2b2:	f240 2171 	movw	r1, #625	@ 0x271
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	f7ff ff12 	bl	800a0e0 <__i2b>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	6003      	str	r3, [r0, #0]
 800a2c6:	f04f 0900 	mov.w	r9, #0
 800a2ca:	07eb      	lsls	r3, r5, #31
 800a2cc:	d50a      	bpl.n	800a2e4 <__pow5mult+0x84>
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	f7ff ff1a 	bl	800a10c <__multiply>
 800a2d8:	4631      	mov	r1, r6
 800a2da:	4680      	mov	r8, r0
 800a2dc:	4638      	mov	r0, r7
 800a2de:	f7ff fe4b 	bl	8009f78 <_Bfree>
 800a2e2:	4646      	mov	r6, r8
 800a2e4:	106d      	asrs	r5, r5, #1
 800a2e6:	d00b      	beq.n	800a300 <__pow5mult+0xa0>
 800a2e8:	6820      	ldr	r0, [r4, #0]
 800a2ea:	b938      	cbnz	r0, 800a2fc <__pow5mult+0x9c>
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4638      	mov	r0, r7
 800a2f2:	f7ff ff0b 	bl	800a10c <__multiply>
 800a2f6:	6020      	str	r0, [r4, #0]
 800a2f8:	f8c0 9000 	str.w	r9, [r0]
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	e7e4      	b.n	800a2ca <__pow5mult+0x6a>
 800a300:	4630      	mov	r0, r6
 800a302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a306:	bf00      	nop
 800a308:	0800d350 	.word	0x0800d350
 800a30c:	0800d275 	.word	0x0800d275
 800a310:	0800d2f5 	.word	0x0800d2f5

0800a314 <__lshift>:
 800a314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a318:	460c      	mov	r4, r1
 800a31a:	6849      	ldr	r1, [r1, #4]
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a322:	68a3      	ldr	r3, [r4, #8]
 800a324:	4607      	mov	r7, r0
 800a326:	4691      	mov	r9, r2
 800a328:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a32c:	f108 0601 	add.w	r6, r8, #1
 800a330:	42b3      	cmp	r3, r6
 800a332:	db0b      	blt.n	800a34c <__lshift+0x38>
 800a334:	4638      	mov	r0, r7
 800a336:	f7ff fddf 	bl	8009ef8 <_Balloc>
 800a33a:	4605      	mov	r5, r0
 800a33c:	b948      	cbnz	r0, 800a352 <__lshift+0x3e>
 800a33e:	4602      	mov	r2, r0
 800a340:	4b28      	ldr	r3, [pc, #160]	@ (800a3e4 <__lshift+0xd0>)
 800a342:	4829      	ldr	r0, [pc, #164]	@ (800a3e8 <__lshift+0xd4>)
 800a344:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a348:	f000 fb6c 	bl	800aa24 <__assert_func>
 800a34c:	3101      	adds	r1, #1
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	e7ee      	b.n	800a330 <__lshift+0x1c>
 800a352:	2300      	movs	r3, #0
 800a354:	f100 0114 	add.w	r1, r0, #20
 800a358:	f100 0210 	add.w	r2, r0, #16
 800a35c:	4618      	mov	r0, r3
 800a35e:	4553      	cmp	r3, sl
 800a360:	db33      	blt.n	800a3ca <__lshift+0xb6>
 800a362:	6920      	ldr	r0, [r4, #16]
 800a364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a368:	f104 0314 	add.w	r3, r4, #20
 800a36c:	f019 091f 	ands.w	r9, r9, #31
 800a370:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a374:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a378:	d02b      	beq.n	800a3d2 <__lshift+0xbe>
 800a37a:	f1c9 0e20 	rsb	lr, r9, #32
 800a37e:	468a      	mov	sl, r1
 800a380:	2200      	movs	r2, #0
 800a382:	6818      	ldr	r0, [r3, #0]
 800a384:	fa00 f009 	lsl.w	r0, r0, r9
 800a388:	4310      	orrs	r0, r2
 800a38a:	f84a 0b04 	str.w	r0, [sl], #4
 800a38e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a392:	459c      	cmp	ip, r3
 800a394:	fa22 f20e 	lsr.w	r2, r2, lr
 800a398:	d8f3      	bhi.n	800a382 <__lshift+0x6e>
 800a39a:	ebac 0304 	sub.w	r3, ip, r4
 800a39e:	3b15      	subs	r3, #21
 800a3a0:	f023 0303 	bic.w	r3, r3, #3
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	f104 0015 	add.w	r0, r4, #21
 800a3aa:	4584      	cmp	ip, r0
 800a3ac:	bf38      	it	cc
 800a3ae:	2304      	movcc	r3, #4
 800a3b0:	50ca      	str	r2, [r1, r3]
 800a3b2:	b10a      	cbz	r2, 800a3b8 <__lshift+0xa4>
 800a3b4:	f108 0602 	add.w	r6, r8, #2
 800a3b8:	3e01      	subs	r6, #1
 800a3ba:	4638      	mov	r0, r7
 800a3bc:	612e      	str	r6, [r5, #16]
 800a3be:	4621      	mov	r1, r4
 800a3c0:	f7ff fdda 	bl	8009f78 <_Bfree>
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	e7c5      	b.n	800a35e <__lshift+0x4a>
 800a3d2:	3904      	subs	r1, #4
 800a3d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3dc:	459c      	cmp	ip, r3
 800a3de:	d8f9      	bhi.n	800a3d4 <__lshift+0xc0>
 800a3e0:	e7ea      	b.n	800a3b8 <__lshift+0xa4>
 800a3e2:	bf00      	nop
 800a3e4:	0800d2e4 	.word	0x0800d2e4
 800a3e8:	0800d2f5 	.word	0x0800d2f5

0800a3ec <__mcmp>:
 800a3ec:	690a      	ldr	r2, [r1, #16]
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	6900      	ldr	r0, [r0, #16]
 800a3f2:	1a80      	subs	r0, r0, r2
 800a3f4:	b530      	push	{r4, r5, lr}
 800a3f6:	d10e      	bne.n	800a416 <__mcmp+0x2a>
 800a3f8:	3314      	adds	r3, #20
 800a3fa:	3114      	adds	r1, #20
 800a3fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a400:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a404:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a408:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a40c:	4295      	cmp	r5, r2
 800a40e:	d003      	beq.n	800a418 <__mcmp+0x2c>
 800a410:	d205      	bcs.n	800a41e <__mcmp+0x32>
 800a412:	f04f 30ff 	mov.w	r0, #4294967295
 800a416:	bd30      	pop	{r4, r5, pc}
 800a418:	42a3      	cmp	r3, r4
 800a41a:	d3f3      	bcc.n	800a404 <__mcmp+0x18>
 800a41c:	e7fb      	b.n	800a416 <__mcmp+0x2a>
 800a41e:	2001      	movs	r0, #1
 800a420:	e7f9      	b.n	800a416 <__mcmp+0x2a>
	...

0800a424 <__mdiff>:
 800a424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	4689      	mov	r9, r1
 800a42a:	4606      	mov	r6, r0
 800a42c:	4611      	mov	r1, r2
 800a42e:	4648      	mov	r0, r9
 800a430:	4614      	mov	r4, r2
 800a432:	f7ff ffdb 	bl	800a3ec <__mcmp>
 800a436:	1e05      	subs	r5, r0, #0
 800a438:	d112      	bne.n	800a460 <__mdiff+0x3c>
 800a43a:	4629      	mov	r1, r5
 800a43c:	4630      	mov	r0, r6
 800a43e:	f7ff fd5b 	bl	8009ef8 <_Balloc>
 800a442:	4602      	mov	r2, r0
 800a444:	b928      	cbnz	r0, 800a452 <__mdiff+0x2e>
 800a446:	4b3f      	ldr	r3, [pc, #252]	@ (800a544 <__mdiff+0x120>)
 800a448:	f240 2137 	movw	r1, #567	@ 0x237
 800a44c:	483e      	ldr	r0, [pc, #248]	@ (800a548 <__mdiff+0x124>)
 800a44e:	f000 fae9 	bl	800aa24 <__assert_func>
 800a452:	2301      	movs	r3, #1
 800a454:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a458:	4610      	mov	r0, r2
 800a45a:	b003      	add	sp, #12
 800a45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a460:	bfbc      	itt	lt
 800a462:	464b      	movlt	r3, r9
 800a464:	46a1      	movlt	r9, r4
 800a466:	4630      	mov	r0, r6
 800a468:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a46c:	bfba      	itte	lt
 800a46e:	461c      	movlt	r4, r3
 800a470:	2501      	movlt	r5, #1
 800a472:	2500      	movge	r5, #0
 800a474:	f7ff fd40 	bl	8009ef8 <_Balloc>
 800a478:	4602      	mov	r2, r0
 800a47a:	b918      	cbnz	r0, 800a484 <__mdiff+0x60>
 800a47c:	4b31      	ldr	r3, [pc, #196]	@ (800a544 <__mdiff+0x120>)
 800a47e:	f240 2145 	movw	r1, #581	@ 0x245
 800a482:	e7e3      	b.n	800a44c <__mdiff+0x28>
 800a484:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a488:	6926      	ldr	r6, [r4, #16]
 800a48a:	60c5      	str	r5, [r0, #12]
 800a48c:	f109 0310 	add.w	r3, r9, #16
 800a490:	f109 0514 	add.w	r5, r9, #20
 800a494:	f104 0e14 	add.w	lr, r4, #20
 800a498:	f100 0b14 	add.w	fp, r0, #20
 800a49c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	46d9      	mov	r9, fp
 800a4a8:	f04f 0c00 	mov.w	ip, #0
 800a4ac:	9b01      	ldr	r3, [sp, #4]
 800a4ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	fa1f f38a 	uxth.w	r3, sl
 800a4bc:	4619      	mov	r1, r3
 800a4be:	b283      	uxth	r3, r0
 800a4c0:	1acb      	subs	r3, r1, r3
 800a4c2:	0c00      	lsrs	r0, r0, #16
 800a4c4:	4463      	add	r3, ip
 800a4c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4d4:	4576      	cmp	r6, lr
 800a4d6:	f849 3b04 	str.w	r3, [r9], #4
 800a4da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4de:	d8e5      	bhi.n	800a4ac <__mdiff+0x88>
 800a4e0:	1b33      	subs	r3, r6, r4
 800a4e2:	3b15      	subs	r3, #21
 800a4e4:	f023 0303 	bic.w	r3, r3, #3
 800a4e8:	3415      	adds	r4, #21
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	42a6      	cmp	r6, r4
 800a4ee:	bf38      	it	cc
 800a4f0:	2304      	movcc	r3, #4
 800a4f2:	441d      	add	r5, r3
 800a4f4:	445b      	add	r3, fp
 800a4f6:	461e      	mov	r6, r3
 800a4f8:	462c      	mov	r4, r5
 800a4fa:	4544      	cmp	r4, r8
 800a4fc:	d30e      	bcc.n	800a51c <__mdiff+0xf8>
 800a4fe:	f108 0103 	add.w	r1, r8, #3
 800a502:	1b49      	subs	r1, r1, r5
 800a504:	f021 0103 	bic.w	r1, r1, #3
 800a508:	3d03      	subs	r5, #3
 800a50a:	45a8      	cmp	r8, r5
 800a50c:	bf38      	it	cc
 800a50e:	2100      	movcc	r1, #0
 800a510:	440b      	add	r3, r1
 800a512:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a516:	b191      	cbz	r1, 800a53e <__mdiff+0x11a>
 800a518:	6117      	str	r7, [r2, #16]
 800a51a:	e79d      	b.n	800a458 <__mdiff+0x34>
 800a51c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a520:	46e6      	mov	lr, ip
 800a522:	0c08      	lsrs	r0, r1, #16
 800a524:	fa1c fc81 	uxtah	ip, ip, r1
 800a528:	4471      	add	r1, lr
 800a52a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a52e:	b289      	uxth	r1, r1
 800a530:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a534:	f846 1b04 	str.w	r1, [r6], #4
 800a538:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a53c:	e7dd      	b.n	800a4fa <__mdiff+0xd6>
 800a53e:	3f01      	subs	r7, #1
 800a540:	e7e7      	b.n	800a512 <__mdiff+0xee>
 800a542:	bf00      	nop
 800a544:	0800d2e4 	.word	0x0800d2e4
 800a548:	0800d2f5 	.word	0x0800d2f5

0800a54c <__d2b>:
 800a54c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a550:	460f      	mov	r7, r1
 800a552:	2101      	movs	r1, #1
 800a554:	ec59 8b10 	vmov	r8, r9, d0
 800a558:	4616      	mov	r6, r2
 800a55a:	f7ff fccd 	bl	8009ef8 <_Balloc>
 800a55e:	4604      	mov	r4, r0
 800a560:	b930      	cbnz	r0, 800a570 <__d2b+0x24>
 800a562:	4602      	mov	r2, r0
 800a564:	4b23      	ldr	r3, [pc, #140]	@ (800a5f4 <__d2b+0xa8>)
 800a566:	4824      	ldr	r0, [pc, #144]	@ (800a5f8 <__d2b+0xac>)
 800a568:	f240 310f 	movw	r1, #783	@ 0x30f
 800a56c:	f000 fa5a 	bl	800aa24 <__assert_func>
 800a570:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a574:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a578:	b10d      	cbz	r5, 800a57e <__d2b+0x32>
 800a57a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	f1b8 0300 	subs.w	r3, r8, #0
 800a584:	d023      	beq.n	800a5ce <__d2b+0x82>
 800a586:	4668      	mov	r0, sp
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	f7ff fd7c 	bl	800a086 <__lo0bits>
 800a58e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a592:	b1d0      	cbz	r0, 800a5ca <__d2b+0x7e>
 800a594:	f1c0 0320 	rsb	r3, r0, #32
 800a598:	fa02 f303 	lsl.w	r3, r2, r3
 800a59c:	430b      	orrs	r3, r1
 800a59e:	40c2      	lsrs	r2, r0
 800a5a0:	6163      	str	r3, [r4, #20]
 800a5a2:	9201      	str	r2, [sp, #4]
 800a5a4:	9b01      	ldr	r3, [sp, #4]
 800a5a6:	61a3      	str	r3, [r4, #24]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bf0c      	ite	eq
 800a5ac:	2201      	moveq	r2, #1
 800a5ae:	2202      	movne	r2, #2
 800a5b0:	6122      	str	r2, [r4, #16]
 800a5b2:	b1a5      	cbz	r5, 800a5de <__d2b+0x92>
 800a5b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a5b8:	4405      	add	r5, r0
 800a5ba:	603d      	str	r5, [r7, #0]
 800a5bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a5c0:	6030      	str	r0, [r6, #0]
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	b003      	add	sp, #12
 800a5c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5ca:	6161      	str	r1, [r4, #20]
 800a5cc:	e7ea      	b.n	800a5a4 <__d2b+0x58>
 800a5ce:	a801      	add	r0, sp, #4
 800a5d0:	f7ff fd59 	bl	800a086 <__lo0bits>
 800a5d4:	9b01      	ldr	r3, [sp, #4]
 800a5d6:	6163      	str	r3, [r4, #20]
 800a5d8:	3020      	adds	r0, #32
 800a5da:	2201      	movs	r2, #1
 800a5dc:	e7e8      	b.n	800a5b0 <__d2b+0x64>
 800a5de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5e6:	6038      	str	r0, [r7, #0]
 800a5e8:	6918      	ldr	r0, [r3, #16]
 800a5ea:	f7ff fd2d 	bl	800a048 <__hi0bits>
 800a5ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5f2:	e7e5      	b.n	800a5c0 <__d2b+0x74>
 800a5f4:	0800d2e4 	.word	0x0800d2e4
 800a5f8:	0800d2f5 	.word	0x0800d2f5

0800a5fc <__ssputs_r>:
 800a5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a600:	688e      	ldr	r6, [r1, #8]
 800a602:	461f      	mov	r7, r3
 800a604:	42be      	cmp	r6, r7
 800a606:	680b      	ldr	r3, [r1, #0]
 800a608:	4682      	mov	sl, r0
 800a60a:	460c      	mov	r4, r1
 800a60c:	4690      	mov	r8, r2
 800a60e:	d82d      	bhi.n	800a66c <__ssputs_r+0x70>
 800a610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a614:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a618:	d026      	beq.n	800a668 <__ssputs_r+0x6c>
 800a61a:	6965      	ldr	r5, [r4, #20]
 800a61c:	6909      	ldr	r1, [r1, #16]
 800a61e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a622:	eba3 0901 	sub.w	r9, r3, r1
 800a626:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a62a:	1c7b      	adds	r3, r7, #1
 800a62c:	444b      	add	r3, r9
 800a62e:	106d      	asrs	r5, r5, #1
 800a630:	429d      	cmp	r5, r3
 800a632:	bf38      	it	cc
 800a634:	461d      	movcc	r5, r3
 800a636:	0553      	lsls	r3, r2, #21
 800a638:	d527      	bpl.n	800a68a <__ssputs_r+0x8e>
 800a63a:	4629      	mov	r1, r5
 800a63c:	f7ff fbd0 	bl	8009de0 <_malloc_r>
 800a640:	4606      	mov	r6, r0
 800a642:	b360      	cbz	r0, 800a69e <__ssputs_r+0xa2>
 800a644:	6921      	ldr	r1, [r4, #16]
 800a646:	464a      	mov	r2, r9
 800a648:	f7fe fcf9 	bl	800903e <memcpy>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	6126      	str	r6, [r4, #16]
 800a65a:	6165      	str	r5, [r4, #20]
 800a65c:	444e      	add	r6, r9
 800a65e:	eba5 0509 	sub.w	r5, r5, r9
 800a662:	6026      	str	r6, [r4, #0]
 800a664:	60a5      	str	r5, [r4, #8]
 800a666:	463e      	mov	r6, r7
 800a668:	42be      	cmp	r6, r7
 800a66a:	d900      	bls.n	800a66e <__ssputs_r+0x72>
 800a66c:	463e      	mov	r6, r7
 800a66e:	6820      	ldr	r0, [r4, #0]
 800a670:	4632      	mov	r2, r6
 800a672:	4641      	mov	r1, r8
 800a674:	f7fe fc49 	bl	8008f0a <memmove>
 800a678:	68a3      	ldr	r3, [r4, #8]
 800a67a:	1b9b      	subs	r3, r3, r6
 800a67c:	60a3      	str	r3, [r4, #8]
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	4433      	add	r3, r6
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	2000      	movs	r0, #0
 800a686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68a:	462a      	mov	r2, r5
 800a68c:	f000 fa0e 	bl	800aaac <_realloc_r>
 800a690:	4606      	mov	r6, r0
 800a692:	2800      	cmp	r0, #0
 800a694:	d1e0      	bne.n	800a658 <__ssputs_r+0x5c>
 800a696:	6921      	ldr	r1, [r4, #16]
 800a698:	4650      	mov	r0, sl
 800a69a:	f7ff fb2d 	bl	8009cf8 <_free_r>
 800a69e:	230c      	movs	r3, #12
 800a6a0:	f8ca 3000 	str.w	r3, [sl]
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b0:	e7e9      	b.n	800a686 <__ssputs_r+0x8a>
	...

0800a6b4 <_svfiprintf_r>:
 800a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b8:	4698      	mov	r8, r3
 800a6ba:	898b      	ldrh	r3, [r1, #12]
 800a6bc:	061b      	lsls	r3, r3, #24
 800a6be:	b09d      	sub	sp, #116	@ 0x74
 800a6c0:	4607      	mov	r7, r0
 800a6c2:	460d      	mov	r5, r1
 800a6c4:	4614      	mov	r4, r2
 800a6c6:	d510      	bpl.n	800a6ea <_svfiprintf_r+0x36>
 800a6c8:	690b      	ldr	r3, [r1, #16]
 800a6ca:	b973      	cbnz	r3, 800a6ea <_svfiprintf_r+0x36>
 800a6cc:	2140      	movs	r1, #64	@ 0x40
 800a6ce:	f7ff fb87 	bl	8009de0 <_malloc_r>
 800a6d2:	6028      	str	r0, [r5, #0]
 800a6d4:	6128      	str	r0, [r5, #16]
 800a6d6:	b930      	cbnz	r0, 800a6e6 <_svfiprintf_r+0x32>
 800a6d8:	230c      	movs	r3, #12
 800a6da:	603b      	str	r3, [r7, #0]
 800a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e0:	b01d      	add	sp, #116	@ 0x74
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e6:	2340      	movs	r3, #64	@ 0x40
 800a6e8:	616b      	str	r3, [r5, #20]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ee:	2320      	movs	r3, #32
 800a6f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6f8:	2330      	movs	r3, #48	@ 0x30
 800a6fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a898 <_svfiprintf_r+0x1e4>
 800a6fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a702:	f04f 0901 	mov.w	r9, #1
 800a706:	4623      	mov	r3, r4
 800a708:	469a      	mov	sl, r3
 800a70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a70e:	b10a      	cbz	r2, 800a714 <_svfiprintf_r+0x60>
 800a710:	2a25      	cmp	r2, #37	@ 0x25
 800a712:	d1f9      	bne.n	800a708 <_svfiprintf_r+0x54>
 800a714:	ebba 0b04 	subs.w	fp, sl, r4
 800a718:	d00b      	beq.n	800a732 <_svfiprintf_r+0x7e>
 800a71a:	465b      	mov	r3, fp
 800a71c:	4622      	mov	r2, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	4638      	mov	r0, r7
 800a722:	f7ff ff6b 	bl	800a5fc <__ssputs_r>
 800a726:	3001      	adds	r0, #1
 800a728:	f000 80a7 	beq.w	800a87a <_svfiprintf_r+0x1c6>
 800a72c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a72e:	445a      	add	r2, fp
 800a730:	9209      	str	r2, [sp, #36]	@ 0x24
 800a732:	f89a 3000 	ldrb.w	r3, [sl]
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 809f 	beq.w	800a87a <_svfiprintf_r+0x1c6>
 800a73c:	2300      	movs	r3, #0
 800a73e:	f04f 32ff 	mov.w	r2, #4294967295
 800a742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a746:	f10a 0a01 	add.w	sl, sl, #1
 800a74a:	9304      	str	r3, [sp, #16]
 800a74c:	9307      	str	r3, [sp, #28]
 800a74e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a752:	931a      	str	r3, [sp, #104]	@ 0x68
 800a754:	4654      	mov	r4, sl
 800a756:	2205      	movs	r2, #5
 800a758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75c:	484e      	ldr	r0, [pc, #312]	@ (800a898 <_svfiprintf_r+0x1e4>)
 800a75e:	f7f5 fd37 	bl	80001d0 <memchr>
 800a762:	9a04      	ldr	r2, [sp, #16]
 800a764:	b9d8      	cbnz	r0, 800a79e <_svfiprintf_r+0xea>
 800a766:	06d0      	lsls	r0, r2, #27
 800a768:	bf44      	itt	mi
 800a76a:	2320      	movmi	r3, #32
 800a76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a770:	0711      	lsls	r1, r2, #28
 800a772:	bf44      	itt	mi
 800a774:	232b      	movmi	r3, #43	@ 0x2b
 800a776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a77a:	f89a 3000 	ldrb.w	r3, [sl]
 800a77e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a780:	d015      	beq.n	800a7ae <_svfiprintf_r+0xfa>
 800a782:	9a07      	ldr	r2, [sp, #28]
 800a784:	4654      	mov	r4, sl
 800a786:	2000      	movs	r0, #0
 800a788:	f04f 0c0a 	mov.w	ip, #10
 800a78c:	4621      	mov	r1, r4
 800a78e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a792:	3b30      	subs	r3, #48	@ 0x30
 800a794:	2b09      	cmp	r3, #9
 800a796:	d94b      	bls.n	800a830 <_svfiprintf_r+0x17c>
 800a798:	b1b0      	cbz	r0, 800a7c8 <_svfiprintf_r+0x114>
 800a79a:	9207      	str	r2, [sp, #28]
 800a79c:	e014      	b.n	800a7c8 <_svfiprintf_r+0x114>
 800a79e:	eba0 0308 	sub.w	r3, r0, r8
 800a7a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	9304      	str	r3, [sp, #16]
 800a7aa:	46a2      	mov	sl, r4
 800a7ac:	e7d2      	b.n	800a754 <_svfiprintf_r+0xa0>
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	1d19      	adds	r1, r3, #4
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	9103      	str	r1, [sp, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	bfbb      	ittet	lt
 800a7ba:	425b      	neglt	r3, r3
 800a7bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a7c0:	9307      	strge	r3, [sp, #28]
 800a7c2:	9307      	strlt	r3, [sp, #28]
 800a7c4:	bfb8      	it	lt
 800a7c6:	9204      	strlt	r2, [sp, #16]
 800a7c8:	7823      	ldrb	r3, [r4, #0]
 800a7ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7cc:	d10a      	bne.n	800a7e4 <_svfiprintf_r+0x130>
 800a7ce:	7863      	ldrb	r3, [r4, #1]
 800a7d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7d2:	d132      	bne.n	800a83a <_svfiprintf_r+0x186>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	1d1a      	adds	r2, r3, #4
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	9203      	str	r2, [sp, #12]
 800a7dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7e0:	3402      	adds	r4, #2
 800a7e2:	9305      	str	r3, [sp, #20]
 800a7e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a8a8 <_svfiprintf_r+0x1f4>
 800a7e8:	7821      	ldrb	r1, [r4, #0]
 800a7ea:	2203      	movs	r2, #3
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	f7f5 fcef 	bl	80001d0 <memchr>
 800a7f2:	b138      	cbz	r0, 800a804 <_svfiprintf_r+0x150>
 800a7f4:	9b04      	ldr	r3, [sp, #16]
 800a7f6:	eba0 000a 	sub.w	r0, r0, sl
 800a7fa:	2240      	movs	r2, #64	@ 0x40
 800a7fc:	4082      	lsls	r2, r0
 800a7fe:	4313      	orrs	r3, r2
 800a800:	3401      	adds	r4, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a808:	4824      	ldr	r0, [pc, #144]	@ (800a89c <_svfiprintf_r+0x1e8>)
 800a80a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a80e:	2206      	movs	r2, #6
 800a810:	f7f5 fcde 	bl	80001d0 <memchr>
 800a814:	2800      	cmp	r0, #0
 800a816:	d036      	beq.n	800a886 <_svfiprintf_r+0x1d2>
 800a818:	4b21      	ldr	r3, [pc, #132]	@ (800a8a0 <_svfiprintf_r+0x1ec>)
 800a81a:	bb1b      	cbnz	r3, 800a864 <_svfiprintf_r+0x1b0>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	3307      	adds	r3, #7
 800a820:	f023 0307 	bic.w	r3, r3, #7
 800a824:	3308      	adds	r3, #8
 800a826:	9303      	str	r3, [sp, #12]
 800a828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a82a:	4433      	add	r3, r6
 800a82c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a82e:	e76a      	b.n	800a706 <_svfiprintf_r+0x52>
 800a830:	fb0c 3202 	mla	r2, ip, r2, r3
 800a834:	460c      	mov	r4, r1
 800a836:	2001      	movs	r0, #1
 800a838:	e7a8      	b.n	800a78c <_svfiprintf_r+0xd8>
 800a83a:	2300      	movs	r3, #0
 800a83c:	3401      	adds	r4, #1
 800a83e:	9305      	str	r3, [sp, #20]
 800a840:	4619      	mov	r1, r3
 800a842:	f04f 0c0a 	mov.w	ip, #10
 800a846:	4620      	mov	r0, r4
 800a848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a84c:	3a30      	subs	r2, #48	@ 0x30
 800a84e:	2a09      	cmp	r2, #9
 800a850:	d903      	bls.n	800a85a <_svfiprintf_r+0x1a6>
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0c6      	beq.n	800a7e4 <_svfiprintf_r+0x130>
 800a856:	9105      	str	r1, [sp, #20]
 800a858:	e7c4      	b.n	800a7e4 <_svfiprintf_r+0x130>
 800a85a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a85e:	4604      	mov	r4, r0
 800a860:	2301      	movs	r3, #1
 800a862:	e7f0      	b.n	800a846 <_svfiprintf_r+0x192>
 800a864:	ab03      	add	r3, sp, #12
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	462a      	mov	r2, r5
 800a86a:	4b0e      	ldr	r3, [pc, #56]	@ (800a8a4 <_svfiprintf_r+0x1f0>)
 800a86c:	a904      	add	r1, sp, #16
 800a86e:	4638      	mov	r0, r7
 800a870:	f7fd fe5a 	bl	8008528 <_printf_float>
 800a874:	1c42      	adds	r2, r0, #1
 800a876:	4606      	mov	r6, r0
 800a878:	d1d6      	bne.n	800a828 <_svfiprintf_r+0x174>
 800a87a:	89ab      	ldrh	r3, [r5, #12]
 800a87c:	065b      	lsls	r3, r3, #25
 800a87e:	f53f af2d 	bmi.w	800a6dc <_svfiprintf_r+0x28>
 800a882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a884:	e72c      	b.n	800a6e0 <_svfiprintf_r+0x2c>
 800a886:	ab03      	add	r3, sp, #12
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	462a      	mov	r2, r5
 800a88c:	4b05      	ldr	r3, [pc, #20]	@ (800a8a4 <_svfiprintf_r+0x1f0>)
 800a88e:	a904      	add	r1, sp, #16
 800a890:	4638      	mov	r0, r7
 800a892:	f7fe f8e1 	bl	8008a58 <_printf_i>
 800a896:	e7ed      	b.n	800a874 <_svfiprintf_r+0x1c0>
 800a898:	0800d450 	.word	0x0800d450
 800a89c:	0800d45a 	.word	0x0800d45a
 800a8a0:	08008529 	.word	0x08008529
 800a8a4:	0800a5fd 	.word	0x0800a5fd
 800a8a8:	0800d456 	.word	0x0800d456

0800a8ac <__sflush_r>:
 800a8ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b4:	0716      	lsls	r6, r2, #28
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	d454      	bmi.n	800a966 <__sflush_r+0xba>
 800a8bc:	684b      	ldr	r3, [r1, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	dc02      	bgt.n	800a8c8 <__sflush_r+0x1c>
 800a8c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dd48      	ble.n	800a95a <__sflush_r+0xae>
 800a8c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8ca:	2e00      	cmp	r6, #0
 800a8cc:	d045      	beq.n	800a95a <__sflush_r+0xae>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8d4:	682f      	ldr	r7, [r5, #0]
 800a8d6:	6a21      	ldr	r1, [r4, #32]
 800a8d8:	602b      	str	r3, [r5, #0]
 800a8da:	d030      	beq.n	800a93e <__sflush_r+0x92>
 800a8dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	0759      	lsls	r1, r3, #29
 800a8e2:	d505      	bpl.n	800a8f0 <__sflush_r+0x44>
 800a8e4:	6863      	ldr	r3, [r4, #4]
 800a8e6:	1ad2      	subs	r2, r2, r3
 800a8e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8ea:	b10b      	cbz	r3, 800a8f0 <__sflush_r+0x44>
 800a8ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8ee:	1ad2      	subs	r2, r2, r3
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8f4:	6a21      	ldr	r1, [r4, #32]
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b0      	blx	r6
 800a8fa:	1c43      	adds	r3, r0, #1
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	d106      	bne.n	800a90e <__sflush_r+0x62>
 800a900:	6829      	ldr	r1, [r5, #0]
 800a902:	291d      	cmp	r1, #29
 800a904:	d82b      	bhi.n	800a95e <__sflush_r+0xb2>
 800a906:	4a2a      	ldr	r2, [pc, #168]	@ (800a9b0 <__sflush_r+0x104>)
 800a908:	410a      	asrs	r2, r1
 800a90a:	07d6      	lsls	r6, r2, #31
 800a90c:	d427      	bmi.n	800a95e <__sflush_r+0xb2>
 800a90e:	2200      	movs	r2, #0
 800a910:	6062      	str	r2, [r4, #4]
 800a912:	04d9      	lsls	r1, r3, #19
 800a914:	6922      	ldr	r2, [r4, #16]
 800a916:	6022      	str	r2, [r4, #0]
 800a918:	d504      	bpl.n	800a924 <__sflush_r+0x78>
 800a91a:	1c42      	adds	r2, r0, #1
 800a91c:	d101      	bne.n	800a922 <__sflush_r+0x76>
 800a91e:	682b      	ldr	r3, [r5, #0]
 800a920:	b903      	cbnz	r3, 800a924 <__sflush_r+0x78>
 800a922:	6560      	str	r0, [r4, #84]	@ 0x54
 800a924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a926:	602f      	str	r7, [r5, #0]
 800a928:	b1b9      	cbz	r1, 800a95a <__sflush_r+0xae>
 800a92a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a92e:	4299      	cmp	r1, r3
 800a930:	d002      	beq.n	800a938 <__sflush_r+0x8c>
 800a932:	4628      	mov	r0, r5
 800a934:	f7ff f9e0 	bl	8009cf8 <_free_r>
 800a938:	2300      	movs	r3, #0
 800a93a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a93c:	e00d      	b.n	800a95a <__sflush_r+0xae>
 800a93e:	2301      	movs	r3, #1
 800a940:	4628      	mov	r0, r5
 800a942:	47b0      	blx	r6
 800a944:	4602      	mov	r2, r0
 800a946:	1c50      	adds	r0, r2, #1
 800a948:	d1c9      	bne.n	800a8de <__sflush_r+0x32>
 800a94a:	682b      	ldr	r3, [r5, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0c6      	beq.n	800a8de <__sflush_r+0x32>
 800a950:	2b1d      	cmp	r3, #29
 800a952:	d001      	beq.n	800a958 <__sflush_r+0xac>
 800a954:	2b16      	cmp	r3, #22
 800a956:	d11e      	bne.n	800a996 <__sflush_r+0xea>
 800a958:	602f      	str	r7, [r5, #0]
 800a95a:	2000      	movs	r0, #0
 800a95c:	e022      	b.n	800a9a4 <__sflush_r+0xf8>
 800a95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a962:	b21b      	sxth	r3, r3
 800a964:	e01b      	b.n	800a99e <__sflush_r+0xf2>
 800a966:	690f      	ldr	r7, [r1, #16]
 800a968:	2f00      	cmp	r7, #0
 800a96a:	d0f6      	beq.n	800a95a <__sflush_r+0xae>
 800a96c:	0793      	lsls	r3, r2, #30
 800a96e:	680e      	ldr	r6, [r1, #0]
 800a970:	bf08      	it	eq
 800a972:	694b      	ldreq	r3, [r1, #20]
 800a974:	600f      	str	r7, [r1, #0]
 800a976:	bf18      	it	ne
 800a978:	2300      	movne	r3, #0
 800a97a:	eba6 0807 	sub.w	r8, r6, r7
 800a97e:	608b      	str	r3, [r1, #8]
 800a980:	f1b8 0f00 	cmp.w	r8, #0
 800a984:	dde9      	ble.n	800a95a <__sflush_r+0xae>
 800a986:	6a21      	ldr	r1, [r4, #32]
 800a988:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a98a:	4643      	mov	r3, r8
 800a98c:	463a      	mov	r2, r7
 800a98e:	4628      	mov	r0, r5
 800a990:	47b0      	blx	r6
 800a992:	2800      	cmp	r0, #0
 800a994:	dc08      	bgt.n	800a9a8 <__sflush_r+0xfc>
 800a996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a99a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a99e:	81a3      	strh	r3, [r4, #12]
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a8:	4407      	add	r7, r0
 800a9aa:	eba8 0800 	sub.w	r8, r8, r0
 800a9ae:	e7e7      	b.n	800a980 <__sflush_r+0xd4>
 800a9b0:	dfbffffe 	.word	0xdfbffffe

0800a9b4 <_fflush_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	690b      	ldr	r3, [r1, #16]
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	b913      	cbnz	r3, 800a9c4 <_fflush_r+0x10>
 800a9be:	2500      	movs	r5, #0
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	b118      	cbz	r0, 800a9ce <_fflush_r+0x1a>
 800a9c6:	6a03      	ldr	r3, [r0, #32]
 800a9c8:	b90b      	cbnz	r3, 800a9ce <_fflush_r+0x1a>
 800a9ca:	f7fe f9f1 	bl	8008db0 <__sinit>
 800a9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0f3      	beq.n	800a9be <_fflush_r+0xa>
 800a9d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9d8:	07d0      	lsls	r0, r2, #31
 800a9da:	d404      	bmi.n	800a9e6 <_fflush_r+0x32>
 800a9dc:	0599      	lsls	r1, r3, #22
 800a9de:	d402      	bmi.n	800a9e6 <_fflush_r+0x32>
 800a9e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9e2:	f7fe fb2a 	bl	800903a <__retarget_lock_acquire_recursive>
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	f7ff ff5f 	bl	800a8ac <__sflush_r>
 800a9ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9f0:	07da      	lsls	r2, r3, #31
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	d4e4      	bmi.n	800a9c0 <_fflush_r+0xc>
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	059b      	lsls	r3, r3, #22
 800a9fa:	d4e1      	bmi.n	800a9c0 <_fflush_r+0xc>
 800a9fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9fe:	f7fe fb1d 	bl	800903c <__retarget_lock_release_recursive>
 800aa02:	e7dd      	b.n	800a9c0 <_fflush_r+0xc>

0800aa04 <_sbrk_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d06      	ldr	r5, [pc, #24]	@ (800aa20 <_sbrk_r+0x1c>)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	602b      	str	r3, [r5, #0]
 800aa10:	f7f7 fbd8 	bl	80021c4 <_sbrk>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d102      	bne.n	800aa1e <_sbrk_r+0x1a>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	b103      	cbz	r3, 800aa1e <_sbrk_r+0x1a>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	20001378 	.word	0x20001378

0800aa24 <__assert_func>:
 800aa24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa26:	4614      	mov	r4, r2
 800aa28:	461a      	mov	r2, r3
 800aa2a:	4b09      	ldr	r3, [pc, #36]	@ (800aa50 <__assert_func+0x2c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4605      	mov	r5, r0
 800aa30:	68d8      	ldr	r0, [r3, #12]
 800aa32:	b954      	cbnz	r4, 800aa4a <__assert_func+0x26>
 800aa34:	4b07      	ldr	r3, [pc, #28]	@ (800aa54 <__assert_func+0x30>)
 800aa36:	461c      	mov	r4, r3
 800aa38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa3c:	9100      	str	r1, [sp, #0]
 800aa3e:	462b      	mov	r3, r5
 800aa40:	4905      	ldr	r1, [pc, #20]	@ (800aa58 <__assert_func+0x34>)
 800aa42:	f000 f86f 	bl	800ab24 <fiprintf>
 800aa46:	f000 f87f 	bl	800ab48 <abort>
 800aa4a:	4b04      	ldr	r3, [pc, #16]	@ (800aa5c <__assert_func+0x38>)
 800aa4c:	e7f4      	b.n	800aa38 <__assert_func+0x14>
 800aa4e:	bf00      	nop
 800aa50:	20000040 	.word	0x20000040
 800aa54:	0800d4a6 	.word	0x0800d4a6
 800aa58:	0800d478 	.word	0x0800d478
 800aa5c:	0800d46b 	.word	0x0800d46b

0800aa60 <_calloc_r>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	fba1 5402 	umull	r5, r4, r1, r2
 800aa66:	b93c      	cbnz	r4, 800aa78 <_calloc_r+0x18>
 800aa68:	4629      	mov	r1, r5
 800aa6a:	f7ff f9b9 	bl	8009de0 <_malloc_r>
 800aa6e:	4606      	mov	r6, r0
 800aa70:	b928      	cbnz	r0, 800aa7e <_calloc_r+0x1e>
 800aa72:	2600      	movs	r6, #0
 800aa74:	4630      	mov	r0, r6
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	220c      	movs	r2, #12
 800aa7a:	6002      	str	r2, [r0, #0]
 800aa7c:	e7f9      	b.n	800aa72 <_calloc_r+0x12>
 800aa7e:	462a      	mov	r2, r5
 800aa80:	4621      	mov	r1, r4
 800aa82:	f7fe fa5c 	bl	8008f3e <memset>
 800aa86:	e7f5      	b.n	800aa74 <_calloc_r+0x14>

0800aa88 <__ascii_mbtowc>:
 800aa88:	b082      	sub	sp, #8
 800aa8a:	b901      	cbnz	r1, 800aa8e <__ascii_mbtowc+0x6>
 800aa8c:	a901      	add	r1, sp, #4
 800aa8e:	b142      	cbz	r2, 800aaa2 <__ascii_mbtowc+0x1a>
 800aa90:	b14b      	cbz	r3, 800aaa6 <__ascii_mbtowc+0x1e>
 800aa92:	7813      	ldrb	r3, [r2, #0]
 800aa94:	600b      	str	r3, [r1, #0]
 800aa96:	7812      	ldrb	r2, [r2, #0]
 800aa98:	1e10      	subs	r0, r2, #0
 800aa9a:	bf18      	it	ne
 800aa9c:	2001      	movne	r0, #1
 800aa9e:	b002      	add	sp, #8
 800aaa0:	4770      	bx	lr
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	e7fb      	b.n	800aa9e <__ascii_mbtowc+0x16>
 800aaa6:	f06f 0001 	mvn.w	r0, #1
 800aaaa:	e7f8      	b.n	800aa9e <__ascii_mbtowc+0x16>

0800aaac <_realloc_r>:
 800aaac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab0:	4680      	mov	r8, r0
 800aab2:	4615      	mov	r5, r2
 800aab4:	460c      	mov	r4, r1
 800aab6:	b921      	cbnz	r1, 800aac2 <_realloc_r+0x16>
 800aab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aabc:	4611      	mov	r1, r2
 800aabe:	f7ff b98f 	b.w	8009de0 <_malloc_r>
 800aac2:	b92a      	cbnz	r2, 800aad0 <_realloc_r+0x24>
 800aac4:	f7ff f918 	bl	8009cf8 <_free_r>
 800aac8:	2400      	movs	r4, #0
 800aaca:	4620      	mov	r0, r4
 800aacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad0:	f000 f841 	bl	800ab56 <_malloc_usable_size_r>
 800aad4:	4285      	cmp	r5, r0
 800aad6:	4606      	mov	r6, r0
 800aad8:	d802      	bhi.n	800aae0 <_realloc_r+0x34>
 800aada:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aade:	d8f4      	bhi.n	800aaca <_realloc_r+0x1e>
 800aae0:	4629      	mov	r1, r5
 800aae2:	4640      	mov	r0, r8
 800aae4:	f7ff f97c 	bl	8009de0 <_malloc_r>
 800aae8:	4607      	mov	r7, r0
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d0ec      	beq.n	800aac8 <_realloc_r+0x1c>
 800aaee:	42b5      	cmp	r5, r6
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	bf28      	it	cs
 800aaf6:	4632      	movcs	r2, r6
 800aaf8:	f7fe faa1 	bl	800903e <memcpy>
 800aafc:	4621      	mov	r1, r4
 800aafe:	4640      	mov	r0, r8
 800ab00:	f7ff f8fa 	bl	8009cf8 <_free_r>
 800ab04:	463c      	mov	r4, r7
 800ab06:	e7e0      	b.n	800aaca <_realloc_r+0x1e>

0800ab08 <__ascii_wctomb>:
 800ab08:	4603      	mov	r3, r0
 800ab0a:	4608      	mov	r0, r1
 800ab0c:	b141      	cbz	r1, 800ab20 <__ascii_wctomb+0x18>
 800ab0e:	2aff      	cmp	r2, #255	@ 0xff
 800ab10:	d904      	bls.n	800ab1c <__ascii_wctomb+0x14>
 800ab12:	228a      	movs	r2, #138	@ 0x8a
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1a:	4770      	bx	lr
 800ab1c:	700a      	strb	r2, [r1, #0]
 800ab1e:	2001      	movs	r0, #1
 800ab20:	4770      	bx	lr
	...

0800ab24 <fiprintf>:
 800ab24:	b40e      	push	{r1, r2, r3}
 800ab26:	b503      	push	{r0, r1, lr}
 800ab28:	4601      	mov	r1, r0
 800ab2a:	ab03      	add	r3, sp, #12
 800ab2c:	4805      	ldr	r0, [pc, #20]	@ (800ab44 <fiprintf+0x20>)
 800ab2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab32:	6800      	ldr	r0, [r0, #0]
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	f000 f83f 	bl	800abb8 <_vfiprintf_r>
 800ab3a:	b002      	add	sp, #8
 800ab3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab40:	b003      	add	sp, #12
 800ab42:	4770      	bx	lr
 800ab44:	20000040 	.word	0x20000040

0800ab48 <abort>:
 800ab48:	b508      	push	{r3, lr}
 800ab4a:	2006      	movs	r0, #6
 800ab4c:	f000 fa08 	bl	800af60 <raise>
 800ab50:	2001      	movs	r0, #1
 800ab52:	f7f7 fabf 	bl	80020d4 <_exit>

0800ab56 <_malloc_usable_size_r>:
 800ab56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab5a:	1f18      	subs	r0, r3, #4
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	bfbc      	itt	lt
 800ab60:	580b      	ldrlt	r3, [r1, r0]
 800ab62:	18c0      	addlt	r0, r0, r3
 800ab64:	4770      	bx	lr

0800ab66 <__sfputc_r>:
 800ab66:	6893      	ldr	r3, [r2, #8]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	b410      	push	{r4}
 800ab6e:	6093      	str	r3, [r2, #8]
 800ab70:	da08      	bge.n	800ab84 <__sfputc_r+0x1e>
 800ab72:	6994      	ldr	r4, [r2, #24]
 800ab74:	42a3      	cmp	r3, r4
 800ab76:	db01      	blt.n	800ab7c <__sfputc_r+0x16>
 800ab78:	290a      	cmp	r1, #10
 800ab7a:	d103      	bne.n	800ab84 <__sfputc_r+0x1e>
 800ab7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab80:	f000 b932 	b.w	800ade8 <__swbuf_r>
 800ab84:	6813      	ldr	r3, [r2, #0]
 800ab86:	1c58      	adds	r0, r3, #1
 800ab88:	6010      	str	r0, [r2, #0]
 800ab8a:	7019      	strb	r1, [r3, #0]
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <__sfputs_r>:
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab96:	4606      	mov	r6, r0
 800ab98:	460f      	mov	r7, r1
 800ab9a:	4614      	mov	r4, r2
 800ab9c:	18d5      	adds	r5, r2, r3
 800ab9e:	42ac      	cmp	r4, r5
 800aba0:	d101      	bne.n	800aba6 <__sfputs_r+0x12>
 800aba2:	2000      	movs	r0, #0
 800aba4:	e007      	b.n	800abb6 <__sfputs_r+0x22>
 800aba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abaa:	463a      	mov	r2, r7
 800abac:	4630      	mov	r0, r6
 800abae:	f7ff ffda 	bl	800ab66 <__sfputc_r>
 800abb2:	1c43      	adds	r3, r0, #1
 800abb4:	d1f3      	bne.n	800ab9e <__sfputs_r+0xa>
 800abb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abb8 <_vfiprintf_r>:
 800abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abbc:	460d      	mov	r5, r1
 800abbe:	b09d      	sub	sp, #116	@ 0x74
 800abc0:	4614      	mov	r4, r2
 800abc2:	4698      	mov	r8, r3
 800abc4:	4606      	mov	r6, r0
 800abc6:	b118      	cbz	r0, 800abd0 <_vfiprintf_r+0x18>
 800abc8:	6a03      	ldr	r3, [r0, #32]
 800abca:	b90b      	cbnz	r3, 800abd0 <_vfiprintf_r+0x18>
 800abcc:	f7fe f8f0 	bl	8008db0 <__sinit>
 800abd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abd2:	07d9      	lsls	r1, r3, #31
 800abd4:	d405      	bmi.n	800abe2 <_vfiprintf_r+0x2a>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	059a      	lsls	r2, r3, #22
 800abda:	d402      	bmi.n	800abe2 <_vfiprintf_r+0x2a>
 800abdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abde:	f7fe fa2c 	bl	800903a <__retarget_lock_acquire_recursive>
 800abe2:	89ab      	ldrh	r3, [r5, #12]
 800abe4:	071b      	lsls	r3, r3, #28
 800abe6:	d501      	bpl.n	800abec <_vfiprintf_r+0x34>
 800abe8:	692b      	ldr	r3, [r5, #16]
 800abea:	b99b      	cbnz	r3, 800ac14 <_vfiprintf_r+0x5c>
 800abec:	4629      	mov	r1, r5
 800abee:	4630      	mov	r0, r6
 800abf0:	f000 f938 	bl	800ae64 <__swsetup_r>
 800abf4:	b170      	cbz	r0, 800ac14 <_vfiprintf_r+0x5c>
 800abf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abf8:	07dc      	lsls	r4, r3, #31
 800abfa:	d504      	bpl.n	800ac06 <_vfiprintf_r+0x4e>
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	b01d      	add	sp, #116	@ 0x74
 800ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac06:	89ab      	ldrh	r3, [r5, #12]
 800ac08:	0598      	lsls	r0, r3, #22
 800ac0a:	d4f7      	bmi.n	800abfc <_vfiprintf_r+0x44>
 800ac0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac0e:	f7fe fa15 	bl	800903c <__retarget_lock_release_recursive>
 800ac12:	e7f3      	b.n	800abfc <_vfiprintf_r+0x44>
 800ac14:	2300      	movs	r3, #0
 800ac16:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac18:	2320      	movs	r3, #32
 800ac1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac22:	2330      	movs	r3, #48	@ 0x30
 800ac24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800add4 <_vfiprintf_r+0x21c>
 800ac28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac2c:	f04f 0901 	mov.w	r9, #1
 800ac30:	4623      	mov	r3, r4
 800ac32:	469a      	mov	sl, r3
 800ac34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac38:	b10a      	cbz	r2, 800ac3e <_vfiprintf_r+0x86>
 800ac3a:	2a25      	cmp	r2, #37	@ 0x25
 800ac3c:	d1f9      	bne.n	800ac32 <_vfiprintf_r+0x7a>
 800ac3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac42:	d00b      	beq.n	800ac5c <_vfiprintf_r+0xa4>
 800ac44:	465b      	mov	r3, fp
 800ac46:	4622      	mov	r2, r4
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff ffa2 	bl	800ab94 <__sfputs_r>
 800ac50:	3001      	adds	r0, #1
 800ac52:	f000 80a7 	beq.w	800ada4 <_vfiprintf_r+0x1ec>
 800ac56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac58:	445a      	add	r2, fp
 800ac5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 809f 	beq.w	800ada4 <_vfiprintf_r+0x1ec>
 800ac66:	2300      	movs	r3, #0
 800ac68:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac70:	f10a 0a01 	add.w	sl, sl, #1
 800ac74:	9304      	str	r3, [sp, #16]
 800ac76:	9307      	str	r3, [sp, #28]
 800ac78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac7e:	4654      	mov	r4, sl
 800ac80:	2205      	movs	r2, #5
 800ac82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac86:	4853      	ldr	r0, [pc, #332]	@ (800add4 <_vfiprintf_r+0x21c>)
 800ac88:	f7f5 faa2 	bl	80001d0 <memchr>
 800ac8c:	9a04      	ldr	r2, [sp, #16]
 800ac8e:	b9d8      	cbnz	r0, 800acc8 <_vfiprintf_r+0x110>
 800ac90:	06d1      	lsls	r1, r2, #27
 800ac92:	bf44      	itt	mi
 800ac94:	2320      	movmi	r3, #32
 800ac96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac9a:	0713      	lsls	r3, r2, #28
 800ac9c:	bf44      	itt	mi
 800ac9e:	232b      	movmi	r3, #43	@ 0x2b
 800aca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aca4:	f89a 3000 	ldrb.w	r3, [sl]
 800aca8:	2b2a      	cmp	r3, #42	@ 0x2a
 800acaa:	d015      	beq.n	800acd8 <_vfiprintf_r+0x120>
 800acac:	9a07      	ldr	r2, [sp, #28]
 800acae:	4654      	mov	r4, sl
 800acb0:	2000      	movs	r0, #0
 800acb2:	f04f 0c0a 	mov.w	ip, #10
 800acb6:	4621      	mov	r1, r4
 800acb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acbc:	3b30      	subs	r3, #48	@ 0x30
 800acbe:	2b09      	cmp	r3, #9
 800acc0:	d94b      	bls.n	800ad5a <_vfiprintf_r+0x1a2>
 800acc2:	b1b0      	cbz	r0, 800acf2 <_vfiprintf_r+0x13a>
 800acc4:	9207      	str	r2, [sp, #28]
 800acc6:	e014      	b.n	800acf2 <_vfiprintf_r+0x13a>
 800acc8:	eba0 0308 	sub.w	r3, r0, r8
 800accc:	fa09 f303 	lsl.w	r3, r9, r3
 800acd0:	4313      	orrs	r3, r2
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	46a2      	mov	sl, r4
 800acd6:	e7d2      	b.n	800ac7e <_vfiprintf_r+0xc6>
 800acd8:	9b03      	ldr	r3, [sp, #12]
 800acda:	1d19      	adds	r1, r3, #4
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	9103      	str	r1, [sp, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bfbb      	ittet	lt
 800ace4:	425b      	neglt	r3, r3
 800ace6:	f042 0202 	orrlt.w	r2, r2, #2
 800acea:	9307      	strge	r3, [sp, #28]
 800acec:	9307      	strlt	r3, [sp, #28]
 800acee:	bfb8      	it	lt
 800acf0:	9204      	strlt	r2, [sp, #16]
 800acf2:	7823      	ldrb	r3, [r4, #0]
 800acf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800acf6:	d10a      	bne.n	800ad0e <_vfiprintf_r+0x156>
 800acf8:	7863      	ldrb	r3, [r4, #1]
 800acfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800acfc:	d132      	bne.n	800ad64 <_vfiprintf_r+0x1ac>
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	1d1a      	adds	r2, r3, #4
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	9203      	str	r2, [sp, #12]
 800ad06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad0a:	3402      	adds	r4, #2
 800ad0c:	9305      	str	r3, [sp, #20]
 800ad0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ade4 <_vfiprintf_r+0x22c>
 800ad12:	7821      	ldrb	r1, [r4, #0]
 800ad14:	2203      	movs	r2, #3
 800ad16:	4650      	mov	r0, sl
 800ad18:	f7f5 fa5a 	bl	80001d0 <memchr>
 800ad1c:	b138      	cbz	r0, 800ad2e <_vfiprintf_r+0x176>
 800ad1e:	9b04      	ldr	r3, [sp, #16]
 800ad20:	eba0 000a 	sub.w	r0, r0, sl
 800ad24:	2240      	movs	r2, #64	@ 0x40
 800ad26:	4082      	lsls	r2, r0
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	3401      	adds	r4, #1
 800ad2c:	9304      	str	r3, [sp, #16]
 800ad2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad32:	4829      	ldr	r0, [pc, #164]	@ (800add8 <_vfiprintf_r+0x220>)
 800ad34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad38:	2206      	movs	r2, #6
 800ad3a:	f7f5 fa49 	bl	80001d0 <memchr>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d03f      	beq.n	800adc2 <_vfiprintf_r+0x20a>
 800ad42:	4b26      	ldr	r3, [pc, #152]	@ (800addc <_vfiprintf_r+0x224>)
 800ad44:	bb1b      	cbnz	r3, 800ad8e <_vfiprintf_r+0x1d6>
 800ad46:	9b03      	ldr	r3, [sp, #12]
 800ad48:	3307      	adds	r3, #7
 800ad4a:	f023 0307 	bic.w	r3, r3, #7
 800ad4e:	3308      	adds	r3, #8
 800ad50:	9303      	str	r3, [sp, #12]
 800ad52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad54:	443b      	add	r3, r7
 800ad56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad58:	e76a      	b.n	800ac30 <_vfiprintf_r+0x78>
 800ad5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad5e:	460c      	mov	r4, r1
 800ad60:	2001      	movs	r0, #1
 800ad62:	e7a8      	b.n	800acb6 <_vfiprintf_r+0xfe>
 800ad64:	2300      	movs	r3, #0
 800ad66:	3401      	adds	r4, #1
 800ad68:	9305      	str	r3, [sp, #20]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	f04f 0c0a 	mov.w	ip, #10
 800ad70:	4620      	mov	r0, r4
 800ad72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad76:	3a30      	subs	r2, #48	@ 0x30
 800ad78:	2a09      	cmp	r2, #9
 800ad7a:	d903      	bls.n	800ad84 <_vfiprintf_r+0x1cc>
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d0c6      	beq.n	800ad0e <_vfiprintf_r+0x156>
 800ad80:	9105      	str	r1, [sp, #20]
 800ad82:	e7c4      	b.n	800ad0e <_vfiprintf_r+0x156>
 800ad84:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad88:	4604      	mov	r4, r0
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e7f0      	b.n	800ad70 <_vfiprintf_r+0x1b8>
 800ad8e:	ab03      	add	r3, sp, #12
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	462a      	mov	r2, r5
 800ad94:	4b12      	ldr	r3, [pc, #72]	@ (800ade0 <_vfiprintf_r+0x228>)
 800ad96:	a904      	add	r1, sp, #16
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f7fd fbc5 	bl	8008528 <_printf_float>
 800ad9e:	4607      	mov	r7, r0
 800ada0:	1c78      	adds	r0, r7, #1
 800ada2:	d1d6      	bne.n	800ad52 <_vfiprintf_r+0x19a>
 800ada4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ada6:	07d9      	lsls	r1, r3, #31
 800ada8:	d405      	bmi.n	800adb6 <_vfiprintf_r+0x1fe>
 800adaa:	89ab      	ldrh	r3, [r5, #12]
 800adac:	059a      	lsls	r2, r3, #22
 800adae:	d402      	bmi.n	800adb6 <_vfiprintf_r+0x1fe>
 800adb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adb2:	f7fe f943 	bl	800903c <__retarget_lock_release_recursive>
 800adb6:	89ab      	ldrh	r3, [r5, #12]
 800adb8:	065b      	lsls	r3, r3, #25
 800adba:	f53f af1f 	bmi.w	800abfc <_vfiprintf_r+0x44>
 800adbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adc0:	e71e      	b.n	800ac00 <_vfiprintf_r+0x48>
 800adc2:	ab03      	add	r3, sp, #12
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	462a      	mov	r2, r5
 800adc8:	4b05      	ldr	r3, [pc, #20]	@ (800ade0 <_vfiprintf_r+0x228>)
 800adca:	a904      	add	r1, sp, #16
 800adcc:	4630      	mov	r0, r6
 800adce:	f7fd fe43 	bl	8008a58 <_printf_i>
 800add2:	e7e4      	b.n	800ad9e <_vfiprintf_r+0x1e6>
 800add4:	0800d450 	.word	0x0800d450
 800add8:	0800d45a 	.word	0x0800d45a
 800addc:	08008529 	.word	0x08008529
 800ade0:	0800ab95 	.word	0x0800ab95
 800ade4:	0800d456 	.word	0x0800d456

0800ade8 <__swbuf_r>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	460e      	mov	r6, r1
 800adec:	4614      	mov	r4, r2
 800adee:	4605      	mov	r5, r0
 800adf0:	b118      	cbz	r0, 800adfa <__swbuf_r+0x12>
 800adf2:	6a03      	ldr	r3, [r0, #32]
 800adf4:	b90b      	cbnz	r3, 800adfa <__swbuf_r+0x12>
 800adf6:	f7fd ffdb 	bl	8008db0 <__sinit>
 800adfa:	69a3      	ldr	r3, [r4, #24]
 800adfc:	60a3      	str	r3, [r4, #8]
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	071a      	lsls	r2, r3, #28
 800ae02:	d501      	bpl.n	800ae08 <__swbuf_r+0x20>
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	b943      	cbnz	r3, 800ae1a <__swbuf_r+0x32>
 800ae08:	4621      	mov	r1, r4
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f000 f82a 	bl	800ae64 <__swsetup_r>
 800ae10:	b118      	cbz	r0, 800ae1a <__swbuf_r+0x32>
 800ae12:	f04f 37ff 	mov.w	r7, #4294967295
 800ae16:	4638      	mov	r0, r7
 800ae18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	6922      	ldr	r2, [r4, #16]
 800ae1e:	1a98      	subs	r0, r3, r2
 800ae20:	6963      	ldr	r3, [r4, #20]
 800ae22:	b2f6      	uxtb	r6, r6
 800ae24:	4283      	cmp	r3, r0
 800ae26:	4637      	mov	r7, r6
 800ae28:	dc05      	bgt.n	800ae36 <__swbuf_r+0x4e>
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f7ff fdc1 	bl	800a9b4 <_fflush_r>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d1ed      	bne.n	800ae12 <__swbuf_r+0x2a>
 800ae36:	68a3      	ldr	r3, [r4, #8]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	60a3      	str	r3, [r4, #8]
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	1c5a      	adds	r2, r3, #1
 800ae40:	6022      	str	r2, [r4, #0]
 800ae42:	701e      	strb	r6, [r3, #0]
 800ae44:	6962      	ldr	r2, [r4, #20]
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d004      	beq.n	800ae56 <__swbuf_r+0x6e>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	07db      	lsls	r3, r3, #31
 800ae50:	d5e1      	bpl.n	800ae16 <__swbuf_r+0x2e>
 800ae52:	2e0a      	cmp	r6, #10
 800ae54:	d1df      	bne.n	800ae16 <__swbuf_r+0x2e>
 800ae56:	4621      	mov	r1, r4
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f7ff fdab 	bl	800a9b4 <_fflush_r>
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d0d9      	beq.n	800ae16 <__swbuf_r+0x2e>
 800ae62:	e7d6      	b.n	800ae12 <__swbuf_r+0x2a>

0800ae64 <__swsetup_r>:
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	4b29      	ldr	r3, [pc, #164]	@ (800af0c <__swsetup_r+0xa8>)
 800ae68:	4605      	mov	r5, r0
 800ae6a:	6818      	ldr	r0, [r3, #0]
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	b118      	cbz	r0, 800ae78 <__swsetup_r+0x14>
 800ae70:	6a03      	ldr	r3, [r0, #32]
 800ae72:	b90b      	cbnz	r3, 800ae78 <__swsetup_r+0x14>
 800ae74:	f7fd ff9c 	bl	8008db0 <__sinit>
 800ae78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7c:	0719      	lsls	r1, r3, #28
 800ae7e:	d422      	bmi.n	800aec6 <__swsetup_r+0x62>
 800ae80:	06da      	lsls	r2, r3, #27
 800ae82:	d407      	bmi.n	800ae94 <__swsetup_r+0x30>
 800ae84:	2209      	movs	r2, #9
 800ae86:	602a      	str	r2, [r5, #0]
 800ae88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae8c:	81a3      	strh	r3, [r4, #12]
 800ae8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae92:	e033      	b.n	800aefc <__swsetup_r+0x98>
 800ae94:	0758      	lsls	r0, r3, #29
 800ae96:	d512      	bpl.n	800aebe <__swsetup_r+0x5a>
 800ae98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae9a:	b141      	cbz	r1, 800aeae <__swsetup_r+0x4a>
 800ae9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aea0:	4299      	cmp	r1, r3
 800aea2:	d002      	beq.n	800aeaa <__swsetup_r+0x46>
 800aea4:	4628      	mov	r0, r5
 800aea6:	f7fe ff27 	bl	8009cf8 <_free_r>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6363      	str	r3, [r4, #52]	@ 0x34
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aeb4:	81a3      	strh	r3, [r4, #12]
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	6063      	str	r3, [r4, #4]
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	f043 0308 	orr.w	r3, r3, #8
 800aec4:	81a3      	strh	r3, [r4, #12]
 800aec6:	6923      	ldr	r3, [r4, #16]
 800aec8:	b94b      	cbnz	r3, 800aede <__swsetup_r+0x7a>
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aed4:	d003      	beq.n	800aede <__swsetup_r+0x7a>
 800aed6:	4621      	mov	r1, r4
 800aed8:	4628      	mov	r0, r5
 800aeda:	f000 f883 	bl	800afe4 <__smakebuf_r>
 800aede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aee2:	f013 0201 	ands.w	r2, r3, #1
 800aee6:	d00a      	beq.n	800aefe <__swsetup_r+0x9a>
 800aee8:	2200      	movs	r2, #0
 800aeea:	60a2      	str	r2, [r4, #8]
 800aeec:	6962      	ldr	r2, [r4, #20]
 800aeee:	4252      	negs	r2, r2
 800aef0:	61a2      	str	r2, [r4, #24]
 800aef2:	6922      	ldr	r2, [r4, #16]
 800aef4:	b942      	cbnz	r2, 800af08 <__swsetup_r+0xa4>
 800aef6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aefa:	d1c5      	bne.n	800ae88 <__swsetup_r+0x24>
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
 800aefe:	0799      	lsls	r1, r3, #30
 800af00:	bf58      	it	pl
 800af02:	6962      	ldrpl	r2, [r4, #20]
 800af04:	60a2      	str	r2, [r4, #8]
 800af06:	e7f4      	b.n	800aef2 <__swsetup_r+0x8e>
 800af08:	2000      	movs	r0, #0
 800af0a:	e7f7      	b.n	800aefc <__swsetup_r+0x98>
 800af0c:	20000040 	.word	0x20000040

0800af10 <_raise_r>:
 800af10:	291f      	cmp	r1, #31
 800af12:	b538      	push	{r3, r4, r5, lr}
 800af14:	4605      	mov	r5, r0
 800af16:	460c      	mov	r4, r1
 800af18:	d904      	bls.n	800af24 <_raise_r+0x14>
 800af1a:	2316      	movs	r3, #22
 800af1c:	6003      	str	r3, [r0, #0]
 800af1e:	f04f 30ff 	mov.w	r0, #4294967295
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af26:	b112      	cbz	r2, 800af2e <_raise_r+0x1e>
 800af28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af2c:	b94b      	cbnz	r3, 800af42 <_raise_r+0x32>
 800af2e:	4628      	mov	r0, r5
 800af30:	f000 f830 	bl	800af94 <_getpid_r>
 800af34:	4622      	mov	r2, r4
 800af36:	4601      	mov	r1, r0
 800af38:	4628      	mov	r0, r5
 800af3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af3e:	f000 b817 	b.w	800af70 <_kill_r>
 800af42:	2b01      	cmp	r3, #1
 800af44:	d00a      	beq.n	800af5c <_raise_r+0x4c>
 800af46:	1c59      	adds	r1, r3, #1
 800af48:	d103      	bne.n	800af52 <_raise_r+0x42>
 800af4a:	2316      	movs	r3, #22
 800af4c:	6003      	str	r3, [r0, #0]
 800af4e:	2001      	movs	r0, #1
 800af50:	e7e7      	b.n	800af22 <_raise_r+0x12>
 800af52:	2100      	movs	r1, #0
 800af54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af58:	4620      	mov	r0, r4
 800af5a:	4798      	blx	r3
 800af5c:	2000      	movs	r0, #0
 800af5e:	e7e0      	b.n	800af22 <_raise_r+0x12>

0800af60 <raise>:
 800af60:	4b02      	ldr	r3, [pc, #8]	@ (800af6c <raise+0xc>)
 800af62:	4601      	mov	r1, r0
 800af64:	6818      	ldr	r0, [r3, #0]
 800af66:	f7ff bfd3 	b.w	800af10 <_raise_r>
 800af6a:	bf00      	nop
 800af6c:	20000040 	.word	0x20000040

0800af70 <_kill_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	4d07      	ldr	r5, [pc, #28]	@ (800af90 <_kill_r+0x20>)
 800af74:	2300      	movs	r3, #0
 800af76:	4604      	mov	r4, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	4611      	mov	r1, r2
 800af7c:	602b      	str	r3, [r5, #0]
 800af7e:	f7f7 f899 	bl	80020b4 <_kill>
 800af82:	1c43      	adds	r3, r0, #1
 800af84:	d102      	bne.n	800af8c <_kill_r+0x1c>
 800af86:	682b      	ldr	r3, [r5, #0]
 800af88:	b103      	cbz	r3, 800af8c <_kill_r+0x1c>
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	bd38      	pop	{r3, r4, r5, pc}
 800af8e:	bf00      	nop
 800af90:	20001378 	.word	0x20001378

0800af94 <_getpid_r>:
 800af94:	f7f7 b886 	b.w	80020a4 <_getpid>

0800af98 <__swhatbuf_r>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	460c      	mov	r4, r1
 800af9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa0:	2900      	cmp	r1, #0
 800afa2:	b096      	sub	sp, #88	@ 0x58
 800afa4:	4615      	mov	r5, r2
 800afa6:	461e      	mov	r6, r3
 800afa8:	da0d      	bge.n	800afc6 <__swhatbuf_r+0x2e>
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afb0:	f04f 0100 	mov.w	r1, #0
 800afb4:	bf14      	ite	ne
 800afb6:	2340      	movne	r3, #64	@ 0x40
 800afb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800afbc:	2000      	movs	r0, #0
 800afbe:	6031      	str	r1, [r6, #0]
 800afc0:	602b      	str	r3, [r5, #0]
 800afc2:	b016      	add	sp, #88	@ 0x58
 800afc4:	bd70      	pop	{r4, r5, r6, pc}
 800afc6:	466a      	mov	r2, sp
 800afc8:	f000 f848 	bl	800b05c <_fstat_r>
 800afcc:	2800      	cmp	r0, #0
 800afce:	dbec      	blt.n	800afaa <__swhatbuf_r+0x12>
 800afd0:	9901      	ldr	r1, [sp, #4]
 800afd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800afd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800afda:	4259      	negs	r1, r3
 800afdc:	4159      	adcs	r1, r3
 800afde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afe2:	e7eb      	b.n	800afbc <__swhatbuf_r+0x24>

0800afe4 <__smakebuf_r>:
 800afe4:	898b      	ldrh	r3, [r1, #12]
 800afe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afe8:	079d      	lsls	r5, r3, #30
 800afea:	4606      	mov	r6, r0
 800afec:	460c      	mov	r4, r1
 800afee:	d507      	bpl.n	800b000 <__smakebuf_r+0x1c>
 800aff0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	6123      	str	r3, [r4, #16]
 800aff8:	2301      	movs	r3, #1
 800affa:	6163      	str	r3, [r4, #20]
 800affc:	b003      	add	sp, #12
 800affe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b000:	ab01      	add	r3, sp, #4
 800b002:	466a      	mov	r2, sp
 800b004:	f7ff ffc8 	bl	800af98 <__swhatbuf_r>
 800b008:	9f00      	ldr	r7, [sp, #0]
 800b00a:	4605      	mov	r5, r0
 800b00c:	4639      	mov	r1, r7
 800b00e:	4630      	mov	r0, r6
 800b010:	f7fe fee6 	bl	8009de0 <_malloc_r>
 800b014:	b948      	cbnz	r0, 800b02a <__smakebuf_r+0x46>
 800b016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b01a:	059a      	lsls	r2, r3, #22
 800b01c:	d4ee      	bmi.n	800affc <__smakebuf_r+0x18>
 800b01e:	f023 0303 	bic.w	r3, r3, #3
 800b022:	f043 0302 	orr.w	r3, r3, #2
 800b026:	81a3      	strh	r3, [r4, #12]
 800b028:	e7e2      	b.n	800aff0 <__smakebuf_r+0xc>
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	6020      	str	r0, [r4, #0]
 800b02e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b032:	81a3      	strh	r3, [r4, #12]
 800b034:	9b01      	ldr	r3, [sp, #4]
 800b036:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b03a:	b15b      	cbz	r3, 800b054 <__smakebuf_r+0x70>
 800b03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b040:	4630      	mov	r0, r6
 800b042:	f000 f81d 	bl	800b080 <_isatty_r>
 800b046:	b128      	cbz	r0, 800b054 <__smakebuf_r+0x70>
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	f023 0303 	bic.w	r3, r3, #3
 800b04e:	f043 0301 	orr.w	r3, r3, #1
 800b052:	81a3      	strh	r3, [r4, #12]
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	431d      	orrs	r5, r3
 800b058:	81a5      	strh	r5, [r4, #12]
 800b05a:	e7cf      	b.n	800affc <__smakebuf_r+0x18>

0800b05c <_fstat_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4d07      	ldr	r5, [pc, #28]	@ (800b07c <_fstat_r+0x20>)
 800b060:	2300      	movs	r3, #0
 800b062:	4604      	mov	r4, r0
 800b064:	4608      	mov	r0, r1
 800b066:	4611      	mov	r1, r2
 800b068:	602b      	str	r3, [r5, #0]
 800b06a:	f7f7 f883 	bl	8002174 <_fstat>
 800b06e:	1c43      	adds	r3, r0, #1
 800b070:	d102      	bne.n	800b078 <_fstat_r+0x1c>
 800b072:	682b      	ldr	r3, [r5, #0]
 800b074:	b103      	cbz	r3, 800b078 <_fstat_r+0x1c>
 800b076:	6023      	str	r3, [r4, #0]
 800b078:	bd38      	pop	{r3, r4, r5, pc}
 800b07a:	bf00      	nop
 800b07c:	20001378 	.word	0x20001378

0800b080 <_isatty_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4d06      	ldr	r5, [pc, #24]	@ (800b09c <_isatty_r+0x1c>)
 800b084:	2300      	movs	r3, #0
 800b086:	4604      	mov	r4, r0
 800b088:	4608      	mov	r0, r1
 800b08a:	602b      	str	r3, [r5, #0]
 800b08c:	f7f7 f882 	bl	8002194 <_isatty>
 800b090:	1c43      	adds	r3, r0, #1
 800b092:	d102      	bne.n	800b09a <_isatty_r+0x1a>
 800b094:	682b      	ldr	r3, [r5, #0]
 800b096:	b103      	cbz	r3, 800b09a <_isatty_r+0x1a>
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
 800b09c:	20001378 	.word	0x20001378

0800b0a0 <_init>:
 800b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a2:	bf00      	nop
 800b0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0a6:	bc08      	pop	{r3}
 800b0a8:	469e      	mov	lr, r3
 800b0aa:	4770      	bx	lr

0800b0ac <_fini>:
 800b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ae:	bf00      	nop
 800b0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b2:	bc08      	pop	{r3}
 800b0b4:	469e      	mov	lr, r3
 800b0b6:	4770      	bx	lr
