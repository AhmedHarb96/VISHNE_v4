
VISHNE_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b770  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002520  0800b900  0800b900  0000c900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de20  0800de20  0000f200  2**0
                  CONTENTS
  4 .ARM          00000008  0800de20  0800de20  0000ee20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de28  0800de28  0000f200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de28  0800de28  0000ee28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de2c  0800de2c  0000ee2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800de30  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f200  2**0
                  CONTENTS
 10 .bss          000011c0  20000200  20000200  0000f200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200013c0  200013c0  0000f200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174b5  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000351f  00000000  00000000  000266e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  00029c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000105f  00000000  00000000  0002b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257e9  00000000  00000000  0002c15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba31  00000000  00000000  00051948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df32a  00000000  00000000  0006d379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0014c6a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069e0  00000000  00000000  0014c72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0015310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8e8 	.word	0x0800b8e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800b8e8 	.word	0x0800b8e8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f001 fa04 	bl	80022c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 f816 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 fa3c 	bl	8001340 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec8:	f000 f9fc 	bl	80012c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ecc:	f000 f9d0 	bl	8001270 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ed0:	f000 f92e 	bl	8001130 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000ed4:	f000 f876 	bl	8000fc4 <MX_ADC3_Init>
  MX_SPI3_Init();
 8000ed8:	f000 f8f4 	bl	80010c4 <MX_SPI3_Init>
  MX_I2C3_Init();
 8000edc:	f000 f8c4 	bl	8001068 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8000ee0:	f007 fdc2 	bl	8008a68 <DWT_Init>

  systemSetup();
 8000ee4:	f007 fe12 	bl	8008b0c <systemSetup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  systemLoop();
 8000ee8:	f007 fe06 	bl	8008af8 <systemLoop>
  {
 8000eec:	bf00      	nop
 8000eee:	e7fb      	b.n	8000ee8 <main+0x30>

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	@ 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	2230      	movs	r2, #48	@ 0x30
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f008 fc3b 	bl	800977a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <SystemClock_Config+0xcc>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	4a27      	ldr	r2, [pc, #156]	@ (8000fbc <SystemClock_Config+0xcc>)
 8000f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f24:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <SystemClock_Config+0xcc>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <SystemClock_Config+0xd0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a21      	ldr	r2, [pc, #132]	@ (8000fc0 <SystemClock_Config+0xd0>)
 8000f3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <SystemClock_Config+0xd0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f60:	2304      	movs	r3, #4
 8000f62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f64:	2348      	movs	r3, #72	@ 0x48
 8000f66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fd43 	bl	8004a00 <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f80:	f000 fad6 	bl	8001530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
 8000f86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 ffa4 	bl	8004ef0 <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fae:	f000 fabf 	bl	8001530 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3750      	adds	r7, #80	@ 0x50
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <MX_ADC3_Init+0x98>)
 8000fd8:	4a21      	ldr	r2, [pc, #132]	@ (8001060 <MX_ADC3_Init+0x9c>)
 8000fda:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <MX_ADC3_Init+0x98>)
 8000fde:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fe2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <MX_ADC3_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <MX_ADC3_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <MX_ADC3_Init+0x98>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	@ (800105c <MX_ADC3_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <MX_ADC3_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001004:	4b15      	ldr	r3, [pc, #84]	@ (800105c <MX_ADC3_Init+0x98>)
 8001006:	4a17      	ldr	r2, [pc, #92]	@ (8001064 <MX_ADC3_Init+0xa0>)
 8001008:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100a:	4b14      	ldr	r3, [pc, #80]	@ (800105c <MX_ADC3_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <MX_ADC3_Init+0x98>)
 8001012:	2201      	movs	r2, #1
 8001014:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <MX_ADC3_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <MX_ADC3_Init+0x98>)
 8001020:	2201      	movs	r2, #1
 8001022:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001024:	480d      	ldr	r0, [pc, #52]	@ (800105c <MX_ADC3_Init+0x98>)
 8001026:	f001 f9e5 	bl	80023f4 <HAL_ADC_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001030:	f000 fa7e 	bl	8001530 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001034:	2301      	movs	r3, #1
 8001036:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001040:	463b      	mov	r3, r7
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	@ (800105c <MX_ADC3_Init+0x98>)
 8001046:	f001 fb47 	bl	80026d8 <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001050:	f000 fa6e 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000021c 	.word	0x2000021c
 8001060:	40012200 	.word	0x40012200
 8001064:	0f000001 	.word	0x0f000001

08001068 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <MX_I2C3_Init+0x50>)
 800106e:	4a13      	ldr	r2, [pc, #76]	@ (80010bc <MX_I2C3_Init+0x54>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;         //100000    max=400khz
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_I2C3_Init+0x50>)
 8001074:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <MX_I2C3_Init+0x58>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_I2C3_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_I2C3_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_I2C3_Init+0x50>)
 8001086:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800108a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <MX_I2C3_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_I2C3_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <MX_I2C3_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_I2C3_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <MX_I2C3_Init+0x50>)
 80010a6:	f002 fcb1 	bl	8003a0c <HAL_I2C_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80010b0:	f000 fa3e 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200002c4 	.word	0x200002c4
 80010bc:	40005c00 	.word	0x40005c00
 80010c0:	000186a0 	.word	0x000186a0

080010c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_SPI3_Init+0x64>)
 80010ca:	4a18      	ldr	r2, [pc, #96]	@ (800112c <MX_SPI3_Init+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <MX_SPI3_Init+0x64>)
 80010d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_SPI3_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_SPI3_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_SPI3_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <MX_SPI3_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_SPI3_Init+0x64>)
 80010f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <MX_SPI3_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <MX_SPI3_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <MX_SPI3_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <MX_SPI3_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <MX_SPI3_Init+0x64>)
 8001110:	220a      	movs	r2, #10
 8001112:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <MX_SPI3_Init+0x64>)
 8001116:	f004 f90b 	bl	8005330 <HAL_SPI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001120:	f000 fa06 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000318 	.word	0x20000318
 800112c:	40003c00 	.word	0x40003c00

08001130 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b096      	sub	sp, #88	@ 0x58
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	615a      	str	r2, [r3, #20]
 8001160:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2220      	movs	r2, #32
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f008 fb06 	bl	800977a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116e:	4b3e      	ldr	r3, [pc, #248]	@ (8001268 <MX_TIM1_Init+0x138>)
 8001170:	4a3e      	ldr	r2, [pc, #248]	@ (800126c <MX_TIM1_Init+0x13c>)
 8001172:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 53-1;
 8001174:	4b3c      	ldr	r3, [pc, #240]	@ (8001268 <MX_TIM1_Init+0x138>)
 8001176:	2234      	movs	r2, #52	@ 0x34
 8001178:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b3b      	ldr	r3, [pc, #236]	@ (8001268 <MX_TIM1_Init+0x138>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8001180:	4b39      	ldr	r3, [pc, #228]	@ (8001268 <MX_TIM1_Init+0x138>)
 8001182:	2209      	movs	r2, #9
 8001184:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b38      	ldr	r3, [pc, #224]	@ (8001268 <MX_TIM1_Init+0x138>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118c:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <MX_TIM1_Init+0x138>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001192:	4b35      	ldr	r3, [pc, #212]	@ (8001268 <MX_TIM1_Init+0x138>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001198:	4833      	ldr	r0, [pc, #204]	@ (8001268 <MX_TIM1_Init+0x138>)
 800119a:	f004 fb71 	bl	8005880 <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80011a4:	f000 f9c4 	bl	8001530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011b2:	4619      	mov	r1, r3
 80011b4:	482c      	ldr	r0, [pc, #176]	@ (8001268 <MX_TIM1_Init+0x138>)
 80011b6:	f004 fd95 	bl	8005ce4 <HAL_TIM_ConfigClockSource>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80011c0:	f000 f9b6 	bl	8001530 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011c4:	4828      	ldr	r0, [pc, #160]	@ (8001268 <MX_TIM1_Init+0x138>)
 80011c6:	f004 fbaa 	bl	800591e <HAL_TIM_PWM_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80011d0:	f000 f9ae 	bl	8001530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011e0:	4619      	mov	r1, r3
 80011e2:	4821      	ldr	r0, [pc, #132]	@ (8001268 <MX_TIM1_Init+0x138>)
 80011e4:	f005 f962 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80011ee:	f000 f99f 	bl	8001530 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f2:	2360      	movs	r3, #96	@ 0x60
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	4814      	ldr	r0, [pc, #80]	@ (8001268 <MX_TIM1_Init+0x138>)
 8001218:	f004 fca2 	bl	8005b60 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001222:	f000 f985 	bl	8001530 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800123a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800123e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4807      	ldr	r0, [pc, #28]	@ (8001268 <MX_TIM1_Init+0x138>)
 800124a:	f005 f9ab 	bl	80065a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001254:	f000 f96c 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001258:	4803      	ldr	r0, [pc, #12]	@ (8001268 <MX_TIM1_Init+0x138>)
 800125a:	f000 fe1f 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 800125e:	bf00      	nop
 8001260:	3758      	adds	r7, #88	@ 0x58
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000370 	.word	0x20000370
 800126c:	40010000 	.word	0x40010000

08001270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001276:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <MX_USART2_UART_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 80012a8:	f005 f9ce 	bl	8006648 <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012b2:	f000 f93d 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000418 	.word	0x20000418
 80012c0:	40004400 	.word	0x40004400

080012c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <MX_DMA_Init+0x78>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a1a      	ldr	r2, [pc, #104]	@ (800133c <MX_DMA_Init+0x78>)
 80012d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_DMA_Init+0x78>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	4b14      	ldr	r3, [pc, #80]	@ (800133c <MX_DMA_Init+0x78>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a13      	ldr	r2, [pc, #76]	@ (800133c <MX_DMA_Init+0x78>)
 80012f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_DMA_Init+0x78>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2010      	movs	r0, #16
 8001308:	f001 fd61 	bl	8002dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800130c:	2010      	movs	r0, #16
 800130e:	f001 fd7a 	bl	8002e06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2038      	movs	r0, #56	@ 0x38
 8001318:	f001 fd59 	bl	8002dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800131c:	2038      	movs	r0, #56	@ 0x38
 800131e:	f001 fd72 	bl	8002e06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2039      	movs	r0, #57	@ 0x39
 8001328:	f001 fd51 	bl	8002dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800132c:	2039      	movs	r0, #57	@ 0x39
 800132e:	f001 fd6a 	bl	8002e06 <HAL_NVIC_EnableIRQ>

}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	4b70      	ldr	r3, [pc, #448]	@ (800151c <MX_GPIO_Init+0x1dc>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a6f      	ldr	r2, [pc, #444]	@ (800151c <MX_GPIO_Init+0x1dc>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b6d      	ldr	r3, [pc, #436]	@ (800151c <MX_GPIO_Init+0x1dc>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	4b69      	ldr	r3, [pc, #420]	@ (800151c <MX_GPIO_Init+0x1dc>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a68      	ldr	r2, [pc, #416]	@ (800151c <MX_GPIO_Init+0x1dc>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b66      	ldr	r3, [pc, #408]	@ (800151c <MX_GPIO_Init+0x1dc>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b62      	ldr	r3, [pc, #392]	@ (800151c <MX_GPIO_Init+0x1dc>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a61      	ldr	r2, [pc, #388]	@ (800151c <MX_GPIO_Init+0x1dc>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b5f      	ldr	r3, [pc, #380]	@ (800151c <MX_GPIO_Init+0x1dc>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b5b      	ldr	r3, [pc, #364]	@ (800151c <MX_GPIO_Init+0x1dc>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a5a      	ldr	r2, [pc, #360]	@ (800151c <MX_GPIO_Init+0x1dc>)
 80013b4:	f043 0310 	orr.w	r3, r3, #16
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b58      	ldr	r3, [pc, #352]	@ (800151c <MX_GPIO_Init+0x1dc>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b54      	ldr	r3, [pc, #336]	@ (800151c <MX_GPIO_Init+0x1dc>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a53      	ldr	r2, [pc, #332]	@ (800151c <MX_GPIO_Init+0x1dc>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b51      	ldr	r3, [pc, #324]	@ (800151c <MX_GPIO_Init+0x1dc>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b4d      	ldr	r3, [pc, #308]	@ (800151c <MX_GPIO_Init+0x1dc>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a4c      	ldr	r2, [pc, #304]	@ (800151c <MX_GPIO_Init+0x1dc>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b4a      	ldr	r3, [pc, #296]	@ (800151c <MX_GPIO_Init+0x1dc>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2140      	movs	r1, #64	@ 0x40
 8001402:	4847      	ldr	r0, [pc, #284]	@ (8001520 <MX_GPIO_Init+0x1e0>)
 8001404:	f002 fad0 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin|READY_LED_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800140e:	4845      	ldr	r0, [pc, #276]	@ (8001524 <MX_GPIO_Init+0x1e4>)
 8001410:	f002 faca 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CE_Pin|LCD_DC_Pin|LCD_RST_Pin|LCD_BL_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	210f      	movs	r1, #15
 8001418:	4843      	ldr	r0, [pc, #268]	@ (8001528 <MX_GPIO_Init+0x1e8>)
 800141a:	f002 fac5 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin|SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001424:	4841      	ldr	r0, [pc, #260]	@ (800152c <MX_GPIO_Init+0x1ec>)
 8001426:	f002 fabf 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EOS_Pin */
  GPIO_InitStruct.Pin = EOS_Pin;
 800142a:	2310      	movs	r3, #16
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EOS_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	4838      	ldr	r0, [pc, #224]	@ (8001520 <MX_GPIO_Init+0x1e0>)
 8001440:	f002 f8fe 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001444:	2320      	movs	r3, #32
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4832      	ldr	r0, [pc, #200]	@ (8001520 <MX_GPIO_Init+0x1e0>)
 8001458:	f002 f8f2 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800145c:	2340      	movs	r3, #64	@ 0x40
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	482b      	ldr	r0, [pc, #172]	@ (8001520 <MX_GPIO_Init+0x1e0>)
 8001474:	f002 f8e4 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERR_BUZZER_Pin READY_LED_Pin */
  GPIO_InitStruct.Pin = ERR_BUZZER_Pin|READY_LED_Pin;
 8001478:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4824      	ldr	r0, [pc, #144]	@ (8001524 <MX_GPIO_Init+0x1e4>)
 8001492:	f002 f8d5 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : NEXT_BTN_Pin PREV_BTN_Pin */
  GPIO_InitStruct.Pin = NEXT_BTN_Pin|PREV_BTN_Pin;
 8001496:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	481e      	ldr	r0, [pc, #120]	@ (8001524 <MX_GPIO_Init+0x1e4>)
 80014ac:	f002 f8c8 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : NAVIGATE_BTN_Pin */
  GPIO_InitStruct.Pin = NAVIGATE_BTN_Pin;
 80014b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NAVIGATE_BTN_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	4819      	ldr	r0, [pc, #100]	@ (800152c <MX_GPIO_Init+0x1ec>)
 80014c6:	f002 f8bb 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CE_Pin LCD_DC_Pin LCD_RST_Pin LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_DC_Pin|LCD_RST_Pin|LCD_BL_Pin;
 80014ca:	230f      	movs	r3, #15
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4811      	ldr	r0, [pc, #68]	@ (8001528 <MX_GPIO_Init+0x1e8>)
 80014e2:	f002 f8ad 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEC_START_Pin SPEC_CLK_Pin SPEC_EOS_Pin SPEC_GAIN_Pin */
  GPIO_InitStruct.Pin = SPEC_START_Pin|SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin;
 80014e6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	480b      	ldr	r0, [pc, #44]	@ (800152c <MX_GPIO_Init+0x1ec>)
 8001500:	f002 f89e 	bl	8003640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* EXTI interrupt init */
      HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2102      	movs	r1, #2
 8001508:	200a      	movs	r0, #10
 800150a:	f001 fc60 	bl	8002dce <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800150e:	200a      	movs	r0, #10
 8001510:	f001 fc79 	bl	8002e06 <HAL_NVIC_EnableIRQ>

     // HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin, GPIO_PIN_SET);
/* USER CODE END MX_GPIO_Init_2 */
}
 8001514:	bf00      	nop
 8001516:	3730      	adds	r7, #48	@ 0x30
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40021000 	.word	0x40021000
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40020400 	.word	0x40020400

08001530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <Error_Handler+0x8>

0800153c <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2101      	movs	r1, #1
 8001544:	480a      	ldr	r0, [pc, #40]	@ (8001570 <ssd1306_Reset+0x34>)
 8001546:	f002 fa2f 	bl	80039a8 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2104      	movs	r1, #4
 800154e:	4808      	ldr	r0, [pc, #32]	@ (8001570 <ssd1306_Reset+0x34>)
 8001550:	f002 fa2a 	bl	80039a8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001554:	200a      	movs	r0, #10
 8001556:	f000 ff29 	bl	80023ac <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	2104      	movs	r1, #4
 800155e:	4804      	ldr	r0, [pc, #16]	@ (8001570 <ssd1306_Reset+0x34>)
 8001560:	f002 fa22 	bl	80039a8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001564:	200a      	movs	r0, #10
 8001566:	f000 ff21 	bl	80023ac <HAL_Delay>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40020c00 	.word	0x40020c00

08001574 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800157e:	2200      	movs	r2, #0
 8001580:	2101      	movs	r1, #1
 8001582:	480c      	ldr	r0, [pc, #48]	@ (80015b4 <ssd1306_WriteCommand+0x40>)
 8001584:	f002 fa10 	bl	80039a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001588:	2200      	movs	r2, #0
 800158a:	2102      	movs	r1, #2
 800158c:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <ssd1306_WriteCommand+0x40>)
 800158e:	f002 fa0b 	bl	80039a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001592:	1df9      	adds	r1, r7, #7
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	2201      	movs	r2, #1
 800159a:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <ssd1306_WriteCommand+0x44>)
 800159c:	f003 ff51 	bl	8005442 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80015a0:	2201      	movs	r2, #1
 80015a2:	2101      	movs	r1, #1
 80015a4:	4803      	ldr	r0, [pc, #12]	@ (80015b4 <ssd1306_WriteCommand+0x40>)
 80015a6:	f002 f9ff 	bl	80039a8 <HAL_GPIO_WritePin>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	20000318 	.word	0x20000318

080015bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80015c6:	2200      	movs	r2, #0
 80015c8:	2101      	movs	r1, #1
 80015ca:	480c      	ldr	r0, [pc, #48]	@ (80015fc <ssd1306_WriteData+0x40>)
 80015cc:	f002 f9ec 	bl	80039a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80015d0:	2201      	movs	r2, #1
 80015d2:	2102      	movs	r1, #2
 80015d4:	4809      	ldr	r0, [pc, #36]	@ (80015fc <ssd1306_WriteData+0x40>)
 80015d6:	f002 f9e7 	bl	80039a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4806      	ldr	r0, [pc, #24]	@ (8001600 <ssd1306_WriteData+0x44>)
 80015e6:	f003 ff2c 	bl	8005442 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80015ea:	2201      	movs	r2, #1
 80015ec:	2101      	movs	r1, #1
 80015ee:	4803      	ldr	r0, [pc, #12]	@ (80015fc <ssd1306_WriteData+0x40>)
 80015f0:	f002 f9da 	bl	80039a8 <HAL_GPIO_WritePin>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	20000318 	.word	0x20000318

08001604 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001608:	f7ff ff98 	bl	800153c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800160c:	2064      	movs	r0, #100	@ 0x64
 800160e:	f000 fecd 	bl	80023ac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001612:	2000      	movs	r0, #0
 8001614:	f000 fa7e 	bl	8001b14 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001618:	2020      	movs	r0, #32
 800161a:	f7ff ffab 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff ffa8 	bl	8001574 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001624:	20b0      	movs	r0, #176	@ 0xb0
 8001626:	f7ff ffa5 	bl	8001574 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800162a:	20c8      	movs	r0, #200	@ 0xc8
 800162c:	f7ff ffa2 	bl	8001574 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff ff9f 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001636:	2010      	movs	r0, #16
 8001638:	f7ff ff9c 	bl	8001574 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800163c:	2040      	movs	r0, #64	@ 0x40
 800163e:	f7ff ff99 	bl	8001574 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001642:	20ff      	movs	r0, #255	@ 0xff
 8001644:	f000 fa53 	bl	8001aee <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001648:	20a1      	movs	r0, #161	@ 0xa1
 800164a:	f7ff ff93 	bl	8001574 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800164e:	20a6      	movs	r0, #166	@ 0xa6
 8001650:	f7ff ff90 	bl	8001574 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001654:	20a8      	movs	r0, #168	@ 0xa8
 8001656:	f7ff ff8d 	bl	8001574 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800165a:	203f      	movs	r0, #63	@ 0x3f
 800165c:	f7ff ff8a 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001660:	20a4      	movs	r0, #164	@ 0xa4
 8001662:	f7ff ff87 	bl	8001574 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001666:	20d3      	movs	r0, #211	@ 0xd3
 8001668:	f7ff ff84 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff ff81 	bl	8001574 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001672:	20d5      	movs	r0, #213	@ 0xd5
 8001674:	f7ff ff7e 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001678:	20f0      	movs	r0, #240	@ 0xf0
 800167a:	f7ff ff7b 	bl	8001574 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800167e:	20d9      	movs	r0, #217	@ 0xd9
 8001680:	f7ff ff78 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001684:	2022      	movs	r0, #34	@ 0x22
 8001686:	f7ff ff75 	bl	8001574 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800168a:	20da      	movs	r0, #218	@ 0xda
 800168c:	f7ff ff72 	bl	8001574 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001690:	2012      	movs	r0, #18
 8001692:	f7ff ff6f 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001696:	20db      	movs	r0, #219	@ 0xdb
 8001698:	f7ff ff6c 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800169c:	2020      	movs	r0, #32
 800169e:	f7ff ff69 	bl	8001574 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80016a2:	208d      	movs	r0, #141	@ 0x8d
 80016a4:	f7ff ff66 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80016a8:	2014      	movs	r0, #20
 80016aa:	f7ff ff63 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80016ae:	2001      	movs	r0, #1
 80016b0:	f000 fa30 	bl	8001b14 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 f80f 	bl	80016d8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80016ba:	f000 f825 	bl	8001708 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80016be:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <ssd1306_Init+0xd0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80016c4:	4b03      	ldr	r3, [pc, #12]	@ (80016d4 <ssd1306_Init+0xd0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80016ca:	4b02      	ldr	r3, [pc, #8]	@ (80016d4 <ssd1306_Init+0xd0>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	711a      	strb	r2, [r3, #4]
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200008c0 	.word	0x200008c0

080016d8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <ssd1306_Fill+0x14>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e000      	b.n	80016ee <ssd1306_Fill+0x16>
 80016ec:	23ff      	movs	r3, #255	@ 0xff
 80016ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f2:	4619      	mov	r1, r3
 80016f4:	4803      	ldr	r0, [pc, #12]	@ (8001704 <ssd1306_Fill+0x2c>)
 80016f6:	f008 f840 	bl	800977a <memset>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200004c0 	.word	0x200004c0

08001708 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	e016      	b.n	8001742 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	3b50      	subs	r3, #80	@ 0x50
 8001718:	b2db      	uxtb	r3, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff2a 	bl	8001574 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff ff27 	bl	8001574 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001726:	2010      	movs	r0, #16
 8001728:	f7ff ff24 	bl	8001574 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	01db      	lsls	r3, r3, #7
 8001730:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <ssd1306_UpdateScreen+0x4c>)
 8001732:	4413      	add	r3, r2
 8001734:	2180      	movs	r1, #128	@ 0x80
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff40 	bl	80015bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	3301      	adds	r3, #1
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b07      	cmp	r3, #7
 8001746:	d9e5      	bls.n	8001714 <ssd1306_UpdateScreen+0xc>
    }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200004c0 	.word	0x200004c0

08001758 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	460b      	mov	r3, r1
 8001764:	71bb      	strb	r3, [r7, #6]
 8001766:	4613      	mov	r3, r2
 8001768:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db3d      	blt.n	80017ee <ssd1306_DrawPixel+0x96>
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	2b3f      	cmp	r3, #63	@ 0x3f
 8001776:	d83a      	bhi.n	80017ee <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001778:	797b      	ldrb	r3, [r7, #5]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d11a      	bne.n	80017b4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	79bb      	ldrb	r3, [r7, #6]
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	b2d8      	uxtb	r0, r3
 8001786:	4603      	mov	r3, r0
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	4413      	add	r3, r2
 800178c:	4a1b      	ldr	r2, [pc, #108]	@ (80017fc <ssd1306_DrawPixel+0xa4>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	b25a      	sxtb	r2, r3
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	2101      	movs	r1, #1
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b259      	sxtb	r1, r3
 80017a4:	79fa      	ldrb	r2, [r7, #7]
 80017a6:	4603      	mov	r3, r0
 80017a8:	01db      	lsls	r3, r3, #7
 80017aa:	4413      	add	r3, r2
 80017ac:	b2c9      	uxtb	r1, r1
 80017ae:	4a13      	ldr	r2, [pc, #76]	@ (80017fc <ssd1306_DrawPixel+0xa4>)
 80017b0:	54d1      	strb	r1, [r2, r3]
 80017b2:	e01d      	b.n	80017f0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017b4:	79fa      	ldrb	r2, [r7, #7]
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	b2d8      	uxtb	r0, r3
 80017bc:	4603      	mov	r3, r0
 80017be:	01db      	lsls	r3, r3, #7
 80017c0:	4413      	add	r3, r2
 80017c2:	4a0e      	ldr	r2, [pc, #56]	@ (80017fc <ssd1306_DrawPixel+0xa4>)
 80017c4:	5cd3      	ldrb	r3, [r2, r3]
 80017c6:	b25a      	sxtb	r2, r3
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	2101      	movs	r1, #1
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4013      	ands	r3, r2
 80017dc:	b259      	sxtb	r1, r3
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	4603      	mov	r3, r0
 80017e2:	01db      	lsls	r3, r3, #7
 80017e4:	4413      	add	r3, r2
 80017e6:	b2c9      	uxtb	r1, r1
 80017e8:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <ssd1306_DrawPixel+0xa4>)
 80017ea:	54d1      	strb	r1, [r2, r3]
 80017ec:	e000      	b.n	80017f0 <ssd1306_DrawPixel+0x98>
        return;
 80017ee:	bf00      	nop
    }
}
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200004c0 	.word	0x200004c0

08001800 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b089      	sub	sp, #36	@ 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	4604      	mov	r4, r0
 8001808:	4638      	mov	r0, r7
 800180a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800180e:	4623      	mov	r3, r4
 8001810:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b1f      	cmp	r3, #31
 8001816:	d902      	bls.n	800181e <ssd1306_WriteChar+0x1e>
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b7e      	cmp	r3, #126	@ 0x7e
 800181c:	d901      	bls.n	8001822 <ssd1306_WriteChar+0x22>
        return 0;
 800181e:	2300      	movs	r3, #0
 8001820:	e077      	b.n	8001912 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001822:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <ssd1306_WriteChar+0x11c>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	783b      	ldrb	r3, [r7, #0]
 800182a:	4413      	add	r3, r2
 800182c:	2b80      	cmp	r3, #128	@ 0x80
 800182e:	dc06      	bgt.n	800183e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001830:	4b3a      	ldr	r3, [pc, #232]	@ (800191c <ssd1306_WriteChar+0x11c>)
 8001832:	885b      	ldrh	r3, [r3, #2]
 8001834:	461a      	mov	r2, r3
 8001836:	787b      	ldrb	r3, [r7, #1]
 8001838:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800183a:	2b40      	cmp	r3, #64	@ 0x40
 800183c:	dd01      	ble.n	8001842 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800183e:	2300      	movs	r3, #0
 8001840:	e067      	b.n	8001912 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	e04e      	b.n	80018e6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	3b20      	subs	r3, #32
 800184e:	7879      	ldrb	r1, [r7, #1]
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4619      	mov	r1, r3
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	440b      	add	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	e036      	b.n	80018d6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001878:	4b28      	ldr	r3, [pc, #160]	@ (800191c <ssd1306_WriteChar+0x11c>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b2d8      	uxtb	r0, r3
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <ssd1306_WriteChar+0x11c>)
 8001888:	885b      	ldrh	r3, [r3, #2]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4413      	add	r3, r2
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff ff5d 	bl	8001758 <ssd1306_DrawPixel>
 800189e:	e017      	b.n	80018d0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80018a0:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <ssd1306_WriteChar+0x11c>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	b2d8      	uxtb	r0, r3
 80018ae:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <ssd1306_WriteChar+0x11c>)
 80018b0:	885b      	ldrh	r3, [r3, #2]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	b2d9      	uxtb	r1, r3
 80018bc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	f7ff ff44 	bl	8001758 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	3301      	adds	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	783b      	ldrb	r3, [r7, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4293      	cmp	r3, r2
 80018de:	d3c3      	bcc.n	8001868 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	3301      	adds	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	787b      	ldrb	r3, [r7, #1]
 80018e8:	461a      	mov	r2, r3
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d3ab      	bcc.n	8001848 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <ssd1306_WriteChar+0x11c>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	2a00      	cmp	r2, #0
 80018f8:	d005      	beq.n	8001906 <ssd1306_WriteChar+0x106>
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	3a20      	subs	r2, #32
 8001900:	440a      	add	r2, r1
 8001902:	7812      	ldrb	r2, [r2, #0]
 8001904:	e000      	b.n	8001908 <ssd1306_WriteChar+0x108>
 8001906:	783a      	ldrb	r2, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	b29a      	uxth	r2, r3
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <ssd1306_WriteChar+0x11c>)
 800190e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001910:	7bfb      	ldrb	r3, [r7, #15]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	bf00      	nop
 800191c:	200008c0 	.word	0x200008c0

08001920 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af02      	add	r7, sp, #8
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	4638      	mov	r0, r7
 800192a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800192e:	e013      	b.n	8001958 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	7818      	ldrb	r0, [r3, #0]
 8001934:	7e3b      	ldrb	r3, [r7, #24]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	463b      	mov	r3, r7
 800193a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193c:	f7ff ff60 	bl	8001800 <ssd1306_WriteChar>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d002      	beq.n	8001952 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	e008      	b.n	8001964 <ssd1306_WriteString+0x44>
        }
        str++;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e7      	bne.n	8001930 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	781b      	ldrb	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	460a      	mov	r2, r1
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	4613      	mov	r3, r2
 800197a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <ssd1306_SetCursor+0x2c>)
 8001982:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b03      	ldr	r3, [pc, #12]	@ (8001998 <ssd1306_SetCursor+0x2c>)
 800198a:	805a      	strh	r2, [r3, #2]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	200008c0 	.word	0x200008c0

0800199c <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	4603      	mov	r3, r0
 80019b0:	71bb      	strb	r3, [r7, #6]
 80019b2:	460b      	mov	r3, r1
 80019b4:	717b      	strb	r3, [r7, #5]
 80019b6:	4613      	mov	r3, r2
 80019b8:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	797b      	ldrb	r3, [r7, #5]
 80019be:	4293      	cmp	r3, r2
 80019c0:	bf28      	it	cs
 80019c2:	4613      	movcs	r3, r2
 80019c4:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80019c6:	797a      	ldrb	r2, [r7, #5]
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4293      	cmp	r3, r2
 80019cc:	bf38      	it	cc
 80019ce:	4613      	movcc	r3, r2
 80019d0:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80019d2:	79ba      	ldrb	r2, [r7, #6]
 80019d4:	793b      	ldrb	r3, [r7, #4]
 80019d6:	4293      	cmp	r3, r2
 80019d8:	bf28      	it	cs
 80019da:	4613      	movcs	r3, r2
 80019dc:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80019de:	793a      	ldrb	r2, [r7, #4]
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	4293      	cmp	r3, r2
 80019e4:	bf38      	it	cc
 80019e6:	4613      	movcc	r3, r2
 80019e8:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80019ea:	7afb      	ldrb	r3, [r7, #11]
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	e017      	b.n	8001a20 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80019f0:	7b7b      	ldrb	r3, [r7, #13]
 80019f2:	73bb      	strb	r3, [r7, #14]
 80019f4:	e009      	b.n	8001a0a <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80019f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019fa:	7bf9      	ldrb	r1, [r7, #15]
 80019fc:	7bbb      	ldrb	r3, [r7, #14]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff feaa 	bl	8001758 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001a04:	7bbb      	ldrb	r3, [r7, #14]
 8001a06:	3301      	adds	r3, #1
 8001a08:	73bb      	strb	r3, [r7, #14]
 8001a0a:	7bba      	ldrb	r2, [r7, #14]
 8001a0c:	7b3b      	ldrb	r3, [r7, #12]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d803      	bhi.n	8001a1a <ssd1306_FillRectangle+0x7e>
 8001a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	daed      	bge.n	80019f6 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	7abb      	ldrb	r3, [r7, #10]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d803      	bhi.n	8001a30 <ssd1306_FillRectangle+0x94>
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a2c:	d9e0      	bls.n	80019f0 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
}
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}

08001a38 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	603a      	str	r2, [r7, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	460b      	mov	r3, r1
 8001a48:	71bb      	strb	r3, [r7, #6]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001a4e:	797b      	ldrb	r3, [r7, #5]
 8001a50:	3307      	adds	r3, #7
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da00      	bge.n	8001a58 <ssd1306_DrawBitmap+0x20>
 8001a56:	3307      	adds	r3, #7
 8001a58:	10db      	asrs	r3, r3, #3
 8001a5a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db3e      	blt.n	8001ae6 <ssd1306_DrawBitmap+0xae>
 8001a68:	79bb      	ldrb	r3, [r7, #6]
 8001a6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a6c:	d83b      	bhi.n	8001ae6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73bb      	strb	r3, [r7, #14]
 8001a72:	e033      	b.n	8001adc <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	737b      	strb	r3, [r7, #13]
 8001a78:	e026      	b.n	8001ac8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001a7a:	7b7b      	ldrb	r3, [r7, #13]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	e00d      	b.n	8001aa8 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	7b7a      	ldrb	r2, [r7, #13]
 8001a98:	08d2      	lsrs	r2, r2, #3
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da08      	bge.n	8001ac2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001ab0:	79fa      	ldrb	r2, [r7, #7]
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	7f3a      	ldrb	r2, [r7, #28]
 8001aba:	79b9      	ldrb	r1, [r7, #6]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fe4b 	bl	8001758 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001ac2:	7b7b      	ldrb	r3, [r7, #13]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	737b      	strb	r3, [r7, #13]
 8001ac8:	7b7a      	ldrb	r2, [r7, #13]
 8001aca:	797b      	ldrb	r3, [r7, #5]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3d4      	bcc.n	8001a7a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	73bb      	strb	r3, [r7, #14]
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	71bb      	strb	r3, [r7, #6]
 8001adc:	7bba      	ldrb	r2, [r7, #14]
 8001ade:	7e3b      	ldrb	r3, [r7, #24]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3c7      	bcc.n	8001a74 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001ae4:	e000      	b.n	8001ae8 <ssd1306_DrawBitmap+0xb0>
        return;
 8001ae6:	bf00      	nop
}
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001af8:	2381      	movs	r3, #129	@ 0x81
 8001afa:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fd38 	bl	8001574 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fd34 	bl	8001574 <ssd1306_WriteCommand>
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001b24:	23af      	movs	r3, #175	@ 0xaf
 8001b26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <ssd1306_SetDisplayOn+0x38>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	715a      	strb	r2, [r3, #5]
 8001b2e:	e004      	b.n	8001b3a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001b30:	23ae      	movs	r3, #174	@ 0xae
 8001b32:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <ssd1306_SetDisplayOn+0x38>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fd19 	bl	8001574 <ssd1306_WriteCommand>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200008c0 	.word	0x200008c0

08001b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a08      	ldr	r2, [pc, #32]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2f      	ldr	r2, [pc, #188]	@ (8001c7c <HAL_ADC_MspInit+0xdc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d158      	bne.n	8001c74 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <HAL_ADC_MspInit+0xe0>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	4a2d      	ldr	r2, [pc, #180]	@ (8001c80 <HAL_ADC_MspInit+0xe0>)
 8001bcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <HAL_ADC_MspInit+0xe0>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <HAL_ADC_MspInit+0xe0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a26      	ldr	r2, [pc, #152]	@ (8001c80 <HAL_ADC_MspInit+0xe0>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_ADC_MspInit+0xe0>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = VIDEO_Pin;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VIDEO_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	481d      	ldr	r0, [pc, #116]	@ (8001c84 <HAL_ADC_MspInit+0xe4>)
 8001c0e:	f001 fd17 	bl	8003640 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001c12:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c14:	4a1d      	ldr	r2, [pc, #116]	@ (8001c8c <HAL_ADC_MspInit+0xec>)
 8001c16:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c1a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c1e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c20:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c26:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001c2c:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c32:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c34:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c3a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c42:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001c44:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c4a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c52:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001c58:	480b      	ldr	r0, [pc, #44]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c5a:	f001 f8ef 	bl	8002e3c <HAL_DMA_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001c64:	f7ff fc64 	bl	8001530 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c6e:	4a06      	ldr	r2, [pc, #24]	@ (8001c88 <HAL_ADC_MspInit+0xe8>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	@ 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40012200 	.word	0x40012200
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	20000264 	.word	0x20000264
 8001c8c:	40026410 	.word	0x40026410

08001c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a29      	ldr	r2, [pc, #164]	@ (8001d54 <HAL_I2C_MspInit+0xc4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d14b      	bne.n	8001d4a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b28      	ldr	r3, [pc, #160]	@ (8001d58 <HAL_I2C_MspInit+0xc8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	4a27      	ldr	r2, [pc, #156]	@ (8001d58 <HAL_I2C_MspInit+0xc8>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc2:	4b25      	ldr	r3, [pc, #148]	@ (8001d58 <HAL_I2C_MspInit+0xc8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b21      	ldr	r3, [pc, #132]	@ (8001d58 <HAL_I2C_MspInit+0xc8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	4a20      	ldr	r2, [pc, #128]	@ (8001d58 <HAL_I2C_MspInit+0xc8>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cde:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <HAL_I2C_MspInit+0xc8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf0:	2312      	movs	r3, #18
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4815      	ldr	r0, [pc, #84]	@ (8001d5c <HAL_I2C_MspInit+0xcc>)
 8001d08:	f001 fc9a 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d12:	2312      	movs	r3, #18
 8001d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <HAL_I2C_MspInit+0xd0>)
 8001d2a:	f001 fc89 	bl	8003640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <HAL_I2C_MspInit+0xc8>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a08      	ldr	r2, [pc, #32]	@ (8001d58 <HAL_I2C_MspInit+0xc8>)
 8001d38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_I2C_MspInit+0xc8>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	@ 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40005c00 	.word	0x40005c00
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020000 	.word	0x40020000

08001d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <HAL_SPI_MspInit+0x84>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d12c      	bne.n	8001de0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <HAL_SPI_MspInit+0x88>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	4a17      	ldr	r2, [pc, #92]	@ (8001dec <HAL_SPI_MspInit+0x88>)
 8001d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d96:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <HAL_SPI_MspInit+0x88>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <HAL_SPI_MspInit+0x88>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a10      	ldr	r2, [pc, #64]	@ (8001dec <HAL_SPI_MspInit+0x88>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <HAL_SPI_MspInit+0x88>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001dbe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <HAL_SPI_MspInit+0x8c>)
 8001ddc:	f001 fc30 	bl	8003640 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	@ 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40003c00 	.word	0x40003c00
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020800 	.word	0x40020800

08001df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a22      	ldr	r2, [pc, #136]	@ (8001e8c <HAL_TIM_Base_MspInit+0x98>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d13d      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	4a20      	ldr	r2, [pc, #128]	@ (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e16:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e24:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <HAL_TIM_Base_MspInit+0xa4>)
 8001e26:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e2a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001e2e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e30:	4b18      	ldr	r3, [pc, #96]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e32:	2240      	movs	r2, #64	@ 0x40
 8001e34:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e36:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e3c:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e42:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e4a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e52:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001e66:	480b      	ldr	r0, [pc, #44]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e68:	f000 ffe8 	bl	8002e3c <HAL_DMA_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001e72:	f7ff fb5d 	bl	8001530 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a06      	ldr	r2, [pc, #24]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e7c:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	200003b8 	.word	0x200003b8
 8001e98:	40026428 	.word	0x40026428

08001e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <HAL_TIM_MspPostInit+0x68>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d11e      	bne.n	8001efc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_TIM_MspPostInit+0x6c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a10      	ldr	r2, [pc, #64]	@ (8001f08 <HAL_TIM_MspPostInit+0x6c>)
 8001ec8:	f043 0310 	orr.w	r3, r3, #16
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_TIM_MspPostInit+0x6c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ede:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <HAL_TIM_MspPostInit+0x70>)
 8001ef8:	f001 fba2 	bl	8003640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40021000 	.word	0x40021000

08001f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a34      	ldr	r2, [pc, #208]	@ (8002000 <HAL_UART_MspInit+0xf0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d161      	bne.n	8001ff6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b33      	ldr	r3, [pc, #204]	@ (8002004 <HAL_UART_MspInit+0xf4>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	4a32      	ldr	r2, [pc, #200]	@ (8002004 <HAL_UART_MspInit+0xf4>)
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f42:	4b30      	ldr	r3, [pc, #192]	@ (8002004 <HAL_UART_MspInit+0xf4>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b2c      	ldr	r3, [pc, #176]	@ (8002004 <HAL_UART_MspInit+0xf4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a2b      	ldr	r2, [pc, #172]	@ (8002004 <HAL_UART_MspInit+0xf4>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <HAL_UART_MspInit+0xf4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4820      	ldr	r0, [pc, #128]	@ (8002008 <HAL_UART_MspInit+0xf8>)
 8001f86:	f001 fb5b 	bl	8003640 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001f8c:	4a20      	ldr	r2, [pc, #128]	@ (8002010 <HAL_UART_MspInit+0x100>)
 8001f8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f90:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001f92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f96:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f98:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa4:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001fa6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001faa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fac:	4b17      	ldr	r3, [pc, #92]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001fb8:	4b14      	ldr	r3, [pc, #80]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fbe:	4b13      	ldr	r3, [pc, #76]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fca:	4810      	ldr	r0, [pc, #64]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001fcc:	f000 ff36 	bl	8002e3c <HAL_DMA_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001fd6:	f7ff faab 	bl	8001530 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001fde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <HAL_UART_MspInit+0xfc>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2026      	movs	r0, #38	@ 0x26
 8001fec:	f000 feef 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ff0:	2026      	movs	r0, #38	@ 0x26
 8001ff2:	f000 ff08 	bl	8002e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	@ 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40004400 	.word	0x40004400
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000
 800200c:	20000460 	.word	0x20000460
 8002010:	40026088 	.word	0x40026088

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <NMI_Handler+0x4>

0800201c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <HardFault_Handler+0x4>

08002024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <MemManage_Handler+0x4>

0800202c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <BusFault_Handler+0x4>

08002034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <UsageFault_Handler+0x4>

0800203c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206a:	f000 f97f 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002078:	4802      	ldr	r0, [pc, #8]	@ (8002084 <DMA1_Stream5_IRQHandler+0x10>)
 800207a:	f001 f877 	bl	800316c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000460 	.word	0x20000460

08002088 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800208c:	4802      	ldr	r0, [pc, #8]	@ (8002098 <USART2_IRQHandler+0x10>)
 800208e:	f004 fbb7 	bl	8006800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000418 	.word	0x20000418

0800209c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <DMA2_Stream0_IRQHandler+0x10>)
 80020a2:	f001 f863 	bl	800316c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000264 	.word	0x20000264

080020b0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80020b4:	4802      	ldr	r0, [pc, #8]	@ (80020c0 <DMA2_Stream1_IRQHandler+0x10>)
 80020b6:	f001 f859 	bl	800316c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200003b8 	.word	0x200003b8

080020c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return 1;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_kill>:

int _kill(int pid, int sig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020de:	f007 fb9f 	bl	8009820 <__errno>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2216      	movs	r2, #22
 80020e6:	601a      	str	r2, [r3, #0]
  return -1;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_exit>:

void _exit (int status)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ffe7 	bl	80020d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002106:	bf00      	nop
 8002108:	e7fd      	b.n	8002106 <_exit+0x12>

0800210a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e00a      	b.n	8002132 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800211c:	f3af 8000 	nop.w
 8002120:	4601      	mov	r1, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	60ba      	str	r2, [r7, #8]
 8002128:	b2ca      	uxtb	r2, r1
 800212a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	dbf0      	blt.n	800211c <_read+0x12>
  }

  return len;
 800213a:	687b      	ldr	r3, [r7, #4]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e009      	b.n	800216a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	60ba      	str	r2, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3301      	adds	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	429a      	cmp	r2, r3
 8002170:	dbf1      	blt.n	8002156 <_write+0x12>
  }
  return len;
 8002172:	687b      	ldr	r3, [r7, #4]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_close>:

int _close(int file)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021a4:	605a      	str	r2, [r3, #4]
  return 0;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_isatty>:

int _isatty(int file)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021bc:	2301      	movs	r3, #1
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b085      	sub	sp, #20
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ec:	4a14      	ldr	r2, [pc, #80]	@ (8002240 <_sbrk+0x5c>)
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <_sbrk+0x60>)
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f8:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002200:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <_sbrk+0x64>)
 8002202:	4a12      	ldr	r2, [pc, #72]	@ (800224c <_sbrk+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002214:	f007 fb04 	bl	8009820 <__errno>
 8002218:	4603      	mov	r3, r0
 800221a:	220c      	movs	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	e009      	b.n	8002238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002224:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222a:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <_sbrk+0x64>)
 8002234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20020000 	.word	0x20020000
 8002244:	00000400 	.word	0x00000400
 8002248:	200008c8 	.word	0x200008c8
 800224c:	200013c0 	.word	0x200013c0

08002250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <SystemInit+0x20>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	4a05      	ldr	r2, [pc, #20]	@ (8002270 <SystemInit+0x20>)
 800225c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002278:	f7ff ffea 	bl	8002250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800227c:	480c      	ldr	r0, [pc, #48]	@ (80022b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800227e:	490d      	ldr	r1, [pc, #52]	@ (80022b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002280:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0a      	ldr	r2, [pc, #40]	@ (80022bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002294:	4c0a      	ldr	r4, [pc, #40]	@ (80022c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a2:	f007 fac3 	bl	800982c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a6:	f7fe fe07 	bl	8000eb8 <main>
  bx  lr    
 80022aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80022b8:	0800de30 	.word	0x0800de30
  ldr r2, =_sbss
 80022bc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80022c0:	200013c0 	.word	0x200013c0

080022c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC_IRQHandler>
	...

080022c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002308 <HAL_Init+0x40>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <HAL_Init+0x40>)
 80022de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a07      	ldr	r2, [pc, #28]	@ (8002308 <HAL_Init+0x40>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 fd61 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f6:	200f      	movs	r0, #15
 80022f8:	f000 f808 	bl	800230c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022fc:	f7ff fc28 	bl	8001b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00

0800230c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002314:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <HAL_InitTick+0x54>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_InitTick+0x58>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fd79 	bl	8002e22 <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e00e      	b.n	8002358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d80a      	bhi.n	8002356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002340:	2200      	movs	r2, #0
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f000 fd41 	bl	8002dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800234c:	4a06      	ldr	r2, [pc, #24]	@ (8002368 <HAL_InitTick+0x5c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000000 	.word	0x20000000
 8002364:	20000008 	.word	0x20000008
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	@ (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000008 	.word	0x20000008
 8002390:	200008cc 	.word	0x200008cc

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	200008cc 	.word	0x200008cc

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <HAL_Delay+0x44>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffde 	bl	8002394 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000008 	.word	0x20000008

080023f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e033      	b.n	8002472 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fbc4 	bl	8001ba0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800243a:	f023 0302 	bic.w	r3, r3, #2
 800243e:	f043 0202 	orr.w	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa68 	bl	800291c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	641a      	str	r2, [r3, #64]	@ 0x40
 8002462:	e001      	b.n	8002468 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_ADC_Start_DMA+0x1e>
 8002496:	2302      	movs	r3, #2
 8002498:	e0e9      	b.n	800266e <HAL_ADC_Start_DMA+0x1f2>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d018      	beq.n	80024e2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024c0:	4b6d      	ldr	r3, [pc, #436]	@ (8002678 <HAL_ADC_Start_DMA+0x1fc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6d      	ldr	r2, [pc, #436]	@ (800267c <HAL_ADC_Start_DMA+0x200>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	0c9a      	lsrs	r2, r3, #18
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024d4:	e002      	b.n	80024dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	3b01      	subs	r3, #1
 80024da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f9      	bne.n	80024d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024f0:	d107      	bne.n	8002502 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002500:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	f040 80a1 	bne.w	8002654 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800253c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002550:	d106      	bne.n	8002560 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f023 0206 	bic.w	r2, r3, #6
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
 800255e:	e002      	b.n	8002566 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800256e:	4b44      	ldr	r3, [pc, #272]	@ (8002680 <HAL_ADC_Start_DMA+0x204>)
 8002570:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002576:	4a43      	ldr	r2, [pc, #268]	@ (8002684 <HAL_ADC_Start_DMA+0x208>)
 8002578:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257e:	4a42      	ldr	r2, [pc, #264]	@ (8002688 <HAL_ADC_Start_DMA+0x20c>)
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002586:	4a41      	ldr	r2, [pc, #260]	@ (800268c <HAL_ADC_Start_DMA+0x210>)
 8002588:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002592:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80025a2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025b2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	334c      	adds	r3, #76	@ 0x4c
 80025be:	4619      	mov	r1, r3
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f000 fce8 	bl	8002f98 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d12a      	bne.n	800262a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002690 <HAL_ADC_Start_DMA+0x214>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d015      	beq.n	800260a <HAL_ADC_Start_DMA+0x18e>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002694 <HAL_ADC_Start_DMA+0x218>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d105      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x178>
 80025e8:	4b25      	ldr	r3, [pc, #148]	@ (8002680 <HAL_ADC_Start_DMA+0x204>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a27      	ldr	r2, [pc, #156]	@ (8002698 <HAL_ADC_Start_DMA+0x21c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d136      	bne.n	800266c <HAL_ADC_Start_DMA+0x1f0>
 80025fe:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <HAL_ADC_Start_DMA+0x204>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d130      	bne.n	800266c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d129      	bne.n	800266c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	e020      	b.n	800266c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <HAL_ADC_Start_DMA+0x214>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d11b      	bne.n	800266c <HAL_ADC_Start_DMA+0x1f0>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d114      	bne.n	800266c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	e00b      	b.n	800266c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f043 0210 	orr.w	r2, r3, #16
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002664:	f043 0201 	orr.w	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000000 	.word	0x20000000
 800267c:	431bde83 	.word	0x431bde83
 8002680:	40012300 	.word	0x40012300
 8002684:	08002b15 	.word	0x08002b15
 8002688:	08002bcf 	.word	0x08002bcf
 800268c:	08002beb 	.word	0x08002beb
 8002690:	40012000 	.word	0x40012000
 8002694:	40012100 	.word	0x40012100
 8002698:	40012200 	.word	0x40012200

0800269c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1c>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e105      	b.n	8002900 <HAL_ADC_ConfigChannel+0x228>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b09      	cmp	r3, #9
 8002702:	d925      	bls.n	8002750 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68d9      	ldr	r1, [r3, #12]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	3b1e      	subs	r3, #30
 800271a:	2207      	movs	r2, #7
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43da      	mvns	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	400a      	ands	r2, r1
 8002728:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68d9      	ldr	r1, [r3, #12]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	4618      	mov	r0, r3
 800273c:	4603      	mov	r3, r0
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4403      	add	r3, r0
 8002742:	3b1e      	subs	r3, #30
 8002744:	409a      	lsls	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	e022      	b.n	8002796 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6919      	ldr	r1, [r3, #16]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	2207      	movs	r2, #7
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	400a      	ands	r2, r1
 8002772:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6919      	ldr	r1, [r3, #16]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	4603      	mov	r3, r0
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4403      	add	r3, r0
 800278c:	409a      	lsls	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b06      	cmp	r3, #6
 800279c:	d824      	bhi.n	80027e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b05      	subs	r3, #5
 80027b0:	221f      	movs	r2, #31
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b05      	subs	r3, #5
 80027da:	fa00 f203 	lsl.w	r2, r0, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027e6:	e04c      	b.n	8002882 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	d824      	bhi.n	800283a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	3b23      	subs	r3, #35	@ 0x23
 8002802:	221f      	movs	r2, #31
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43da      	mvns	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	400a      	ands	r2, r1
 8002810:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	b29b      	uxth	r3, r3
 800281e:	4618      	mov	r0, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3b23      	subs	r3, #35	@ 0x23
 800282c:	fa00 f203 	lsl.w	r2, r0, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
 8002838:	e023      	b.n	8002882 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	3b41      	subs	r3, #65	@ 0x41
 800284c:	221f      	movs	r2, #31
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	400a      	ands	r2, r1
 800285a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	4618      	mov	r0, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	3b41      	subs	r3, #65	@ 0x41
 8002876:	fa00 f203 	lsl.w	r2, r0, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002882:	4b22      	ldr	r3, [pc, #136]	@ (800290c <HAL_ADC_ConfigChannel+0x234>)
 8002884:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a21      	ldr	r2, [pc, #132]	@ (8002910 <HAL_ADC_ConfigChannel+0x238>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d109      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b12      	cmp	r3, #18
 8002896:	d105      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	@ (8002910 <HAL_ADC_ConfigChannel+0x238>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d123      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x21e>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d003      	beq.n	80028be <HAL_ADC_ConfigChannel+0x1e6>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b11      	cmp	r3, #17
 80028bc:	d11b      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d111      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <HAL_ADC_ConfigChannel+0x23c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a10      	ldr	r2, [pc, #64]	@ (8002918 <HAL_ADC_ConfigChannel+0x240>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	0c9a      	lsrs	r2, r3, #18
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028e8:	e002      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f9      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	40012300 	.word	0x40012300
 8002910:	40012000 	.word	0x40012000
 8002914:	20000000 	.word	0x20000000
 8002918:	431bde83 	.word	0x431bde83

0800291c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002924:	4b79      	ldr	r3, [pc, #484]	@ (8002b0c <ADC_Init+0x1f0>)
 8002926:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	431a      	orrs	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	021a      	lsls	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002974:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002996:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ae:	4a58      	ldr	r2, [pc, #352]	@ (8002b10 <ADC_Init+0x1f4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d022      	beq.n	80029fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6899      	ldr	r1, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6899      	ldr	r1, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	e00f      	b.n	8002a1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a18:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0202 	bic.w	r2, r2, #2
 8002a28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7e1b      	ldrb	r3, [r3, #24]
 8002a34:	005a      	lsls	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a56:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	3b01      	subs	r3, #1
 8002a74:	035a      	lsls	r2, r3, #13
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	e007      	b.n	8002a90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a8e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	051a      	lsls	r2, r3, #20
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ac4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6899      	ldr	r1, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ad2:	025a      	lsls	r2, r3, #9
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6899      	ldr	r1, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	029a      	lsls	r2, r3, #10
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40012300 	.word	0x40012300
 8002b10:	0f000001 	.word	0x0f000001

08002b14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d13c      	bne.n	8002ba8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d12b      	bne.n	8002ba0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d127      	bne.n	8002ba0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d119      	bne.n	8002ba0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0220 	bic.w	r2, r2, #32
 8002b7a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7ff fd7b 	bl	800269c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ba6:	e00e      	b.n	8002bc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7ff fd85 	bl	80026c4 <HAL_ADC_ErrorCallback>
}
 8002bba:	e004      	b.n	8002bc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bda:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f7ff fd67 	bl	80026b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2240      	movs	r2, #64	@ 0x40
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	f043 0204 	orr.w	r2, r3, #4
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff fd5a 	bl	80026c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c34:	4013      	ands	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4a:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60d3      	str	r3, [r2, #12]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c64:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <__NVIC_GetPriorityGrouping+0x18>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	f003 0307 	and.w	r3, r3, #7
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db0b      	blt.n	8002ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4907      	ldr	r1, [pc, #28]	@ (8002cb4 <__NVIC_EnableIRQ+0x38>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	@ (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	@ (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	@ 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	@ 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d84:	d301      	bcc.n	8002d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d86:	2301      	movs	r3, #1
 8002d88:	e00f      	b.n	8002daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <SysTick_Config+0x40>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d92:	210f      	movs	r1, #15
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295
 8002d98:	f7ff ff8e 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <SysTick_Config+0x40>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da2:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <SysTick_Config+0x40>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	e000e010 	.word	0xe000e010

08002db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff29 	bl	8002c18 <__NVIC_SetPriorityGrouping>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de0:	f7ff ff3e 	bl	8002c60 <__NVIC_GetPriorityGrouping>
 8002de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	6978      	ldr	r0, [r7, #20]
 8002dec:	f7ff ff8e 	bl	8002d0c <NVIC_EncodePriority>
 8002df0:	4602      	mov	r2, r0
 8002df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff5d 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff31 	bl	8002c7c <__NVIC_EnableIRQ>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ffa2 	bl	8002d74 <SysTick_Config>
 8002e30:	4603      	mov	r3, r0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7ff faa4 	bl	8002394 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e099      	b.n	8002f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e78:	e00f      	b.n	8002e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e7a:	f7ff fa8b 	bl	8002394 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	d908      	bls.n	8002e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2203      	movs	r2, #3
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e078      	b.n	8002f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e8      	bne.n	8002e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4b38      	ldr	r3, [pc, #224]	@ (8002f94 <HAL_DMA_Init+0x158>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d107      	bne.n	8002f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	4313      	orrs	r3, r2
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 0307 	bic.w	r3, r3, #7
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d117      	bne.n	8002f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fb01 	bl	8003548 <DMA_CheckFifoParam>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2240      	movs	r2, #64	@ 0x40
 8002f50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e016      	b.n	8002f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fab8 	bl	80034dc <DMA_CalcBaseAndBitshift>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f74:	223f      	movs	r2, #63	@ 0x3f
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	f010803f 	.word	0xf010803f

08002f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_DMA_Start_IT+0x26>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e040      	b.n	8003040 <HAL_DMA_Start_IT+0xa8>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d12f      	bne.n	8003032 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa4a 	bl	8003480 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	223f      	movs	r2, #63	@ 0x3f
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0216 	orr.w	r2, r2, #22
 8003006:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0208 	orr.w	r2, r2, #8
 800301e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e005      	b.n	800303e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800303a:	2302      	movs	r3, #2
 800303c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003056:	f7ff f99d 	bl	8002394 <HAL_GetTick>
 800305a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d008      	beq.n	800307a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2280      	movs	r2, #128	@ 0x80
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e052      	b.n	8003120 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0216 	bic.w	r2, r2, #22
 8003088:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003098:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <HAL_DMA_Abort+0x62>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0208 	bic.w	r2, r2, #8
 80030b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ca:	e013      	b.n	80030f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030cc:	f7ff f962 	bl	8002394 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d90c      	bls.n	80030f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2203      	movs	r2, #3
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e015      	b.n	8003120 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e4      	bne.n	80030cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	223f      	movs	r2, #63	@ 0x3f
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d004      	beq.n	8003146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2280      	movs	r2, #128	@ 0x80
 8003140:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e00c      	b.n	8003160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2205      	movs	r2, #5
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003178:	4b8e      	ldr	r3, [pc, #568]	@ (80033b4 <HAL_DMA_IRQHandler+0x248>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a8e      	ldr	r2, [pc, #568]	@ (80033b8 <HAL_DMA_IRQHandler+0x24c>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	2208      	movs	r2, #8
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01a      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0204 	bic.w	r2, r2, #4
 80031be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	2208      	movs	r2, #8
 80031c6:	409a      	lsls	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031dc:	2201      	movs	r2, #1
 80031de:	409a      	lsls	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	2201      	movs	r2, #1
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003206:	f043 0202 	orr.w	r2, r3, #2
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	2204      	movs	r2, #4
 8003214:	409a      	lsls	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d012      	beq.n	8003244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003230:	2204      	movs	r2, #4
 8003232:	409a      	lsls	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	2210      	movs	r2, #16
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d043      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03c      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003266:	2210      	movs	r2, #16
 8003268:	409a      	lsls	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d018      	beq.n	80032ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d108      	bne.n	800329c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d024      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
 800329a:	e01f      	b.n	80032dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01b      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
 80032ac:	e016      	b.n	80032dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0208 	bic.w	r2, r2, #8
 80032ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	2220      	movs	r2, #32
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 808f 	beq.w	800340c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8087 	beq.w	800340c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	2220      	movs	r2, #32
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b05      	cmp	r3, #5
 8003314:	d136      	bne.n	8003384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0216 	bic.w	r2, r2, #22
 8003324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <HAL_DMA_IRQHandler+0x1da>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0208 	bic.w	r2, r2, #8
 8003354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	223f      	movs	r2, #63	@ 0x3f
 800335c:	409a      	lsls	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003376:	2b00      	cmp	r3, #0
 8003378:	d07e      	beq.n	8003478 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
        }
        return;
 8003382:	e079      	b.n	8003478 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d031      	beq.n	800340c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
 80033b0:	e02c      	b.n	800340c <HAL_DMA_IRQHandler+0x2a0>
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000
 80033b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d023      	beq.n	800340c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
 80033cc:	e01e      	b.n	800340c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10f      	bne.n	80033fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0210 	bic.w	r2, r2, #16
 80033ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003410:	2b00      	cmp	r3, #0
 8003412:	d032      	beq.n	800347a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d022      	beq.n	8003466 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2205      	movs	r2, #5
 8003424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	3301      	adds	r3, #1
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	429a      	cmp	r2, r3
 8003442:	d307      	bcc.n	8003454 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f2      	bne.n	8003438 <HAL_DMA_IRQHandler+0x2cc>
 8003452:	e000      	b.n	8003456 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003454:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4798      	blx	r3
 8003476:	e000      	b.n	800347a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003478:	bf00      	nop
    }
  }
}
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800349c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b40      	cmp	r3, #64	@ 0x40
 80034ac:	d108      	bne.n	80034c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034be:	e007      	b.n	80034d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	3b10      	subs	r3, #16
 80034ec:	4a14      	ldr	r2, [pc, #80]	@ (8003540 <DMA_CalcBaseAndBitshift+0x64>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034f6:	4a13      	ldr	r2, [pc, #76]	@ (8003544 <DMA_CalcBaseAndBitshift+0x68>)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b03      	cmp	r3, #3
 8003508:	d909      	bls.n	800351e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003512:	f023 0303 	bic.w	r3, r3, #3
 8003516:	1d1a      	adds	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	659a      	str	r2, [r3, #88]	@ 0x58
 800351c:	e007      	b.n	800352e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	aaaaaaab 	.word	0xaaaaaaab
 8003544:	0800d4a4 	.word	0x0800d4a4

08003548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11f      	bne.n	80035a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d856      	bhi.n	8003616 <DMA_CheckFifoParam+0xce>
 8003568:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <DMA_CheckFifoParam+0x28>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003581 	.word	0x08003581
 8003574:	08003593 	.word	0x08003593
 8003578:	08003581 	.word	0x08003581
 800357c:	08003617 	.word	0x08003617
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d046      	beq.n	800361a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003590:	e043      	b.n	800361a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003596:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800359a:	d140      	bne.n	800361e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a0:	e03d      	b.n	800361e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035aa:	d121      	bne.n	80035f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d837      	bhi.n	8003622 <DMA_CheckFifoParam+0xda>
 80035b2:	a201      	add	r2, pc, #4	@ (adr r2, 80035b8 <DMA_CheckFifoParam+0x70>)
 80035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	080035cf 	.word	0x080035cf
 80035c0:	080035c9 	.word	0x080035c9
 80035c4:	080035e1 	.word	0x080035e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e030      	b.n	8003630 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d025      	beq.n	8003626 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035de:	e022      	b.n	8003626 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035e8:	d11f      	bne.n	800362a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ee:	e01c      	b.n	800362a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d903      	bls.n	80035fe <DMA_CheckFifoParam+0xb6>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d003      	beq.n	8003604 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035fc:	e018      	b.n	8003630 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
      break;
 8003602:	e015      	b.n	8003630 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      break;
 8003614:	e00b      	b.n	800362e <DMA_CheckFifoParam+0xe6>
      break;
 8003616:	bf00      	nop
 8003618:	e00a      	b.n	8003630 <DMA_CheckFifoParam+0xe8>
      break;
 800361a:	bf00      	nop
 800361c:	e008      	b.n	8003630 <DMA_CheckFifoParam+0xe8>
      break;
 800361e:	bf00      	nop
 8003620:	e006      	b.n	8003630 <DMA_CheckFifoParam+0xe8>
      break;
 8003622:	bf00      	nop
 8003624:	e004      	b.n	8003630 <DMA_CheckFifoParam+0xe8>
      break;
 8003626:	bf00      	nop
 8003628:	e002      	b.n	8003630 <DMA_CheckFifoParam+0xe8>
      break;   
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <DMA_CheckFifoParam+0xe8>
      break;
 800362e:	bf00      	nop
    }
  } 
  
  return status; 
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop

08003640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	e16b      	b.n	8003934 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800365c:	2201      	movs	r2, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	f040 815a 	bne.w	800392e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d005      	beq.n	8003692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800368e:	2b02      	cmp	r3, #2
 8003690:	d130      	bne.n	80036f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c8:	2201      	movs	r2, #1
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 0201 	and.w	r2, r3, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d017      	beq.n	8003730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d123      	bne.n	8003784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	08da      	lsrs	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3208      	adds	r2, #8
 8003744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	08da      	lsrs	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3208      	adds	r2, #8
 800377e:	69b9      	ldr	r1, [r7, #24]
 8003780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0203 	and.w	r2, r3, #3
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80b4 	beq.w	800392e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	4b60      	ldr	r3, [pc, #384]	@ (800394c <HAL_GPIO_Init+0x30c>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	4a5f      	ldr	r2, [pc, #380]	@ (800394c <HAL_GPIO_Init+0x30c>)
 80037d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037d6:	4b5d      	ldr	r3, [pc, #372]	@ (800394c <HAL_GPIO_Init+0x30c>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003950 <HAL_GPIO_Init+0x310>)
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	3302      	adds	r3, #2
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	220f      	movs	r2, #15
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a52      	ldr	r2, [pc, #328]	@ (8003954 <HAL_GPIO_Init+0x314>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02b      	beq.n	8003866 <HAL_GPIO_Init+0x226>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a51      	ldr	r2, [pc, #324]	@ (8003958 <HAL_GPIO_Init+0x318>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d025      	beq.n	8003862 <HAL_GPIO_Init+0x222>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a50      	ldr	r2, [pc, #320]	@ (800395c <HAL_GPIO_Init+0x31c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d01f      	beq.n	800385e <HAL_GPIO_Init+0x21e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4f      	ldr	r2, [pc, #316]	@ (8003960 <HAL_GPIO_Init+0x320>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d019      	beq.n	800385a <HAL_GPIO_Init+0x21a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4e      	ldr	r2, [pc, #312]	@ (8003964 <HAL_GPIO_Init+0x324>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_GPIO_Init+0x216>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4d      	ldr	r2, [pc, #308]	@ (8003968 <HAL_GPIO_Init+0x328>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00d      	beq.n	8003852 <HAL_GPIO_Init+0x212>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4c      	ldr	r2, [pc, #304]	@ (800396c <HAL_GPIO_Init+0x32c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <HAL_GPIO_Init+0x20e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a4b      	ldr	r2, [pc, #300]	@ (8003970 <HAL_GPIO_Init+0x330>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_GPIO_Init+0x20a>
 8003846:	2307      	movs	r3, #7
 8003848:	e00e      	b.n	8003868 <HAL_GPIO_Init+0x228>
 800384a:	2308      	movs	r3, #8
 800384c:	e00c      	b.n	8003868 <HAL_GPIO_Init+0x228>
 800384e:	2306      	movs	r3, #6
 8003850:	e00a      	b.n	8003868 <HAL_GPIO_Init+0x228>
 8003852:	2305      	movs	r3, #5
 8003854:	e008      	b.n	8003868 <HAL_GPIO_Init+0x228>
 8003856:	2304      	movs	r3, #4
 8003858:	e006      	b.n	8003868 <HAL_GPIO_Init+0x228>
 800385a:	2303      	movs	r3, #3
 800385c:	e004      	b.n	8003868 <HAL_GPIO_Init+0x228>
 800385e:	2302      	movs	r3, #2
 8003860:	e002      	b.n	8003868 <HAL_GPIO_Init+0x228>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_GPIO_Init+0x228>
 8003866:	2300      	movs	r3, #0
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f002 0203 	and.w	r2, r2, #3
 800386e:	0092      	lsls	r2, r2, #2
 8003870:	4093      	lsls	r3, r2
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003878:	4935      	ldr	r1, [pc, #212]	@ (8003950 <HAL_GPIO_Init+0x310>)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	089b      	lsrs	r3, r3, #2
 800387e:	3302      	adds	r3, #2
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003886:	4b3b      	ldr	r3, [pc, #236]	@ (8003974 <HAL_GPIO_Init+0x334>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038aa:	4a32      	ldr	r2, [pc, #200]	@ (8003974 <HAL_GPIO_Init+0x334>)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b0:	4b30      	ldr	r3, [pc, #192]	@ (8003974 <HAL_GPIO_Init+0x334>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d4:	4a27      	ldr	r2, [pc, #156]	@ (8003974 <HAL_GPIO_Init+0x334>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038da:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <HAL_GPIO_Init+0x334>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003974 <HAL_GPIO_Init+0x334>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003904:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <HAL_GPIO_Init+0x334>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003928:	4a12      	ldr	r2, [pc, #72]	@ (8003974 <HAL_GPIO_Init+0x334>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3301      	adds	r3, #1
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b0f      	cmp	r3, #15
 8003938:	f67f ae90 	bls.w	800365c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	3724      	adds	r7, #36	@ 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	40013800 	.word	0x40013800
 8003954:	40020000 	.word	0x40020000
 8003958:	40020400 	.word	0x40020400
 800395c:	40020800 	.word	0x40020800
 8003960:	40020c00 	.word	0x40020c00
 8003964:	40021000 	.word	0x40021000
 8003968:	40021400 	.word	0x40021400
 800396c:	40021800 	.word	0x40021800
 8003970:	40021c00 	.word	0x40021c00
 8003974:	40013c00 	.word	0x40013c00

08003978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
 8003994:	e001      	b.n	800399a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
 80039b4:	4613      	mov	r3, r2
 80039b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b8:	787b      	ldrb	r3, [r7, #1]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039be:	887a      	ldrh	r2, [r7, #2]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039c4:	e003      	b.n	80039ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	041a      	lsls	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	619a      	str	r2, [r3, #24]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039e6:	4b08      	ldr	r3, [pc, #32]	@ (8003a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d006      	beq.n	8003a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039f2:	4a05      	ldr	r2, [pc, #20]	@ (8003a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f005 f820 	bl	8008a40 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40013c00 	.word	0x40013c00

08003a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e12b      	b.n	8003c76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fe f92c 	bl	8001c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	@ 0x24
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a70:	f001 fc36 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8003a74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4a81      	ldr	r2, [pc, #516]	@ (8003c80 <HAL_I2C_Init+0x274>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d807      	bhi.n	8003a90 <HAL_I2C_Init+0x84>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a80      	ldr	r2, [pc, #512]	@ (8003c84 <HAL_I2C_Init+0x278>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	bf94      	ite	ls
 8003a88:	2301      	movls	r3, #1
 8003a8a:	2300      	movhi	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e006      	b.n	8003a9e <HAL_I2C_Init+0x92>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a7d      	ldr	r2, [pc, #500]	@ (8003c88 <HAL_I2C_Init+0x27c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf94      	ite	ls
 8003a98:	2301      	movls	r3, #1
 8003a9a:	2300      	movhi	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0e7      	b.n	8003c76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a78      	ldr	r2, [pc, #480]	@ (8003c8c <HAL_I2C_Init+0x280>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0c9b      	lsrs	r3, r3, #18
 8003ab0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c80 <HAL_I2C_Init+0x274>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d802      	bhi.n	8003ae0 <HAL_I2C_Init+0xd4>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3301      	adds	r3, #1
 8003ade:	e009      	b.n	8003af4 <HAL_I2C_Init+0xe8>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	4a69      	ldr	r2, [pc, #420]	@ (8003c90 <HAL_I2C_Init+0x284>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	3301      	adds	r3, #1
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	495c      	ldr	r1, [pc, #368]	@ (8003c80 <HAL_I2C_Init+0x274>)
 8003b10:	428b      	cmp	r3, r1
 8003b12:	d819      	bhi.n	8003b48 <HAL_I2C_Init+0x13c>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1e59      	subs	r1, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b22:	1c59      	adds	r1, r3, #1
 8003b24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b28:	400b      	ands	r3, r1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_I2C_Init+0x138>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1e59      	subs	r1, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	e051      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003b44:	2304      	movs	r3, #4
 8003b46:	e04f      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d111      	bne.n	8003b74 <HAL_I2C_Init+0x168>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e58      	subs	r0, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	440b      	add	r3, r1
 8003b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b62:	3301      	adds	r3, #1
 8003b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e012      	b.n	8003b9a <HAL_I2C_Init+0x18e>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	0099      	lsls	r1, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Init+0x196>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e022      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_I2C_Init+0x1bc>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1e58      	subs	r0, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6859      	ldr	r1, [r3, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	440b      	add	r3, r1
 8003bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc6:	e00f      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e58      	subs	r0, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	0099      	lsls	r1, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	6809      	ldr	r1, [r1, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6911      	ldr	r1, [r2, #16]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68d2      	ldr	r2, [r2, #12]
 8003c22:	4311      	orrs	r1, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	000186a0 	.word	0x000186a0
 8003c84:	001e847f 	.word	0x001e847f
 8003c88:	003d08ff 	.word	0x003d08ff
 8003c8c:	431bde83 	.word	0x431bde83
 8003c90:	10624dd3 	.word	0x10624dd3

08003c94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	817b      	strh	r3, [r7, #10]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ca8:	f7fe fb74 	bl	8002394 <HAL_GetTick>
 8003cac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	f040 80e0 	bne.w	8003e7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2319      	movs	r3, #25
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	4970      	ldr	r1, [pc, #448]	@ (8003e88 <HAL_I2C_Master_Transmit+0x1f4>)
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fc64 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e0d3      	b.n	8003e7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_I2C_Master_Transmit+0x50>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e0cc      	b.n	8003e7e <HAL_I2C_Master_Transmit+0x1ea>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d007      	beq.n	8003d0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2221      	movs	r2, #33	@ 0x21
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2210      	movs	r2, #16
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	893a      	ldrh	r2, [r7, #8]
 8003d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a50      	ldr	r2, [pc, #320]	@ (8003e8c <HAL_I2C_Master_Transmit+0x1f8>)
 8003d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d4c:	8979      	ldrh	r1, [r7, #10]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6a3a      	ldr	r2, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 face 	bl	80042f4 <I2C_MasterRequestWrite>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e08d      	b.n	8003e7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d78:	e066      	b.n	8003e48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	6a39      	ldr	r1, [r7, #32]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fd22 	bl	80047c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d107      	bne.n	8003da2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e06b      	b.n	8003e7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	781a      	ldrb	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d11b      	bne.n	8003e1c <HAL_I2C_Master_Transmit+0x188>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d017      	beq.n	8003e1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	6a39      	ldr	r1, [r7, #32]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fd19 	bl	8004858 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00d      	beq.n	8003e48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d107      	bne.n	8003e44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e01a      	b.n	8003e7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d194      	bne.n	8003d7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	00100002 	.word	0x00100002
 8003e8c:	ffff0000 	.word	0xffff0000

08003e90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08c      	sub	sp, #48	@ 0x30
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	817b      	strh	r3, [r7, #10]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ea4:	f7fe fa76 	bl	8002394 <HAL_GetTick>
 8003ea8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	f040 8217 	bne.w	80042e6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2319      	movs	r3, #25
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	497c      	ldr	r1, [pc, #496]	@ (80040b4 <HAL_I2C_Master_Receive+0x224>)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fb66 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e20a      	b.n	80042e8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2C_Master_Receive+0x50>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e203      	b.n	80042e8 <HAL_I2C_Master_Receive+0x458>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d007      	beq.n	8003f06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2222      	movs	r2, #34	@ 0x22
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2210      	movs	r2, #16
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	893a      	ldrh	r2, [r7, #8]
 8003f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a5c      	ldr	r2, [pc, #368]	@ (80040b8 <HAL_I2C_Master_Receive+0x228>)
 8003f46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f48:	8979      	ldrh	r1, [r7, #10]
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fa52 	bl	80043f8 <I2C_MasterRequestRead>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e1c4      	b.n	80042e8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d113      	bne.n	8003f8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f66:	2300      	movs	r3, #0
 8003f68:	623b      	str	r3, [r7, #32]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	623b      	str	r3, [r7, #32]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	623b      	str	r3, [r7, #32]
 8003f7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e198      	b.n	80042c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d11b      	bne.n	8003fce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e178      	b.n	80042c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d11b      	bne.n	800400e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	e158      	b.n	80042c0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800401c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004034:	e144      	b.n	80042c0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403a:	2b03      	cmp	r3, #3
 800403c:	f200 80f1 	bhi.w	8004222 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004044:	2b01      	cmp	r3, #1
 8004046:	d123      	bne.n	8004090 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fc4b 	bl	80048e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e145      	b.n	80042e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800408e:	e117      	b.n	80042c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	2b02      	cmp	r3, #2
 8004096:	d14e      	bne.n	8004136 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409e:	2200      	movs	r2, #0
 80040a0:	4906      	ldr	r1, [pc, #24]	@ (80040bc <HAL_I2C_Master_Receive+0x22c>)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fa76 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e11a      	b.n	80042e8 <HAL_I2C_Master_Receive+0x458>
 80040b2:	bf00      	nop
 80040b4:	00100002 	.word	0x00100002
 80040b8:	ffff0000 	.word	0xffff0000
 80040bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004134:	e0c4      	b.n	80042c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413c:	2200      	movs	r2, #0
 800413e:	496c      	ldr	r1, [pc, #432]	@ (80042f0 <HAL_I2C_Master_Receive+0x460>)
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 fa27 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0cb      	b.n	80042e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	2200      	movs	r2, #0
 800419a:	4955      	ldr	r1, [pc, #340]	@ (80042f0 <HAL_I2C_Master_Receive+0x460>)
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f9f9 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e09d      	b.n	80042e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004220:	e04e      	b.n	80042c0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004224:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fb5e 	bl	80048e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e058      	b.n	80042e8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b04      	cmp	r3, #4
 8004274:	d124      	bne.n	80042c0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427a:	2b03      	cmp	r3, #3
 800427c:	d107      	bne.n	800428e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800428c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f47f aeb6 	bne.w	8004036 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3728      	adds	r7, #40	@ 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	00010004 	.word	0x00010004

080042f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	460b      	mov	r3, r1
 8004302:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d006      	beq.n	800431e <I2C_MasterRequestWrite+0x2a>
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d003      	beq.n	800431e <I2C_MasterRequestWrite+0x2a>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800431c:	d108      	bne.n	8004330 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e00b      	b.n	8004348 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	2b12      	cmp	r3, #18
 8004336:	d107      	bne.n	8004348 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004346:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f91d 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00d      	beq.n	800437c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436e:	d103      	bne.n	8004378 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004376:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e035      	b.n	80043e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004384:	d108      	bne.n	8004398 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004386:	897b      	ldrh	r3, [r7, #10]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004394:	611a      	str	r2, [r3, #16]
 8004396:	e01b      	b.n	80043d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004398:	897b      	ldrh	r3, [r7, #10]
 800439a:	11db      	asrs	r3, r3, #7
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f003 0306 	and.w	r3, r3, #6
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f063 030f 	orn	r3, r3, #15
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	490e      	ldr	r1, [pc, #56]	@ (80043f0 <I2C_MasterRequestWrite+0xfc>)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f966 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e010      	b.n	80043e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043c6:	897b      	ldrh	r3, [r7, #10]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4907      	ldr	r1, [pc, #28]	@ (80043f4 <I2C_MasterRequestWrite+0x100>)
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f956 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	00010008 	.word	0x00010008
 80043f4:	00010002 	.word	0x00010002

080043f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	460b      	mov	r3, r1
 8004406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800441c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d006      	beq.n	8004432 <I2C_MasterRequestRead+0x3a>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d003      	beq.n	8004432 <I2C_MasterRequestRead+0x3a>
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004430:	d108      	bne.n	8004444 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e00b      	b.n	800445c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	2b11      	cmp	r3, #17
 800444a:	d107      	bne.n	800445c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800445a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f893 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004482:	d103      	bne.n	800448c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800448a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e079      	b.n	8004584 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004498:	d108      	bne.n	80044ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800449a:	897b      	ldrh	r3, [r7, #10]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	611a      	str	r2, [r3, #16]
 80044aa:	e05f      	b.n	800456c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044ac:	897b      	ldrh	r3, [r7, #10]
 80044ae:	11db      	asrs	r3, r3, #7
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f003 0306 	and.w	r3, r3, #6
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f063 030f 	orn	r3, r3, #15
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4930      	ldr	r1, [pc, #192]	@ (800458c <I2C_MasterRequestRead+0x194>)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f8dc 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e054      	b.n	8004584 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044da:	897b      	ldrh	r3, [r7, #10]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4929      	ldr	r1, [pc, #164]	@ (8004590 <I2C_MasterRequestRead+0x198>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f8cc 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e044      	b.n	8004584 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800451e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f831 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00d      	beq.n	8004554 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004546:	d103      	bne.n	8004550 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e017      	b.n	8004584 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004554:	897b      	ldrh	r3, [r7, #10]
 8004556:	11db      	asrs	r3, r3, #7
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 0306 	and.w	r3, r3, #6
 800455e:	b2db      	uxtb	r3, r3
 8004560:	f063 030e 	orn	r3, r3, #14
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	4907      	ldr	r1, [pc, #28]	@ (8004590 <I2C_MasterRequestRead+0x198>)
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f888 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	00010008 	.word	0x00010008
 8004590:	00010002 	.word	0x00010002

08004594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a4:	e048      	b.n	8004638 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d044      	beq.n	8004638 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ae:	f7fd fef1 	bl	8002394 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d139      	bne.n	8004638 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10d      	bne.n	80045ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	43da      	mvns	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	e00c      	b.n	8004604 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	43da      	mvns	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4013      	ands	r3, r2
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	429a      	cmp	r2, r3
 8004608:	d116      	bne.n	8004638 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e023      	b.n	8004680 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	0c1b      	lsrs	r3, r3, #16
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b01      	cmp	r3, #1
 8004640:	d10d      	bne.n	800465e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	43da      	mvns	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4013      	ands	r3, r2
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	e00c      	b.n	8004678 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	43da      	mvns	r2, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4013      	ands	r3, r2
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	429a      	cmp	r2, r3
 800467c:	d093      	beq.n	80045a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004696:	e071      	b.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a6:	d123      	bne.n	80046f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046dc:	f043 0204 	orr.w	r2, r3, #4
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e067      	b.n	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d041      	beq.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f8:	f7fd fe4c 	bl	8002394 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d302      	bcc.n	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d136      	bne.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10c      	bne.n	8004732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e00b      	b.n	800474a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	43da      	mvns	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e021      	b.n	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10c      	bne.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	43da      	mvns	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e00b      	b.n	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	43da      	mvns	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f af6d 	bne.w	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047d4:	e034      	b.n	8004840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f8e3 	bl	80049a2 <I2C_IsAcknowledgeFailed>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e034      	b.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d028      	beq.n	8004840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ee:	f7fd fdd1 	bl	8002394 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11d      	bne.n	8004840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480e:	2b80      	cmp	r3, #128	@ 0x80
 8004810:	d016      	beq.n	8004840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e007      	b.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484a:	2b80      	cmp	r3, #128	@ 0x80
 800484c:	d1c3      	bne.n	80047d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004864:	e034      	b.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f89b 	bl	80049a2 <I2C_IsAcknowledgeFailed>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e034      	b.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d028      	beq.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7fd fd89 	bl	8002394 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d11d      	bne.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d016      	beq.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e007      	b.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d1c3      	bne.n	8004866 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048f4:	e049      	b.n	800498a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b10      	cmp	r3, #16
 8004902:	d119      	bne.n	8004938 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0210 	mvn.w	r2, #16
 800490c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e030      	b.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7fd fd2c 	bl	8002394 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11d      	bne.n	800498a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004958:	2b40      	cmp	r3, #64	@ 0x40
 800495a:	d016      	beq.n	800498a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	f043 0220 	orr.w	r2, r3, #32
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e007      	b.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004994:	2b40      	cmp	r3, #64	@ 0x40
 8004996:	d1ae      	bne.n	80048f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b8:	d11b      	bne.n	80049f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	f043 0204 	orr.w	r2, r3, #4
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e267      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d075      	beq.n	8004b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a1e:	4b88      	ldr	r3, [pc, #544]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d00c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2a:	4b85      	ldr	r3, [pc, #532]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d112      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a36:	4b82      	ldr	r3, [pc, #520]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a42:	d10b      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	4b7e      	ldr	r3, [pc, #504]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05b      	beq.n	8004b08 <HAL_RCC_OscConfig+0x108>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d157      	bne.n	8004b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e242      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a64:	d106      	bne.n	8004a74 <HAL_RCC_OscConfig+0x74>
 8004a66:	4b76      	ldr	r3, [pc, #472]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a75      	ldr	r2, [pc, #468]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e01d      	b.n	8004ab0 <HAL_RCC_OscConfig+0xb0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x98>
 8004a7e:	4b70      	ldr	r3, [pc, #448]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a6f      	ldr	r2, [pc, #444]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e00b      	b.n	8004ab0 <HAL_RCC_OscConfig+0xb0>
 8004a98:	4b69      	ldr	r3, [pc, #420]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a68      	ldr	r2, [pc, #416]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	4b66      	ldr	r3, [pc, #408]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a65      	ldr	r2, [pc, #404]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d013      	beq.n	8004ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fd fc6c 	bl	8002394 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac0:	f7fd fc68 	bl	8002394 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	@ 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e207      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0xc0>
 8004ade:	e014      	b.n	8004b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fc58 	bl	8002394 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fd fc54 	bl	8002394 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	@ 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e1f3      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	4b51      	ldr	r3, [pc, #324]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0xe8>
 8004b06:	e000      	b.n	8004b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d063      	beq.n	8004bde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b16:	4b4a      	ldr	r3, [pc, #296]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b22:	4b47      	ldr	r3, [pc, #284]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d11c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2e:	4b44      	ldr	r3, [pc, #272]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d116      	bne.n	8004b68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	4b41      	ldr	r3, [pc, #260]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_RCC_OscConfig+0x152>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e1c7      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b52:	4b3b      	ldr	r3, [pc, #236]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4937      	ldr	r1, [pc, #220]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b66:	e03a      	b.n	8004bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d020      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b70:	4b34      	ldr	r3, [pc, #208]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fd fc0d 	bl	8002394 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fd fc09 	bl	8002394 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e1a8      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	4b2b      	ldr	r3, [pc, #172]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9c:	4b28      	ldr	r3, [pc, #160]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4925      	ldr	r1, [pc, #148]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
 8004bb0:	e015      	b.n	8004bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb2:	4b24      	ldr	r3, [pc, #144]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fd fbec 	bl	8002394 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc0:	f7fd fbe8 	bl	8002394 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e187      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d036      	beq.n	8004c58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf2:	4b15      	ldr	r3, [pc, #84]	@ (8004c48 <HAL_RCC_OscConfig+0x248>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fd fbcc 	bl	8002394 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fd fbc8 	bl	8002394 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e167      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x200>
 8004c1e:	e01b      	b.n	8004c58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c20:	4b09      	ldr	r3, [pc, #36]	@ (8004c48 <HAL_RCC_OscConfig+0x248>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c26:	f7fd fbb5 	bl	8002394 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c2c:	e00e      	b.n	8004c4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c2e:	f7fd fbb1 	bl	8002394 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d907      	bls.n	8004c4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e150      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
 8004c40:	40023800 	.word	0x40023800
 8004c44:	42470000 	.word	0x42470000
 8004c48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c4c:	4b88      	ldr	r3, [pc, #544]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1ea      	bne.n	8004c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8097 	beq.w	8004d94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c66:	2300      	movs	r3, #0
 8004c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c6a:	4b81      	ldr	r3, [pc, #516]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c86:	4b7a      	ldr	r3, [pc, #488]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c92:	2301      	movs	r3, #1
 8004c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c96:	4b77      	ldr	r3, [pc, #476]	@ (8004e74 <HAL_RCC_OscConfig+0x474>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d118      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ca2:	4b74      	ldr	r3, [pc, #464]	@ (8004e74 <HAL_RCC_OscConfig+0x474>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a73      	ldr	r2, [pc, #460]	@ (8004e74 <HAL_RCC_OscConfig+0x474>)
 8004ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cae:	f7fd fb71 	bl	8002394 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb6:	f7fd fb6d 	bl	8002394 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e10c      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8004e74 <HAL_RCC_OscConfig+0x474>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d106      	bne.n	8004cea <HAL_RCC_OscConfig+0x2ea>
 8004cdc:	4b64      	ldr	r3, [pc, #400]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce0:	4a63      	ldr	r2, [pc, #396]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce8:	e01c      	b.n	8004d24 <HAL_RCC_OscConfig+0x324>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b05      	cmp	r3, #5
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x30c>
 8004cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf6:	4a5e      	ldr	r2, [pc, #376]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004cf8:	f043 0304 	orr.w	r3, r3, #4
 8004cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d02:	4a5b      	ldr	r2, [pc, #364]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d0a:	e00b      	b.n	8004d24 <HAL_RCC_OscConfig+0x324>
 8004d0c:	4b58      	ldr	r3, [pc, #352]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d10:	4a57      	ldr	r2, [pc, #348]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d18:	4b55      	ldr	r3, [pc, #340]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1c:	4a54      	ldr	r2, [pc, #336]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	f023 0304 	bic.w	r3, r3, #4
 8004d22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d015      	beq.n	8004d58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2c:	f7fd fb32 	bl	8002394 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d34:	f7fd fb2e 	bl	8002394 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e0cb      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4a:	4b49      	ldr	r3, [pc, #292]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ee      	beq.n	8004d34 <HAL_RCC_OscConfig+0x334>
 8004d56:	e014      	b.n	8004d82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d58:	f7fd fb1c 	bl	8002394 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d60:	f7fd fb18 	bl	8002394 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e0b5      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d76:	4b3e      	ldr	r3, [pc, #248]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ee      	bne.n	8004d60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d88:	4b39      	ldr	r3, [pc, #228]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8c:	4a38      	ldr	r2, [pc, #224]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80a1 	beq.w	8004ee0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d9e:	4b34      	ldr	r3, [pc, #208]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d05c      	beq.n	8004e64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d141      	bne.n	8004e36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db2:	4b31      	ldr	r3, [pc, #196]	@ (8004e78 <HAL_RCC_OscConfig+0x478>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db8:	f7fd faec 	bl	8002394 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fd fae8 	bl	8002394 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e087      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	4b27      	ldr	r3, [pc, #156]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	019b      	lsls	r3, r3, #6
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	3b01      	subs	r3, #1
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	491b      	ldr	r1, [pc, #108]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e08:	4b1b      	ldr	r3, [pc, #108]	@ (8004e78 <HAL_RCC_OscConfig+0x478>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0e:	f7fd fac1 	bl	8002394 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e16:	f7fd fabd 	bl	8002394 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e05c      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e28:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x416>
 8004e34:	e054      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e36:	4b10      	ldr	r3, [pc, #64]	@ (8004e78 <HAL_RCC_OscConfig+0x478>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fd faaa 	bl	8002394 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e44:	f7fd faa6 	bl	8002394 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e045      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e56:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0x444>
 8004e62:	e03d      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d107      	bne.n	8004e7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e038      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40007000 	.word	0x40007000
 8004e78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <HAL_RCC_OscConfig+0x4ec>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d028      	beq.n	8004edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d121      	bne.n	8004edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d11a      	bne.n	8004edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004eac:	4013      	ands	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d111      	bne.n	8004edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800

08004ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0cc      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f04:	4b68      	ldr	r3, [pc, #416]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d90c      	bls.n	8004f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b65      	ldr	r3, [pc, #404]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1a:	4b63      	ldr	r3, [pc, #396]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0b8      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d020      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f44:	4b59      	ldr	r3, [pc, #356]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a58      	ldr	r2, [pc, #352]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f5c:	4b53      	ldr	r3, [pc, #332]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a52      	ldr	r2, [pc, #328]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f68:	4b50      	ldr	r3, [pc, #320]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	494d      	ldr	r1, [pc, #308]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d044      	beq.n	8005010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8e:	4b47      	ldr	r3, [pc, #284]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d119      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e07f      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d003      	beq.n	8004fae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d107      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fae:	4b3f      	ldr	r3, [pc, #252]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e06f      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e067      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fce:	4b37      	ldr	r3, [pc, #220]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f023 0203 	bic.w	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4934      	ldr	r1, [pc, #208]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe0:	f7fd f9d8 	bl	8002394 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe8:	f7fd f9d4 	bl	8002394 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e04f      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 020c 	and.w	r2, r3, #12
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	429a      	cmp	r2, r3
 800500e:	d1eb      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005010:	4b25      	ldr	r3, [pc, #148]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d20c      	bcs.n	8005038 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b22      	ldr	r3, [pc, #136]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005026:	4b20      	ldr	r3, [pc, #128]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e032      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005044:	4b19      	ldr	r3, [pc, #100]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4916      	ldr	r1, [pc, #88]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005062:	4b12      	ldr	r3, [pc, #72]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	490e      	ldr	r1, [pc, #56]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005076:	f000 f821 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 800507a:	4602      	mov	r2, r0
 800507c:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	490a      	ldr	r1, [pc, #40]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005088:	5ccb      	ldrb	r3, [r1, r3]
 800508a:	fa22 f303 	lsr.w	r3, r2, r3
 800508e:	4a09      	ldr	r2, [pc, #36]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005092:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7fd f938 	bl	800230c <HAL_InitTick>

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40023c00 	.word	0x40023c00
 80050ac:	40023800 	.word	0x40023800
 80050b0:	0800d48c 	.word	0x0800d48c
 80050b4:	20000000 	.word	0x20000000
 80050b8:	20000004 	.word	0x20000004

080050bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050c0:	b094      	sub	sp, #80	@ 0x50
 80050c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c8:	2300      	movs	r3, #0
 80050ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050cc:	2300      	movs	r3, #0
 80050ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050d4:	4b79      	ldr	r3, [pc, #484]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 030c 	and.w	r3, r3, #12
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d00d      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0x40>
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	f200 80e1 	bhi.w	80052a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x34>
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d003      	beq.n	80050f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80050ee:	e0db      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050f0:	4b73      	ldr	r3, [pc, #460]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80050f2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80050f4:	e0db      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050f6:	4b73      	ldr	r3, [pc, #460]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80050f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050fa:	e0d8      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050fc:	4b6f      	ldr	r3, [pc, #444]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005104:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005106:	4b6d      	ldr	r3, [pc, #436]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d063      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005112:	4b6a      	ldr	r3, [pc, #424]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	099b      	lsrs	r3, r3, #6
 8005118:	2200      	movs	r2, #0
 800511a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800511c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005124:	633b      	str	r3, [r7, #48]	@ 0x30
 8005126:	2300      	movs	r3, #0
 8005128:	637b      	str	r3, [r7, #52]	@ 0x34
 800512a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800512e:	4622      	mov	r2, r4
 8005130:	462b      	mov	r3, r5
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f04f 0100 	mov.w	r1, #0
 800513a:	0159      	lsls	r1, r3, #5
 800513c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005140:	0150      	lsls	r0, r2, #5
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4621      	mov	r1, r4
 8005148:	1a51      	subs	r1, r2, r1
 800514a:	6139      	str	r1, [r7, #16]
 800514c:	4629      	mov	r1, r5
 800514e:	eb63 0301 	sbc.w	r3, r3, r1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005160:	4659      	mov	r1, fp
 8005162:	018b      	lsls	r3, r1, #6
 8005164:	4651      	mov	r1, sl
 8005166:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800516a:	4651      	mov	r1, sl
 800516c:	018a      	lsls	r2, r1, #6
 800516e:	4651      	mov	r1, sl
 8005170:	ebb2 0801 	subs.w	r8, r2, r1
 8005174:	4659      	mov	r1, fp
 8005176:	eb63 0901 	sbc.w	r9, r3, r1
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800518a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800518e:	4690      	mov	r8, r2
 8005190:	4699      	mov	r9, r3
 8005192:	4623      	mov	r3, r4
 8005194:	eb18 0303 	adds.w	r3, r8, r3
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	462b      	mov	r3, r5
 800519c:	eb49 0303 	adc.w	r3, r9, r3
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051ae:	4629      	mov	r1, r5
 80051b0:	024b      	lsls	r3, r1, #9
 80051b2:	4621      	mov	r1, r4
 80051b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051b8:	4621      	mov	r1, r4
 80051ba:	024a      	lsls	r2, r1, #9
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c2:	2200      	movs	r2, #0
 80051c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051cc:	f7fb fcfc 	bl	8000bc8 <__aeabi_uldivmod>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4613      	mov	r3, r2
 80051d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051d8:	e058      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051da:	4b38      	ldr	r3, [pc, #224]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	2200      	movs	r2, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	4611      	mov	r1, r2
 80051e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ea:	623b      	str	r3, [r7, #32]
 80051ec:	2300      	movs	r3, #0
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051f4:	4642      	mov	r2, r8
 80051f6:	464b      	mov	r3, r9
 80051f8:	f04f 0000 	mov.w	r0, #0
 80051fc:	f04f 0100 	mov.w	r1, #0
 8005200:	0159      	lsls	r1, r3, #5
 8005202:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005206:	0150      	lsls	r0, r2, #5
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4641      	mov	r1, r8
 800520e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005212:	4649      	mov	r1, r9
 8005214:	eb63 0b01 	sbc.w	fp, r3, r1
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005224:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005228:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800522c:	ebb2 040a 	subs.w	r4, r2, sl
 8005230:	eb63 050b 	sbc.w	r5, r3, fp
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	00eb      	lsls	r3, r5, #3
 800523e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005242:	00e2      	lsls	r2, r4, #3
 8005244:	4614      	mov	r4, r2
 8005246:	461d      	mov	r5, r3
 8005248:	4643      	mov	r3, r8
 800524a:	18e3      	adds	r3, r4, r3
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	464b      	mov	r3, r9
 8005250:	eb45 0303 	adc.w	r3, r5, r3
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005262:	4629      	mov	r1, r5
 8005264:	028b      	lsls	r3, r1, #10
 8005266:	4621      	mov	r1, r4
 8005268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800526c:	4621      	mov	r1, r4
 800526e:	028a      	lsls	r2, r1, #10
 8005270:	4610      	mov	r0, r2
 8005272:	4619      	mov	r1, r3
 8005274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005276:	2200      	movs	r2, #0
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	61fa      	str	r2, [r7, #28]
 800527c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005280:	f7fb fca2 	bl	8000bc8 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4613      	mov	r3, r2
 800528a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800528c:	4b0b      	ldr	r3, [pc, #44]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	3301      	adds	r3, #1
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800529c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800529e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052a6:	e002      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052a8:	4b05      	ldr	r3, [pc, #20]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80052aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3750      	adds	r7, #80	@ 0x50
 80052b4:	46bd      	mov	sp, r7
 80052b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800
 80052c0:	00f42400 	.word	0x00f42400
 80052c4:	007a1200 	.word	0x007a1200

080052c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052cc:	4b03      	ldr	r3, [pc, #12]	@ (80052dc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000000 	.word	0x20000000

080052e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052e4:	f7ff fff0 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b05      	ldr	r3, [pc, #20]	@ (8005300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	0a9b      	lsrs	r3, r3, #10
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4903      	ldr	r1, [pc, #12]	@ (8005304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40023800 	.word	0x40023800
 8005304:	0800d49c 	.word	0x0800d49c

08005308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800530c:	f7ff ffdc 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 8005310:	4602      	mov	r2, r0
 8005312:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	0b5b      	lsrs	r3, r3, #13
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	4903      	ldr	r1, [pc, #12]	@ (800532c <HAL_RCC_GetPCLK2Freq+0x24>)
 800531e:	5ccb      	ldrb	r3, [r1, r3]
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40023800 	.word	0x40023800
 800532c:	0800d49c 	.word	0x0800d49c

08005330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e07b      	b.n	800543a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d108      	bne.n	800535c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005352:	d009      	beq.n	8005368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	61da      	str	r2, [r3, #28]
 800535a:	e005      	b.n	8005368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fc fcee 	bl	8001d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800539e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ec:	ea42 0103 	orr.w	r1, r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	f003 0104 	and.w	r1, r3, #4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540e:	f003 0210 	and.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005428:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b088      	sub	sp, #32
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	603b      	str	r3, [r7, #0]
 800544e:	4613      	mov	r3, r2
 8005450:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_SPI_Transmit+0x22>
 8005460:	2302      	movs	r3, #2
 8005462:	e12d      	b.n	80056c0 <HAL_SPI_Transmit+0x27e>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800546c:	f7fc ff92 	bl	8002394 <HAL_GetTick>
 8005470:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d002      	beq.n	8005488 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005482:	2302      	movs	r3, #2
 8005484:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005486:	e116      	b.n	80056b6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_SPI_Transmit+0x52>
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005498:	e10d      	b.n	80056b6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2203      	movs	r2, #3
 800549e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e0:	d10f      	bne.n	8005502 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005500:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550c:	2b40      	cmp	r3, #64	@ 0x40
 800550e:	d007      	beq.n	8005520 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800551e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005528:	d14f      	bne.n	80055ca <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_SPI_Transmit+0xf6>
 8005532:	8afb      	ldrh	r3, [r7, #22]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d142      	bne.n	80055be <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	881a      	ldrh	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005548:	1c9a      	adds	r2, r3, #2
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800555c:	e02f      	b.n	80055be <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d112      	bne.n	8005592 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005570:	881a      	ldrh	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557c:	1c9a      	adds	r2, r3, #2
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005590:	e015      	b.n	80055be <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005592:	f7fc feff 	bl	8002394 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d803      	bhi.n	80055aa <HAL_SPI_Transmit+0x168>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d102      	bne.n	80055b0 <HAL_SPI_Transmit+0x16e>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80055bc:	e07b      	b.n	80056b6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ca      	bne.n	800555e <HAL_SPI_Transmit+0x11c>
 80055c8:	e050      	b.n	800566c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_SPI_Transmit+0x196>
 80055d2:	8afb      	ldrh	r3, [r7, #22]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d144      	bne.n	8005662 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055fe:	e030      	b.n	8005662 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b02      	cmp	r3, #2
 800560c:	d113      	bne.n	8005636 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005634:	e015      	b.n	8005662 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005636:	f7fc fead 	bl	8002394 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d803      	bhi.n	800564e <HAL_SPI_Transmit+0x20c>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d102      	bne.n	8005654 <HAL_SPI_Transmit+0x212>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005660:	e029      	b.n	80056b6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1c9      	bne.n	8005600 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f8b1 	bl	80057d8 <SPI_EndRxTxTransaction>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2220      	movs	r2, #32
 8005680:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10a      	bne.n	80056a0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e003      	b.n	80056b6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80056be:	7ffb      	ldrb	r3, [r7, #31]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056d8:	f7fc fe5c 	bl	8002394 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4413      	add	r3, r2
 80056e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056e8:	f7fc fe54 	bl	8002394 <HAL_GetTick>
 80056ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056ee:	4b39      	ldr	r3, [pc, #228]	@ (80057d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	015b      	lsls	r3, r3, #5
 80056f4:	0d1b      	lsrs	r3, r3, #20
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	fb02 f303 	mul.w	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056fe:	e054      	b.n	80057aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d050      	beq.n	80057aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005708:	f7fc fe44 	bl	8002394 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	429a      	cmp	r2, r3
 8005716:	d902      	bls.n	800571e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d13d      	bne.n	800579a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800572c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005736:	d111      	bne.n	800575c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005740:	d004      	beq.n	800574c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800574a:	d107      	bne.n	800575c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800575a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005764:	d10f      	bne.n	8005786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e017      	b.n	80057ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	bf0c      	ite	eq
 80057ba:	2301      	moveq	r3, #1
 80057bc:	2300      	movne	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d19b      	bne.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000000 	.word	0x20000000

080057d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2201      	movs	r2, #1
 80057ec:	2102      	movs	r1, #2
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff ff6a 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fe:	f043 0220 	orr.w	r2, r3, #32
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e032      	b.n	8005870 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800580a:	4b1b      	ldr	r3, [pc, #108]	@ (8005878 <SPI_EndRxTxTransaction+0xa0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <SPI_EndRxTxTransaction+0xa4>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	0d5b      	lsrs	r3, r3, #21
 8005816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005828:	d112      	bne.n	8005850 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2200      	movs	r2, #0
 8005832:	2180      	movs	r1, #128	@ 0x80
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7ff ff47 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d016      	beq.n	800586e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e00f      	b.n	8005870 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	3b01      	subs	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005866:	2b80      	cmp	r3, #128	@ 0x80
 8005868:	d0f2      	beq.n	8005850 <SPI_EndRxTxTransaction+0x78>
 800586a:	e000      	b.n	800586e <SPI_EndRxTxTransaction+0x96>
        break;
 800586c:	bf00      	nop
  }

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20000000 	.word	0x20000000
 800587c:	165e9f81 	.word	0x165e9f81

08005880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e041      	b.n	8005916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc faa4 	bl	8001df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f000 fad8 	bl	8005e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e041      	b.n	80059b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d106      	bne.n	800594a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f839 	bl	80059bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2202      	movs	r2, #2
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3304      	adds	r3, #4
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f000 fa89 	bl	8005e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_TIM_PWM_Start+0x24>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	bf14      	ite	ne
 80059ec:	2301      	movne	r3, #1
 80059ee:	2300      	moveq	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e022      	b.n	8005a3a <HAL_TIM_PWM_Start+0x6a>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d109      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x3e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	bf14      	ite	ne
 8005a06:	2301      	movne	r3, #1
 8005a08:	2300      	moveq	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	e015      	b.n	8005a3a <HAL_TIM_PWM_Start+0x6a>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d109      	bne.n	8005a28 <HAL_TIM_PWM_Start+0x58>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	bf14      	ite	ne
 8005a20:	2301      	movne	r3, #1
 8005a22:	2300      	moveq	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	e008      	b.n	8005a3a <HAL_TIM_PWM_Start+0x6a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e07c      	b.n	8005b3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Start+0x82>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a50:	e013      	b.n	8005a7a <HAL_TIM_PWM_Start+0xaa>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_PWM_Start+0x92>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a60:	e00b      	b.n	8005a7a <HAL_TIM_PWM_Start+0xaa>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_PWM_Start+0xa2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a70:	e003      	b.n	8005a7a <HAL_TIM_PWM_Start+0xaa>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fcec 	bl	8006460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b44 <HAL_TIM_PWM_Start+0x174>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_TIM_PWM_Start+0xcc>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2c      	ldr	r2, [pc, #176]	@ (8005b48 <HAL_TIM_PWM_Start+0x178>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIM_PWM_Start+0xd0>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <HAL_TIM_PWM_Start+0xd2>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ab4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a22      	ldr	r2, [pc, #136]	@ (8005b44 <HAL_TIM_PWM_Start+0x174>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d022      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac8:	d01d      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1f      	ldr	r2, [pc, #124]	@ (8005b4c <HAL_TIM_PWM_Start+0x17c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d018      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b50 <HAL_TIM_PWM_Start+0x180>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b54 <HAL_TIM_PWM_Start+0x184>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <HAL_TIM_PWM_Start+0x178>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a18      	ldr	r2, [pc, #96]	@ (8005b58 <HAL_TIM_PWM_Start+0x188>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a16      	ldr	r2, [pc, #88]	@ (8005b5c <HAL_TIM_PWM_Start+0x18c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d111      	bne.n	8005b2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b06      	cmp	r3, #6
 8005b16:	d010      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b28:	e007      	b.n	8005b3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0201 	orr.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40000800 	.word	0x40000800
 8005b54:	40000c00 	.word	0x40000c00
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40001800 	.word	0x40001800

08005b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e0ae      	b.n	8005cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b0c      	cmp	r3, #12
 8005b8a:	f200 809f 	bhi.w	8005ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005bc9 	.word	0x08005bc9
 8005b98:	08005ccd 	.word	0x08005ccd
 8005b9c:	08005ccd 	.word	0x08005ccd
 8005ba0:	08005ccd 	.word	0x08005ccd
 8005ba4:	08005c09 	.word	0x08005c09
 8005ba8:	08005ccd 	.word	0x08005ccd
 8005bac:	08005ccd 	.word	0x08005ccd
 8005bb0:	08005ccd 	.word	0x08005ccd
 8005bb4:	08005c4b 	.word	0x08005c4b
 8005bb8:	08005ccd 	.word	0x08005ccd
 8005bbc:	08005ccd 	.word	0x08005ccd
 8005bc0:	08005ccd 	.word	0x08005ccd
 8005bc4:	08005c8b 	.word	0x08005c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f9fc 	bl	8005fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0208 	orr.w	r2, r2, #8
 8005be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0204 	bic.w	r2, r2, #4
 8005bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6999      	ldr	r1, [r3, #24]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	619a      	str	r2, [r3, #24]
      break;
 8005c06:	e064      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fa4c 	bl	80060ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	619a      	str	r2, [r3, #24]
      break;
 8005c48:	e043      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 faa1 	bl	8006198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0208 	orr.w	r2, r2, #8
 8005c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0204 	bic.w	r2, r2, #4
 8005c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69d9      	ldr	r1, [r3, #28]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	61da      	str	r2, [r3, #28]
      break;
 8005c88:	e023      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 faf5 	bl	8006280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	021a      	lsls	r2, r3, #8
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	61da      	str	r2, [r3, #28]
      break;
 8005cca:	e002      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIM_ConfigClockSource+0x1c>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e0b4      	b.n	8005e6a <HAL_TIM_ConfigClockSource+0x186>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d38:	d03e      	beq.n	8005db8 <HAL_TIM_ConfigClockSource+0xd4>
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d3e:	f200 8087 	bhi.w	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d46:	f000 8086 	beq.w	8005e56 <HAL_TIM_ConfigClockSource+0x172>
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4e:	d87f      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d50:	2b70      	cmp	r3, #112	@ 0x70
 8005d52:	d01a      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0xa6>
 8005d54:	2b70      	cmp	r3, #112	@ 0x70
 8005d56:	d87b      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d58:	2b60      	cmp	r3, #96	@ 0x60
 8005d5a:	d050      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x11a>
 8005d5c:	2b60      	cmp	r3, #96	@ 0x60
 8005d5e:	d877      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d60:	2b50      	cmp	r3, #80	@ 0x50
 8005d62:	d03c      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0xfa>
 8005d64:	2b50      	cmp	r3, #80	@ 0x50
 8005d66:	d873      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d68:	2b40      	cmp	r3, #64	@ 0x40
 8005d6a:	d058      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x13a>
 8005d6c:	2b40      	cmp	r3, #64	@ 0x40
 8005d6e:	d86f      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d70:	2b30      	cmp	r3, #48	@ 0x30
 8005d72:	d064      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x15a>
 8005d74:	2b30      	cmp	r3, #48	@ 0x30
 8005d76:	d86b      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d060      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x15a>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d867      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d05c      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x15a>
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d05a      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x15a>
 8005d88:	e062      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d9a:	f000 fb41 	bl	8006420 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	609a      	str	r2, [r3, #8]
      break;
 8005db6:	e04f      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dc8:	f000 fb2a 	bl	8006420 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dda:	609a      	str	r2, [r3, #8]
      break;
 8005ddc:	e03c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dea:	461a      	mov	r2, r3
 8005dec:	f000 fa9e 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2150      	movs	r1, #80	@ 0x50
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 faf7 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005dfc:	e02c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f000 fabd 	bl	800638a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2160      	movs	r1, #96	@ 0x60
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fae7 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005e1c:	e01c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f000 fa7e 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2140      	movs	r1, #64	@ 0x40
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fad7 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005e3c:	e00c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f000 face 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005e4e:	e003      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	73fb      	strb	r3, [r7, #15]
      break;
 8005e54:	e000      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a46      	ldr	r2, [pc, #280]	@ (8005fa0 <TIM_Base_SetConfig+0x12c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d013      	beq.n	8005eb4 <TIM_Base_SetConfig+0x40>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e92:	d00f      	beq.n	8005eb4 <TIM_Base_SetConfig+0x40>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a43      	ldr	r2, [pc, #268]	@ (8005fa4 <TIM_Base_SetConfig+0x130>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00b      	beq.n	8005eb4 <TIM_Base_SetConfig+0x40>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a42      	ldr	r2, [pc, #264]	@ (8005fa8 <TIM_Base_SetConfig+0x134>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <TIM_Base_SetConfig+0x40>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a41      	ldr	r2, [pc, #260]	@ (8005fac <TIM_Base_SetConfig+0x138>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_Base_SetConfig+0x40>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a40      	ldr	r2, [pc, #256]	@ (8005fb0 <TIM_Base_SetConfig+0x13c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d108      	bne.n	8005ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a35      	ldr	r2, [pc, #212]	@ (8005fa0 <TIM_Base_SetConfig+0x12c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d02b      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed4:	d027      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a32      	ldr	r2, [pc, #200]	@ (8005fa4 <TIM_Base_SetConfig+0x130>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d023      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a31      	ldr	r2, [pc, #196]	@ (8005fa8 <TIM_Base_SetConfig+0x134>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01f      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a30      	ldr	r2, [pc, #192]	@ (8005fac <TIM_Base_SetConfig+0x138>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d01b      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb0 <TIM_Base_SetConfig+0x13c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d017      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb4 <TIM_Base_SetConfig+0x140>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb8 <TIM_Base_SetConfig+0x144>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00f      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2c      	ldr	r2, [pc, #176]	@ (8005fbc <TIM_Base_SetConfig+0x148>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00b      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc0 <TIM_Base_SetConfig+0x14c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d007      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2a      	ldr	r2, [pc, #168]	@ (8005fc4 <TIM_Base_SetConfig+0x150>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a29      	ldr	r2, [pc, #164]	@ (8005fc8 <TIM_Base_SetConfig+0x154>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d108      	bne.n	8005f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a10      	ldr	r2, [pc, #64]	@ (8005fa0 <TIM_Base_SetConfig+0x12c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_Base_SetConfig+0xf8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a12      	ldr	r2, [pc, #72]	@ (8005fb0 <TIM_Base_SetConfig+0x13c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d103      	bne.n	8005f74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d105      	bne.n	8005f92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f023 0201 	bic.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	611a      	str	r2, [r3, #16]
  }
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	40010400 	.word	0x40010400
 8005fb4:	40014000 	.word	0x40014000
 8005fb8:	40014400 	.word	0x40014400
 8005fbc:	40014800 	.word	0x40014800
 8005fc0:	40001800 	.word	0x40001800
 8005fc4:	40001c00 	.word	0x40001c00
 8005fc8:	40002000 	.word	0x40002000

08005fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f023 0201 	bic.w	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f023 0302 	bic.w	r3, r3, #2
 8006014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a20      	ldr	r2, [pc, #128]	@ (80060a4 <TIM_OC1_SetConfig+0xd8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_OC1_SetConfig+0x64>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a1f      	ldr	r2, [pc, #124]	@ (80060a8 <TIM_OC1_SetConfig+0xdc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10c      	bne.n	800604a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0308 	bic.w	r3, r3, #8
 8006036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 0304 	bic.w	r3, r3, #4
 8006048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a15      	ldr	r2, [pc, #84]	@ (80060a4 <TIM_OC1_SetConfig+0xd8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_OC1_SetConfig+0x8e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a14      	ldr	r2, [pc, #80]	@ (80060a8 <TIM_OC1_SetConfig+0xdc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d111      	bne.n	800607e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400

080060ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f023 0210 	bic.w	r2, r3, #16
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0320 	bic.w	r3, r3, #32
 80060f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a22      	ldr	r2, [pc, #136]	@ (8006190 <TIM_OC2_SetConfig+0xe4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_OC2_SetConfig+0x68>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a21      	ldr	r2, [pc, #132]	@ (8006194 <TIM_OC2_SetConfig+0xe8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d10d      	bne.n	8006130 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800611a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800612e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <TIM_OC2_SetConfig+0xe4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_OC2_SetConfig+0x94>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a16      	ldr	r2, [pc, #88]	@ (8006194 <TIM_OC2_SetConfig+0xe8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d113      	bne.n	8006168 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800614e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	40010400 	.word	0x40010400

08006198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a21      	ldr	r2, [pc, #132]	@ (8006278 <TIM_OC3_SetConfig+0xe0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_OC3_SetConfig+0x66>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a20      	ldr	r2, [pc, #128]	@ (800627c <TIM_OC3_SetConfig+0xe4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d10d      	bne.n	800621a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a16      	ldr	r2, [pc, #88]	@ (8006278 <TIM_OC3_SetConfig+0xe0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_OC3_SetConfig+0x92>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a15      	ldr	r2, [pc, #84]	@ (800627c <TIM_OC3_SetConfig+0xe4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d113      	bne.n	8006252 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	621a      	str	r2, [r3, #32]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40010000 	.word	0x40010000
 800627c:	40010400 	.word	0x40010400

08006280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	031b      	lsls	r3, r3, #12
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a12      	ldr	r2, [pc, #72]	@ (8006324 <TIM_OC4_SetConfig+0xa4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_OC4_SetConfig+0x68>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a11      	ldr	r2, [pc, #68]	@ (8006328 <TIM_OC4_SetConfig+0xa8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d109      	bne.n	80062fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	019b      	lsls	r3, r3, #6
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400

0800632c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0201 	bic.w	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 030a 	bic.w	r3, r3, #10
 8006368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800638a:	b480      	push	{r7}
 800638c:	b087      	sub	sp, #28
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f023 0210 	bic.w	r2, r3, #16
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	031b      	lsls	r3, r3, #12
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	f043 0307 	orr.w	r3, r3, #7
 800640c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	609a      	str	r2, [r3, #8]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800643a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	021a      	lsls	r2, r3, #8
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	431a      	orrs	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4313      	orrs	r3, r2
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	2201      	movs	r2, #1
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1a      	ldr	r2, [r3, #32]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	43db      	mvns	r3, r3
 8006482:	401a      	ands	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a1a      	ldr	r2, [r3, #32]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	fa01 f303 	lsl.w	r3, r1, r3
 8006498:	431a      	orrs	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e05a      	b.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a21      	ldr	r2, [pc, #132]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d022      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006510:	d01d      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1d      	ldr	r2, [pc, #116]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d018      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1b      	ldr	r2, [pc, #108]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1a      	ldr	r2, [pc, #104]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00e      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a18      	ldr	r2, [pc, #96]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d009      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a17      	ldr	r2, [pc, #92]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d004      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a15      	ldr	r2, [pc, #84]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d10c      	bne.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4313      	orrs	r3, r2
 800655e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40010400 	.word	0x40010400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40001800 	.word	0x40001800

080065a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065bc:	2302      	movs	r3, #2
 80065be:	e03d      	b.n	800663c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e042      	b.n	80066e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fb fc4e 	bl	8001f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2224      	movs	r2, #36	@ 0x24
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800668a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fd69 	bl	8007164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	@ 0x28
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b20      	cmp	r3, #32
 8006706:	d175      	bne.n	80067f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <HAL_UART_Transmit+0x2c>
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e06e      	b.n	80067f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2221      	movs	r2, #33	@ 0x21
 8006722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006726:	f7fb fe35 	bl	8002394 <HAL_GetTick>
 800672a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	88fa      	ldrh	r2, [r7, #6]
 8006730:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	88fa      	ldrh	r2, [r7, #6]
 8006736:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006740:	d108      	bne.n	8006754 <HAL_UART_Transmit+0x6c>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	e003      	b.n	800675c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006758:	2300      	movs	r3, #0
 800675a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800675c:	e02e      	b.n	80067bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2200      	movs	r2, #0
 8006766:	2180      	movs	r1, #128	@ 0x80
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fb05 	bl	8006d78 <UART_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e03a      	b.n	80067f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006794:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	3302      	adds	r3, #2
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	e007      	b.n	80067ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	3301      	adds	r3, #1
 80067ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1cb      	bne.n	800675e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2200      	movs	r2, #0
 80067ce:	2140      	movs	r1, #64	@ 0x40
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 fad1 	bl	8006d78 <UART_WaitOnFlagUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e006      	b.n	80067f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e000      	b.n	80067f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80067f4:	2302      	movs	r3, #2
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b0ba      	sub	sp, #232	@ 0xe8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006826:	2300      	movs	r3, #0
 8006828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800682c:	2300      	movs	r3, #0
 800682e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800683e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10f      	bne.n	8006866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <HAL_UART_IRQHandler+0x66>
 8006852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fbc2 	bl	8006fe8 <UART_Receive_IT>
      return;
 8006864:	e25b      	b.n	8006d1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 80de 	beq.w	8006a2c <HAL_UART_IRQHandler+0x22c>
 8006870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800687c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006880:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80d1 	beq.w	8006a2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <HAL_UART_IRQHandler+0xae>
 8006896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a6:	f043 0201 	orr.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_UART_IRQHandler+0xd2>
 80068ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ca:	f043 0202 	orr.w	r2, r3, #2
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <HAL_UART_IRQHandler+0xf6>
 80068de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ee:	f043 0204 	orr.w	r2, r3, #4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d011      	beq.n	8006926 <HAL_UART_IRQHandler+0x126>
 8006902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d105      	bne.n	800691a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800690e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691e:	f043 0208 	orr.w	r2, r3, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 81f2 	beq.w	8006d14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d008      	beq.n	800694e <HAL_UART_IRQHandler+0x14e>
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fb4d 	bl	8006fe8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006958:	2b40      	cmp	r3, #64	@ 0x40
 800695a:	bf0c      	ite	eq
 800695c:	2301      	moveq	r3, #1
 800695e:	2300      	movne	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <HAL_UART_IRQHandler+0x17a>
 8006972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d04f      	beq.n	8006a1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa55 	bl	8006e2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698a:	2b40      	cmp	r3, #64	@ 0x40
 800698c:	d141      	bne.n	8006a12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3314      	adds	r3, #20
 8006994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3314      	adds	r3, #20
 80069b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1d9      	bne.n	800698e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d013      	beq.n	8006a0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e6:	4a7e      	ldr	r2, [pc, #504]	@ (8006be0 <HAL_UART_IRQHandler+0x3e0>)
 80069e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fc fb9a 	bl	8003128 <HAL_DMA_Abort_IT>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a04:	4610      	mov	r0, r2
 8006a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a08:	e00e      	b.n	8006a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f99e 	bl	8006d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a10:	e00a      	b.n	8006a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f99a 	bl	8006d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a18:	e006      	b.n	8006a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f996 	bl	8006d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a26:	e175      	b.n	8006d14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	bf00      	nop
    return;
 8006a2a:	e173      	b.n	8006d14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f040 814f 	bne.w	8006cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8148 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8141 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a72:	2b40      	cmp	r3, #64	@ 0x40
 8006a74:	f040 80b6 	bne.w	8006be4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8145 	beq.w	8006d18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a96:	429a      	cmp	r2, r3
 8006a98:	f080 813e 	bcs.w	8006d18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aa2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aae:	f000 8088 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ade:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d9      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3314      	adds	r3, #20
 8006b04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e1      	bne.n	8006afe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b92:	f023 0310 	bic.w	r3, r3, #16
 8006b96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006ba4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ba6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006baa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e3      	bne.n	8006b80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fc fa43 	bl	8003048 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f8c1 	bl	8006d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bde:	e09b      	b.n	8006d18 <HAL_UART_IRQHandler+0x518>
 8006be0:	08006ef1 	.word	0x08006ef1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 808e 	beq.w	8006d1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8089 	beq.w	8006d1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	330c      	adds	r3, #12
 8006c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e3      	bne.n	8006c0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3314      	adds	r3, #20
 8006c48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	623b      	str	r3, [r7, #32]
   return(result);
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3314      	adds	r3, #20
 8006c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c66:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e3      	bne.n	8006c42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0310 	bic.w	r3, r3, #16
 8006c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	330c      	adds	r3, #12
 8006ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006cac:	61fa      	str	r2, [r7, #28]
 8006cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	69b9      	ldr	r1, [r7, #24]
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e3      	bne.n	8006c88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f847 	bl	8006d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cd2:	e023      	b.n	8006d1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x4f4>
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f913 	bl	8006f18 <UART_Transmit_IT>
    return;
 8006cf2:	e014      	b.n	8006d1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00e      	beq.n	8006d1e <HAL_UART_IRQHandler+0x51e>
 8006d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f953 	bl	8006fb8 <UART_EndTransmit_IT>
    return;
 8006d12:	e004      	b.n	8006d1e <HAL_UART_IRQHandler+0x51e>
    return;
 8006d14:	bf00      	nop
 8006d16:	e002      	b.n	8006d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d1c:	bf00      	nop
  }
}
 8006d1e:	37e8      	adds	r7, #232	@ 0xe8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	4613      	mov	r3, r2
 8006d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d88:	e03b      	b.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d90:	d037      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d92:	f7fb faff 	bl	8002394 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	6a3a      	ldr	r2, [r7, #32]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d302      	bcc.n	8006da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e03a      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d023      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b80      	cmp	r3, #128	@ 0x80
 8006dbe:	d020      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b40      	cmp	r3, #64	@ 0x40
 8006dc4:	d01d      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d116      	bne.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f81d 	bl	8006e2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2208      	movs	r2, #8
 8006df4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e00f      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	bf0c      	ite	eq
 8006e12:	2301      	moveq	r3, #1
 8006e14:	2300      	movne	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d0b4      	beq.n	8006d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b095      	sub	sp, #84	@ 0x54
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	330c      	adds	r3, #12
 8006e38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e52:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e5      	bne.n	8006e32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3314      	adds	r3, #20
 8006e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3314      	adds	r3, #20
 8006e84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d119      	bne.n	8006ed6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f023 0310 	bic.w	r3, r3, #16
 8006eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ec2:	61ba      	str	r2, [r7, #24]
 8006ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6979      	ldr	r1, [r7, #20]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ee4:	bf00      	nop
 8006ee6:	3754      	adds	r7, #84	@ 0x54
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7ff ff1e 	bl	8006d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b21      	cmp	r3, #33	@ 0x21
 8006f2a:	d13e      	bne.n	8006faa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f34:	d114      	bne.n	8006f60 <UART_Transmit_IT+0x48>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d110      	bne.n	8006f60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	1c9a      	adds	r2, r3, #2
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	621a      	str	r2, [r3, #32]
 8006f5e:	e008      	b.n	8006f72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	1c59      	adds	r1, r3, #1
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6211      	str	r1, [r2, #32]
 8006f6a:	781a      	ldrb	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10f      	bne.n	8006fa6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fa4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e000      	b.n	8006fac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006faa:	2302      	movs	r3, #2
  }
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff fea3 	bl	8006d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08c      	sub	sp, #48	@ 0x30
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b22      	cmp	r3, #34	@ 0x22
 8006ffa:	f040 80ae 	bne.w	800715a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007006:	d117      	bne.n	8007038 <UART_Receive_IT+0x50>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d113      	bne.n	8007038 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007010:	2300      	movs	r3, #0
 8007012:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007018:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	b29b      	uxth	r3, r3
 8007022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007026:	b29a      	uxth	r2, r3
 8007028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	1c9a      	adds	r2, r3, #2
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	629a      	str	r2, [r3, #40]	@ 0x28
 8007036:	e026      	b.n	8007086 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800703e:	2300      	movs	r3, #0
 8007040:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704a:	d007      	beq.n	800705c <UART_Receive_IT+0x74>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <UART_Receive_IT+0x82>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d106      	bne.n	800706a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	e008      	b.n	800707c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007076:	b2da      	uxtb	r2, r3
 8007078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29b      	uxth	r3, r3
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4619      	mov	r1, r3
 8007094:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007096:	2b00      	cmp	r3, #0
 8007098:	d15d      	bne.n	8007156 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0220 	bic.w	r2, r2, #32
 80070a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d135      	bne.n	800714c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	330c      	adds	r3, #12
 80070ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	613b      	str	r3, [r7, #16]
   return(result);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f023 0310 	bic.w	r3, r3, #16
 80070fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	330c      	adds	r3, #12
 8007104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007106:	623a      	str	r2, [r7, #32]
 8007108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	69f9      	ldr	r1, [r7, #28]
 800710c:	6a3a      	ldr	r2, [r7, #32]
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	61bb      	str	r3, [r7, #24]
   return(result);
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e5      	bne.n	80070e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b10      	cmp	r3, #16
 8007126:	d10a      	bne.n	800713e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff fe0b 	bl	8006d60 <HAL_UARTEx_RxEventCallback>
 800714a:	e002      	b.n	8007152 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff fdf3 	bl	8006d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	e002      	b.n	800715c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	e000      	b.n	800715c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800715a:	2302      	movs	r3, #2
  }
}
 800715c:	4618      	mov	r0, r3
 800715e:	3730      	adds	r7, #48	@ 0x30
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007168:	b0c0      	sub	sp, #256	@ 0x100
 800716a:	af00      	add	r7, sp, #0
 800716c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007180:	68d9      	ldr	r1, [r3, #12]
 8007182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	ea40 0301 	orr.w	r3, r0, r1
 800718c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	431a      	orrs	r2, r3
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071bc:	f021 010c 	bic.w	r1, r1, #12
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071ca:	430b      	orrs	r3, r1
 80071cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071de:	6999      	ldr	r1, [r3, #24]
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	ea40 0301 	orr.w	r3, r0, r1
 80071ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b8f      	ldr	r3, [pc, #572]	@ (8007430 <UART_SetConfig+0x2cc>)
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d005      	beq.n	8007204 <UART_SetConfig+0xa0>
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4b8d      	ldr	r3, [pc, #564]	@ (8007434 <UART_SetConfig+0x2d0>)
 8007200:	429a      	cmp	r2, r3
 8007202:	d104      	bne.n	800720e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007204:	f7fe f880 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 8007208:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800720c:	e003      	b.n	8007216 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800720e:	f7fe f867 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8007212:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007220:	f040 810c 	bne.w	800743c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007228:	2200      	movs	r2, #0
 800722a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800722e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007232:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007236:	4622      	mov	r2, r4
 8007238:	462b      	mov	r3, r5
 800723a:	1891      	adds	r1, r2, r2
 800723c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800723e:	415b      	adcs	r3, r3
 8007240:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007242:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007246:	4621      	mov	r1, r4
 8007248:	eb12 0801 	adds.w	r8, r2, r1
 800724c:	4629      	mov	r1, r5
 800724e:	eb43 0901 	adc.w	r9, r3, r1
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800725e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007266:	4690      	mov	r8, r2
 8007268:	4699      	mov	r9, r3
 800726a:	4623      	mov	r3, r4
 800726c:	eb18 0303 	adds.w	r3, r8, r3
 8007270:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007274:	462b      	mov	r3, r5
 8007276:	eb49 0303 	adc.w	r3, r9, r3
 800727a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800727e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800728a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800728e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007292:	460b      	mov	r3, r1
 8007294:	18db      	adds	r3, r3, r3
 8007296:	653b      	str	r3, [r7, #80]	@ 0x50
 8007298:	4613      	mov	r3, r2
 800729a:	eb42 0303 	adc.w	r3, r2, r3
 800729e:	657b      	str	r3, [r7, #84]	@ 0x54
 80072a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072a8:	f7f9 fc8e 	bl	8000bc8 <__aeabi_uldivmod>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4b61      	ldr	r3, [pc, #388]	@ (8007438 <UART_SetConfig+0x2d4>)
 80072b2:	fba3 2302 	umull	r2, r3, r3, r2
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	011c      	lsls	r4, r3, #4
 80072ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072cc:	4642      	mov	r2, r8
 80072ce:	464b      	mov	r3, r9
 80072d0:	1891      	adds	r1, r2, r2
 80072d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072d4:	415b      	adcs	r3, r3
 80072d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072dc:	4641      	mov	r1, r8
 80072de:	eb12 0a01 	adds.w	sl, r2, r1
 80072e2:	4649      	mov	r1, r9
 80072e4:	eb43 0b01 	adc.w	fp, r3, r1
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072fc:	4692      	mov	sl, r2
 80072fe:	469b      	mov	fp, r3
 8007300:	4643      	mov	r3, r8
 8007302:	eb1a 0303 	adds.w	r3, sl, r3
 8007306:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800730a:	464b      	mov	r3, r9
 800730c:	eb4b 0303 	adc.w	r3, fp, r3
 8007310:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007320:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007324:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007328:	460b      	mov	r3, r1
 800732a:	18db      	adds	r3, r3, r3
 800732c:	643b      	str	r3, [r7, #64]	@ 0x40
 800732e:	4613      	mov	r3, r2
 8007330:	eb42 0303 	adc.w	r3, r2, r3
 8007334:	647b      	str	r3, [r7, #68]	@ 0x44
 8007336:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800733a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800733e:	f7f9 fc43 	bl	8000bc8 <__aeabi_uldivmod>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4611      	mov	r1, r2
 8007348:	4b3b      	ldr	r3, [pc, #236]	@ (8007438 <UART_SetConfig+0x2d4>)
 800734a:	fba3 2301 	umull	r2, r3, r3, r1
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	2264      	movs	r2, #100	@ 0x64
 8007352:	fb02 f303 	mul.w	r3, r2, r3
 8007356:	1acb      	subs	r3, r1, r3
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800735e:	4b36      	ldr	r3, [pc, #216]	@ (8007438 <UART_SetConfig+0x2d4>)
 8007360:	fba3 2302 	umull	r2, r3, r3, r2
 8007364:	095b      	lsrs	r3, r3, #5
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800736c:	441c      	add	r4, r3
 800736e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007372:	2200      	movs	r2, #0
 8007374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007378:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800737c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	1891      	adds	r1, r2, r2
 8007386:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007388:	415b      	adcs	r3, r3
 800738a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800738c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007390:	4641      	mov	r1, r8
 8007392:	1851      	adds	r1, r2, r1
 8007394:	6339      	str	r1, [r7, #48]	@ 0x30
 8007396:	4649      	mov	r1, r9
 8007398:	414b      	adcs	r3, r1
 800739a:	637b      	str	r3, [r7, #52]	@ 0x34
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073a8:	4659      	mov	r1, fp
 80073aa:	00cb      	lsls	r3, r1, #3
 80073ac:	4651      	mov	r1, sl
 80073ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073b2:	4651      	mov	r1, sl
 80073b4:	00ca      	lsls	r2, r1, #3
 80073b6:	4610      	mov	r0, r2
 80073b8:	4619      	mov	r1, r3
 80073ba:	4603      	mov	r3, r0
 80073bc:	4642      	mov	r2, r8
 80073be:	189b      	adds	r3, r3, r2
 80073c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073c4:	464b      	mov	r3, r9
 80073c6:	460a      	mov	r2, r1
 80073c8:	eb42 0303 	adc.w	r3, r2, r3
 80073cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073e4:	460b      	mov	r3, r1
 80073e6:	18db      	adds	r3, r3, r3
 80073e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073ea:	4613      	mov	r3, r2
 80073ec:	eb42 0303 	adc.w	r3, r2, r3
 80073f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073fa:	f7f9 fbe5 	bl	8000bc8 <__aeabi_uldivmod>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4b0d      	ldr	r3, [pc, #52]	@ (8007438 <UART_SetConfig+0x2d4>)
 8007404:	fba3 1302 	umull	r1, r3, r3, r2
 8007408:	095b      	lsrs	r3, r3, #5
 800740a:	2164      	movs	r1, #100	@ 0x64
 800740c:	fb01 f303 	mul.w	r3, r1, r3
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	3332      	adds	r3, #50	@ 0x32
 8007416:	4a08      	ldr	r2, [pc, #32]	@ (8007438 <UART_SetConfig+0x2d4>)
 8007418:	fba2 2303 	umull	r2, r3, r2, r3
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	f003 0207 	and.w	r2, r3, #7
 8007422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4422      	add	r2, r4
 800742a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800742c:	e106      	b.n	800763c <UART_SetConfig+0x4d8>
 800742e:	bf00      	nop
 8007430:	40011000 	.word	0x40011000
 8007434:	40011400 	.word	0x40011400
 8007438:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800743c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007440:	2200      	movs	r2, #0
 8007442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007446:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800744a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800744e:	4642      	mov	r2, r8
 8007450:	464b      	mov	r3, r9
 8007452:	1891      	adds	r1, r2, r2
 8007454:	6239      	str	r1, [r7, #32]
 8007456:	415b      	adcs	r3, r3
 8007458:	627b      	str	r3, [r7, #36]	@ 0x24
 800745a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800745e:	4641      	mov	r1, r8
 8007460:	1854      	adds	r4, r2, r1
 8007462:	4649      	mov	r1, r9
 8007464:	eb43 0501 	adc.w	r5, r3, r1
 8007468:	f04f 0200 	mov.w	r2, #0
 800746c:	f04f 0300 	mov.w	r3, #0
 8007470:	00eb      	lsls	r3, r5, #3
 8007472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007476:	00e2      	lsls	r2, r4, #3
 8007478:	4614      	mov	r4, r2
 800747a:	461d      	mov	r5, r3
 800747c:	4643      	mov	r3, r8
 800747e:	18e3      	adds	r3, r4, r3
 8007480:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007484:	464b      	mov	r3, r9
 8007486:	eb45 0303 	adc.w	r3, r5, r3
 800748a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800748e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800749a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800749e:	f04f 0200 	mov.w	r2, #0
 80074a2:	f04f 0300 	mov.w	r3, #0
 80074a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074aa:	4629      	mov	r1, r5
 80074ac:	008b      	lsls	r3, r1, #2
 80074ae:	4621      	mov	r1, r4
 80074b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074b4:	4621      	mov	r1, r4
 80074b6:	008a      	lsls	r2, r1, #2
 80074b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074bc:	f7f9 fb84 	bl	8000bc8 <__aeabi_uldivmod>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4b60      	ldr	r3, [pc, #384]	@ (8007648 <UART_SetConfig+0x4e4>)
 80074c6:	fba3 2302 	umull	r2, r3, r3, r2
 80074ca:	095b      	lsrs	r3, r3, #5
 80074cc:	011c      	lsls	r4, r3, #4
 80074ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074e0:	4642      	mov	r2, r8
 80074e2:	464b      	mov	r3, r9
 80074e4:	1891      	adds	r1, r2, r2
 80074e6:	61b9      	str	r1, [r7, #24]
 80074e8:	415b      	adcs	r3, r3
 80074ea:	61fb      	str	r3, [r7, #28]
 80074ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074f0:	4641      	mov	r1, r8
 80074f2:	1851      	adds	r1, r2, r1
 80074f4:	6139      	str	r1, [r7, #16]
 80074f6:	4649      	mov	r1, r9
 80074f8:	414b      	adcs	r3, r1
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007508:	4659      	mov	r1, fp
 800750a:	00cb      	lsls	r3, r1, #3
 800750c:	4651      	mov	r1, sl
 800750e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007512:	4651      	mov	r1, sl
 8007514:	00ca      	lsls	r2, r1, #3
 8007516:	4610      	mov	r0, r2
 8007518:	4619      	mov	r1, r3
 800751a:	4603      	mov	r3, r0
 800751c:	4642      	mov	r2, r8
 800751e:	189b      	adds	r3, r3, r2
 8007520:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007524:	464b      	mov	r3, r9
 8007526:	460a      	mov	r2, r1
 8007528:	eb42 0303 	adc.w	r3, r2, r3
 800752c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	67bb      	str	r3, [r7, #120]	@ 0x78
 800753a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800753c:	f04f 0200 	mov.w	r2, #0
 8007540:	f04f 0300 	mov.w	r3, #0
 8007544:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007548:	4649      	mov	r1, r9
 800754a:	008b      	lsls	r3, r1, #2
 800754c:	4641      	mov	r1, r8
 800754e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007552:	4641      	mov	r1, r8
 8007554:	008a      	lsls	r2, r1, #2
 8007556:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800755a:	f7f9 fb35 	bl	8000bc8 <__aeabi_uldivmod>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4611      	mov	r1, r2
 8007564:	4b38      	ldr	r3, [pc, #224]	@ (8007648 <UART_SetConfig+0x4e4>)
 8007566:	fba3 2301 	umull	r2, r3, r3, r1
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	2264      	movs	r2, #100	@ 0x64
 800756e:	fb02 f303 	mul.w	r3, r2, r3
 8007572:	1acb      	subs	r3, r1, r3
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	3332      	adds	r3, #50	@ 0x32
 8007578:	4a33      	ldr	r2, [pc, #204]	@ (8007648 <UART_SetConfig+0x4e4>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007584:	441c      	add	r4, r3
 8007586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800758a:	2200      	movs	r2, #0
 800758c:	673b      	str	r3, [r7, #112]	@ 0x70
 800758e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007590:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	1891      	adds	r1, r2, r2
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	415b      	adcs	r3, r3
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075a4:	4641      	mov	r1, r8
 80075a6:	1851      	adds	r1, r2, r1
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	4649      	mov	r1, r9
 80075ac:	414b      	adcs	r3, r1
 80075ae:	607b      	str	r3, [r7, #4]
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075bc:	4659      	mov	r1, fp
 80075be:	00cb      	lsls	r3, r1, #3
 80075c0:	4651      	mov	r1, sl
 80075c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c6:	4651      	mov	r1, sl
 80075c8:	00ca      	lsls	r2, r1, #3
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	4642      	mov	r2, r8
 80075d2:	189b      	adds	r3, r3, r2
 80075d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075d6:	464b      	mov	r3, r9
 80075d8:	460a      	mov	r2, r1
 80075da:	eb42 0303 	adc.w	r3, r2, r3
 80075de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80075ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075f8:	4649      	mov	r1, r9
 80075fa:	008b      	lsls	r3, r1, #2
 80075fc:	4641      	mov	r1, r8
 80075fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007602:	4641      	mov	r1, r8
 8007604:	008a      	lsls	r2, r1, #2
 8007606:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800760a:	f7f9 fadd 	bl	8000bc8 <__aeabi_uldivmod>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4b0d      	ldr	r3, [pc, #52]	@ (8007648 <UART_SetConfig+0x4e4>)
 8007614:	fba3 1302 	umull	r1, r3, r3, r2
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	2164      	movs	r1, #100	@ 0x64
 800761c:	fb01 f303 	mul.w	r3, r1, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	3332      	adds	r3, #50	@ 0x32
 8007626:	4a08      	ldr	r2, [pc, #32]	@ (8007648 <UART_SetConfig+0x4e4>)
 8007628:	fba2 2303 	umull	r2, r3, r2, r3
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	f003 020f 	and.w	r2, r3, #15
 8007632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4422      	add	r2, r4
 800763a:	609a      	str	r2, [r3, #8]
}
 800763c:	bf00      	nop
 800763e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007642:	46bd      	mov	sp, r7
 8007644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007648:	51eb851f 	.word	0x51eb851f
 800764c:	00000000 	.word	0x00000000

08007650 <capture_and_send_data>:
//};
float Bil=0;
float BilResult=0;

void capture_and_send_data(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08c      	sub	sp, #48	@ 0x30
 8007654:	af00      	add	r7, sp, #0

    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 8007656:	4b9c      	ldr	r3, [pc, #624]	@ (80078c8 <capture_and_send_data+0x278>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	e020      	b.n	80076a0 <capture_and_send_data+0x50>
    {
        HAL_ADC_Start_DMA(&hadc3, &adc_value, 1);
 800765e:	2201      	movs	r2, #1
 8007660:	499a      	ldr	r1, [pc, #616]	@ (80078cc <capture_and_send_data+0x27c>)
 8007662:	489b      	ldr	r0, [pc, #620]	@ (80078d0 <capture_and_send_data+0x280>)
 8007664:	f7fa ff0a 	bl	800247c <HAL_ADC_Start_DMA>
        //HAL_Delay(1);
        DWT_Delay(9);
 8007668:	2009      	movs	r0, #9
 800766a:	f001 fa21 	bl	8008ab0 <DWT_Delay>
        // Store the adc_value in spectral_data
        spectral_data[idx++] = adc_value;
 800766e:	4b99      	ldr	r3, [pc, #612]	@ (80078d4 <capture_and_send_data+0x284>)
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	b291      	uxth	r1, r2
 8007676:	4a97      	ldr	r2, [pc, #604]	@ (80078d4 <capture_and_send_data+0x284>)
 8007678:	8011      	strh	r1, [r2, #0]
 800767a:	4619      	mov	r1, r3
 800767c:	4b93      	ldr	r3, [pc, #588]	@ (80078cc <capture_and_send_data+0x27c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a95      	ldr	r2, [pc, #596]	@ (80078d8 <capture_and_send_data+0x288>)
 8007682:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (idx >= NUM_WAVELENGTHS*2) idx=0;
 8007686:	4b93      	ldr	r3, [pc, #588]	@ (80078d4 <capture_and_send_data+0x284>)
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800768e:	d302      	bcc.n	8007696 <capture_and_send_data+0x46>
 8007690:	4b90      	ldr	r3, [pc, #576]	@ (80078d4 <capture_and_send_data+0x284>)
 8007692:	2200      	movs	r2, #0
 8007694:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 8007696:	4b8c      	ldr	r3, [pc, #560]	@ (80078c8 <capture_and_send_data+0x278>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3301      	adds	r3, #1
 800769c:	4a8a      	ldr	r2, [pc, #552]	@ (80078c8 <capture_and_send_data+0x278>)
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	4b89      	ldr	r3, [pc, #548]	@ (80078c8 <capture_and_send_data+0x278>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076a8:	dbd9      	blt.n	800765e <capture_and_send_data+0xe>
    }
    // Filter out baseline values
	index2=0;
 80076aa:	4b8c      	ldr	r3, [pc, #560]	@ (80078dc <capture_and_send_data+0x28c>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < Filtered_Spec_Len; i++) spectral_data_256[i] = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076b4:	e007      	b.n	80076c6 <capture_and_send_data+0x76>
 80076b6:	4a8a      	ldr	r2, [pc, #552]	@ (80078e0 <capture_and_send_data+0x290>)
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ba:	2100      	movs	r1, #0
 80076bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80076c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c2:	3301      	adds	r3, #1
 80076c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c8:	2b13      	cmp	r3, #19
 80076ca:	ddf4      	ble.n	80076b6 <capture_and_send_data+0x66>

	for (int i = 1; i < NUM_WAVELENGTHS * 2; i++)
 80076cc:	2301      	movs	r3, #1
 80076ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076d0:	e029      	b.n	8007726 <capture_and_send_data+0xd6>
	{
		uint32_t prev_value = spectral_data[i - 1];
 80076d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d4:	3b01      	subs	r3, #1
 80076d6:	4a80      	ldr	r2, [pc, #512]	@ (80078d8 <capture_and_send_data+0x288>)
 80076d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076dc:	617b      	str	r3, [r7, #20]
		uint32_t curr_value = spectral_data[i];
 80076de:	4a7e      	ldr	r2, [pc, #504]	@ (80078d8 <capture_and_send_data+0x288>)
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e6:	613b      	str	r3, [r7, #16]

		// Consider a value as high if it's significantly higher than the previous one
		if (curr_value > prev_value + (prev_value / 10))       // Lower threshold Less indeces (4-only 600's)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	4a7e      	ldr	r2, [pc, #504]	@ (80078e4 <capture_and_send_data+0x294>)
 80076ec:	fba2 2303 	umull	r2, r3, r2, r3
 80076f0:	08da      	lsrs	r2, r3, #3
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	4413      	add	r3, r2
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d911      	bls.n	8007720 <capture_and_send_data+0xd0>
		{
			spectral_data_256[index2++] = curr_value;
 80076fc:	4b77      	ldr	r3, [pc, #476]	@ (80078dc <capture_and_send_data+0x28c>)
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	b291      	uxth	r1, r2
 8007704:	4a75      	ldr	r2, [pc, #468]	@ (80078dc <capture_and_send_data+0x28c>)
 8007706:	8011      	strh	r1, [r2, #0]
 8007708:	4619      	mov	r1, r3
 800770a:	4a75      	ldr	r2, [pc, #468]	@ (80078e0 <capture_and_send_data+0x290>)
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			if (index2 >= Filtered_Spec_Len) index2=0;
 8007712:	4b72      	ldr	r3, [pc, #456]	@ (80078dc <capture_and_send_data+0x28c>)
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	2b13      	cmp	r3, #19
 8007718:	d902      	bls.n	8007720 <capture_and_send_data+0xd0>
 800771a:	4b70      	ldr	r3, [pc, #448]	@ (80078dc <capture_and_send_data+0x28c>)
 800771c:	2200      	movs	r2, #0
 800771e:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < NUM_WAVELENGTHS * 2; i++)
 8007720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007722:	3301      	adds	r3, #1
 8007724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800772c:	dbd1      	blt.n	80076d2 <capture_and_send_data+0x82>
		}
	}

	sum_filtered_data=0;
 800772e:	4b6e      	ldr	r3, [pc, #440]	@ (80078e8 <capture_and_send_data+0x298>)
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
	average_filtered_data=0;
 8007734:	4b6d      	ldr	r3, [pc, #436]	@ (80078ec <capture_and_send_data+0x29c>)
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
	// Calculate the average of the filtered data
	for (int i = main_spec_start; i < main_spec_end; i++)
 800773c:	2363      	movs	r3, #99	@ 0x63
 800773e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007740:	e00b      	b.n	800775a <capture_and_send_data+0x10a>
	{   //45 main samples
		sum_filtered_data += spectral_data[i];
 8007742:	4a65      	ldr	r2, [pc, #404]	@ (80078d8 <capture_and_send_data+0x288>)
 8007744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007746:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800774a:	4b67      	ldr	r3, [pc, #412]	@ (80078e8 <capture_and_send_data+0x298>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4413      	add	r3, r2
 8007750:	4a65      	ldr	r2, [pc, #404]	@ (80078e8 <capture_and_send_data+0x298>)
 8007752:	6013      	str	r3, [r2, #0]
	for (int i = main_spec_start; i < main_spec_end; i++)
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	3301      	adds	r3, #1
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	2b90      	cmp	r3, #144	@ 0x90
 800775e:	ddf0      	ble.n	8007742 <capture_and_send_data+0xf2>
	}
	//if (index2 > 0)
	{
		average_filtered_data = (float)sum_filtered_data / (main_spec_end-main_spec_start);
 8007760:	4b61      	ldr	r3, [pc, #388]	@ (80078e8 <capture_and_send_data+0x298>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800776c:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80078f0 <capture_and_send_data+0x2a0>
 8007770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007774:	4b5d      	ldr	r3, [pc, #372]	@ (80078ec <capture_and_send_data+0x29c>)
 8007776:	edc3 7a00 	vstr	s15, [r3]
	}

	for(int r=0; r<(main_spec_end-main_spec_start); r++)
 800777a:	2300      	movs	r3, #0
 800777c:	623b      	str	r3, [r7, #32]
 800777e:	e016      	b.n	80077ae <capture_and_send_data+0x15e>
	{
		Reflectance[r]=spectral_data[r+99]/average_filtered_data;
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	3363      	adds	r3, #99	@ 0x63
 8007784:	4a54      	ldr	r2, [pc, #336]	@ (80078d8 <capture_and_send_data+0x288>)
 8007786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	4b56      	ldr	r3, [pc, #344]	@ (80078ec <capture_and_send_data+0x29c>)
 8007794:	ed93 7a00 	vldr	s14, [r3]
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	4a55      	ldr	r2, [pc, #340]	@ (80078f4 <capture_and_send_data+0x2a4>)
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	edc3 7a00 	vstr	s15, [r3]
	for(int r=0; r<(main_spec_end-main_spec_start); r++)
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	3301      	adds	r3, #1
 80077ac:	623b      	str	r3, [r7, #32]
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	2b2d      	cmp	r3, #45	@ 0x2d
 80077b2:	dde5      	ble.n	8007780 <capture_and_send_data+0x130>
	{
		Bil+=Reflectance[r];
	}
	BilResult[0]=(1.7016*Bil*Bil)-(20.6755*Bil)+(66.9023);
*/
	BilResult=0;sum_Reflectance=0;average_Reflectance=0;
 80077b4:	4b50      	ldr	r3, [pc, #320]	@ (80078f8 <capture_and_send_data+0x2a8>)
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	4b4f      	ldr	r3, [pc, #316]	@ (80078fc <capture_and_send_data+0x2ac>)
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	4b4e      	ldr	r3, [pc, #312]	@ (8007900 <capture_and_send_data+0x2b0>)
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < (main_spec_end-main_spec_start); i++)
 80077cc:	2300      	movs	r3, #0
 80077ce:	61fb      	str	r3, [r7, #28]
 80077d0:	e01a      	b.n	8007808 <capture_and_send_data+0x1b8>
	{
		 sum_Reflectance += Reflectance[i];
 80077d2:	4a48      	ldr	r2, [pc, #288]	@ (80078f4 <capture_and_send_data+0x2a4>)
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	ed93 7a00 	vldr	s14, [r3]
 80077de:	4b47      	ldr	r3, [pc, #284]	@ (80078fc <capture_and_send_data+0x2ac>)
 80077e0:	edd3 7a00 	vldr	s15, [r3]
 80077e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077e8:	4b44      	ldr	r3, [pc, #272]	@ (80078fc <capture_and_send_data+0x2ac>)
 80077ea:	edc3 7a00 	vstr	s15, [r3]
		 average_Reflectance = (float)sum_Reflectance / (main_spec_end-main_spec_start);
 80077ee:	4b43      	ldr	r3, [pc, #268]	@ (80078fc <capture_and_send_data+0x2ac>)
 80077f0:	ed93 7a00 	vldr	s14, [r3]
 80077f4:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80078f0 <capture_and_send_data+0x2a0>
 80077f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077fc:	4b40      	ldr	r3, [pc, #256]	@ (8007900 <capture_and_send_data+0x2b0>)
 80077fe:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < (main_spec_end-main_spec_start); i++)
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	3301      	adds	r3, #1
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	2b2d      	cmp	r3, #45	@ 0x2d
 800780c:	dde1      	ble.n	80077d2 <capture_and_send_data+0x182>
	}
	//BilResult[0] = average_Reflectance*3;
	//BilResult[0]=(1.7016*average_Reflectance*average_Reflectance)-(20.6755*average_Reflectance)+(66.9023);
	 BilResult = (average_filtered_data-478)/120;     //avgSpecAtBlank_Ref = 478   //CalFactor=56;//80
 800780e:	4b37      	ldr	r3, [pc, #220]	@ (80078ec <capture_and_send_data+0x29c>)
 8007810:	edd3 7a00 	vldr	s15, [r3]
 8007814:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8007904 <capture_and_send_data+0x2b4>
 8007818:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800781c:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8007908 <capture_and_send_data+0x2b8>
 8007820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007824:	4b34      	ldr	r3, [pc, #208]	@ (80078f8 <capture_and_send_data+0x2a8>)
 8007826:	edc3 7a00 	vstr	s15, [r3]
	 if(BilResult<=0.1) {
 800782a:	4b33      	ldr	r3, [pc, #204]	@ (80078f8 <capture_and_send_data+0x2a8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4618      	mov	r0, r3
 8007830:	f7f8 fe9a 	bl	8000568 <__aeabi_f2d>
 8007834:	a322      	add	r3, pc, #136	@ (adr r3, 80078c0 <capture_and_send_data+0x270>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f7f9 f969 	bl	8000b10 <__aeabi_dcmple>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d017      	beq.n	8007874 <capture_and_send_data+0x224>
		 testDone = 0;
 8007844:	4b31      	ldr	r3, [pc, #196]	@ (800790c <capture_and_send_data+0x2bc>)
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
		 BilResult=0;
 800784a:	4b2b      	ldr	r3, [pc, #172]	@ (80078f8 <capture_and_send_data+0x2a8>)
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 8007852:	2201      	movs	r2, #1
 8007854:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007858:	482d      	ldr	r0, [pc, #180]	@ (8007910 <capture_and_send_data+0x2c0>)
 800785a:	f7fc f8a5 	bl	80039a8 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 800785e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007862:	f7fa fda3 	bl	80023ac <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 8007866:	2200      	movs	r2, #0
 8007868:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800786c:	4828      	ldr	r0, [pc, #160]	@ (8007910 <capture_and_send_data+0x2c0>)
 800786e:	f7fc f89b 	bl	80039a8 <HAL_GPIO_WritePin>
 8007872:	e002      	b.n	800787a <capture_and_send_data+0x22a>
	 }
	 else
	 {
	 testDone = 1;
 8007874:	4b25      	ldr	r3, [pc, #148]	@ (800790c <capture_and_send_data+0x2bc>)
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]
	 }
	 //if(currentTest<=avgValue) testDone = 1;

    // Format the concentration values as a string
	char message[10];            					//Result to be sent to UART and LCD
    for (int j = 0; j < NUM_WAVELENGTHS*2; j++)
 800787a:	2300      	movs	r3, #0
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	e015      	b.n	80078ac <capture_and_send_data+0x25c>
    {
      //printf("%lu\n", spectral_data_256[j]);
      snprintf(message, sizeof(message), "%lu\n",spectral_data[j]);
 8007880:	4a15      	ldr	r2, [pc, #84]	@ (80078d8 <capture_and_send_data+0x288>)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007888:	1d38      	adds	r0, r7, #4
 800788a:	4a22      	ldr	r2, [pc, #136]	@ (8007914 <capture_and_send_data+0x2c4>)
 800788c:	210a      	movs	r1, #10
 800788e:	f001 fee3 	bl	8009658 <sniprintf>
      // Send the concentration values via UART
      HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(spectral_data[j]), HAL_MAX_DELAY);
 8007892:	1d39      	adds	r1, r7, #4
 8007894:	f04f 33ff 	mov.w	r3, #4294967295
 8007898:	2204      	movs	r2, #4
 800789a:	481f      	ldr	r0, [pc, #124]	@ (8007918 <capture_and_send_data+0x2c8>)
 800789c:	f7fe ff24 	bl	80066e8 <HAL_UART_Transmit>
      len = sizeof(spectral_data[j]);
 80078a0:	4b1e      	ldr	r3, [pc, #120]	@ (800791c <capture_and_send_data+0x2cc>)
 80078a2:	2204      	movs	r2, #4
 80078a4:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < NUM_WAVELENGTHS*2; j++)
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	3301      	adds	r3, #1
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078b2:	dbe5      	blt.n	8007880 <capture_and_send_data+0x230>
      //send_uart_message(message);

      //LCD_WriteString("Hello, World!"); // Writing to LCD
    }
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	3730      	adds	r7, #48	@ 0x30
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	9999999a 	.word	0x9999999a
 80078c4:	3fb99999 	.word	0x3fb99999
 80078c8:	2000112c 	.word	0x2000112c
 80078cc:	20001120 	.word	0x20001120
 80078d0:	2000021c 	.word	0x2000021c
 80078d4:	20001124 	.word	0x20001124
 80078d8:	200008d0 	.word	0x200008d0
 80078dc:	20001126 	.word	0x20001126
 80078e0:	200010d0 	.word	0x200010d0
 80078e4:	cccccccd 	.word	0xcccccccd
 80078e8:	20001130 	.word	0x20001130
 80078ec:	20001134 	.word	0x20001134
 80078f0:	42380000 	.word	0x42380000
 80078f4:	20001140 	.word	0x20001140
 80078f8:	200011f8 	.word	0x200011f8
 80078fc:	20001138 	.word	0x20001138
 8007900:	2000113c 	.word	0x2000113c
 8007904:	43ef0000 	.word	0x43ef0000
 8007908:	42f00000 	.word	0x42f00000
 800790c:	20001129 	.word	0x20001129
 8007910:	40021000 	.word	0x40021000
 8007914:	0800b900 	.word	0x0800b900
 8007918:	20000418 	.word	0x20000418
 800791c:	20001128 	.word	0x20001128

08007920 <LCD>:
//**//
static uint8_t hours = 0, minutes = 0, seconds = 0, day = 1, date = 1, month = 1, year = 21;
char buffer[20];

void LCD(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
	//LCD_Init();      //LOGO
	LCD_DisplayMenu();
 8007924:	f000 f804 	bl	8007930 <LCD_DisplayMenu>
    LCD_HandleButtonPress();
 8007928:	f000 fa3a 	bl	8007da0 <LCD_HandleButtonPress>
}
 800792c:	bf00      	nop
 800792e:	bd80      	pop	{r7, pc}

08007930 <LCD_DisplayMenu>:
    //ssd1306_UpdateScreen();
    LCD_DisplayMenu();
}*/

// Function to display the current menu
void LCD_DisplayMenu(void) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b092      	sub	sp, #72	@ 0x48
 8007934:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8007936:	2000      	movs	r0, #0
 8007938:	f7f9 fece 	bl	80016d8 <ssd1306_Fill>
    HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET); // Turn off Indication LED
 800793c:	2200      	movs	r2, #0
 800793e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007942:	4881      	ldr	r0, [pc, #516]	@ (8007b48 <LCD_DisplayMenu+0x218>)
 8007944:	f7fc f830 	bl	80039a8 <HAL_GPIO_WritePin>
    RTC_DisplayTime();
 8007948:	f000 ffa0 	bl	800888c <RTC_DisplayTime>
    TimeSetDone=0;
 800794c:	4b7f      	ldr	r3, [pc, #508]	@ (8007b4c <LCD_DisplayMenu+0x21c>)
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]

    switch (currentMenu)
 8007952:	4b7f      	ldr	r3, [pc, #508]	@ (8007b50 <LCD_DisplayMenu+0x220>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b03      	cmp	r3, #3
 8007958:	f200 81f1 	bhi.w	8007d3e <LCD_DisplayMenu+0x40e>
 800795c:	a201      	add	r2, pc, #4	@ (adr r2, 8007964 <LCD_DisplayMenu+0x34>)
 800795e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007962:	bf00      	nop
 8007964:	08007975 	.word	0x08007975
 8007968:	08007a7b 	.word	0x08007a7b
 800796c:	08007b91 	.word	0x08007b91
 8007970:	08007c2d 	.word	0x08007c2d
    {
        case MENU_SET_AVG:
        	//ssd1306_FillRectangle(126, 0, 128, 128, Black);
        	RTC_DisplayTime();
 8007974:	f000 ff8a 	bl	800888c <RTC_DisplayTime>
        	testDone=0;                       // Do not read any result here
 8007978:	4b76      	ldr	r3, [pc, #472]	@ (8007b54 <LCD_DisplayMenu+0x224>)
 800797a:	2200      	movs	r2, #0
 800797c:	701a      	strb	r2, [r3, #0]
        	StartTestMenuFlag = 2;            // Not in StartMenu
 800797e:	4b76      	ldr	r3, [pc, #472]	@ (8007b58 <LCD_DisplayMenu+0x228>)
 8007980:	2202      	movs	r2, #2
 8007982:	601a      	str	r2, [r3, #0]

        	if (currentCursor == CURSOR_ON_MENU) {
 8007984:	4b75      	ldr	r3, [pc, #468]	@ (8007b5c <LCD_DisplayMenu+0x22c>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d121      	bne.n	80079d0 <LCD_DisplayMenu+0xa0>
				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 800798c:	4b74      	ldr	r3, [pc, #464]	@ (8007b60 <LCD_DisplayMenu+0x230>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	b2db      	uxtb	r3, r3
 8007992:	3b05      	subs	r3, #5
 8007994:	b2d8      	uxtb	r0, r3
 8007996:	4b73      	ldr	r3, [pc, #460]	@ (8007b64 <LCD_DisplayMenu+0x234>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	3b05      	subs	r3, #5
 800799e:	b2d9      	uxtb	r1, r3
 80079a0:	2301      	movs	r3, #1
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	2323      	movs	r3, #35	@ 0x23
 80079a6:	225a      	movs	r2, #90	@ 0x5a
 80079a8:	f7f9 fff8 	bl	800199c <ssd1306_FillRectangle>
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 80079ac:	4b6c      	ldr	r3, [pc, #432]	@ (8007b60 <LCD_DisplayMenu+0x230>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	4a6c      	ldr	r2, [pc, #432]	@ (8007b64 <LCD_DisplayMenu+0x234>)
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7f9 ffd6 	bl	800196c <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, Black);
 80079c0:	4b69      	ldr	r3, [pc, #420]	@ (8007b68 <LCD_DisplayMenu+0x238>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	9200      	str	r2, [sp, #0]
 80079c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079c8:	4868      	ldr	r0, [pc, #416]	@ (8007b6c <LCD_DisplayMenu+0x23c>)
 80079ca:	f7f9 ffa9 	bl	8001920 <ssd1306_WriteString>
 80079ce:	e010      	b.n	80079f2 <LCD_DisplayMenu+0xc2>
        	}else{
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 80079d0:	4b63      	ldr	r3, [pc, #396]	@ (8007b60 <LCD_DisplayMenu+0x230>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	4a63      	ldr	r2, [pc, #396]	@ (8007b64 <LCD_DisplayMenu+0x234>)
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	4611      	mov	r1, r2
 80079de:	4618      	mov	r0, r3
 80079e0:	f7f9 ffc4 	bl	800196c <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, White);
 80079e4:	4b60      	ldr	r3, [pc, #384]	@ (8007b68 <LCD_DisplayMenu+0x238>)
 80079e6:	2201      	movs	r2, #1
 80079e8:	9200      	str	r2, [sp, #0]
 80079ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079ec:	485f      	ldr	r0, [pc, #380]	@ (8007b6c <LCD_DisplayMenu+0x23c>)
 80079ee:	f7f9 ff97 	bl	8001920 <ssd1306_WriteString>
        	}


            if (currentCursor == CURSOR_ON_VALUE) {
 80079f2:	4b5a      	ldr	r3, [pc, #360]	@ (8007b5c <LCD_DisplayMenu+0x22c>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d126      	bne.n	8007a48 <LCD_DisplayMenu+0x118>
            	ssd1306_FillRectangle(set_line_X, set_line_Y, 75, 52, White);
 80079fa:	4b5d      	ldr	r3, [pc, #372]	@ (8007b70 <LCD_DisplayMenu+0x240>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	b2d8      	uxtb	r0, r3
 8007a00:	4b5c      	ldr	r3, [pc, #368]	@ (8007b74 <LCD_DisplayMenu+0x244>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	b2d9      	uxtb	r1, r3
 8007a06:	2301      	movs	r3, #1
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	2334      	movs	r3, #52	@ 0x34
 8007a0c:	224b      	movs	r2, #75	@ 0x4b
 8007a0e:	f7f9 ffc5 	bl	800199c <ssd1306_FillRectangle>
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 8007a12:	4b57      	ldr	r3, [pc, #348]	@ (8007b70 <LCD_DisplayMenu+0x240>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	4a56      	ldr	r2, [pc, #344]	@ (8007b74 <LCD_DisplayMenu+0x244>)
 8007a1a:	6812      	ldr	r2, [r2, #0]
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7f9 ffa3 	bl	800196c <ssd1306_SetCursor>

            	 char avgStr[10];
				 snprintf(avgStr, sizeof(avgStr), "-%02d-", avgValue);
 8007a26:	4b54      	ldr	r3, [pc, #336]	@ (8007b78 <LCD_DisplayMenu+0x248>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f107 000c 	add.w	r0, r7, #12
 8007a2e:	4a53      	ldr	r2, [pc, #332]	@ (8007b7c <LCD_DisplayMenu+0x24c>)
 8007a30:	210a      	movs	r1, #10
 8007a32:	f001 fe11 	bl	8009658 <sniprintf>
				 ssd1306_WriteString(avgStr, Font_11x18, Black);
 8007a36:	4b52      	ldr	r3, [pc, #328]	@ (8007b80 <LCD_DisplayMenu+0x250>)
 8007a38:	f107 000c 	add.w	r0, r7, #12
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	9200      	str	r2, [sp, #0]
 8007a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a42:	f7f9 ff6d 	bl	8001920 <ssd1306_WriteString>
            	char avgStr[10];
				snprintf(avgStr, sizeof(avgStr), "-%02d-", avgValue);
				ssd1306_WriteString(avgStr, Font_11x18, White);
            }

            break;
 8007a46:	e17a      	b.n	8007d3e <LCD_DisplayMenu+0x40e>
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 8007a48:	4b49      	ldr	r3, [pc, #292]	@ (8007b70 <LCD_DisplayMenu+0x240>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	4a49      	ldr	r2, [pc, #292]	@ (8007b74 <LCD_DisplayMenu+0x244>)
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	b2d2      	uxtb	r2, r2
 8007a54:	4611      	mov	r1, r2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7f9 ff88 	bl	800196c <ssd1306_SetCursor>
				snprintf(avgStr, sizeof(avgStr), "-%02d-", avgValue);
 8007a5c:	4b46      	ldr	r3, [pc, #280]	@ (8007b78 <LCD_DisplayMenu+0x248>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4638      	mov	r0, r7
 8007a62:	4a46      	ldr	r2, [pc, #280]	@ (8007b7c <LCD_DisplayMenu+0x24c>)
 8007a64:	210a      	movs	r1, #10
 8007a66:	f001 fdf7 	bl	8009658 <sniprintf>
				ssd1306_WriteString(avgStr, Font_11x18, White);
 8007a6a:	4b45      	ldr	r3, [pc, #276]	@ (8007b80 <LCD_DisplayMenu+0x250>)
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	2201      	movs	r2, #1
 8007a70:	9200      	str	r2, [sp, #0]
 8007a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a74:	f7f9 ff54 	bl	8001920 <ssd1306_WriteString>
            break;
 8007a78:	e161      	b.n	8007d3e <LCD_DisplayMenu+0x40e>

        case MENU_START_TEST:
        	RTC_DisplayTime();
 8007a7a:	f000 ff07 	bl	800888c <RTC_DisplayTime>
        	StartTestMenuFlag = 1;						//  in StartMenu
 8007a7e:	4b36      	ldr	r3, [pc, #216]	@ (8007b58 <LCD_DisplayMenu+0x228>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU){
 8007a84:	4b35      	ldr	r3, [pc, #212]	@ (8007b5c <LCD_DisplayMenu+0x22c>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d120      	bne.n	8007ace <LCD_DisplayMenu+0x19e>

            	ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 100, 35, White);
 8007a8c:	4b34      	ldr	r3, [pc, #208]	@ (8007b60 <LCD_DisplayMenu+0x230>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	3b05      	subs	r3, #5
 8007a94:	b2d8      	uxtb	r0, r3
 8007a96:	4b33      	ldr	r3, [pc, #204]	@ (8007b64 <LCD_DisplayMenu+0x234>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	3b05      	subs	r3, #5
 8007a9e:	b2d9      	uxtb	r1, r3
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	2323      	movs	r3, #35	@ 0x23
 8007aa6:	2264      	movs	r2, #100	@ 0x64
 8007aa8:	f7f9 ff78 	bl	800199c <ssd1306_FillRectangle>

            	ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8007aac:	4b2c      	ldr	r3, [pc, #176]	@ (8007b60 <LCD_DisplayMenu+0x230>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8007b64 <LCD_DisplayMenu+0x234>)
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	b2d2      	uxtb	r2, r2
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7f9 ff56 	bl	800196c <ssd1306_SetCursor>
				ssd1306_WriteString("StartTest", Font_7x10, Black);
 8007ac0:	4b29      	ldr	r3, [pc, #164]	@ (8007b68 <LCD_DisplayMenu+0x238>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	9200      	str	r2, [sp, #0]
 8007ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ac8:	482e      	ldr	r0, [pc, #184]	@ (8007b84 <LCD_DisplayMenu+0x254>)
 8007aca:	f7f9 ff29 	bl	8001920 <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 10, set_line_Y);
 8007ace:	4b28      	ldr	r3, [pc, #160]	@ (8007b70 <LCD_DisplayMenu+0x240>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	3b0a      	subs	r3, #10
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	4a26      	ldr	r2, [pc, #152]	@ (8007b74 <LCD_DisplayMenu+0x244>)
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	b2d2      	uxtb	r2, r2
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7f9 ff43 	bl	800196c <ssd1306_SetCursor>
            char testStr[20];
            snprintf(testStr, sizeof(testStr), "%d of %d", currentTest, avgValue);
 8007ae6:	4b28      	ldr	r3, [pc, #160]	@ (8007b88 <LCD_DisplayMenu+0x258>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b23      	ldr	r3, [pc, #140]	@ (8007b78 <LCD_DisplayMenu+0x248>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	4613      	mov	r3, r2
 8007af6:	4a25      	ldr	r2, [pc, #148]	@ (8007b8c <LCD_DisplayMenu+0x25c>)
 8007af8:	2114      	movs	r1, #20
 8007afa:	f001 fdad 	bl	8009658 <sniprintf>
            ssd1306_WriteString(testStr, Font_11x18, White);
 8007afe:	4b20      	ldr	r3, [pc, #128]	@ (8007b80 <LCD_DisplayMenu+0x250>)
 8007b00:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8007b04:	2201      	movs	r2, #1
 8007b06:	9200      	str	r2, [sp, #0]
 8007b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b0a:	f7f9 ff09 	bl	8001920 <ssd1306_WriteString>

            DoesTestComplete();             // **if test btn pressed ==> ++currentTest****//
 8007b0e:	f000 fd7d 	bl	800860c <DoesTestComplete>

            if (currentTest > avgValue){
 8007b12:	4b1d      	ldr	r3, [pc, #116]	@ (8007b88 <LCD_DisplayMenu+0x258>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4b18      	ldr	r3, [pc, #96]	@ (8007b78 <LCD_DisplayMenu+0x248>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	dd0d      	ble.n	8007b3a <LCD_DisplayMenu+0x20a>
            	currentTest = 1;
 8007b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007b88 <LCD_DisplayMenu+0x258>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
            	//*********AVG***********//
            	MeasureAverage();
 8007b24:	f000 fcea 	bl	80084fc <MeasureAverage>
            	HAL_Delay(10);
 8007b28:	200a      	movs	r0, #10
 8007b2a:	f7fa fc3f 	bl	80023ac <HAL_Delay>
            	//********************//
                currentMenu = MENU_SHOW_RESULT;
 8007b2e:	4b08      	ldr	r3, [pc, #32]	@ (8007b50 <LCD_DisplayMenu+0x220>)
 8007b30:	2202      	movs	r2, #2
 8007b32:	701a      	strb	r2, [r3, #0]
                LCD_DisplayMenu();
 8007b34:	f7ff fefc 	bl	8007930 <LCD_DisplayMenu>
            } else {
                // Turn on the indication LED (READY)
                HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_SET); // ***** IND LED ***//
            }
            break;
 8007b38:	e101      	b.n	8007d3e <LCD_DisplayMenu+0x40e>
                HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_SET); // ***** IND LED ***//
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007b40:	4801      	ldr	r0, [pc, #4]	@ (8007b48 <LCD_DisplayMenu+0x218>)
 8007b42:	f7fb ff31 	bl	80039a8 <HAL_GPIO_WritePin>
            break;
 8007b46:	e0fa      	b.n	8007d3e <LCD_DisplayMenu+0x40e>
 8007b48:	40021000 	.word	0x40021000
 8007b4c:	2000123c 	.word	0x2000123c
 8007b50:	200011fc 	.word	0x200011fc
 8007b54:	20001129 	.word	0x20001129
 8007b58:	20001238 	.word	0x20001238
 8007b5c:	200011fd 	.word	0x200011fd
 8007b60:	2000001c 	.word	0x2000001c
 8007b64:	20000020 	.word	0x20000020
 8007b68:	0800d474 	.word	0x0800d474
 8007b6c:	0800b908 	.word	0x0800b908
 8007b70:	20000024 	.word	0x20000024
 8007b74:	20000028 	.word	0x20000028
 8007b78:	2000000c 	.word	0x2000000c
 8007b7c:	0800b910 	.word	0x0800b910
 8007b80:	0800d480 	.word	0x0800d480
 8007b84:	0800b918 	.word	0x0800b918
 8007b88:	20000010 	.word	0x20000010
 8007b8c:	0800b924 	.word	0x0800b924

        case MENU_SHOW_RESULT:
        	RTC_DisplayTime();
 8007b90:	f000 fe7c 	bl	800888c <RTC_DisplayTime>
        	StartTestMenuFlag = 2;						// Not in StartMenu
 8007b94:	4b6d      	ldr	r3, [pc, #436]	@ (8007d4c <LCD_DisplayMenu+0x41c>)
 8007b96:	2202      	movs	r2, #2
 8007b98:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU){
 8007b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8007d50 <LCD_DisplayMenu+0x420>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d120      	bne.n	8007be4 <LCD_DisplayMenu+0x2b4>

				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 8007ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8007d54 <LCD_DisplayMenu+0x424>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	3b05      	subs	r3, #5
 8007baa:	b2d8      	uxtb	r0, r3
 8007bac:	4b6a      	ldr	r3, [pc, #424]	@ (8007d58 <LCD_DisplayMenu+0x428>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	3b05      	subs	r3, #5
 8007bb4:	b2d9      	uxtb	r1, r3
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	2323      	movs	r3, #35	@ 0x23
 8007bbc:	225a      	movs	r2, #90	@ 0x5a
 8007bbe:	f7f9 feed 	bl	800199c <ssd1306_FillRectangle>

				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8007bc2:	4b64      	ldr	r3, [pc, #400]	@ (8007d54 <LCD_DisplayMenu+0x424>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	4a63      	ldr	r2, [pc, #396]	@ (8007d58 <LCD_DisplayMenu+0x428>)
 8007bca:	6812      	ldr	r2, [r2, #0]
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7f9 fecb 	bl	800196c <ssd1306_SetCursor>
				ssd1306_WriteString(" Result", Font_7x10, Black);
 8007bd6:	4b61      	ldr	r3, [pc, #388]	@ (8007d5c <LCD_DisplayMenu+0x42c>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	9200      	str	r2, [sp, #0]
 8007bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bde:	4860      	ldr	r0, [pc, #384]	@ (8007d60 <LCD_DisplayMenu+0x430>)
 8007be0:	f7f9 fe9e 	bl	8001920 <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 25, set_line_Y);
 8007be4:	4b5f      	ldr	r3, [pc, #380]	@ (8007d64 <LCD_DisplayMenu+0x434>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	3b19      	subs	r3, #25
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	4a5e      	ldr	r2, [pc, #376]	@ (8007d68 <LCD_DisplayMenu+0x438>)
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	b2d2      	uxtb	r2, r2
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7f9 feb8 	bl	800196c <ssd1306_SetCursor>
            char bilStr[20];
            snprintf(bilStr, sizeof(bilStr), "%.2f mg/dL", AveragedBil);
 8007bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8007d6c <LCD_DisplayMenu+0x43c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7f8 fcb1 	bl	8000568 <__aeabi_f2d>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	f107 0018 	add.w	r0, r7, #24
 8007c0e:	e9cd 2300 	strd	r2, r3, [sp]
 8007c12:	4a57      	ldr	r2, [pc, #348]	@ (8007d70 <LCD_DisplayMenu+0x440>)
 8007c14:	2114      	movs	r1, #20
 8007c16:	f001 fd1f 	bl	8009658 <sniprintf>
            ssd1306_WriteString(bilStr, Font_11x18, White);
 8007c1a:	4b56      	ldr	r3, [pc, #344]	@ (8007d74 <LCD_DisplayMenu+0x444>)
 8007c1c:	f107 0018 	add.w	r0, r7, #24
 8007c20:	2201      	movs	r2, #1
 8007c22:	9200      	str	r2, [sp, #0]
 8007c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c26:	f7f9 fe7b 	bl	8001920 <ssd1306_WriteString>
            break;
 8007c2a:	e088      	b.n	8007d3e <LCD_DisplayMenu+0x40e>

        case MENU_EDIT_RTC:
        	RTC_DisplayTime();
 8007c2c:	f000 fe2e 	bl	800888c <RTC_DisplayTime>
        	StartTestMenuFlag = 2;						// Not in StartMenu
 8007c30:	4b46      	ldr	r3, [pc, #280]	@ (8007d4c <LCD_DisplayMenu+0x41c>)
 8007c32:	2202      	movs	r2, #2
 8007c34:	601a      	str	r2, [r3, #0]
        	if (currentCursor == CURSOR_ON_MENU){
 8007c36:	4b46      	ldr	r3, [pc, #280]	@ (8007d50 <LCD_DisplayMenu+0x420>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d167      	bne.n	8007d0e <LCD_DisplayMenu+0x3de>

				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 34, White);
 8007c3e:	4b45      	ldr	r3, [pc, #276]	@ (8007d54 <LCD_DisplayMenu+0x424>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	3b05      	subs	r3, #5
 8007c46:	b2d8      	uxtb	r0, r3
 8007c48:	4b43      	ldr	r3, [pc, #268]	@ (8007d58 <LCD_DisplayMenu+0x428>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	3b05      	subs	r3, #5
 8007c50:	b2d9      	uxtb	r1, r3
 8007c52:	2301      	movs	r3, #1
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	2322      	movs	r3, #34	@ 0x22
 8007c58:	225a      	movs	r2, #90	@ 0x5a
 8007c5a:	f7f9 fe9f 	bl	800199c <ssd1306_FillRectangle>

				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8007c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8007d54 <LCD_DisplayMenu+0x424>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	4a3c      	ldr	r2, [pc, #240]	@ (8007d58 <LCD_DisplayMenu+0x428>)
 8007c66:	6812      	ldr	r2, [r2, #0]
 8007c68:	b2d2      	uxtb	r2, r2
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7f9 fe7d 	bl	800196c <ssd1306_SetCursor>
				ssd1306_WriteString("Edit RTC", Font_7x10, Black);
 8007c72:	4b3a      	ldr	r3, [pc, #232]	@ (8007d5c <LCD_DisplayMenu+0x42c>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	9200      	str	r2, [sp, #0]
 8007c78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c7a:	483f      	ldr	r0, [pc, #252]	@ (8007d78 <LCD_DisplayMenu+0x448>)
 8007c7c:	f7f9 fe50 	bl	8001920 <ssd1306_WriteString>
				//*****************************************//
			    ssd1306_SetCursor(menu_line_X, menu_line_Y+16);
 8007c80:	4b34      	ldr	r3, [pc, #208]	@ (8007d54 <LCD_DisplayMenu+0x424>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	4b34      	ldr	r3, [pc, #208]	@ (8007d58 <LCD_DisplayMenu+0x428>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	3310      	adds	r3, #16
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	4619      	mov	r1, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	f7f9 fe6a 	bl	800196c <ssd1306_SetCursor>
			    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 8007c98:	4b38      	ldr	r3, [pc, #224]	@ (8007d7c <LCD_DisplayMenu+0x44c>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4b38      	ldr	r3, [pc, #224]	@ (8007d80 <LCD_DisplayMenu+0x450>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	4b37      	ldr	r3, [pc, #220]	@ (8007d84 <LCD_DisplayMenu+0x454>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	9200      	str	r2, [sp, #0]
 8007cac:	460b      	mov	r3, r1
 8007cae:	4a36      	ldr	r2, [pc, #216]	@ (8007d88 <LCD_DisplayMenu+0x458>)
 8007cb0:	2114      	movs	r1, #20
 8007cb2:	4836      	ldr	r0, [pc, #216]	@ (8007d8c <LCD_DisplayMenu+0x45c>)
 8007cb4:	f001 fcd0 	bl	8009658 <sniprintf>
			    ssd1306_WriteString(buffer, Font_7x10, White);
 8007cb8:	4b28      	ldr	r3, [pc, #160]	@ (8007d5c <LCD_DisplayMenu+0x42c>)
 8007cba:	2201      	movs	r2, #1
 8007cbc:	9200      	str	r2, [sp, #0]
 8007cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cc0:	4832      	ldr	r0, [pc, #200]	@ (8007d8c <LCD_DisplayMenu+0x45c>)
 8007cc2:	f7f9 fe2d 	bl	8001920 <ssd1306_WriteString>

			    ssd1306_SetCursor(menu_line_X, menu_line_Y+32);
 8007cc6:	4b23      	ldr	r3, [pc, #140]	@ (8007d54 <LCD_DisplayMenu+0x424>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	4b22      	ldr	r3, [pc, #136]	@ (8007d58 <LCD_DisplayMenu+0x428>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	3320      	adds	r3, #32
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f7f9 fe47 	bl	800196c <ssd1306_SetCursor>
			    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", date, month, year);
 8007cde:	4b2c      	ldr	r3, [pc, #176]	@ (8007d90 <LCD_DisplayMenu+0x460>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d94 <LCD_DisplayMenu+0x464>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	4b2b      	ldr	r3, [pc, #172]	@ (8007d98 <LCD_DisplayMenu+0x468>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	9200      	str	r2, [sp, #0]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4a29      	ldr	r2, [pc, #164]	@ (8007d9c <LCD_DisplayMenu+0x46c>)
 8007cf6:	2114      	movs	r1, #20
 8007cf8:	4824      	ldr	r0, [pc, #144]	@ (8007d8c <LCD_DisplayMenu+0x45c>)
 8007cfa:	f001 fcad 	bl	8009658 <sniprintf>
			    ssd1306_WriteString(buffer, Font_7x10, White);
 8007cfe:	4b17      	ldr	r3, [pc, #92]	@ (8007d5c <LCD_DisplayMenu+0x42c>)
 8007d00:	2201      	movs	r2, #1
 8007d02:	9200      	str	r2, [sp, #0]
 8007d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d06:	4821      	ldr	r0, [pc, #132]	@ (8007d8c <LCD_DisplayMenu+0x45c>)
 8007d08:	f7f9 fe0a 	bl	8001920 <ssd1306_WriteString>
 8007d0c:	e010      	b.n	8007d30 <LCD_DisplayMenu+0x400>
				//*****************************************//
			}else{
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8007d0e:	4b11      	ldr	r3, [pc, #68]	@ (8007d54 <LCD_DisplayMenu+0x424>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	4a10      	ldr	r2, [pc, #64]	@ (8007d58 <LCD_DisplayMenu+0x428>)
 8007d16:	6812      	ldr	r2, [r2, #0]
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7f9 fe25 	bl	800196c <ssd1306_SetCursor>
				ssd1306_WriteString("Edit RTC", Font_7x10, White);
 8007d22:	4b0e      	ldr	r3, [pc, #56]	@ (8007d5c <LCD_DisplayMenu+0x42c>)
 8007d24:	2201      	movs	r2, #1
 8007d26:	9200      	str	r2, [sp, #0]
 8007d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d2a:	4813      	ldr	r0, [pc, #76]	@ (8007d78 <LCD_DisplayMenu+0x448>)
 8007d2c:	f7f9 fdf8 	bl	8001920 <ssd1306_WriteString>
        	}

        	if (currentCursor == CURSOR_ON_VALUE){
 8007d30:	4b07      	ldr	r3, [pc, #28]	@ (8007d50 <LCD_DisplayMenu+0x420>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d101      	bne.n	8007d3c <LCD_DisplayMenu+0x40c>
        		EditRTC();
 8007d38:	f000 f968 	bl	800800c <EditRTC>
        	}

			break;
 8007d3c:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 8007d3e:	f7f9 fce3 	bl	8001708 <ssd1306_UpdateScreen>
}
 8007d42:	bf00      	nop
 8007d44:	3740      	adds	r7, #64	@ 0x40
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20001238 	.word	0x20001238
 8007d50:	200011fd 	.word	0x200011fd
 8007d54:	2000001c 	.word	0x2000001c
 8007d58:	20000020 	.word	0x20000020
 8007d5c:	0800d474 	.word	0x0800d474
 8007d60:	0800b930 	.word	0x0800b930
 8007d64:	20000024 	.word	0x20000024
 8007d68:	20000028 	.word	0x20000028
 8007d6c:	20001230 	.word	0x20001230
 8007d70:	0800b938 	.word	0x0800b938
 8007d74:	0800d480 	.word	0x0800d480
 8007d78:	0800b944 	.word	0x0800b944
 8007d7c:	20001240 	.word	0x20001240
 8007d80:	20001241 	.word	0x20001241
 8007d84:	20001242 	.word	0x20001242
 8007d88:	0800b950 	.word	0x0800b950
 8007d8c:	20001244 	.word	0x20001244
 8007d90:	2000002d 	.word	0x2000002d
 8007d94:	2000002e 	.word	0x2000002e
 8007d98:	2000002f 	.word	0x2000002f
 8007d9c:	0800b960 	.word	0x0800b960

08007da0 <LCD_HandleButtonPress>:

// Function to handle button presses
void LCD_HandleButtonPress(void) {
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
    // Assume button GPIOs are connected and configured
    if ((HAL_GPIO_ReadPin(GPIOB, NAVIGATE_BTN_Pin) == GPIO_PIN_RESET)) { // Navigate Button
 8007da4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007da8:	4873      	ldr	r0, [pc, #460]	@ (8007f78 <LCD_HandleButtonPress+0x1d8>)
 8007daa:	f7fb fde5 	bl	8003978 <HAL_GPIO_ReadPin>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d155      	bne.n	8007e60 <LCD_HandleButtonPress+0xc0>
    	RTC_DisplayTime();
 8007db4:	f000 fd6a 	bl	800888c <RTC_DisplayTime>
        holdNavigateBtn++;
 8007db8:	4b70      	ldr	r3, [pc, #448]	@ (8007f7c <LCD_HandleButtonPress+0x1dc>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	4b6e      	ldr	r3, [pc, #440]	@ (8007f7c <LCD_HandleButtonPress+0x1dc>)
 8007dc2:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Debounce_Delay); // Debounce delay
 8007dc4:	4b6e      	ldr	r3, [pc, #440]	@ (8007f80 <LCD_HandleButtonPress+0x1e0>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fa faef 	bl	80023ac <HAL_Delay>

        if (holdNavigateBtn >= 12) { // Assuming hold for 2000 ms
 8007dce:	4b6b      	ldr	r3, [pc, #428]	@ (8007f7c <LCD_HandleButtonPress+0x1dc>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b0b      	cmp	r3, #11
 8007dd4:	d902      	bls.n	8007ddc <LCD_HandleButtonPress+0x3c>
            LCD_Reset();
 8007dd6:	f000 fbcb 	bl	8008570 <LCD_Reset>
        }

    } else {
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
    }
}
 8007dda:	e0cb      	b.n	8007f74 <LCD_HandleButtonPress+0x1d4>
        	 if (currentMenu == MENU_SET_AVG)
 8007ddc:	4b69      	ldr	r3, [pc, #420]	@ (8007f84 <LCD_HandleButtonPress+0x1e4>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d11b      	bne.n	8007e1c <LCD_HandleButtonPress+0x7c>
				currentCursor = (currentCursor + 1) % CURSOR_TOTAL;
 8007de4:	4b68      	ldr	r3, [pc, #416]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	3301      	adds	r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	bfb8      	it	lt
 8007df2:	425b      	neglt	r3, r3
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	4b64      	ldr	r3, [pc, #400]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007df8:	701a      	strb	r2, [r3, #0]
				if(currentCursor>=2)  currentCursor = (currentCursor - 1) % CURSOR_TOTAL;
 8007dfa:	4b63      	ldr	r3, [pc, #396]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d90a      	bls.n	8007e18 <LCD_HandleButtonPress+0x78>
 8007e02:	4b61      	ldr	r3, [pc, #388]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	bfb8      	it	lt
 8007e10:	425b      	neglt	r3, r3
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	4b5c      	ldr	r3, [pc, #368]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007e16:	701a      	strb	r2, [r3, #0]
				LCD_UpdateMenu();
 8007e18:	f000 fb6a 	bl	80084f0 <LCD_UpdateMenu>
        	 if (currentMenu == MENU_EDIT_RTC)
 8007e1c:	4b59      	ldr	r3, [pc, #356]	@ (8007f84 <LCD_HandleButtonPress+0x1e4>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	f040 80a7 	bne.w	8007f74 <LCD_HandleButtonPress+0x1d4>
				currentCursor = (currentCursor + 1) % CURSOR_TOTAL;
 8007e26:	4b58      	ldr	r3, [pc, #352]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	bfb8      	it	lt
 8007e34:	425b      	neglt	r3, r3
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	4b53      	ldr	r3, [pc, #332]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007e3a:	701a      	strb	r2, [r3, #0]
				if(currentCursor>=2)  currentCursor = (currentCursor - 1) % CURSOR_TOTAL;
 8007e3c:	4b52      	ldr	r3, [pc, #328]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d90a      	bls.n	8007e5a <LCD_HandleButtonPress+0xba>
 8007e44:	4b50      	ldr	r3, [pc, #320]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	bfb8      	it	lt
 8007e52:	425b      	neglt	r3, r3
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	4b4c      	ldr	r3, [pc, #304]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007e58:	701a      	strb	r2, [r3, #0]
				LCD_UpdateMenu();
 8007e5a:	f000 fb49 	bl	80084f0 <LCD_UpdateMenu>
}
 8007e5e:	e089      	b.n	8007f74 <LCD_HandleButtonPress+0x1d4>
    } else if (HAL_GPIO_ReadPin(GPIOE, NEXT_BTN_Pin) == GPIO_PIN_RESET) { // Next Button
 8007e60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007e64:	4849      	ldr	r0, [pc, #292]	@ (8007f8c <LCD_HandleButtonPress+0x1ec>)
 8007e66:	f7fb fd87 	bl	8003978 <HAL_GPIO_ReadPin>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d131      	bne.n	8007ed4 <LCD_HandleButtonPress+0x134>
    	RTC_DisplayTime();
 8007e70:	f000 fd0c 	bl	800888c <RTC_DisplayTime>
        HAL_Delay(Debounce_Delay); // Debounce delay
 8007e74:	4b42      	ldr	r3, [pc, #264]	@ (8007f80 <LCD_HandleButtonPress+0x1e0>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fa fa97 	bl	80023ac <HAL_Delay>
        if (currentCursor == CURSOR_ON_MENU) {
 8007e7e:	4b42      	ldr	r3, [pc, #264]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10f      	bne.n	8007ea6 <LCD_HandleButtonPress+0x106>
            currentMenu = (currentMenu + 1) % MENU_TOTAL;
 8007e86:	4b3f      	ldr	r3, [pc, #252]	@ (8007f84 <LCD_HandleButtonPress+0x1e4>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	425a      	negs	r2, r3
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	f002 0203 	and.w	r2, r2, #3
 8007e96:	bf58      	it	pl
 8007e98:	4253      	negpl	r3, r2
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	4b39      	ldr	r3, [pc, #228]	@ (8007f84 <LCD_HandleButtonPress+0x1e4>)
 8007e9e:	701a      	strb	r2, [r3, #0]
            LCD_UpdateMenu();
 8007ea0:	f000 fb26 	bl	80084f0 <LCD_UpdateMenu>
}
 8007ea4:	e066      	b.n	8007f74 <LCD_HandleButtonPress+0x1d4>
        } else if (currentCursor == CURSOR_ON_VALUE) {
 8007ea6:	4b38      	ldr	r3, [pc, #224]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d162      	bne.n	8007f74 <LCD_HandleButtonPress+0x1d4>
            if (currentMenu == MENU_SET_AVG) {
 8007eae:	4b35      	ldr	r3, [pc, #212]	@ (8007f84 <LCD_HandleButtonPress+0x1e4>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d15e      	bne.n	8007f74 <LCD_HandleButtonPress+0x1d4>
                avgValue++;
 8007eb6:	4b36      	ldr	r3, [pc, #216]	@ (8007f90 <LCD_HandleButtonPress+0x1f0>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	4a34      	ldr	r2, [pc, #208]	@ (8007f90 <LCD_HandleButtonPress+0x1f0>)
 8007ebe:	6013      	str	r3, [r2, #0]
                if (avgValue > 9) avgValue = 9; // Max AVG value
 8007ec0:	4b33      	ldr	r3, [pc, #204]	@ (8007f90 <LCD_HandleButtonPress+0x1f0>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b09      	cmp	r3, #9
 8007ec6:	dd02      	ble.n	8007ece <LCD_HandleButtonPress+0x12e>
 8007ec8:	4b31      	ldr	r3, [pc, #196]	@ (8007f90 <LCD_HandleButtonPress+0x1f0>)
 8007eca:	2209      	movs	r2, #9
 8007ecc:	601a      	str	r2, [r3, #0]
                LCD_UpdateMenu();
 8007ece:	f000 fb0f 	bl	80084f0 <LCD_UpdateMenu>
}
 8007ed2:	e04f      	b.n	8007f74 <LCD_HandleButtonPress+0x1d4>
    } else if (HAL_GPIO_ReadPin(GPIOE, PREV_BTN_Pin) == GPIO_PIN_RESET) { // Prev Button
 8007ed4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ed8:	482c      	ldr	r0, [pc, #176]	@ (8007f8c <LCD_HandleButtonPress+0x1ec>)
 8007eda:	f7fb fd4d 	bl	8003978 <HAL_GPIO_ReadPin>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d144      	bne.n	8007f6e <LCD_HandleButtonPress+0x1ce>
    	RTC_DisplayTime();
 8007ee4:	f000 fcd2 	bl	800888c <RTC_DisplayTime>
        HAL_Delay(Debounce_Delay); // Debounce delay
 8007ee8:	4b25      	ldr	r3, [pc, #148]	@ (8007f80 <LCD_HandleButtonPress+0x1e0>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fa fa5d 	bl	80023ac <HAL_Delay>
        if (currentMenu == MENU_SHOW_RESULT) {SumBil = 0;AveragedBil = 0;BilResult=0;testDone=0;}  //*//
 8007ef2:	4b24      	ldr	r3, [pc, #144]	@ (8007f84 <LCD_HandleButtonPress+0x1e4>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d10e      	bne.n	8007f18 <LCD_HandleButtonPress+0x178>
 8007efa:	4b26      	ldr	r3, [pc, #152]	@ (8007f94 <LCD_HandleButtonPress+0x1f4>)
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	4b25      	ldr	r3, [pc, #148]	@ (8007f98 <LCD_HandleButtonPress+0x1f8>)
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	4b24      	ldr	r3, [pc, #144]	@ (8007f9c <LCD_HandleButtonPress+0x1fc>)
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	4b23      	ldr	r3, [pc, #140]	@ (8007fa0 <LCD_HandleButtonPress+0x200>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	701a      	strb	r2, [r3, #0]
        if (currentCursor == CURSOR_ON_MENU) {
 8007f18:	4b1b      	ldr	r3, [pc, #108]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10f      	bne.n	8007f40 <LCD_HandleButtonPress+0x1a0>
            currentMenu = (currentMenu - 1 + MENU_TOTAL) % MENU_TOTAL;
 8007f20:	4b18      	ldr	r3, [pc, #96]	@ (8007f84 <LCD_HandleButtonPress+0x1e4>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	3303      	adds	r3, #3
 8007f26:	425a      	negs	r2, r3
 8007f28:	f003 0303 	and.w	r3, r3, #3
 8007f2c:	f002 0203 	and.w	r2, r2, #3
 8007f30:	bf58      	it	pl
 8007f32:	4253      	negpl	r3, r2
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	4b13      	ldr	r3, [pc, #76]	@ (8007f84 <LCD_HandleButtonPress+0x1e4>)
 8007f38:	701a      	strb	r2, [r3, #0]
            LCD_UpdateMenu();
 8007f3a:	f000 fad9 	bl	80084f0 <LCD_UpdateMenu>
}
 8007f3e:	e019      	b.n	8007f74 <LCD_HandleButtonPress+0x1d4>
        } else if (currentCursor == CURSOR_ON_VALUE) {
 8007f40:	4b11      	ldr	r3, [pc, #68]	@ (8007f88 <LCD_HandleButtonPress+0x1e8>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d115      	bne.n	8007f74 <LCD_HandleButtonPress+0x1d4>
            if (currentMenu == MENU_SET_AVG) {
 8007f48:	4b0e      	ldr	r3, [pc, #56]	@ (8007f84 <LCD_HandleButtonPress+0x1e4>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d111      	bne.n	8007f74 <LCD_HandleButtonPress+0x1d4>
                avgValue--;
 8007f50:	4b0f      	ldr	r3, [pc, #60]	@ (8007f90 <LCD_HandleButtonPress+0x1f0>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	4a0e      	ldr	r2, [pc, #56]	@ (8007f90 <LCD_HandleButtonPress+0x1f0>)
 8007f58:	6013      	str	r3, [r2, #0]
                if (avgValue < 1) avgValue = 1; // Min AVG value
 8007f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f90 <LCD_HandleButtonPress+0x1f0>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dc02      	bgt.n	8007f68 <LCD_HandleButtonPress+0x1c8>
 8007f62:	4b0b      	ldr	r3, [pc, #44]	@ (8007f90 <LCD_HandleButtonPress+0x1f0>)
 8007f64:	2201      	movs	r2, #1
 8007f66:	601a      	str	r2, [r3, #0]
                LCD_UpdateMenu();
 8007f68:	f000 fac2 	bl	80084f0 <LCD_UpdateMenu>
}
 8007f6c:	e002      	b.n	8007f74 <LCD_HandleButtonPress+0x1d4>
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
 8007f6e:	4b03      	ldr	r3, [pc, #12]	@ (8007f7c <LCD_HandleButtonPress+0x1dc>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	701a      	strb	r2, [r3, #0]
}
 8007f74:	bf00      	nop
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	40020400 	.word	0x40020400
 8007f7c:	200011fe 	.word	0x200011fe
 8007f80:	20000014 	.word	0x20000014
 8007f84:	200011fc 	.word	0x200011fc
 8007f88:	200011fd 	.word	0x200011fd
 8007f8c:	40021000 	.word	0x40021000
 8007f90:	2000000c 	.word	0x2000000c
 8007f94:	20001234 	.word	0x20001234
 8007f98:	20001230 	.word	0x20001230
 8007f9c:	200011f8 	.word	0x200011f8
 8007fa0:	20001129 	.word	0x20001129

08007fa4 <HighlightNumber>:
//##############################################################################################################
void HighlightNumber(int x, int y, const char* format, int value) {
 8007fa4:	b590      	push	{r4, r7, lr}
 8007fa6:	b08b      	sub	sp, #44	@ 0x2c
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	603b      	str	r3, [r7, #0]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), format, value);
 8007fb2:	f107 0014 	add.w	r0, r7, #20
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	210a      	movs	r1, #10
 8007fbc:	f001 fb4c 	bl	8009658 <sniprintf>
    ssd1306_SetCursor(x, y);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	b2d2      	uxtb	r2, r2
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7f9 fcce 	bl	800196c <ssd1306_SetCursor>
    ssd1306_FillRectangle(x, y, x+8 , y+8 , White);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	b2d8      	uxtb	r0, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	b2d9      	uxtb	r1, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	3308      	adds	r3, #8
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2401      	movs	r4, #1
 8007fea:	9400      	str	r4, [sp, #0]
 8007fec:	f7f9 fcd6 	bl	800199c <ssd1306_FillRectangle>
    ssd1306_WriteString(buffer, Font_7x10, Black); // Write black text on white background
 8007ff0:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <HighlightNumber+0x64>)
 8007ff2:	f107 0014 	add.w	r0, r7, #20
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	9200      	str	r2, [sp, #0]
 8007ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ffc:	f7f9 fc90 	bl	8001920 <ssd1306_WriteString>
}
 8008000:	bf00      	nop
 8008002:	3724      	adds	r7, #36	@ 0x24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd90      	pop	{r4, r7, pc}
 8008008:	0800d474 	.word	0x0800d474

0800800c <EditRTC>:

void EditRTC() {
 800800c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800800e:	b085      	sub	sp, #20
 8008010:	af04      	add	r7, sp, #16
    // Variables to store user input for the RTC
    static int editIndex = 0; // Index to navigate through time and date components

	while(editIndex<6 && !TimeSetDone)  // && !TimeSetDone
 8008012:	e237      	b.n	8008484 <EditRTC+0x478>

		    //ssd1306_SetCursor(menu_line_X-4, menu_line_Y-8);
		    //ssd1306_WriteString(" Edit RTC", Font_7x10, White);

		    // Display and highlight the component being edited
		    ssd1306_SetCursor(menu_line_X, menu_line_Y+16);
 8008014:	4bad      	ldr	r3, [pc, #692]	@ (80082cc <EditRTC+0x2c0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	b2da      	uxtb	r2, r3
 800801a:	4bad      	ldr	r3, [pc, #692]	@ (80082d0 <EditRTC+0x2c4>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	3310      	adds	r3, #16
 8008022:	b2db      	uxtb	r3, r3
 8008024:	4619      	mov	r1, r3
 8008026:	4610      	mov	r0, r2
 8008028:	f7f9 fca0 	bl	800196c <ssd1306_SetCursor>
		    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 800802c:	4ba9      	ldr	r3, [pc, #676]	@ (80082d4 <EditRTC+0x2c8>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	4619      	mov	r1, r3
 8008032:	4ba9      	ldr	r3, [pc, #676]	@ (80082d8 <EditRTC+0x2cc>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	4ba8      	ldr	r3, [pc, #672]	@ (80082dc <EditRTC+0x2d0>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	9200      	str	r2, [sp, #0]
 8008040:	460b      	mov	r3, r1
 8008042:	4aa7      	ldr	r2, [pc, #668]	@ (80082e0 <EditRTC+0x2d4>)
 8008044:	2114      	movs	r1, #20
 8008046:	48a7      	ldr	r0, [pc, #668]	@ (80082e4 <EditRTC+0x2d8>)
 8008048:	f001 fb06 	bl	8009658 <sniprintf>
		    ssd1306_WriteString(buffer, Font_7x10, White);
 800804c:	4ba6      	ldr	r3, [pc, #664]	@ (80082e8 <EditRTC+0x2dc>)
 800804e:	2201      	movs	r2, #1
 8008050:	9200      	str	r2, [sp, #0]
 8008052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008054:	48a3      	ldr	r0, [pc, #652]	@ (80082e4 <EditRTC+0x2d8>)
 8008056:	f7f9 fc63 	bl	8001920 <ssd1306_WriteString>

		    ssd1306_SetCursor(menu_line_X, menu_line_Y+32);
 800805a:	4b9c      	ldr	r3, [pc, #624]	@ (80082cc <EditRTC+0x2c0>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	b2da      	uxtb	r2, r3
 8008060:	4b9b      	ldr	r3, [pc, #620]	@ (80082d0 <EditRTC+0x2c4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	3320      	adds	r3, #32
 8008068:	b2db      	uxtb	r3, r3
 800806a:	4619      	mov	r1, r3
 800806c:	4610      	mov	r0, r2
 800806e:	f7f9 fc7d 	bl	800196c <ssd1306_SetCursor>
		    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", date, month, year);
 8008072:	4b9e      	ldr	r3, [pc, #632]	@ (80082ec <EditRTC+0x2e0>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	4619      	mov	r1, r3
 8008078:	4b9d      	ldr	r3, [pc, #628]	@ (80082f0 <EditRTC+0x2e4>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	4b9d      	ldr	r3, [pc, #628]	@ (80082f4 <EditRTC+0x2e8>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	9200      	str	r2, [sp, #0]
 8008086:	460b      	mov	r3, r1
 8008088:	4a9b      	ldr	r2, [pc, #620]	@ (80082f8 <EditRTC+0x2ec>)
 800808a:	2114      	movs	r1, #20
 800808c:	4895      	ldr	r0, [pc, #596]	@ (80082e4 <EditRTC+0x2d8>)
 800808e:	f001 fae3 	bl	8009658 <sniprintf>
		    ssd1306_WriteString(buffer, Font_7x10, White);
 8008092:	4b95      	ldr	r3, [pc, #596]	@ (80082e8 <EditRTC+0x2dc>)
 8008094:	2201      	movs	r2, #1
 8008096:	9200      	str	r2, [sp, #0]
 8008098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800809a:	4892      	ldr	r0, [pc, #584]	@ (80082e4 <EditRTC+0x2d8>)
 800809c:	f7f9 fc40 	bl	8001920 <ssd1306_WriteString>


		// Highlight the specific component being edited
		    switch (editIndex) {
 80080a0:	4b96      	ldr	r3, [pc, #600]	@ (80082fc <EditRTC+0x2f0>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b05      	cmp	r3, #5
 80080a6:	d85f      	bhi.n	8008168 <EditRTC+0x15c>
 80080a8:	a201      	add	r2, pc, #4	@ (adr r2, 80080b0 <EditRTC+0xa4>)
 80080aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ae:	bf00      	nop
 80080b0:	080080c9 	.word	0x080080c9
 80080b4:	080080e1 	.word	0x080080e1
 80080b8:	080080fd 	.word	0x080080fd
 80080bc:	08008119 	.word	0x08008119
 80080c0:	08008131 	.word	0x08008131
 80080c4:	0800814d 	.word	0x0800814d
		        case 0:
		            HighlightNumber(menu_line_X, menu_line_Y+16, "%02d", hours);
 80080c8:	4b80      	ldr	r3, [pc, #512]	@ (80082cc <EditRTC+0x2c0>)
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	4b80      	ldr	r3, [pc, #512]	@ (80082d0 <EditRTC+0x2c4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f103 0110 	add.w	r1, r3, #16
 80080d4:	4b7f      	ldr	r3, [pc, #508]	@ (80082d4 <EditRTC+0x2c8>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	4a89      	ldr	r2, [pc, #548]	@ (8008300 <EditRTC+0x2f4>)
 80080da:	f7ff ff63 	bl	8007fa4 <HighlightNumber>
		            break;
 80080de:	e043      	b.n	8008168 <EditRTC+0x15c>
		        case 1:
		            HighlightNumber(menu_line_X+22, menu_line_Y+16, "%02d", minutes);
 80080e0:	4b7a      	ldr	r3, [pc, #488]	@ (80082cc <EditRTC+0x2c0>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f103 0016 	add.w	r0, r3, #22
 80080e8:	4b79      	ldr	r3, [pc, #484]	@ (80082d0 <EditRTC+0x2c4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f103 0110 	add.w	r1, r3, #16
 80080f0:	4b79      	ldr	r3, [pc, #484]	@ (80082d8 <EditRTC+0x2cc>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	4a82      	ldr	r2, [pc, #520]	@ (8008300 <EditRTC+0x2f4>)
 80080f6:	f7ff ff55 	bl	8007fa4 <HighlightNumber>
		            break;
 80080fa:	e035      	b.n	8008168 <EditRTC+0x15c>
		        case 2:
		            HighlightNumber(menu_line_X+44-2, menu_line_Y+16, "%02d", seconds);
 80080fc:	4b73      	ldr	r3, [pc, #460]	@ (80082cc <EditRTC+0x2c0>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8008104:	4b72      	ldr	r3, [pc, #456]	@ (80082d0 <EditRTC+0x2c4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f103 0110 	add.w	r1, r3, #16
 800810c:	4b73      	ldr	r3, [pc, #460]	@ (80082dc <EditRTC+0x2d0>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	4a7b      	ldr	r2, [pc, #492]	@ (8008300 <EditRTC+0x2f4>)
 8008112:	f7ff ff47 	bl	8007fa4 <HighlightNumber>
		            break;
 8008116:	e027      	b.n	8008168 <EditRTC+0x15c>
		        //case 3:
		            //HighlightNumber(menu_line_X, menu_line_Y+32, "%d", day);
		           // break;
		        case 3:
		            HighlightNumber(menu_line_X, menu_line_Y+32, "%02d", date);
 8008118:	4b6c      	ldr	r3, [pc, #432]	@ (80082cc <EditRTC+0x2c0>)
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	4b6c      	ldr	r3, [pc, #432]	@ (80082d0 <EditRTC+0x2c4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f103 0120 	add.w	r1, r3, #32
 8008124:	4b71      	ldr	r3, [pc, #452]	@ (80082ec <EditRTC+0x2e0>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	4a75      	ldr	r2, [pc, #468]	@ (8008300 <EditRTC+0x2f4>)
 800812a:	f7ff ff3b 	bl	8007fa4 <HighlightNumber>
		            break;
 800812e:	e01b      	b.n	8008168 <EditRTC+0x15c>
		        case 4:
		            HighlightNumber(menu_line_X+22, menu_line_Y+32, "%02d", month);
 8008130:	4b66      	ldr	r3, [pc, #408]	@ (80082cc <EditRTC+0x2c0>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f103 0016 	add.w	r0, r3, #22
 8008138:	4b65      	ldr	r3, [pc, #404]	@ (80082d0 <EditRTC+0x2c4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f103 0120 	add.w	r1, r3, #32
 8008140:	4b6b      	ldr	r3, [pc, #428]	@ (80082f0 <EditRTC+0x2e4>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	4a6e      	ldr	r2, [pc, #440]	@ (8008300 <EditRTC+0x2f4>)
 8008146:	f7ff ff2d 	bl	8007fa4 <HighlightNumber>
		            break;
 800814a:	e00d      	b.n	8008168 <EditRTC+0x15c>
		        case 5:
		            HighlightNumber(menu_line_X+44-2, menu_line_Y+32, "%02d", year);
 800814c:	4b5f      	ldr	r3, [pc, #380]	@ (80082cc <EditRTC+0x2c0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8008154:	4b5e      	ldr	r3, [pc, #376]	@ (80082d0 <EditRTC+0x2c4>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f103 0120 	add.w	r1, r3, #32
 800815c:	4b65      	ldr	r3, [pc, #404]	@ (80082f4 <EditRTC+0x2e8>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	4a67      	ldr	r2, [pc, #412]	@ (8008300 <EditRTC+0x2f4>)
 8008162:	f7ff ff1f 	bl	8007fa4 <HighlightNumber>
		            break;
 8008166:	bf00      	nop
		//ssd1306_WriteString("Menu> Edit RTC", Font_7x10, White);
		ssd1306_SetCursor(5, 44);
		ssd1306_WriteString(buffer, Font_7x10, White);*/

		// Handle button presses for editing
		if (HAL_GPIO_ReadPin(GPIOE, NEXT_BTN_Pin) == GPIO_PIN_RESET) {
 8008168:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800816c:	4865      	ldr	r0, [pc, #404]	@ (8008304 <EditRTC+0x2f8>)
 800816e:	f7fb fc03 	bl	8003978 <HAL_GPIO_ReadPin>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	f040 8086 	bne.w	8008286 <EditRTC+0x27a>
			HAL_Delay(Debounce_Delay); // Debounce delay
 800817a:	4b63      	ldr	r3, [pc, #396]	@ (8008308 <EditRTC+0x2fc>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f7fa f914 	bl	80023ac <HAL_Delay>
			switch (editIndex) {
 8008184:	4b5d      	ldr	r3, [pc, #372]	@ (80082fc <EditRTC+0x2f0>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b05      	cmp	r3, #5
 800818a:	f200 8179 	bhi.w	8008480 <EditRTC+0x474>
 800818e:	a201      	add	r2, pc, #4	@ (adr r2, 8008194 <EditRTC+0x188>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081ad 	.word	0x080081ad
 8008198:	080081d1 	.word	0x080081d1
 800819c:	080081f7 	.word	0x080081f7
 80081a0:	0800821d 	.word	0x0800821d
 80081a4:	08008243 	.word	0x08008243
 80081a8:	08008265 	.word	0x08008265
				case 0: hours = (hours + 1) % 24; break;
 80081ac:	4b49      	ldr	r3, [pc, #292]	@ (80082d4 <EditRTC+0x2c8>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	4b56      	ldr	r3, [pc, #344]	@ (800830c <EditRTC+0x300>)
 80081b4:	fb83 1302 	smull	r1, r3, r3, r2
 80081b8:	1099      	asrs	r1, r3, #2
 80081ba:	17d3      	asrs	r3, r2, #31
 80081bc:	1ac9      	subs	r1, r1, r3
 80081be:	460b      	mov	r3, r1
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	440b      	add	r3, r1
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	1ad1      	subs	r1, r2, r3
 80081c8:	b2ca      	uxtb	r2, r1
 80081ca:	4b42      	ldr	r3, [pc, #264]	@ (80082d4 <EditRTC+0x2c8>)
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	e157      	b.n	8008480 <EditRTC+0x474>
				case 1: minutes = (minutes + 1) % 60; break;
 80081d0:	4b41      	ldr	r3, [pc, #260]	@ (80082d8 <EditRTC+0x2cc>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	4b4e      	ldr	r3, [pc, #312]	@ (8008310 <EditRTC+0x304>)
 80081d8:	fb83 1302 	smull	r1, r3, r3, r2
 80081dc:	4413      	add	r3, r2
 80081de:	1159      	asrs	r1, r3, #5
 80081e0:	17d3      	asrs	r3, r2, #31
 80081e2:	1ac9      	subs	r1, r1, r3
 80081e4:	460b      	mov	r3, r1
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	1a5b      	subs	r3, r3, r1
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	1ad1      	subs	r1, r2, r3
 80081ee:	b2ca      	uxtb	r2, r1
 80081f0:	4b39      	ldr	r3, [pc, #228]	@ (80082d8 <EditRTC+0x2cc>)
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	e144      	b.n	8008480 <EditRTC+0x474>
				case 2: seconds = (seconds + 1) % 60; break;
 80081f6:	4b39      	ldr	r3, [pc, #228]	@ (80082dc <EditRTC+0x2d0>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	4b44      	ldr	r3, [pc, #272]	@ (8008310 <EditRTC+0x304>)
 80081fe:	fb83 1302 	smull	r1, r3, r3, r2
 8008202:	4413      	add	r3, r2
 8008204:	1159      	asrs	r1, r3, #5
 8008206:	17d3      	asrs	r3, r2, #31
 8008208:	1ac9      	subs	r1, r1, r3
 800820a:	460b      	mov	r3, r1
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	1a5b      	subs	r3, r3, r1
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	1ad1      	subs	r1, r2, r3
 8008214:	b2ca      	uxtb	r2, r1
 8008216:	4b31      	ldr	r3, [pc, #196]	@ (80082dc <EditRTC+0x2d0>)
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	e131      	b.n	8008480 <EditRTC+0x474>
				//case 3: day = (day % 7) + 1; break;
				case 3: date = (date % 31) + 1; break;
 800821c:	4b33      	ldr	r3, [pc, #204]	@ (80082ec <EditRTC+0x2e0>)
 800821e:	781a      	ldrb	r2, [r3, #0]
 8008220:	4b3c      	ldr	r3, [pc, #240]	@ (8008314 <EditRTC+0x308>)
 8008222:	fba3 1302 	umull	r1, r3, r3, r2
 8008226:	1ad1      	subs	r1, r2, r3
 8008228:	0849      	lsrs	r1, r1, #1
 800822a:	440b      	add	r3, r1
 800822c:	0919      	lsrs	r1, r3, #4
 800822e:	460b      	mov	r3, r1
 8008230:	015b      	lsls	r3, r3, #5
 8008232:	1a5b      	subs	r3, r3, r1
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	b2db      	uxtb	r3, r3
 8008238:	3301      	adds	r3, #1
 800823a:	b2da      	uxtb	r2, r3
 800823c:	4b2b      	ldr	r3, [pc, #172]	@ (80082ec <EditRTC+0x2e0>)
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	e11e      	b.n	8008480 <EditRTC+0x474>
				case 4: month = (month % 12) + 1; break;
 8008242:	4b2b      	ldr	r3, [pc, #172]	@ (80082f0 <EditRTC+0x2e4>)
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	4b34      	ldr	r3, [pc, #208]	@ (8008318 <EditRTC+0x30c>)
 8008248:	fba3 1302 	umull	r1, r3, r3, r2
 800824c:	08d9      	lsrs	r1, r3, #3
 800824e:	460b      	mov	r3, r1
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	440b      	add	r3, r1
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	b2db      	uxtb	r3, r3
 800825a:	3301      	adds	r3, #1
 800825c:	b2da      	uxtb	r2, r3
 800825e:	4b24      	ldr	r3, [pc, #144]	@ (80082f0 <EditRTC+0x2e4>)
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	e10d      	b.n	8008480 <EditRTC+0x474>
				case 5: year = (year + 1) % 100; break;
 8008264:	4b23      	ldr	r3, [pc, #140]	@ (80082f4 <EditRTC+0x2e8>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	3301      	adds	r3, #1
 800826a:	4a2c      	ldr	r2, [pc, #176]	@ (800831c <EditRTC+0x310>)
 800826c:	fb82 1203 	smull	r1, r2, r2, r3
 8008270:	1151      	asrs	r1, r2, #5
 8008272:	17da      	asrs	r2, r3, #31
 8008274:	1a8a      	subs	r2, r1, r2
 8008276:	2164      	movs	r1, #100	@ 0x64
 8008278:	fb01 f202 	mul.w	r2, r1, r2
 800827c:	1a9a      	subs	r2, r3, r2
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	4b1c      	ldr	r3, [pc, #112]	@ (80082f4 <EditRTC+0x2e8>)
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	e0fc      	b.n	8008480 <EditRTC+0x474>
			}
		} else if (HAL_GPIO_ReadPin(GPIOE, PREV_BTN_Pin) == GPIO_PIN_RESET) {
 8008286:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800828a:	481e      	ldr	r0, [pc, #120]	@ (8008304 <EditRTC+0x2f8>)
 800828c:	f7fb fb74 	bl	8003978 <HAL_GPIO_ReadPin>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	f040 8092 	bne.w	80083bc <EditRTC+0x3b0>
			HAL_Delay(Debounce_Delay); // Debounce delay
 8008298:	4b1b      	ldr	r3, [pc, #108]	@ (8008308 <EditRTC+0x2fc>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4618      	mov	r0, r3
 800829e:	f7fa f885 	bl	80023ac <HAL_Delay>
			switch (editIndex) {
 80082a2:	4b16      	ldr	r3, [pc, #88]	@ (80082fc <EditRTC+0x2f0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	f200 80ea 	bhi.w	8008480 <EditRTC+0x474>
 80082ac:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <EditRTC+0x2a8>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	08008321 	.word	0x08008321
 80082b8:	0800833b 	.word	0x0800833b
 80082bc:	08008355 	.word	0x08008355
 80082c0:	0800836f 	.word	0x0800836f
 80082c4:	08008389 	.word	0x08008389
 80082c8:	080083a3 	.word	0x080083a3
 80082cc:	2000001c 	.word	0x2000001c
 80082d0:	20000020 	.word	0x20000020
 80082d4:	20001240 	.word	0x20001240
 80082d8:	20001241 	.word	0x20001241
 80082dc:	20001242 	.word	0x20001242
 80082e0:	0800b950 	.word	0x0800b950
 80082e4:	20001244 	.word	0x20001244
 80082e8:	0800d474 	.word	0x0800d474
 80082ec:	2000002d 	.word	0x2000002d
 80082f0:	2000002e 	.word	0x2000002e
 80082f4:	2000002f 	.word	0x2000002f
 80082f8:	0800b960 	.word	0x0800b960
 80082fc:	20001258 	.word	0x20001258
 8008300:	0800b970 	.word	0x0800b970
 8008304:	40021000 	.word	0x40021000
 8008308:	20000014 	.word	0x20000014
 800830c:	2aaaaaab 	.word	0x2aaaaaab
 8008310:	88888889 	.word	0x88888889
 8008314:	08421085 	.word	0x08421085
 8008318:	aaaaaaab 	.word	0xaaaaaaab
 800831c:	51eb851f 	.word	0x51eb851f
				case 0: hours = (hours == 0) ? 23 : hours - 1; break;
 8008320:	4b61      	ldr	r3, [pc, #388]	@ (80084a8 <EditRTC+0x49c>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d004      	beq.n	8008332 <EditRTC+0x326>
 8008328:	4b5f      	ldr	r3, [pc, #380]	@ (80084a8 <EditRTC+0x49c>)
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	3b01      	subs	r3, #1
 800832e:	b2db      	uxtb	r3, r3
 8008330:	e000      	b.n	8008334 <EditRTC+0x328>
 8008332:	2317      	movs	r3, #23
 8008334:	4a5c      	ldr	r2, [pc, #368]	@ (80084a8 <EditRTC+0x49c>)
 8008336:	7013      	strb	r3, [r2, #0]
 8008338:	e0a2      	b.n	8008480 <EditRTC+0x474>
				case 1: minutes = (minutes == 0) ? 59 : minutes - 1; break;
 800833a:	4b5c      	ldr	r3, [pc, #368]	@ (80084ac <EditRTC+0x4a0>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d004      	beq.n	800834c <EditRTC+0x340>
 8008342:	4b5a      	ldr	r3, [pc, #360]	@ (80084ac <EditRTC+0x4a0>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	3b01      	subs	r3, #1
 8008348:	b2db      	uxtb	r3, r3
 800834a:	e000      	b.n	800834e <EditRTC+0x342>
 800834c:	233b      	movs	r3, #59	@ 0x3b
 800834e:	4a57      	ldr	r2, [pc, #348]	@ (80084ac <EditRTC+0x4a0>)
 8008350:	7013      	strb	r3, [r2, #0]
 8008352:	e095      	b.n	8008480 <EditRTC+0x474>
				case 2: seconds = (seconds == 0) ? 59 : seconds - 1; break;
 8008354:	4b56      	ldr	r3, [pc, #344]	@ (80084b0 <EditRTC+0x4a4>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d004      	beq.n	8008366 <EditRTC+0x35a>
 800835c:	4b54      	ldr	r3, [pc, #336]	@ (80084b0 <EditRTC+0x4a4>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	3b01      	subs	r3, #1
 8008362:	b2db      	uxtb	r3, r3
 8008364:	e000      	b.n	8008368 <EditRTC+0x35c>
 8008366:	233b      	movs	r3, #59	@ 0x3b
 8008368:	4a51      	ldr	r2, [pc, #324]	@ (80084b0 <EditRTC+0x4a4>)
 800836a:	7013      	strb	r3, [r2, #0]
 800836c:	e088      	b.n	8008480 <EditRTC+0x474>
				//case 3: day = (day == 1) ? 7 : day - 1; break;
				case 3: date = (date == 1) ? 31 : date - 1; break;
 800836e:	4b51      	ldr	r3, [pc, #324]	@ (80084b4 <EditRTC+0x4a8>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d004      	beq.n	8008380 <EditRTC+0x374>
 8008376:	4b4f      	ldr	r3, [pc, #316]	@ (80084b4 <EditRTC+0x4a8>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	3b01      	subs	r3, #1
 800837c:	b2db      	uxtb	r3, r3
 800837e:	e000      	b.n	8008382 <EditRTC+0x376>
 8008380:	231f      	movs	r3, #31
 8008382:	4a4c      	ldr	r2, [pc, #304]	@ (80084b4 <EditRTC+0x4a8>)
 8008384:	7013      	strb	r3, [r2, #0]
 8008386:	e07b      	b.n	8008480 <EditRTC+0x474>
				case 4: month = (month == 1) ? 12 : month - 1; break;
 8008388:	4b4b      	ldr	r3, [pc, #300]	@ (80084b8 <EditRTC+0x4ac>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d004      	beq.n	800839a <EditRTC+0x38e>
 8008390:	4b49      	ldr	r3, [pc, #292]	@ (80084b8 <EditRTC+0x4ac>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	3b01      	subs	r3, #1
 8008396:	b2db      	uxtb	r3, r3
 8008398:	e000      	b.n	800839c <EditRTC+0x390>
 800839a:	230c      	movs	r3, #12
 800839c:	4a46      	ldr	r2, [pc, #280]	@ (80084b8 <EditRTC+0x4ac>)
 800839e:	7013      	strb	r3, [r2, #0]
 80083a0:	e06e      	b.n	8008480 <EditRTC+0x474>
				case 5: year = (year == 0) ? 99 : year - 1; break;
 80083a2:	4b46      	ldr	r3, [pc, #280]	@ (80084bc <EditRTC+0x4b0>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d004      	beq.n	80083b4 <EditRTC+0x3a8>
 80083aa:	4b44      	ldr	r3, [pc, #272]	@ (80084bc <EditRTC+0x4b0>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	e000      	b.n	80083b6 <EditRTC+0x3aa>
 80083b4:	2363      	movs	r3, #99	@ 0x63
 80083b6:	4a41      	ldr	r2, [pc, #260]	@ (80084bc <EditRTC+0x4b0>)
 80083b8:	7013      	strb	r3, [r2, #0]
 80083ba:	e061      	b.n	8008480 <EditRTC+0x474>
			}
		} else if (HAL_GPIO_ReadPin(GPIOB, NAVIGATE_BTN_Pin) == GPIO_PIN_RESET) {
 80083bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80083c0:	483f      	ldr	r0, [pc, #252]	@ (80084c0 <EditRTC+0x4b4>)
 80083c2:	f7fb fad9 	bl	8003978 <HAL_GPIO_ReadPin>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d159      	bne.n	8008480 <EditRTC+0x474>
			HAL_Delay(Debounce_Delay); // Debounce delay
 80083cc:	4b3d      	ldr	r3, [pc, #244]	@ (80084c4 <EditRTC+0x4b8>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7f9 ffeb 	bl	80023ac <HAL_Delay>
			editIndex = (editIndex + 1) % 6;
 80083d6:	4b3c      	ldr	r3, [pc, #240]	@ (80084c8 <EditRTC+0x4bc>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	1c59      	adds	r1, r3, #1
 80083dc:	4b3b      	ldr	r3, [pc, #236]	@ (80084cc <EditRTC+0x4c0>)
 80083de:	fb83 3201 	smull	r3, r2, r3, r1
 80083e2:	17cb      	asrs	r3, r1, #31
 80083e4:	1ad2      	subs	r2, r2, r3
 80083e6:	4613      	mov	r3, r2
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	4413      	add	r3, r2
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	1aca      	subs	r2, r1, r3
 80083f0:	4b35      	ldr	r3, [pc, #212]	@ (80084c8 <EditRTC+0x4bc>)
 80083f2:	601a      	str	r2, [r3, #0]
			holdNavigateBtn++;
 80083f4:	4b36      	ldr	r3, [pc, #216]	@ (80084d0 <EditRTC+0x4c4>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	3301      	adds	r3, #1
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	4b34      	ldr	r3, [pc, #208]	@ (80084d0 <EditRTC+0x4c4>)
 80083fe:	701a      	strb	r2, [r3, #0]
			ssd1306_UpdateScreen();
 8008400:	f7f9 f982 	bl	8001708 <ssd1306_UpdateScreen>

			//if (holdNavigateBtn >= 15) NVIC_SystemReset();

			if (editIndex == 0) { // Completed editing all components
 8008404:	4b30      	ldr	r3, [pc, #192]	@ (80084c8 <EditRTC+0x4bc>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d139      	bne.n	8008480 <EditRTC+0x474>
				RTC_SetTime(hours, minutes, seconds, day, date, month, year);
 800840c:	4b26      	ldr	r3, [pc, #152]	@ (80084a8 <EditRTC+0x49c>)
 800840e:	7818      	ldrb	r0, [r3, #0]
 8008410:	4b26      	ldr	r3, [pc, #152]	@ (80084ac <EditRTC+0x4a0>)
 8008412:	781c      	ldrb	r4, [r3, #0]
 8008414:	4b26      	ldr	r3, [pc, #152]	@ (80084b0 <EditRTC+0x4a4>)
 8008416:	781d      	ldrb	r5, [r3, #0]
 8008418:	4b2e      	ldr	r3, [pc, #184]	@ (80084d4 <EditRTC+0x4c8>)
 800841a:	781e      	ldrb	r6, [r3, #0]
 800841c:	4b25      	ldr	r3, [pc, #148]	@ (80084b4 <EditRTC+0x4a8>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4a25      	ldr	r2, [pc, #148]	@ (80084b8 <EditRTC+0x4ac>)
 8008422:	7812      	ldrb	r2, [r2, #0]
 8008424:	4925      	ldr	r1, [pc, #148]	@ (80084bc <EditRTC+0x4b0>)
 8008426:	7809      	ldrb	r1, [r1, #0]
 8008428:	9102      	str	r1, [sp, #8]
 800842a:	9201      	str	r2, [sp, #4]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	4633      	mov	r3, r6
 8008430:	462a      	mov	r2, r5
 8008432:	4621      	mov	r1, r4
 8008434:	f000 f97a 	bl	800872c <RTC_SetTime>

				HAL_Delay(10);
 8008438:	200a      	movs	r0, #10
 800843a:	f7f9 ffb7 	bl	80023ac <HAL_Delay>
				ssd1306_Fill(Black);
 800843e:	2000      	movs	r0, #0
 8008440:	f7f9 f94a 	bl	80016d8 <ssd1306_Fill>
				ssd1306_SetCursor(menu_line_X+5, menu_line_Y+5);
 8008444:	4b24      	ldr	r3, [pc, #144]	@ (80084d8 <EditRTC+0x4cc>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	b2db      	uxtb	r3, r3
 800844a:	3305      	adds	r3, #5
 800844c:	b2da      	uxtb	r2, r3
 800844e:	4b23      	ldr	r3, [pc, #140]	@ (80084dc <EditRTC+0x4d0>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	3305      	adds	r3, #5
 8008456:	b2db      	uxtb	r3, r3
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f7f9 fa86 	bl	800196c <ssd1306_SetCursor>
				ssd1306_WriteString("DONE", Font_11x18, White);
 8008460:	4b1f      	ldr	r3, [pc, #124]	@ (80084e0 <EditRTC+0x4d4>)
 8008462:	2201      	movs	r2, #1
 8008464:	9200      	str	r2, [sp, #0]
 8008466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008468:	481e      	ldr	r0, [pc, #120]	@ (80084e4 <EditRTC+0x4d8>)
 800846a:	f7f9 fa59 	bl	8001920 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800846e:	f7f9 f94b 	bl	8001708 <ssd1306_UpdateScreen>
				HAL_Delay(2000);
 8008472:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8008476:	f7f9 ff99 	bl	80023ac <HAL_Delay>

				TimeSetDone=1;
 800847a:	4b1b      	ldr	r3, [pc, #108]	@ (80084e8 <EditRTC+0x4dc>)
 800847c:	2201      	movs	r2, #1
 800847e:	601a      	str	r2, [r3, #0]
				//holdNavigateBtn=0;
			}
		}

		ssd1306_UpdateScreen();
 8008480:	f7f9 f942 	bl	8001708 <ssd1306_UpdateScreen>
	while(editIndex<6 && !TimeSetDone)  // && !TimeSetDone
 8008484:	4b10      	ldr	r3, [pc, #64]	@ (80084c8 <EditRTC+0x4bc>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b05      	cmp	r3, #5
 800848a:	dc04      	bgt.n	8008496 <EditRTC+0x48a>
 800848c:	4b16      	ldr	r3, [pc, #88]	@ (80084e8 <EditRTC+0x4dc>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	f43f adbf 	beq.w	8008014 <EditRTC+0x8>

	}  //while

    currentMenu = MENU_SET_AVG;
 8008496:	4b15      	ldr	r3, [pc, #84]	@ (80084ec <EditRTC+0x4e0>)
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]
	LCD();
 800849c:	f7ff fa40 	bl	8007920 <LCD>
}
 80084a0:	bf00      	nop
 80084a2:	3704      	adds	r7, #4
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084a8:	20001240 	.word	0x20001240
 80084ac:	20001241 	.word	0x20001241
 80084b0:	20001242 	.word	0x20001242
 80084b4:	2000002d 	.word	0x2000002d
 80084b8:	2000002e 	.word	0x2000002e
 80084bc:	2000002f 	.word	0x2000002f
 80084c0:	40020400 	.word	0x40020400
 80084c4:	20000014 	.word	0x20000014
 80084c8:	20001258 	.word	0x20001258
 80084cc:	2aaaaaab 	.word	0x2aaaaaab
 80084d0:	200011fe 	.word	0x200011fe
 80084d4:	2000002c 	.word	0x2000002c
 80084d8:	2000001c 	.word	0x2000001c
 80084dc:	20000020 	.word	0x20000020
 80084e0:	0800d480 	.word	0x0800d480
 80084e4:	0800b978 	.word	0x0800b978
 80084e8:	2000123c 	.word	0x2000123c
 80084ec:	200011fc 	.word	0x200011fc

080084f0 <LCD_UpdateMenu>:



//#######################################################################################################################
// Function to handle menu updates
void LCD_UpdateMenu(void) {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
    LCD_DisplayMenu();
 80084f4:	f7ff fa1c 	bl	8007930 <LCD_DisplayMenu>
}
 80084f8:	bf00      	nop
 80084fa:	bd80      	pop	{r7, pc}

080084fc <MeasureAverage>:

void MeasureAverage(void) {
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
for (int var = 1; var <= avgValue+1; var++)
 8008502:	2301      	movs	r3, #1
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	e010      	b.n	800852a <MeasureAverage+0x2e>
{
	SumBil += BilArray[var];
 8008508:	4a15      	ldr	r2, [pc, #84]	@ (8008560 <MeasureAverage+0x64>)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	ed93 7a00 	vldr	s14, [r3]
 8008514:	4b13      	ldr	r3, [pc, #76]	@ (8008564 <MeasureAverage+0x68>)
 8008516:	edd3 7a00 	vldr	s15, [r3]
 800851a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800851e:	4b11      	ldr	r3, [pc, #68]	@ (8008564 <MeasureAverage+0x68>)
 8008520:	edc3 7a00 	vstr	s15, [r3]
for (int var = 1; var <= avgValue+1; var++)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3301      	adds	r3, #1
 8008528:	607b      	str	r3, [r7, #4]
 800852a:	4b0f      	ldr	r3, [pc, #60]	@ (8008568 <MeasureAverage+0x6c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3301      	adds	r3, #1
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	429a      	cmp	r2, r3
 8008534:	dde8      	ble.n	8008508 <MeasureAverage+0xc>
}
AveragedBil = SumBil / avgValue;
 8008536:	4b0b      	ldr	r3, [pc, #44]	@ (8008564 <MeasureAverage+0x68>)
 8008538:	edd3 6a00 	vldr	s13, [r3]
 800853c:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <MeasureAverage+0x6c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	ee07 3a90 	vmov	s15, r3
 8008544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800854c:	4b07      	ldr	r3, [pc, #28]	@ (800856c <MeasureAverage+0x70>)
 800854e:	edc3 7a00 	vstr	s15, [r3]
}
 8008552:	bf00      	nop
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20001200 	.word	0x20001200
 8008564:	20001234 	.word	0x20001234
 8008568:	2000000c 	.word	0x2000000c
 800856c:	20001230 	.word	0x20001230

08008570 <LCD_Reset>:

// Function to reset the menu to the initial state
void LCD_Reset(void) {
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
    currentMenu = MENU_SET_AVG;
 8008576:	4b1b      	ldr	r3, [pc, #108]	@ (80085e4 <LCD_Reset+0x74>)
 8008578:	2200      	movs	r2, #0
 800857a:	701a      	strb	r2, [r3, #0]
    currentCursor = CURSOR_ON_MENU;
 800857c:	4b1a      	ldr	r3, [pc, #104]	@ (80085e8 <LCD_Reset+0x78>)
 800857e:	2200      	movs	r2, #0
 8008580:	701a      	strb	r2, [r3, #0]
    avgValue = 1;
 8008582:	4b1a      	ldr	r3, [pc, #104]	@ (80085ec <LCD_Reset+0x7c>)
 8008584:	2201      	movs	r2, #1
 8008586:	601a      	str	r2, [r3, #0]
    currentTest = 1;
 8008588:	4b19      	ldr	r3, [pc, #100]	@ (80085f0 <LCD_Reset+0x80>)
 800858a:	2201      	movs	r2, #1
 800858c:	601a      	str	r2, [r3, #0]
    //************************************//
    for (int i = 0; i <= 12-1; i++) BilArray[i]=0;
 800858e:	2300      	movs	r3, #0
 8008590:	607b      	str	r3, [r7, #4]
 8008592:	e009      	b.n	80085a8 <LCD_Reset+0x38>
 8008594:	4a17      	ldr	r2, [pc, #92]	@ (80085f4 <LCD_Reset+0x84>)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	f04f 0200 	mov.w	r2, #0
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3301      	adds	r3, #1
 80085a6:	607b      	str	r3, [r7, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b0b      	cmp	r3, #11
 80085ac:	ddf2      	ble.n	8008594 <LCD_Reset+0x24>
    SumBil = 0;
 80085ae:	4b12      	ldr	r3, [pc, #72]	@ (80085f8 <LCD_Reset+0x88>)
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
    AveragedBil = 0;
 80085b6:	4b11      	ldr	r3, [pc, #68]	@ (80085fc <LCD_Reset+0x8c>)
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
    BilResult=0;
 80085be:	4b10      	ldr	r3, [pc, #64]	@ (8008600 <LCD_Reset+0x90>)
 80085c0:	f04f 0200 	mov.w	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
    testDone=0;
 80085c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008604 <LCD_Reset+0x94>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	701a      	strb	r2, [r3, #0]
    //***********************************//
    HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET); // Turn off the LED
 80085cc:	2200      	movs	r2, #0
 80085ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80085d2:	480d      	ldr	r0, [pc, #52]	@ (8008608 <LCD_Reset+0x98>)
 80085d4:	f7fb f9e8 	bl	80039a8 <HAL_GPIO_WritePin>
    LCD_UpdateMenu();
 80085d8:	f7ff ff8a 	bl	80084f0 <LCD_UpdateMenu>
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	200011fc 	.word	0x200011fc
 80085e8:	200011fd 	.word	0x200011fd
 80085ec:	2000000c 	.word	0x2000000c
 80085f0:	20000010 	.word	0x20000010
 80085f4:	20001200 	.word	0x20001200
 80085f8:	20001234 	.word	0x20001234
 80085fc:	20001230 	.word	0x20001230
 8008600:	200011f8 	.word	0x200011f8
 8008604:	20001129 	.word	0x20001129
 8008608:	40021000 	.word	0x40021000

0800860c <DoesTestComplete>:

// Call this function after each test
void DoesTestComplete(void) {
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0

	if (testDone)    				 // if test btn pressed
 8008610:	4b15      	ldr	r3, [pc, #84]	@ (8008668 <DoesTestComplete+0x5c>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d025      	beq.n	8008664 <DoesTestComplete+0x58>
	{
		testDone=0;
 8008618:	4b13      	ldr	r3, [pc, #76]	@ (8008668 <DoesTestComplete+0x5c>)
 800861a:	2200      	movs	r2, #0
 800861c:	701a      	strb	r2, [r3, #0]
		BilArray[currentTest]=BilResult;
 800861e:	4b13      	ldr	r3, [pc, #76]	@ (800866c <DoesTestComplete+0x60>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a13      	ldr	r2, [pc, #76]	@ (8008670 <DoesTestComplete+0x64>)
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	4913      	ldr	r1, [pc, #76]	@ (8008674 <DoesTestComplete+0x68>)
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	440b      	add	r3, r1
 800862c:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET);
 800862e:	2200      	movs	r2, #0
 8008630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008634:	4810      	ldr	r0, [pc, #64]	@ (8008678 <DoesTestComplete+0x6c>)
 8008636:	f7fb f9b7 	bl	80039a8 <HAL_GPIO_WritePin>
		HAL_Delay(Tests_Intratime);     // Time between Tests
 800863a:	4b10      	ldr	r3, [pc, #64]	@ (800867c <DoesTestComplete+0x70>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f7f9 feb4 	bl	80023ac <HAL_Delay>

		currentTest++;
 8008644:	4b09      	ldr	r3, [pc, #36]	@ (800866c <DoesTestComplete+0x60>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3301      	adds	r3, #1
 800864a:	4a08      	ldr	r2, [pc, #32]	@ (800866c <DoesTestComplete+0x60>)
 800864c:	6013      	str	r3, [r2, #0]
		if (currentTest > avgValue)  currentMenu = MENU_SHOW_RESULT;
 800864e:	4b07      	ldr	r3, [pc, #28]	@ (800866c <DoesTestComplete+0x60>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b0b      	ldr	r3, [pc, #44]	@ (8008680 <DoesTestComplete+0x74>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	dd02      	ble.n	8008660 <DoesTestComplete+0x54>
 800865a:	4b0a      	ldr	r3, [pc, #40]	@ (8008684 <DoesTestComplete+0x78>)
 800865c:	2202      	movs	r2, #2
 800865e:	701a      	strb	r2, [r3, #0]
		LCD_UpdateMenu();
 8008660:	f7ff ff46 	bl	80084f0 <LCD_UpdateMenu>
	}
}
 8008664:	bf00      	nop
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20001129 	.word	0x20001129
 800866c:	20000010 	.word	0x20000010
 8008670:	200011f8 	.word	0x200011f8
 8008674:	20001200 	.word	0x20001200
 8008678:	40021000 	.word	0x40021000
 800867c:	20000018 	.word	0x20000018
 8008680:	2000000c 	.word	0x2000000c
 8008684:	200011fc 	.word	0x200011fc

08008688 <decToBcd>:


#define DS1307_ADDRESS 0x68  // DS1307 I2C address

// BCD conversion helper functions
uint8_t decToBcd(int val) {
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
    return (uint8_t)((val / 10 * 16) + (val % 10));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a0f      	ldr	r2, [pc, #60]	@ (80086d0 <decToBcd+0x48>)
 8008694:	fb82 1203 	smull	r1, r2, r2, r3
 8008698:	1092      	asrs	r2, r2, #2
 800869a:	17db      	asrs	r3, r3, #31
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	b2d8      	uxtb	r0, r3
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	4b0a      	ldr	r3, [pc, #40]	@ (80086d0 <decToBcd+0x48>)
 80086a8:	fb83 1302 	smull	r1, r3, r3, r2
 80086ac:	1099      	asrs	r1, r3, #2
 80086ae:	17d3      	asrs	r3, r2, #31
 80086b0:	1ac9      	subs	r1, r1, r3
 80086b2:	460b      	mov	r3, r1
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	440b      	add	r3, r1
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	1ad1      	subs	r1, r2, r3
 80086bc:	b2cb      	uxtb	r3, r1
 80086be:	4403      	add	r3, r0
 80086c0:	b2db      	uxtb	r3, r3
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	66666667 	.word	0x66666667

080086d4 <bcdToDec>:

int bcdToDec(uint8_t val) {
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	091b      	lsrs	r3, r3, #4
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	461a      	mov	r2, r3
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	461a      	mov	r2, r3
 80086f0:	79fb      	ldrb	r3, [r7, #7]
 80086f2:	f003 030f 	and.w	r3, r3, #15
 80086f6:	4413      	add	r3, r2
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <RTC_Init>:

// Function to initialize the DS1307 RTC
void RTC_Init(void) {
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af02      	add	r7, sp, #8
    // Ensure the RTC is started by setting the CH (Clock Halt) bit to 0
    uint8_t initData[2] = {0x00, 0x00};
 800870a:	2300      	movs	r3, #0
 800870c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, initData, 2, HAL_MAX_DELAY);
 800870e:	1d3a      	adds	r2, r7, #4
 8008710:	f04f 33ff 	mov.w	r3, #4294967295
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	2302      	movs	r3, #2
 8008718:	21d0      	movs	r1, #208	@ 0xd0
 800871a:	4803      	ldr	r0, [pc, #12]	@ (8008728 <RTC_Init+0x24>)
 800871c:	f7fb faba 	bl	8003c94 <HAL_I2C_Master_Transmit>
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	200002c4 	.word	0x200002c4

0800872c <RTC_SetTime>:

// Function to set the time and date on the DS1307
void RTC_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t day, uint8_t date, uint8_t month, uint8_t year) {
 800872c:	b590      	push	{r4, r7, lr}
 800872e:	b087      	sub	sp, #28
 8008730:	af02      	add	r7, sp, #8
 8008732:	4604      	mov	r4, r0
 8008734:	4608      	mov	r0, r1
 8008736:	4611      	mov	r1, r2
 8008738:	461a      	mov	r2, r3
 800873a:	4623      	mov	r3, r4
 800873c:	71fb      	strb	r3, [r7, #7]
 800873e:	4603      	mov	r3, r0
 8008740:	71bb      	strb	r3, [r7, #6]
 8008742:	460b      	mov	r3, r1
 8008744:	717b      	strb	r3, [r7, #5]
 8008746:	4613      	mov	r3, r2
 8008748:	713b      	strb	r3, [r7, #4]
    uint8_t setData[8];
    setData[0] = 0x00;  // Register address to start with
 800874a:	2300      	movs	r3, #0
 800874c:	723b      	strb	r3, [r7, #8]
    setData[1] = decToBcd(seconds);
 800874e:	797b      	ldrb	r3, [r7, #5]
 8008750:	4618      	mov	r0, r3
 8008752:	f7ff ff99 	bl	8008688 <decToBcd>
 8008756:	4603      	mov	r3, r0
 8008758:	727b      	strb	r3, [r7, #9]
    setData[2] = decToBcd(minutes);
 800875a:	79bb      	ldrb	r3, [r7, #6]
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff ff93 	bl	8008688 <decToBcd>
 8008762:	4603      	mov	r3, r0
 8008764:	72bb      	strb	r3, [r7, #10]
    setData[3] = decToBcd(hours);
 8008766:	79fb      	ldrb	r3, [r7, #7]
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff ff8d 	bl	8008688 <decToBcd>
 800876e:	4603      	mov	r3, r0
 8008770:	72fb      	strb	r3, [r7, #11]
    setData[4] = decToBcd(day);
 8008772:	793b      	ldrb	r3, [r7, #4]
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff ff87 	bl	8008688 <decToBcd>
 800877a:	4603      	mov	r3, r0
 800877c:	733b      	strb	r3, [r7, #12]
    setData[5] = decToBcd(date);
 800877e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff ff80 	bl	8008688 <decToBcd>
 8008788:	4603      	mov	r3, r0
 800878a:	737b      	strb	r3, [r7, #13]
    setData[6] = decToBcd(month);
 800878c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff ff79 	bl	8008688 <decToBcd>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]
    setData[7] = decToBcd(year);
 800879a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff ff72 	bl	8008688 <decToBcd>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, setData, 8, HAL_MAX_DELAY);
 80087a8:	f107 0208 	add.w	r2, r7, #8
 80087ac:	f04f 33ff 	mov.w	r3, #4294967295
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	2308      	movs	r3, #8
 80087b4:	21d0      	movs	r1, #208	@ 0xd0
 80087b6:	4803      	ldr	r0, [pc, #12]	@ (80087c4 <RTC_SetTime+0x98>)
 80087b8:	f7fb fa6c 	bl	8003c94 <HAL_I2C_Master_Transmit>
}
 80087bc:	bf00      	nop
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd90      	pop	{r4, r7, pc}
 80087c4:	200002c4 	.word	0x200002c4

080087c8 <RTC_GetTime>:

// Function to read the current time and date from the DS1307
void RTC_GetTime(uint8_t* hours, uint8_t* minutes, uint8_t* seconds, uint8_t* day, uint8_t* date, uint8_t* month, uint8_t* year) {
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	@ 0x28
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
    uint8_t readData[7];
    uint8_t startAddr = 0x00;
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, &startAddr, 1, HAL_MAX_DELAY);
 80087da:	f107 0217 	add.w	r2, r7, #23
 80087de:	f04f 33ff 	mov.w	r3, #4294967295
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	2301      	movs	r3, #1
 80087e6:	21d0      	movs	r1, #208	@ 0xd0
 80087e8:	4827      	ldr	r0, [pc, #156]	@ (8008888 <RTC_GetTime+0xc0>)
 80087ea:	f7fb fa53 	bl	8003c94 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, DS1307_ADDRESS << 1, readData, 7, HAL_MAX_DELAY);
 80087ee:	f107 0218 	add.w	r2, r7, #24
 80087f2:	f04f 33ff 	mov.w	r3, #4294967295
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	2307      	movs	r3, #7
 80087fa:	21d0      	movs	r1, #208	@ 0xd0
 80087fc:	4822      	ldr	r0, [pc, #136]	@ (8008888 <RTC_GetTime+0xc0>)
 80087fe:	f7fb fb47 	bl	8003e90 <HAL_I2C_Master_Receive>

    *seconds = bcdToDec(readData[0] & 0x7F);  // Mask to ignore CH bit
 8008802:	7e3b      	ldrb	r3, [r7, #24]
 8008804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008808:	b2db      	uxtb	r3, r3
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff ff62 	bl	80086d4 <bcdToDec>
 8008810:	4603      	mov	r3, r0
 8008812:	b2da      	uxtb	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	701a      	strb	r2, [r3, #0]
    *minutes = bcdToDec(readData[1]);
 8008818:	7e7b      	ldrb	r3, [r7, #25]
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff ff5a 	bl	80086d4 <bcdToDec>
 8008820:	4603      	mov	r3, r0
 8008822:	b2da      	uxtb	r2, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	701a      	strb	r2, [r3, #0]
    *hours = bcdToDec(readData[2] & 0x3F);  // 24-hour format
 8008828:	7ebb      	ldrb	r3, [r7, #26]
 800882a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800882e:	b2db      	uxtb	r3, r3
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff ff4f 	bl	80086d4 <bcdToDec>
 8008836:	4603      	mov	r3, r0
 8008838:	b2da      	uxtb	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	701a      	strb	r2, [r3, #0]
    *day = bcdToDec(readData[3]);
 800883e:	7efb      	ldrb	r3, [r7, #27]
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff ff47 	bl	80086d4 <bcdToDec>
 8008846:	4603      	mov	r3, r0
 8008848:	b2da      	uxtb	r2, r3
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	701a      	strb	r2, [r3, #0]
    *date = bcdToDec(readData[4]);
 800884e:	7f3b      	ldrb	r3, [r7, #28]
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff ff3f 	bl	80086d4 <bcdToDec>
 8008856:	4603      	mov	r3, r0
 8008858:	b2da      	uxtb	r2, r3
 800885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885c:	701a      	strb	r2, [r3, #0]
    *month = bcdToDec(readData[5]);
 800885e:	7f7b      	ldrb	r3, [r7, #29]
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff ff37 	bl	80086d4 <bcdToDec>
 8008866:	4603      	mov	r3, r0
 8008868:	b2da      	uxtb	r2, r3
 800886a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886c:	701a      	strb	r2, [r3, #0]
    *year = bcdToDec(readData[6]);
 800886e:	7fbb      	ldrb	r3, [r7, #30]
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff ff2f 	bl	80086d4 <bcdToDec>
 8008876:	4603      	mov	r3, r0
 8008878:	b2da      	uxtb	r2, r3
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	701a      	strb	r2, [r3, #0]
}
 800887e:	bf00      	nop
 8008880:	3720      	adds	r7, #32
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	200002c4 	.word	0x200002c4

0800888c <RTC_DisplayTime>:

// Function to display the time and date on the OLED
void RTC_DisplayTime(void) {
 800888c:	b590      	push	{r4, r7, lr}
 800888e:	b08d      	sub	sp, #52	@ 0x34
 8008890:	af04      	add	r7, sp, #16
	static char prevBuffer[20] = {0};
    uint8_t hours, minutes, seconds, day, date, month, year;
    char buffer[20];

    RTC_GetTime(&hours, &minutes, &seconds, &day, &date, &month, &year);
 8008892:	f107 041c 	add.w	r4, r7, #28
 8008896:	f107 021d 	add.w	r2, r7, #29
 800889a:	f107 011e 	add.w	r1, r7, #30
 800889e:	f107 001f 	add.w	r0, r7, #31
 80088a2:	f107 0319 	add.w	r3, r7, #25
 80088a6:	9302      	str	r3, [sp, #8]
 80088a8:	f107 031a 	add.w	r3, r7, #26
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	f107 031b 	add.w	r3, r7, #27
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	4623      	mov	r3, r4
 80088b6:	f7ff ff87 	bl	80087c8 <RTC_GetTime>

    //ssd1306_Fill(Black);

    // Format time
    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 80088ba:	7ffb      	ldrb	r3, [r7, #31]
 80088bc:	4619      	mov	r1, r3
 80088be:	7fbb      	ldrb	r3, [r7, #30]
 80088c0:	7f7a      	ldrb	r2, [r7, #29]
 80088c2:	1d38      	adds	r0, r7, #4
 80088c4:	9201      	str	r2, [sp, #4]
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	460b      	mov	r3, r1
 80088ca:	4a22      	ldr	r2, [pc, #136]	@ (8008954 <RTC_DisplayTime+0xc8>)
 80088cc:	2114      	movs	r1, #20
 80088ce:	f000 fec3 	bl	8009658 <sniprintf>
    if (strcmp(buffer, prevBuffer) != 0) {
 80088d2:	1d3b      	adds	r3, r7, #4
 80088d4:	4920      	ldr	r1, [pc, #128]	@ (8008958 <RTC_DisplayTime+0xcc>)
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7f7 fc7a 	bl	80001d0 <strcmp>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00f      	beq.n	8008902 <RTC_DisplayTime+0x76>
		ssd1306_SetCursor(2, 0);
 80088e2:	2100      	movs	r1, #0
 80088e4:	2002      	movs	r0, #2
 80088e6:	f7f9 f841 	bl	800196c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_6x8 ,White);
 80088ea:	4b1c      	ldr	r3, [pc, #112]	@ (800895c <RTC_DisplayTime+0xd0>)
 80088ec:	1d38      	adds	r0, r7, #4
 80088ee:	2201      	movs	r2, #1
 80088f0:	9200      	str	r2, [sp, #0]
 80088f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088f4:	f7f9 f814 	bl	8001920 <ssd1306_WriteString>
		strcpy(prevBuffer, buffer);
 80088f8:	1d3b      	adds	r3, r7, #4
 80088fa:	4619      	mov	r1, r3
 80088fc:	4816      	ldr	r0, [pc, #88]	@ (8008958 <RTC_DisplayTime+0xcc>)
 80088fe:	f000 ffbc 	bl	800987a <strcpy>
	}
    //ssd1306_SetCursor(2, 0);
    //ssd1306_WriteString(buffer, Font_6x8 ,White);

    // Format date
    snprintf(buffer, sizeof(buffer), "%02d/%02d/20%02d", date, month, year);
 8008902:	7efb      	ldrb	r3, [r7, #27]
 8008904:	4619      	mov	r1, r3
 8008906:	7ebb      	ldrb	r3, [r7, #26]
 8008908:	7e7a      	ldrb	r2, [r7, #25]
 800890a:	1d38      	adds	r0, r7, #4
 800890c:	9201      	str	r2, [sp, #4]
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	460b      	mov	r3, r1
 8008912:	4a13      	ldr	r2, [pc, #76]	@ (8008960 <RTC_DisplayTime+0xd4>)
 8008914:	2114      	movs	r1, #20
 8008916:	f000 fe9f 	bl	8009658 <sniprintf>
    if (strcmp(buffer, prevBuffer) != 0) {
 800891a:	1d3b      	adds	r3, r7, #4
 800891c:	490e      	ldr	r1, [pc, #56]	@ (8008958 <RTC_DisplayTime+0xcc>)
 800891e:	4618      	mov	r0, r3
 8008920:	f7f7 fc56 	bl	80001d0 <strcmp>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00f      	beq.n	800894a <RTC_DisplayTime+0xbe>
	   ssd1306_SetCursor(68, 0);
 800892a:	2100      	movs	r1, #0
 800892c:	2044      	movs	r0, #68	@ 0x44
 800892e:	f7f9 f81d 	bl	800196c <ssd1306_SetCursor>
	   ssd1306_WriteString(buffer, Font_6x8, White);
 8008932:	4b0a      	ldr	r3, [pc, #40]	@ (800895c <RTC_DisplayTime+0xd0>)
 8008934:	1d38      	adds	r0, r7, #4
 8008936:	2201      	movs	r2, #1
 8008938:	9200      	str	r2, [sp, #0]
 800893a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800893c:	f7f8 fff0 	bl	8001920 <ssd1306_WriteString>
	   strcpy(prevBuffer, buffer);
 8008940:	1d3b      	adds	r3, r7, #4
 8008942:	4619      	mov	r1, r3
 8008944:	4804      	ldr	r0, [pc, #16]	@ (8008958 <RTC_DisplayTime+0xcc>)
 8008946:	f000 ff98 	bl	800987a <strcpy>
   }
    //ssd1306_SetCursor(68, 0);
    //ssd1306_WriteString(buffer,Font_6x8, White);

    //ssd1306_UpdateScreen();
}
 800894a:	bf00      	nop
 800894c:	3724      	adds	r7, #36	@ 0x24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd90      	pop	{r4, r7, pc}
 8008952:	bf00      	nop
 8008954:	0800b980 	.word	0x0800b980
 8008958:	2000125c 	.word	0x2000125c
 800895c:	0800d468 	.word	0x0800d468
 8008960:	0800b990 	.word	0x0800b990

08008964 <spectrometer>:

volatile uint8_t eos_received = 0;


void spectrometer(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin) == GPIO_PIN_RESET) )
 8008968:	2120      	movs	r1, #32
 800896a:	4811      	ldr	r0, [pc, #68]	@ (80089b0 <spectrometer+0x4c>)
 800896c:	f7fb f804 	bl	8003978 <HAL_GPIO_ReadPin>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d11a      	bne.n	80089ac <spectrometer+0x48>
	{
		if(StartTestMenuFlag==1){
 8008976:	4b0f      	ldr	r3, [pc, #60]	@ (80089b4 <spectrometer+0x50>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d102      	bne.n	8008984 <spectrometer+0x20>
			generate_spectrometer_signals();
 800897e:	f000 f81d 	bl	80089bc <generate_spectrometer_signals>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
			 HAL_Delay(1000);
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
		}
	}
}
 8008982:	e013      	b.n	80089ac <spectrometer+0x48>
		}else if (StartTestMenuFlag==2) {                               // if current menu != StartTest
 8008984:	4b0b      	ldr	r3, [pc, #44]	@ (80089b4 <spectrometer+0x50>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b02      	cmp	r3, #2
 800898a:	d10f      	bne.n	80089ac <spectrometer+0x48>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 800898c:	2201      	movs	r2, #1
 800898e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008992:	4809      	ldr	r0, [pc, #36]	@ (80089b8 <spectrometer+0x54>)
 8008994:	f7fb f808 	bl	80039a8 <HAL_GPIO_WritePin>
			 HAL_Delay(1000);
 8008998:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800899c:	f7f9 fd06 	bl	80023ac <HAL_Delay>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 80089a0:	2200      	movs	r2, #0
 80089a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80089a6:	4804      	ldr	r0, [pc, #16]	@ (80089b8 <spectrometer+0x54>)
 80089a8:	f7fa fffe 	bl	80039a8 <HAL_GPIO_WritePin>
}
 80089ac:	bf00      	nop
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40020000 	.word	0x40020000
 80089b4:	20001238 	.word	0x20001238
 80089b8:	40021000 	.word	0x40021000

080089bc <generate_spectrometer_signals>:

void generate_spectrometer_signals(void)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	af00      	add	r7, sp, #0

	// Button is pressed
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET); // Turn on the LED
 80089c0:	2201      	movs	r2, #1
 80089c2:	2140      	movs	r1, #64	@ 0x40
 80089c4:	4817      	ldr	r0, [pc, #92]	@ (8008a24 <generate_spectrometer_signals+0x68>)
 80089c6:	f7fa ffef 	bl	80039a8 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Wait for stabilization
 80089ca:	2001      	movs	r0, #1
 80089cc:	f7f9 fcee 	bl	80023ac <HAL_Delay>

	// Generate start signal for the spectrometer
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_RESET);
 80089d0:	2200      	movs	r2, #0
 80089d2:	2120      	movs	r1, #32
 80089d4:	4814      	ldr	r0, [pc, #80]	@ (8008a28 <generate_spectrometer_signals+0x6c>)
 80089d6:	f7fa ffe7 	bl	80039a8 <HAL_GPIO_WritePin>
	//DWT_Delay(1);
	HAL_Delay(1);
 80089da:	2001      	movs	r0, #1
 80089dc:	f7f9 fce6 	bl	80023ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 80089e0:	2201      	movs	r2, #1
 80089e2:	2120      	movs	r1, #32
 80089e4:	4810      	ldr	r0, [pc, #64]	@ (8008a28 <generate_spectrometer_signals+0x6c>)
 80089e6:	f7fa ffdf 	bl	80039a8 <HAL_GPIO_WritePin>
	HAL_Delay(20); //8//500 									// Higher integration time Higher Spectrum Amplitude
 80089ea:	2014      	movs	r0, #20
 80089ec:	f7f9 fcde 	bl	80023ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_RESET);
 80089f0:	2200      	movs	r2, #0
 80089f2:	2120      	movs	r1, #32
 80089f4:	480c      	ldr	r0, [pc, #48]	@ (8008a28 <generate_spectrometer_signals+0x6c>)
 80089f6:	f7fa ffd7 	bl	80039a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80089fa:	2001      	movs	r0, #1
 80089fc:	f7f9 fcd6 	bl	80023ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 8008a00:	2201      	movs	r2, #1
 8008a02:	2120      	movs	r1, #32
 8008a04:	4808      	ldr	r0, [pc, #32]	@ (8008a28 <generate_spectrometer_signals+0x6c>)
 8008a06:	f7fa ffcf 	bl	80039a8 <HAL_GPIO_WritePin>

	// Wait for EOS signal
	//while (!eos_received) {}
	capture_and_send_data();
 8008a0a:	f7fe fe21 	bl	8007650 <capture_and_send_data>
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET); 			// Turn off the LED
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2140      	movs	r1, #64	@ 0x40
 8008a12:	4804      	ldr	r0, [pc, #16]	@ (8008a24 <generate_spectrometer_signals+0x68>)
 8008a14:	f7fa ffc8 	bl	80039a8 <HAL_GPIO_WritePin>
	eos_received = 0;
 8008a18:	4b04      	ldr	r3, [pc, #16]	@ (8008a2c <generate_spectrometer_signals+0x70>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	701a      	strb	r2, [r3, #0]

}
 8008a1e:	bf00      	nop
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	40020000 	.word	0x40020000
 8008a28:	40020400 	.word	0x40020400
 8008a2c:	20001270 	.word	0x20001270

08008a30 <EXTI4_IRQHandler>:

/////////////////////////////////////// EOS Interrupt ///////////////////////////////////////////
/* EXTI4 IRQ Handler */
void EXTI4_IRQHandler(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008a34:	2010      	movs	r0, #16
 8008a36:	f7fa ffd1 	bl	80039dc <HAL_GPIO_EXTI_IRQHandler>
}
 8008a3a:	bf00      	nop
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <HAL_GPIO_EXTI_Callback>:

// Callback for EOS interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4) {
 8008a4a:	88fb      	ldrh	r3, [r7, #6]
 8008a4c:	2b10      	cmp	r3, #16
 8008a4e:	d102      	bne.n	8008a56 <HAL_GPIO_EXTI_Callback+0x16>
        eos_received = 1;
 8008a50:	4b04      	ldr	r3, [pc, #16]	@ (8008a64 <HAL_GPIO_EXTI_Callback+0x24>)
 8008a52:	2201      	movs	r2, #1
 8008a54:	701a      	strb	r2, [r3, #0]
    }
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20001270 	.word	0x20001270

08008a68 <DWT_Init>:
/////////////////////////////////////// us Delay Timer ///////////////////////////////////////////
// Function to initialize the DWT unit
void DWT_Init(void) {
 8008a68:	b480      	push	{r7}
 8008a6a:	af00      	add	r7, sp, #0
    // Enable TRC
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008a6c:	4b08      	ldr	r3, [pc, #32]	@ (8008a90 <DWT_Init+0x28>)
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	4a07      	ldr	r2, [pc, #28]	@ (8008a90 <DWT_Init+0x28>)
 8008a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a76:	60d3      	str	r3, [r2, #12]
    // Unlock DWT access
    //DWT->LAR = 0xC5ACCE55;
    // Enable the cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8008a78:	4b06      	ldr	r3, [pc, #24]	@ (8008a94 <DWT_Init+0x2c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a05      	ldr	r2, [pc, #20]	@ (8008a94 <DWT_Init+0x2c>)
 8008a7e:	f043 0301 	orr.w	r3, r3, #1
 8008a82:	6013      	str	r3, [r2, #0]
}
 8008a84:	bf00      	nop
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	e000edf0 	.word	0xe000edf0
 8008a94:	e0001000 	.word	0xe0001000

08008a98 <DWT_GetSysClockFreq>:
// Function to get the system clock frequency
uint32_t DWT_GetSysClockFreq(void) {
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 8008a9c:	4b03      	ldr	r3, [pc, #12]	@ (8008aac <DWT_GetSysClockFreq+0x14>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	20000000 	.word	0x20000000

08008ab0 <DWT_Delay>:

// Function to create a microsecond delay
void DWT_Delay(uint32_t us) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 8008ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8008af0 <DWT_Delay+0x40>)
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (DWT_GetSysClockFreq() / 1000000);
 8008abe:	f7ff ffeb 	bl	8008a98 <DWT_GetSysClockFreq>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8008af4 <DWT_Delay+0x44>)
 8008ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aca:	0c9a      	lsrs	r2, r3, #18
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	fb02 f303 	mul.w	r3, r2, r3
 8008ad2:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - startTick) < delayTicks);
 8008ad4:	bf00      	nop
 8008ad6:	4b06      	ldr	r3, [pc, #24]	@ (8008af0 <DWT_Delay+0x40>)
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d8f8      	bhi.n	8008ad6 <DWT_Delay+0x26>
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	e0001000 	.word	0xe0001000
 8008af4:	431bde83 	.word	0x431bde83

08008af8 <systemLoop>:
int logo_time = 2500;    //2500
int text_time = 2500;    //2000


void systemLoop(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
	  spectrometer();
 8008afc:	f7ff ff32 	bl	8008964 <spectrometer>
	  LCD();
 8008b00:	f7fe ff0e 	bl	8007920 <LCD>
	  RTC_DisplayTime();
 8008b04:	f7ff fec2 	bl	800888c <RTC_DisplayTime>
}
 8008b08:	bf00      	nop
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <systemSetup>:

void systemSetup(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
	   SpectrometerSetup();
 8008b10:	f000 f806 	bl	8008b20 <SpectrometerSetup>
	   LCD_Setup();
 8008b14:	f000 f828 	bl	8008b68 <LCD_Setup>
	   RTC_Init();
 8008b18:	f7ff fdf4 	bl	8008704 <RTC_Init>
}
 8008b1c:	bf00      	nop
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <SpectrometerSetup>:

//################################################################################################//

void SpectrometerSetup(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
	  TIM1->CCR1=5;  //50   50% Duty Cycle ==> to generate 135khz
 8008b24:	4b0c      	ldr	r3, [pc, #48]	@ (8008b58 <SpectrometerSetup+0x38>)
 8008b26:	2205      	movs	r2, #5
 8008b28:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	480b      	ldr	r0, [pc, #44]	@ (8008b5c <SpectrometerSetup+0x3c>)
 8008b2e:	f7fc ff4f 	bl	80059d0 <HAL_TIM_PWM_Start>

	  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 8008b32:	2201      	movs	r2, #1
 8008b34:	2120      	movs	r1, #32
 8008b36:	480a      	ldr	r0, [pc, #40]	@ (8008b60 <SpectrometerSetup+0x40>)
 8008b38:	f7fa ff36 	bl	80039a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8008b42:	4807      	ldr	r0, [pc, #28]	@ (8008b60 <SpectrometerSetup+0x40>)
 8008b44:	f7fa ff30 	bl	80039a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET); // Turn off the LED
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2140      	movs	r1, #64	@ 0x40
 8008b4c:	4805      	ldr	r0, [pc, #20]	@ (8008b64 <SpectrometerSetup+0x44>)
 8008b4e:	f7fa ff2b 	bl	80039a8 <HAL_GPIO_WritePin>
}
 8008b52:	bf00      	nop
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	20000370 	.word	0x20000370
 8008b60:	40020400 	.word	0x40020400
 8008b64:	40020000 	.word	0x40020000

08008b68 <LCD_Setup>:

void LCD_Setup(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
	  ssd1306_Init();
 8008b6c:	f7f8 fd4a 	bl	8001604 <ssd1306_Init>
	  Aymed_Logo();
 8008b70:	f000 f804 	bl	8008b7c <Aymed_Logo>
	  Aymed_Text();
 8008b74:	f000 f824 	bl	8008bc0 <Aymed_Text>

}
 8008b78:	bf00      	nop
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <Aymed_Logo>:

void Aymed_Logo(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af02      	add	r7, sp, #8
	 ssd1306_Fill(Black);
 8008b82:	2000      	movs	r0, #0
 8008b84:	f7f8 fda8 	bl	80016d8 <ssd1306_Fill>
	 ssd1306_SetCursor(0, 0);
 8008b88:	2100      	movs	r1, #0
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	f7f8 feee 	bl	800196c <ssd1306_SetCursor>
     ssd1306_DrawBitmap(0,0,image_data_ss,128,64, White );
 8008b90:	2301      	movs	r3, #1
 8008b92:	9301      	str	r3, [sp, #4]
 8008b94:	2340      	movs	r3, #64	@ 0x40
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	2380      	movs	r3, #128	@ 0x80
 8008b9a:	4a07      	ldr	r2, [pc, #28]	@ (8008bb8 <Aymed_Logo+0x3c>)
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f7f8 ff4a 	bl	8001a38 <ssd1306_DrawBitmap>
     ssd1306_UpdateScreen();
 8008ba4:	f7f8 fdb0 	bl	8001708 <ssd1306_UpdateScreen>
     HAL_Delay(logo_time);
 8008ba8:	4b04      	ldr	r3, [pc, #16]	@ (8008bbc <Aymed_Logo+0x40>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7f9 fbfd 	bl	80023ac <HAL_Delay>
}
 8008bb2:	bf00      	nop
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	0800d4ac 	.word	0x0800d4ac
 8008bbc:	20000030 	.word	0x20000030

08008bc0 <Aymed_Text>:

void Aymed_Text(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	f7f8 fd86 	bl	80016d8 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8008bcc:	2100      	movs	r1, #0
 8008bce:	2000      	movs	r0, #0
 8008bd0:	f7f8 fecc 	bl	800196c <ssd1306_SetCursor>
    ssd1306_DrawBitmap(0,0,image_data_logo_text,128,32, White );          //AYMED text
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	2320      	movs	r3, #32
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	2380      	movs	r3, #128	@ 0x80
 8008bde:	4a0d      	ldr	r2, [pc, #52]	@ (8008c14 <Aymed_Text+0x54>)
 8008be0:	2100      	movs	r1, #0
 8008be2:	2000      	movs	r0, #0
 8008be4:	f7f8 ff28 	bl	8001a38 <ssd1306_DrawBitmap>
    //---------------------------------------------------//
    ssd1306_SetCursor(34, 48);
 8008be8:	2130      	movs	r1, #48	@ 0x30
 8008bea:	2022      	movs	r0, #34	@ 0x22
 8008bec:	f7f8 febe 	bl	800196c <ssd1306_SetCursor>
    ssd1306_WriteString("VISHNE v4", Font_7x10, White);					  //Device's Version
 8008bf0:	4b09      	ldr	r3, [pc, #36]	@ (8008c18 <Aymed_Text+0x58>)
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	9200      	str	r2, [sp, #0]
 8008bf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bf8:	4808      	ldr	r0, [pc, #32]	@ (8008c1c <Aymed_Text+0x5c>)
 8008bfa:	f7f8 fe91 	bl	8001920 <ssd1306_WriteString>
    //---------------------------------------------------//
    ssd1306_UpdateScreen();
 8008bfe:	f7f8 fd83 	bl	8001708 <ssd1306_UpdateScreen>

    HAL_Delay(text_time);
 8008c02:	4b07      	ldr	r3, [pc, #28]	@ (8008c20 <Aymed_Text+0x60>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f9 fbd0 	bl	80023ac <HAL_Delay>

}
 8008c0c:	bf00      	nop
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	0800d8ac 	.word	0x0800d8ac
 8008c18:	0800d474 	.word	0x0800d474
 8008c1c:	0800b9a4 	.word	0x0800b9a4
 8008c20:	20000034 	.word	0x20000034

08008c24 <__cvt>:
 8008c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c28:	ec57 6b10 	vmov	r6, r7, d0
 8008c2c:	2f00      	cmp	r7, #0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	4619      	mov	r1, r3
 8008c32:	463b      	mov	r3, r7
 8008c34:	bfbb      	ittet	lt
 8008c36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008c3a:	461f      	movlt	r7, r3
 8008c3c:	2300      	movge	r3, #0
 8008c3e:	232d      	movlt	r3, #45	@ 0x2d
 8008c40:	700b      	strb	r3, [r1, #0]
 8008c42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008c48:	4691      	mov	r9, r2
 8008c4a:	f023 0820 	bic.w	r8, r3, #32
 8008c4e:	bfbc      	itt	lt
 8008c50:	4632      	movlt	r2, r6
 8008c52:	4616      	movlt	r6, r2
 8008c54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c58:	d005      	beq.n	8008c66 <__cvt+0x42>
 8008c5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c5e:	d100      	bne.n	8008c62 <__cvt+0x3e>
 8008c60:	3401      	adds	r4, #1
 8008c62:	2102      	movs	r1, #2
 8008c64:	e000      	b.n	8008c68 <__cvt+0x44>
 8008c66:	2103      	movs	r1, #3
 8008c68:	ab03      	add	r3, sp, #12
 8008c6a:	9301      	str	r3, [sp, #4]
 8008c6c:	ab02      	add	r3, sp, #8
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	ec47 6b10 	vmov	d0, r6, r7
 8008c74:	4653      	mov	r3, sl
 8008c76:	4622      	mov	r2, r4
 8008c78:	f000 fe9e 	bl	80099b8 <_dtoa_r>
 8008c7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c80:	4605      	mov	r5, r0
 8008c82:	d119      	bne.n	8008cb8 <__cvt+0x94>
 8008c84:	f019 0f01 	tst.w	r9, #1
 8008c88:	d00e      	beq.n	8008ca8 <__cvt+0x84>
 8008c8a:	eb00 0904 	add.w	r9, r0, r4
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2300      	movs	r3, #0
 8008c92:	4630      	mov	r0, r6
 8008c94:	4639      	mov	r1, r7
 8008c96:	f7f7 ff27 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c9a:	b108      	cbz	r0, 8008ca0 <__cvt+0x7c>
 8008c9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ca0:	2230      	movs	r2, #48	@ 0x30
 8008ca2:	9b03      	ldr	r3, [sp, #12]
 8008ca4:	454b      	cmp	r3, r9
 8008ca6:	d31e      	bcc.n	8008ce6 <__cvt+0xc2>
 8008ca8:	9b03      	ldr	r3, [sp, #12]
 8008caa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cac:	1b5b      	subs	r3, r3, r5
 8008cae:	4628      	mov	r0, r5
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	b004      	add	sp, #16
 8008cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cbc:	eb00 0904 	add.w	r9, r0, r4
 8008cc0:	d1e5      	bne.n	8008c8e <__cvt+0x6a>
 8008cc2:	7803      	ldrb	r3, [r0, #0]
 8008cc4:	2b30      	cmp	r3, #48	@ 0x30
 8008cc6:	d10a      	bne.n	8008cde <__cvt+0xba>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2300      	movs	r3, #0
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7f7 ff0a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008cd4:	b918      	cbnz	r0, 8008cde <__cvt+0xba>
 8008cd6:	f1c4 0401 	rsb	r4, r4, #1
 8008cda:	f8ca 4000 	str.w	r4, [sl]
 8008cde:	f8da 3000 	ldr.w	r3, [sl]
 8008ce2:	4499      	add	r9, r3
 8008ce4:	e7d3      	b.n	8008c8e <__cvt+0x6a>
 8008ce6:	1c59      	adds	r1, r3, #1
 8008ce8:	9103      	str	r1, [sp, #12]
 8008cea:	701a      	strb	r2, [r3, #0]
 8008cec:	e7d9      	b.n	8008ca2 <__cvt+0x7e>

08008cee <__exponent>:
 8008cee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cf0:	2900      	cmp	r1, #0
 8008cf2:	bfba      	itte	lt
 8008cf4:	4249      	neglt	r1, r1
 8008cf6:	232d      	movlt	r3, #45	@ 0x2d
 8008cf8:	232b      	movge	r3, #43	@ 0x2b
 8008cfa:	2909      	cmp	r1, #9
 8008cfc:	7002      	strb	r2, [r0, #0]
 8008cfe:	7043      	strb	r3, [r0, #1]
 8008d00:	dd29      	ble.n	8008d56 <__exponent+0x68>
 8008d02:	f10d 0307 	add.w	r3, sp, #7
 8008d06:	461d      	mov	r5, r3
 8008d08:	270a      	movs	r7, #10
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d10:	fb07 1416 	mls	r4, r7, r6, r1
 8008d14:	3430      	adds	r4, #48	@ 0x30
 8008d16:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	2c63      	cmp	r4, #99	@ 0x63
 8008d1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d22:	4631      	mov	r1, r6
 8008d24:	dcf1      	bgt.n	8008d0a <__exponent+0x1c>
 8008d26:	3130      	adds	r1, #48	@ 0x30
 8008d28:	1e94      	subs	r4, r2, #2
 8008d2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d2e:	1c41      	adds	r1, r0, #1
 8008d30:	4623      	mov	r3, r4
 8008d32:	42ab      	cmp	r3, r5
 8008d34:	d30a      	bcc.n	8008d4c <__exponent+0x5e>
 8008d36:	f10d 0309 	add.w	r3, sp, #9
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	42ac      	cmp	r4, r5
 8008d3e:	bf88      	it	hi
 8008d40:	2300      	movhi	r3, #0
 8008d42:	3302      	adds	r3, #2
 8008d44:	4403      	add	r3, r0
 8008d46:	1a18      	subs	r0, r3, r0
 8008d48:	b003      	add	sp, #12
 8008d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d50:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d54:	e7ed      	b.n	8008d32 <__exponent+0x44>
 8008d56:	2330      	movs	r3, #48	@ 0x30
 8008d58:	3130      	adds	r1, #48	@ 0x30
 8008d5a:	7083      	strb	r3, [r0, #2]
 8008d5c:	70c1      	strb	r1, [r0, #3]
 8008d5e:	1d03      	adds	r3, r0, #4
 8008d60:	e7f1      	b.n	8008d46 <__exponent+0x58>
	...

08008d64 <_printf_float>:
 8008d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	b08d      	sub	sp, #52	@ 0x34
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008d70:	4616      	mov	r6, r2
 8008d72:	461f      	mov	r7, r3
 8008d74:	4605      	mov	r5, r0
 8008d76:	f000 fd09 	bl	800978c <_localeconv_r>
 8008d7a:	6803      	ldr	r3, [r0, #0]
 8008d7c:	9304      	str	r3, [sp, #16]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7f7 fa86 	bl	8000290 <strlen>
 8008d84:	2300      	movs	r3, #0
 8008d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d88:	f8d8 3000 	ldr.w	r3, [r8]
 8008d8c:	9005      	str	r0, [sp, #20]
 8008d8e:	3307      	adds	r3, #7
 8008d90:	f023 0307 	bic.w	r3, r3, #7
 8008d94:	f103 0208 	add.w	r2, r3, #8
 8008d98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d9c:	f8d4 b000 	ldr.w	fp, [r4]
 8008da0:	f8c8 2000 	str.w	r2, [r8]
 8008da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008da8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008dac:	9307      	str	r3, [sp, #28]
 8008dae:	f8cd 8018 	str.w	r8, [sp, #24]
 8008db2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dba:	4b9c      	ldr	r3, [pc, #624]	@ (800902c <_printf_float+0x2c8>)
 8008dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc0:	f7f7 fec4 	bl	8000b4c <__aeabi_dcmpun>
 8008dc4:	bb70      	cbnz	r0, 8008e24 <_printf_float+0xc0>
 8008dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dca:	4b98      	ldr	r3, [pc, #608]	@ (800902c <_printf_float+0x2c8>)
 8008dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd0:	f7f7 fe9e 	bl	8000b10 <__aeabi_dcmple>
 8008dd4:	bb30      	cbnz	r0, 8008e24 <_printf_float+0xc0>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f7f7 fe8d 	bl	8000afc <__aeabi_dcmplt>
 8008de2:	b110      	cbz	r0, 8008dea <_printf_float+0x86>
 8008de4:	232d      	movs	r3, #45	@ 0x2d
 8008de6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dea:	4a91      	ldr	r2, [pc, #580]	@ (8009030 <_printf_float+0x2cc>)
 8008dec:	4b91      	ldr	r3, [pc, #580]	@ (8009034 <_printf_float+0x2d0>)
 8008dee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008df2:	bf94      	ite	ls
 8008df4:	4690      	movls	r8, r2
 8008df6:	4698      	movhi	r8, r3
 8008df8:	2303      	movs	r3, #3
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	f02b 0304 	bic.w	r3, fp, #4
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	f04f 0900 	mov.w	r9, #0
 8008e06:	9700      	str	r7, [sp, #0]
 8008e08:	4633      	mov	r3, r6
 8008e0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f000 f9d2 	bl	80091b8 <_printf_common>
 8008e14:	3001      	adds	r0, #1
 8008e16:	f040 808d 	bne.w	8008f34 <_printf_float+0x1d0>
 8008e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1e:	b00d      	add	sp, #52	@ 0x34
 8008e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e24:	4642      	mov	r2, r8
 8008e26:	464b      	mov	r3, r9
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	f7f7 fe8e 	bl	8000b4c <__aeabi_dcmpun>
 8008e30:	b140      	cbz	r0, 8008e44 <_printf_float+0xe0>
 8008e32:	464b      	mov	r3, r9
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bfbc      	itt	lt
 8008e38:	232d      	movlt	r3, #45	@ 0x2d
 8008e3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e3e:	4a7e      	ldr	r2, [pc, #504]	@ (8009038 <_printf_float+0x2d4>)
 8008e40:	4b7e      	ldr	r3, [pc, #504]	@ (800903c <_printf_float+0x2d8>)
 8008e42:	e7d4      	b.n	8008dee <_printf_float+0x8a>
 8008e44:	6863      	ldr	r3, [r4, #4]
 8008e46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008e4a:	9206      	str	r2, [sp, #24]
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	d13b      	bne.n	8008ec8 <_printf_float+0x164>
 8008e50:	2306      	movs	r3, #6
 8008e52:	6063      	str	r3, [r4, #4]
 8008e54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008e58:	2300      	movs	r3, #0
 8008e5a:	6022      	str	r2, [r4, #0]
 8008e5c:	9303      	str	r3, [sp, #12]
 8008e5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008e64:	ab09      	add	r3, sp, #36	@ 0x24
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	6861      	ldr	r1, [r4, #4]
 8008e6a:	ec49 8b10 	vmov	d0, r8, r9
 8008e6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008e72:	4628      	mov	r0, r5
 8008e74:	f7ff fed6 	bl	8008c24 <__cvt>
 8008e78:	9b06      	ldr	r3, [sp, #24]
 8008e7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e7c:	2b47      	cmp	r3, #71	@ 0x47
 8008e7e:	4680      	mov	r8, r0
 8008e80:	d129      	bne.n	8008ed6 <_printf_float+0x172>
 8008e82:	1cc8      	adds	r0, r1, #3
 8008e84:	db02      	blt.n	8008e8c <_printf_float+0x128>
 8008e86:	6863      	ldr	r3, [r4, #4]
 8008e88:	4299      	cmp	r1, r3
 8008e8a:	dd41      	ble.n	8008f10 <_printf_float+0x1ac>
 8008e8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e90:	fa5f fa8a 	uxtb.w	sl, sl
 8008e94:	3901      	subs	r1, #1
 8008e96:	4652      	mov	r2, sl
 8008e98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e9e:	f7ff ff26 	bl	8008cee <__exponent>
 8008ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ea4:	1813      	adds	r3, r2, r0
 8008ea6:	2a01      	cmp	r2, #1
 8008ea8:	4681      	mov	r9, r0
 8008eaa:	6123      	str	r3, [r4, #16]
 8008eac:	dc02      	bgt.n	8008eb4 <_printf_float+0x150>
 8008eae:	6822      	ldr	r2, [r4, #0]
 8008eb0:	07d2      	lsls	r2, r2, #31
 8008eb2:	d501      	bpl.n	8008eb8 <_printf_float+0x154>
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	6123      	str	r3, [r4, #16]
 8008eb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d0a2      	beq.n	8008e06 <_printf_float+0xa2>
 8008ec0:	232d      	movs	r3, #45	@ 0x2d
 8008ec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ec6:	e79e      	b.n	8008e06 <_printf_float+0xa2>
 8008ec8:	9a06      	ldr	r2, [sp, #24]
 8008eca:	2a47      	cmp	r2, #71	@ 0x47
 8008ecc:	d1c2      	bne.n	8008e54 <_printf_float+0xf0>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1c0      	bne.n	8008e54 <_printf_float+0xf0>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e7bd      	b.n	8008e52 <_printf_float+0xee>
 8008ed6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008eda:	d9db      	bls.n	8008e94 <_printf_float+0x130>
 8008edc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ee0:	d118      	bne.n	8008f14 <_printf_float+0x1b0>
 8008ee2:	2900      	cmp	r1, #0
 8008ee4:	6863      	ldr	r3, [r4, #4]
 8008ee6:	dd0b      	ble.n	8008f00 <_printf_float+0x19c>
 8008ee8:	6121      	str	r1, [r4, #16]
 8008eea:	b913      	cbnz	r3, 8008ef2 <_printf_float+0x18e>
 8008eec:	6822      	ldr	r2, [r4, #0]
 8008eee:	07d0      	lsls	r0, r2, #31
 8008ef0:	d502      	bpl.n	8008ef8 <_printf_float+0x194>
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	440b      	add	r3, r1
 8008ef6:	6123      	str	r3, [r4, #16]
 8008ef8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008efa:	f04f 0900 	mov.w	r9, #0
 8008efe:	e7db      	b.n	8008eb8 <_printf_float+0x154>
 8008f00:	b913      	cbnz	r3, 8008f08 <_printf_float+0x1a4>
 8008f02:	6822      	ldr	r2, [r4, #0]
 8008f04:	07d2      	lsls	r2, r2, #31
 8008f06:	d501      	bpl.n	8008f0c <_printf_float+0x1a8>
 8008f08:	3302      	adds	r3, #2
 8008f0a:	e7f4      	b.n	8008ef6 <_printf_float+0x192>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e7f2      	b.n	8008ef6 <_printf_float+0x192>
 8008f10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f16:	4299      	cmp	r1, r3
 8008f18:	db05      	blt.n	8008f26 <_printf_float+0x1c2>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	6121      	str	r1, [r4, #16]
 8008f1e:	07d8      	lsls	r0, r3, #31
 8008f20:	d5ea      	bpl.n	8008ef8 <_printf_float+0x194>
 8008f22:	1c4b      	adds	r3, r1, #1
 8008f24:	e7e7      	b.n	8008ef6 <_printf_float+0x192>
 8008f26:	2900      	cmp	r1, #0
 8008f28:	bfd4      	ite	le
 8008f2a:	f1c1 0202 	rsble	r2, r1, #2
 8008f2e:	2201      	movgt	r2, #1
 8008f30:	4413      	add	r3, r2
 8008f32:	e7e0      	b.n	8008ef6 <_printf_float+0x192>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	055a      	lsls	r2, r3, #21
 8008f38:	d407      	bmi.n	8008f4a <_printf_float+0x1e6>
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	4642      	mov	r2, r8
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4628      	mov	r0, r5
 8008f42:	47b8      	blx	r7
 8008f44:	3001      	adds	r0, #1
 8008f46:	d12b      	bne.n	8008fa0 <_printf_float+0x23c>
 8008f48:	e767      	b.n	8008e1a <_printf_float+0xb6>
 8008f4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f4e:	f240 80dd 	bls.w	800910c <_printf_float+0x3a8>
 8008f52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f56:	2200      	movs	r2, #0
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f7f7 fdc5 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d033      	beq.n	8008fca <_printf_float+0x266>
 8008f62:	4a37      	ldr	r2, [pc, #220]	@ (8009040 <_printf_float+0x2dc>)
 8008f64:	2301      	movs	r3, #1
 8008f66:	4631      	mov	r1, r6
 8008f68:	4628      	mov	r0, r5
 8008f6a:	47b8      	blx	r7
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	f43f af54 	beq.w	8008e1a <_printf_float+0xb6>
 8008f72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008f76:	4543      	cmp	r3, r8
 8008f78:	db02      	blt.n	8008f80 <_printf_float+0x21c>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	07d8      	lsls	r0, r3, #31
 8008f7e:	d50f      	bpl.n	8008fa0 <_printf_float+0x23c>
 8008f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f84:	4631      	mov	r1, r6
 8008f86:	4628      	mov	r0, r5
 8008f88:	47b8      	blx	r7
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	f43f af45 	beq.w	8008e1a <_printf_float+0xb6>
 8008f90:	f04f 0900 	mov.w	r9, #0
 8008f94:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f98:	f104 0a1a 	add.w	sl, r4, #26
 8008f9c:	45c8      	cmp	r8, r9
 8008f9e:	dc09      	bgt.n	8008fb4 <_printf_float+0x250>
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	079b      	lsls	r3, r3, #30
 8008fa4:	f100 8103 	bmi.w	80091ae <_printf_float+0x44a>
 8008fa8:	68e0      	ldr	r0, [r4, #12]
 8008faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fac:	4298      	cmp	r0, r3
 8008fae:	bfb8      	it	lt
 8008fb0:	4618      	movlt	r0, r3
 8008fb2:	e734      	b.n	8008e1e <_printf_float+0xba>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	4652      	mov	r2, sl
 8008fb8:	4631      	mov	r1, r6
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b8      	blx	r7
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	f43f af2b 	beq.w	8008e1a <_printf_float+0xb6>
 8008fc4:	f109 0901 	add.w	r9, r9, #1
 8008fc8:	e7e8      	b.n	8008f9c <_printf_float+0x238>
 8008fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	dc39      	bgt.n	8009044 <_printf_float+0x2e0>
 8008fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8009040 <_printf_float+0x2dc>)
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	47b8      	blx	r7
 8008fda:	3001      	adds	r0, #1
 8008fdc:	f43f af1d 	beq.w	8008e1a <_printf_float+0xb6>
 8008fe0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008fe4:	ea59 0303 	orrs.w	r3, r9, r3
 8008fe8:	d102      	bne.n	8008ff0 <_printf_float+0x28c>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	07d9      	lsls	r1, r3, #31
 8008fee:	d5d7      	bpl.n	8008fa0 <_printf_float+0x23c>
 8008ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	47b8      	blx	r7
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	f43f af0d 	beq.w	8008e1a <_printf_float+0xb6>
 8009000:	f04f 0a00 	mov.w	sl, #0
 8009004:	f104 0b1a 	add.w	fp, r4, #26
 8009008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800900a:	425b      	negs	r3, r3
 800900c:	4553      	cmp	r3, sl
 800900e:	dc01      	bgt.n	8009014 <_printf_float+0x2b0>
 8009010:	464b      	mov	r3, r9
 8009012:	e793      	b.n	8008f3c <_printf_float+0x1d8>
 8009014:	2301      	movs	r3, #1
 8009016:	465a      	mov	r2, fp
 8009018:	4631      	mov	r1, r6
 800901a:	4628      	mov	r0, r5
 800901c:	47b8      	blx	r7
 800901e:	3001      	adds	r0, #1
 8009020:	f43f aefb 	beq.w	8008e1a <_printf_float+0xb6>
 8009024:	f10a 0a01 	add.w	sl, sl, #1
 8009028:	e7ee      	b.n	8009008 <_printf_float+0x2a4>
 800902a:	bf00      	nop
 800902c:	7fefffff 	.word	0x7fefffff
 8009030:	0800daac 	.word	0x0800daac
 8009034:	0800dab0 	.word	0x0800dab0
 8009038:	0800dab4 	.word	0x0800dab4
 800903c:	0800dab8 	.word	0x0800dab8
 8009040:	0800dabc 	.word	0x0800dabc
 8009044:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009046:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800904a:	4553      	cmp	r3, sl
 800904c:	bfa8      	it	ge
 800904e:	4653      	movge	r3, sl
 8009050:	2b00      	cmp	r3, #0
 8009052:	4699      	mov	r9, r3
 8009054:	dc36      	bgt.n	80090c4 <_printf_float+0x360>
 8009056:	f04f 0b00 	mov.w	fp, #0
 800905a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800905e:	f104 021a 	add.w	r2, r4, #26
 8009062:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009064:	9306      	str	r3, [sp, #24]
 8009066:	eba3 0309 	sub.w	r3, r3, r9
 800906a:	455b      	cmp	r3, fp
 800906c:	dc31      	bgt.n	80090d2 <_printf_float+0x36e>
 800906e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009070:	459a      	cmp	sl, r3
 8009072:	dc3a      	bgt.n	80090ea <_printf_float+0x386>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	07da      	lsls	r2, r3, #31
 8009078:	d437      	bmi.n	80090ea <_printf_float+0x386>
 800907a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800907c:	ebaa 0903 	sub.w	r9, sl, r3
 8009080:	9b06      	ldr	r3, [sp, #24]
 8009082:	ebaa 0303 	sub.w	r3, sl, r3
 8009086:	4599      	cmp	r9, r3
 8009088:	bfa8      	it	ge
 800908a:	4699      	movge	r9, r3
 800908c:	f1b9 0f00 	cmp.w	r9, #0
 8009090:	dc33      	bgt.n	80090fa <_printf_float+0x396>
 8009092:	f04f 0800 	mov.w	r8, #0
 8009096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800909a:	f104 0b1a 	add.w	fp, r4, #26
 800909e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a0:	ebaa 0303 	sub.w	r3, sl, r3
 80090a4:	eba3 0309 	sub.w	r3, r3, r9
 80090a8:	4543      	cmp	r3, r8
 80090aa:	f77f af79 	ble.w	8008fa0 <_printf_float+0x23c>
 80090ae:	2301      	movs	r3, #1
 80090b0:	465a      	mov	r2, fp
 80090b2:	4631      	mov	r1, r6
 80090b4:	4628      	mov	r0, r5
 80090b6:	47b8      	blx	r7
 80090b8:	3001      	adds	r0, #1
 80090ba:	f43f aeae 	beq.w	8008e1a <_printf_float+0xb6>
 80090be:	f108 0801 	add.w	r8, r8, #1
 80090c2:	e7ec      	b.n	800909e <_printf_float+0x33a>
 80090c4:	4642      	mov	r2, r8
 80090c6:	4631      	mov	r1, r6
 80090c8:	4628      	mov	r0, r5
 80090ca:	47b8      	blx	r7
 80090cc:	3001      	adds	r0, #1
 80090ce:	d1c2      	bne.n	8009056 <_printf_float+0x2f2>
 80090d0:	e6a3      	b.n	8008e1a <_printf_float+0xb6>
 80090d2:	2301      	movs	r3, #1
 80090d4:	4631      	mov	r1, r6
 80090d6:	4628      	mov	r0, r5
 80090d8:	9206      	str	r2, [sp, #24]
 80090da:	47b8      	blx	r7
 80090dc:	3001      	adds	r0, #1
 80090de:	f43f ae9c 	beq.w	8008e1a <_printf_float+0xb6>
 80090e2:	9a06      	ldr	r2, [sp, #24]
 80090e4:	f10b 0b01 	add.w	fp, fp, #1
 80090e8:	e7bb      	b.n	8009062 <_printf_float+0x2fe>
 80090ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ee:	4631      	mov	r1, r6
 80090f0:	4628      	mov	r0, r5
 80090f2:	47b8      	blx	r7
 80090f4:	3001      	adds	r0, #1
 80090f6:	d1c0      	bne.n	800907a <_printf_float+0x316>
 80090f8:	e68f      	b.n	8008e1a <_printf_float+0xb6>
 80090fa:	9a06      	ldr	r2, [sp, #24]
 80090fc:	464b      	mov	r3, r9
 80090fe:	4442      	add	r2, r8
 8009100:	4631      	mov	r1, r6
 8009102:	4628      	mov	r0, r5
 8009104:	47b8      	blx	r7
 8009106:	3001      	adds	r0, #1
 8009108:	d1c3      	bne.n	8009092 <_printf_float+0x32e>
 800910a:	e686      	b.n	8008e1a <_printf_float+0xb6>
 800910c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009110:	f1ba 0f01 	cmp.w	sl, #1
 8009114:	dc01      	bgt.n	800911a <_printf_float+0x3b6>
 8009116:	07db      	lsls	r3, r3, #31
 8009118:	d536      	bpl.n	8009188 <_printf_float+0x424>
 800911a:	2301      	movs	r3, #1
 800911c:	4642      	mov	r2, r8
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	f43f ae78 	beq.w	8008e1a <_printf_float+0xb6>
 800912a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800912e:	4631      	mov	r1, r6
 8009130:	4628      	mov	r0, r5
 8009132:	47b8      	blx	r7
 8009134:	3001      	adds	r0, #1
 8009136:	f43f ae70 	beq.w	8008e1a <_printf_float+0xb6>
 800913a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800913e:	2200      	movs	r2, #0
 8009140:	2300      	movs	r3, #0
 8009142:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009146:	f7f7 fccf 	bl	8000ae8 <__aeabi_dcmpeq>
 800914a:	b9c0      	cbnz	r0, 800917e <_printf_float+0x41a>
 800914c:	4653      	mov	r3, sl
 800914e:	f108 0201 	add.w	r2, r8, #1
 8009152:	4631      	mov	r1, r6
 8009154:	4628      	mov	r0, r5
 8009156:	47b8      	blx	r7
 8009158:	3001      	adds	r0, #1
 800915a:	d10c      	bne.n	8009176 <_printf_float+0x412>
 800915c:	e65d      	b.n	8008e1a <_printf_float+0xb6>
 800915e:	2301      	movs	r3, #1
 8009160:	465a      	mov	r2, fp
 8009162:	4631      	mov	r1, r6
 8009164:	4628      	mov	r0, r5
 8009166:	47b8      	blx	r7
 8009168:	3001      	adds	r0, #1
 800916a:	f43f ae56 	beq.w	8008e1a <_printf_float+0xb6>
 800916e:	f108 0801 	add.w	r8, r8, #1
 8009172:	45d0      	cmp	r8, sl
 8009174:	dbf3      	blt.n	800915e <_printf_float+0x3fa>
 8009176:	464b      	mov	r3, r9
 8009178:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800917c:	e6df      	b.n	8008f3e <_printf_float+0x1da>
 800917e:	f04f 0800 	mov.w	r8, #0
 8009182:	f104 0b1a 	add.w	fp, r4, #26
 8009186:	e7f4      	b.n	8009172 <_printf_float+0x40e>
 8009188:	2301      	movs	r3, #1
 800918a:	4642      	mov	r2, r8
 800918c:	e7e1      	b.n	8009152 <_printf_float+0x3ee>
 800918e:	2301      	movs	r3, #1
 8009190:	464a      	mov	r2, r9
 8009192:	4631      	mov	r1, r6
 8009194:	4628      	mov	r0, r5
 8009196:	47b8      	blx	r7
 8009198:	3001      	adds	r0, #1
 800919a:	f43f ae3e 	beq.w	8008e1a <_printf_float+0xb6>
 800919e:	f108 0801 	add.w	r8, r8, #1
 80091a2:	68e3      	ldr	r3, [r4, #12]
 80091a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091a6:	1a5b      	subs	r3, r3, r1
 80091a8:	4543      	cmp	r3, r8
 80091aa:	dcf0      	bgt.n	800918e <_printf_float+0x42a>
 80091ac:	e6fc      	b.n	8008fa8 <_printf_float+0x244>
 80091ae:	f04f 0800 	mov.w	r8, #0
 80091b2:	f104 0919 	add.w	r9, r4, #25
 80091b6:	e7f4      	b.n	80091a2 <_printf_float+0x43e>

080091b8 <_printf_common>:
 80091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	4616      	mov	r6, r2
 80091be:	4698      	mov	r8, r3
 80091c0:	688a      	ldr	r2, [r1, #8]
 80091c2:	690b      	ldr	r3, [r1, #16]
 80091c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091c8:	4293      	cmp	r3, r2
 80091ca:	bfb8      	it	lt
 80091cc:	4613      	movlt	r3, r2
 80091ce:	6033      	str	r3, [r6, #0]
 80091d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091d4:	4607      	mov	r7, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	b10a      	cbz	r2, 80091de <_printf_common+0x26>
 80091da:	3301      	adds	r3, #1
 80091dc:	6033      	str	r3, [r6, #0]
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	0699      	lsls	r1, r3, #26
 80091e2:	bf42      	ittt	mi
 80091e4:	6833      	ldrmi	r3, [r6, #0]
 80091e6:	3302      	addmi	r3, #2
 80091e8:	6033      	strmi	r3, [r6, #0]
 80091ea:	6825      	ldr	r5, [r4, #0]
 80091ec:	f015 0506 	ands.w	r5, r5, #6
 80091f0:	d106      	bne.n	8009200 <_printf_common+0x48>
 80091f2:	f104 0a19 	add.w	sl, r4, #25
 80091f6:	68e3      	ldr	r3, [r4, #12]
 80091f8:	6832      	ldr	r2, [r6, #0]
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	42ab      	cmp	r3, r5
 80091fe:	dc26      	bgt.n	800924e <_printf_common+0x96>
 8009200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009204:	6822      	ldr	r2, [r4, #0]
 8009206:	3b00      	subs	r3, #0
 8009208:	bf18      	it	ne
 800920a:	2301      	movne	r3, #1
 800920c:	0692      	lsls	r2, r2, #26
 800920e:	d42b      	bmi.n	8009268 <_printf_common+0xb0>
 8009210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009214:	4641      	mov	r1, r8
 8009216:	4638      	mov	r0, r7
 8009218:	47c8      	blx	r9
 800921a:	3001      	adds	r0, #1
 800921c:	d01e      	beq.n	800925c <_printf_common+0xa4>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	6922      	ldr	r2, [r4, #16]
 8009222:	f003 0306 	and.w	r3, r3, #6
 8009226:	2b04      	cmp	r3, #4
 8009228:	bf02      	ittt	eq
 800922a:	68e5      	ldreq	r5, [r4, #12]
 800922c:	6833      	ldreq	r3, [r6, #0]
 800922e:	1aed      	subeq	r5, r5, r3
 8009230:	68a3      	ldr	r3, [r4, #8]
 8009232:	bf0c      	ite	eq
 8009234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009238:	2500      	movne	r5, #0
 800923a:	4293      	cmp	r3, r2
 800923c:	bfc4      	itt	gt
 800923e:	1a9b      	subgt	r3, r3, r2
 8009240:	18ed      	addgt	r5, r5, r3
 8009242:	2600      	movs	r6, #0
 8009244:	341a      	adds	r4, #26
 8009246:	42b5      	cmp	r5, r6
 8009248:	d11a      	bne.n	8009280 <_printf_common+0xc8>
 800924a:	2000      	movs	r0, #0
 800924c:	e008      	b.n	8009260 <_printf_common+0xa8>
 800924e:	2301      	movs	r3, #1
 8009250:	4652      	mov	r2, sl
 8009252:	4641      	mov	r1, r8
 8009254:	4638      	mov	r0, r7
 8009256:	47c8      	blx	r9
 8009258:	3001      	adds	r0, #1
 800925a:	d103      	bne.n	8009264 <_printf_common+0xac>
 800925c:	f04f 30ff 	mov.w	r0, #4294967295
 8009260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009264:	3501      	adds	r5, #1
 8009266:	e7c6      	b.n	80091f6 <_printf_common+0x3e>
 8009268:	18e1      	adds	r1, r4, r3
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	2030      	movs	r0, #48	@ 0x30
 800926e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009272:	4422      	add	r2, r4
 8009274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800927c:	3302      	adds	r3, #2
 800927e:	e7c7      	b.n	8009210 <_printf_common+0x58>
 8009280:	2301      	movs	r3, #1
 8009282:	4622      	mov	r2, r4
 8009284:	4641      	mov	r1, r8
 8009286:	4638      	mov	r0, r7
 8009288:	47c8      	blx	r9
 800928a:	3001      	adds	r0, #1
 800928c:	d0e6      	beq.n	800925c <_printf_common+0xa4>
 800928e:	3601      	adds	r6, #1
 8009290:	e7d9      	b.n	8009246 <_printf_common+0x8e>
	...

08009294 <_printf_i>:
 8009294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009298:	7e0f      	ldrb	r7, [r1, #24]
 800929a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800929c:	2f78      	cmp	r7, #120	@ 0x78
 800929e:	4691      	mov	r9, r2
 80092a0:	4680      	mov	r8, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	469a      	mov	sl, r3
 80092a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092aa:	d807      	bhi.n	80092bc <_printf_i+0x28>
 80092ac:	2f62      	cmp	r7, #98	@ 0x62
 80092ae:	d80a      	bhi.n	80092c6 <_printf_i+0x32>
 80092b0:	2f00      	cmp	r7, #0
 80092b2:	f000 80d2 	beq.w	800945a <_printf_i+0x1c6>
 80092b6:	2f58      	cmp	r7, #88	@ 0x58
 80092b8:	f000 80b9 	beq.w	800942e <_printf_i+0x19a>
 80092bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092c4:	e03a      	b.n	800933c <_printf_i+0xa8>
 80092c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092ca:	2b15      	cmp	r3, #21
 80092cc:	d8f6      	bhi.n	80092bc <_printf_i+0x28>
 80092ce:	a101      	add	r1, pc, #4	@ (adr r1, 80092d4 <_printf_i+0x40>)
 80092d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092d4:	0800932d 	.word	0x0800932d
 80092d8:	08009341 	.word	0x08009341
 80092dc:	080092bd 	.word	0x080092bd
 80092e0:	080092bd 	.word	0x080092bd
 80092e4:	080092bd 	.word	0x080092bd
 80092e8:	080092bd 	.word	0x080092bd
 80092ec:	08009341 	.word	0x08009341
 80092f0:	080092bd 	.word	0x080092bd
 80092f4:	080092bd 	.word	0x080092bd
 80092f8:	080092bd 	.word	0x080092bd
 80092fc:	080092bd 	.word	0x080092bd
 8009300:	08009441 	.word	0x08009441
 8009304:	0800936b 	.word	0x0800936b
 8009308:	080093fb 	.word	0x080093fb
 800930c:	080092bd 	.word	0x080092bd
 8009310:	080092bd 	.word	0x080092bd
 8009314:	08009463 	.word	0x08009463
 8009318:	080092bd 	.word	0x080092bd
 800931c:	0800936b 	.word	0x0800936b
 8009320:	080092bd 	.word	0x080092bd
 8009324:	080092bd 	.word	0x080092bd
 8009328:	08009403 	.word	0x08009403
 800932c:	6833      	ldr	r3, [r6, #0]
 800932e:	1d1a      	adds	r2, r3, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6032      	str	r2, [r6, #0]
 8009334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800933c:	2301      	movs	r3, #1
 800933e:	e09d      	b.n	800947c <_printf_i+0x1e8>
 8009340:	6833      	ldr	r3, [r6, #0]
 8009342:	6820      	ldr	r0, [r4, #0]
 8009344:	1d19      	adds	r1, r3, #4
 8009346:	6031      	str	r1, [r6, #0]
 8009348:	0606      	lsls	r6, r0, #24
 800934a:	d501      	bpl.n	8009350 <_printf_i+0xbc>
 800934c:	681d      	ldr	r5, [r3, #0]
 800934e:	e003      	b.n	8009358 <_printf_i+0xc4>
 8009350:	0645      	lsls	r5, r0, #25
 8009352:	d5fb      	bpl.n	800934c <_printf_i+0xb8>
 8009354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009358:	2d00      	cmp	r5, #0
 800935a:	da03      	bge.n	8009364 <_printf_i+0xd0>
 800935c:	232d      	movs	r3, #45	@ 0x2d
 800935e:	426d      	negs	r5, r5
 8009360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009364:	4859      	ldr	r0, [pc, #356]	@ (80094cc <_printf_i+0x238>)
 8009366:	230a      	movs	r3, #10
 8009368:	e011      	b.n	800938e <_printf_i+0xfa>
 800936a:	6821      	ldr	r1, [r4, #0]
 800936c:	6833      	ldr	r3, [r6, #0]
 800936e:	0608      	lsls	r0, r1, #24
 8009370:	f853 5b04 	ldr.w	r5, [r3], #4
 8009374:	d402      	bmi.n	800937c <_printf_i+0xe8>
 8009376:	0649      	lsls	r1, r1, #25
 8009378:	bf48      	it	mi
 800937a:	b2ad      	uxthmi	r5, r5
 800937c:	2f6f      	cmp	r7, #111	@ 0x6f
 800937e:	4853      	ldr	r0, [pc, #332]	@ (80094cc <_printf_i+0x238>)
 8009380:	6033      	str	r3, [r6, #0]
 8009382:	bf14      	ite	ne
 8009384:	230a      	movne	r3, #10
 8009386:	2308      	moveq	r3, #8
 8009388:	2100      	movs	r1, #0
 800938a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800938e:	6866      	ldr	r6, [r4, #4]
 8009390:	60a6      	str	r6, [r4, #8]
 8009392:	2e00      	cmp	r6, #0
 8009394:	bfa2      	ittt	ge
 8009396:	6821      	ldrge	r1, [r4, #0]
 8009398:	f021 0104 	bicge.w	r1, r1, #4
 800939c:	6021      	strge	r1, [r4, #0]
 800939e:	b90d      	cbnz	r5, 80093a4 <_printf_i+0x110>
 80093a0:	2e00      	cmp	r6, #0
 80093a2:	d04b      	beq.n	800943c <_printf_i+0x1a8>
 80093a4:	4616      	mov	r6, r2
 80093a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80093aa:	fb03 5711 	mls	r7, r3, r1, r5
 80093ae:	5dc7      	ldrb	r7, [r0, r7]
 80093b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093b4:	462f      	mov	r7, r5
 80093b6:	42bb      	cmp	r3, r7
 80093b8:	460d      	mov	r5, r1
 80093ba:	d9f4      	bls.n	80093a6 <_printf_i+0x112>
 80093bc:	2b08      	cmp	r3, #8
 80093be:	d10b      	bne.n	80093d8 <_printf_i+0x144>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	07df      	lsls	r7, r3, #31
 80093c4:	d508      	bpl.n	80093d8 <_printf_i+0x144>
 80093c6:	6923      	ldr	r3, [r4, #16]
 80093c8:	6861      	ldr	r1, [r4, #4]
 80093ca:	4299      	cmp	r1, r3
 80093cc:	bfde      	ittt	le
 80093ce:	2330      	movle	r3, #48	@ 0x30
 80093d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093d8:	1b92      	subs	r2, r2, r6
 80093da:	6122      	str	r2, [r4, #16]
 80093dc:	f8cd a000 	str.w	sl, [sp]
 80093e0:	464b      	mov	r3, r9
 80093e2:	aa03      	add	r2, sp, #12
 80093e4:	4621      	mov	r1, r4
 80093e6:	4640      	mov	r0, r8
 80093e8:	f7ff fee6 	bl	80091b8 <_printf_common>
 80093ec:	3001      	adds	r0, #1
 80093ee:	d14a      	bne.n	8009486 <_printf_i+0x1f2>
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295
 80093f4:	b004      	add	sp, #16
 80093f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	f043 0320 	orr.w	r3, r3, #32
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	4833      	ldr	r0, [pc, #204]	@ (80094d0 <_printf_i+0x23c>)
 8009404:	2778      	movs	r7, #120	@ 0x78
 8009406:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	6831      	ldr	r1, [r6, #0]
 800940e:	061f      	lsls	r7, r3, #24
 8009410:	f851 5b04 	ldr.w	r5, [r1], #4
 8009414:	d402      	bmi.n	800941c <_printf_i+0x188>
 8009416:	065f      	lsls	r7, r3, #25
 8009418:	bf48      	it	mi
 800941a:	b2ad      	uxthmi	r5, r5
 800941c:	6031      	str	r1, [r6, #0]
 800941e:	07d9      	lsls	r1, r3, #31
 8009420:	bf44      	itt	mi
 8009422:	f043 0320 	orrmi.w	r3, r3, #32
 8009426:	6023      	strmi	r3, [r4, #0]
 8009428:	b11d      	cbz	r5, 8009432 <_printf_i+0x19e>
 800942a:	2310      	movs	r3, #16
 800942c:	e7ac      	b.n	8009388 <_printf_i+0xf4>
 800942e:	4827      	ldr	r0, [pc, #156]	@ (80094cc <_printf_i+0x238>)
 8009430:	e7e9      	b.n	8009406 <_printf_i+0x172>
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	f023 0320 	bic.w	r3, r3, #32
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	e7f6      	b.n	800942a <_printf_i+0x196>
 800943c:	4616      	mov	r6, r2
 800943e:	e7bd      	b.n	80093bc <_printf_i+0x128>
 8009440:	6833      	ldr	r3, [r6, #0]
 8009442:	6825      	ldr	r5, [r4, #0]
 8009444:	6961      	ldr	r1, [r4, #20]
 8009446:	1d18      	adds	r0, r3, #4
 8009448:	6030      	str	r0, [r6, #0]
 800944a:	062e      	lsls	r6, r5, #24
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	d501      	bpl.n	8009454 <_printf_i+0x1c0>
 8009450:	6019      	str	r1, [r3, #0]
 8009452:	e002      	b.n	800945a <_printf_i+0x1c6>
 8009454:	0668      	lsls	r0, r5, #25
 8009456:	d5fb      	bpl.n	8009450 <_printf_i+0x1bc>
 8009458:	8019      	strh	r1, [r3, #0]
 800945a:	2300      	movs	r3, #0
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	4616      	mov	r6, r2
 8009460:	e7bc      	b.n	80093dc <_printf_i+0x148>
 8009462:	6833      	ldr	r3, [r6, #0]
 8009464:	1d1a      	adds	r2, r3, #4
 8009466:	6032      	str	r2, [r6, #0]
 8009468:	681e      	ldr	r6, [r3, #0]
 800946a:	6862      	ldr	r2, [r4, #4]
 800946c:	2100      	movs	r1, #0
 800946e:	4630      	mov	r0, r6
 8009470:	f7f6 febe 	bl	80001f0 <memchr>
 8009474:	b108      	cbz	r0, 800947a <_printf_i+0x1e6>
 8009476:	1b80      	subs	r0, r0, r6
 8009478:	6060      	str	r0, [r4, #4]
 800947a:	6863      	ldr	r3, [r4, #4]
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	2300      	movs	r3, #0
 8009480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009484:	e7aa      	b.n	80093dc <_printf_i+0x148>
 8009486:	6923      	ldr	r3, [r4, #16]
 8009488:	4632      	mov	r2, r6
 800948a:	4649      	mov	r1, r9
 800948c:	4640      	mov	r0, r8
 800948e:	47d0      	blx	sl
 8009490:	3001      	adds	r0, #1
 8009492:	d0ad      	beq.n	80093f0 <_printf_i+0x15c>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	079b      	lsls	r3, r3, #30
 8009498:	d413      	bmi.n	80094c2 <_printf_i+0x22e>
 800949a:	68e0      	ldr	r0, [r4, #12]
 800949c:	9b03      	ldr	r3, [sp, #12]
 800949e:	4298      	cmp	r0, r3
 80094a0:	bfb8      	it	lt
 80094a2:	4618      	movlt	r0, r3
 80094a4:	e7a6      	b.n	80093f4 <_printf_i+0x160>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4632      	mov	r2, r6
 80094aa:	4649      	mov	r1, r9
 80094ac:	4640      	mov	r0, r8
 80094ae:	47d0      	blx	sl
 80094b0:	3001      	adds	r0, #1
 80094b2:	d09d      	beq.n	80093f0 <_printf_i+0x15c>
 80094b4:	3501      	adds	r5, #1
 80094b6:	68e3      	ldr	r3, [r4, #12]
 80094b8:	9903      	ldr	r1, [sp, #12]
 80094ba:	1a5b      	subs	r3, r3, r1
 80094bc:	42ab      	cmp	r3, r5
 80094be:	dcf2      	bgt.n	80094a6 <_printf_i+0x212>
 80094c0:	e7eb      	b.n	800949a <_printf_i+0x206>
 80094c2:	2500      	movs	r5, #0
 80094c4:	f104 0619 	add.w	r6, r4, #25
 80094c8:	e7f5      	b.n	80094b6 <_printf_i+0x222>
 80094ca:	bf00      	nop
 80094cc:	0800dabe 	.word	0x0800dabe
 80094d0:	0800dacf 	.word	0x0800dacf

080094d4 <std>:
 80094d4:	2300      	movs	r3, #0
 80094d6:	b510      	push	{r4, lr}
 80094d8:	4604      	mov	r4, r0
 80094da:	e9c0 3300 	strd	r3, r3, [r0]
 80094de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094e2:	6083      	str	r3, [r0, #8]
 80094e4:	8181      	strh	r1, [r0, #12]
 80094e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80094e8:	81c2      	strh	r2, [r0, #14]
 80094ea:	6183      	str	r3, [r0, #24]
 80094ec:	4619      	mov	r1, r3
 80094ee:	2208      	movs	r2, #8
 80094f0:	305c      	adds	r0, #92	@ 0x5c
 80094f2:	f000 f942 	bl	800977a <memset>
 80094f6:	4b0d      	ldr	r3, [pc, #52]	@ (800952c <std+0x58>)
 80094f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80094fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009530 <std+0x5c>)
 80094fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009534 <std+0x60>)
 8009500:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009502:	4b0d      	ldr	r3, [pc, #52]	@ (8009538 <std+0x64>)
 8009504:	6323      	str	r3, [r4, #48]	@ 0x30
 8009506:	4b0d      	ldr	r3, [pc, #52]	@ (800953c <std+0x68>)
 8009508:	6224      	str	r4, [r4, #32]
 800950a:	429c      	cmp	r4, r3
 800950c:	d006      	beq.n	800951c <std+0x48>
 800950e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009512:	4294      	cmp	r4, r2
 8009514:	d002      	beq.n	800951c <std+0x48>
 8009516:	33d0      	adds	r3, #208	@ 0xd0
 8009518:	429c      	cmp	r4, r3
 800951a:	d105      	bne.n	8009528 <std+0x54>
 800951c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009524:	f000 b9a6 	b.w	8009874 <__retarget_lock_init_recursive>
 8009528:	bd10      	pop	{r4, pc}
 800952a:	bf00      	nop
 800952c:	080096c1 	.word	0x080096c1
 8009530:	080096e3 	.word	0x080096e3
 8009534:	0800971b 	.word	0x0800971b
 8009538:	0800973f 	.word	0x0800973f
 800953c:	20001274 	.word	0x20001274

08009540 <stdio_exit_handler>:
 8009540:	4a02      	ldr	r2, [pc, #8]	@ (800954c <stdio_exit_handler+0xc>)
 8009542:	4903      	ldr	r1, [pc, #12]	@ (8009550 <stdio_exit_handler+0x10>)
 8009544:	4803      	ldr	r0, [pc, #12]	@ (8009554 <stdio_exit_handler+0x14>)
 8009546:	f000 b869 	b.w	800961c <_fwalk_sglue>
 800954a:	bf00      	nop
 800954c:	20000038 	.word	0x20000038
 8009550:	0800b1fd 	.word	0x0800b1fd
 8009554:	20000048 	.word	0x20000048

08009558 <cleanup_stdio>:
 8009558:	6841      	ldr	r1, [r0, #4]
 800955a:	4b0c      	ldr	r3, [pc, #48]	@ (800958c <cleanup_stdio+0x34>)
 800955c:	4299      	cmp	r1, r3
 800955e:	b510      	push	{r4, lr}
 8009560:	4604      	mov	r4, r0
 8009562:	d001      	beq.n	8009568 <cleanup_stdio+0x10>
 8009564:	f001 fe4a 	bl	800b1fc <_fflush_r>
 8009568:	68a1      	ldr	r1, [r4, #8]
 800956a:	4b09      	ldr	r3, [pc, #36]	@ (8009590 <cleanup_stdio+0x38>)
 800956c:	4299      	cmp	r1, r3
 800956e:	d002      	beq.n	8009576 <cleanup_stdio+0x1e>
 8009570:	4620      	mov	r0, r4
 8009572:	f001 fe43 	bl	800b1fc <_fflush_r>
 8009576:	68e1      	ldr	r1, [r4, #12]
 8009578:	4b06      	ldr	r3, [pc, #24]	@ (8009594 <cleanup_stdio+0x3c>)
 800957a:	4299      	cmp	r1, r3
 800957c:	d004      	beq.n	8009588 <cleanup_stdio+0x30>
 800957e:	4620      	mov	r0, r4
 8009580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009584:	f001 be3a 	b.w	800b1fc <_fflush_r>
 8009588:	bd10      	pop	{r4, pc}
 800958a:	bf00      	nop
 800958c:	20001274 	.word	0x20001274
 8009590:	200012dc 	.word	0x200012dc
 8009594:	20001344 	.word	0x20001344

08009598 <global_stdio_init.part.0>:
 8009598:	b510      	push	{r4, lr}
 800959a:	4b0b      	ldr	r3, [pc, #44]	@ (80095c8 <global_stdio_init.part.0+0x30>)
 800959c:	4c0b      	ldr	r4, [pc, #44]	@ (80095cc <global_stdio_init.part.0+0x34>)
 800959e:	4a0c      	ldr	r2, [pc, #48]	@ (80095d0 <global_stdio_init.part.0+0x38>)
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	4620      	mov	r0, r4
 80095a4:	2200      	movs	r2, #0
 80095a6:	2104      	movs	r1, #4
 80095a8:	f7ff ff94 	bl	80094d4 <std>
 80095ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095b0:	2201      	movs	r2, #1
 80095b2:	2109      	movs	r1, #9
 80095b4:	f7ff ff8e 	bl	80094d4 <std>
 80095b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095bc:	2202      	movs	r2, #2
 80095be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095c2:	2112      	movs	r1, #18
 80095c4:	f7ff bf86 	b.w	80094d4 <std>
 80095c8:	200013ac 	.word	0x200013ac
 80095cc:	20001274 	.word	0x20001274
 80095d0:	08009541 	.word	0x08009541

080095d4 <__sfp_lock_acquire>:
 80095d4:	4801      	ldr	r0, [pc, #4]	@ (80095dc <__sfp_lock_acquire+0x8>)
 80095d6:	f000 b94e 	b.w	8009876 <__retarget_lock_acquire_recursive>
 80095da:	bf00      	nop
 80095dc:	200013b5 	.word	0x200013b5

080095e0 <__sfp_lock_release>:
 80095e0:	4801      	ldr	r0, [pc, #4]	@ (80095e8 <__sfp_lock_release+0x8>)
 80095e2:	f000 b949 	b.w	8009878 <__retarget_lock_release_recursive>
 80095e6:	bf00      	nop
 80095e8:	200013b5 	.word	0x200013b5

080095ec <__sinit>:
 80095ec:	b510      	push	{r4, lr}
 80095ee:	4604      	mov	r4, r0
 80095f0:	f7ff fff0 	bl	80095d4 <__sfp_lock_acquire>
 80095f4:	6a23      	ldr	r3, [r4, #32]
 80095f6:	b11b      	cbz	r3, 8009600 <__sinit+0x14>
 80095f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095fc:	f7ff bff0 	b.w	80095e0 <__sfp_lock_release>
 8009600:	4b04      	ldr	r3, [pc, #16]	@ (8009614 <__sinit+0x28>)
 8009602:	6223      	str	r3, [r4, #32]
 8009604:	4b04      	ldr	r3, [pc, #16]	@ (8009618 <__sinit+0x2c>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1f5      	bne.n	80095f8 <__sinit+0xc>
 800960c:	f7ff ffc4 	bl	8009598 <global_stdio_init.part.0>
 8009610:	e7f2      	b.n	80095f8 <__sinit+0xc>
 8009612:	bf00      	nop
 8009614:	08009559 	.word	0x08009559
 8009618:	200013ac 	.word	0x200013ac

0800961c <_fwalk_sglue>:
 800961c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009620:	4607      	mov	r7, r0
 8009622:	4688      	mov	r8, r1
 8009624:	4614      	mov	r4, r2
 8009626:	2600      	movs	r6, #0
 8009628:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800962c:	f1b9 0901 	subs.w	r9, r9, #1
 8009630:	d505      	bpl.n	800963e <_fwalk_sglue+0x22>
 8009632:	6824      	ldr	r4, [r4, #0]
 8009634:	2c00      	cmp	r4, #0
 8009636:	d1f7      	bne.n	8009628 <_fwalk_sglue+0xc>
 8009638:	4630      	mov	r0, r6
 800963a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800963e:	89ab      	ldrh	r3, [r5, #12]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d907      	bls.n	8009654 <_fwalk_sglue+0x38>
 8009644:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009648:	3301      	adds	r3, #1
 800964a:	d003      	beq.n	8009654 <_fwalk_sglue+0x38>
 800964c:	4629      	mov	r1, r5
 800964e:	4638      	mov	r0, r7
 8009650:	47c0      	blx	r8
 8009652:	4306      	orrs	r6, r0
 8009654:	3568      	adds	r5, #104	@ 0x68
 8009656:	e7e9      	b.n	800962c <_fwalk_sglue+0x10>

08009658 <sniprintf>:
 8009658:	b40c      	push	{r2, r3}
 800965a:	b530      	push	{r4, r5, lr}
 800965c:	4b17      	ldr	r3, [pc, #92]	@ (80096bc <sniprintf+0x64>)
 800965e:	1e0c      	subs	r4, r1, #0
 8009660:	681d      	ldr	r5, [r3, #0]
 8009662:	b09d      	sub	sp, #116	@ 0x74
 8009664:	da08      	bge.n	8009678 <sniprintf+0x20>
 8009666:	238b      	movs	r3, #139	@ 0x8b
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	f04f 30ff 	mov.w	r0, #4294967295
 800966e:	b01d      	add	sp, #116	@ 0x74
 8009670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009674:	b002      	add	sp, #8
 8009676:	4770      	bx	lr
 8009678:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800967c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009680:	bf14      	ite	ne
 8009682:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009686:	4623      	moveq	r3, r4
 8009688:	9304      	str	r3, [sp, #16]
 800968a:	9307      	str	r3, [sp, #28]
 800968c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009690:	9002      	str	r0, [sp, #8]
 8009692:	9006      	str	r0, [sp, #24]
 8009694:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009698:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800969a:	ab21      	add	r3, sp, #132	@ 0x84
 800969c:	a902      	add	r1, sp, #8
 800969e:	4628      	mov	r0, r5
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	f001 fc2b 	bl	800aefc <_svfiprintf_r>
 80096a6:	1c43      	adds	r3, r0, #1
 80096a8:	bfbc      	itt	lt
 80096aa:	238b      	movlt	r3, #139	@ 0x8b
 80096ac:	602b      	strlt	r3, [r5, #0]
 80096ae:	2c00      	cmp	r4, #0
 80096b0:	d0dd      	beq.n	800966e <sniprintf+0x16>
 80096b2:	9b02      	ldr	r3, [sp, #8]
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]
 80096b8:	e7d9      	b.n	800966e <sniprintf+0x16>
 80096ba:	bf00      	nop
 80096bc:	20000044 	.word	0x20000044

080096c0 <__sread>:
 80096c0:	b510      	push	{r4, lr}
 80096c2:	460c      	mov	r4, r1
 80096c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c8:	f000 f886 	bl	80097d8 <_read_r>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	bfab      	itete	ge
 80096d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096d2:	89a3      	ldrhlt	r3, [r4, #12]
 80096d4:	181b      	addge	r3, r3, r0
 80096d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096da:	bfac      	ite	ge
 80096dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096de:	81a3      	strhlt	r3, [r4, #12]
 80096e0:	bd10      	pop	{r4, pc}

080096e2 <__swrite>:
 80096e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e6:	461f      	mov	r7, r3
 80096e8:	898b      	ldrh	r3, [r1, #12]
 80096ea:	05db      	lsls	r3, r3, #23
 80096ec:	4605      	mov	r5, r0
 80096ee:	460c      	mov	r4, r1
 80096f0:	4616      	mov	r6, r2
 80096f2:	d505      	bpl.n	8009700 <__swrite+0x1e>
 80096f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f8:	2302      	movs	r3, #2
 80096fa:	2200      	movs	r2, #0
 80096fc:	f000 f85a 	bl	80097b4 <_lseek_r>
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800970a:	81a3      	strh	r3, [r4, #12]
 800970c:	4632      	mov	r2, r6
 800970e:	463b      	mov	r3, r7
 8009710:	4628      	mov	r0, r5
 8009712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009716:	f000 b871 	b.w	80097fc <_write_r>

0800971a <__sseek>:
 800971a:	b510      	push	{r4, lr}
 800971c:	460c      	mov	r4, r1
 800971e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009722:	f000 f847 	bl	80097b4 <_lseek_r>
 8009726:	1c43      	adds	r3, r0, #1
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	bf15      	itete	ne
 800972c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800972e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009732:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009736:	81a3      	strheq	r3, [r4, #12]
 8009738:	bf18      	it	ne
 800973a:	81a3      	strhne	r3, [r4, #12]
 800973c:	bd10      	pop	{r4, pc}

0800973e <__sclose>:
 800973e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009742:	f000 b827 	b.w	8009794 <_close_r>

08009746 <memmove>:
 8009746:	4288      	cmp	r0, r1
 8009748:	b510      	push	{r4, lr}
 800974a:	eb01 0402 	add.w	r4, r1, r2
 800974e:	d902      	bls.n	8009756 <memmove+0x10>
 8009750:	4284      	cmp	r4, r0
 8009752:	4623      	mov	r3, r4
 8009754:	d807      	bhi.n	8009766 <memmove+0x20>
 8009756:	1e43      	subs	r3, r0, #1
 8009758:	42a1      	cmp	r1, r4
 800975a:	d008      	beq.n	800976e <memmove+0x28>
 800975c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009760:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009764:	e7f8      	b.n	8009758 <memmove+0x12>
 8009766:	4402      	add	r2, r0
 8009768:	4601      	mov	r1, r0
 800976a:	428a      	cmp	r2, r1
 800976c:	d100      	bne.n	8009770 <memmove+0x2a>
 800976e:	bd10      	pop	{r4, pc}
 8009770:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009774:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009778:	e7f7      	b.n	800976a <memmove+0x24>

0800977a <memset>:
 800977a:	4402      	add	r2, r0
 800977c:	4603      	mov	r3, r0
 800977e:	4293      	cmp	r3, r2
 8009780:	d100      	bne.n	8009784 <memset+0xa>
 8009782:	4770      	bx	lr
 8009784:	f803 1b01 	strb.w	r1, [r3], #1
 8009788:	e7f9      	b.n	800977e <memset+0x4>
	...

0800978c <_localeconv_r>:
 800978c:	4800      	ldr	r0, [pc, #0]	@ (8009790 <_localeconv_r+0x4>)
 800978e:	4770      	bx	lr
 8009790:	20000184 	.word	0x20000184

08009794 <_close_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4d06      	ldr	r5, [pc, #24]	@ (80097b0 <_close_r+0x1c>)
 8009798:	2300      	movs	r3, #0
 800979a:	4604      	mov	r4, r0
 800979c:	4608      	mov	r0, r1
 800979e:	602b      	str	r3, [r5, #0]
 80097a0:	f7f8 fcec 	bl	800217c <_close>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d102      	bne.n	80097ae <_close_r+0x1a>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b103      	cbz	r3, 80097ae <_close_r+0x1a>
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	200013b0 	.word	0x200013b0

080097b4 <_lseek_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	4d07      	ldr	r5, [pc, #28]	@ (80097d4 <_lseek_r+0x20>)
 80097b8:	4604      	mov	r4, r0
 80097ba:	4608      	mov	r0, r1
 80097bc:	4611      	mov	r1, r2
 80097be:	2200      	movs	r2, #0
 80097c0:	602a      	str	r2, [r5, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f7f8 fd01 	bl	80021ca <_lseek>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_lseek_r+0x1e>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_lseek_r+0x1e>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	200013b0 	.word	0x200013b0

080097d8 <_read_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d07      	ldr	r5, [pc, #28]	@ (80097f8 <_read_r+0x20>)
 80097dc:	4604      	mov	r4, r0
 80097de:	4608      	mov	r0, r1
 80097e0:	4611      	mov	r1, r2
 80097e2:	2200      	movs	r2, #0
 80097e4:	602a      	str	r2, [r5, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f7f8 fc8f 	bl	800210a <_read>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d102      	bne.n	80097f6 <_read_r+0x1e>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b103      	cbz	r3, 80097f6 <_read_r+0x1e>
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	200013b0 	.word	0x200013b0

080097fc <_write_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	4d07      	ldr	r5, [pc, #28]	@ (800981c <_write_r+0x20>)
 8009800:	4604      	mov	r4, r0
 8009802:	4608      	mov	r0, r1
 8009804:	4611      	mov	r1, r2
 8009806:	2200      	movs	r2, #0
 8009808:	602a      	str	r2, [r5, #0]
 800980a:	461a      	mov	r2, r3
 800980c:	f7f8 fc9a 	bl	8002144 <_write>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d102      	bne.n	800981a <_write_r+0x1e>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b103      	cbz	r3, 800981a <_write_r+0x1e>
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	200013b0 	.word	0x200013b0

08009820 <__errno>:
 8009820:	4b01      	ldr	r3, [pc, #4]	@ (8009828 <__errno+0x8>)
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	20000044 	.word	0x20000044

0800982c <__libc_init_array>:
 800982c:	b570      	push	{r4, r5, r6, lr}
 800982e:	4d0d      	ldr	r5, [pc, #52]	@ (8009864 <__libc_init_array+0x38>)
 8009830:	4c0d      	ldr	r4, [pc, #52]	@ (8009868 <__libc_init_array+0x3c>)
 8009832:	1b64      	subs	r4, r4, r5
 8009834:	10a4      	asrs	r4, r4, #2
 8009836:	2600      	movs	r6, #0
 8009838:	42a6      	cmp	r6, r4
 800983a:	d109      	bne.n	8009850 <__libc_init_array+0x24>
 800983c:	4d0b      	ldr	r5, [pc, #44]	@ (800986c <__libc_init_array+0x40>)
 800983e:	4c0c      	ldr	r4, [pc, #48]	@ (8009870 <__libc_init_array+0x44>)
 8009840:	f002 f852 	bl	800b8e8 <_init>
 8009844:	1b64      	subs	r4, r4, r5
 8009846:	10a4      	asrs	r4, r4, #2
 8009848:	2600      	movs	r6, #0
 800984a:	42a6      	cmp	r6, r4
 800984c:	d105      	bne.n	800985a <__libc_init_array+0x2e>
 800984e:	bd70      	pop	{r4, r5, r6, pc}
 8009850:	f855 3b04 	ldr.w	r3, [r5], #4
 8009854:	4798      	blx	r3
 8009856:	3601      	adds	r6, #1
 8009858:	e7ee      	b.n	8009838 <__libc_init_array+0xc>
 800985a:	f855 3b04 	ldr.w	r3, [r5], #4
 800985e:	4798      	blx	r3
 8009860:	3601      	adds	r6, #1
 8009862:	e7f2      	b.n	800984a <__libc_init_array+0x1e>
 8009864:	0800de28 	.word	0x0800de28
 8009868:	0800de28 	.word	0x0800de28
 800986c:	0800de28 	.word	0x0800de28
 8009870:	0800de2c 	.word	0x0800de2c

08009874 <__retarget_lock_init_recursive>:
 8009874:	4770      	bx	lr

08009876 <__retarget_lock_acquire_recursive>:
 8009876:	4770      	bx	lr

08009878 <__retarget_lock_release_recursive>:
 8009878:	4770      	bx	lr

0800987a <strcpy>:
 800987a:	4603      	mov	r3, r0
 800987c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009880:	f803 2b01 	strb.w	r2, [r3], #1
 8009884:	2a00      	cmp	r2, #0
 8009886:	d1f9      	bne.n	800987c <strcpy+0x2>
 8009888:	4770      	bx	lr

0800988a <memcpy>:
 800988a:	440a      	add	r2, r1
 800988c:	4291      	cmp	r1, r2
 800988e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009892:	d100      	bne.n	8009896 <memcpy+0xc>
 8009894:	4770      	bx	lr
 8009896:	b510      	push	{r4, lr}
 8009898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800989c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098a0:	4291      	cmp	r1, r2
 80098a2:	d1f9      	bne.n	8009898 <memcpy+0xe>
 80098a4:	bd10      	pop	{r4, pc}

080098a6 <quorem>:
 80098a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098aa:	6903      	ldr	r3, [r0, #16]
 80098ac:	690c      	ldr	r4, [r1, #16]
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	4607      	mov	r7, r0
 80098b2:	db7e      	blt.n	80099b2 <quorem+0x10c>
 80098b4:	3c01      	subs	r4, #1
 80098b6:	f101 0814 	add.w	r8, r1, #20
 80098ba:	00a3      	lsls	r3, r4, #2
 80098bc:	f100 0514 	add.w	r5, r0, #20
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098d0:	3301      	adds	r3, #1
 80098d2:	429a      	cmp	r2, r3
 80098d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80098dc:	d32e      	bcc.n	800993c <quorem+0x96>
 80098de:	f04f 0a00 	mov.w	sl, #0
 80098e2:	46c4      	mov	ip, r8
 80098e4:	46ae      	mov	lr, r5
 80098e6:	46d3      	mov	fp, sl
 80098e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098ec:	b298      	uxth	r0, r3
 80098ee:	fb06 a000 	mla	r0, r6, r0, sl
 80098f2:	0c02      	lsrs	r2, r0, #16
 80098f4:	0c1b      	lsrs	r3, r3, #16
 80098f6:	fb06 2303 	mla	r3, r6, r3, r2
 80098fa:	f8de 2000 	ldr.w	r2, [lr]
 80098fe:	b280      	uxth	r0, r0
 8009900:	b292      	uxth	r2, r2
 8009902:	1a12      	subs	r2, r2, r0
 8009904:	445a      	add	r2, fp
 8009906:	f8de 0000 	ldr.w	r0, [lr]
 800990a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800990e:	b29b      	uxth	r3, r3
 8009910:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009914:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009918:	b292      	uxth	r2, r2
 800991a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800991e:	45e1      	cmp	r9, ip
 8009920:	f84e 2b04 	str.w	r2, [lr], #4
 8009924:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009928:	d2de      	bcs.n	80098e8 <quorem+0x42>
 800992a:	9b00      	ldr	r3, [sp, #0]
 800992c:	58eb      	ldr	r3, [r5, r3]
 800992e:	b92b      	cbnz	r3, 800993c <quorem+0x96>
 8009930:	9b01      	ldr	r3, [sp, #4]
 8009932:	3b04      	subs	r3, #4
 8009934:	429d      	cmp	r5, r3
 8009936:	461a      	mov	r2, r3
 8009938:	d32f      	bcc.n	800999a <quorem+0xf4>
 800993a:	613c      	str	r4, [r7, #16]
 800993c:	4638      	mov	r0, r7
 800993e:	f001 f979 	bl	800ac34 <__mcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	db25      	blt.n	8009992 <quorem+0xec>
 8009946:	4629      	mov	r1, r5
 8009948:	2000      	movs	r0, #0
 800994a:	f858 2b04 	ldr.w	r2, [r8], #4
 800994e:	f8d1 c000 	ldr.w	ip, [r1]
 8009952:	fa1f fe82 	uxth.w	lr, r2
 8009956:	fa1f f38c 	uxth.w	r3, ip
 800995a:	eba3 030e 	sub.w	r3, r3, lr
 800995e:	4403      	add	r3, r0
 8009960:	0c12      	lsrs	r2, r2, #16
 8009962:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009966:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800996a:	b29b      	uxth	r3, r3
 800996c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009970:	45c1      	cmp	r9, r8
 8009972:	f841 3b04 	str.w	r3, [r1], #4
 8009976:	ea4f 4022 	mov.w	r0, r2, asr #16
 800997a:	d2e6      	bcs.n	800994a <quorem+0xa4>
 800997c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009980:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009984:	b922      	cbnz	r2, 8009990 <quorem+0xea>
 8009986:	3b04      	subs	r3, #4
 8009988:	429d      	cmp	r5, r3
 800998a:	461a      	mov	r2, r3
 800998c:	d30b      	bcc.n	80099a6 <quorem+0x100>
 800998e:	613c      	str	r4, [r7, #16]
 8009990:	3601      	adds	r6, #1
 8009992:	4630      	mov	r0, r6
 8009994:	b003      	add	sp, #12
 8009996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999a:	6812      	ldr	r2, [r2, #0]
 800999c:	3b04      	subs	r3, #4
 800999e:	2a00      	cmp	r2, #0
 80099a0:	d1cb      	bne.n	800993a <quorem+0x94>
 80099a2:	3c01      	subs	r4, #1
 80099a4:	e7c6      	b.n	8009934 <quorem+0x8e>
 80099a6:	6812      	ldr	r2, [r2, #0]
 80099a8:	3b04      	subs	r3, #4
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	d1ef      	bne.n	800998e <quorem+0xe8>
 80099ae:	3c01      	subs	r4, #1
 80099b0:	e7ea      	b.n	8009988 <quorem+0xe2>
 80099b2:	2000      	movs	r0, #0
 80099b4:	e7ee      	b.n	8009994 <quorem+0xee>
	...

080099b8 <_dtoa_r>:
 80099b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	69c7      	ldr	r7, [r0, #28]
 80099be:	b099      	sub	sp, #100	@ 0x64
 80099c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099c4:	ec55 4b10 	vmov	r4, r5, d0
 80099c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80099ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80099cc:	4683      	mov	fp, r0
 80099ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80099d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099d2:	b97f      	cbnz	r7, 80099f4 <_dtoa_r+0x3c>
 80099d4:	2010      	movs	r0, #16
 80099d6:	f000 fdfd 	bl	800a5d4 <malloc>
 80099da:	4602      	mov	r2, r0
 80099dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80099e0:	b920      	cbnz	r0, 80099ec <_dtoa_r+0x34>
 80099e2:	4ba7      	ldr	r3, [pc, #668]	@ (8009c80 <_dtoa_r+0x2c8>)
 80099e4:	21ef      	movs	r1, #239	@ 0xef
 80099e6:	48a7      	ldr	r0, [pc, #668]	@ (8009c84 <_dtoa_r+0x2cc>)
 80099e8:	f001 fc40 	bl	800b26c <__assert_func>
 80099ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099f0:	6007      	str	r7, [r0, #0]
 80099f2:	60c7      	str	r7, [r0, #12]
 80099f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099f8:	6819      	ldr	r1, [r3, #0]
 80099fa:	b159      	cbz	r1, 8009a14 <_dtoa_r+0x5c>
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	604a      	str	r2, [r1, #4]
 8009a00:	2301      	movs	r3, #1
 8009a02:	4093      	lsls	r3, r2
 8009a04:	608b      	str	r3, [r1, #8]
 8009a06:	4658      	mov	r0, fp
 8009a08:	f000 feda 	bl	800a7c0 <_Bfree>
 8009a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	1e2b      	subs	r3, r5, #0
 8009a16:	bfb9      	ittee	lt
 8009a18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a1c:	9303      	strlt	r3, [sp, #12]
 8009a1e:	2300      	movge	r3, #0
 8009a20:	6033      	strge	r3, [r6, #0]
 8009a22:	9f03      	ldr	r7, [sp, #12]
 8009a24:	4b98      	ldr	r3, [pc, #608]	@ (8009c88 <_dtoa_r+0x2d0>)
 8009a26:	bfbc      	itt	lt
 8009a28:	2201      	movlt	r2, #1
 8009a2a:	6032      	strlt	r2, [r6, #0]
 8009a2c:	43bb      	bics	r3, r7
 8009a2e:	d112      	bne.n	8009a56 <_dtoa_r+0x9e>
 8009a30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a3c:	4323      	orrs	r3, r4
 8009a3e:	f000 854d 	beq.w	800a4dc <_dtoa_r+0xb24>
 8009a42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009c9c <_dtoa_r+0x2e4>
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 854f 	beq.w	800a4ec <_dtoa_r+0xb34>
 8009a4e:	f10a 0303 	add.w	r3, sl, #3
 8009a52:	f000 bd49 	b.w	800a4e8 <_dtoa_r+0xb30>
 8009a56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	ec51 0b17 	vmov	r0, r1, d7
 8009a60:	2300      	movs	r3, #0
 8009a62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a66:	f7f7 f83f 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	b158      	cbz	r0, 8009a86 <_dtoa_r+0xce>
 8009a6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a70:	2301      	movs	r3, #1
 8009a72:	6013      	str	r3, [r2, #0]
 8009a74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a76:	b113      	cbz	r3, 8009a7e <_dtoa_r+0xc6>
 8009a78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a7a:	4b84      	ldr	r3, [pc, #528]	@ (8009c8c <_dtoa_r+0x2d4>)
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009ca0 <_dtoa_r+0x2e8>
 8009a82:	f000 bd33 	b.w	800a4ec <_dtoa_r+0xb34>
 8009a86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a8a:	aa16      	add	r2, sp, #88	@ 0x58
 8009a8c:	a917      	add	r1, sp, #92	@ 0x5c
 8009a8e:	4658      	mov	r0, fp
 8009a90:	f001 f980 	bl	800ad94 <__d2b>
 8009a94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009a98:	4681      	mov	r9, r0
 8009a9a:	2e00      	cmp	r6, #0
 8009a9c:	d077      	beq.n	8009b8e <_dtoa_r+0x1d6>
 8009a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009aa0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ab0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009ab4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ab8:	4619      	mov	r1, r3
 8009aba:	2200      	movs	r2, #0
 8009abc:	4b74      	ldr	r3, [pc, #464]	@ (8009c90 <_dtoa_r+0x2d8>)
 8009abe:	f7f6 fbf3 	bl	80002a8 <__aeabi_dsub>
 8009ac2:	a369      	add	r3, pc, #420	@ (adr r3, 8009c68 <_dtoa_r+0x2b0>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	f7f6 fda6 	bl	8000618 <__aeabi_dmul>
 8009acc:	a368      	add	r3, pc, #416	@ (adr r3, 8009c70 <_dtoa_r+0x2b8>)
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	f7f6 fbeb 	bl	80002ac <__adddf3>
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4630      	mov	r0, r6
 8009ada:	460d      	mov	r5, r1
 8009adc:	f7f6 fd32 	bl	8000544 <__aeabi_i2d>
 8009ae0:	a365      	add	r3, pc, #404	@ (adr r3, 8009c78 <_dtoa_r+0x2c0>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f6 fd97 	bl	8000618 <__aeabi_dmul>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	4620      	mov	r0, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7f6 fbdb 	bl	80002ac <__adddf3>
 8009af6:	4604      	mov	r4, r0
 8009af8:	460d      	mov	r5, r1
 8009afa:	f7f7 f83d 	bl	8000b78 <__aeabi_d2iz>
 8009afe:	2200      	movs	r2, #0
 8009b00:	4607      	mov	r7, r0
 8009b02:	2300      	movs	r3, #0
 8009b04:	4620      	mov	r0, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7f6 fff8 	bl	8000afc <__aeabi_dcmplt>
 8009b0c:	b140      	cbz	r0, 8009b20 <_dtoa_r+0x168>
 8009b0e:	4638      	mov	r0, r7
 8009b10:	f7f6 fd18 	bl	8000544 <__aeabi_i2d>
 8009b14:	4622      	mov	r2, r4
 8009b16:	462b      	mov	r3, r5
 8009b18:	f7f6 ffe6 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b1c:	b900      	cbnz	r0, 8009b20 <_dtoa_r+0x168>
 8009b1e:	3f01      	subs	r7, #1
 8009b20:	2f16      	cmp	r7, #22
 8009b22:	d851      	bhi.n	8009bc8 <_dtoa_r+0x210>
 8009b24:	4b5b      	ldr	r3, [pc, #364]	@ (8009c94 <_dtoa_r+0x2dc>)
 8009b26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b32:	f7f6 ffe3 	bl	8000afc <__aeabi_dcmplt>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d048      	beq.n	8009bcc <_dtoa_r+0x214>
 8009b3a:	3f01      	subs	r7, #1
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b42:	1b9b      	subs	r3, r3, r6
 8009b44:	1e5a      	subs	r2, r3, #1
 8009b46:	bf44      	itt	mi
 8009b48:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b4c:	2300      	movmi	r3, #0
 8009b4e:	9208      	str	r2, [sp, #32]
 8009b50:	bf54      	ite	pl
 8009b52:	f04f 0800 	movpl.w	r8, #0
 8009b56:	9308      	strmi	r3, [sp, #32]
 8009b58:	2f00      	cmp	r7, #0
 8009b5a:	db39      	blt.n	8009bd0 <_dtoa_r+0x218>
 8009b5c:	9b08      	ldr	r3, [sp, #32]
 8009b5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b60:	443b      	add	r3, r7
 8009b62:	9308      	str	r3, [sp, #32]
 8009b64:	2300      	movs	r3, #0
 8009b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6a:	2b09      	cmp	r3, #9
 8009b6c:	d864      	bhi.n	8009c38 <_dtoa_r+0x280>
 8009b6e:	2b05      	cmp	r3, #5
 8009b70:	bfc4      	itt	gt
 8009b72:	3b04      	subgt	r3, #4
 8009b74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b78:	f1a3 0302 	sub.w	r3, r3, #2
 8009b7c:	bfcc      	ite	gt
 8009b7e:	2400      	movgt	r4, #0
 8009b80:	2401      	movle	r4, #1
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d863      	bhi.n	8009c4e <_dtoa_r+0x296>
 8009b86:	e8df f003 	tbb	[pc, r3]
 8009b8a:	372a      	.short	0x372a
 8009b8c:	5535      	.short	0x5535
 8009b8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009b92:	441e      	add	r6, r3
 8009b94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b98:	2b20      	cmp	r3, #32
 8009b9a:	bfc1      	itttt	gt
 8009b9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009ba0:	409f      	lslgt	r7, r3
 8009ba2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009ba6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009baa:	bfd6      	itet	le
 8009bac:	f1c3 0320 	rsble	r3, r3, #32
 8009bb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009bb4:	fa04 f003 	lslle.w	r0, r4, r3
 8009bb8:	f7f6 fcb4 	bl	8000524 <__aeabi_ui2d>
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009bc2:	3e01      	subs	r6, #1
 8009bc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8009bc6:	e777      	b.n	8009ab8 <_dtoa_r+0x100>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e7b8      	b.n	8009b3e <_dtoa_r+0x186>
 8009bcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8009bce:	e7b7      	b.n	8009b40 <_dtoa_r+0x188>
 8009bd0:	427b      	negs	r3, r7
 8009bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	eba8 0807 	sub.w	r8, r8, r7
 8009bda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bdc:	e7c4      	b.n	8009b68 <_dtoa_r+0x1b0>
 8009bde:	2300      	movs	r3, #0
 8009be0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	dc35      	bgt.n	8009c54 <_dtoa_r+0x29c>
 8009be8:	2301      	movs	r3, #1
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	9307      	str	r3, [sp, #28]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bf2:	e00b      	b.n	8009c0c <_dtoa_r+0x254>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e7f3      	b.n	8009be0 <_dtoa_r+0x228>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bfe:	18fb      	adds	r3, r7, r3
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	3301      	adds	r3, #1
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	9307      	str	r3, [sp, #28]
 8009c08:	bfb8      	it	lt
 8009c0a:	2301      	movlt	r3, #1
 8009c0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c10:	2100      	movs	r1, #0
 8009c12:	2204      	movs	r2, #4
 8009c14:	f102 0514 	add.w	r5, r2, #20
 8009c18:	429d      	cmp	r5, r3
 8009c1a:	d91f      	bls.n	8009c5c <_dtoa_r+0x2a4>
 8009c1c:	6041      	str	r1, [r0, #4]
 8009c1e:	4658      	mov	r0, fp
 8009c20:	f000 fd8e 	bl	800a740 <_Balloc>
 8009c24:	4682      	mov	sl, r0
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d13c      	bne.n	8009ca4 <_dtoa_r+0x2ec>
 8009c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009c98 <_dtoa_r+0x2e0>)
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c32:	e6d8      	b.n	80099e6 <_dtoa_r+0x2e>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e7e0      	b.n	8009bfa <_dtoa_r+0x242>
 8009c38:	2401      	movs	r4, #1
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c40:	f04f 33ff 	mov.w	r3, #4294967295
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	9307      	str	r3, [sp, #28]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2312      	movs	r3, #18
 8009c4c:	e7d0      	b.n	8009bf0 <_dtoa_r+0x238>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c52:	e7f5      	b.n	8009c40 <_dtoa_r+0x288>
 8009c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	9307      	str	r3, [sp, #28]
 8009c5a:	e7d7      	b.n	8009c0c <_dtoa_r+0x254>
 8009c5c:	3101      	adds	r1, #1
 8009c5e:	0052      	lsls	r2, r2, #1
 8009c60:	e7d8      	b.n	8009c14 <_dtoa_r+0x25c>
 8009c62:	bf00      	nop
 8009c64:	f3af 8000 	nop.w
 8009c68:	636f4361 	.word	0x636f4361
 8009c6c:	3fd287a7 	.word	0x3fd287a7
 8009c70:	8b60c8b3 	.word	0x8b60c8b3
 8009c74:	3fc68a28 	.word	0x3fc68a28
 8009c78:	509f79fb 	.word	0x509f79fb
 8009c7c:	3fd34413 	.word	0x3fd34413
 8009c80:	0800daed 	.word	0x0800daed
 8009c84:	0800db04 	.word	0x0800db04
 8009c88:	7ff00000 	.word	0x7ff00000
 8009c8c:	0800dabd 	.word	0x0800dabd
 8009c90:	3ff80000 	.word	0x3ff80000
 8009c94:	0800dc00 	.word	0x0800dc00
 8009c98:	0800db5c 	.word	0x0800db5c
 8009c9c:	0800dae9 	.word	0x0800dae9
 8009ca0:	0800dabc 	.word	0x0800dabc
 8009ca4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ca8:	6018      	str	r0, [r3, #0]
 8009caa:	9b07      	ldr	r3, [sp, #28]
 8009cac:	2b0e      	cmp	r3, #14
 8009cae:	f200 80a4 	bhi.w	8009dfa <_dtoa_r+0x442>
 8009cb2:	2c00      	cmp	r4, #0
 8009cb4:	f000 80a1 	beq.w	8009dfa <_dtoa_r+0x442>
 8009cb8:	2f00      	cmp	r7, #0
 8009cba:	dd33      	ble.n	8009d24 <_dtoa_r+0x36c>
 8009cbc:	4bad      	ldr	r3, [pc, #692]	@ (8009f74 <_dtoa_r+0x5bc>)
 8009cbe:	f007 020f 	and.w	r2, r7, #15
 8009cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cc6:	ed93 7b00 	vldr	d7, [r3]
 8009cca:	05f8      	lsls	r0, r7, #23
 8009ccc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009cd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009cd4:	d516      	bpl.n	8009d04 <_dtoa_r+0x34c>
 8009cd6:	4ba8      	ldr	r3, [pc, #672]	@ (8009f78 <_dtoa_r+0x5c0>)
 8009cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ce0:	f7f6 fdc4 	bl	800086c <__aeabi_ddiv>
 8009ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce8:	f004 040f 	and.w	r4, r4, #15
 8009cec:	2603      	movs	r6, #3
 8009cee:	4da2      	ldr	r5, [pc, #648]	@ (8009f78 <_dtoa_r+0x5c0>)
 8009cf0:	b954      	cbnz	r4, 8009d08 <_dtoa_r+0x350>
 8009cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cfa:	f7f6 fdb7 	bl	800086c <__aeabi_ddiv>
 8009cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d02:	e028      	b.n	8009d56 <_dtoa_r+0x39e>
 8009d04:	2602      	movs	r6, #2
 8009d06:	e7f2      	b.n	8009cee <_dtoa_r+0x336>
 8009d08:	07e1      	lsls	r1, r4, #31
 8009d0a:	d508      	bpl.n	8009d1e <_dtoa_r+0x366>
 8009d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d14:	f7f6 fc80 	bl	8000618 <__aeabi_dmul>
 8009d18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d1c:	3601      	adds	r6, #1
 8009d1e:	1064      	asrs	r4, r4, #1
 8009d20:	3508      	adds	r5, #8
 8009d22:	e7e5      	b.n	8009cf0 <_dtoa_r+0x338>
 8009d24:	f000 80d2 	beq.w	8009ecc <_dtoa_r+0x514>
 8009d28:	427c      	negs	r4, r7
 8009d2a:	4b92      	ldr	r3, [pc, #584]	@ (8009f74 <_dtoa_r+0x5bc>)
 8009d2c:	4d92      	ldr	r5, [pc, #584]	@ (8009f78 <_dtoa_r+0x5c0>)
 8009d2e:	f004 020f 	and.w	r2, r4, #15
 8009d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d3e:	f7f6 fc6b 	bl	8000618 <__aeabi_dmul>
 8009d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d46:	1124      	asrs	r4, r4, #4
 8009d48:	2300      	movs	r3, #0
 8009d4a:	2602      	movs	r6, #2
 8009d4c:	2c00      	cmp	r4, #0
 8009d4e:	f040 80b2 	bne.w	8009eb6 <_dtoa_r+0x4fe>
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1d3      	bne.n	8009cfe <_dtoa_r+0x346>
 8009d56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 80b7 	beq.w	8009ed0 <_dtoa_r+0x518>
 8009d62:	4b86      	ldr	r3, [pc, #536]	@ (8009f7c <_dtoa_r+0x5c4>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	4620      	mov	r0, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f7f6 fec7 	bl	8000afc <__aeabi_dcmplt>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	f000 80ae 	beq.w	8009ed0 <_dtoa_r+0x518>
 8009d74:	9b07      	ldr	r3, [sp, #28]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 80aa 	beq.w	8009ed0 <_dtoa_r+0x518>
 8009d7c:	9b00      	ldr	r3, [sp, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	dd37      	ble.n	8009df2 <_dtoa_r+0x43a>
 8009d82:	1e7b      	subs	r3, r7, #1
 8009d84:	9304      	str	r3, [sp, #16]
 8009d86:	4620      	mov	r0, r4
 8009d88:	4b7d      	ldr	r3, [pc, #500]	@ (8009f80 <_dtoa_r+0x5c8>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7f6 fc43 	bl	8000618 <__aeabi_dmul>
 8009d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d96:	9c00      	ldr	r4, [sp, #0]
 8009d98:	3601      	adds	r6, #1
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	f7f6 fbd2 	bl	8000544 <__aeabi_i2d>
 8009da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009da4:	f7f6 fc38 	bl	8000618 <__aeabi_dmul>
 8009da8:	4b76      	ldr	r3, [pc, #472]	@ (8009f84 <_dtoa_r+0x5cc>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	f7f6 fa7e 	bl	80002ac <__adddf3>
 8009db0:	4605      	mov	r5, r0
 8009db2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009db6:	2c00      	cmp	r4, #0
 8009db8:	f040 808d 	bne.w	8009ed6 <_dtoa_r+0x51e>
 8009dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dc0:	4b71      	ldr	r3, [pc, #452]	@ (8009f88 <_dtoa_r+0x5d0>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f7f6 fa70 	bl	80002a8 <__aeabi_dsub>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dd0:	462a      	mov	r2, r5
 8009dd2:	4633      	mov	r3, r6
 8009dd4:	f7f6 feb0 	bl	8000b38 <__aeabi_dcmpgt>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	f040 828b 	bne.w	800a2f4 <_dtoa_r+0x93c>
 8009dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009de2:	462a      	mov	r2, r5
 8009de4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009de8:	f7f6 fe88 	bl	8000afc <__aeabi_dcmplt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f040 8128 	bne.w	800a042 <_dtoa_r+0x68a>
 8009df2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009df6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009dfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f2c0 815a 	blt.w	800a0b6 <_dtoa_r+0x6fe>
 8009e02:	2f0e      	cmp	r7, #14
 8009e04:	f300 8157 	bgt.w	800a0b6 <_dtoa_r+0x6fe>
 8009e08:	4b5a      	ldr	r3, [pc, #360]	@ (8009f74 <_dtoa_r+0x5bc>)
 8009e0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e0e:	ed93 7b00 	vldr	d7, [r3]
 8009e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	ed8d 7b00 	vstr	d7, [sp]
 8009e1a:	da03      	bge.n	8009e24 <_dtoa_r+0x46c>
 8009e1c:	9b07      	ldr	r3, [sp, #28]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f340 8101 	ble.w	800a026 <_dtoa_r+0x66e>
 8009e24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e28:	4656      	mov	r6, sl
 8009e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	f7f6 fd1b 	bl	800086c <__aeabi_ddiv>
 8009e36:	f7f6 fe9f 	bl	8000b78 <__aeabi_d2iz>
 8009e3a:	4680      	mov	r8, r0
 8009e3c:	f7f6 fb82 	bl	8000544 <__aeabi_i2d>
 8009e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e44:	f7f6 fbe8 	bl	8000618 <__aeabi_dmul>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	4629      	mov	r1, r5
 8009e50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e54:	f7f6 fa28 	bl	80002a8 <__aeabi_dsub>
 8009e58:	f806 4b01 	strb.w	r4, [r6], #1
 8009e5c:	9d07      	ldr	r5, [sp, #28]
 8009e5e:	eba6 040a 	sub.w	r4, r6, sl
 8009e62:	42a5      	cmp	r5, r4
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	f040 8117 	bne.w	800a09a <_dtoa_r+0x6e2>
 8009e6c:	f7f6 fa1e 	bl	80002ac <__adddf3>
 8009e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e74:	4604      	mov	r4, r0
 8009e76:	460d      	mov	r5, r1
 8009e78:	f7f6 fe5e 	bl	8000b38 <__aeabi_dcmpgt>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	f040 80f9 	bne.w	800a074 <_dtoa_r+0x6bc>
 8009e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e86:	4620      	mov	r0, r4
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f7f6 fe2d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e8e:	b118      	cbz	r0, 8009e98 <_dtoa_r+0x4e0>
 8009e90:	f018 0f01 	tst.w	r8, #1
 8009e94:	f040 80ee 	bne.w	800a074 <_dtoa_r+0x6bc>
 8009e98:	4649      	mov	r1, r9
 8009e9a:	4658      	mov	r0, fp
 8009e9c:	f000 fc90 	bl	800a7c0 <_Bfree>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	7033      	strb	r3, [r6, #0]
 8009ea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ea6:	3701      	adds	r7, #1
 8009ea8:	601f      	str	r7, [r3, #0]
 8009eaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 831d 	beq.w	800a4ec <_dtoa_r+0xb34>
 8009eb2:	601e      	str	r6, [r3, #0]
 8009eb4:	e31a      	b.n	800a4ec <_dtoa_r+0xb34>
 8009eb6:	07e2      	lsls	r2, r4, #31
 8009eb8:	d505      	bpl.n	8009ec6 <_dtoa_r+0x50e>
 8009eba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ebe:	f7f6 fbab 	bl	8000618 <__aeabi_dmul>
 8009ec2:	3601      	adds	r6, #1
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	1064      	asrs	r4, r4, #1
 8009ec8:	3508      	adds	r5, #8
 8009eca:	e73f      	b.n	8009d4c <_dtoa_r+0x394>
 8009ecc:	2602      	movs	r6, #2
 8009ece:	e742      	b.n	8009d56 <_dtoa_r+0x39e>
 8009ed0:	9c07      	ldr	r4, [sp, #28]
 8009ed2:	9704      	str	r7, [sp, #16]
 8009ed4:	e761      	b.n	8009d9a <_dtoa_r+0x3e2>
 8009ed6:	4b27      	ldr	r3, [pc, #156]	@ (8009f74 <_dtoa_r+0x5bc>)
 8009ed8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009eda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ede:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ee2:	4454      	add	r4, sl
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	d053      	beq.n	8009f90 <_dtoa_r+0x5d8>
 8009ee8:	4928      	ldr	r1, [pc, #160]	@ (8009f8c <_dtoa_r+0x5d4>)
 8009eea:	2000      	movs	r0, #0
 8009eec:	f7f6 fcbe 	bl	800086c <__aeabi_ddiv>
 8009ef0:	4633      	mov	r3, r6
 8009ef2:	462a      	mov	r2, r5
 8009ef4:	f7f6 f9d8 	bl	80002a8 <__aeabi_dsub>
 8009ef8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009efc:	4656      	mov	r6, sl
 8009efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f02:	f7f6 fe39 	bl	8000b78 <__aeabi_d2iz>
 8009f06:	4605      	mov	r5, r0
 8009f08:	f7f6 fb1c 	bl	8000544 <__aeabi_i2d>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f14:	f7f6 f9c8 	bl	80002a8 <__aeabi_dsub>
 8009f18:	3530      	adds	r5, #48	@ 0x30
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f22:	f806 5b01 	strb.w	r5, [r6], #1
 8009f26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f2a:	f7f6 fde7 	bl	8000afc <__aeabi_dcmplt>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d171      	bne.n	800a016 <_dtoa_r+0x65e>
 8009f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f36:	4911      	ldr	r1, [pc, #68]	@ (8009f7c <_dtoa_r+0x5c4>)
 8009f38:	2000      	movs	r0, #0
 8009f3a:	f7f6 f9b5 	bl	80002a8 <__aeabi_dsub>
 8009f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f42:	f7f6 fddb 	bl	8000afc <__aeabi_dcmplt>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f040 8095 	bne.w	800a076 <_dtoa_r+0x6be>
 8009f4c:	42a6      	cmp	r6, r4
 8009f4e:	f43f af50 	beq.w	8009df2 <_dtoa_r+0x43a>
 8009f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f56:	4b0a      	ldr	r3, [pc, #40]	@ (8009f80 <_dtoa_r+0x5c8>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f7f6 fb5d 	bl	8000618 <__aeabi_dmul>
 8009f5e:	4b08      	ldr	r3, [pc, #32]	@ (8009f80 <_dtoa_r+0x5c8>)
 8009f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f64:	2200      	movs	r2, #0
 8009f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f6a:	f7f6 fb55 	bl	8000618 <__aeabi_dmul>
 8009f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f72:	e7c4      	b.n	8009efe <_dtoa_r+0x546>
 8009f74:	0800dc00 	.word	0x0800dc00
 8009f78:	0800dbd8 	.word	0x0800dbd8
 8009f7c:	3ff00000 	.word	0x3ff00000
 8009f80:	40240000 	.word	0x40240000
 8009f84:	401c0000 	.word	0x401c0000
 8009f88:	40140000 	.word	0x40140000
 8009f8c:	3fe00000 	.word	0x3fe00000
 8009f90:	4631      	mov	r1, r6
 8009f92:	4628      	mov	r0, r5
 8009f94:	f7f6 fb40 	bl	8000618 <__aeabi_dmul>
 8009f98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009f9e:	4656      	mov	r6, sl
 8009fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fa4:	f7f6 fde8 	bl	8000b78 <__aeabi_d2iz>
 8009fa8:	4605      	mov	r5, r0
 8009faa:	f7f6 facb 	bl	8000544 <__aeabi_i2d>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb6:	f7f6 f977 	bl	80002a8 <__aeabi_dsub>
 8009fba:	3530      	adds	r5, #48	@ 0x30
 8009fbc:	f806 5b01 	strb.w	r5, [r6], #1
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	42a6      	cmp	r6, r4
 8009fc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fca:	f04f 0200 	mov.w	r2, #0
 8009fce:	d124      	bne.n	800a01a <_dtoa_r+0x662>
 8009fd0:	4bac      	ldr	r3, [pc, #688]	@ (800a284 <_dtoa_r+0x8cc>)
 8009fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fd6:	f7f6 f969 	bl	80002ac <__adddf3>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe2:	f7f6 fda9 	bl	8000b38 <__aeabi_dcmpgt>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d145      	bne.n	800a076 <_dtoa_r+0x6be>
 8009fea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fee:	49a5      	ldr	r1, [pc, #660]	@ (800a284 <_dtoa_r+0x8cc>)
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f7f6 f959 	bl	80002a8 <__aeabi_dsub>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ffe:	f7f6 fd7d 	bl	8000afc <__aeabi_dcmplt>
 800a002:	2800      	cmp	r0, #0
 800a004:	f43f aef5 	beq.w	8009df2 <_dtoa_r+0x43a>
 800a008:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a00a:	1e73      	subs	r3, r6, #1
 800a00c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a00e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a012:	2b30      	cmp	r3, #48	@ 0x30
 800a014:	d0f8      	beq.n	800a008 <_dtoa_r+0x650>
 800a016:	9f04      	ldr	r7, [sp, #16]
 800a018:	e73e      	b.n	8009e98 <_dtoa_r+0x4e0>
 800a01a:	4b9b      	ldr	r3, [pc, #620]	@ (800a288 <_dtoa_r+0x8d0>)
 800a01c:	f7f6 fafc 	bl	8000618 <__aeabi_dmul>
 800a020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a024:	e7bc      	b.n	8009fa0 <_dtoa_r+0x5e8>
 800a026:	d10c      	bne.n	800a042 <_dtoa_r+0x68a>
 800a028:	4b98      	ldr	r3, [pc, #608]	@ (800a28c <_dtoa_r+0x8d4>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a030:	f7f6 faf2 	bl	8000618 <__aeabi_dmul>
 800a034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a038:	f7f6 fd74 	bl	8000b24 <__aeabi_dcmpge>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	f000 8157 	beq.w	800a2f0 <_dtoa_r+0x938>
 800a042:	2400      	movs	r4, #0
 800a044:	4625      	mov	r5, r4
 800a046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a048:	43db      	mvns	r3, r3
 800a04a:	9304      	str	r3, [sp, #16]
 800a04c:	4656      	mov	r6, sl
 800a04e:	2700      	movs	r7, #0
 800a050:	4621      	mov	r1, r4
 800a052:	4658      	mov	r0, fp
 800a054:	f000 fbb4 	bl	800a7c0 <_Bfree>
 800a058:	2d00      	cmp	r5, #0
 800a05a:	d0dc      	beq.n	800a016 <_dtoa_r+0x65e>
 800a05c:	b12f      	cbz	r7, 800a06a <_dtoa_r+0x6b2>
 800a05e:	42af      	cmp	r7, r5
 800a060:	d003      	beq.n	800a06a <_dtoa_r+0x6b2>
 800a062:	4639      	mov	r1, r7
 800a064:	4658      	mov	r0, fp
 800a066:	f000 fbab 	bl	800a7c0 <_Bfree>
 800a06a:	4629      	mov	r1, r5
 800a06c:	4658      	mov	r0, fp
 800a06e:	f000 fba7 	bl	800a7c0 <_Bfree>
 800a072:	e7d0      	b.n	800a016 <_dtoa_r+0x65e>
 800a074:	9704      	str	r7, [sp, #16]
 800a076:	4633      	mov	r3, r6
 800a078:	461e      	mov	r6, r3
 800a07a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a07e:	2a39      	cmp	r2, #57	@ 0x39
 800a080:	d107      	bne.n	800a092 <_dtoa_r+0x6da>
 800a082:	459a      	cmp	sl, r3
 800a084:	d1f8      	bne.n	800a078 <_dtoa_r+0x6c0>
 800a086:	9a04      	ldr	r2, [sp, #16]
 800a088:	3201      	adds	r2, #1
 800a08a:	9204      	str	r2, [sp, #16]
 800a08c:	2230      	movs	r2, #48	@ 0x30
 800a08e:	f88a 2000 	strb.w	r2, [sl]
 800a092:	781a      	ldrb	r2, [r3, #0]
 800a094:	3201      	adds	r2, #1
 800a096:	701a      	strb	r2, [r3, #0]
 800a098:	e7bd      	b.n	800a016 <_dtoa_r+0x65e>
 800a09a:	4b7b      	ldr	r3, [pc, #492]	@ (800a288 <_dtoa_r+0x8d0>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	f7f6 fabb 	bl	8000618 <__aeabi_dmul>
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	f7f6 fd1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	f43f aebb 	beq.w	8009e2a <_dtoa_r+0x472>
 800a0b4:	e6f0      	b.n	8009e98 <_dtoa_r+0x4e0>
 800a0b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0b8:	2a00      	cmp	r2, #0
 800a0ba:	f000 80db 	beq.w	800a274 <_dtoa_r+0x8bc>
 800a0be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0c0:	2a01      	cmp	r2, #1
 800a0c2:	f300 80bf 	bgt.w	800a244 <_dtoa_r+0x88c>
 800a0c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a0c8:	2a00      	cmp	r2, #0
 800a0ca:	f000 80b7 	beq.w	800a23c <_dtoa_r+0x884>
 800a0ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0d4:	4646      	mov	r6, r8
 800a0d6:	9a08      	ldr	r2, [sp, #32]
 800a0d8:	2101      	movs	r1, #1
 800a0da:	441a      	add	r2, r3
 800a0dc:	4658      	mov	r0, fp
 800a0de:	4498      	add	r8, r3
 800a0e0:	9208      	str	r2, [sp, #32]
 800a0e2:	f000 fc21 	bl	800a928 <__i2b>
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	b15e      	cbz	r6, 800a102 <_dtoa_r+0x74a>
 800a0ea:	9b08      	ldr	r3, [sp, #32]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd08      	ble.n	800a102 <_dtoa_r+0x74a>
 800a0f0:	42b3      	cmp	r3, r6
 800a0f2:	9a08      	ldr	r2, [sp, #32]
 800a0f4:	bfa8      	it	ge
 800a0f6:	4633      	movge	r3, r6
 800a0f8:	eba8 0803 	sub.w	r8, r8, r3
 800a0fc:	1af6      	subs	r6, r6, r3
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	9308      	str	r3, [sp, #32]
 800a102:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a104:	b1f3      	cbz	r3, 800a144 <_dtoa_r+0x78c>
 800a106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 80b7 	beq.w	800a27c <_dtoa_r+0x8c4>
 800a10e:	b18c      	cbz	r4, 800a134 <_dtoa_r+0x77c>
 800a110:	4629      	mov	r1, r5
 800a112:	4622      	mov	r2, r4
 800a114:	4658      	mov	r0, fp
 800a116:	f000 fcc7 	bl	800aaa8 <__pow5mult>
 800a11a:	464a      	mov	r2, r9
 800a11c:	4601      	mov	r1, r0
 800a11e:	4605      	mov	r5, r0
 800a120:	4658      	mov	r0, fp
 800a122:	f000 fc17 	bl	800a954 <__multiply>
 800a126:	4649      	mov	r1, r9
 800a128:	9004      	str	r0, [sp, #16]
 800a12a:	4658      	mov	r0, fp
 800a12c:	f000 fb48 	bl	800a7c0 <_Bfree>
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	4699      	mov	r9, r3
 800a134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a136:	1b1a      	subs	r2, r3, r4
 800a138:	d004      	beq.n	800a144 <_dtoa_r+0x78c>
 800a13a:	4649      	mov	r1, r9
 800a13c:	4658      	mov	r0, fp
 800a13e:	f000 fcb3 	bl	800aaa8 <__pow5mult>
 800a142:	4681      	mov	r9, r0
 800a144:	2101      	movs	r1, #1
 800a146:	4658      	mov	r0, fp
 800a148:	f000 fbee 	bl	800a928 <__i2b>
 800a14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a14e:	4604      	mov	r4, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 81cf 	beq.w	800a4f4 <_dtoa_r+0xb3c>
 800a156:	461a      	mov	r2, r3
 800a158:	4601      	mov	r1, r0
 800a15a:	4658      	mov	r0, fp
 800a15c:	f000 fca4 	bl	800aaa8 <__pow5mult>
 800a160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a162:	2b01      	cmp	r3, #1
 800a164:	4604      	mov	r4, r0
 800a166:	f300 8095 	bgt.w	800a294 <_dtoa_r+0x8dc>
 800a16a:	9b02      	ldr	r3, [sp, #8]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f040 8087 	bne.w	800a280 <_dtoa_r+0x8c8>
 800a172:	9b03      	ldr	r3, [sp, #12]
 800a174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f040 8089 	bne.w	800a290 <_dtoa_r+0x8d8>
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a184:	0d1b      	lsrs	r3, r3, #20
 800a186:	051b      	lsls	r3, r3, #20
 800a188:	b12b      	cbz	r3, 800a196 <_dtoa_r+0x7de>
 800a18a:	9b08      	ldr	r3, [sp, #32]
 800a18c:	3301      	adds	r3, #1
 800a18e:	9308      	str	r3, [sp, #32]
 800a190:	f108 0801 	add.w	r8, r8, #1
 800a194:	2301      	movs	r3, #1
 800a196:	930a      	str	r3, [sp, #40]	@ 0x28
 800a198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 81b0 	beq.w	800a500 <_dtoa_r+0xb48>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1a6:	6918      	ldr	r0, [r3, #16]
 800a1a8:	f000 fb72 	bl	800a890 <__hi0bits>
 800a1ac:	f1c0 0020 	rsb	r0, r0, #32
 800a1b0:	9b08      	ldr	r3, [sp, #32]
 800a1b2:	4418      	add	r0, r3
 800a1b4:	f010 001f 	ands.w	r0, r0, #31
 800a1b8:	d077      	beq.n	800a2aa <_dtoa_r+0x8f2>
 800a1ba:	f1c0 0320 	rsb	r3, r0, #32
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	dd6b      	ble.n	800a29a <_dtoa_r+0x8e2>
 800a1c2:	9b08      	ldr	r3, [sp, #32]
 800a1c4:	f1c0 001c 	rsb	r0, r0, #28
 800a1c8:	4403      	add	r3, r0
 800a1ca:	4480      	add	r8, r0
 800a1cc:	4406      	add	r6, r0
 800a1ce:	9308      	str	r3, [sp, #32]
 800a1d0:	f1b8 0f00 	cmp.w	r8, #0
 800a1d4:	dd05      	ble.n	800a1e2 <_dtoa_r+0x82a>
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	4642      	mov	r2, r8
 800a1da:	4658      	mov	r0, fp
 800a1dc:	f000 fcbe 	bl	800ab5c <__lshift>
 800a1e0:	4681      	mov	r9, r0
 800a1e2:	9b08      	ldr	r3, [sp, #32]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	dd05      	ble.n	800a1f4 <_dtoa_r+0x83c>
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4658      	mov	r0, fp
 800a1ee:	f000 fcb5 	bl	800ab5c <__lshift>
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d059      	beq.n	800a2ae <_dtoa_r+0x8f6>
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	4648      	mov	r0, r9
 800a1fe:	f000 fd19 	bl	800ac34 <__mcmp>
 800a202:	2800      	cmp	r0, #0
 800a204:	da53      	bge.n	800a2ae <_dtoa_r+0x8f6>
 800a206:	1e7b      	subs	r3, r7, #1
 800a208:	9304      	str	r3, [sp, #16]
 800a20a:	4649      	mov	r1, r9
 800a20c:	2300      	movs	r3, #0
 800a20e:	220a      	movs	r2, #10
 800a210:	4658      	mov	r0, fp
 800a212:	f000 faf7 	bl	800a804 <__multadd>
 800a216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a218:	4681      	mov	r9, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8172 	beq.w	800a504 <_dtoa_r+0xb4c>
 800a220:	2300      	movs	r3, #0
 800a222:	4629      	mov	r1, r5
 800a224:	220a      	movs	r2, #10
 800a226:	4658      	mov	r0, fp
 800a228:	f000 faec 	bl	800a804 <__multadd>
 800a22c:	9b00      	ldr	r3, [sp, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	4605      	mov	r5, r0
 800a232:	dc67      	bgt.n	800a304 <_dtoa_r+0x94c>
 800a234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a236:	2b02      	cmp	r3, #2
 800a238:	dc41      	bgt.n	800a2be <_dtoa_r+0x906>
 800a23a:	e063      	b.n	800a304 <_dtoa_r+0x94c>
 800a23c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a23e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a242:	e746      	b.n	800a0d2 <_dtoa_r+0x71a>
 800a244:	9b07      	ldr	r3, [sp, #28]
 800a246:	1e5c      	subs	r4, r3, #1
 800a248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a24a:	42a3      	cmp	r3, r4
 800a24c:	bfbf      	itttt	lt
 800a24e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a250:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a252:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a254:	1ae3      	sublt	r3, r4, r3
 800a256:	bfb4      	ite	lt
 800a258:	18d2      	addlt	r2, r2, r3
 800a25a:	1b1c      	subge	r4, r3, r4
 800a25c:	9b07      	ldr	r3, [sp, #28]
 800a25e:	bfbc      	itt	lt
 800a260:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a262:	2400      	movlt	r4, #0
 800a264:	2b00      	cmp	r3, #0
 800a266:	bfb5      	itete	lt
 800a268:	eba8 0603 	sublt.w	r6, r8, r3
 800a26c:	9b07      	ldrge	r3, [sp, #28]
 800a26e:	2300      	movlt	r3, #0
 800a270:	4646      	movge	r6, r8
 800a272:	e730      	b.n	800a0d6 <_dtoa_r+0x71e>
 800a274:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a276:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a278:	4646      	mov	r6, r8
 800a27a:	e735      	b.n	800a0e8 <_dtoa_r+0x730>
 800a27c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a27e:	e75c      	b.n	800a13a <_dtoa_r+0x782>
 800a280:	2300      	movs	r3, #0
 800a282:	e788      	b.n	800a196 <_dtoa_r+0x7de>
 800a284:	3fe00000 	.word	0x3fe00000
 800a288:	40240000 	.word	0x40240000
 800a28c:	40140000 	.word	0x40140000
 800a290:	9b02      	ldr	r3, [sp, #8]
 800a292:	e780      	b.n	800a196 <_dtoa_r+0x7de>
 800a294:	2300      	movs	r3, #0
 800a296:	930a      	str	r3, [sp, #40]	@ 0x28
 800a298:	e782      	b.n	800a1a0 <_dtoa_r+0x7e8>
 800a29a:	d099      	beq.n	800a1d0 <_dtoa_r+0x818>
 800a29c:	9a08      	ldr	r2, [sp, #32]
 800a29e:	331c      	adds	r3, #28
 800a2a0:	441a      	add	r2, r3
 800a2a2:	4498      	add	r8, r3
 800a2a4:	441e      	add	r6, r3
 800a2a6:	9208      	str	r2, [sp, #32]
 800a2a8:	e792      	b.n	800a1d0 <_dtoa_r+0x818>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	e7f6      	b.n	800a29c <_dtoa_r+0x8e4>
 800a2ae:	9b07      	ldr	r3, [sp, #28]
 800a2b0:	9704      	str	r7, [sp, #16]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dc20      	bgt.n	800a2f8 <_dtoa_r+0x940>
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	dd1e      	ble.n	800a2fc <_dtoa_r+0x944>
 800a2be:	9b00      	ldr	r3, [sp, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f47f aec0 	bne.w	800a046 <_dtoa_r+0x68e>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	2205      	movs	r2, #5
 800a2ca:	4658      	mov	r0, fp
 800a2cc:	f000 fa9a 	bl	800a804 <__multadd>
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	4648      	mov	r0, r9
 800a2d6:	f000 fcad 	bl	800ac34 <__mcmp>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	f77f aeb3 	ble.w	800a046 <_dtoa_r+0x68e>
 800a2e0:	4656      	mov	r6, sl
 800a2e2:	2331      	movs	r3, #49	@ 0x31
 800a2e4:	f806 3b01 	strb.w	r3, [r6], #1
 800a2e8:	9b04      	ldr	r3, [sp, #16]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	9304      	str	r3, [sp, #16]
 800a2ee:	e6ae      	b.n	800a04e <_dtoa_r+0x696>
 800a2f0:	9c07      	ldr	r4, [sp, #28]
 800a2f2:	9704      	str	r7, [sp, #16]
 800a2f4:	4625      	mov	r5, r4
 800a2f6:	e7f3      	b.n	800a2e0 <_dtoa_r+0x928>
 800a2f8:	9b07      	ldr	r3, [sp, #28]
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 8104 	beq.w	800a50c <_dtoa_r+0xb54>
 800a304:	2e00      	cmp	r6, #0
 800a306:	dd05      	ble.n	800a314 <_dtoa_r+0x95c>
 800a308:	4629      	mov	r1, r5
 800a30a:	4632      	mov	r2, r6
 800a30c:	4658      	mov	r0, fp
 800a30e:	f000 fc25 	bl	800ab5c <__lshift>
 800a312:	4605      	mov	r5, r0
 800a314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a316:	2b00      	cmp	r3, #0
 800a318:	d05a      	beq.n	800a3d0 <_dtoa_r+0xa18>
 800a31a:	6869      	ldr	r1, [r5, #4]
 800a31c:	4658      	mov	r0, fp
 800a31e:	f000 fa0f 	bl	800a740 <_Balloc>
 800a322:	4606      	mov	r6, r0
 800a324:	b928      	cbnz	r0, 800a332 <_dtoa_r+0x97a>
 800a326:	4b84      	ldr	r3, [pc, #528]	@ (800a538 <_dtoa_r+0xb80>)
 800a328:	4602      	mov	r2, r0
 800a32a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a32e:	f7ff bb5a 	b.w	80099e6 <_dtoa_r+0x2e>
 800a332:	692a      	ldr	r2, [r5, #16]
 800a334:	3202      	adds	r2, #2
 800a336:	0092      	lsls	r2, r2, #2
 800a338:	f105 010c 	add.w	r1, r5, #12
 800a33c:	300c      	adds	r0, #12
 800a33e:	f7ff faa4 	bl	800988a <memcpy>
 800a342:	2201      	movs	r2, #1
 800a344:	4631      	mov	r1, r6
 800a346:	4658      	mov	r0, fp
 800a348:	f000 fc08 	bl	800ab5c <__lshift>
 800a34c:	f10a 0301 	add.w	r3, sl, #1
 800a350:	9307      	str	r3, [sp, #28]
 800a352:	9b00      	ldr	r3, [sp, #0]
 800a354:	4453      	add	r3, sl
 800a356:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a358:	9b02      	ldr	r3, [sp, #8]
 800a35a:	f003 0301 	and.w	r3, r3, #1
 800a35e:	462f      	mov	r7, r5
 800a360:	930a      	str	r3, [sp, #40]	@ 0x28
 800a362:	4605      	mov	r5, r0
 800a364:	9b07      	ldr	r3, [sp, #28]
 800a366:	4621      	mov	r1, r4
 800a368:	3b01      	subs	r3, #1
 800a36a:	4648      	mov	r0, r9
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	f7ff fa9a 	bl	80098a6 <quorem>
 800a372:	4639      	mov	r1, r7
 800a374:	9002      	str	r0, [sp, #8]
 800a376:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a37a:	4648      	mov	r0, r9
 800a37c:	f000 fc5a 	bl	800ac34 <__mcmp>
 800a380:	462a      	mov	r2, r5
 800a382:	9008      	str	r0, [sp, #32]
 800a384:	4621      	mov	r1, r4
 800a386:	4658      	mov	r0, fp
 800a388:	f000 fc70 	bl	800ac6c <__mdiff>
 800a38c:	68c2      	ldr	r2, [r0, #12]
 800a38e:	4606      	mov	r6, r0
 800a390:	bb02      	cbnz	r2, 800a3d4 <_dtoa_r+0xa1c>
 800a392:	4601      	mov	r1, r0
 800a394:	4648      	mov	r0, r9
 800a396:	f000 fc4d 	bl	800ac34 <__mcmp>
 800a39a:	4602      	mov	r2, r0
 800a39c:	4631      	mov	r1, r6
 800a39e:	4658      	mov	r0, fp
 800a3a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3a2:	f000 fa0d 	bl	800a7c0 <_Bfree>
 800a3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3aa:	9e07      	ldr	r6, [sp, #28]
 800a3ac:	ea43 0102 	orr.w	r1, r3, r2
 800a3b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3b2:	4319      	orrs	r1, r3
 800a3b4:	d110      	bne.n	800a3d8 <_dtoa_r+0xa20>
 800a3b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3ba:	d029      	beq.n	800a410 <_dtoa_r+0xa58>
 800a3bc:	9b08      	ldr	r3, [sp, #32]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	dd02      	ble.n	800a3c8 <_dtoa_r+0xa10>
 800a3c2:	9b02      	ldr	r3, [sp, #8]
 800a3c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a3c8:	9b00      	ldr	r3, [sp, #0]
 800a3ca:	f883 8000 	strb.w	r8, [r3]
 800a3ce:	e63f      	b.n	800a050 <_dtoa_r+0x698>
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	e7bb      	b.n	800a34c <_dtoa_r+0x994>
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	e7e1      	b.n	800a39c <_dtoa_r+0x9e4>
 800a3d8:	9b08      	ldr	r3, [sp, #32]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	db04      	blt.n	800a3e8 <_dtoa_r+0xa30>
 800a3de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3e0:	430b      	orrs	r3, r1
 800a3e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3e4:	430b      	orrs	r3, r1
 800a3e6:	d120      	bne.n	800a42a <_dtoa_r+0xa72>
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	dded      	ble.n	800a3c8 <_dtoa_r+0xa10>
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4658      	mov	r0, fp
 800a3f2:	f000 fbb3 	bl	800ab5c <__lshift>
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	4681      	mov	r9, r0
 800a3fa:	f000 fc1b 	bl	800ac34 <__mcmp>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	dc03      	bgt.n	800a40a <_dtoa_r+0xa52>
 800a402:	d1e1      	bne.n	800a3c8 <_dtoa_r+0xa10>
 800a404:	f018 0f01 	tst.w	r8, #1
 800a408:	d0de      	beq.n	800a3c8 <_dtoa_r+0xa10>
 800a40a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a40e:	d1d8      	bne.n	800a3c2 <_dtoa_r+0xa0a>
 800a410:	9a00      	ldr	r2, [sp, #0]
 800a412:	2339      	movs	r3, #57	@ 0x39
 800a414:	7013      	strb	r3, [r2, #0]
 800a416:	4633      	mov	r3, r6
 800a418:	461e      	mov	r6, r3
 800a41a:	3b01      	subs	r3, #1
 800a41c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a420:	2a39      	cmp	r2, #57	@ 0x39
 800a422:	d052      	beq.n	800a4ca <_dtoa_r+0xb12>
 800a424:	3201      	adds	r2, #1
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	e612      	b.n	800a050 <_dtoa_r+0x698>
 800a42a:	2a00      	cmp	r2, #0
 800a42c:	dd07      	ble.n	800a43e <_dtoa_r+0xa86>
 800a42e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a432:	d0ed      	beq.n	800a410 <_dtoa_r+0xa58>
 800a434:	9a00      	ldr	r2, [sp, #0]
 800a436:	f108 0301 	add.w	r3, r8, #1
 800a43a:	7013      	strb	r3, [r2, #0]
 800a43c:	e608      	b.n	800a050 <_dtoa_r+0x698>
 800a43e:	9b07      	ldr	r3, [sp, #28]
 800a440:	9a07      	ldr	r2, [sp, #28]
 800a442:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a448:	4293      	cmp	r3, r2
 800a44a:	d028      	beq.n	800a49e <_dtoa_r+0xae6>
 800a44c:	4649      	mov	r1, r9
 800a44e:	2300      	movs	r3, #0
 800a450:	220a      	movs	r2, #10
 800a452:	4658      	mov	r0, fp
 800a454:	f000 f9d6 	bl	800a804 <__multadd>
 800a458:	42af      	cmp	r7, r5
 800a45a:	4681      	mov	r9, r0
 800a45c:	f04f 0300 	mov.w	r3, #0
 800a460:	f04f 020a 	mov.w	r2, #10
 800a464:	4639      	mov	r1, r7
 800a466:	4658      	mov	r0, fp
 800a468:	d107      	bne.n	800a47a <_dtoa_r+0xac2>
 800a46a:	f000 f9cb 	bl	800a804 <__multadd>
 800a46e:	4607      	mov	r7, r0
 800a470:	4605      	mov	r5, r0
 800a472:	9b07      	ldr	r3, [sp, #28]
 800a474:	3301      	adds	r3, #1
 800a476:	9307      	str	r3, [sp, #28]
 800a478:	e774      	b.n	800a364 <_dtoa_r+0x9ac>
 800a47a:	f000 f9c3 	bl	800a804 <__multadd>
 800a47e:	4629      	mov	r1, r5
 800a480:	4607      	mov	r7, r0
 800a482:	2300      	movs	r3, #0
 800a484:	220a      	movs	r2, #10
 800a486:	4658      	mov	r0, fp
 800a488:	f000 f9bc 	bl	800a804 <__multadd>
 800a48c:	4605      	mov	r5, r0
 800a48e:	e7f0      	b.n	800a472 <_dtoa_r+0xaba>
 800a490:	9b00      	ldr	r3, [sp, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	bfcc      	ite	gt
 800a496:	461e      	movgt	r6, r3
 800a498:	2601      	movle	r6, #1
 800a49a:	4456      	add	r6, sl
 800a49c:	2700      	movs	r7, #0
 800a49e:	4649      	mov	r1, r9
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	4658      	mov	r0, fp
 800a4a4:	f000 fb5a 	bl	800ab5c <__lshift>
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4681      	mov	r9, r0
 800a4ac:	f000 fbc2 	bl	800ac34 <__mcmp>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	dcb0      	bgt.n	800a416 <_dtoa_r+0xa5e>
 800a4b4:	d102      	bne.n	800a4bc <_dtoa_r+0xb04>
 800a4b6:	f018 0f01 	tst.w	r8, #1
 800a4ba:	d1ac      	bne.n	800a416 <_dtoa_r+0xa5e>
 800a4bc:	4633      	mov	r3, r6
 800a4be:	461e      	mov	r6, r3
 800a4c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4c4:	2a30      	cmp	r2, #48	@ 0x30
 800a4c6:	d0fa      	beq.n	800a4be <_dtoa_r+0xb06>
 800a4c8:	e5c2      	b.n	800a050 <_dtoa_r+0x698>
 800a4ca:	459a      	cmp	sl, r3
 800a4cc:	d1a4      	bne.n	800a418 <_dtoa_r+0xa60>
 800a4ce:	9b04      	ldr	r3, [sp, #16]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	2331      	movs	r3, #49	@ 0x31
 800a4d6:	f88a 3000 	strb.w	r3, [sl]
 800a4da:	e5b9      	b.n	800a050 <_dtoa_r+0x698>
 800a4dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a53c <_dtoa_r+0xb84>
 800a4e2:	b11b      	cbz	r3, 800a4ec <_dtoa_r+0xb34>
 800a4e4:	f10a 0308 	add.w	r3, sl, #8
 800a4e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	4650      	mov	r0, sl
 800a4ee:	b019      	add	sp, #100	@ 0x64
 800a4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	f77f ae37 	ble.w	800a16a <_dtoa_r+0x7b2>
 800a4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a500:	2001      	movs	r0, #1
 800a502:	e655      	b.n	800a1b0 <_dtoa_r+0x7f8>
 800a504:	9b00      	ldr	r3, [sp, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	f77f aed6 	ble.w	800a2b8 <_dtoa_r+0x900>
 800a50c:	4656      	mov	r6, sl
 800a50e:	4621      	mov	r1, r4
 800a510:	4648      	mov	r0, r9
 800a512:	f7ff f9c8 	bl	80098a6 <quorem>
 800a516:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a51a:	f806 8b01 	strb.w	r8, [r6], #1
 800a51e:	9b00      	ldr	r3, [sp, #0]
 800a520:	eba6 020a 	sub.w	r2, r6, sl
 800a524:	4293      	cmp	r3, r2
 800a526:	ddb3      	ble.n	800a490 <_dtoa_r+0xad8>
 800a528:	4649      	mov	r1, r9
 800a52a:	2300      	movs	r3, #0
 800a52c:	220a      	movs	r2, #10
 800a52e:	4658      	mov	r0, fp
 800a530:	f000 f968 	bl	800a804 <__multadd>
 800a534:	4681      	mov	r9, r0
 800a536:	e7ea      	b.n	800a50e <_dtoa_r+0xb56>
 800a538:	0800db5c 	.word	0x0800db5c
 800a53c:	0800dae0 	.word	0x0800dae0

0800a540 <_free_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4605      	mov	r5, r0
 800a544:	2900      	cmp	r1, #0
 800a546:	d041      	beq.n	800a5cc <_free_r+0x8c>
 800a548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a54c:	1f0c      	subs	r4, r1, #4
 800a54e:	2b00      	cmp	r3, #0
 800a550:	bfb8      	it	lt
 800a552:	18e4      	addlt	r4, r4, r3
 800a554:	f000 f8e8 	bl	800a728 <__malloc_lock>
 800a558:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <_free_r+0x90>)
 800a55a:	6813      	ldr	r3, [r2, #0]
 800a55c:	b933      	cbnz	r3, 800a56c <_free_r+0x2c>
 800a55e:	6063      	str	r3, [r4, #4]
 800a560:	6014      	str	r4, [r2, #0]
 800a562:	4628      	mov	r0, r5
 800a564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a568:	f000 b8e4 	b.w	800a734 <__malloc_unlock>
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	d908      	bls.n	800a582 <_free_r+0x42>
 800a570:	6820      	ldr	r0, [r4, #0]
 800a572:	1821      	adds	r1, r4, r0
 800a574:	428b      	cmp	r3, r1
 800a576:	bf01      	itttt	eq
 800a578:	6819      	ldreq	r1, [r3, #0]
 800a57a:	685b      	ldreq	r3, [r3, #4]
 800a57c:	1809      	addeq	r1, r1, r0
 800a57e:	6021      	streq	r1, [r4, #0]
 800a580:	e7ed      	b.n	800a55e <_free_r+0x1e>
 800a582:	461a      	mov	r2, r3
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	b10b      	cbz	r3, 800a58c <_free_r+0x4c>
 800a588:	42a3      	cmp	r3, r4
 800a58a:	d9fa      	bls.n	800a582 <_free_r+0x42>
 800a58c:	6811      	ldr	r1, [r2, #0]
 800a58e:	1850      	adds	r0, r2, r1
 800a590:	42a0      	cmp	r0, r4
 800a592:	d10b      	bne.n	800a5ac <_free_r+0x6c>
 800a594:	6820      	ldr	r0, [r4, #0]
 800a596:	4401      	add	r1, r0
 800a598:	1850      	adds	r0, r2, r1
 800a59a:	4283      	cmp	r3, r0
 800a59c:	6011      	str	r1, [r2, #0]
 800a59e:	d1e0      	bne.n	800a562 <_free_r+0x22>
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	6053      	str	r3, [r2, #4]
 800a5a6:	4408      	add	r0, r1
 800a5a8:	6010      	str	r0, [r2, #0]
 800a5aa:	e7da      	b.n	800a562 <_free_r+0x22>
 800a5ac:	d902      	bls.n	800a5b4 <_free_r+0x74>
 800a5ae:	230c      	movs	r3, #12
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	e7d6      	b.n	800a562 <_free_r+0x22>
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	1821      	adds	r1, r4, r0
 800a5b8:	428b      	cmp	r3, r1
 800a5ba:	bf04      	itt	eq
 800a5bc:	6819      	ldreq	r1, [r3, #0]
 800a5be:	685b      	ldreq	r3, [r3, #4]
 800a5c0:	6063      	str	r3, [r4, #4]
 800a5c2:	bf04      	itt	eq
 800a5c4:	1809      	addeq	r1, r1, r0
 800a5c6:	6021      	streq	r1, [r4, #0]
 800a5c8:	6054      	str	r4, [r2, #4]
 800a5ca:	e7ca      	b.n	800a562 <_free_r+0x22>
 800a5cc:	bd38      	pop	{r3, r4, r5, pc}
 800a5ce:	bf00      	nop
 800a5d0:	200013bc 	.word	0x200013bc

0800a5d4 <malloc>:
 800a5d4:	4b02      	ldr	r3, [pc, #8]	@ (800a5e0 <malloc+0xc>)
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	6818      	ldr	r0, [r3, #0]
 800a5da:	f000 b825 	b.w	800a628 <_malloc_r>
 800a5de:	bf00      	nop
 800a5e0:	20000044 	.word	0x20000044

0800a5e4 <sbrk_aligned>:
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	4e0f      	ldr	r6, [pc, #60]	@ (800a624 <sbrk_aligned+0x40>)
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	6831      	ldr	r1, [r6, #0]
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	b911      	cbnz	r1, 800a5f6 <sbrk_aligned+0x12>
 800a5f0:	f000 fe2c 	bl	800b24c <_sbrk_r>
 800a5f4:	6030      	str	r0, [r6, #0]
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f000 fe27 	bl	800b24c <_sbrk_r>
 800a5fe:	1c43      	adds	r3, r0, #1
 800a600:	d103      	bne.n	800a60a <sbrk_aligned+0x26>
 800a602:	f04f 34ff 	mov.w	r4, #4294967295
 800a606:	4620      	mov	r0, r4
 800a608:	bd70      	pop	{r4, r5, r6, pc}
 800a60a:	1cc4      	adds	r4, r0, #3
 800a60c:	f024 0403 	bic.w	r4, r4, #3
 800a610:	42a0      	cmp	r0, r4
 800a612:	d0f8      	beq.n	800a606 <sbrk_aligned+0x22>
 800a614:	1a21      	subs	r1, r4, r0
 800a616:	4628      	mov	r0, r5
 800a618:	f000 fe18 	bl	800b24c <_sbrk_r>
 800a61c:	3001      	adds	r0, #1
 800a61e:	d1f2      	bne.n	800a606 <sbrk_aligned+0x22>
 800a620:	e7ef      	b.n	800a602 <sbrk_aligned+0x1e>
 800a622:	bf00      	nop
 800a624:	200013b8 	.word	0x200013b8

0800a628 <_malloc_r>:
 800a628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a62c:	1ccd      	adds	r5, r1, #3
 800a62e:	f025 0503 	bic.w	r5, r5, #3
 800a632:	3508      	adds	r5, #8
 800a634:	2d0c      	cmp	r5, #12
 800a636:	bf38      	it	cc
 800a638:	250c      	movcc	r5, #12
 800a63a:	2d00      	cmp	r5, #0
 800a63c:	4606      	mov	r6, r0
 800a63e:	db01      	blt.n	800a644 <_malloc_r+0x1c>
 800a640:	42a9      	cmp	r1, r5
 800a642:	d904      	bls.n	800a64e <_malloc_r+0x26>
 800a644:	230c      	movs	r3, #12
 800a646:	6033      	str	r3, [r6, #0]
 800a648:	2000      	movs	r0, #0
 800a64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a64e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a724 <_malloc_r+0xfc>
 800a652:	f000 f869 	bl	800a728 <__malloc_lock>
 800a656:	f8d8 3000 	ldr.w	r3, [r8]
 800a65a:	461c      	mov	r4, r3
 800a65c:	bb44      	cbnz	r4, 800a6b0 <_malloc_r+0x88>
 800a65e:	4629      	mov	r1, r5
 800a660:	4630      	mov	r0, r6
 800a662:	f7ff ffbf 	bl	800a5e4 <sbrk_aligned>
 800a666:	1c43      	adds	r3, r0, #1
 800a668:	4604      	mov	r4, r0
 800a66a:	d158      	bne.n	800a71e <_malloc_r+0xf6>
 800a66c:	f8d8 4000 	ldr.w	r4, [r8]
 800a670:	4627      	mov	r7, r4
 800a672:	2f00      	cmp	r7, #0
 800a674:	d143      	bne.n	800a6fe <_malloc_r+0xd6>
 800a676:	2c00      	cmp	r4, #0
 800a678:	d04b      	beq.n	800a712 <_malloc_r+0xea>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	4639      	mov	r1, r7
 800a67e:	4630      	mov	r0, r6
 800a680:	eb04 0903 	add.w	r9, r4, r3
 800a684:	f000 fde2 	bl	800b24c <_sbrk_r>
 800a688:	4581      	cmp	r9, r0
 800a68a:	d142      	bne.n	800a712 <_malloc_r+0xea>
 800a68c:	6821      	ldr	r1, [r4, #0]
 800a68e:	1a6d      	subs	r5, r5, r1
 800a690:	4629      	mov	r1, r5
 800a692:	4630      	mov	r0, r6
 800a694:	f7ff ffa6 	bl	800a5e4 <sbrk_aligned>
 800a698:	3001      	adds	r0, #1
 800a69a:	d03a      	beq.n	800a712 <_malloc_r+0xea>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	442b      	add	r3, r5
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	bb62      	cbnz	r2, 800a704 <_malloc_r+0xdc>
 800a6aa:	f8c8 7000 	str.w	r7, [r8]
 800a6ae:	e00f      	b.n	800a6d0 <_malloc_r+0xa8>
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	1b52      	subs	r2, r2, r5
 800a6b4:	d420      	bmi.n	800a6f8 <_malloc_r+0xd0>
 800a6b6:	2a0b      	cmp	r2, #11
 800a6b8:	d917      	bls.n	800a6ea <_malloc_r+0xc2>
 800a6ba:	1961      	adds	r1, r4, r5
 800a6bc:	42a3      	cmp	r3, r4
 800a6be:	6025      	str	r5, [r4, #0]
 800a6c0:	bf18      	it	ne
 800a6c2:	6059      	strne	r1, [r3, #4]
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	bf08      	it	eq
 800a6c8:	f8c8 1000 	streq.w	r1, [r8]
 800a6cc:	5162      	str	r2, [r4, r5]
 800a6ce:	604b      	str	r3, [r1, #4]
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f000 f82f 	bl	800a734 <__malloc_unlock>
 800a6d6:	f104 000b 	add.w	r0, r4, #11
 800a6da:	1d23      	adds	r3, r4, #4
 800a6dc:	f020 0007 	bic.w	r0, r0, #7
 800a6e0:	1ac2      	subs	r2, r0, r3
 800a6e2:	bf1c      	itt	ne
 800a6e4:	1a1b      	subne	r3, r3, r0
 800a6e6:	50a3      	strne	r3, [r4, r2]
 800a6e8:	e7af      	b.n	800a64a <_malloc_r+0x22>
 800a6ea:	6862      	ldr	r2, [r4, #4]
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	bf0c      	ite	eq
 800a6f0:	f8c8 2000 	streq.w	r2, [r8]
 800a6f4:	605a      	strne	r2, [r3, #4]
 800a6f6:	e7eb      	b.n	800a6d0 <_malloc_r+0xa8>
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	6864      	ldr	r4, [r4, #4]
 800a6fc:	e7ae      	b.n	800a65c <_malloc_r+0x34>
 800a6fe:	463c      	mov	r4, r7
 800a700:	687f      	ldr	r7, [r7, #4]
 800a702:	e7b6      	b.n	800a672 <_malloc_r+0x4a>
 800a704:	461a      	mov	r2, r3
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	42a3      	cmp	r3, r4
 800a70a:	d1fb      	bne.n	800a704 <_malloc_r+0xdc>
 800a70c:	2300      	movs	r3, #0
 800a70e:	6053      	str	r3, [r2, #4]
 800a710:	e7de      	b.n	800a6d0 <_malloc_r+0xa8>
 800a712:	230c      	movs	r3, #12
 800a714:	6033      	str	r3, [r6, #0]
 800a716:	4630      	mov	r0, r6
 800a718:	f000 f80c 	bl	800a734 <__malloc_unlock>
 800a71c:	e794      	b.n	800a648 <_malloc_r+0x20>
 800a71e:	6005      	str	r5, [r0, #0]
 800a720:	e7d6      	b.n	800a6d0 <_malloc_r+0xa8>
 800a722:	bf00      	nop
 800a724:	200013bc 	.word	0x200013bc

0800a728 <__malloc_lock>:
 800a728:	4801      	ldr	r0, [pc, #4]	@ (800a730 <__malloc_lock+0x8>)
 800a72a:	f7ff b8a4 	b.w	8009876 <__retarget_lock_acquire_recursive>
 800a72e:	bf00      	nop
 800a730:	200013b4 	.word	0x200013b4

0800a734 <__malloc_unlock>:
 800a734:	4801      	ldr	r0, [pc, #4]	@ (800a73c <__malloc_unlock+0x8>)
 800a736:	f7ff b89f 	b.w	8009878 <__retarget_lock_release_recursive>
 800a73a:	bf00      	nop
 800a73c:	200013b4 	.word	0x200013b4

0800a740 <_Balloc>:
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	69c6      	ldr	r6, [r0, #28]
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	b976      	cbnz	r6, 800a768 <_Balloc+0x28>
 800a74a:	2010      	movs	r0, #16
 800a74c:	f7ff ff42 	bl	800a5d4 <malloc>
 800a750:	4602      	mov	r2, r0
 800a752:	61e0      	str	r0, [r4, #28]
 800a754:	b920      	cbnz	r0, 800a760 <_Balloc+0x20>
 800a756:	4b18      	ldr	r3, [pc, #96]	@ (800a7b8 <_Balloc+0x78>)
 800a758:	4818      	ldr	r0, [pc, #96]	@ (800a7bc <_Balloc+0x7c>)
 800a75a:	216b      	movs	r1, #107	@ 0x6b
 800a75c:	f000 fd86 	bl	800b26c <__assert_func>
 800a760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a764:	6006      	str	r6, [r0, #0]
 800a766:	60c6      	str	r6, [r0, #12]
 800a768:	69e6      	ldr	r6, [r4, #28]
 800a76a:	68f3      	ldr	r3, [r6, #12]
 800a76c:	b183      	cbz	r3, 800a790 <_Balloc+0x50>
 800a76e:	69e3      	ldr	r3, [r4, #28]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a776:	b9b8      	cbnz	r0, 800a7a8 <_Balloc+0x68>
 800a778:	2101      	movs	r1, #1
 800a77a:	fa01 f605 	lsl.w	r6, r1, r5
 800a77e:	1d72      	adds	r2, r6, #5
 800a780:	0092      	lsls	r2, r2, #2
 800a782:	4620      	mov	r0, r4
 800a784:	f000 fd90 	bl	800b2a8 <_calloc_r>
 800a788:	b160      	cbz	r0, 800a7a4 <_Balloc+0x64>
 800a78a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a78e:	e00e      	b.n	800a7ae <_Balloc+0x6e>
 800a790:	2221      	movs	r2, #33	@ 0x21
 800a792:	2104      	movs	r1, #4
 800a794:	4620      	mov	r0, r4
 800a796:	f000 fd87 	bl	800b2a8 <_calloc_r>
 800a79a:	69e3      	ldr	r3, [r4, #28]
 800a79c:	60f0      	str	r0, [r6, #12]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1e4      	bne.n	800a76e <_Balloc+0x2e>
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}
 800a7a8:	6802      	ldr	r2, [r0, #0]
 800a7aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7b4:	e7f7      	b.n	800a7a6 <_Balloc+0x66>
 800a7b6:	bf00      	nop
 800a7b8:	0800daed 	.word	0x0800daed
 800a7bc:	0800db6d 	.word	0x0800db6d

0800a7c0 <_Bfree>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	69c6      	ldr	r6, [r0, #28]
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	b976      	cbnz	r6, 800a7e8 <_Bfree+0x28>
 800a7ca:	2010      	movs	r0, #16
 800a7cc:	f7ff ff02 	bl	800a5d4 <malloc>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	61e8      	str	r0, [r5, #28]
 800a7d4:	b920      	cbnz	r0, 800a7e0 <_Bfree+0x20>
 800a7d6:	4b09      	ldr	r3, [pc, #36]	@ (800a7fc <_Bfree+0x3c>)
 800a7d8:	4809      	ldr	r0, [pc, #36]	@ (800a800 <_Bfree+0x40>)
 800a7da:	218f      	movs	r1, #143	@ 0x8f
 800a7dc:	f000 fd46 	bl	800b26c <__assert_func>
 800a7e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7e4:	6006      	str	r6, [r0, #0]
 800a7e6:	60c6      	str	r6, [r0, #12]
 800a7e8:	b13c      	cbz	r4, 800a7fa <_Bfree+0x3a>
 800a7ea:	69eb      	ldr	r3, [r5, #28]
 800a7ec:	6862      	ldr	r2, [r4, #4]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7f4:	6021      	str	r1, [r4, #0]
 800a7f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
 800a7fc:	0800daed 	.word	0x0800daed
 800a800:	0800db6d 	.word	0x0800db6d

0800a804 <__multadd>:
 800a804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a808:	690d      	ldr	r5, [r1, #16]
 800a80a:	4607      	mov	r7, r0
 800a80c:	460c      	mov	r4, r1
 800a80e:	461e      	mov	r6, r3
 800a810:	f101 0c14 	add.w	ip, r1, #20
 800a814:	2000      	movs	r0, #0
 800a816:	f8dc 3000 	ldr.w	r3, [ip]
 800a81a:	b299      	uxth	r1, r3
 800a81c:	fb02 6101 	mla	r1, r2, r1, r6
 800a820:	0c1e      	lsrs	r6, r3, #16
 800a822:	0c0b      	lsrs	r3, r1, #16
 800a824:	fb02 3306 	mla	r3, r2, r6, r3
 800a828:	b289      	uxth	r1, r1
 800a82a:	3001      	adds	r0, #1
 800a82c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a830:	4285      	cmp	r5, r0
 800a832:	f84c 1b04 	str.w	r1, [ip], #4
 800a836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a83a:	dcec      	bgt.n	800a816 <__multadd+0x12>
 800a83c:	b30e      	cbz	r6, 800a882 <__multadd+0x7e>
 800a83e:	68a3      	ldr	r3, [r4, #8]
 800a840:	42ab      	cmp	r3, r5
 800a842:	dc19      	bgt.n	800a878 <__multadd+0x74>
 800a844:	6861      	ldr	r1, [r4, #4]
 800a846:	4638      	mov	r0, r7
 800a848:	3101      	adds	r1, #1
 800a84a:	f7ff ff79 	bl	800a740 <_Balloc>
 800a84e:	4680      	mov	r8, r0
 800a850:	b928      	cbnz	r0, 800a85e <__multadd+0x5a>
 800a852:	4602      	mov	r2, r0
 800a854:	4b0c      	ldr	r3, [pc, #48]	@ (800a888 <__multadd+0x84>)
 800a856:	480d      	ldr	r0, [pc, #52]	@ (800a88c <__multadd+0x88>)
 800a858:	21ba      	movs	r1, #186	@ 0xba
 800a85a:	f000 fd07 	bl	800b26c <__assert_func>
 800a85e:	6922      	ldr	r2, [r4, #16]
 800a860:	3202      	adds	r2, #2
 800a862:	f104 010c 	add.w	r1, r4, #12
 800a866:	0092      	lsls	r2, r2, #2
 800a868:	300c      	adds	r0, #12
 800a86a:	f7ff f80e 	bl	800988a <memcpy>
 800a86e:	4621      	mov	r1, r4
 800a870:	4638      	mov	r0, r7
 800a872:	f7ff ffa5 	bl	800a7c0 <_Bfree>
 800a876:	4644      	mov	r4, r8
 800a878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a87c:	3501      	adds	r5, #1
 800a87e:	615e      	str	r6, [r3, #20]
 800a880:	6125      	str	r5, [r4, #16]
 800a882:	4620      	mov	r0, r4
 800a884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a888:	0800db5c 	.word	0x0800db5c
 800a88c:	0800db6d 	.word	0x0800db6d

0800a890 <__hi0bits>:
 800a890:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a894:	4603      	mov	r3, r0
 800a896:	bf36      	itet	cc
 800a898:	0403      	lslcc	r3, r0, #16
 800a89a:	2000      	movcs	r0, #0
 800a89c:	2010      	movcc	r0, #16
 800a89e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8a2:	bf3c      	itt	cc
 800a8a4:	021b      	lslcc	r3, r3, #8
 800a8a6:	3008      	addcc	r0, #8
 800a8a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8ac:	bf3c      	itt	cc
 800a8ae:	011b      	lslcc	r3, r3, #4
 800a8b0:	3004      	addcc	r0, #4
 800a8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8b6:	bf3c      	itt	cc
 800a8b8:	009b      	lslcc	r3, r3, #2
 800a8ba:	3002      	addcc	r0, #2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	db05      	blt.n	800a8cc <__hi0bits+0x3c>
 800a8c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8c4:	f100 0001 	add.w	r0, r0, #1
 800a8c8:	bf08      	it	eq
 800a8ca:	2020      	moveq	r0, #32
 800a8cc:	4770      	bx	lr

0800a8ce <__lo0bits>:
 800a8ce:	6803      	ldr	r3, [r0, #0]
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	f013 0007 	ands.w	r0, r3, #7
 800a8d6:	d00b      	beq.n	800a8f0 <__lo0bits+0x22>
 800a8d8:	07d9      	lsls	r1, r3, #31
 800a8da:	d421      	bmi.n	800a920 <__lo0bits+0x52>
 800a8dc:	0798      	lsls	r0, r3, #30
 800a8de:	bf49      	itett	mi
 800a8e0:	085b      	lsrmi	r3, r3, #1
 800a8e2:	089b      	lsrpl	r3, r3, #2
 800a8e4:	2001      	movmi	r0, #1
 800a8e6:	6013      	strmi	r3, [r2, #0]
 800a8e8:	bf5c      	itt	pl
 800a8ea:	6013      	strpl	r3, [r2, #0]
 800a8ec:	2002      	movpl	r0, #2
 800a8ee:	4770      	bx	lr
 800a8f0:	b299      	uxth	r1, r3
 800a8f2:	b909      	cbnz	r1, 800a8f8 <__lo0bits+0x2a>
 800a8f4:	0c1b      	lsrs	r3, r3, #16
 800a8f6:	2010      	movs	r0, #16
 800a8f8:	b2d9      	uxtb	r1, r3
 800a8fa:	b909      	cbnz	r1, 800a900 <__lo0bits+0x32>
 800a8fc:	3008      	adds	r0, #8
 800a8fe:	0a1b      	lsrs	r3, r3, #8
 800a900:	0719      	lsls	r1, r3, #28
 800a902:	bf04      	itt	eq
 800a904:	091b      	lsreq	r3, r3, #4
 800a906:	3004      	addeq	r0, #4
 800a908:	0799      	lsls	r1, r3, #30
 800a90a:	bf04      	itt	eq
 800a90c:	089b      	lsreq	r3, r3, #2
 800a90e:	3002      	addeq	r0, #2
 800a910:	07d9      	lsls	r1, r3, #31
 800a912:	d403      	bmi.n	800a91c <__lo0bits+0x4e>
 800a914:	085b      	lsrs	r3, r3, #1
 800a916:	f100 0001 	add.w	r0, r0, #1
 800a91a:	d003      	beq.n	800a924 <__lo0bits+0x56>
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	4770      	bx	lr
 800a920:	2000      	movs	r0, #0
 800a922:	4770      	bx	lr
 800a924:	2020      	movs	r0, #32
 800a926:	4770      	bx	lr

0800a928 <__i2b>:
 800a928:	b510      	push	{r4, lr}
 800a92a:	460c      	mov	r4, r1
 800a92c:	2101      	movs	r1, #1
 800a92e:	f7ff ff07 	bl	800a740 <_Balloc>
 800a932:	4602      	mov	r2, r0
 800a934:	b928      	cbnz	r0, 800a942 <__i2b+0x1a>
 800a936:	4b05      	ldr	r3, [pc, #20]	@ (800a94c <__i2b+0x24>)
 800a938:	4805      	ldr	r0, [pc, #20]	@ (800a950 <__i2b+0x28>)
 800a93a:	f240 1145 	movw	r1, #325	@ 0x145
 800a93e:	f000 fc95 	bl	800b26c <__assert_func>
 800a942:	2301      	movs	r3, #1
 800a944:	6144      	str	r4, [r0, #20]
 800a946:	6103      	str	r3, [r0, #16]
 800a948:	bd10      	pop	{r4, pc}
 800a94a:	bf00      	nop
 800a94c:	0800db5c 	.word	0x0800db5c
 800a950:	0800db6d 	.word	0x0800db6d

0800a954 <__multiply>:
 800a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	4614      	mov	r4, r2
 800a95a:	690a      	ldr	r2, [r1, #16]
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	429a      	cmp	r2, r3
 800a960:	bfa8      	it	ge
 800a962:	4623      	movge	r3, r4
 800a964:	460f      	mov	r7, r1
 800a966:	bfa4      	itt	ge
 800a968:	460c      	movge	r4, r1
 800a96a:	461f      	movge	r7, r3
 800a96c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a970:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a974:	68a3      	ldr	r3, [r4, #8]
 800a976:	6861      	ldr	r1, [r4, #4]
 800a978:	eb0a 0609 	add.w	r6, sl, r9
 800a97c:	42b3      	cmp	r3, r6
 800a97e:	b085      	sub	sp, #20
 800a980:	bfb8      	it	lt
 800a982:	3101      	addlt	r1, #1
 800a984:	f7ff fedc 	bl	800a740 <_Balloc>
 800a988:	b930      	cbnz	r0, 800a998 <__multiply+0x44>
 800a98a:	4602      	mov	r2, r0
 800a98c:	4b44      	ldr	r3, [pc, #272]	@ (800aaa0 <__multiply+0x14c>)
 800a98e:	4845      	ldr	r0, [pc, #276]	@ (800aaa4 <__multiply+0x150>)
 800a990:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a994:	f000 fc6a 	bl	800b26c <__assert_func>
 800a998:	f100 0514 	add.w	r5, r0, #20
 800a99c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	4543      	cmp	r3, r8
 800a9a6:	d321      	bcc.n	800a9ec <__multiply+0x98>
 800a9a8:	f107 0114 	add.w	r1, r7, #20
 800a9ac:	f104 0214 	add.w	r2, r4, #20
 800a9b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a9b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a9b8:	9302      	str	r3, [sp, #8]
 800a9ba:	1b13      	subs	r3, r2, r4
 800a9bc:	3b15      	subs	r3, #21
 800a9be:	f023 0303 	bic.w	r3, r3, #3
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	f104 0715 	add.w	r7, r4, #21
 800a9c8:	42ba      	cmp	r2, r7
 800a9ca:	bf38      	it	cc
 800a9cc:	2304      	movcc	r3, #4
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	9103      	str	r1, [sp, #12]
 800a9d4:	428b      	cmp	r3, r1
 800a9d6:	d80c      	bhi.n	800a9f2 <__multiply+0x9e>
 800a9d8:	2e00      	cmp	r6, #0
 800a9da:	dd03      	ble.n	800a9e4 <__multiply+0x90>
 800a9dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d05b      	beq.n	800aa9c <__multiply+0x148>
 800a9e4:	6106      	str	r6, [r0, #16]
 800a9e6:	b005      	add	sp, #20
 800a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ec:	f843 2b04 	str.w	r2, [r3], #4
 800a9f0:	e7d8      	b.n	800a9a4 <__multiply+0x50>
 800a9f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9f6:	f1ba 0f00 	cmp.w	sl, #0
 800a9fa:	d024      	beq.n	800aa46 <__multiply+0xf2>
 800a9fc:	f104 0e14 	add.w	lr, r4, #20
 800aa00:	46a9      	mov	r9, r5
 800aa02:	f04f 0c00 	mov.w	ip, #0
 800aa06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa0a:	f8d9 3000 	ldr.w	r3, [r9]
 800aa0e:	fa1f fb87 	uxth.w	fp, r7
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa1c:	f8d9 7000 	ldr.w	r7, [r9]
 800aa20:	4463      	add	r3, ip
 800aa22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa26:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa34:	4572      	cmp	r2, lr
 800aa36:	f849 3b04 	str.w	r3, [r9], #4
 800aa3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa3e:	d8e2      	bhi.n	800aa06 <__multiply+0xb2>
 800aa40:	9b01      	ldr	r3, [sp, #4]
 800aa42:	f845 c003 	str.w	ip, [r5, r3]
 800aa46:	9b03      	ldr	r3, [sp, #12]
 800aa48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa4c:	3104      	adds	r1, #4
 800aa4e:	f1b9 0f00 	cmp.w	r9, #0
 800aa52:	d021      	beq.n	800aa98 <__multiply+0x144>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	f104 0c14 	add.w	ip, r4, #20
 800aa5a:	46ae      	mov	lr, r5
 800aa5c:	f04f 0a00 	mov.w	sl, #0
 800aa60:	f8bc b000 	ldrh.w	fp, [ip]
 800aa64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa68:	fb09 770b 	mla	r7, r9, fp, r7
 800aa6c:	4457      	add	r7, sl
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa74:	f84e 3b04 	str.w	r3, [lr], #4
 800aa78:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa80:	f8be 3000 	ldrh.w	r3, [lr]
 800aa84:	fb09 330a 	mla	r3, r9, sl, r3
 800aa88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa8c:	4562      	cmp	r2, ip
 800aa8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa92:	d8e5      	bhi.n	800aa60 <__multiply+0x10c>
 800aa94:	9f01      	ldr	r7, [sp, #4]
 800aa96:	51eb      	str	r3, [r5, r7]
 800aa98:	3504      	adds	r5, #4
 800aa9a:	e799      	b.n	800a9d0 <__multiply+0x7c>
 800aa9c:	3e01      	subs	r6, #1
 800aa9e:	e79b      	b.n	800a9d8 <__multiply+0x84>
 800aaa0:	0800db5c 	.word	0x0800db5c
 800aaa4:	0800db6d 	.word	0x0800db6d

0800aaa8 <__pow5mult>:
 800aaa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaac:	4615      	mov	r5, r2
 800aaae:	f012 0203 	ands.w	r2, r2, #3
 800aab2:	4607      	mov	r7, r0
 800aab4:	460e      	mov	r6, r1
 800aab6:	d007      	beq.n	800aac8 <__pow5mult+0x20>
 800aab8:	4c25      	ldr	r4, [pc, #148]	@ (800ab50 <__pow5mult+0xa8>)
 800aaba:	3a01      	subs	r2, #1
 800aabc:	2300      	movs	r3, #0
 800aabe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aac2:	f7ff fe9f 	bl	800a804 <__multadd>
 800aac6:	4606      	mov	r6, r0
 800aac8:	10ad      	asrs	r5, r5, #2
 800aaca:	d03d      	beq.n	800ab48 <__pow5mult+0xa0>
 800aacc:	69fc      	ldr	r4, [r7, #28]
 800aace:	b97c      	cbnz	r4, 800aaf0 <__pow5mult+0x48>
 800aad0:	2010      	movs	r0, #16
 800aad2:	f7ff fd7f 	bl	800a5d4 <malloc>
 800aad6:	4602      	mov	r2, r0
 800aad8:	61f8      	str	r0, [r7, #28]
 800aada:	b928      	cbnz	r0, 800aae8 <__pow5mult+0x40>
 800aadc:	4b1d      	ldr	r3, [pc, #116]	@ (800ab54 <__pow5mult+0xac>)
 800aade:	481e      	ldr	r0, [pc, #120]	@ (800ab58 <__pow5mult+0xb0>)
 800aae0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aae4:	f000 fbc2 	bl	800b26c <__assert_func>
 800aae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aaec:	6004      	str	r4, [r0, #0]
 800aaee:	60c4      	str	r4, [r0, #12]
 800aaf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aaf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aaf8:	b94c      	cbnz	r4, 800ab0e <__pow5mult+0x66>
 800aafa:	f240 2171 	movw	r1, #625	@ 0x271
 800aafe:	4638      	mov	r0, r7
 800ab00:	f7ff ff12 	bl	800a928 <__i2b>
 800ab04:	2300      	movs	r3, #0
 800ab06:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	6003      	str	r3, [r0, #0]
 800ab0e:	f04f 0900 	mov.w	r9, #0
 800ab12:	07eb      	lsls	r3, r5, #31
 800ab14:	d50a      	bpl.n	800ab2c <__pow5mult+0x84>
 800ab16:	4631      	mov	r1, r6
 800ab18:	4622      	mov	r2, r4
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	f7ff ff1a 	bl	800a954 <__multiply>
 800ab20:	4631      	mov	r1, r6
 800ab22:	4680      	mov	r8, r0
 800ab24:	4638      	mov	r0, r7
 800ab26:	f7ff fe4b 	bl	800a7c0 <_Bfree>
 800ab2a:	4646      	mov	r6, r8
 800ab2c:	106d      	asrs	r5, r5, #1
 800ab2e:	d00b      	beq.n	800ab48 <__pow5mult+0xa0>
 800ab30:	6820      	ldr	r0, [r4, #0]
 800ab32:	b938      	cbnz	r0, 800ab44 <__pow5mult+0x9c>
 800ab34:	4622      	mov	r2, r4
 800ab36:	4621      	mov	r1, r4
 800ab38:	4638      	mov	r0, r7
 800ab3a:	f7ff ff0b 	bl	800a954 <__multiply>
 800ab3e:	6020      	str	r0, [r4, #0]
 800ab40:	f8c0 9000 	str.w	r9, [r0]
 800ab44:	4604      	mov	r4, r0
 800ab46:	e7e4      	b.n	800ab12 <__pow5mult+0x6a>
 800ab48:	4630      	mov	r0, r6
 800ab4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab4e:	bf00      	nop
 800ab50:	0800dbc8 	.word	0x0800dbc8
 800ab54:	0800daed 	.word	0x0800daed
 800ab58:	0800db6d 	.word	0x0800db6d

0800ab5c <__lshift>:
 800ab5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab60:	460c      	mov	r4, r1
 800ab62:	6849      	ldr	r1, [r1, #4]
 800ab64:	6923      	ldr	r3, [r4, #16]
 800ab66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab6a:	68a3      	ldr	r3, [r4, #8]
 800ab6c:	4607      	mov	r7, r0
 800ab6e:	4691      	mov	r9, r2
 800ab70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab74:	f108 0601 	add.w	r6, r8, #1
 800ab78:	42b3      	cmp	r3, r6
 800ab7a:	db0b      	blt.n	800ab94 <__lshift+0x38>
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	f7ff fddf 	bl	800a740 <_Balloc>
 800ab82:	4605      	mov	r5, r0
 800ab84:	b948      	cbnz	r0, 800ab9a <__lshift+0x3e>
 800ab86:	4602      	mov	r2, r0
 800ab88:	4b28      	ldr	r3, [pc, #160]	@ (800ac2c <__lshift+0xd0>)
 800ab8a:	4829      	ldr	r0, [pc, #164]	@ (800ac30 <__lshift+0xd4>)
 800ab8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab90:	f000 fb6c 	bl	800b26c <__assert_func>
 800ab94:	3101      	adds	r1, #1
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	e7ee      	b.n	800ab78 <__lshift+0x1c>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f100 0114 	add.w	r1, r0, #20
 800aba0:	f100 0210 	add.w	r2, r0, #16
 800aba4:	4618      	mov	r0, r3
 800aba6:	4553      	cmp	r3, sl
 800aba8:	db33      	blt.n	800ac12 <__lshift+0xb6>
 800abaa:	6920      	ldr	r0, [r4, #16]
 800abac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abb0:	f104 0314 	add.w	r3, r4, #20
 800abb4:	f019 091f 	ands.w	r9, r9, #31
 800abb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abc0:	d02b      	beq.n	800ac1a <__lshift+0xbe>
 800abc2:	f1c9 0e20 	rsb	lr, r9, #32
 800abc6:	468a      	mov	sl, r1
 800abc8:	2200      	movs	r2, #0
 800abca:	6818      	ldr	r0, [r3, #0]
 800abcc:	fa00 f009 	lsl.w	r0, r0, r9
 800abd0:	4310      	orrs	r0, r2
 800abd2:	f84a 0b04 	str.w	r0, [sl], #4
 800abd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800abda:	459c      	cmp	ip, r3
 800abdc:	fa22 f20e 	lsr.w	r2, r2, lr
 800abe0:	d8f3      	bhi.n	800abca <__lshift+0x6e>
 800abe2:	ebac 0304 	sub.w	r3, ip, r4
 800abe6:	3b15      	subs	r3, #21
 800abe8:	f023 0303 	bic.w	r3, r3, #3
 800abec:	3304      	adds	r3, #4
 800abee:	f104 0015 	add.w	r0, r4, #21
 800abf2:	4584      	cmp	ip, r0
 800abf4:	bf38      	it	cc
 800abf6:	2304      	movcc	r3, #4
 800abf8:	50ca      	str	r2, [r1, r3]
 800abfa:	b10a      	cbz	r2, 800ac00 <__lshift+0xa4>
 800abfc:	f108 0602 	add.w	r6, r8, #2
 800ac00:	3e01      	subs	r6, #1
 800ac02:	4638      	mov	r0, r7
 800ac04:	612e      	str	r6, [r5, #16]
 800ac06:	4621      	mov	r1, r4
 800ac08:	f7ff fdda 	bl	800a7c0 <_Bfree>
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac12:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac16:	3301      	adds	r3, #1
 800ac18:	e7c5      	b.n	800aba6 <__lshift+0x4a>
 800ac1a:	3904      	subs	r1, #4
 800ac1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac20:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac24:	459c      	cmp	ip, r3
 800ac26:	d8f9      	bhi.n	800ac1c <__lshift+0xc0>
 800ac28:	e7ea      	b.n	800ac00 <__lshift+0xa4>
 800ac2a:	bf00      	nop
 800ac2c:	0800db5c 	.word	0x0800db5c
 800ac30:	0800db6d 	.word	0x0800db6d

0800ac34 <__mcmp>:
 800ac34:	690a      	ldr	r2, [r1, #16]
 800ac36:	4603      	mov	r3, r0
 800ac38:	6900      	ldr	r0, [r0, #16]
 800ac3a:	1a80      	subs	r0, r0, r2
 800ac3c:	b530      	push	{r4, r5, lr}
 800ac3e:	d10e      	bne.n	800ac5e <__mcmp+0x2a>
 800ac40:	3314      	adds	r3, #20
 800ac42:	3114      	adds	r1, #20
 800ac44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac54:	4295      	cmp	r5, r2
 800ac56:	d003      	beq.n	800ac60 <__mcmp+0x2c>
 800ac58:	d205      	bcs.n	800ac66 <__mcmp+0x32>
 800ac5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5e:	bd30      	pop	{r4, r5, pc}
 800ac60:	42a3      	cmp	r3, r4
 800ac62:	d3f3      	bcc.n	800ac4c <__mcmp+0x18>
 800ac64:	e7fb      	b.n	800ac5e <__mcmp+0x2a>
 800ac66:	2001      	movs	r0, #1
 800ac68:	e7f9      	b.n	800ac5e <__mcmp+0x2a>
	...

0800ac6c <__mdiff>:
 800ac6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac70:	4689      	mov	r9, r1
 800ac72:	4606      	mov	r6, r0
 800ac74:	4611      	mov	r1, r2
 800ac76:	4648      	mov	r0, r9
 800ac78:	4614      	mov	r4, r2
 800ac7a:	f7ff ffdb 	bl	800ac34 <__mcmp>
 800ac7e:	1e05      	subs	r5, r0, #0
 800ac80:	d112      	bne.n	800aca8 <__mdiff+0x3c>
 800ac82:	4629      	mov	r1, r5
 800ac84:	4630      	mov	r0, r6
 800ac86:	f7ff fd5b 	bl	800a740 <_Balloc>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	b928      	cbnz	r0, 800ac9a <__mdiff+0x2e>
 800ac8e:	4b3f      	ldr	r3, [pc, #252]	@ (800ad8c <__mdiff+0x120>)
 800ac90:	f240 2137 	movw	r1, #567	@ 0x237
 800ac94:	483e      	ldr	r0, [pc, #248]	@ (800ad90 <__mdiff+0x124>)
 800ac96:	f000 fae9 	bl	800b26c <__assert_func>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aca0:	4610      	mov	r0, r2
 800aca2:	b003      	add	sp, #12
 800aca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca8:	bfbc      	itt	lt
 800acaa:	464b      	movlt	r3, r9
 800acac:	46a1      	movlt	r9, r4
 800acae:	4630      	mov	r0, r6
 800acb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800acb4:	bfba      	itte	lt
 800acb6:	461c      	movlt	r4, r3
 800acb8:	2501      	movlt	r5, #1
 800acba:	2500      	movge	r5, #0
 800acbc:	f7ff fd40 	bl	800a740 <_Balloc>
 800acc0:	4602      	mov	r2, r0
 800acc2:	b918      	cbnz	r0, 800accc <__mdiff+0x60>
 800acc4:	4b31      	ldr	r3, [pc, #196]	@ (800ad8c <__mdiff+0x120>)
 800acc6:	f240 2145 	movw	r1, #581	@ 0x245
 800acca:	e7e3      	b.n	800ac94 <__mdiff+0x28>
 800accc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800acd0:	6926      	ldr	r6, [r4, #16]
 800acd2:	60c5      	str	r5, [r0, #12]
 800acd4:	f109 0310 	add.w	r3, r9, #16
 800acd8:	f109 0514 	add.w	r5, r9, #20
 800acdc:	f104 0e14 	add.w	lr, r4, #20
 800ace0:	f100 0b14 	add.w	fp, r0, #20
 800ace4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ace8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800acec:	9301      	str	r3, [sp, #4]
 800acee:	46d9      	mov	r9, fp
 800acf0:	f04f 0c00 	mov.w	ip, #0
 800acf4:	9b01      	ldr	r3, [sp, #4]
 800acf6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800acfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800acfe:	9301      	str	r3, [sp, #4]
 800ad00:	fa1f f38a 	uxth.w	r3, sl
 800ad04:	4619      	mov	r1, r3
 800ad06:	b283      	uxth	r3, r0
 800ad08:	1acb      	subs	r3, r1, r3
 800ad0a:	0c00      	lsrs	r0, r0, #16
 800ad0c:	4463      	add	r3, ip
 800ad0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad1c:	4576      	cmp	r6, lr
 800ad1e:	f849 3b04 	str.w	r3, [r9], #4
 800ad22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad26:	d8e5      	bhi.n	800acf4 <__mdiff+0x88>
 800ad28:	1b33      	subs	r3, r6, r4
 800ad2a:	3b15      	subs	r3, #21
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	3415      	adds	r4, #21
 800ad32:	3304      	adds	r3, #4
 800ad34:	42a6      	cmp	r6, r4
 800ad36:	bf38      	it	cc
 800ad38:	2304      	movcc	r3, #4
 800ad3a:	441d      	add	r5, r3
 800ad3c:	445b      	add	r3, fp
 800ad3e:	461e      	mov	r6, r3
 800ad40:	462c      	mov	r4, r5
 800ad42:	4544      	cmp	r4, r8
 800ad44:	d30e      	bcc.n	800ad64 <__mdiff+0xf8>
 800ad46:	f108 0103 	add.w	r1, r8, #3
 800ad4a:	1b49      	subs	r1, r1, r5
 800ad4c:	f021 0103 	bic.w	r1, r1, #3
 800ad50:	3d03      	subs	r5, #3
 800ad52:	45a8      	cmp	r8, r5
 800ad54:	bf38      	it	cc
 800ad56:	2100      	movcc	r1, #0
 800ad58:	440b      	add	r3, r1
 800ad5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad5e:	b191      	cbz	r1, 800ad86 <__mdiff+0x11a>
 800ad60:	6117      	str	r7, [r2, #16]
 800ad62:	e79d      	b.n	800aca0 <__mdiff+0x34>
 800ad64:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad68:	46e6      	mov	lr, ip
 800ad6a:	0c08      	lsrs	r0, r1, #16
 800ad6c:	fa1c fc81 	uxtah	ip, ip, r1
 800ad70:	4471      	add	r1, lr
 800ad72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad76:	b289      	uxth	r1, r1
 800ad78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad7c:	f846 1b04 	str.w	r1, [r6], #4
 800ad80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad84:	e7dd      	b.n	800ad42 <__mdiff+0xd6>
 800ad86:	3f01      	subs	r7, #1
 800ad88:	e7e7      	b.n	800ad5a <__mdiff+0xee>
 800ad8a:	bf00      	nop
 800ad8c:	0800db5c 	.word	0x0800db5c
 800ad90:	0800db6d 	.word	0x0800db6d

0800ad94 <__d2b>:
 800ad94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad98:	460f      	mov	r7, r1
 800ad9a:	2101      	movs	r1, #1
 800ad9c:	ec59 8b10 	vmov	r8, r9, d0
 800ada0:	4616      	mov	r6, r2
 800ada2:	f7ff fccd 	bl	800a740 <_Balloc>
 800ada6:	4604      	mov	r4, r0
 800ada8:	b930      	cbnz	r0, 800adb8 <__d2b+0x24>
 800adaa:	4602      	mov	r2, r0
 800adac:	4b23      	ldr	r3, [pc, #140]	@ (800ae3c <__d2b+0xa8>)
 800adae:	4824      	ldr	r0, [pc, #144]	@ (800ae40 <__d2b+0xac>)
 800adb0:	f240 310f 	movw	r1, #783	@ 0x30f
 800adb4:	f000 fa5a 	bl	800b26c <__assert_func>
 800adb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800adbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adc0:	b10d      	cbz	r5, 800adc6 <__d2b+0x32>
 800adc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adc6:	9301      	str	r3, [sp, #4]
 800adc8:	f1b8 0300 	subs.w	r3, r8, #0
 800adcc:	d023      	beq.n	800ae16 <__d2b+0x82>
 800adce:	4668      	mov	r0, sp
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	f7ff fd7c 	bl	800a8ce <__lo0bits>
 800add6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800adda:	b1d0      	cbz	r0, 800ae12 <__d2b+0x7e>
 800addc:	f1c0 0320 	rsb	r3, r0, #32
 800ade0:	fa02 f303 	lsl.w	r3, r2, r3
 800ade4:	430b      	orrs	r3, r1
 800ade6:	40c2      	lsrs	r2, r0
 800ade8:	6163      	str	r3, [r4, #20]
 800adea:	9201      	str	r2, [sp, #4]
 800adec:	9b01      	ldr	r3, [sp, #4]
 800adee:	61a3      	str	r3, [r4, #24]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	bf0c      	ite	eq
 800adf4:	2201      	moveq	r2, #1
 800adf6:	2202      	movne	r2, #2
 800adf8:	6122      	str	r2, [r4, #16]
 800adfa:	b1a5      	cbz	r5, 800ae26 <__d2b+0x92>
 800adfc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae00:	4405      	add	r5, r0
 800ae02:	603d      	str	r5, [r7, #0]
 800ae04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae08:	6030      	str	r0, [r6, #0]
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	b003      	add	sp, #12
 800ae0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae12:	6161      	str	r1, [r4, #20]
 800ae14:	e7ea      	b.n	800adec <__d2b+0x58>
 800ae16:	a801      	add	r0, sp, #4
 800ae18:	f7ff fd59 	bl	800a8ce <__lo0bits>
 800ae1c:	9b01      	ldr	r3, [sp, #4]
 800ae1e:	6163      	str	r3, [r4, #20]
 800ae20:	3020      	adds	r0, #32
 800ae22:	2201      	movs	r2, #1
 800ae24:	e7e8      	b.n	800adf8 <__d2b+0x64>
 800ae26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae2e:	6038      	str	r0, [r7, #0]
 800ae30:	6918      	ldr	r0, [r3, #16]
 800ae32:	f7ff fd2d 	bl	800a890 <__hi0bits>
 800ae36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae3a:	e7e5      	b.n	800ae08 <__d2b+0x74>
 800ae3c:	0800db5c 	.word	0x0800db5c
 800ae40:	0800db6d 	.word	0x0800db6d

0800ae44 <__ssputs_r>:
 800ae44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae48:	688e      	ldr	r6, [r1, #8]
 800ae4a:	461f      	mov	r7, r3
 800ae4c:	42be      	cmp	r6, r7
 800ae4e:	680b      	ldr	r3, [r1, #0]
 800ae50:	4682      	mov	sl, r0
 800ae52:	460c      	mov	r4, r1
 800ae54:	4690      	mov	r8, r2
 800ae56:	d82d      	bhi.n	800aeb4 <__ssputs_r+0x70>
 800ae58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae60:	d026      	beq.n	800aeb0 <__ssputs_r+0x6c>
 800ae62:	6965      	ldr	r5, [r4, #20]
 800ae64:	6909      	ldr	r1, [r1, #16]
 800ae66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae6a:	eba3 0901 	sub.w	r9, r3, r1
 800ae6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae72:	1c7b      	adds	r3, r7, #1
 800ae74:	444b      	add	r3, r9
 800ae76:	106d      	asrs	r5, r5, #1
 800ae78:	429d      	cmp	r5, r3
 800ae7a:	bf38      	it	cc
 800ae7c:	461d      	movcc	r5, r3
 800ae7e:	0553      	lsls	r3, r2, #21
 800ae80:	d527      	bpl.n	800aed2 <__ssputs_r+0x8e>
 800ae82:	4629      	mov	r1, r5
 800ae84:	f7ff fbd0 	bl	800a628 <_malloc_r>
 800ae88:	4606      	mov	r6, r0
 800ae8a:	b360      	cbz	r0, 800aee6 <__ssputs_r+0xa2>
 800ae8c:	6921      	ldr	r1, [r4, #16]
 800ae8e:	464a      	mov	r2, r9
 800ae90:	f7fe fcfb 	bl	800988a <memcpy>
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae9e:	81a3      	strh	r3, [r4, #12]
 800aea0:	6126      	str	r6, [r4, #16]
 800aea2:	6165      	str	r5, [r4, #20]
 800aea4:	444e      	add	r6, r9
 800aea6:	eba5 0509 	sub.w	r5, r5, r9
 800aeaa:	6026      	str	r6, [r4, #0]
 800aeac:	60a5      	str	r5, [r4, #8]
 800aeae:	463e      	mov	r6, r7
 800aeb0:	42be      	cmp	r6, r7
 800aeb2:	d900      	bls.n	800aeb6 <__ssputs_r+0x72>
 800aeb4:	463e      	mov	r6, r7
 800aeb6:	6820      	ldr	r0, [r4, #0]
 800aeb8:	4632      	mov	r2, r6
 800aeba:	4641      	mov	r1, r8
 800aebc:	f7fe fc43 	bl	8009746 <memmove>
 800aec0:	68a3      	ldr	r3, [r4, #8]
 800aec2:	1b9b      	subs	r3, r3, r6
 800aec4:	60a3      	str	r3, [r4, #8]
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	4433      	add	r3, r6
 800aeca:	6023      	str	r3, [r4, #0]
 800aecc:	2000      	movs	r0, #0
 800aece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed2:	462a      	mov	r2, r5
 800aed4:	f000 fa0e 	bl	800b2f4 <_realloc_r>
 800aed8:	4606      	mov	r6, r0
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d1e0      	bne.n	800aea0 <__ssputs_r+0x5c>
 800aede:	6921      	ldr	r1, [r4, #16]
 800aee0:	4650      	mov	r0, sl
 800aee2:	f7ff fb2d 	bl	800a540 <_free_r>
 800aee6:	230c      	movs	r3, #12
 800aee8:	f8ca 3000 	str.w	r3, [sl]
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aef2:	81a3      	strh	r3, [r4, #12]
 800aef4:	f04f 30ff 	mov.w	r0, #4294967295
 800aef8:	e7e9      	b.n	800aece <__ssputs_r+0x8a>
	...

0800aefc <_svfiprintf_r>:
 800aefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	4698      	mov	r8, r3
 800af02:	898b      	ldrh	r3, [r1, #12]
 800af04:	061b      	lsls	r3, r3, #24
 800af06:	b09d      	sub	sp, #116	@ 0x74
 800af08:	4607      	mov	r7, r0
 800af0a:	460d      	mov	r5, r1
 800af0c:	4614      	mov	r4, r2
 800af0e:	d510      	bpl.n	800af32 <_svfiprintf_r+0x36>
 800af10:	690b      	ldr	r3, [r1, #16]
 800af12:	b973      	cbnz	r3, 800af32 <_svfiprintf_r+0x36>
 800af14:	2140      	movs	r1, #64	@ 0x40
 800af16:	f7ff fb87 	bl	800a628 <_malloc_r>
 800af1a:	6028      	str	r0, [r5, #0]
 800af1c:	6128      	str	r0, [r5, #16]
 800af1e:	b930      	cbnz	r0, 800af2e <_svfiprintf_r+0x32>
 800af20:	230c      	movs	r3, #12
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	f04f 30ff 	mov.w	r0, #4294967295
 800af28:	b01d      	add	sp, #116	@ 0x74
 800af2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2e:	2340      	movs	r3, #64	@ 0x40
 800af30:	616b      	str	r3, [r5, #20]
 800af32:	2300      	movs	r3, #0
 800af34:	9309      	str	r3, [sp, #36]	@ 0x24
 800af36:	2320      	movs	r3, #32
 800af38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af40:	2330      	movs	r3, #48	@ 0x30
 800af42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0e0 <_svfiprintf_r+0x1e4>
 800af46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af4a:	f04f 0901 	mov.w	r9, #1
 800af4e:	4623      	mov	r3, r4
 800af50:	469a      	mov	sl, r3
 800af52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af56:	b10a      	cbz	r2, 800af5c <_svfiprintf_r+0x60>
 800af58:	2a25      	cmp	r2, #37	@ 0x25
 800af5a:	d1f9      	bne.n	800af50 <_svfiprintf_r+0x54>
 800af5c:	ebba 0b04 	subs.w	fp, sl, r4
 800af60:	d00b      	beq.n	800af7a <_svfiprintf_r+0x7e>
 800af62:	465b      	mov	r3, fp
 800af64:	4622      	mov	r2, r4
 800af66:	4629      	mov	r1, r5
 800af68:	4638      	mov	r0, r7
 800af6a:	f7ff ff6b 	bl	800ae44 <__ssputs_r>
 800af6e:	3001      	adds	r0, #1
 800af70:	f000 80a7 	beq.w	800b0c2 <_svfiprintf_r+0x1c6>
 800af74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af76:	445a      	add	r2, fp
 800af78:	9209      	str	r2, [sp, #36]	@ 0x24
 800af7a:	f89a 3000 	ldrb.w	r3, [sl]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 809f 	beq.w	800b0c2 <_svfiprintf_r+0x1c6>
 800af84:	2300      	movs	r3, #0
 800af86:	f04f 32ff 	mov.w	r2, #4294967295
 800af8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af8e:	f10a 0a01 	add.w	sl, sl, #1
 800af92:	9304      	str	r3, [sp, #16]
 800af94:	9307      	str	r3, [sp, #28]
 800af96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800af9c:	4654      	mov	r4, sl
 800af9e:	2205      	movs	r2, #5
 800afa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa4:	484e      	ldr	r0, [pc, #312]	@ (800b0e0 <_svfiprintf_r+0x1e4>)
 800afa6:	f7f5 f923 	bl	80001f0 <memchr>
 800afaa:	9a04      	ldr	r2, [sp, #16]
 800afac:	b9d8      	cbnz	r0, 800afe6 <_svfiprintf_r+0xea>
 800afae:	06d0      	lsls	r0, r2, #27
 800afb0:	bf44      	itt	mi
 800afb2:	2320      	movmi	r3, #32
 800afb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afb8:	0711      	lsls	r1, r2, #28
 800afba:	bf44      	itt	mi
 800afbc:	232b      	movmi	r3, #43	@ 0x2b
 800afbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afc2:	f89a 3000 	ldrb.w	r3, [sl]
 800afc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800afc8:	d015      	beq.n	800aff6 <_svfiprintf_r+0xfa>
 800afca:	9a07      	ldr	r2, [sp, #28]
 800afcc:	4654      	mov	r4, sl
 800afce:	2000      	movs	r0, #0
 800afd0:	f04f 0c0a 	mov.w	ip, #10
 800afd4:	4621      	mov	r1, r4
 800afd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afda:	3b30      	subs	r3, #48	@ 0x30
 800afdc:	2b09      	cmp	r3, #9
 800afde:	d94b      	bls.n	800b078 <_svfiprintf_r+0x17c>
 800afe0:	b1b0      	cbz	r0, 800b010 <_svfiprintf_r+0x114>
 800afe2:	9207      	str	r2, [sp, #28]
 800afe4:	e014      	b.n	800b010 <_svfiprintf_r+0x114>
 800afe6:	eba0 0308 	sub.w	r3, r0, r8
 800afea:	fa09 f303 	lsl.w	r3, r9, r3
 800afee:	4313      	orrs	r3, r2
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	46a2      	mov	sl, r4
 800aff4:	e7d2      	b.n	800af9c <_svfiprintf_r+0xa0>
 800aff6:	9b03      	ldr	r3, [sp, #12]
 800aff8:	1d19      	adds	r1, r3, #4
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	9103      	str	r1, [sp, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	bfbb      	ittet	lt
 800b002:	425b      	neglt	r3, r3
 800b004:	f042 0202 	orrlt.w	r2, r2, #2
 800b008:	9307      	strge	r3, [sp, #28]
 800b00a:	9307      	strlt	r3, [sp, #28]
 800b00c:	bfb8      	it	lt
 800b00e:	9204      	strlt	r2, [sp, #16]
 800b010:	7823      	ldrb	r3, [r4, #0]
 800b012:	2b2e      	cmp	r3, #46	@ 0x2e
 800b014:	d10a      	bne.n	800b02c <_svfiprintf_r+0x130>
 800b016:	7863      	ldrb	r3, [r4, #1]
 800b018:	2b2a      	cmp	r3, #42	@ 0x2a
 800b01a:	d132      	bne.n	800b082 <_svfiprintf_r+0x186>
 800b01c:	9b03      	ldr	r3, [sp, #12]
 800b01e:	1d1a      	adds	r2, r3, #4
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	9203      	str	r2, [sp, #12]
 800b024:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b028:	3402      	adds	r4, #2
 800b02a:	9305      	str	r3, [sp, #20]
 800b02c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b0f0 <_svfiprintf_r+0x1f4>
 800b030:	7821      	ldrb	r1, [r4, #0]
 800b032:	2203      	movs	r2, #3
 800b034:	4650      	mov	r0, sl
 800b036:	f7f5 f8db 	bl	80001f0 <memchr>
 800b03a:	b138      	cbz	r0, 800b04c <_svfiprintf_r+0x150>
 800b03c:	9b04      	ldr	r3, [sp, #16]
 800b03e:	eba0 000a 	sub.w	r0, r0, sl
 800b042:	2240      	movs	r2, #64	@ 0x40
 800b044:	4082      	lsls	r2, r0
 800b046:	4313      	orrs	r3, r2
 800b048:	3401      	adds	r4, #1
 800b04a:	9304      	str	r3, [sp, #16]
 800b04c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b050:	4824      	ldr	r0, [pc, #144]	@ (800b0e4 <_svfiprintf_r+0x1e8>)
 800b052:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b056:	2206      	movs	r2, #6
 800b058:	f7f5 f8ca 	bl	80001f0 <memchr>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d036      	beq.n	800b0ce <_svfiprintf_r+0x1d2>
 800b060:	4b21      	ldr	r3, [pc, #132]	@ (800b0e8 <_svfiprintf_r+0x1ec>)
 800b062:	bb1b      	cbnz	r3, 800b0ac <_svfiprintf_r+0x1b0>
 800b064:	9b03      	ldr	r3, [sp, #12]
 800b066:	3307      	adds	r3, #7
 800b068:	f023 0307 	bic.w	r3, r3, #7
 800b06c:	3308      	adds	r3, #8
 800b06e:	9303      	str	r3, [sp, #12]
 800b070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b072:	4433      	add	r3, r6
 800b074:	9309      	str	r3, [sp, #36]	@ 0x24
 800b076:	e76a      	b.n	800af4e <_svfiprintf_r+0x52>
 800b078:	fb0c 3202 	mla	r2, ip, r2, r3
 800b07c:	460c      	mov	r4, r1
 800b07e:	2001      	movs	r0, #1
 800b080:	e7a8      	b.n	800afd4 <_svfiprintf_r+0xd8>
 800b082:	2300      	movs	r3, #0
 800b084:	3401      	adds	r4, #1
 800b086:	9305      	str	r3, [sp, #20]
 800b088:	4619      	mov	r1, r3
 800b08a:	f04f 0c0a 	mov.w	ip, #10
 800b08e:	4620      	mov	r0, r4
 800b090:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b094:	3a30      	subs	r2, #48	@ 0x30
 800b096:	2a09      	cmp	r2, #9
 800b098:	d903      	bls.n	800b0a2 <_svfiprintf_r+0x1a6>
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d0c6      	beq.n	800b02c <_svfiprintf_r+0x130>
 800b09e:	9105      	str	r1, [sp, #20]
 800b0a0:	e7c4      	b.n	800b02c <_svfiprintf_r+0x130>
 800b0a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e7f0      	b.n	800b08e <_svfiprintf_r+0x192>
 800b0ac:	ab03      	add	r3, sp, #12
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	462a      	mov	r2, r5
 800b0b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b0ec <_svfiprintf_r+0x1f0>)
 800b0b4:	a904      	add	r1, sp, #16
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	f7fd fe54 	bl	8008d64 <_printf_float>
 800b0bc:	1c42      	adds	r2, r0, #1
 800b0be:	4606      	mov	r6, r0
 800b0c0:	d1d6      	bne.n	800b070 <_svfiprintf_r+0x174>
 800b0c2:	89ab      	ldrh	r3, [r5, #12]
 800b0c4:	065b      	lsls	r3, r3, #25
 800b0c6:	f53f af2d 	bmi.w	800af24 <_svfiprintf_r+0x28>
 800b0ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0cc:	e72c      	b.n	800af28 <_svfiprintf_r+0x2c>
 800b0ce:	ab03      	add	r3, sp, #12
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	462a      	mov	r2, r5
 800b0d4:	4b05      	ldr	r3, [pc, #20]	@ (800b0ec <_svfiprintf_r+0x1f0>)
 800b0d6:	a904      	add	r1, sp, #16
 800b0d8:	4638      	mov	r0, r7
 800b0da:	f7fe f8db 	bl	8009294 <_printf_i>
 800b0de:	e7ed      	b.n	800b0bc <_svfiprintf_r+0x1c0>
 800b0e0:	0800dcc8 	.word	0x0800dcc8
 800b0e4:	0800dcd2 	.word	0x0800dcd2
 800b0e8:	08008d65 	.word	0x08008d65
 800b0ec:	0800ae45 	.word	0x0800ae45
 800b0f0:	0800dcce 	.word	0x0800dcce

0800b0f4 <__sflush_r>:
 800b0f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fc:	0716      	lsls	r6, r2, #28
 800b0fe:	4605      	mov	r5, r0
 800b100:	460c      	mov	r4, r1
 800b102:	d454      	bmi.n	800b1ae <__sflush_r+0xba>
 800b104:	684b      	ldr	r3, [r1, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	dc02      	bgt.n	800b110 <__sflush_r+0x1c>
 800b10a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	dd48      	ble.n	800b1a2 <__sflush_r+0xae>
 800b110:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b112:	2e00      	cmp	r6, #0
 800b114:	d045      	beq.n	800b1a2 <__sflush_r+0xae>
 800b116:	2300      	movs	r3, #0
 800b118:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b11c:	682f      	ldr	r7, [r5, #0]
 800b11e:	6a21      	ldr	r1, [r4, #32]
 800b120:	602b      	str	r3, [r5, #0]
 800b122:	d030      	beq.n	800b186 <__sflush_r+0x92>
 800b124:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b126:	89a3      	ldrh	r3, [r4, #12]
 800b128:	0759      	lsls	r1, r3, #29
 800b12a:	d505      	bpl.n	800b138 <__sflush_r+0x44>
 800b12c:	6863      	ldr	r3, [r4, #4]
 800b12e:	1ad2      	subs	r2, r2, r3
 800b130:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b132:	b10b      	cbz	r3, 800b138 <__sflush_r+0x44>
 800b134:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b136:	1ad2      	subs	r2, r2, r3
 800b138:	2300      	movs	r3, #0
 800b13a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b13c:	6a21      	ldr	r1, [r4, #32]
 800b13e:	4628      	mov	r0, r5
 800b140:	47b0      	blx	r6
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	d106      	bne.n	800b156 <__sflush_r+0x62>
 800b148:	6829      	ldr	r1, [r5, #0]
 800b14a:	291d      	cmp	r1, #29
 800b14c:	d82b      	bhi.n	800b1a6 <__sflush_r+0xb2>
 800b14e:	4a2a      	ldr	r2, [pc, #168]	@ (800b1f8 <__sflush_r+0x104>)
 800b150:	410a      	asrs	r2, r1
 800b152:	07d6      	lsls	r6, r2, #31
 800b154:	d427      	bmi.n	800b1a6 <__sflush_r+0xb2>
 800b156:	2200      	movs	r2, #0
 800b158:	6062      	str	r2, [r4, #4]
 800b15a:	04d9      	lsls	r1, r3, #19
 800b15c:	6922      	ldr	r2, [r4, #16]
 800b15e:	6022      	str	r2, [r4, #0]
 800b160:	d504      	bpl.n	800b16c <__sflush_r+0x78>
 800b162:	1c42      	adds	r2, r0, #1
 800b164:	d101      	bne.n	800b16a <__sflush_r+0x76>
 800b166:	682b      	ldr	r3, [r5, #0]
 800b168:	b903      	cbnz	r3, 800b16c <__sflush_r+0x78>
 800b16a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b16c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b16e:	602f      	str	r7, [r5, #0]
 800b170:	b1b9      	cbz	r1, 800b1a2 <__sflush_r+0xae>
 800b172:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b176:	4299      	cmp	r1, r3
 800b178:	d002      	beq.n	800b180 <__sflush_r+0x8c>
 800b17a:	4628      	mov	r0, r5
 800b17c:	f7ff f9e0 	bl	800a540 <_free_r>
 800b180:	2300      	movs	r3, #0
 800b182:	6363      	str	r3, [r4, #52]	@ 0x34
 800b184:	e00d      	b.n	800b1a2 <__sflush_r+0xae>
 800b186:	2301      	movs	r3, #1
 800b188:	4628      	mov	r0, r5
 800b18a:	47b0      	blx	r6
 800b18c:	4602      	mov	r2, r0
 800b18e:	1c50      	adds	r0, r2, #1
 800b190:	d1c9      	bne.n	800b126 <__sflush_r+0x32>
 800b192:	682b      	ldr	r3, [r5, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d0c6      	beq.n	800b126 <__sflush_r+0x32>
 800b198:	2b1d      	cmp	r3, #29
 800b19a:	d001      	beq.n	800b1a0 <__sflush_r+0xac>
 800b19c:	2b16      	cmp	r3, #22
 800b19e:	d11e      	bne.n	800b1de <__sflush_r+0xea>
 800b1a0:	602f      	str	r7, [r5, #0]
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	e022      	b.n	800b1ec <__sflush_r+0xf8>
 800b1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1aa:	b21b      	sxth	r3, r3
 800b1ac:	e01b      	b.n	800b1e6 <__sflush_r+0xf2>
 800b1ae:	690f      	ldr	r7, [r1, #16]
 800b1b0:	2f00      	cmp	r7, #0
 800b1b2:	d0f6      	beq.n	800b1a2 <__sflush_r+0xae>
 800b1b4:	0793      	lsls	r3, r2, #30
 800b1b6:	680e      	ldr	r6, [r1, #0]
 800b1b8:	bf08      	it	eq
 800b1ba:	694b      	ldreq	r3, [r1, #20]
 800b1bc:	600f      	str	r7, [r1, #0]
 800b1be:	bf18      	it	ne
 800b1c0:	2300      	movne	r3, #0
 800b1c2:	eba6 0807 	sub.w	r8, r6, r7
 800b1c6:	608b      	str	r3, [r1, #8]
 800b1c8:	f1b8 0f00 	cmp.w	r8, #0
 800b1cc:	dde9      	ble.n	800b1a2 <__sflush_r+0xae>
 800b1ce:	6a21      	ldr	r1, [r4, #32]
 800b1d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1d2:	4643      	mov	r3, r8
 800b1d4:	463a      	mov	r2, r7
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	47b0      	blx	r6
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	dc08      	bgt.n	800b1f0 <__sflush_r+0xfc>
 800b1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1e6:	81a3      	strh	r3, [r4, #12]
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f0:	4407      	add	r7, r0
 800b1f2:	eba8 0800 	sub.w	r8, r8, r0
 800b1f6:	e7e7      	b.n	800b1c8 <__sflush_r+0xd4>
 800b1f8:	dfbffffe 	.word	0xdfbffffe

0800b1fc <_fflush_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	690b      	ldr	r3, [r1, #16]
 800b200:	4605      	mov	r5, r0
 800b202:	460c      	mov	r4, r1
 800b204:	b913      	cbnz	r3, 800b20c <_fflush_r+0x10>
 800b206:	2500      	movs	r5, #0
 800b208:	4628      	mov	r0, r5
 800b20a:	bd38      	pop	{r3, r4, r5, pc}
 800b20c:	b118      	cbz	r0, 800b216 <_fflush_r+0x1a>
 800b20e:	6a03      	ldr	r3, [r0, #32]
 800b210:	b90b      	cbnz	r3, 800b216 <_fflush_r+0x1a>
 800b212:	f7fe f9eb 	bl	80095ec <__sinit>
 800b216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0f3      	beq.n	800b206 <_fflush_r+0xa>
 800b21e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b220:	07d0      	lsls	r0, r2, #31
 800b222:	d404      	bmi.n	800b22e <_fflush_r+0x32>
 800b224:	0599      	lsls	r1, r3, #22
 800b226:	d402      	bmi.n	800b22e <_fflush_r+0x32>
 800b228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b22a:	f7fe fb24 	bl	8009876 <__retarget_lock_acquire_recursive>
 800b22e:	4628      	mov	r0, r5
 800b230:	4621      	mov	r1, r4
 800b232:	f7ff ff5f 	bl	800b0f4 <__sflush_r>
 800b236:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b238:	07da      	lsls	r2, r3, #31
 800b23a:	4605      	mov	r5, r0
 800b23c:	d4e4      	bmi.n	800b208 <_fflush_r+0xc>
 800b23e:	89a3      	ldrh	r3, [r4, #12]
 800b240:	059b      	lsls	r3, r3, #22
 800b242:	d4e1      	bmi.n	800b208 <_fflush_r+0xc>
 800b244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b246:	f7fe fb17 	bl	8009878 <__retarget_lock_release_recursive>
 800b24a:	e7dd      	b.n	800b208 <_fflush_r+0xc>

0800b24c <_sbrk_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4d06      	ldr	r5, [pc, #24]	@ (800b268 <_sbrk_r+0x1c>)
 800b250:	2300      	movs	r3, #0
 800b252:	4604      	mov	r4, r0
 800b254:	4608      	mov	r0, r1
 800b256:	602b      	str	r3, [r5, #0]
 800b258:	f7f6 ffc4 	bl	80021e4 <_sbrk>
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	d102      	bne.n	800b266 <_sbrk_r+0x1a>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	b103      	cbz	r3, 800b266 <_sbrk_r+0x1a>
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	bd38      	pop	{r3, r4, r5, pc}
 800b268:	200013b0 	.word	0x200013b0

0800b26c <__assert_func>:
 800b26c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b26e:	4614      	mov	r4, r2
 800b270:	461a      	mov	r2, r3
 800b272:	4b09      	ldr	r3, [pc, #36]	@ (800b298 <__assert_func+0x2c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4605      	mov	r5, r0
 800b278:	68d8      	ldr	r0, [r3, #12]
 800b27a:	b954      	cbnz	r4, 800b292 <__assert_func+0x26>
 800b27c:	4b07      	ldr	r3, [pc, #28]	@ (800b29c <__assert_func+0x30>)
 800b27e:	461c      	mov	r4, r3
 800b280:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b284:	9100      	str	r1, [sp, #0]
 800b286:	462b      	mov	r3, r5
 800b288:	4905      	ldr	r1, [pc, #20]	@ (800b2a0 <__assert_func+0x34>)
 800b28a:	f000 f86f 	bl	800b36c <fiprintf>
 800b28e:	f000 f87f 	bl	800b390 <abort>
 800b292:	4b04      	ldr	r3, [pc, #16]	@ (800b2a4 <__assert_func+0x38>)
 800b294:	e7f4      	b.n	800b280 <__assert_func+0x14>
 800b296:	bf00      	nop
 800b298:	20000044 	.word	0x20000044
 800b29c:	0800dd1e 	.word	0x0800dd1e
 800b2a0:	0800dcf0 	.word	0x0800dcf0
 800b2a4:	0800dce3 	.word	0x0800dce3

0800b2a8 <_calloc_r>:
 800b2a8:	b570      	push	{r4, r5, r6, lr}
 800b2aa:	fba1 5402 	umull	r5, r4, r1, r2
 800b2ae:	b93c      	cbnz	r4, 800b2c0 <_calloc_r+0x18>
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	f7ff f9b9 	bl	800a628 <_malloc_r>
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	b928      	cbnz	r0, 800b2c6 <_calloc_r+0x1e>
 800b2ba:	2600      	movs	r6, #0
 800b2bc:	4630      	mov	r0, r6
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	220c      	movs	r2, #12
 800b2c2:	6002      	str	r2, [r0, #0]
 800b2c4:	e7f9      	b.n	800b2ba <_calloc_r+0x12>
 800b2c6:	462a      	mov	r2, r5
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	f7fe fa56 	bl	800977a <memset>
 800b2ce:	e7f5      	b.n	800b2bc <_calloc_r+0x14>

0800b2d0 <__ascii_mbtowc>:
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	b901      	cbnz	r1, 800b2d6 <__ascii_mbtowc+0x6>
 800b2d4:	a901      	add	r1, sp, #4
 800b2d6:	b142      	cbz	r2, 800b2ea <__ascii_mbtowc+0x1a>
 800b2d8:	b14b      	cbz	r3, 800b2ee <__ascii_mbtowc+0x1e>
 800b2da:	7813      	ldrb	r3, [r2, #0]
 800b2dc:	600b      	str	r3, [r1, #0]
 800b2de:	7812      	ldrb	r2, [r2, #0]
 800b2e0:	1e10      	subs	r0, r2, #0
 800b2e2:	bf18      	it	ne
 800b2e4:	2001      	movne	r0, #1
 800b2e6:	b002      	add	sp, #8
 800b2e8:	4770      	bx	lr
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	e7fb      	b.n	800b2e6 <__ascii_mbtowc+0x16>
 800b2ee:	f06f 0001 	mvn.w	r0, #1
 800b2f2:	e7f8      	b.n	800b2e6 <__ascii_mbtowc+0x16>

0800b2f4 <_realloc_r>:
 800b2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f8:	4680      	mov	r8, r0
 800b2fa:	4615      	mov	r5, r2
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	b921      	cbnz	r1, 800b30a <_realloc_r+0x16>
 800b300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b304:	4611      	mov	r1, r2
 800b306:	f7ff b98f 	b.w	800a628 <_malloc_r>
 800b30a:	b92a      	cbnz	r2, 800b318 <_realloc_r+0x24>
 800b30c:	f7ff f918 	bl	800a540 <_free_r>
 800b310:	2400      	movs	r4, #0
 800b312:	4620      	mov	r0, r4
 800b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b318:	f000 f841 	bl	800b39e <_malloc_usable_size_r>
 800b31c:	4285      	cmp	r5, r0
 800b31e:	4606      	mov	r6, r0
 800b320:	d802      	bhi.n	800b328 <_realloc_r+0x34>
 800b322:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b326:	d8f4      	bhi.n	800b312 <_realloc_r+0x1e>
 800b328:	4629      	mov	r1, r5
 800b32a:	4640      	mov	r0, r8
 800b32c:	f7ff f97c 	bl	800a628 <_malloc_r>
 800b330:	4607      	mov	r7, r0
 800b332:	2800      	cmp	r0, #0
 800b334:	d0ec      	beq.n	800b310 <_realloc_r+0x1c>
 800b336:	42b5      	cmp	r5, r6
 800b338:	462a      	mov	r2, r5
 800b33a:	4621      	mov	r1, r4
 800b33c:	bf28      	it	cs
 800b33e:	4632      	movcs	r2, r6
 800b340:	f7fe faa3 	bl	800988a <memcpy>
 800b344:	4621      	mov	r1, r4
 800b346:	4640      	mov	r0, r8
 800b348:	f7ff f8fa 	bl	800a540 <_free_r>
 800b34c:	463c      	mov	r4, r7
 800b34e:	e7e0      	b.n	800b312 <_realloc_r+0x1e>

0800b350 <__ascii_wctomb>:
 800b350:	4603      	mov	r3, r0
 800b352:	4608      	mov	r0, r1
 800b354:	b141      	cbz	r1, 800b368 <__ascii_wctomb+0x18>
 800b356:	2aff      	cmp	r2, #255	@ 0xff
 800b358:	d904      	bls.n	800b364 <__ascii_wctomb+0x14>
 800b35a:	228a      	movs	r2, #138	@ 0x8a
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	f04f 30ff 	mov.w	r0, #4294967295
 800b362:	4770      	bx	lr
 800b364:	700a      	strb	r2, [r1, #0]
 800b366:	2001      	movs	r0, #1
 800b368:	4770      	bx	lr
	...

0800b36c <fiprintf>:
 800b36c:	b40e      	push	{r1, r2, r3}
 800b36e:	b503      	push	{r0, r1, lr}
 800b370:	4601      	mov	r1, r0
 800b372:	ab03      	add	r3, sp, #12
 800b374:	4805      	ldr	r0, [pc, #20]	@ (800b38c <fiprintf+0x20>)
 800b376:	f853 2b04 	ldr.w	r2, [r3], #4
 800b37a:	6800      	ldr	r0, [r0, #0]
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	f000 f83f 	bl	800b400 <_vfiprintf_r>
 800b382:	b002      	add	sp, #8
 800b384:	f85d eb04 	ldr.w	lr, [sp], #4
 800b388:	b003      	add	sp, #12
 800b38a:	4770      	bx	lr
 800b38c:	20000044 	.word	0x20000044

0800b390 <abort>:
 800b390:	b508      	push	{r3, lr}
 800b392:	2006      	movs	r0, #6
 800b394:	f000 fa08 	bl	800b7a8 <raise>
 800b398:	2001      	movs	r0, #1
 800b39a:	f7f6 feab 	bl	80020f4 <_exit>

0800b39e <_malloc_usable_size_r>:
 800b39e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3a2:	1f18      	subs	r0, r3, #4
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bfbc      	itt	lt
 800b3a8:	580b      	ldrlt	r3, [r1, r0]
 800b3aa:	18c0      	addlt	r0, r0, r3
 800b3ac:	4770      	bx	lr

0800b3ae <__sfputc_r>:
 800b3ae:	6893      	ldr	r3, [r2, #8]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	b410      	push	{r4}
 800b3b6:	6093      	str	r3, [r2, #8]
 800b3b8:	da08      	bge.n	800b3cc <__sfputc_r+0x1e>
 800b3ba:	6994      	ldr	r4, [r2, #24]
 800b3bc:	42a3      	cmp	r3, r4
 800b3be:	db01      	blt.n	800b3c4 <__sfputc_r+0x16>
 800b3c0:	290a      	cmp	r1, #10
 800b3c2:	d103      	bne.n	800b3cc <__sfputc_r+0x1e>
 800b3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3c8:	f000 b932 	b.w	800b630 <__swbuf_r>
 800b3cc:	6813      	ldr	r3, [r2, #0]
 800b3ce:	1c58      	adds	r0, r3, #1
 800b3d0:	6010      	str	r0, [r2, #0]
 800b3d2:	7019      	strb	r1, [r3, #0]
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <__sfputs_r>:
 800b3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3de:	4606      	mov	r6, r0
 800b3e0:	460f      	mov	r7, r1
 800b3e2:	4614      	mov	r4, r2
 800b3e4:	18d5      	adds	r5, r2, r3
 800b3e6:	42ac      	cmp	r4, r5
 800b3e8:	d101      	bne.n	800b3ee <__sfputs_r+0x12>
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	e007      	b.n	800b3fe <__sfputs_r+0x22>
 800b3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f2:	463a      	mov	r2, r7
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	f7ff ffda 	bl	800b3ae <__sfputc_r>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	d1f3      	bne.n	800b3e6 <__sfputs_r+0xa>
 800b3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b400 <_vfiprintf_r>:
 800b400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b404:	460d      	mov	r5, r1
 800b406:	b09d      	sub	sp, #116	@ 0x74
 800b408:	4614      	mov	r4, r2
 800b40a:	4698      	mov	r8, r3
 800b40c:	4606      	mov	r6, r0
 800b40e:	b118      	cbz	r0, 800b418 <_vfiprintf_r+0x18>
 800b410:	6a03      	ldr	r3, [r0, #32]
 800b412:	b90b      	cbnz	r3, 800b418 <_vfiprintf_r+0x18>
 800b414:	f7fe f8ea 	bl	80095ec <__sinit>
 800b418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b41a:	07d9      	lsls	r1, r3, #31
 800b41c:	d405      	bmi.n	800b42a <_vfiprintf_r+0x2a>
 800b41e:	89ab      	ldrh	r3, [r5, #12]
 800b420:	059a      	lsls	r2, r3, #22
 800b422:	d402      	bmi.n	800b42a <_vfiprintf_r+0x2a>
 800b424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b426:	f7fe fa26 	bl	8009876 <__retarget_lock_acquire_recursive>
 800b42a:	89ab      	ldrh	r3, [r5, #12]
 800b42c:	071b      	lsls	r3, r3, #28
 800b42e:	d501      	bpl.n	800b434 <_vfiprintf_r+0x34>
 800b430:	692b      	ldr	r3, [r5, #16]
 800b432:	b99b      	cbnz	r3, 800b45c <_vfiprintf_r+0x5c>
 800b434:	4629      	mov	r1, r5
 800b436:	4630      	mov	r0, r6
 800b438:	f000 f938 	bl	800b6ac <__swsetup_r>
 800b43c:	b170      	cbz	r0, 800b45c <_vfiprintf_r+0x5c>
 800b43e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b440:	07dc      	lsls	r4, r3, #31
 800b442:	d504      	bpl.n	800b44e <_vfiprintf_r+0x4e>
 800b444:	f04f 30ff 	mov.w	r0, #4294967295
 800b448:	b01d      	add	sp, #116	@ 0x74
 800b44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44e:	89ab      	ldrh	r3, [r5, #12]
 800b450:	0598      	lsls	r0, r3, #22
 800b452:	d4f7      	bmi.n	800b444 <_vfiprintf_r+0x44>
 800b454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b456:	f7fe fa0f 	bl	8009878 <__retarget_lock_release_recursive>
 800b45a:	e7f3      	b.n	800b444 <_vfiprintf_r+0x44>
 800b45c:	2300      	movs	r3, #0
 800b45e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b460:	2320      	movs	r3, #32
 800b462:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b466:	f8cd 800c 	str.w	r8, [sp, #12]
 800b46a:	2330      	movs	r3, #48	@ 0x30
 800b46c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b61c <_vfiprintf_r+0x21c>
 800b470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b474:	f04f 0901 	mov.w	r9, #1
 800b478:	4623      	mov	r3, r4
 800b47a:	469a      	mov	sl, r3
 800b47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b480:	b10a      	cbz	r2, 800b486 <_vfiprintf_r+0x86>
 800b482:	2a25      	cmp	r2, #37	@ 0x25
 800b484:	d1f9      	bne.n	800b47a <_vfiprintf_r+0x7a>
 800b486:	ebba 0b04 	subs.w	fp, sl, r4
 800b48a:	d00b      	beq.n	800b4a4 <_vfiprintf_r+0xa4>
 800b48c:	465b      	mov	r3, fp
 800b48e:	4622      	mov	r2, r4
 800b490:	4629      	mov	r1, r5
 800b492:	4630      	mov	r0, r6
 800b494:	f7ff ffa2 	bl	800b3dc <__sfputs_r>
 800b498:	3001      	adds	r0, #1
 800b49a:	f000 80a7 	beq.w	800b5ec <_vfiprintf_r+0x1ec>
 800b49e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4a0:	445a      	add	r2, fp
 800b4a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 809f 	beq.w	800b5ec <_vfiprintf_r+0x1ec>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b8:	f10a 0a01 	add.w	sl, sl, #1
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	9307      	str	r3, [sp, #28]
 800b4c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4c6:	4654      	mov	r4, sl
 800b4c8:	2205      	movs	r2, #5
 800b4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ce:	4853      	ldr	r0, [pc, #332]	@ (800b61c <_vfiprintf_r+0x21c>)
 800b4d0:	f7f4 fe8e 	bl	80001f0 <memchr>
 800b4d4:	9a04      	ldr	r2, [sp, #16]
 800b4d6:	b9d8      	cbnz	r0, 800b510 <_vfiprintf_r+0x110>
 800b4d8:	06d1      	lsls	r1, r2, #27
 800b4da:	bf44      	itt	mi
 800b4dc:	2320      	movmi	r3, #32
 800b4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4e2:	0713      	lsls	r3, r2, #28
 800b4e4:	bf44      	itt	mi
 800b4e6:	232b      	movmi	r3, #43	@ 0x2b
 800b4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4f2:	d015      	beq.n	800b520 <_vfiprintf_r+0x120>
 800b4f4:	9a07      	ldr	r2, [sp, #28]
 800b4f6:	4654      	mov	r4, sl
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	f04f 0c0a 	mov.w	ip, #10
 800b4fe:	4621      	mov	r1, r4
 800b500:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b504:	3b30      	subs	r3, #48	@ 0x30
 800b506:	2b09      	cmp	r3, #9
 800b508:	d94b      	bls.n	800b5a2 <_vfiprintf_r+0x1a2>
 800b50a:	b1b0      	cbz	r0, 800b53a <_vfiprintf_r+0x13a>
 800b50c:	9207      	str	r2, [sp, #28]
 800b50e:	e014      	b.n	800b53a <_vfiprintf_r+0x13a>
 800b510:	eba0 0308 	sub.w	r3, r0, r8
 800b514:	fa09 f303 	lsl.w	r3, r9, r3
 800b518:	4313      	orrs	r3, r2
 800b51a:	9304      	str	r3, [sp, #16]
 800b51c:	46a2      	mov	sl, r4
 800b51e:	e7d2      	b.n	800b4c6 <_vfiprintf_r+0xc6>
 800b520:	9b03      	ldr	r3, [sp, #12]
 800b522:	1d19      	adds	r1, r3, #4
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	9103      	str	r1, [sp, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	bfbb      	ittet	lt
 800b52c:	425b      	neglt	r3, r3
 800b52e:	f042 0202 	orrlt.w	r2, r2, #2
 800b532:	9307      	strge	r3, [sp, #28]
 800b534:	9307      	strlt	r3, [sp, #28]
 800b536:	bfb8      	it	lt
 800b538:	9204      	strlt	r2, [sp, #16]
 800b53a:	7823      	ldrb	r3, [r4, #0]
 800b53c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b53e:	d10a      	bne.n	800b556 <_vfiprintf_r+0x156>
 800b540:	7863      	ldrb	r3, [r4, #1]
 800b542:	2b2a      	cmp	r3, #42	@ 0x2a
 800b544:	d132      	bne.n	800b5ac <_vfiprintf_r+0x1ac>
 800b546:	9b03      	ldr	r3, [sp, #12]
 800b548:	1d1a      	adds	r2, r3, #4
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	9203      	str	r2, [sp, #12]
 800b54e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b552:	3402      	adds	r4, #2
 800b554:	9305      	str	r3, [sp, #20]
 800b556:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b62c <_vfiprintf_r+0x22c>
 800b55a:	7821      	ldrb	r1, [r4, #0]
 800b55c:	2203      	movs	r2, #3
 800b55e:	4650      	mov	r0, sl
 800b560:	f7f4 fe46 	bl	80001f0 <memchr>
 800b564:	b138      	cbz	r0, 800b576 <_vfiprintf_r+0x176>
 800b566:	9b04      	ldr	r3, [sp, #16]
 800b568:	eba0 000a 	sub.w	r0, r0, sl
 800b56c:	2240      	movs	r2, #64	@ 0x40
 800b56e:	4082      	lsls	r2, r0
 800b570:	4313      	orrs	r3, r2
 800b572:	3401      	adds	r4, #1
 800b574:	9304      	str	r3, [sp, #16]
 800b576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b57a:	4829      	ldr	r0, [pc, #164]	@ (800b620 <_vfiprintf_r+0x220>)
 800b57c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b580:	2206      	movs	r2, #6
 800b582:	f7f4 fe35 	bl	80001f0 <memchr>
 800b586:	2800      	cmp	r0, #0
 800b588:	d03f      	beq.n	800b60a <_vfiprintf_r+0x20a>
 800b58a:	4b26      	ldr	r3, [pc, #152]	@ (800b624 <_vfiprintf_r+0x224>)
 800b58c:	bb1b      	cbnz	r3, 800b5d6 <_vfiprintf_r+0x1d6>
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	3307      	adds	r3, #7
 800b592:	f023 0307 	bic.w	r3, r3, #7
 800b596:	3308      	adds	r3, #8
 800b598:	9303      	str	r3, [sp, #12]
 800b59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b59c:	443b      	add	r3, r7
 800b59e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5a0:	e76a      	b.n	800b478 <_vfiprintf_r+0x78>
 800b5a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	2001      	movs	r0, #1
 800b5aa:	e7a8      	b.n	800b4fe <_vfiprintf_r+0xfe>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	3401      	adds	r4, #1
 800b5b0:	9305      	str	r3, [sp, #20]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	f04f 0c0a 	mov.w	ip, #10
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5be:	3a30      	subs	r2, #48	@ 0x30
 800b5c0:	2a09      	cmp	r2, #9
 800b5c2:	d903      	bls.n	800b5cc <_vfiprintf_r+0x1cc>
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d0c6      	beq.n	800b556 <_vfiprintf_r+0x156>
 800b5c8:	9105      	str	r1, [sp, #20]
 800b5ca:	e7c4      	b.n	800b556 <_vfiprintf_r+0x156>
 800b5cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e7f0      	b.n	800b5b8 <_vfiprintf_r+0x1b8>
 800b5d6:	ab03      	add	r3, sp, #12
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	462a      	mov	r2, r5
 800b5dc:	4b12      	ldr	r3, [pc, #72]	@ (800b628 <_vfiprintf_r+0x228>)
 800b5de:	a904      	add	r1, sp, #16
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f7fd fbbf 	bl	8008d64 <_printf_float>
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	1c78      	adds	r0, r7, #1
 800b5ea:	d1d6      	bne.n	800b59a <_vfiprintf_r+0x19a>
 800b5ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5ee:	07d9      	lsls	r1, r3, #31
 800b5f0:	d405      	bmi.n	800b5fe <_vfiprintf_r+0x1fe>
 800b5f2:	89ab      	ldrh	r3, [r5, #12]
 800b5f4:	059a      	lsls	r2, r3, #22
 800b5f6:	d402      	bmi.n	800b5fe <_vfiprintf_r+0x1fe>
 800b5f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5fa:	f7fe f93d 	bl	8009878 <__retarget_lock_release_recursive>
 800b5fe:	89ab      	ldrh	r3, [r5, #12]
 800b600:	065b      	lsls	r3, r3, #25
 800b602:	f53f af1f 	bmi.w	800b444 <_vfiprintf_r+0x44>
 800b606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b608:	e71e      	b.n	800b448 <_vfiprintf_r+0x48>
 800b60a:	ab03      	add	r3, sp, #12
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	462a      	mov	r2, r5
 800b610:	4b05      	ldr	r3, [pc, #20]	@ (800b628 <_vfiprintf_r+0x228>)
 800b612:	a904      	add	r1, sp, #16
 800b614:	4630      	mov	r0, r6
 800b616:	f7fd fe3d 	bl	8009294 <_printf_i>
 800b61a:	e7e4      	b.n	800b5e6 <_vfiprintf_r+0x1e6>
 800b61c:	0800dcc8 	.word	0x0800dcc8
 800b620:	0800dcd2 	.word	0x0800dcd2
 800b624:	08008d65 	.word	0x08008d65
 800b628:	0800b3dd 	.word	0x0800b3dd
 800b62c:	0800dcce 	.word	0x0800dcce

0800b630 <__swbuf_r>:
 800b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b632:	460e      	mov	r6, r1
 800b634:	4614      	mov	r4, r2
 800b636:	4605      	mov	r5, r0
 800b638:	b118      	cbz	r0, 800b642 <__swbuf_r+0x12>
 800b63a:	6a03      	ldr	r3, [r0, #32]
 800b63c:	b90b      	cbnz	r3, 800b642 <__swbuf_r+0x12>
 800b63e:	f7fd ffd5 	bl	80095ec <__sinit>
 800b642:	69a3      	ldr	r3, [r4, #24]
 800b644:	60a3      	str	r3, [r4, #8]
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	071a      	lsls	r2, r3, #28
 800b64a:	d501      	bpl.n	800b650 <__swbuf_r+0x20>
 800b64c:	6923      	ldr	r3, [r4, #16]
 800b64e:	b943      	cbnz	r3, 800b662 <__swbuf_r+0x32>
 800b650:	4621      	mov	r1, r4
 800b652:	4628      	mov	r0, r5
 800b654:	f000 f82a 	bl	800b6ac <__swsetup_r>
 800b658:	b118      	cbz	r0, 800b662 <__swbuf_r+0x32>
 800b65a:	f04f 37ff 	mov.w	r7, #4294967295
 800b65e:	4638      	mov	r0, r7
 800b660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	6922      	ldr	r2, [r4, #16]
 800b666:	1a98      	subs	r0, r3, r2
 800b668:	6963      	ldr	r3, [r4, #20]
 800b66a:	b2f6      	uxtb	r6, r6
 800b66c:	4283      	cmp	r3, r0
 800b66e:	4637      	mov	r7, r6
 800b670:	dc05      	bgt.n	800b67e <__swbuf_r+0x4e>
 800b672:	4621      	mov	r1, r4
 800b674:	4628      	mov	r0, r5
 800b676:	f7ff fdc1 	bl	800b1fc <_fflush_r>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d1ed      	bne.n	800b65a <__swbuf_r+0x2a>
 800b67e:	68a3      	ldr	r3, [r4, #8]
 800b680:	3b01      	subs	r3, #1
 800b682:	60a3      	str	r3, [r4, #8]
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	6022      	str	r2, [r4, #0]
 800b68a:	701e      	strb	r6, [r3, #0]
 800b68c:	6962      	ldr	r2, [r4, #20]
 800b68e:	1c43      	adds	r3, r0, #1
 800b690:	429a      	cmp	r2, r3
 800b692:	d004      	beq.n	800b69e <__swbuf_r+0x6e>
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	07db      	lsls	r3, r3, #31
 800b698:	d5e1      	bpl.n	800b65e <__swbuf_r+0x2e>
 800b69a:	2e0a      	cmp	r6, #10
 800b69c:	d1df      	bne.n	800b65e <__swbuf_r+0x2e>
 800b69e:	4621      	mov	r1, r4
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	f7ff fdab 	bl	800b1fc <_fflush_r>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d0d9      	beq.n	800b65e <__swbuf_r+0x2e>
 800b6aa:	e7d6      	b.n	800b65a <__swbuf_r+0x2a>

0800b6ac <__swsetup_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4b29      	ldr	r3, [pc, #164]	@ (800b754 <__swsetup_r+0xa8>)
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	6818      	ldr	r0, [r3, #0]
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	b118      	cbz	r0, 800b6c0 <__swsetup_r+0x14>
 800b6b8:	6a03      	ldr	r3, [r0, #32]
 800b6ba:	b90b      	cbnz	r3, 800b6c0 <__swsetup_r+0x14>
 800b6bc:	f7fd ff96 	bl	80095ec <__sinit>
 800b6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c4:	0719      	lsls	r1, r3, #28
 800b6c6:	d422      	bmi.n	800b70e <__swsetup_r+0x62>
 800b6c8:	06da      	lsls	r2, r3, #27
 800b6ca:	d407      	bmi.n	800b6dc <__swsetup_r+0x30>
 800b6cc:	2209      	movs	r2, #9
 800b6ce:	602a      	str	r2, [r5, #0]
 800b6d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6d4:	81a3      	strh	r3, [r4, #12]
 800b6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6da:	e033      	b.n	800b744 <__swsetup_r+0x98>
 800b6dc:	0758      	lsls	r0, r3, #29
 800b6de:	d512      	bpl.n	800b706 <__swsetup_r+0x5a>
 800b6e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6e2:	b141      	cbz	r1, 800b6f6 <__swsetup_r+0x4a>
 800b6e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6e8:	4299      	cmp	r1, r3
 800b6ea:	d002      	beq.n	800b6f2 <__swsetup_r+0x46>
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	f7fe ff27 	bl	800a540 <_free_r>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6fc:	81a3      	strh	r3, [r4, #12]
 800b6fe:	2300      	movs	r3, #0
 800b700:	6063      	str	r3, [r4, #4]
 800b702:	6923      	ldr	r3, [r4, #16]
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	f043 0308 	orr.w	r3, r3, #8
 800b70c:	81a3      	strh	r3, [r4, #12]
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	b94b      	cbnz	r3, 800b726 <__swsetup_r+0x7a>
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b71c:	d003      	beq.n	800b726 <__swsetup_r+0x7a>
 800b71e:	4621      	mov	r1, r4
 800b720:	4628      	mov	r0, r5
 800b722:	f000 f883 	bl	800b82c <__smakebuf_r>
 800b726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72a:	f013 0201 	ands.w	r2, r3, #1
 800b72e:	d00a      	beq.n	800b746 <__swsetup_r+0x9a>
 800b730:	2200      	movs	r2, #0
 800b732:	60a2      	str	r2, [r4, #8]
 800b734:	6962      	ldr	r2, [r4, #20]
 800b736:	4252      	negs	r2, r2
 800b738:	61a2      	str	r2, [r4, #24]
 800b73a:	6922      	ldr	r2, [r4, #16]
 800b73c:	b942      	cbnz	r2, 800b750 <__swsetup_r+0xa4>
 800b73e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b742:	d1c5      	bne.n	800b6d0 <__swsetup_r+0x24>
 800b744:	bd38      	pop	{r3, r4, r5, pc}
 800b746:	0799      	lsls	r1, r3, #30
 800b748:	bf58      	it	pl
 800b74a:	6962      	ldrpl	r2, [r4, #20]
 800b74c:	60a2      	str	r2, [r4, #8]
 800b74e:	e7f4      	b.n	800b73a <__swsetup_r+0x8e>
 800b750:	2000      	movs	r0, #0
 800b752:	e7f7      	b.n	800b744 <__swsetup_r+0x98>
 800b754:	20000044 	.word	0x20000044

0800b758 <_raise_r>:
 800b758:	291f      	cmp	r1, #31
 800b75a:	b538      	push	{r3, r4, r5, lr}
 800b75c:	4605      	mov	r5, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	d904      	bls.n	800b76c <_raise_r+0x14>
 800b762:	2316      	movs	r3, #22
 800b764:	6003      	str	r3, [r0, #0]
 800b766:	f04f 30ff 	mov.w	r0, #4294967295
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b76e:	b112      	cbz	r2, 800b776 <_raise_r+0x1e>
 800b770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b774:	b94b      	cbnz	r3, 800b78a <_raise_r+0x32>
 800b776:	4628      	mov	r0, r5
 800b778:	f000 f830 	bl	800b7dc <_getpid_r>
 800b77c:	4622      	mov	r2, r4
 800b77e:	4601      	mov	r1, r0
 800b780:	4628      	mov	r0, r5
 800b782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b786:	f000 b817 	b.w	800b7b8 <_kill_r>
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d00a      	beq.n	800b7a4 <_raise_r+0x4c>
 800b78e:	1c59      	adds	r1, r3, #1
 800b790:	d103      	bne.n	800b79a <_raise_r+0x42>
 800b792:	2316      	movs	r3, #22
 800b794:	6003      	str	r3, [r0, #0]
 800b796:	2001      	movs	r0, #1
 800b798:	e7e7      	b.n	800b76a <_raise_r+0x12>
 800b79a:	2100      	movs	r1, #0
 800b79c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	4798      	blx	r3
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	e7e0      	b.n	800b76a <_raise_r+0x12>

0800b7a8 <raise>:
 800b7a8:	4b02      	ldr	r3, [pc, #8]	@ (800b7b4 <raise+0xc>)
 800b7aa:	4601      	mov	r1, r0
 800b7ac:	6818      	ldr	r0, [r3, #0]
 800b7ae:	f7ff bfd3 	b.w	800b758 <_raise_r>
 800b7b2:	bf00      	nop
 800b7b4:	20000044 	.word	0x20000044

0800b7b8 <_kill_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	4d07      	ldr	r5, [pc, #28]	@ (800b7d8 <_kill_r+0x20>)
 800b7bc:	2300      	movs	r3, #0
 800b7be:	4604      	mov	r4, r0
 800b7c0:	4608      	mov	r0, r1
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	602b      	str	r3, [r5, #0]
 800b7c6:	f7f6 fc85 	bl	80020d4 <_kill>
 800b7ca:	1c43      	adds	r3, r0, #1
 800b7cc:	d102      	bne.n	800b7d4 <_kill_r+0x1c>
 800b7ce:	682b      	ldr	r3, [r5, #0]
 800b7d0:	b103      	cbz	r3, 800b7d4 <_kill_r+0x1c>
 800b7d2:	6023      	str	r3, [r4, #0]
 800b7d4:	bd38      	pop	{r3, r4, r5, pc}
 800b7d6:	bf00      	nop
 800b7d8:	200013b0 	.word	0x200013b0

0800b7dc <_getpid_r>:
 800b7dc:	f7f6 bc72 	b.w	80020c4 <_getpid>

0800b7e0 <__swhatbuf_r>:
 800b7e0:	b570      	push	{r4, r5, r6, lr}
 800b7e2:	460c      	mov	r4, r1
 800b7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e8:	2900      	cmp	r1, #0
 800b7ea:	b096      	sub	sp, #88	@ 0x58
 800b7ec:	4615      	mov	r5, r2
 800b7ee:	461e      	mov	r6, r3
 800b7f0:	da0d      	bge.n	800b80e <__swhatbuf_r+0x2e>
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7f8:	f04f 0100 	mov.w	r1, #0
 800b7fc:	bf14      	ite	ne
 800b7fe:	2340      	movne	r3, #64	@ 0x40
 800b800:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b804:	2000      	movs	r0, #0
 800b806:	6031      	str	r1, [r6, #0]
 800b808:	602b      	str	r3, [r5, #0]
 800b80a:	b016      	add	sp, #88	@ 0x58
 800b80c:	bd70      	pop	{r4, r5, r6, pc}
 800b80e:	466a      	mov	r2, sp
 800b810:	f000 f848 	bl	800b8a4 <_fstat_r>
 800b814:	2800      	cmp	r0, #0
 800b816:	dbec      	blt.n	800b7f2 <__swhatbuf_r+0x12>
 800b818:	9901      	ldr	r1, [sp, #4]
 800b81a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b81e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b822:	4259      	negs	r1, r3
 800b824:	4159      	adcs	r1, r3
 800b826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b82a:	e7eb      	b.n	800b804 <__swhatbuf_r+0x24>

0800b82c <__smakebuf_r>:
 800b82c:	898b      	ldrh	r3, [r1, #12]
 800b82e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b830:	079d      	lsls	r5, r3, #30
 800b832:	4606      	mov	r6, r0
 800b834:	460c      	mov	r4, r1
 800b836:	d507      	bpl.n	800b848 <__smakebuf_r+0x1c>
 800b838:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	6123      	str	r3, [r4, #16]
 800b840:	2301      	movs	r3, #1
 800b842:	6163      	str	r3, [r4, #20]
 800b844:	b003      	add	sp, #12
 800b846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b848:	ab01      	add	r3, sp, #4
 800b84a:	466a      	mov	r2, sp
 800b84c:	f7ff ffc8 	bl	800b7e0 <__swhatbuf_r>
 800b850:	9f00      	ldr	r7, [sp, #0]
 800b852:	4605      	mov	r5, r0
 800b854:	4639      	mov	r1, r7
 800b856:	4630      	mov	r0, r6
 800b858:	f7fe fee6 	bl	800a628 <_malloc_r>
 800b85c:	b948      	cbnz	r0, 800b872 <__smakebuf_r+0x46>
 800b85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b862:	059a      	lsls	r2, r3, #22
 800b864:	d4ee      	bmi.n	800b844 <__smakebuf_r+0x18>
 800b866:	f023 0303 	bic.w	r3, r3, #3
 800b86a:	f043 0302 	orr.w	r3, r3, #2
 800b86e:	81a3      	strh	r3, [r4, #12]
 800b870:	e7e2      	b.n	800b838 <__smakebuf_r+0xc>
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	6020      	str	r0, [r4, #0]
 800b876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	9b01      	ldr	r3, [sp, #4]
 800b87e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b882:	b15b      	cbz	r3, 800b89c <__smakebuf_r+0x70>
 800b884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b888:	4630      	mov	r0, r6
 800b88a:	f000 f81d 	bl	800b8c8 <_isatty_r>
 800b88e:	b128      	cbz	r0, 800b89c <__smakebuf_r+0x70>
 800b890:	89a3      	ldrh	r3, [r4, #12]
 800b892:	f023 0303 	bic.w	r3, r3, #3
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	81a3      	strh	r3, [r4, #12]
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	431d      	orrs	r5, r3
 800b8a0:	81a5      	strh	r5, [r4, #12]
 800b8a2:	e7cf      	b.n	800b844 <__smakebuf_r+0x18>

0800b8a4 <_fstat_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d07      	ldr	r5, [pc, #28]	@ (800b8c4 <_fstat_r+0x20>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	602b      	str	r3, [r5, #0]
 800b8b2:	f7f6 fc6f 	bl	8002194 <_fstat>
 800b8b6:	1c43      	adds	r3, r0, #1
 800b8b8:	d102      	bne.n	800b8c0 <_fstat_r+0x1c>
 800b8ba:	682b      	ldr	r3, [r5, #0]
 800b8bc:	b103      	cbz	r3, 800b8c0 <_fstat_r+0x1c>
 800b8be:	6023      	str	r3, [r4, #0]
 800b8c0:	bd38      	pop	{r3, r4, r5, pc}
 800b8c2:	bf00      	nop
 800b8c4:	200013b0 	.word	0x200013b0

0800b8c8 <_isatty_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4d06      	ldr	r5, [pc, #24]	@ (800b8e4 <_isatty_r+0x1c>)
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	4608      	mov	r0, r1
 800b8d2:	602b      	str	r3, [r5, #0]
 800b8d4:	f7f6 fc6e 	bl	80021b4 <_isatty>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_isatty_r+0x1a>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_isatty_r+0x1a>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	200013b0 	.word	0x200013b0

0800b8e8 <_init>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	bf00      	nop
 800b8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ee:	bc08      	pop	{r3}
 800b8f0:	469e      	mov	lr, r3
 800b8f2:	4770      	bx	lr

0800b8f4 <_fini>:
 800b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f6:	bf00      	nop
 800b8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8fa:	bc08      	pop	{r3}
 800b8fc:	469e      	mov	lr, r3
 800b8fe:	4770      	bx	lr
