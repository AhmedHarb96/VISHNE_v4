
VISHNE_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017fb8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b7c  08018148  08018148  00019148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801acc4  0801acc4  0001c2a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801acc4  0801acc4  0001bcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801accc  0801accc  0001c2a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801accc  0801accc  0001bccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801acd0  0801acd0  0001bcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a8  20000000  0801acd4  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c2a8  2**0
                  CONTENTS
 10 .bss          000025e8  200002a8  200002a8  0001c2a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002890  20002890  0001c2a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c2a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a2a4  00000000  00000000  0001c2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000085f8  00000000  00000000  0005657c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002cc8  00000000  00000000  0005eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000022c1  00000000  00000000  00061840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f743  00000000  00000000  00063b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00040591  00000000  00000000  00093244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f47f7  00000000  00000000  000d37d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c7fcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cef4  00000000  00000000  001c8010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001d4f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a8 	.word	0x200002a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018130 	.word	0x08018130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ac 	.word	0x200002ac
 80001cc:	08018130 	.word	0x08018130

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 8000f5e:	f000 f81f 	bl	8000fa0 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f002 fe78 	bl	8003c58 <BSP_PB_GetState>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <MX_BlueNRG_2_Init+0x40>)
 8000f6e:	701a      	strb	r2, [r3, #0]

  hci_init(APP_UserEvtRx, NULL);
 8000f70:	2100      	movs	r1, #0
 8000f72:	480a      	ldr	r0, [pc, #40]	@ (8000f9c <MX_BlueNRG_2_Init+0x44>)
 8000f74:	f00e fc9c 	bl	800f8b0 <hci_init>
  PRINT_DBG("\033[2J"); /* serial console clear screen */
  PRINT_DBG("\033[H");  /* serial console cursor to home */
  PRINT_DBG("BlueNRG-2 SensorDemo_BLESensor-App Application\r\n");

  /* Init Sensor Device */
  ret = Sensor_DeviceInit();
 8000f78:	f000 f820 	bl	8000fbc <Sensor_DeviceInit>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d004      	beq.n	8000f90 <MX_BlueNRG_2_Init+0x38>
  {
    BSP_LED_On(LED2);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f002 fda4 	bl	8003ad4 <BSP_LED_On>
    PRINT_DBG("SensorDeviceInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <MX_BlueNRG_2_Init+0x34>
#endif /* STM32L476xx */

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	08001abd 	.word	0x08001abd

08000fa0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f002 fe02 	bl	8003bb0 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f002 fd7f 	bl	8003ab0 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f002 febe 	bl	8003d34 <BSP_COM_Init>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <Sensor_DeviceInit>:
 *
 * @param  None
 * @retval None
 */
uint8_t Sensor_DeviceInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	@ 0x30
 8000fc0:	af06      	add	r7, sp, #24
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {SENSOR_DEMO_NAME};
 8000fc2:	4a4c      	ldr	r2, [pc, #304]	@ (80010f4 <Sensor_DeviceInit+0x138>)
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fcc:	6018      	str	r0, [r3, #0]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	8019      	strh	r1, [r3, #0]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	0c0a      	lsrs	r2, r1, #16
 8000fd6:	701a      	strb	r2, [r3, #0]
  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t  bdaddr_len_out;
  uint8_t  config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	75fb      	strb	r3, [r7, #23]

  /* Sw reset of the device */
  hci_reset();
 8000fdc:	f00d fa5d 	bl	800e49a <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 8000fe0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fe4:	f002 ffea 	bl	8003fbc <HAL_Delay>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000fe8:	1d3a      	adds	r2, r7, #4
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f886 	bl	8001100 <getBlueNRGVersion>

  PRINT_DBG("HWver %d\nFWver %d\r\n", hwVersion, fwVersion);

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 8000ff4:	1cf9      	adds	r1, r7, #3
 8000ff6:	7dfb      	ldrb	r3, [r7, #23]
 8000ff8:	4a3f      	ldr	r2, [pc, #252]	@ (80010f8 <Sensor_DeviceInit+0x13c>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00e fac9 	bl	800f592 <aci_hal_read_config_data>
 8001000:	4603      	mov	r3, r0
 8001002:	75bb      	strb	r3, [r7, #22]

  if (ret) {
    PRINT_DBG("Read Static Random address failed.\r\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8001004:	4b3c      	ldr	r3, [pc, #240]	@ (80010f8 <Sensor_DeviceInit+0x13c>)
 8001006:	795b      	ldrb	r3, [r3, #5]
 8001008:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800100c:	2bc0      	cmp	r3, #192	@ 0xc0
 800100e:	d001      	beq.n	8001014 <Sensor_DeviceInit+0x58>
    PRINT_DBG("Static Random address not well formed.\r\n");
    while(1);
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <Sensor_DeviceInit+0x54>
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	4a38      	ldr	r2, [pc, #224]	@ (80010f8 <Sensor_DeviceInit+0x13c>)
 8001018:	4619      	mov	r1, r3
 800101a:	2000      	movs	r0, #0
 800101c:	f00e fa2b 	bl	800f476 <aci_hal_write_config_data>
 8001020:	4603      	mov	r3, r0
 8001022:	75bb      	strb	r3, [r7, #22]
  else {
    PRINT_DBG("aci_hal_write_config_data --> SUCCESS\r\n");
  }

  /* Set the TX power -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 8001024:	2104      	movs	r1, #4
 8001026:	2001      	movs	r0, #1
 8001028:	f00e fb37 	bl	800f69a <aci_hal_set_tx_power_level>
  else {
    PRINT_DBG("aci_hal_set_tx_power_level --> SUCCESS\r\n");
  }

  /* GATT Init */
  ret = aci_gatt_init();
 800102c:	f00d ff0b 	bl	800ee46 <aci_gatt_init>
 8001030:	4603      	mov	r3, r0
 8001032:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS) {
 8001034:	7dbb      	ldrb	r3, [r7, #22]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <Sensor_DeviceInit+0x82>
    PRINT_DBG("aci_gatt_init() failed: 0x%02x\r\n", ret);
    return ret;
 800103a:	7dbb      	ldrb	r3, [r7, #22]
 800103c:	e055      	b.n	80010ea <Sensor_DeviceInit+0x12e>
  else {
    PRINT_DBG("aci_gatt_init() --> SUCCESS\r\n");
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0x00, 0x07, &service_handle, &dev_name_char_handle,
 800103e:	f107 0214 	add.w	r2, r7, #20
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f107 0312 	add.w	r3, r7, #18
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4613      	mov	r3, r2
 8001050:	2207      	movs	r2, #7
 8001052:	2100      	movs	r1, #0
 8001054:	2001      	movs	r0, #1
 8001056:	f00d fda5 	bl	800eba4 <aci_gap_init>
 800105a:	4603      	mov	r3, r0
 800105c:	75bb      	strb	r3, [r7, #22]
                     &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS) {
 800105e:	7dbb      	ldrb	r3, [r7, #22]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <Sensor_DeviceInit+0xac>
    PRINT_DBG("aci_gap_init() failed: 0x%02x\r\n", ret);
    return ret;
 8001064:	7dbb      	ldrb	r3, [r7, #22]
 8001066:	e040      	b.n	80010ea <Sensor_DeviceInit+0x12e>
  else {
    PRINT_DBG("aci_gap_init() --> SUCCESS\r\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name),
 8001068:	8ab8      	ldrh	r0, [r7, #20]
 800106a:	8a79      	ldrh	r1, [r7, #18]
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2307      	movs	r3, #7
 8001074:	2200      	movs	r2, #0
 8001076:	f00e f8ee 	bl	800f256 <aci_gatt_update_char_value>
 800107a:	4603      	mov	r3, r0
 800107c:	75bb      	strb	r3, [r7, #22]
                                   device_name);
  if (ret != BLE_STATUS_SUCCESS) {
 800107e:	7dbb      	ldrb	r3, [r7, #22]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <Sensor_DeviceInit+0xcc>
    PRINT_DBG("aci_gatt_update_char_value() failed: 0x%02x\r\n", ret);
    return ret;
 8001084:	7dbb      	ldrb	r3, [r7, #22]
 8001086:	e030      	b.n	80010ea <Sensor_DeviceInit+0x12e>

  /*
   * Clear security database: this implies that each time the application is executed
   * the full bonding process is executed (with PassKey generation and setting).
   */
  ret = aci_gap_clear_security_db();
 8001088:	f00d feb4 	bl	800edf4 <aci_gap_clear_security_db>
 800108c:	4603      	mov	r3, r0
 800108e:	75bb      	strb	r3, [r7, #22]

  /*
   * Set the I/O capability otherwise the Central device (e.g. the smartphone) will
   * propose a PIN that will be accepted without any control.
   */
  if (aci_gap_set_io_capability(IO_CAP_DISPLAY_ONLY)==BLE_STATUS_SUCCESS) {
 8001090:	2000      	movs	r0, #0
 8001092:	f00d fbed 	bl	800e870 <aci_gap_set_io_capability>
  } else {
    PRINT_DBG("Error Setting I/O Capability\r\n");
  }

  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
  ret = aci_gap_set_authentication_requirement(BONDING,
 8001096:	2300      	movs	r3, #0
 8001098:	9304      	str	r3, [sp, #16]
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <Sensor_DeviceInit+0x140>)
 800109c:	9303      	str	r3, [sp, #12]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2310      	movs	r3, #16
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	2307      	movs	r3, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2300      	movs	r3, #0
 80010ac:	2201      	movs	r2, #1
 80010ae:	2101      	movs	r1, #1
 80010b0:	2001      	movs	r0, #1
 80010b2:	f00d fc3a 	bl	800e92a <aci_gap_set_authentication_requirement>
 80010b6:	4603      	mov	r3, r0
 80010b8:	75bb      	strb	r3, [r7, #22]
                                               16,
                                               DONOT_USE_FIXED_PIN_FOR_PAIRING,
                                               PERIPHERAL_PASS_KEY,
                                               0x00); /* - 0x00: Public Identity Address
                                                         - 0x01: Random (static) Identity Address */
  if (ret != BLE_STATUS_SUCCESS) {
 80010ba:	7dbb      	ldrb	r3, [r7, #22]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <Sensor_DeviceInit+0x108>
    PRINT_DBG("aci_gap_set_authentication_requirement()failed: 0x%02x\r\n", ret);
    return ret;
 80010c0:	7dbb      	ldrb	r3, [r7, #22]
 80010c2:	e012      	b.n	80010ea <Sensor_DeviceInit+0x12e>
    PRINT_DBG("aci_gap_set_authentication_requirement() --> SUCCESS\r\n");
  }

  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");

  ret = Add_HWServW2ST_Service();
 80010c4:	f000 f920 	bl	8001308 <Add_HWServW2ST_Service>
 80010c8:	4603      	mov	r3, r0
 80010ca:	75bb      	strb	r3, [r7, #22]
  if (ret == BLE_STATUS_SUCCESS) {
 80010cc:	7dbb      	ldrb	r3, [r7, #22]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <Sensor_DeviceInit+0x11a>
    PRINT_DBG("BlueNRG2 HW service added successfully.\r\n");
  }
  else {
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
    while(1);
 80010d2:	bf00      	nop
 80010d4:	e7fd      	b.n	80010d2 <Sensor_DeviceInit+0x116>
  }

  ret = Add_SWServW2ST_Service();
 80010d6:	f000 f9f1 	bl	80014bc <Add_SWServW2ST_Service>
 80010da:	4603      	mov	r3, r0
 80010dc:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS) {
 80010de:	7dbb      	ldrb	r3, [r7, #22]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <Sensor_DeviceInit+0x12c>
     PRINT_DBG("BlueNRG2 SW service added successfully.\r\n");
  }
  else {
     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
     while(1);
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <Sensor_DeviceInit+0x128>
     PRINT_DBG("Error while adding BlueNRG2 Console service: 0x%02x\r\n", ret);
     while(1);
  }

#endif /* STM32L476xx */
  return BLE_STATUS_SUCCESS;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	08018148 	.word	0x08018148
 80010f8:	200002c4 	.word	0x200002c4
 80010fc:	0001e240 	.word	0x0001e240

08001100 <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af02      	add	r7, sp, #8
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 800110a:	f107 0410 	add.w	r4, r7, #16
 800110e:	f107 0215 	add.w	r2, r7, #21
 8001112:	f107 0112 	add.w	r1, r7, #18
 8001116:	f107 0016 	add.w	r0, r7, #22
 800111a:	f107 030e 	add.w	r3, r7, #14
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	4623      	mov	r3, r4
 8001122:	f00d f9e3 	bl	800e4ec <hci_read_local_version_information>
 8001126:	4603      	mov	r3, r0
 8001128:	75fb      	strb	r3, [r7, #23]
                                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d126      	bne.n	800117e <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8001130:	8a7b      	ldrh	r3, [r7, #18]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	b29b      	uxth	r3, r3
 8001136:	b2da      	uxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800113c:	8a7b      	ldrh	r3, [r7, #18]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b29a      	uxth	r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	b21a      	sxth	r2, r3
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	b29b      	uxth	r3, r3
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	b21b      	sxth	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	b21b      	sxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b21b      	sxth	r3, r3
 800115e:	b29a      	uxth	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b21a      	sxth	r2, r3
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	b21b      	sxth	r3, r3
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800117e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001180:	4618      	mov	r0, r3
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}

08001188 <BSP_PB_Callback>:
 *
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001192:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <BSP_PB_Callback+0x1c>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	200002ca 	.word	0x200002ca

080011a8 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4604      	mov	r4, r0
 80011b0:	4608      	mov	r0, r1
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	4603      	mov	r3, r0
 80011bc:	80bb      	strh	r3, [r7, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	71bb      	strb	r3, [r7, #6]
 80011c2:	4613      	mov	r3, r2
 80011c4:	70fb      	strb	r3, [r7, #3]
  connected = TRUE;
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <hci_le_connection_complete_event+0x44>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
#if (!SECURE_PAIRING)
  pairing = TRUE;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <hci_le_connection_complete_event+0x48>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
  paired = TRUE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <hci_le_connection_complete_event+0x4c>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
#endif
  connection_handle = Connection_Handle;
 80011d8:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <hci_le_connection_complete_event+0x50>)
 80011da:	88bb      	ldrh	r3, [r7, #4]
 80011dc:	8013      	strh	r3, [r2, #0]

  PRINT_DBG("Connected (%02x %02x %02x %02x %02x %02x)\r\n", Peer_Address[5], Peer_Address[4], Peer_Address[3],
                                                             Peer_Address[2], Peer_Address[1], Peer_Address[0]);

  BSP_LED_Off(LED2); //activity led
 80011de:	2000      	movs	r0, #0
 80011e0:	f002 fc8e 	bl	8003b00 <BSP_LED_Off>
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd90      	pop	{r4, r7, pc}
 80011ec:	200002fe 	.word	0x200002fe
 80011f0:	200002ff 	.word	0x200002ff
 80011f4:	20000300 	.word	0x20000300
 80011f8:	200002fc 	.word	0x200002fc

080011fc <hci_disconnection_complete_event>:
 * @retval See file bluenrg1_events.h
 */
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	460b      	mov	r3, r1
 8001208:	80bb      	strh	r3, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	71bb      	strb	r3, [r7, #6]
  connected = FALSE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <hci_disconnection_complete_event+0x40>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
  pairing = FALSE;
 8001214:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <hci_disconnection_complete_event+0x44>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
  paired = FALSE;
 800121a:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <hci_disconnection_complete_event+0x48>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]

  /* Make the device connectable again */
  set_connectable = TRUE;
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <hci_disconnection_complete_event+0x4c>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
  connection_handle = 0;
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <hci_disconnection_complete_event+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Disconnected (0x%02x)\r\n", Reason);

  BSP_LED_On(LED2); //activity led
 800122c:	2000      	movs	r0, #0
 800122e:	f002 fc51 	bl	8003ad4 <BSP_LED_On>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200002fe 	.word	0x200002fe
 8001240:	200002ff 	.word	0x200002ff
 8001244:	20000300 	.word	0x20000300
 8001248:	20000001 	.word	0x20000001
 800124c:	200002fc 	.word	0x200002fc

08001250 <aci_gatt_read_permit_req_event>:
 * @retval See file bluenrg1_events.h
 */
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
 800125a:	460b      	mov	r3, r1
 800125c:	80bb      	strh	r3, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	807b      	strh	r3, [r7, #2]
  Read_Request_CB(Attribute_Handle);
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fa89 	bl	800177c <Read_Request_CB>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attribute_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 8001272:	b590      	push	{r4, r7, lr}
 8001274:	b085      	sub	sp, #20
 8001276:	af02      	add	r7, sp, #8
 8001278:	4604      	mov	r4, r0
 800127a:	4608      	mov	r0, r1
 800127c:	4611      	mov	r1, r2
 800127e:	461a      	mov	r2, r3
 8001280:	4623      	mov	r3, r4
 8001282:	80fb      	strh	r3, [r7, #6]
 8001284:	4603      	mov	r3, r0
 8001286:	80bb      	strh	r3, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	803b      	strh	r3, [r7, #0]
  Attribute_Modified_Request_CB(Connection_Handle, Attribute_Handle, Offset, Attr_Data_Length, Attr_Data);
 8001290:	883b      	ldrh	r3, [r7, #0]
 8001292:	b2dc      	uxtb	r4, r3
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	88b9      	ldrh	r1, [r7, #4]
 8001298:	88f8      	ldrh	r0, [r7, #6]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	4623      	mov	r3, r4
 80012a0:	f000 fb36 	bl	8001910 <Attribute_Modified_Request_CB>
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}

080012ac <aci_gap_pass_key_req_event>:
 *         aci_gap_pass_key_resp command.
 * @param  See file bluenrg1_events.h
 * @retval See file bluenrg1_events.h
 */
void aci_gap_pass_key_req_event(uint16_t Connection_Handle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
  uint8_t ret;

  ret = aci_gap_pass_key_resp(connection_handle, PERIPHERAL_PASS_KEY);
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <aci_gap_pass_key_req_event+0x24>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4905      	ldr	r1, [pc, #20]	@ (80012d4 <aci_gap_pass_key_req_event+0x28>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f00d fc00 	bl	800eac4 <aci_gap_pass_key_resp>
 80012c4:	4603      	mov	r3, r0
 80012c6:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINT_DBG("aci_gap_pass_key_resp failed:0x%02x\r\n", ret);
  } else {
    PRINT_DBG("aci_gap_pass_key_resp OK\r\n");
  }
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200002fc 	.word	0x200002fc
 80012d4:	0001e240 	.word	0x0001e240

080012d8 <aci_gap_pairing_complete_event>:
 *         timeout has occurred so that the upper layer can decide to disconnect the link.
 * @param  See file bluenrg1_events.h
 * @retval See file bluenrg1_events.h
 */
void aci_gap_pairing_complete_event(uint16_t connection_handle, uint8_t status, uint8_t reason)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
 80012e2:	460b      	mov	r3, r1
 80012e4:	717b      	strb	r3, [r7, #5]
 80012e6:	4613      	mov	r3, r2
 80012e8:	713b      	strb	r3, [r7, #4]
  if (status == 0x02) { /* Pairing Failed */
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d002      	beq.n	80012f6 <aci_gap_pairing_complete_event+0x1e>
    PRINT_DBG("aci_gap_pairing_complete_event failed:0x%02x with reason 0x%02x\r\n", status, reason);
  }
  else {
    paired = TRUE;
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <aci_gap_pairing_complete_event+0x2c>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
    PRINT_DBG("aci_gap_pairing_complete_event with status 0x%02x\r\n", status);
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000300 	.word	0x20000300

08001308 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b08d      	sub	sp, #52	@ 0x34
 800130c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 5;
 800130e:	2305      	movs	r3, #5
 8001310:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	461a      	mov	r2, r3
 8001316:	0052      	lsls	r2, r2, #1
 8001318:	4413      	add	r3, r2
 800131a:	b2db      	uxtb	r3, r3
 800131c:	3301      	adds	r3, #1
 800131e:	75bb      	strb	r3, [r7, #22]

  /* add HW_SENS_W2ST service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001320:	231b      	movs	r3, #27
 8001322:	713b      	strb	r3, [r7, #4]
 8001324:	23c5      	movs	r3, #197	@ 0xc5
 8001326:	717b      	strb	r3, [r7, #5]
 8001328:	23d5      	movs	r3, #213	@ 0xd5
 800132a:	71bb      	strb	r3, [r7, #6]
 800132c:	23a5      	movs	r3, #165	@ 0xa5
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	2302      	movs	r3, #2
 8001332:	723b      	strb	r3, [r7, #8]
 8001334:	2300      	movs	r3, #0
 8001336:	727b      	strb	r3, [r7, #9]
 8001338:	23b4      	movs	r3, #180	@ 0xb4
 800133a:	72bb      	strb	r3, [r7, #10]
 800133c:	239a      	movs	r3, #154	@ 0x9a
 800133e:	72fb      	strb	r3, [r7, #11]
 8001340:	23e1      	movs	r3, #225	@ 0xe1
 8001342:	733b      	strb	r3, [r7, #12]
 8001344:	2311      	movs	r3, #17
 8001346:	737b      	strb	r3, [r7, #13]
 8001348:	2301      	movs	r3, #1
 800134a:	73bb      	strb	r3, [r7, #14]
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	2300      	movs	r3, #0
 8001352:	743b      	strb	r3, [r7, #16]
 8001354:	2300      	movs	r3, #0
 8001356:	747b      	strb	r3, [r7, #17]
 8001358:	2300      	movs	r3, #0
 800135a:	74bb      	strb	r3, [r7, #18]
 800135c:	2300      	movs	r3, #0
 800135e:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001360:	4b51      	ldr	r3, [pc, #324]	@ (80014a8 <Add_HWServW2ST_Service+0x1a0>)
 8001362:	461c      	mov	r4, r3
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 800136c:	7dbb      	ldrb	r3, [r7, #22]
 800136e:	4a4f      	ldr	r2, [pc, #316]	@ (80014ac <Add_HWServW2ST_Service+0x1a4>)
 8001370:	9200      	str	r2, [sp, #0]
 8001372:	2201      	movs	r2, #1
 8001374:	494c      	ldr	r1, [pc, #304]	@ (80014a8 <Add_HWServW2ST_Service+0x1a0>)
 8001376:	2002      	movs	r0, #2
 8001378:	f00d fd8f 	bl	800ee9a <aci_gatt_add_service>
 800137c:	4603      	mov	r3, r0
 800137e:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001380:	7d7b      	ldrb	r3, [r7, #21]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <Add_HWServW2ST_Service+0x82>
    return BLE_STATUS_ERROR;
 8001386:	2347      	movs	r3, #71	@ 0x47
 8001388:	e08a      	b.n	80014a0 <Add_HWServW2ST_Service+0x198>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 800138a:	231b      	movs	r3, #27
 800138c:	713b      	strb	r3, [r7, #4]
 800138e:	23c5      	movs	r3, #197	@ 0xc5
 8001390:	717b      	strb	r3, [r7, #5]
 8001392:	23d5      	movs	r3, #213	@ 0xd5
 8001394:	71bb      	strb	r3, [r7, #6]
 8001396:	23a5      	movs	r3, #165	@ 0xa5
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	2302      	movs	r3, #2
 800139c:	723b      	strb	r3, [r7, #8]
 800139e:	2300      	movs	r3, #0
 80013a0:	727b      	strb	r3, [r7, #9]
 80013a2:	2336      	movs	r3, #54	@ 0x36
 80013a4:	72bb      	strb	r3, [r7, #10]
 80013a6:	23ac      	movs	r3, #172	@ 0xac
 80013a8:	72fb      	strb	r3, [r7, #11]
 80013aa:	23e1      	movs	r3, #225	@ 0xe1
 80013ac:	733b      	strb	r3, [r7, #12]
 80013ae:	2311      	movs	r3, #17
 80013b0:	737b      	strb	r3, [r7, #13]
 80013b2:	2301      	movs	r3, #1
 80013b4:	73bb      	strb	r3, [r7, #14]
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	2300      	movs	r3, #0
 80013bc:	743b      	strb	r3, [r7, #16]
 80013be:	2300      	movs	r3, #0
 80013c0:	747b      	strb	r3, [r7, #17]
 80013c2:	2300      	movs	r3, #0
 80013c4:	74bb      	strb	r3, [r7, #18]
 80013c6:	2300      	movs	r3, #0
 80013c8:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80013ca:	7cbb      	ldrb	r3, [r7, #18]
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80013d4:	7cbb      	ldrb	r3, [r7, #18]
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <Add_HWServW2ST_Service+0x1a8>)
 80013e0:	461c      	mov	r4, r3
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 80013ea:	4b30      	ldr	r3, [pc, #192]	@ (80014ac <Add_HWServW2ST_Service+0x1a4>)
 80013ec:	8818      	ldrh	r0, [r3, #0]
 80013ee:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <Add_HWServW2ST_Service+0x1ac>)
 80013f0:	9305      	str	r3, [sp, #20]
 80013f2:	2300      	movs	r3, #0
 80013f4:	9304      	str	r3, [sp, #16]
 80013f6:	2310      	movs	r3, #16
 80013f8:	9303      	str	r3, [sp, #12]
 80013fa:	2304      	movs	r3, #4
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	2300      	movs	r3, #0
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2312      	movs	r3, #18
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2308      	movs	r3, #8
 8001408:	4a29      	ldr	r2, [pc, #164]	@ (80014b0 <Add_HWServW2ST_Service+0x1a8>)
 800140a:	2102      	movs	r1, #2
 800140c:	f00d fe1b 	bl	800f046 <aci_gatt_add_char>
 8001410:	4603      	mov	r3, r0
 8001412:	757b      	strb	r3, [r7, #21]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001414:	7d7b      	ldrb	r3, [r7, #21]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <Add_HWServW2ST_Service+0x116>
    return BLE_STATUS_ERROR;
 800141a:	2347      	movs	r3, #71	@ 0x47
 800141c:	e040      	b.n	80014a0 <Add_HWServW2ST_Service+0x198>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 800141e:	231b      	movs	r3, #27
 8001420:	713b      	strb	r3, [r7, #4]
 8001422:	23c5      	movs	r3, #197	@ 0xc5
 8001424:	717b      	strb	r3, [r7, #5]
 8001426:	23d5      	movs	r3, #213	@ 0xd5
 8001428:	71bb      	strb	r3, [r7, #6]
 800142a:	23a5      	movs	r3, #165	@ 0xa5
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	2302      	movs	r3, #2
 8001430:	723b      	strb	r3, [r7, #8]
 8001432:	2300      	movs	r3, #0
 8001434:	727b      	strb	r3, [r7, #9]
 8001436:	2336      	movs	r3, #54	@ 0x36
 8001438:	72bb      	strb	r3, [r7, #10]
 800143a:	23ac      	movs	r3, #172	@ 0xac
 800143c:	72fb      	strb	r3, [r7, #11]
 800143e:	23e1      	movs	r3, #225	@ 0xe1
 8001440:	733b      	strb	r3, [r7, #12]
 8001442:	2311      	movs	r3, #17
 8001444:	737b      	strb	r3, [r7, #13]
 8001446:	2301      	movs	r3, #1
 8001448:	73bb      	strb	r3, [r7, #14]
 800144a:	2300      	movs	r3, #0
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	2300      	movs	r3, #0
 8001450:	743b      	strb	r3, [r7, #16]
 8001452:	2300      	movs	r3, #0
 8001454:	747b      	strb	r3, [r7, #17]
 8001456:	23e0      	movs	r3, #224	@ 0xe0
 8001458:	74bb      	strb	r3, [r7, #18]
 800145a:	2300      	movs	r3, #0
 800145c:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <Add_HWServW2ST_Service+0x1a8>)
 8001460:	461c      	mov	r4, r3
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001466:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <Add_HWServW2ST_Service+0x1a4>)
 800146c:	8818      	ldrh	r0, [r3, #0]
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <Add_HWServW2ST_Service+0x1b0>)
 8001470:	9305      	str	r3, [sp, #20]
 8001472:	2300      	movs	r3, #0
 8001474:	9304      	str	r3, [sp, #16]
 8001476:	2310      	movs	r3, #16
 8001478:	9303      	str	r3, [sp, #12]
 800147a:	2304      	movs	r3, #4
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	2300      	movs	r3, #0
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	2310      	movs	r3, #16
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2314      	movs	r3, #20
 8001488:	4a09      	ldr	r2, [pc, #36]	@ (80014b0 <Add_HWServW2ST_Service+0x1a8>)
 800148a:	2102      	movs	r1, #2
 800148c:	f00d fddb 	bl	800f046 <aci_gatt_add_char>
 8001490:	4603      	mov	r3, r0
 8001492:	757b      	strb	r3, [r7, #21]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001494:	7d7b      	ldrb	r3, [r7, #21]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <Add_HWServW2ST_Service+0x196>
    return BLE_STATUS_ERROR;
 800149a:	2347      	movs	r3, #71	@ 0x47
 800149c:	e000      	b.n	80014a0 <Add_HWServW2ST_Service+0x198>

  return BLE_STATUS_SUCCESS;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	200002d8 	.word	0x200002d8
 80014ac:	200002cc 	.word	0x200002cc
 80014b0:	200002e8 	.word	0x200002e8
 80014b4:	200002ce 	.word	0x200002ce
 80014b8:	200002d0 	.word	0x200002d0

080014bc <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b08d      	sub	sp, #52	@ 0x34
 80014c0:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	461a      	mov	r2, r3
 80014ca:	0052      	lsls	r2, r2, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	75bb      	strb	r3, [r7, #22]

  /* add SW_SENS_W2ST service */
  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80014d4:	231b      	movs	r3, #27
 80014d6:	713b      	strb	r3, [r7, #4]
 80014d8:	23c5      	movs	r3, #197	@ 0xc5
 80014da:	717b      	strb	r3, [r7, #5]
 80014dc:	23d5      	movs	r3, #213	@ 0xd5
 80014de:	71bb      	strb	r3, [r7, #6]
 80014e0:	23a5      	movs	r3, #165	@ 0xa5
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	2302      	movs	r3, #2
 80014e6:	723b      	strb	r3, [r7, #8]
 80014e8:	2300      	movs	r3, #0
 80014ea:	727b      	strb	r3, [r7, #9]
 80014ec:	23b4      	movs	r3, #180	@ 0xb4
 80014ee:	72bb      	strb	r3, [r7, #10]
 80014f0:	239a      	movs	r3, #154	@ 0x9a
 80014f2:	72fb      	strb	r3, [r7, #11]
 80014f4:	23e1      	movs	r3, #225	@ 0xe1
 80014f6:	733b      	strb	r3, [r7, #12]
 80014f8:	2311      	movs	r3, #17
 80014fa:	737b      	strb	r3, [r7, #13]
 80014fc:	2302      	movs	r3, #2
 80014fe:	73bb      	strb	r3, [r7, #14]
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	2300      	movs	r3, #0
 8001506:	743b      	strb	r3, [r7, #16]
 8001508:	2300      	movs	r3, #0
 800150a:	747b      	strb	r3, [r7, #17]
 800150c:	2300      	movs	r3, #0
 800150e:	74bb      	strb	r3, [r7, #18]
 8001510:	2300      	movs	r3, #0
 8001512:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001514:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <Add_SWServW2ST_Service+0x110>)
 8001516:	461c      	mov	r4, r3
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800151c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8001520:	7dbb      	ldrb	r3, [r7, #22]
 8001522:	4a2b      	ldr	r2, [pc, #172]	@ (80015d0 <Add_SWServW2ST_Service+0x114>)
 8001524:	9200      	str	r2, [sp, #0]
 8001526:	2201      	movs	r2, #1
 8001528:	4928      	ldr	r1, [pc, #160]	@ (80015cc <Add_SWServW2ST_Service+0x110>)
 800152a:	2002      	movs	r0, #2
 800152c:	f00d fcb5 	bl	800ee9a <aci_gatt_add_service>
 8001530:	4603      	mov	r3, r0
 8001532:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001534:	7d7b      	ldrb	r3, [r7, #21]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d13f      	bne.n	80015ba <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 800153a:	231b      	movs	r3, #27
 800153c:	713b      	strb	r3, [r7, #4]
 800153e:	23c5      	movs	r3, #197	@ 0xc5
 8001540:	717b      	strb	r3, [r7, #5]
 8001542:	23d5      	movs	r3, #213	@ 0xd5
 8001544:	71bb      	strb	r3, [r7, #6]
 8001546:	23a5      	movs	r3, #165	@ 0xa5
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	2302      	movs	r3, #2
 800154c:	723b      	strb	r3, [r7, #8]
 800154e:	2300      	movs	r3, #0
 8001550:	727b      	strb	r3, [r7, #9]
 8001552:	2336      	movs	r3, #54	@ 0x36
 8001554:	72bb      	strb	r3, [r7, #10]
 8001556:	23ac      	movs	r3, #172	@ 0xac
 8001558:	72fb      	strb	r3, [r7, #11]
 800155a:	23e1      	movs	r3, #225	@ 0xe1
 800155c:	733b      	strb	r3, [r7, #12]
 800155e:	2311      	movs	r3, #17
 8001560:	737b      	strb	r3, [r7, #13]
 8001562:	2301      	movs	r3, #1
 8001564:	73bb      	strb	r3, [r7, #14]
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	2300      	movs	r3, #0
 800156c:	743b      	strb	r3, [r7, #16]
 800156e:	2301      	movs	r3, #1
 8001570:	747b      	strb	r3, [r7, #17]
 8001572:	2300      	movs	r3, #0
 8001574:	74bb      	strb	r3, [r7, #18]
 8001576:	2300      	movs	r3, #0
 8001578:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <Add_SWServW2ST_Service+0x118>)
 800157c:	461c      	mov	r4, r3
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8001586:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <Add_SWServW2ST_Service+0x114>)
 8001588:	8818      	ldrh	r0, [r3, #0]
 800158a:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <Add_SWServW2ST_Service+0x11c>)
 800158c:	9305      	str	r3, [sp, #20]
 800158e:	2300      	movs	r3, #0
 8001590:	9304      	str	r3, [sp, #16]
 8001592:	2310      	movs	r3, #16
 8001594:	9303      	str	r3, [sp, #12]
 8001596:	2304      	movs	r3, #4
 8001598:	9302      	str	r3, [sp, #8]
 800159a:	2300      	movs	r3, #0
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	2310      	movs	r3, #16
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2308      	movs	r3, #8
 80015a4:	4a0b      	ldr	r2, [pc, #44]	@ (80015d4 <Add_SWServW2ST_Service+0x118>)
 80015a6:	2102      	movs	r1, #2
 80015a8:	f00d fd4d 	bl	800f046 <aci_gatt_add_char>
 80015ac:	4603      	mov	r3, r0
 80015ae:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80015b0:	7d7b      	ldrb	r3, [r7, #21]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d103      	bne.n	80015be <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e003      	b.n	80015c2 <Add_SWServW2ST_Service+0x106>
    goto fail;
 80015ba:	bf00      	nop
 80015bc:	e000      	b.n	80015c0 <Add_SWServW2ST_Service+0x104>
    goto fail;
 80015be:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 80015c0:	2347      	movs	r3, #71	@ 0x47
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002d8 	.word	0x200002d8
 80015d0:	200002d2 	.word	0x200002d2
 80015d4:	200002e8 	.word	0x200002e8
 80015d8:	200002d4 	.word	0x200002d4

080015dc <Environmental_Update>:
 * @param  int32_t pressure value
 * @param  int16_t temperature value
 * @retval tBleStatus Status
 */
tBleStatus Environmental_Update(int32_t press, int16_t temp)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80015e8:	f002 fcdc 	bl	8003fa4 <HAL_GetTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	08db      	lsrs	r3, r3, #3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	733b      	strb	r3, [r7, #12]
 80015f4:	f002 fcd6 	bl	8003fa4 <HAL_GetTick>
 80015f8:	4603      	mov	r3, r0
 80015fa:	0adb      	lsrs	r3, r3, #11
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	73bb      	strb	r3, [r7, #14]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	121b      	asrs	r3, r3, #8
 800160a:	b2db      	uxtb	r3, r3
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	141b      	asrs	r3, r3, #16
 8001612:	b2db      	uxtb	r3, r3
 8001614:	743b      	strb	r3, [r7, #16]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	161b      	asrs	r3, r3, #24
 800161a:	b2db      	uxtb	r3, r3
 800161c:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	74bb      	strb	r3, [r7, #18]
 8001624:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001628:	121b      	asrs	r3, r3, #8
 800162a:	b21b      	sxth	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <Environmental_Update+0x84>)
 8001632:	8818      	ldrh	r0, [r3, #0]
 8001634:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <Environmental_Update+0x88>)
 8001636:	8819      	ldrh	r1, [r3, #0]
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2308      	movs	r3, #8
 8001640:	2200      	movs	r2, #0
 8001642:	f00d fe08 	bl	800f256 <aci_gatt_update_char_value>
 8001646:	4603      	mov	r3, r0
 8001648:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <Environmental_Update+0x78>
    PRINT_DBG("Error while updating TEMP characteristic: 0x%04X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001650:	2347      	movs	r3, #71	@ 0x47
 8001652:	e000      	b.n	8001656 <Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200002cc 	.word	0x200002cc
 8001664:	200002ce 	.word	0x200002ce

08001668 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	@ 0x30
 800166c:	af02      	add	r7, sp, #8
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8001674:	f002 fc96 	bl	8003fa4 <HAL_GetTick>
 8001678:	4603      	mov	r3, r0
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	743b      	strb	r3, [r7, #16]
 8001680:	f002 fc90 	bl	8003fa4 <HAL_GetTick>
 8001684:	4603      	mov	r3, r0
 8001686:	0adb      	lsrs	r3, r3, #11
 8001688:	b2db      	uxtb	r3, r3
 800168a:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2, -x_axes->AXIS_X);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	425b      	negs	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	74bb      	strb	r3, [r7, #18]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	425b      	negs	r3, r3
 800169e:	121b      	asrs	r3, r3, #8
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4,  x_axes->AXIS_Y);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	753b      	strb	r3, [r7, #20]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	121b      	asrs	r3, r3, #8
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6, -x_axes->AXIS_Z);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	425b      	negs	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	75bb      	strb	r3, [r7, #22]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	425b      	negs	r3, r3
 80016c8:	121b      	asrs	r3, r3, #8
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,  g_axes->AXIS_X);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	763b      	strb	r3, [r7, #24]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	121b      	asrs	r3, r3, #8
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10, g_axes->AXIS_Y);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	76bb      	strb	r3, [r7, #26]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	121b      	asrs	r3, r3, #8
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12, g_axes->AXIS_Z);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	773b      	strb	r3, [r7, #28]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	121b      	asrs	r3, r3, #8
 8001700:	b2db      	uxtb	r3, r3
 8001702:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14, m_axes->AXIS_X);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	77bb      	strb	r3, [r7, #30]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	121b      	asrs	r3, r3, #8
 8001712:	b2db      	uxtb	r3, r3
 8001714:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16, m_axes->AXIS_Y);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f887 3020 	strb.w	r3, [r7, #32]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	121b      	asrs	r3, r3, #8
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18, m_axes->AXIS_Z);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	121b      	asrs	r3, r3, #8
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <Acc_Update+0x10c>)
 8001744:	8818      	ldrh	r0, [r3, #0]
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <Acc_Update+0x110>)
 8001748:	8819      	ldrh	r1, [r3, #0]
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2314      	movs	r3, #20
 8001752:	2200      	movs	r2, #0
 8001754:	f00d fd7f 	bl	800f256 <aci_gatt_update_char_value>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800175e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <Acc_Update+0x102>
    PRINT_DBG("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001766:	2347      	movs	r3, #71	@ 0x47
 8001768:	e000      	b.n	800176c <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3728      	adds	r7, #40	@ 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200002cc 	.word	0x200002cc
 8001778:	200002d0 	.word	0x200002d0

0800177c <Read_Request_CB>:
 *
 * @param  Handle of the characteristic to update
 * @retval None
 */
void Read_Request_CB(uint16_t handle)
{
 800177c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001780:	b08e      	sub	sp, #56	@ 0x38
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8001788:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800178a:	4b58      	ldr	r3, [pc, #352]	@ (80018ec <Read_Request_CB+0x170>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	429a      	cmp	r2, r3
 8001792:	d105      	bne.n	80017a0 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8001794:	4a56      	ldr	r2, [pc, #344]	@ (80018f0 <Read_Request_CB+0x174>)
 8001796:	4957      	ldr	r1, [pc, #348]	@ (80018f4 <Read_Request_CB+0x178>)
 8001798:	4857      	ldr	r0, [pc, #348]	@ (80018f8 <Read_Request_CB+0x17c>)
 800179a:	f7ff ff65 	bl	8001668 <Acc_Update>
 800179e:	e091      	b.n	80018c4 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 80017a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80017a2:	4b56      	ldr	r3, [pc, #344]	@ (80018fc <Read_Request_CB+0x180>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 808b 	bne.w	80018c4 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 80017ae:	f013 feb3 	bl	8015518 <rand>
 80017b2:	4603      	mov	r3, r0
 80017b4:	17da      	asrs	r2, r3, #31
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	61fa      	str	r2, [r7, #28]
 80017ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017be:	f04f 0000 	mov.w	r0, #0
 80017c2:	f04f 0100 	mov.w	r1, #0
 80017c6:	0099      	lsls	r1, r3, #2
 80017c8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017cc:	0090      	lsls	r0, r2, #2
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	69b9      	ldr	r1, [r7, #24]
 80017d4:	1851      	adds	r1, r2, r1
 80017d6:	6139      	str	r1, [r7, #16]
 80017d8:	69f9      	ldr	r1, [r7, #28]
 80017da:	eb43 0101 	adc.w	r1, r3, r1
 80017de:	6179      	str	r1, [r7, #20]
 80017e0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ec:	f7ff fa3c 	bl	8000c68 <__aeabi_uldivmod>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7fe fed8 	bl	80005ac <__aeabi_ul2d>
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <Read_Request_CB+0x184>)
 8001802:	f7fe fd53 	bl	80002ac <__adddf3>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f9db 	bl	8000bc8 <__aeabi_d2f>
 8001812:	4603      	mov	r3, r0
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8001816:	f013 fe7f 	bl	8015518 <rand>
 800181a:	4603      	mov	r3, r0
 800181c:	17da      	asrs	r2, r3, #31
 800181e:	4698      	mov	r8, r3
 8001820:	4691      	mov	r9, r2
 8001822:	4642      	mov	r2, r8
 8001824:	464b      	mov	r3, r9
 8001826:	1891      	adds	r1, r2, r2
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	415b      	adcs	r3, r3
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001832:	eb12 0408 	adds.w	r4, r2, r8
 8001836:	eb43 0509 	adc.w	r5, r3, r9
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	016b      	lsls	r3, r5, #5
 8001844:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001848:	0162      	lsls	r2, r4, #5
 800184a:	eb14 0a02 	adds.w	sl, r4, r2
 800184e:	eb45 0b03 	adc.w	fp, r5, r3
 8001852:	eb1a 0308 	adds.w	r3, sl, r8
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	eb4b 0309 	adc.w	r3, fp, r9
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800186a:	f7ff f9fd 	bl	8000c68 <__aeabi_uldivmod>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f7fe fe99 	bl	80005ac <__aeabi_ul2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b21      	ldr	r3, [pc, #132]	@ (8001904 <Read_Request_CB+0x188>)
 8001880:	f7fe fd14 	bl	80002ac <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f99c 	bl	8000bc8 <__aeabi_d2f>
 8001890:	4603      	mov	r3, r0
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
    Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001894:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001898:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001908 <Read_Request_CB+0x18c>
 800189c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80018a4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018a8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b4:	ee17 3a90 	vmov	r3, s15
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	ee16 0a90 	vmov	r0, s13
 80018c0:	f7ff fe8c 	bl	80015dc <Environmental_Update>
    /* Send again the last packet for Terminal */
    Term_Update_AfterRead();
  }
#endif /* STM32L476xx */

  if(connection_handle !=0)
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <Read_Request_CB+0x190>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d008      	beq.n	80018e0 <Read_Request_CB+0x164>
  {
    ret = aci_gatt_allow_read(connection_handle);
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <Read_Request_CB+0x190>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00d fd70 	bl	800f3ba <aci_gatt_allow_read>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINT_DBG("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 80018e0:	bf00      	nop
 80018e2:	3738      	adds	r7, #56	@ 0x38
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ea:	bf00      	nop
 80018ec:	200002d0 	.word	0x200002d0
 80018f0:	2000031c 	.word	0x2000031c
 80018f4:	20000310 	.word	0x20000310
 80018f8:	20000304 	.word	0x20000304
 80018fc:	200002ce 	.word	0x200002ce
 8001900:	403b0000 	.word	0x403b0000
 8001904:	408f4000 	.word	0x408f4000
 8001908:	42c80000 	.word	0x42c80000
 800190c:	200002fc 	.word	0x200002fc

08001910 <Attribute_Modified_Request_CB>:
 * @param  uint8_t  *att_data attribute data
 * @param  uint8_t  data_length length of the data
 * @retval None
 */
void Attribute_Modified_Request_CB(uint16_t Connection_Handle, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
 8001910:	b490      	push	{r4, r7}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4604      	mov	r4, r0
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4623      	mov	r3, r4
 8001920:	80fb      	strh	r3, [r7, #6]
 8001922:	4603      	mov	r3, r0
 8001924:	80bb      	strh	r3, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	807b      	strh	r3, [r7, #2]
 800192a:	4613      	mov	r3, r2
 800192c:	707b      	strb	r3, [r7, #1]
  if(attr_handle == EnvironmentalCharHandle + 2) {
 800192e:	88ba      	ldrh	r2, [r7, #4]
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <Attribute_Modified_Request_CB+0xac>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	3302      	adds	r3, #2
 8001936:	429a      	cmp	r2, r3
 8001938:	d10f      	bne.n	800195a <Attribute_Modified_Request_CB+0x4a>
    if (att_data[0] == 1) {
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d103      	bne.n	800194a <Attribute_Modified_Request_CB+0x3a>
      send_env = TRUE;
 8001942:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <Attribute_Modified_Request_CB+0xb0>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
    if (SendBackData) {
      Term_Update(att_data,data_length);
    }
  }
#endif /* STM32L476xx */
}
 8001948:	e032      	b.n	80019b0 <Attribute_Modified_Request_CB+0xa0>
    } else if (att_data[0] == 0){
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d12e      	bne.n	80019b0 <Attribute_Modified_Request_CB+0xa0>
      send_env = FALSE;
 8001952:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <Attribute_Modified_Request_CB+0xb0>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
}
 8001958:	e02a      	b.n	80019b0 <Attribute_Modified_Request_CB+0xa0>
  else if (attr_handle == AccGyroMagCharHandle +2) {
 800195a:	88ba      	ldrh	r2, [r7, #4]
 800195c:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <Attribute_Modified_Request_CB+0xb4>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	3302      	adds	r3, #2
 8001962:	429a      	cmp	r2, r3
 8001964:	d10f      	bne.n	8001986 <Attribute_Modified_Request_CB+0x76>
    if (att_data[0] == 1) {
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d103      	bne.n	8001976 <Attribute_Modified_Request_CB+0x66>
      send_mot = TRUE;
 800196e:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <Attribute_Modified_Request_CB+0xb8>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
}
 8001974:	e01c      	b.n	80019b0 <Attribute_Modified_Request_CB+0xa0>
    } else if (att_data[0] == 0){
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <Attribute_Modified_Request_CB+0xa0>
      send_mot = FALSE;
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <Attribute_Modified_Request_CB+0xb8>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
}
 8001984:	e014      	b.n	80019b0 <Attribute_Modified_Request_CB+0xa0>
  else if (attr_handle == QuaternionsCharHandle +2) {
 8001986:	88ba      	ldrh	r2, [r7, #4]
 8001988:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <Attribute_Modified_Request_CB+0xbc>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	3302      	adds	r3, #2
 800198e:	429a      	cmp	r2, r3
 8001990:	d10e      	bne.n	80019b0 <Attribute_Modified_Request_CB+0xa0>
    if (att_data[0] == 1) {
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d103      	bne.n	80019a2 <Attribute_Modified_Request_CB+0x92>
      send_quat = TRUE;
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <Attribute_Modified_Request_CB+0xc0>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
}
 80019a0:	e006      	b.n	80019b0 <Attribute_Modified_Request_CB+0xa0>
    } else if (att_data[0] == 0){
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <Attribute_Modified_Request_CB+0xa0>
      send_quat = FALSE;
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <Attribute_Modified_Request_CB+0xc0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc90      	pop	{r4, r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200002ce 	.word	0x200002ce
 80019c0:	200002f8 	.word	0x200002f8
 80019c4:	200002d0 	.word	0x200002d0
 80019c8:	200002f9 	.word	0x200002f9
 80019cc:	200002d4 	.word	0x200002d4
 80019d0:	200002fa 	.word	0x200002fa

080019d4 <Set_DeviceConnectable>:
 * @note   Puts the device in connectable mode
 * @param  None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b092      	sub	sp, #72	@ 0x48
 80019d8:	af08      	add	r7, sp, #32
  uint8_t ret;
  uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 80019da:	4a36      	ldr	r2, [pc, #216]	@ (8001ab4 <Set_DeviceConnectable+0xe0>)
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019e4:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 80019e8:	2302      	movs	r3, #2
 80019ea:	703b      	strb	r3, [r7, #0]
 80019ec:	230a      	movs	r3, #10
 80019ee:	707b      	strb	r3, [r7, #1]
 80019f0:	2300      	movs	r3, #0
 80019f2:	70bb      	strb	r3, [r7, #2]
 80019f4:	2308      	movs	r3, #8
 80019f6:	70fb      	strb	r3, [r7, #3]
 80019f8:	2309      	movs	r3, #9
 80019fa:	713b      	strb	r3, [r7, #4]
 80019fc:	2342      	movs	r3, #66	@ 0x42
 80019fe:	717b      	strb	r3, [r7, #5]
 8001a00:	236c      	movs	r3, #108	@ 0x6c
 8001a02:	71bb      	strb	r3, [r7, #6]
 8001a04:	2375      	movs	r3, #117	@ 0x75
 8001a06:	71fb      	strb	r3, [r7, #7]
 8001a08:	2365      	movs	r3, #101	@ 0x65
 8001a0a:	723b      	strb	r3, [r7, #8]
 8001a0c:	234e      	movs	r3, #78	@ 0x4e
 8001a0e:	727b      	strb	r3, [r7, #9]
 8001a10:	2352      	movs	r3, #82	@ 0x52
 8001a12:	72bb      	strb	r3, [r7, #10]
 8001a14:	2347      	movs	r3, #71	@ 0x47
 8001a16:	72fb      	strb	r3, [r7, #11]
 8001a18:	230d      	movs	r3, #13
 8001a1a:	733b      	strb	r3, [r7, #12]
 8001a1c:	23ff      	movs	r3, #255	@ 0xff
 8001a1e:	737b      	strb	r3, [r7, #13]
 8001a20:	2301      	movs	r3, #1
 8001a22:	73bb      	strb	r3, [r7, #14]
 8001a24:	2380      	movs	r3, #128	@ 0x80
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	743b      	strb	r3, [r7, #16]
 8001a2c:	23f4      	movs	r3, #244	@ 0xf4
 8001a2e:	747b      	strb	r3, [r7, #17]
 8001a30:	2300      	movs	r3, #0
 8001a32:	74bb      	strb	r3, [r7, #18]
 8001a34:	2300      	movs	r3, #0
 8001a36:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <Set_DeviceConnectable+0xe4>)
 8001a3a:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8001a3c:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <Set_DeviceConnectable+0xe4>)
 8001a40:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8001a42:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8001a44:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <Set_DeviceConnectable+0xe4>)
 8001a46:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8001a48:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <Set_DeviceConnectable+0xe4>)
 8001a4c:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8001a4e:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <Set_DeviceConnectable+0xe4>)
 8001a52:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8001a54:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8001a56:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <Set_DeviceConnectable+0xe4>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8001a5a:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8001a5c:	7cbb      	ldrb	r3, [r7, #18]
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_response_data(0,NULL);
 8001a66:	2100      	movs	r1, #0
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f00c fd85 	bl	800e578 <hci_le_set_scan_response_data>

  PRINT_DBG("Set General Discoverable Mode.\r\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9306      	str	r3, [sp, #24]
 8001a72:	2300      	movs	r3, #0
 8001a74:	9305      	str	r3, [sp, #20]
 8001a76:	2300      	movs	r3, #0
 8001a78:	9304      	str	r3, [sp, #16]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9303      	str	r3, [sp, #12]
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	9302      	str	r3, [sp, #8]
 8001a84:	2308      	movs	r3, #8
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a96:	2000      	movs	r0, #0
 8001a98:	f00c fde7 	bl	800e66a <aci_gap_set_discoverable>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                 ADV_INTERV_MIN, ADV_INTERV_MAX,
                                 PUBLIC_ADDR,
                                 NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	201a      	movs	r0, #26
 8001aa8:	f00d f929 	bl	800ecfe <aci_gap_update_adv_data>
    PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else {
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
  }
}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	@ 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	08018150 	.word	0x08018150
 8001ab8:	200002c4 	.word	0x200002c4

08001abc <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d163      	bne.n	8001b98 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b3e      	cmp	r3, #62	@ 0x3e
 8001adc:	d11e      	bne.n	8001b1c <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
 8001ae8:	e014      	b.n	8001b14 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba0 <APP_UserEvtRx+0xe4>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8001af8:	4299      	cmp	r1, r3
 8001afa:	d108      	bne.n	8001b0e <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001afc:	4a28      	ldr	r2, [pc, #160]	@ (8001ba0 <APP_UserEvtRx+0xe4>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	3201      	adds	r2, #1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b09      	cmp	r3, #9
 8001b18:	d9e7      	bls.n	8001aea <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 8001b1a:	e03d      	b.n	8001b98 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2bff      	cmp	r3, #255	@ 0xff
 8001b22:	d11e      	bne.n	8001b62 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3302      	adds	r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e014      	b.n	8001b5a <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	491b      	ldr	r1, [pc, #108]	@ (8001ba4 <APP_UserEvtRx+0xe8>)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d108      	bne.n	8001b54 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001b42:	4a18      	ldr	r2, [pc, #96]	@ (8001ba4 <APP_UserEvtRx+0xe8>)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	3202      	adds	r2, #2
 8001b50:	4610      	mov	r0, r2
 8001b52:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	3301      	adds	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b5e:	d9e7      	bls.n	8001b30 <APP_UserEvtRx+0x74>
}
 8001b60:	e01a      	b.n	8001b98 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e014      	b.n	8001b92 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba8 <APP_UserEvtRx+0xec>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8001b76:	4299      	cmp	r1, r3
 8001b78:	d108      	bne.n	8001b8c <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba8 <APP_UserEvtRx+0xec>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	3202      	adds	r2, #2
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	2b06      	cmp	r3, #6
 8001b96:	d9e7      	bls.n	8001b68 <APP_UserEvtRx+0xac>
}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	08019df8 	.word	0x08019df8
 8001ba4:	08019e48 	.word	0x08019e48
 8001ba8:	08019dc0 	.word	0x08019dc0

08001bac <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001bb0:	2008      	movs	r0, #8
 8001bb2:	f002 ff54 	bl	8004a5e <HAL_NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001bbe:	2008      	movs	r0, #8
 8001bc0:	f002 ff5b 	bl	8004a7a <HAL_NVIC_DisableIRQ>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <HCI_TL_SPI_Init+0x90>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <HCI_TL_SPI_Init+0x90>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HCI_TL_SPI_Init+0x90>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001bec:	2304      	movs	r3, #4
 8001bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4816      	ldr	r0, [pc, #88]	@ (8001c5c <HCI_TL_SPI_Init+0x94>)
 8001c02:	f003 fdef 	bl	80057e4 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001c06:	2301      	movs	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480f      	ldr	r0, [pc, #60]	@ (8001c5c <HCI_TL_SPI_Init+0x94>)
 8001c1e:	f003 fde1 	bl	80057e4 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001c22:	2302      	movs	r3, #2
 8001c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	4619      	mov	r1, r3
 8001c38:	4808      	ldr	r0, [pc, #32]	@ (8001c5c <HCI_TL_SPI_Init+0x94>)
 8001c3a:	f003 fdd3 	bl	80057e4 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2102      	movs	r1, #2
 8001c42:	4806      	ldr	r0, [pc, #24]	@ (8001c5c <HCI_TL_SPI_Init+0x94>)
 8001c44:	f004 f87e 	bl	8005d44 <HAL_GPIO_WritePin>

  return BSP_SPI2_Init();
 8001c48:	f000 f992 	bl	8001f70 <BSP_SPI2_Init>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001c64:	2104      	movs	r1, #4
 8001c66:	4807      	ldr	r0, [pc, #28]	@ (8001c84 <HCI_TL_SPI_DeInit+0x24>)
 8001c68:	f003 ff58 	bl	8005b1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	4805      	ldr	r0, [pc, #20]	@ (8001c84 <HCI_TL_SPI_DeInit+0x24>)
 8001c70:	f003 ff54 	bl	8005b1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001c74:	2101      	movs	r1, #1
 8001c76:	4803      	ldr	r0, [pc, #12]	@ (8001c84 <HCI_TL_SPI_DeInit+0x24>)
 8001c78:	f003 ff50 	bl	8005b1c <HAL_GPIO_DeInit>
  return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000

08001c88 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2102      	movs	r1, #2
 8001c90:	480a      	ldr	r0, [pc, #40]	@ (8001cbc <HCI_TL_SPI_Reset+0x34>)
 8001c92:	f004 f857 	bl	8005d44 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4808      	ldr	r0, [pc, #32]	@ (8001cbc <HCI_TL_SPI_Reset+0x34>)
 8001c9c:	f004 f852 	bl	8005d44 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001ca0:	2005      	movs	r0, #5
 8001ca2:	f002 f98b 	bl	8003fbc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <HCI_TL_SPI_Reset+0x34>)
 8001cac:	f004 f84a 	bl	8005d44 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001cb0:	2005      	movs	r0, #5
 8001cb2:	f002 f983 	bl	8003fbc <HAL_Delay>
  return 0;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001cd4:	4a30      	ldr	r2, [pc, #192]	@ (8001d98 <HCI_TL_SPI_Receive+0xd8>)
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cde:	6018      	str	r0, [r3, #0]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8001ce4:	f7ff ff69 	bl	8001bba <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2102      	movs	r1, #2
 8001cec:	482b      	ldr	r0, [pc, #172]	@ (8001d9c <HCI_TL_SPI_Receive+0xdc>)
 8001cee:	f004 f829 	bl	8005d44 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI2_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001cf2:	f107 0108 	add.w	r1, r7, #8
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	2205      	movs	r2, #5
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f967 	bl	8001fd0 <BSP_SPI2_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8001d02:	7b3b      	ldrb	r3, [r7, #12]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8001d12:	8bfb      	ldrh	r3, [r7, #30]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01e      	beq.n	8001d56 <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8001d18:	8bfa      	ldrh	r2, [r7, #30]
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d901      	bls.n	8001d24 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	777b      	strb	r3, [r7, #29]
 8001d28:	e010      	b.n	8001d4c <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI2_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8001d2a:	f107 0116 	add.w	r1, r7, #22
 8001d2e:	f107 0317 	add.w	r3, r7, #23
 8001d32:	2201      	movs	r2, #1
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 f94b 	bl	8001fd0 <BSP_SPI2_SendRecv>
      buffer[len] = read_char;
 8001d3a:	7f7b      	ldrb	r3, [r7, #29]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	7dba      	ldrb	r2, [r7, #22]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8001d46:	7f7b      	ldrb	r3, [r7, #29]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	777b      	strb	r3, [r7, #29]
 8001d4c:	7f7b      	ldrb	r3, [r7, #29]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	8bfa      	ldrh	r2, [r7, #30]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d8e9      	bhi.n	8001d2a <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8001d56:	f002 f925 	bl	8003fa4 <HAL_GetTick>
 8001d5a:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001d5c:	e006      	b.n	8001d6c <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001d5e:	2104      	movs	r1, #4
 8001d60:	480e      	ldr	r0, [pc, #56]	@ (8001d9c <HCI_TL_SPI_Receive+0xdc>)
 8001d62:	f003 ffd7 	bl	8005d14 <HAL_GPIO_ReadPin>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001d6c:	f002 f91a 	bl	8003fa4 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d7a:	d3f0      	bcc.n	8001d5e <HCI_TL_SPI_Receive+0x9e>
 8001d7c:	e000      	b.n	8001d80 <HCI_TL_SPI_Receive+0xc0>
      break;
 8001d7e:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001d80:	f7ff ff14 	bl	8001bac <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001d84:	2201      	movs	r2, #1
 8001d86:	2102      	movs	r1, #2
 8001d88:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <HCI_TL_SPI_Receive+0xdc>)
 8001d8a:	f003 ffdb 	bl	8005d44 <HAL_GPIO_WritePin>

  return len;
 8001d8e:	7f7b      	ldrb	r3, [r7, #29]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	08018158 	.word	0x08018158
 8001d9c:	40021000 	.word	0x40021000

08001da0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	@ 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001dac:	4a3f      	ldr	r2, [pc, #252]	@ (8001eac <HCI_TL_SPI_Send+0x10c>)
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db6:	6018      	str	r0, [r3, #0]
 8001db8:	3304      	adds	r3, #4
 8001dba:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f002 f8f2 	bl	8003fa4 <HAL_GetTick>
 8001dc0:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8001dc2:	f7ff fefa 	bl	8001bba <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8001dc6:	f002 f8ed 	bl	8003fa4 <HAL_GetTick>
 8001dca:	61f8      	str	r0, [r7, #28]

    result = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	4836      	ldr	r0, [pc, #216]	@ (8001eb0 <HCI_TL_SPI_Send+0x110>)
 8001dd6:	f003 ffb5 	bl	8005d44 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8001dda:	e00a      	b.n	8001df2 <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8001ddc:	f002 f8e2 	bl	8003fa4 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	@ 0x64
 8001de8:	d903      	bls.n	8001df2 <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 8001dea:	f06f 0302 	mvn.w	r3, #2
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8001df0:	e004      	b.n	8001dfc <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 8001df2:	f000 f861 	bl	8001eb8 <IsDataAvailable>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ef      	beq.n	8001ddc <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	f113 0f03 	cmn.w	r3, #3
 8001e02:	d105      	bne.n	8001e10 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	2102      	movs	r1, #2
 8001e08:	4829      	ldr	r0, [pc, #164]	@ (8001eb0 <HCI_TL_SPI_Send+0x110>)
 8001e0a:	f003 ff9b 	bl	8005d44 <HAL_GPIO_WritePin>
      break;
 8001e0e:	e030      	b.n	8001e72 <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI2_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001e10:	f107 010c 	add.w	r1, r7, #12
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2205      	movs	r2, #5
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f8d8 	bl	8001fd0 <BSP_SPI2_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8001e20:	7bbb      	ldrb	r3, [r7, #14]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	7b7b      	ldrb	r3, [r7, #13]
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8001e30:	8b7a      	ldrh	r2, [r7, #26]
 8001e32:	887b      	ldrh	r3, [r7, #2]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d306      	bcc.n	8001e46 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI2_SendRecv(buffer, read_char_buf, size);
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	491d      	ldr	r1, [pc, #116]	@ (8001eb4 <HCI_TL_SPI_Send+0x114>)
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8c6 	bl	8001fd0 <BSP_SPI2_SendRecv>
 8001e44:	e002      	b.n	8001e4c <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8001e46:	f06f 0301 	mvn.w	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2102      	movs	r1, #2
 8001e50:	4817      	ldr	r0, [pc, #92]	@ (8001eb0 <HCI_TL_SPI_Send+0x110>)
 8001e52:	f003 ff77 	bl	8005d44 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001e56:	f002 f8a5 	bl	8003fa4 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b64      	cmp	r3, #100	@ 0x64
 8001e62:	d903      	bls.n	8001e6c <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8001e64:	f06f 0302 	mvn.w	r3, #2
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001e6a:	e002      	b.n	8001e72 <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	dba9      	blt.n	8001dc6 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8001e72:	f002 f897 	bl	8003fa4 <HAL_GetTick>
 8001e76:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001e78:	e006      	b.n	8001e88 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <HCI_TL_SPI_Send+0x110>)
 8001e7e:	f003 ff49 	bl	8005d14 <HAL_GPIO_ReadPin>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8001e88:	f002 f88c 	bl	8003fa4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e96:	d3f0      	bcc.n	8001e7a <HCI_TL_SPI_Send+0xda>
 8001e98:	e000      	b.n	8001e9c <HCI_TL_SPI_Send+0xfc>
      break;
 8001e9a:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8001e9c:	f7ff fe86 	bl	8001bac <HCI_TL_SPI_Enable_IRQ>

  return result;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3728      	adds	r7, #40	@ 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	08018160 	.word	0x08018160
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	20000330 	.word	0x20000330

08001eb8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <IsDataAvailable+0x1c>)
 8001ec0:	f003 ff28 	bl	8005d14 <HAL_GPIO_ReadPin>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001ede:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <hci_tl_lowlevel_init+0x50>)
 8001ee0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <hci_tl_lowlevel_init+0x54>)
 8001ee4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <hci_tl_lowlevel_init+0x58>)
 8001ee8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001eea:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <hci_tl_lowlevel_init+0x5c>)
 8001eec:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001eee:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <hci_tl_lowlevel_init+0x60>)
 8001ef0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <hci_tl_lowlevel_init+0x64>)
 8001ef4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f00d fd1b 	bl	800f934 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti2, EXTI_LINE_2);
 8001efe:	4910      	ldr	r1, [pc, #64]	@ (8001f40 <hci_tl_lowlevel_init+0x68>)
 8001f00:	4810      	ldr	r0, [pc, #64]	@ (8001f44 <hci_tl_lowlevel_init+0x6c>)
 8001f02:	f003 f95f 	bl	80051c4 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti2, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001f06:	4a10      	ldr	r2, [pc, #64]	@ (8001f48 <hci_tl_lowlevel_init+0x70>)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	480e      	ldr	r0, [pc, #56]	@ (8001f44 <hci_tl_lowlevel_init+0x6c>)
 8001f0c:	f003 f940 	bl	8005190 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	2008      	movs	r0, #8
 8001f16:	f002 fd86 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f1a:	2008      	movs	r0, #8
 8001f1c:	f002 fd9f 	bl	8004a5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001f20:	bf00      	nop
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	08001bc9 	.word	0x08001bc9
 8001f2c:	08001c61 	.word	0x08001c61
 8001f30:	08001da1 	.word	0x08001da1
 8001f34:	08001cc1 	.word	0x08001cc1
 8001f38:	08001c89 	.word	0x08001c89
 8001f3c:	08002011 	.word	0x08002011
 8001f40:	06000002 	.word	0x06000002
 8001f44:	20000328 	.word	0x20000328
 8001f48:	08001f4d 	.word	0x08001f4d

08001f4c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001f50:	e005      	b.n	8001f5e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001f52:	2000      	movs	r0, #0
 8001f54:	f00d fe26 	bl	800fba4 <hci_notify_asynch_evt>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001f5e:	f7ff ffab 	bl	8001eb8 <IsDataAvailable>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f4      	bne.n	8001f52 <hci_tl_lowlevel_isr+0x6>
 8001f68:	e000      	b.n	8001f6c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001f6a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <BSP_SPI2_Init+0x54>)
 8001f7c:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <BSP_SPI2_Init+0x58>)
 8001f7e:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8001f80:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <BSP_SPI2_Init+0x5c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	4911      	ldr	r1, [pc, #68]	@ (8001fcc <BSP_SPI2_Init+0x5c>)
 8001f88:	600a      	str	r2, [r1, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d114      	bne.n	8001fb8 <BSP_SPI2_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8001f8e:	480d      	ldr	r0, [pc, #52]	@ (8001fc4 <BSP_SPI2_Init+0x54>)
 8001f90:	f008 f85c 	bl	800a04c <HAL_SPI_GetState>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10e      	bne.n	8001fb8 <BSP_SPI2_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
 8001f9a:	480a      	ldr	r0, [pc, #40]	@ (8001fc4 <BSP_SPI2_Init+0x54>)
 8001f9c:	f000 f87c 	bl	8002098 <SPI2_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <BSP_SPI2_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8001fa6:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <BSP_SPI2_Init+0x54>)
 8001fa8:	f000 f83a 	bl	8002020 <MX_SPI2_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <BSP_SPI2_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001fb2:	f06f 0307 	mvn.w	r3, #7
 8001fb6:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000430 	.word	0x20000430
 8001fc8:	40003800 	.word	0x40003800
 8001fcc:	20000488 	.word	0x20000488

08001fd0 <BSP_SPI2_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fe8:	9200      	str	r2, [sp, #0]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	68f9      	ldr	r1, [r7, #12]
 8001fee:	4807      	ldr	r0, [pc, #28]	@ (800200c <BSP_SPI2_SendRecv+0x3c>)
 8001ff0:	f007 fe7c 	bl	8009cec <HAL_SPI_TransmitReceive>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <BSP_SPI2_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001ffa:	f06f 0305 	mvn.w	r3, #5
 8001ffe:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002000:	697b      	ldr	r3, [r7, #20]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000430 	.word	0x20000430

08002010 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002014:	f001 ffc6 	bl	8003fa4 <HAL_GetTick>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI2;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a19      	ldr	r2, [pc, #100]	@ (8002094 <MX_SPI2_Init+0x74>)
 8002030:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002038:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002058:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	220a      	movs	r2, #10
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f007 fc6b 	bl	8009954 <HAL_SPI_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_SPI2_Init+0x68>
  {
    ret = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40003800 	.word	0x40003800

08002098 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002160 <SPI2_MspInit+0xc8>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002160 <SPI2_MspInit+0xc8>)
 80020aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002160 <SPI2_MspInit+0xc8>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <SPI2_MspInit+0xc8>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	4a26      	ldr	r2, [pc, #152]	@ (8002160 <SPI2_MspInit+0xc8>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80020cc:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <SPI2_MspInit+0xc8>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	4b20      	ldr	r3, [pc, #128]	@ (8002160 <SPI2_MspInit+0xc8>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002160 <SPI2_MspInit+0xc8>)
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <SPI2_MspInit+0xc8>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 80020f4:	2304      	movs	r3, #4
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8002104:	2305      	movs	r3, #5
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	4815      	ldr	r0, [pc, #84]	@ (8002164 <SPI2_MspInit+0xcc>)
 8002110:	f003 fb68 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8002114:	2308      	movs	r3, #8
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8002124:	2305      	movs	r3, #5
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	480d      	ldr	r0, [pc, #52]	@ (8002164 <SPI2_MspInit+0xcc>)
 8002130:	f003 fb58 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8002134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8002146:	2305      	movs	r3, #5
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	@ (8002168 <SPI2_MspInit+0xd0>)
 8002152:	f003 fb47 	bl	80057e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	@ 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40020800 	.word	0x40020800
 8002168:	40020400 	.word	0x40020400

0800216c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002170:	f001 feb2 	bl	8003ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002174:	f000 f824 	bl	80021c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002178:	f000 fb88 	bl	800288c <MX_GPIO_Init>
  MX_DMA_Init();
 800217c:	f000 fb40 	bl	8002800 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002180:	f000 fb14 	bl	80027ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002184:	f000 f98e 	bl	80024a4 <MX_TIM1_Init>
  MX_ADC3_Init();
 8002188:	f000 f8d6 	bl	8002338 <MX_ADC3_Init>
  MX_SPI3_Init();
 800218c:	f000 f954 	bl	8002438 <MX_SPI3_Init>
  MX_I2C3_Init();
 8002190:	f000 f924 	bl	80023dc <MX_I2C3_Init>
  MX_ADC1_Init();
 8002194:	f000 f87e 	bl	8002294 <MX_ADC1_Init>
  MX_TIM11_Init();
 8002198:	f000 fa70 	bl	800267c <MX_TIM11_Init>
  MX_USB_HOST_Init();
 800219c:	f010 fa04 	bl	80125a8 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 80021a0:	f000 fa20 	bl	80025e4 <MX_TIM10_Init>
  MX_TIM13_Init();
 80021a4:	f000 fab6 	bl	8002714 <MX_TIM13_Init>
  MX_BlueNRG_2_Init();
 80021a8:	f7fe fed6 	bl	8000f58 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 80021ac:	f012 fe9c 	bl	8014ee8 <DWT_Init>

  systemSetup();
 80021b0:	f012 ff0a 	bl	8014fc8 <systemSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80021b4:	f010 fa1e 	bl	80125f4 <MX_USB_HOST_Process>

    //MX_BlueNRG_2_Process();
    /* USER CODE BEGIN 3 */
	systemLoop();
 80021b8:	f012 fefc 	bl	8014fb4 <systemLoop>
  {
 80021bc:	bf00      	nop
 80021be:	e7f9      	b.n	80021b4 <main+0x48>

080021c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b094      	sub	sp, #80	@ 0x50
 80021c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c6:	f107 0320 	add.w	r3, r7, #32
 80021ca:	2230      	movs	r2, #48	@ 0x30
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f013 ff8b 	bl	80160ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	4b28      	ldr	r3, [pc, #160]	@ (800228c <SystemClock_Config+0xcc>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	4a27      	ldr	r2, [pc, #156]	@ (800228c <SystemClock_Config+0xcc>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f4:	4b25      	ldr	r3, [pc, #148]	@ (800228c <SystemClock_Config+0xcc>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <SystemClock_Config+0xd0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a21      	ldr	r2, [pc, #132]	@ (8002290 <SystemClock_Config+0xd0>)
 800220a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b1f      	ldr	r3, [pc, #124]	@ (8002290 <SystemClock_Config+0xd0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800221c:	2301      	movs	r3, #1
 800221e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002220:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002226:	2302      	movs	r3, #2
 8002228:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800222a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002230:	2304      	movs	r3, #4
 8002232:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002234:	23a8      	movs	r3, #168	@ 0xa8
 8002236:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002238:	2302      	movs	r3, #2
 800223a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800223c:	2307      	movs	r3, #7
 800223e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002240:	f107 0320 	add.w	r3, r7, #32
 8002244:	4618      	mov	r0, r3
 8002246:	f006 feed 	bl	8009024 <HAL_RCC_OscConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002250:	f000 fc5a 	bl	8002b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002254:	230f      	movs	r3, #15
 8002256:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002258:	2302      	movs	r3, #2
 800225a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002260:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800226a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2105      	movs	r1, #5
 8002272:	4618      	mov	r0, r3
 8002274:	f007 f94e 	bl	8009514 <HAL_RCC_ClockConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800227e:	f000 fc43 	bl	8002b08 <Error_Handler>
  }
}
 8002282:	bf00      	nop
 8002284:	3750      	adds	r7, #80	@ 0x50
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000

08002294 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800229a:	463b      	mov	r3, r7
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022a6:	4b21      	ldr	r3, [pc, #132]	@ (800232c <MX_ADC1_Init+0x98>)
 80022a8:	4a21      	ldr	r2, [pc, #132]	@ (8002330 <MX_ADC1_Init+0x9c>)
 80022aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022ac:	4b1f      	ldr	r3, [pc, #124]	@ (800232c <MX_ADC1_Init+0x98>)
 80022ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80022b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <MX_ADC1_Init+0x98>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	@ (800232c <MX_ADC1_Init+0x98>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022c0:	4b1a      	ldr	r3, [pc, #104]	@ (800232c <MX_ADC1_Init+0x98>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022c6:	4b19      	ldr	r3, [pc, #100]	@ (800232c <MX_ADC1_Init+0x98>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022ce:	4b17      	ldr	r3, [pc, #92]	@ (800232c <MX_ADC1_Init+0x98>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022d4:	4b15      	ldr	r3, [pc, #84]	@ (800232c <MX_ADC1_Init+0x98>)
 80022d6:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <MX_ADC1_Init+0xa0>)
 80022d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022da:	4b14      	ldr	r3, [pc, #80]	@ (800232c <MX_ADC1_Init+0x98>)
 80022dc:	2200      	movs	r2, #0
 80022de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022e0:	4b12      	ldr	r3, [pc, #72]	@ (800232c <MX_ADC1_Init+0x98>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <MX_ADC1_Init+0x98>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022ee:	4b0f      	ldr	r3, [pc, #60]	@ (800232c <MX_ADC1_Init+0x98>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022f4:	480d      	ldr	r0, [pc, #52]	@ (800232c <MX_ADC1_Init+0x98>)
 80022f6:	f001 fe85 	bl	8004004 <HAL_ADC_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002300:	f000 fc02 	bl	8002b08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002304:	2308      	movs	r3, #8
 8002306:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002308:	2301      	movs	r3, #1
 800230a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002310:	463b      	mov	r3, r7
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	@ (800232c <MX_ADC1_Init+0x98>)
 8002316:	f001 ffe7 	bl	80042e8 <HAL_ADC_ConfigChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002320:	f000 fbf2 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2000048c 	.word	0x2000048c
 8002330:	40012000 	.word	0x40012000
 8002334:	0f000001 	.word	0x0f000001

08002338 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800233e:	463b      	mov	r3, r7
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800234a:	4b21      	ldr	r3, [pc, #132]	@ (80023d0 <MX_ADC3_Init+0x98>)
 800234c:	4a21      	ldr	r2, [pc, #132]	@ (80023d4 <MX_ADC3_Init+0x9c>)
 800234e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002350:	4b1f      	ldr	r3, [pc, #124]	@ (80023d0 <MX_ADC3_Init+0x98>)
 8002352:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002356:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002358:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <MX_ADC3_Init+0x98>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800235e:	4b1c      	ldr	r3, [pc, #112]	@ (80023d0 <MX_ADC3_Init+0x98>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002364:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <MX_ADC3_Init+0x98>)
 8002366:	2201      	movs	r2, #1
 8002368:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800236a:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <MX_ADC3_Init+0x98>)
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002372:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <MX_ADC3_Init+0x98>)
 8002374:	2200      	movs	r2, #0
 8002376:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002378:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <MX_ADC3_Init+0x98>)
 800237a:	4a17      	ldr	r2, [pc, #92]	@ (80023d8 <MX_ADC3_Init+0xa0>)
 800237c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800237e:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <MX_ADC3_Init+0x98>)
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <MX_ADC3_Init+0x98>)
 8002386:	2201      	movs	r2, #1
 8002388:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800238a:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <MX_ADC3_Init+0x98>)
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002392:	4b0f      	ldr	r3, [pc, #60]	@ (80023d0 <MX_ADC3_Init+0x98>)
 8002394:	2201      	movs	r2, #1
 8002396:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002398:	480d      	ldr	r0, [pc, #52]	@ (80023d0 <MX_ADC3_Init+0x98>)
 800239a:	f001 fe33 	bl	8004004 <HAL_ADC_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80023a4:	f000 fbb0 	bl	8002b08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023a8:	2301      	movs	r3, #1
 80023aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023b4:	463b      	mov	r3, r7
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <MX_ADC3_Init+0x98>)
 80023ba:	f001 ff95 	bl	80042e8 <HAL_ADC_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80023c4:	f000 fba0 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	200004d4 	.word	0x200004d4
 80023d4:	40012200 	.word	0x40012200
 80023d8:	0f000001 	.word	0x0f000001

080023dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023e0:	4b12      	ldr	r3, [pc, #72]	@ (800242c <MX_I2C3_Init+0x50>)
 80023e2:	4a13      	ldr	r2, [pc, #76]	@ (8002430 <MX_I2C3_Init+0x54>)
 80023e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80023e6:	4b11      	ldr	r3, [pc, #68]	@ (800242c <MX_I2C3_Init+0x50>)
 80023e8:	4a12      	ldr	r2, [pc, #72]	@ (8002434 <MX_I2C3_Init+0x58>)
 80023ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <MX_I2C3_Init+0x50>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <MX_I2C3_Init+0x50>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <MX_I2C3_Init+0x50>)
 80023fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002400:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <MX_I2C3_Init+0x50>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <MX_I2C3_Init+0x50>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800240c:	4b07      	ldr	r3, [pc, #28]	@ (800242c <MX_I2C3_Init+0x50>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <MX_I2C3_Init+0x50>)
 8002414:	2200      	movs	r2, #0
 8002416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002418:	4804      	ldr	r0, [pc, #16]	@ (800242c <MX_I2C3_Init+0x50>)
 800241a:	f005 fddf 	bl	8007fdc <HAL_I2C_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002424:	f000 fb70 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200005dc 	.word	0x200005dc
 8002430:	40005c00 	.word	0x40005c00
 8002434:	000186a0 	.word	0x000186a0

08002438 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800243c:	4b17      	ldr	r3, [pc, #92]	@ (800249c <MX_SPI3_Init+0x64>)
 800243e:	4a18      	ldr	r2, [pc, #96]	@ (80024a0 <MX_SPI3_Init+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002442:	4b16      	ldr	r3, [pc, #88]	@ (800249c <MX_SPI3_Init+0x64>)
 8002444:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002448:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800244a:	4b14      	ldr	r3, [pc, #80]	@ (800249c <MX_SPI3_Init+0x64>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002450:	4b12      	ldr	r3, [pc, #72]	@ (800249c <MX_SPI3_Init+0x64>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002456:	4b11      	ldr	r3, [pc, #68]	@ (800249c <MX_SPI3_Init+0x64>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800245c:	4b0f      	ldr	r3, [pc, #60]	@ (800249c <MX_SPI3_Init+0x64>)
 800245e:	2200      	movs	r2, #0
 8002460:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002462:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <MX_SPI3_Init+0x64>)
 8002464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002468:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800246a:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <MX_SPI3_Init+0x64>)
 800246c:	2200      	movs	r2, #0
 800246e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002470:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <MX_SPI3_Init+0x64>)
 8002472:	2200      	movs	r2, #0
 8002474:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <MX_SPI3_Init+0x64>)
 8002478:	2200      	movs	r2, #0
 800247a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800247c:	4b07      	ldr	r3, [pc, #28]	@ (800249c <MX_SPI3_Init+0x64>)
 800247e:	2200      	movs	r2, #0
 8002480:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <MX_SPI3_Init+0x64>)
 8002484:	220a      	movs	r2, #10
 8002486:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002488:	4804      	ldr	r0, [pc, #16]	@ (800249c <MX_SPI3_Init+0x64>)
 800248a:	f007 fa63 	bl	8009954 <HAL_SPI_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002494:	f000 fb38 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000630 	.word	0x20000630
 80024a0:	40003c00 	.word	0x40003c00

080024a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b096      	sub	sp, #88	@ 0x58
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
 80024d2:	615a      	str	r2, [r3, #20]
 80024d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2220      	movs	r2, #32
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f013 fe04 	bl	80160ea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024e2:	4b3e      	ldr	r3, [pc, #248]	@ (80025dc <MX_TIM1_Init+0x138>)
 80024e4:	4a3e      	ldr	r2, [pc, #248]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 80024e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 124-1;
 80024e8:	4b3c      	ldr	r3, [pc, #240]	@ (80025dc <MX_TIM1_Init+0x138>)
 80024ea:	227b      	movs	r2, #123	@ 0x7b
 80024ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ee:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <MX_TIM1_Init+0x138>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80024f4:	4b39      	ldr	r3, [pc, #228]	@ (80025dc <MX_TIM1_Init+0x138>)
 80024f6:	2209      	movs	r2, #9
 80024f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fa:	4b38      	ldr	r3, [pc, #224]	@ (80025dc <MX_TIM1_Init+0x138>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002500:	4b36      	ldr	r3, [pc, #216]	@ (80025dc <MX_TIM1_Init+0x138>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002506:	4b35      	ldr	r3, [pc, #212]	@ (80025dc <MX_TIM1_Init+0x138>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800250c:	4833      	ldr	r0, [pc, #204]	@ (80025dc <MX_TIM1_Init+0x138>)
 800250e:	f007 fe87 	bl	800a220 <HAL_TIM_Base_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002518:	f000 faf6 	bl	8002b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002520:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002522:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002526:	4619      	mov	r1, r3
 8002528:	482c      	ldr	r0, [pc, #176]	@ (80025dc <MX_TIM1_Init+0x138>)
 800252a:	f008 fa51 	bl	800a9d0 <HAL_TIM_ConfigClockSource>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002534:	f000 fae8 	bl	8002b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002538:	4828      	ldr	r0, [pc, #160]	@ (80025dc <MX_TIM1_Init+0x138>)
 800253a:	f007 ff19 	bl	800a370 <HAL_TIM_PWM_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002544:	f000 fae0 	bl	8002b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002550:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002554:	4619      	mov	r1, r3
 8002556:	4821      	ldr	r0, [pc, #132]	@ (80025dc <MX_TIM1_Init+0x138>)
 8002558:	f008 fe50 	bl	800b1fc <HAL_TIMEx_MasterConfigSynchronization>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002562:	f000 fad1 	bl	8002b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002566:	2360      	movs	r3, #96	@ 0x60
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800256e:	2300      	movs	r3, #0
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002572:	2300      	movs	r3, #0
 8002574:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002586:	2200      	movs	r2, #0
 8002588:	4619      	mov	r1, r3
 800258a:	4814      	ldr	r0, [pc, #80]	@ (80025dc <MX_TIM1_Init+0x138>)
 800258c:	f008 f95e 	bl	800a84c <HAL_TIM_PWM_ConfigChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002596:	f000 fab7 	bl	8002b08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4807      	ldr	r0, [pc, #28]	@ (80025dc <MX_TIM1_Init+0x138>)
 80025be:	f008 fe99 	bl	800b2f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80025c8:	f000 fa9e 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025cc:	4803      	ldr	r0, [pc, #12]	@ (80025dc <MX_TIM1_Init+0x138>)
 80025ce:	f001 f843 	bl	8003658 <HAL_TIM_MspPostInit>

}
 80025d2:	bf00      	nop
 80025d4:	3758      	adds	r7, #88	@ 0x58
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000688 	.word	0x20000688
 80025e0:	40010000 	.word	0x40010000

080025e4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
 80025f8:	615a      	str	r2, [r3, #20]
 80025fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <MX_TIM10_Init+0x90>)
 80025fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002678 <MX_TIM10_Init+0x94>)
 8002600:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 36000-1;
 8002602:	4b1c      	ldr	r3, [pc, #112]	@ (8002674 <MX_TIM10_Init+0x90>)
 8002604:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8002608:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260a:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <MX_TIM10_Init+0x90>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 30000-1;
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <MX_TIM10_Init+0x90>)
 8002612:	f247 522f 	movw	r2, #29999	@ 0x752f
 8002616:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002618:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <MX_TIM10_Init+0x90>)
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <MX_TIM10_Init+0x90>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002624:	4813      	ldr	r0, [pc, #76]	@ (8002674 <MX_TIM10_Init+0x90>)
 8002626:	f007 fdfb 	bl	800a220 <HAL_TIM_Base_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8002630:	f000 fa6a 	bl	8002b08 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8002634:	480f      	ldr	r0, [pc, #60]	@ (8002674 <MX_TIM10_Init+0x90>)
 8002636:	f007 fe42 	bl	800a2be <HAL_TIM_OC_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8002640:	f000 fa62 	bl	8002b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2200      	movs	r2, #0
 8002658:	4619      	mov	r1, r3
 800265a:	4806      	ldr	r0, [pc, #24]	@ (8002674 <MX_TIM10_Init+0x90>)
 800265c:	f008 f89a 	bl	800a794 <HAL_TIM_OC_ConfigChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8002666:	f000 fa4f 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200006d0 	.word	0x200006d0
 8002678:	40014400 	.word	0x40014400

0800267c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
 8002690:	615a      	str	r2, [r3, #20]
 8002692:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002694:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <MX_TIM11_Init+0x90>)
 8002696:	4a1e      	ldr	r2, [pc, #120]	@ (8002710 <MX_TIM11_Init+0x94>)
 8002698:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 36000-1;
 800269a:	4b1c      	ldr	r3, [pc, #112]	@ (800270c <MX_TIM11_Init+0x90>)
 800269c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80026a0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <MX_TIM11_Init+0x90>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 30000-1;
 80026a8:	4b18      	ldr	r3, [pc, #96]	@ (800270c <MX_TIM11_Init+0x90>)
 80026aa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80026ae:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b0:	4b16      	ldr	r3, [pc, #88]	@ (800270c <MX_TIM11_Init+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <MX_TIM11_Init+0x90>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80026bc:	4813      	ldr	r0, [pc, #76]	@ (800270c <MX_TIM11_Init+0x90>)
 80026be:	f007 fdaf 	bl	800a220 <HAL_TIM_Base_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 80026c8:	f000 fa1e 	bl	8002b08 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80026cc:	480f      	ldr	r0, [pc, #60]	@ (800270c <MX_TIM11_Init+0x90>)
 80026ce:	f007 fdf6 	bl	800a2be <HAL_TIM_OC_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 80026d8:	f000 fa16 	bl	8002b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026dc:	2300      	movs	r3, #0
 80026de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	2200      	movs	r2, #0
 80026f0:	4619      	mov	r1, r3
 80026f2:	4806      	ldr	r0, [pc, #24]	@ (800270c <MX_TIM11_Init+0x90>)
 80026f4:	f008 f84e 	bl	800a794 <HAL_TIM_OC_ConfigChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 80026fe:	f000 fa03 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000718 	.word	0x20000718
 8002710:	40014800 	.word	0x40014800

08002714 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800272c:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <MX_TIM13_Init+0x90>)
 800272e:	4a1e      	ldr	r2, [pc, #120]	@ (80027a8 <MX_TIM13_Init+0x94>)
 8002730:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 18000-1;
 8002732:	4b1c      	ldr	r3, [pc, #112]	@ (80027a4 <MX_TIM13_Init+0x90>)
 8002734:	f244 624f 	movw	r2, #17999	@ 0x464f
 8002738:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273a:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <MX_TIM13_Init+0x90>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 30000-1;
 8002740:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <MX_TIM13_Init+0x90>)
 8002742:	f247 522f 	movw	r2, #29999	@ 0x752f
 8002746:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002748:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <MX_TIM13_Init+0x90>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <MX_TIM13_Init+0x90>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002754:	4813      	ldr	r0, [pc, #76]	@ (80027a4 <MX_TIM13_Init+0x90>)
 8002756:	f007 fd63 	bl	800a220 <HAL_TIM_Base_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8002760:	f000 f9d2 	bl	8002b08 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8002764:	480f      	ldr	r0, [pc, #60]	@ (80027a4 <MX_TIM13_Init+0x90>)
 8002766:	f007 fdaa 	bl	800a2be <HAL_TIM_OC_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8002770:	f000 f9ca 	bl	8002b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	2200      	movs	r2, #0
 8002788:	4619      	mov	r1, r3
 800278a:	4806      	ldr	r0, [pc, #24]	@ (80027a4 <MX_TIM13_Init+0x90>)
 800278c:	f008 f802 	bl	800a794 <HAL_TIM_OC_ConfigChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8002796:	f000 f9b7 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000760 	.word	0x20000760
 80027a8:	40001c00 	.word	0x40001c00

080027ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027b0:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <MX_USART2_UART_Init+0x50>)
 80027b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027d2:	220c      	movs	r2, #12
 80027d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027e2:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027e4:	f008 fdec 	bl	800b3c0 <HAL_UART_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027ee:	f000 f98b 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000808 	.word	0x20000808
 80027fc:	40004400 	.word	0x40004400

08002800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <MX_DMA_Init+0x88>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	4a1e      	ldr	r2, [pc, #120]	@ (8002888 <MX_DMA_Init+0x88>)
 8002810:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002814:	6313      	str	r3, [r2, #48]	@ 0x30
 8002816:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <MX_DMA_Init+0x88>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <MX_DMA_Init+0x88>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	4a17      	ldr	r2, [pc, #92]	@ (8002888 <MX_DMA_Init+0x88>)
 800282c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002830:	6313      	str	r3, [r2, #48]	@ 0x30
 8002832:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <MX_DMA_Init+0x88>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	2011      	movs	r0, #17
 8002844:	f002 f8ef 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002848:	2011      	movs	r0, #17
 800284a:	f002 f908 	bl	8004a5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	2038      	movs	r0, #56	@ 0x38
 8002854:	f002 f8e7 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002858:	2038      	movs	r0, #56	@ 0x38
 800285a:	f002 f900 	bl	8004a5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2100      	movs	r1, #0
 8002862:	2039      	movs	r0, #57	@ 0x39
 8002864:	f002 f8df 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002868:	2039      	movs	r0, #57	@ 0x39
 800286a:	f002 f8f8 	bl	8004a5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	203c      	movs	r0, #60	@ 0x3c
 8002874:	f002 f8d7 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002878:	203c      	movs	r0, #60	@ 0x3c
 800287a:	f002 f8f0 	bl	8004a5e <HAL_NVIC_EnableIRQ>

}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08c      	sub	sp, #48	@ 0x30
 8002890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	4b92      	ldr	r3, [pc, #584]	@ (8002af0 <MX_GPIO_Init+0x264>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	4a91      	ldr	r2, [pc, #580]	@ (8002af0 <MX_GPIO_Init+0x264>)
 80028ac:	f043 0310 	orr.w	r3, r3, #16
 80028b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b2:	4b8f      	ldr	r3, [pc, #572]	@ (8002af0 <MX_GPIO_Init+0x264>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	4b8b      	ldr	r3, [pc, #556]	@ (8002af0 <MX_GPIO_Init+0x264>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a8a      	ldr	r2, [pc, #552]	@ (8002af0 <MX_GPIO_Init+0x264>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b88      	ldr	r3, [pc, #544]	@ (8002af0 <MX_GPIO_Init+0x264>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b84      	ldr	r3, [pc, #528]	@ (8002af0 <MX_GPIO_Init+0x264>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	4a83      	ldr	r2, [pc, #524]	@ (8002af0 <MX_GPIO_Init+0x264>)
 80028e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ea:	4b81      	ldr	r3, [pc, #516]	@ (8002af0 <MX_GPIO_Init+0x264>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b7d      	ldr	r3, [pc, #500]	@ (8002af0 <MX_GPIO_Init+0x264>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4a7c      	ldr	r2, [pc, #496]	@ (8002af0 <MX_GPIO_Init+0x264>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4b7a      	ldr	r3, [pc, #488]	@ (8002af0 <MX_GPIO_Init+0x264>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	4b76      	ldr	r3, [pc, #472]	@ (8002af0 <MX_GPIO_Init+0x264>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4a75      	ldr	r2, [pc, #468]	@ (8002af0 <MX_GPIO_Init+0x264>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4b73      	ldr	r3, [pc, #460]	@ (8002af0 <MX_GPIO_Init+0x264>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	4b6f      	ldr	r3, [pc, #444]	@ (8002af0 <MX_GPIO_Init+0x264>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a6e      	ldr	r2, [pc, #440]	@ (8002af0 <MX_GPIO_Init+0x264>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b6c      	ldr	r3, [pc, #432]	@ (8002af0 <MX_GPIO_Init+0x264>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	2101      	movs	r1, #1
 800294e:	4869      	ldr	r0, [pc, #420]	@ (8002af4 <MX_GPIO_Init+0x268>)
 8002950:	f003 f9f8 	bl	8005d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPEC_LED_GPIO_Port, SPEC_LED_Pin, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	2180      	movs	r1, #128	@ 0x80
 8002958:	4867      	ldr	r0, [pc, #412]	@ (8002af8 <MX_GPIO_Init+0x26c>)
 800295a:	f003 f9f3 	bl	8005d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin|READY_LED_Pin|BLE_RST_Pin|BLE_CS_Pin, GPIO_PIN_RESET);
 800295e:	2200      	movs	r2, #0
 8002960:	f243 0103 	movw	r1, #12291	@ 0x3003
 8002964:	4865      	ldr	r0, [pc, #404]	@ (8002afc <MX_GPIO_Init+0x270>)
 8002966:	f003 f9ed 	bl	8005d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Bcode_INIT_Pin|BT_INIT_Pin|EN_5vReg_Pin|LCD_CE_Pin
 800296a:	2200      	movs	r2, #0
 800296c:	f643 0107 	movw	r1, #14343	@ 0x3807
 8002970:	4863      	ldr	r0, [pc, #396]	@ (8002b00 <MX_GPIO_Init+0x274>)
 8002972:	f003 f9e7 	bl	8005d44 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 8002976:	2200      	movs	r2, #0
 8002978:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800297c:	4861      	ldr	r0, [pc, #388]	@ (8002b04 <MX_GPIO_Init+0x278>)
 800297e:	f003 f9e1 	bl	8005d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_EXTI_Pin */
  GPIO_InitStruct.Pin = BLE_EXTI_Pin;
 8002982:	2304      	movs	r3, #4
 8002984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002986:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800298a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BLE_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	4619      	mov	r1, r3
 8002996:	4859      	ldr	r0, [pc, #356]	@ (8002afc <MX_GPIO_Init+0x270>)
 8002998:	f002 ff24 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800299c:	2301      	movs	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a0:	2301      	movs	r3, #1
 80029a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	4619      	mov	r1, r3
 80029b2:	4850      	ldr	r0, [pc, #320]	@ (8002af4 <MX_GPIO_Init+0x268>)
 80029b4:	f002 ff16 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NAVIGATE_BTN_Pin SPEC_EOS_Pin */
  GPIO_InitStruct.Pin = NAVIGATE_BTN_Pin|SPEC_EOS_Pin;
 80029b8:	2311      	movs	r3, #17
 80029ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	4619      	mov	r1, r3
 80029cc:	484a      	ldr	r0, [pc, #296]	@ (8002af8 <MX_GPIO_Init+0x26c>)
 80029ce:	f002 ff09 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : StartTest_BTN_Pin */
  GPIO_InitStruct.Pin = StartTest_BTN_Pin;
 80029d2:	2320      	movs	r3, #32
 80029d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(StartTest_BTN_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	4619      	mov	r1, r3
 80029e4:	4844      	ldr	r0, [pc, #272]	@ (8002af8 <MX_GPIO_Init+0x26c>)
 80029e6:	f002 fefd 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_LED_Pin */
  GPIO_InitStruct.Pin = SPEC_LED_Pin;
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPEC_LED_GPIO_Port, &GPIO_InitStruct);
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	4619      	mov	r1, r3
 8002a00:	483d      	ldr	r0, [pc, #244]	@ (8002af8 <MX_GPIO_Init+0x26c>)
 8002a02:	f002 feef 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERR_BUZZER_Pin READY_LED_Pin BLE_RST_Pin BLE_CS_Pin */
  GPIO_InitStruct.Pin = ERR_BUZZER_Pin|READY_LED_Pin|BLE_RST_Pin|BLE_CS_Pin;
 8002a06:	f243 0303 	movw	r3, #12291	@ 0x3003
 8002a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4837      	ldr	r0, [pc, #220]	@ (8002afc <MX_GPIO_Init+0x270>)
 8002a20:	f002 fee0 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NEXT_BTN_Pin PREV_BTN_Pin */
  GPIO_InitStruct.Pin = NEXT_BTN_Pin|PREV_BTN_Pin;
 8002a24:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	4619      	mov	r1, r3
 8002a38:	4830      	ldr	r0, [pc, #192]	@ (8002afc <MX_GPIO_Init+0x270>)
 8002a3a:	f002 fed3 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IsCharging_EXTI_Pin */
  GPIO_InitStruct.Pin = IsCharging_EXTI_Pin;
 8002a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a44:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IsCharging_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4619      	mov	r1, r3
 8002a54:	482a      	ldr	r0, [pc, #168]	@ (8002b00 <MX_GPIO_Init+0x274>)
 8002a56:	f002 fec5 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Bcode_INIT_Pin BT_INIT_Pin EN_5vReg_Pin LCD_CE_Pin
                           LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = Bcode_INIT_Pin|BT_INIT_Pin|EN_5vReg_Pin|LCD_CE_Pin
 8002a5a:	f643 0307 	movw	r3, #14343	@ 0x3807
 8002a5e:	61fb      	str	r3, [r7, #28]
                          |LCD_DC_Pin|LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a60:	2301      	movs	r3, #1
 8002a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	4619      	mov	r1, r3
 8002a72:	4823      	ldr	r0, [pc, #140]	@ (8002b00 <MX_GPIO_Init+0x274>)
 8002a74:	f002 feb6 	bl	80057e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEC_START_Pin SPEC_GAIN_Pin */
  GPIO_InitStruct.Pin = SPEC_START_Pin|SPEC_GAIN_Pin;
 8002a78:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	4619      	mov	r1, r3
 8002a90:	481c      	ldr	r0, [pc, #112]	@ (8002b04 <MX_GPIO_Init+0x278>)
 8002a92:	f002 fea7 	bl	80057e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2008      	movs	r0, #8
 8002a9c:	f001 ffc3 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002aa0:	2008      	movs	r0, #8
 8002aa2:	f001 ffdc 	bl	8004a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2009      	movs	r0, #9
 8002aac:	f001 ffbb 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002ab0:	2009      	movs	r0, #9
 8002ab2:	f001 ffd4 	bl	8004a5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* EXTI interrupt init */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2102      	movs	r1, #2
 8002aba:	2017      	movs	r0, #23
 8002abc:	f001 ffb3 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ac0:	2017      	movs	r0, #23
 8002ac2:	f001 ffcc 	bl	8004a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2102      	movs	r1, #2
 8002aca:	200a      	movs	r0, #10
 8002acc:	f001 ffab 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ad0:	200a      	movs	r0, #10
 8002ad2:	f001 ffc4 	bl	8004a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2102      	movs	r1, #2
 8002ada:	2006      	movs	r0, #6
 8002adc:	f001 ffa3 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ae0:	2006      	movs	r0, #6
 8002ae2:	f001 ffbc 	bl	8004a5e <HAL_NVIC_EnableIRQ>

     // HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin, GPIO_PIN_SET);
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ae6:	bf00      	nop
 8002ae8:	3730      	adds	r7, #48	@ 0x30
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40020c00 	.word	0x40020c00
 8002b04:	40020400 	.word	0x40020400

08002b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0c:	b672      	cpsid	i
}
 8002b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b10:	bf00      	nop
 8002b12:	e7fd      	b.n	8002b10 <Error_Handler+0x8>

08002b14 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	480a      	ldr	r0, [pc, #40]	@ (8002b48 <ssd1306_Reset+0x34>)
 8002b1e:	f003 f911 	bl	8005d44 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2104      	movs	r1, #4
 8002b26:	4808      	ldr	r0, [pc, #32]	@ (8002b48 <ssd1306_Reset+0x34>)
 8002b28:	f003 f90c 	bl	8005d44 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002b2c:	200a      	movs	r0, #10
 8002b2e:	f001 fa45 	bl	8003fbc <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8002b32:	2201      	movs	r2, #1
 8002b34:	2104      	movs	r1, #4
 8002b36:	4804      	ldr	r0, [pc, #16]	@ (8002b48 <ssd1306_Reset+0x34>)
 8002b38:	f003 f904 	bl	8005d44 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002b3c:	200a      	movs	r0, #10
 8002b3e:	f001 fa3d 	bl	8003fbc <HAL_Delay>
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40020c00 	.word	0x40020c00

08002b4c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002b56:	2200      	movs	r2, #0
 8002b58:	2101      	movs	r1, #1
 8002b5a:	480c      	ldr	r0, [pc, #48]	@ (8002b8c <ssd1306_WriteCommand+0x40>)
 8002b5c:	f003 f8f2 	bl	8005d44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8002b60:	2200      	movs	r2, #0
 8002b62:	2102      	movs	r1, #2
 8002b64:	4809      	ldr	r0, [pc, #36]	@ (8002b8c <ssd1306_WriteCommand+0x40>)
 8002b66:	f003 f8ed 	bl	8005d44 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8002b6a:	1df9      	adds	r1, r7, #7
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	2201      	movs	r2, #1
 8002b72:	4807      	ldr	r0, [pc, #28]	@ (8002b90 <ssd1306_WriteCommand+0x44>)
 8002b74:	f006 ff77 	bl	8009a66 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002b78:	2201      	movs	r2, #1
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4803      	ldr	r0, [pc, #12]	@ (8002b8c <ssd1306_WriteCommand+0x40>)
 8002b7e:	f003 f8e1 	bl	8005d44 <HAL_GPIO_WritePin>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40020c00 	.word	0x40020c00
 8002b90:	20000630 	.word	0x20000630

08002b94 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	480c      	ldr	r0, [pc, #48]	@ (8002bd4 <ssd1306_WriteData+0x40>)
 8002ba4:	f003 f8ce 	bl	8005d44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2102      	movs	r1, #2
 8002bac:	4809      	ldr	r0, [pc, #36]	@ (8002bd4 <ssd1306_WriteData+0x40>)
 8002bae:	f003 f8c9 	bl	8005d44 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4806      	ldr	r0, [pc, #24]	@ (8002bd8 <ssd1306_WriteData+0x44>)
 8002bbe:	f006 ff52 	bl	8009a66 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	4803      	ldr	r0, [pc, #12]	@ (8002bd4 <ssd1306_WriteData+0x40>)
 8002bc8:	f003 f8bc 	bl	8005d44 <HAL_GPIO_WritePin>
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40020c00 	.word	0x40020c00
 8002bd8:	20000630 	.word	0x20000630

08002bdc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002be0:	f7ff ff98 	bl	8002b14 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(10);  //10
 8002be4:	200a      	movs	r0, #10
 8002be6:	f001 f9e9 	bl	8003fbc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002bea:	2000      	movs	r0, #0
 8002bec:	f000 fa7e 	bl	80030ec <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002bf0:	2020      	movs	r0, #32
 8002bf2:	f7ff ffab 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7ff ffa8 	bl	8002b4c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002bfc:	20b0      	movs	r0, #176	@ 0xb0
 8002bfe:	f7ff ffa5 	bl	8002b4c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002c02:	20c8      	movs	r0, #200	@ 0xc8
 8002c04:	f7ff ffa2 	bl	8002b4c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff ff9f 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002c0e:	2010      	movs	r0, #16
 8002c10:	f7ff ff9c 	bl	8002b4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002c14:	2040      	movs	r0, #64	@ 0x40
 8002c16:	f7ff ff99 	bl	8002b4c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002c1a:	20ff      	movs	r0, #255	@ 0xff
 8002c1c:	f000 fa53 	bl	80030c6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002c20:	20a1      	movs	r0, #161	@ 0xa1
 8002c22:	f7ff ff93 	bl	8002b4c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002c26:	20a6      	movs	r0, #166	@ 0xa6
 8002c28:	f7ff ff90 	bl	8002b4c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002c2c:	20a8      	movs	r0, #168	@ 0xa8
 8002c2e:	f7ff ff8d 	bl	8002b4c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002c32:	203f      	movs	r0, #63	@ 0x3f
 8002c34:	f7ff ff8a 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002c38:	20a4      	movs	r0, #164	@ 0xa4
 8002c3a:	f7ff ff87 	bl	8002b4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002c3e:	20d3      	movs	r0, #211	@ 0xd3
 8002c40:	f7ff ff84 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7ff ff81 	bl	8002b4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002c4a:	20d5      	movs	r0, #213	@ 0xd5
 8002c4c:	f7ff ff7e 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002c50:	20f0      	movs	r0, #240	@ 0xf0
 8002c52:	f7ff ff7b 	bl	8002b4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002c56:	20d9      	movs	r0, #217	@ 0xd9
 8002c58:	f7ff ff78 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002c5c:	2022      	movs	r0, #34	@ 0x22
 8002c5e:	f7ff ff75 	bl	8002b4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002c62:	20da      	movs	r0, #218	@ 0xda
 8002c64:	f7ff ff72 	bl	8002b4c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002c68:	2012      	movs	r0, #18
 8002c6a:	f7ff ff6f 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002c6e:	20db      	movs	r0, #219	@ 0xdb
 8002c70:	f7ff ff6c 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002c74:	2020      	movs	r0, #32
 8002c76:	f7ff ff69 	bl	8002b4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002c7a:	208d      	movs	r0, #141	@ 0x8d
 8002c7c:	f7ff ff66 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002c80:	2014      	movs	r0, #20
 8002c82:	f7ff ff63 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002c86:	2001      	movs	r0, #1
 8002c88:	f000 fa30 	bl	80030ec <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f000 f80f 	bl	8002cb0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002c92:	f000 f825 	bl	8002ce0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002c96:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <ssd1306_Init+0xd0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	@ (8002cac <ssd1306_Init+0xd0>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002ca2:	4b02      	ldr	r3, [pc, #8]	@ (8002cac <ssd1306_Init+0xd0>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	711a      	strb	r2, [r3, #4]
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000cb0 	.word	0x20000cb0

08002cb0 <ssd1306_Fill>:

	/* Return OK */
	return 1;
}
/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <ssd1306_Fill+0x14>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <ssd1306_Fill+0x16>
 8002cc4:	23ff      	movs	r3, #255	@ 0xff
 8002cc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4803      	ldr	r0, [pc, #12]	@ (8002cdc <ssd1306_Fill+0x2c>)
 8002cce:	f013 fa0c 	bl	80160ea <memset>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200008b0 	.word	0x200008b0

08002ce0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	71fb      	strb	r3, [r7, #7]
 8002cea:	e016      	b.n	8002d1a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	3b50      	subs	r3, #80	@ 0x50
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff2a 	bl	8002b4c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff ff27 	bl	8002b4c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002cfe:	2010      	movs	r0, #16
 8002d00:	f7ff ff24 	bl	8002b4c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	01db      	lsls	r3, r3, #7
 8002d08:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <ssd1306_UpdateScreen+0x4c>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	2180      	movs	r1, #128	@ 0x80
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff40 	bl	8002b94 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	3301      	adds	r3, #1
 8002d18:	71fb      	strb	r3, [r7, #7]
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	2b07      	cmp	r3, #7
 8002d1e:	d9e5      	bls.n	8002cec <ssd1306_UpdateScreen+0xc>
    }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200008b0 	.word	0x200008b0

08002d30 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	71bb      	strb	r3, [r7, #6]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db3d      	blt.n	8002dc6 <ssd1306_DrawPixel+0x96>
 8002d4a:	79bb      	ldrb	r3, [r7, #6]
 8002d4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d4e:	d83a      	bhi.n	8002dc6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002d50:	797b      	ldrb	r3, [r7, #5]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d11a      	bne.n	8002d8c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	79bb      	ldrb	r3, [r7, #6]
 8002d5a:	08db      	lsrs	r3, r3, #3
 8002d5c:	b2d8      	uxtb	r0, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	01db      	lsls	r3, r3, #7
 8002d62:	4413      	add	r3, r2
 8002d64:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd4 <ssd1306_DrawPixel+0xa4>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	b25a      	sxtb	r2, r3
 8002d6a:	79bb      	ldrb	r3, [r7, #6]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	b259      	sxtb	r1, r3
 8002d7c:	79fa      	ldrb	r2, [r7, #7]
 8002d7e:	4603      	mov	r3, r0
 8002d80:	01db      	lsls	r3, r3, #7
 8002d82:	4413      	add	r3, r2
 8002d84:	b2c9      	uxtb	r1, r1
 8002d86:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <ssd1306_DrawPixel+0xa4>)
 8002d88:	54d1      	strb	r1, [r2, r3]
 8002d8a:	e01d      	b.n	8002dc8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d8c:	79fa      	ldrb	r2, [r7, #7]
 8002d8e:	79bb      	ldrb	r3, [r7, #6]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	b2d8      	uxtb	r0, r3
 8002d94:	4603      	mov	r3, r0
 8002d96:	01db      	lsls	r3, r3, #7
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd4 <ssd1306_DrawPixel+0xa4>)
 8002d9c:	5cd3      	ldrb	r3, [r2, r3]
 8002d9e:	b25a      	sxtb	r2, r3
 8002da0:	79bb      	ldrb	r3, [r7, #6]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	4013      	ands	r3, r2
 8002db4:	b259      	sxtb	r1, r3
 8002db6:	79fa      	ldrb	r2, [r7, #7]
 8002db8:	4603      	mov	r3, r0
 8002dba:	01db      	lsls	r3, r3, #7
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b2c9      	uxtb	r1, r1
 8002dc0:	4a04      	ldr	r2, [pc, #16]	@ (8002dd4 <ssd1306_DrawPixel+0xa4>)
 8002dc2:	54d1      	strb	r1, [r2, r3]
 8002dc4:	e000      	b.n	8002dc8 <ssd1306_DrawPixel+0x98>
        return;
 8002dc6:	bf00      	nop
    }
}
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	200008b0 	.word	0x200008b0

08002dd8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b089      	sub	sp, #36	@ 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4604      	mov	r4, r0
 8002de0:	4638      	mov	r0, r7
 8002de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002de6:	4623      	mov	r3, r4
 8002de8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b1f      	cmp	r3, #31
 8002dee:	d902      	bls.n	8002df6 <ssd1306_WriteChar+0x1e>
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b7e      	cmp	r3, #126	@ 0x7e
 8002df4:	d901      	bls.n	8002dfa <ssd1306_WriteChar+0x22>
        return 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e077      	b.n	8002eea <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef4 <ssd1306_WriteChar+0x11c>)
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	783b      	ldrb	r3, [r7, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	2b80      	cmp	r3, #128	@ 0x80
 8002e06:	dc06      	bgt.n	8002e16 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002e08:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef4 <ssd1306_WriteChar+0x11c>)
 8002e0a:	885b      	ldrh	r3, [r3, #2]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	787b      	ldrb	r3, [r7, #1]
 8002e10:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002e12:	2b40      	cmp	r3, #64	@ 0x40
 8002e14:	dd01      	ble.n	8002e1a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e067      	b.n	8002eea <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	e04e      	b.n	8002ebe <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	3b20      	subs	r3, #32
 8002e26:	7879      	ldrb	r1, [r7, #1]
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	440b      	add	r3, r1
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e036      	b.n	8002eae <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002e50:	4b28      	ldr	r3, [pc, #160]	@ (8002ef4 <ssd1306_WriteChar+0x11c>)
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	b2d8      	uxtb	r0, r3
 8002e5e:	4b25      	ldr	r3, [pc, #148]	@ (8002ef4 <ssd1306_WriteChar+0x11c>)
 8002e60:	885b      	ldrh	r3, [r3, #2]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7ff ff5d 	bl	8002d30 <ssd1306_DrawPixel>
 8002e76:	e017      	b.n	8002ea8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002e78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef4 <ssd1306_WriteChar+0x11c>)
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	b2d8      	uxtb	r0, r3
 8002e86:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <ssd1306_WriteChar+0x11c>)
 8002e88:	885b      	ldrh	r3, [r3, #2]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	b2d9      	uxtb	r1, r3
 8002e94:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f7ff ff44 	bl	8002d30 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	783b      	ldrb	r3, [r7, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d3c3      	bcc.n	8002e40 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	787b      	ldrb	r3, [r7, #1]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d3ab      	bcc.n	8002e20 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <ssd1306_WriteChar+0x11c>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	2a00      	cmp	r2, #0
 8002ed0:	d005      	beq.n	8002ede <ssd1306_WriteChar+0x106>
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	3a20      	subs	r2, #32
 8002ed8:	440a      	add	r2, r1
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	e000      	b.n	8002ee0 <ssd1306_WriteChar+0x108>
 8002ede:	783a      	ldrb	r2, [r7, #0]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	4b03      	ldr	r3, [pc, #12]	@ (8002ef4 <ssd1306_WriteChar+0x11c>)
 8002ee6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd90      	pop	{r4, r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000cb0 	.word	0x20000cb0

08002ef8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	4638      	mov	r0, r7
 8002f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002f06:	e013      	b.n	8002f30 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	7818      	ldrb	r0, [r3, #0]
 8002f0c:	7e3b      	ldrb	r3, [r7, #24]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	463b      	mov	r3, r7
 8002f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f14:	f7ff ff60 	bl	8002dd8 <ssd1306_WriteChar>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d002      	beq.n	8002f2a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	e008      	b.n	8002f3c <ssd1306_WriteString+0x44>
        }
        str++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e7      	bne.n	8002f08 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	71fb      	strb	r3, [r7, #7]
 8002f50:	4613      	mov	r3, r2
 8002f52:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <ssd1306_SetCursor+0x2c>)
 8002f5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002f5c:	79bb      	ldrb	r3, [r7, #6]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <ssd1306_SetCursor+0x2c>)
 8002f62:	805a      	strh	r2, [r3, #2]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	20000cb0 	.word	0x20000cb0

08002f74 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	4611      	mov	r1, r2
 8002f80:	461a      	mov	r2, r3
 8002f82:	4623      	mov	r3, r4
 8002f84:	71fb      	strb	r3, [r7, #7]
 8002f86:	4603      	mov	r3, r0
 8002f88:	71bb      	strb	r3, [r7, #6]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	717b      	strb	r3, [r7, #5]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002f92:	79fa      	ldrb	r2, [r7, #7]
 8002f94:	797b      	ldrb	r3, [r7, #5]
 8002f96:	4293      	cmp	r3, r2
 8002f98:	bf28      	it	cs
 8002f9a:	4613      	movcs	r3, r2
 8002f9c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002f9e:	797a      	ldrb	r2, [r7, #5]
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	bf38      	it	cc
 8002fa6:	4613      	movcc	r3, r2
 8002fa8:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002faa:	79ba      	ldrb	r2, [r7, #6]
 8002fac:	793b      	ldrb	r3, [r7, #4]
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	bf28      	it	cs
 8002fb2:	4613      	movcs	r3, r2
 8002fb4:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002fb6:	793a      	ldrb	r2, [r7, #4]
 8002fb8:	79bb      	ldrb	r3, [r7, #6]
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	bf38      	it	cc
 8002fbe:	4613      	movcc	r3, r2
 8002fc0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	e017      	b.n	8002ff8 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002fc8:	7b7b      	ldrb	r3, [r7, #13]
 8002fca:	73bb      	strb	r3, [r7, #14]
 8002fcc:	e009      	b.n	8002fe2 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002fce:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002fd2:	7bf9      	ldrb	r1, [r7, #15]
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff feaa 	bl	8002d30 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002fdc:	7bbb      	ldrb	r3, [r7, #14]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	73bb      	strb	r3, [r7, #14]
 8002fe2:	7bba      	ldrb	r2, [r7, #14]
 8002fe4:	7b3b      	ldrb	r3, [r7, #12]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d803      	bhi.n	8002ff2 <ssd1306_FillRectangle+0x7e>
 8002fea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	daed      	bge.n	8002fce <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	7abb      	ldrb	r3, [r7, #10]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d803      	bhi.n	8003008 <ssd1306_FillRectangle+0x94>
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b3f      	cmp	r3, #63	@ 0x3f
 8003004:	d9e0      	bls.n	8002fc8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8003006:	bf00      	nop
 8003008:	bf00      	nop
}
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bd90      	pop	{r4, r7, pc}

08003010 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	603a      	str	r2, [r7, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
 800301e:	460b      	mov	r3, r1
 8003020:	71bb      	strb	r3, [r7, #6]
 8003022:	4613      	mov	r3, r2
 8003024:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003026:	797b      	ldrb	r3, [r7, #5]
 8003028:	3307      	adds	r3, #7
 800302a:	2b00      	cmp	r3, #0
 800302c:	da00      	bge.n	8003030 <ssd1306_DrawBitmap+0x20>
 800302e:	3307      	adds	r3, #7
 8003030:	10db      	asrs	r3, r3, #3
 8003032:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db3e      	blt.n	80030be <ssd1306_DrawBitmap+0xae>
 8003040:	79bb      	ldrb	r3, [r7, #6]
 8003042:	2b3f      	cmp	r3, #63	@ 0x3f
 8003044:	d83b      	bhi.n	80030be <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8003046:	2300      	movs	r3, #0
 8003048:	73bb      	strb	r3, [r7, #14]
 800304a:	e033      	b.n	80030b4 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800304c:	2300      	movs	r3, #0
 800304e:	737b      	strb	r3, [r7, #13]
 8003050:	e026      	b.n	80030a0 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8003052:	7b7b      	ldrb	r3, [r7, #13]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e00d      	b.n	8003080 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003064:	7bbb      	ldrb	r3, [r7, #14]
 8003066:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	7b7a      	ldrb	r2, [r7, #13]
 8003070:	08d2      	lsrs	r2, r2, #3
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	4413      	add	r3, r2
 8003076:	461a      	mov	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4413      	add	r3, r2
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8003080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003084:	2b00      	cmp	r3, #0
 8003086:	da08      	bge.n	800309a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8003088:	79fa      	ldrb	r2, [r7, #7]
 800308a:	7b7b      	ldrb	r3, [r7, #13]
 800308c:	4413      	add	r3, r2
 800308e:	b2db      	uxtb	r3, r3
 8003090:	7f3a      	ldrb	r2, [r7, #28]
 8003092:	79b9      	ldrb	r1, [r7, #6]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fe4b 	bl	8002d30 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800309a:	7b7b      	ldrb	r3, [r7, #13]
 800309c:	3301      	adds	r3, #1
 800309e:	737b      	strb	r3, [r7, #13]
 80030a0:	7b7a      	ldrb	r2, [r7, #13]
 80030a2:	797b      	ldrb	r3, [r7, #5]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d3d4      	bcc.n	8003052 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80030a8:	7bbb      	ldrb	r3, [r7, #14]
 80030aa:	3301      	adds	r3, #1
 80030ac:	73bb      	strb	r3, [r7, #14]
 80030ae:	79bb      	ldrb	r3, [r7, #6]
 80030b0:	3301      	adds	r3, #1
 80030b2:	71bb      	strb	r3, [r7, #6]
 80030b4:	7bba      	ldrb	r2, [r7, #14]
 80030b6:	7e3b      	ldrb	r3, [r7, #24]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d3c7      	bcc.n	800304c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80030bc:	e000      	b.n	80030c0 <ssd1306_DrawBitmap+0xb0>
        return;
 80030be:	bf00      	nop
}
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80030d0:	2381      	movs	r3, #129	@ 0x81
 80030d2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fd38 	bl	8002b4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fd34 	bl	8002b4c <ssd1306_WriteCommand>
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80030fc:	23af      	movs	r3, #175	@ 0xaf
 80030fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003100:	4b08      	ldr	r3, [pc, #32]	@ (8003124 <ssd1306_SetDisplayOn+0x38>)
 8003102:	2201      	movs	r2, #1
 8003104:	715a      	strb	r2, [r3, #5]
 8003106:	e004      	b.n	8003112 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003108:	23ae      	movs	r3, #174	@ 0xae
 800310a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <ssd1306_SetDisplayOn+0x38>)
 800310e:	2200      	movs	r2, #0
 8003110:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fd19 	bl	8002b4c <ssd1306_WriteCommand>
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000cb0 	.word	0x20000cb0

08003128 <OLED_DrawBitmap>:
    return SSD1306.DisplayOn;
}

//*********************************************************************************************//
// For 16*8
void OLED_DrawBitmap(uint8_t x, uint8_t y, const uint8_t* bitmap, uint8_t width, uint8_t height) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	603a      	str	r2, [r7, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	460b      	mov	r3, r1
 8003138:	71bb      	strb	r3, [r7, #6]
 800313a:	4613      	mov	r3, r2
 800313c:	717b      	strb	r3, [r7, #5]
    for (uint8_t i = 0; i < height; i++) {
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e031      	b.n	80031a8 <OLED_DrawBitmap+0x80>
        for (uint8_t j = 0; j < width; j++) {
 8003144:	2300      	movs	r3, #0
 8003146:	73bb      	strb	r3, [r7, #14]
 8003148:	e027      	b.n	800319a <OLED_DrawBitmap+0x72>
            if (bitmap[i] & (1 << j)) {
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	7bbb      	ldrb	r3, [r7, #14]
 8003156:	fa42 f303 	asr.w	r3, r2, r3
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <OLED_DrawBitmap+0x54>
            	ssd1306_DrawPixel(x + j, y + i, White);  // Draw pixel if bit is set
 8003162:	79fa      	ldrb	r2, [r7, #7]
 8003164:	7bbb      	ldrb	r3, [r7, #14]
 8003166:	4413      	add	r3, r2
 8003168:	b2d8      	uxtb	r0, r3
 800316a:	79ba      	ldrb	r2, [r7, #6]
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	4413      	add	r3, r2
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2201      	movs	r2, #1
 8003174:	4619      	mov	r1, r3
 8003176:	f7ff fddb 	bl	8002d30 <ssd1306_DrawPixel>
 800317a:	e00b      	b.n	8003194 <OLED_DrawBitmap+0x6c>
            } else {
            	ssd1306_DrawPixel(x + j, y + i, Black);  // Clear pixel if bit is not set
 800317c:	79fa      	ldrb	r2, [r7, #7]
 800317e:	7bbb      	ldrb	r3, [r7, #14]
 8003180:	4413      	add	r3, r2
 8003182:	b2d8      	uxtb	r0, r3
 8003184:	79ba      	ldrb	r2, [r7, #6]
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	4413      	add	r3, r2
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2200      	movs	r2, #0
 800318e:	4619      	mov	r1, r3
 8003190:	f7ff fdce 	bl	8002d30 <ssd1306_DrawPixel>
        for (uint8_t j = 0; j < width; j++) {
 8003194:	7bbb      	ldrb	r3, [r7, #14]
 8003196:	3301      	adds	r3, #1
 8003198:	73bb      	strb	r3, [r7, #14]
 800319a:	7bba      	ldrb	r2, [r7, #14]
 800319c:	797b      	ldrb	r3, [r7, #5]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d3d3      	bcc.n	800314a <OLED_DrawBitmap+0x22>
    for (uint8_t i = 0; i < height; i++) {
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	3301      	adds	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	7e3b      	ldrb	r3, [r7, #24]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d3c9      	bcc.n	8003144 <OLED_DrawBitmap+0x1c>
            }
        }
    }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <HAL_MspInit+0x4c>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003208 <HAL_MspInit+0x4c>)
 80031cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <HAL_MspInit+0x4c>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <HAL_MspInit+0x4c>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	4a08      	ldr	r2, [pc, #32]	@ (8003208 <HAL_MspInit+0x4c>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ee:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_MspInit+0x4c>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800

0800320c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08c      	sub	sp, #48	@ 0x30
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a5e      	ldr	r2, [pc, #376]	@ (80033a4 <HAL_ADC_MspInit+0x198>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d157      	bne.n	80032de <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	4b5d      	ldr	r3, [pc, #372]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003236:	4a5c      	ldr	r2, [pc, #368]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800323c:	6453      	str	r3, [r2, #68]	@ 0x44
 800323e:	4b5a      	ldr	r3, [pc, #360]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	4b56      	ldr	r3, [pc, #344]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	4a55      	ldr	r2, [pc, #340]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	6313      	str	r3, [r2, #48]	@ 0x30
 800325a:	4b53      	ldr	r3, [pc, #332]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 8003266:	2301      	movs	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800326a:	2303      	movs	r3, #3
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8003272:	f107 031c 	add.w	r3, r7, #28
 8003276:	4619      	mov	r1, r3
 8003278:	484c      	ldr	r0, [pc, #304]	@ (80033ac <HAL_ADC_MspInit+0x1a0>)
 800327a:	f002 fab3 	bl	80057e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800327e:	4b4c      	ldr	r3, [pc, #304]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 8003280:	4a4c      	ldr	r2, [pc, #304]	@ (80033b4 <HAL_ADC_MspInit+0x1a8>)
 8003282:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003284:	4b4a      	ldr	r3, [pc, #296]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 8003286:	2200      	movs	r2, #0
 8003288:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800328a:	4b49      	ldr	r3, [pc, #292]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003290:	4b47      	ldr	r3, [pc, #284]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003296:	4b46      	ldr	r3, [pc, #280]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 8003298:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800329c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800329e:	4b44      	ldr	r3, [pc, #272]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 80032a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032a6:	4b42      	ldr	r3, [pc, #264]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 80032a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80032ae:	4b40      	ldr	r3, [pc, #256]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032b4:	4b3e      	ldr	r3, [pc, #248]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ba:	4b3d      	ldr	r3, [pc, #244]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 80032bc:	2200      	movs	r2, #0
 80032be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032c0:	483b      	ldr	r0, [pc, #236]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 80032c2:	f001 fbf5 	bl	8004ab0 <HAL_DMA_Init>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80032cc:	f7ff fc1c 	bl	8002b08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a37      	ldr	r2, [pc, #220]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 80032d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80032d6:	4a36      	ldr	r2, [pc, #216]	@ (80033b0 <HAL_ADC_MspInit+0x1a4>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80032dc:	e05d      	b.n	800339a <HAL_ADC_MspInit+0x18e>
  else if(hadc->Instance==ADC3)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a35      	ldr	r2, [pc, #212]	@ (80033b8 <HAL_ADC_MspInit+0x1ac>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d158      	bne.n	800339a <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	4b2e      	ldr	r3, [pc, #184]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 80032ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f0:	4a2d      	ldr	r2, [pc, #180]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 80032f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80032f8:	4b2b      	ldr	r3, [pc, #172]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 80032fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	4b27      	ldr	r3, [pc, #156]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	4a26      	ldr	r2, [pc, #152]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6313      	str	r3, [r2, #48]	@ 0x30
 8003314:	4b24      	ldr	r3, [pc, #144]	@ (80033a8 <HAL_ADC_MspInit+0x19c>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPEC_VIDEO_Pin;
 8003320:	2302      	movs	r3, #2
 8003322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003324:	2303      	movs	r3, #3
 8003326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPEC_VIDEO_GPIO_Port, &GPIO_InitStruct);
 800332c:	f107 031c 	add.w	r3, r7, #28
 8003330:	4619      	mov	r1, r3
 8003332:	4822      	ldr	r0, [pc, #136]	@ (80033bc <HAL_ADC_MspInit+0x1b0>)
 8003334:	f002 fa56 	bl	80057e4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8003338:	4b21      	ldr	r3, [pc, #132]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 800333a:	4a22      	ldr	r2, [pc, #136]	@ (80033c4 <HAL_ADC_MspInit+0x1b8>)
 800333c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800333e:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 8003340:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003344:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003346:	4b1e      	ldr	r3, [pc, #120]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800334c:	4b1c      	ldr	r3, [pc, #112]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003352:	4b1b      	ldr	r3, [pc, #108]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 8003354:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003358:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800335a:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 800335c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003360:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003362:	4b17      	ldr	r3, [pc, #92]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 8003364:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003368:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800336a:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 800336c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003370:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003372:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 8003374:	2200      	movs	r2, #0
 8003376:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003378:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 800337a:	2200      	movs	r2, #0
 800337c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800337e:	4810      	ldr	r0, [pc, #64]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 8003380:	f001 fb96 	bl	8004ab0 <HAL_DMA_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_ADC_MspInit+0x182>
      Error_Handler();
 800338a:	f7ff fbbd 	bl	8002b08 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a0b      	ldr	r2, [pc, #44]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 8003392:	639a      	str	r2, [r3, #56]	@ 0x38
 8003394:	4a0a      	ldr	r2, [pc, #40]	@ (80033c0 <HAL_ADC_MspInit+0x1b4>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800339a:	bf00      	nop
 800339c:	3730      	adds	r7, #48	@ 0x30
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40012000 	.word	0x40012000
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020400 	.word	0x40020400
 80033b0:	2000051c 	.word	0x2000051c
 80033b4:	40026470 	.word	0x40026470
 80033b8:	40012200 	.word	0x40012200
 80033bc:	40020000 	.word	0x40020000
 80033c0:	2000057c 	.word	0x2000057c
 80033c4:	40026410 	.word	0x40026410

080033c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	@ 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a29      	ldr	r2, [pc, #164]	@ (800348c <HAL_I2C_MspInit+0xc4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d14b      	bne.n	8003482 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	4b28      	ldr	r3, [pc, #160]	@ (8003490 <HAL_I2C_MspInit+0xc8>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	4a27      	ldr	r2, [pc, #156]	@ (8003490 <HAL_I2C_MspInit+0xc8>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033fa:	4b25      	ldr	r3, [pc, #148]	@ (8003490 <HAL_I2C_MspInit+0xc8>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	4b21      	ldr	r3, [pc, #132]	@ (8003490 <HAL_I2C_MspInit+0xc8>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	4a20      	ldr	r2, [pc, #128]	@ (8003490 <HAL_I2C_MspInit+0xc8>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6313      	str	r3, [r2, #48]	@ 0x30
 8003416:	4b1e      	ldr	r3, [pc, #120]	@ (8003490 <HAL_I2C_MspInit+0xc8>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = RTC_SDA_Pin;
 8003422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003428:	2312      	movs	r3, #18
 800342a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003430:	2303      	movs	r3, #3
 8003432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003434:	2304      	movs	r3, #4
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RTC_SDA_GPIO_Port, &GPIO_InitStruct);
 8003438:	f107 0314 	add.w	r3, r7, #20
 800343c:	4619      	mov	r1, r3
 800343e:	4815      	ldr	r0, [pc, #84]	@ (8003494 <HAL_I2C_MspInit+0xcc>)
 8003440:	f002 f9d0 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RTC_SCL_Pin;
 8003444:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800344a:	2312      	movs	r3, #18
 800344c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003452:	2303      	movs	r3, #3
 8003454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003456:	2304      	movs	r3, #4
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RTC_SCL_GPIO_Port, &GPIO_InitStruct);
 800345a:	f107 0314 	add.w	r3, r7, #20
 800345e:	4619      	mov	r1, r3
 8003460:	480d      	ldr	r0, [pc, #52]	@ (8003498 <HAL_I2C_MspInit+0xd0>)
 8003462:	f002 f9bf 	bl	80057e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_I2C_MspInit+0xc8>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	4a08      	ldr	r2, [pc, #32]	@ (8003490 <HAL_I2C_MspInit+0xc8>)
 8003470:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003474:	6413      	str	r3, [r2, #64]	@ 0x40
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_I2C_MspInit+0xc8>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003482:	bf00      	nop
 8003484:	3728      	adds	r7, #40	@ 0x28
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40005c00 	.word	0x40005c00
 8003490:	40023800 	.word	0x40023800
 8003494:	40020800 	.word	0x40020800
 8003498:	40020000 	.word	0x40020000

0800349c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	@ 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a19      	ldr	r2, [pc, #100]	@ (8003520 <HAL_SPI_MspInit+0x84>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d12c      	bne.n	8003518 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	4b18      	ldr	r3, [pc, #96]	@ (8003524 <HAL_SPI_MspInit+0x88>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	4a17      	ldr	r2, [pc, #92]	@ (8003524 <HAL_SPI_MspInit+0x88>)
 80034c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ce:	4b15      	ldr	r3, [pc, #84]	@ (8003524 <HAL_SPI_MspInit+0x88>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	4b11      	ldr	r3, [pc, #68]	@ (8003524 <HAL_SPI_MspInit+0x88>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	4a10      	ldr	r2, [pc, #64]	@ (8003524 <HAL_SPI_MspInit+0x88>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003524 <HAL_SPI_MspInit+0x88>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80034f6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80034fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003504:	2303      	movs	r3, #3
 8003506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003508:	2306      	movs	r3, #6
 800350a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4619      	mov	r1, r3
 8003512:	4805      	ldr	r0, [pc, #20]	@ (8003528 <HAL_SPI_MspInit+0x8c>)
 8003514:	f002 f966 	bl	80057e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003518:	bf00      	nop
 800351a:	3728      	adds	r7, #40	@ 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40003c00 	.word	0x40003c00
 8003524:	40023800 	.word	0x40023800
 8003528:	40020800 	.word	0x40020800

0800352c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a40      	ldr	r2, [pc, #256]	@ (800363c <HAL_TIM_Base_MspInit+0x110>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d13e      	bne.n	80035bc <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	4b3f      	ldr	r3, [pc, #252]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	4a3e      	ldr	r2, [pc, #248]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6453      	str	r3, [r2, #68]	@ 0x44
 800354e:	4b3c      	ldr	r3, [pc, #240]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800355a:	4b3a      	ldr	r3, [pc, #232]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 800355c:	4a3a      	ldr	r2, [pc, #232]	@ (8003648 <HAL_TIM_Base_MspInit+0x11c>)
 800355e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003560:	4b38      	ldr	r3, [pc, #224]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 8003562:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003566:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003568:	4b36      	ldr	r3, [pc, #216]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 800356a:	2240      	movs	r2, #64	@ 0x40
 800356c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800356e:	4b35      	ldr	r3, [pc, #212]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 8003570:	2200      	movs	r2, #0
 8003572:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003574:	4b33      	ldr	r3, [pc, #204]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 8003576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800357a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800357c:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 800357e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003582:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003584:	4b2f      	ldr	r3, [pc, #188]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 8003586:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800358a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800358c:	4b2d      	ldr	r3, [pc, #180]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 800358e:	2200      	movs	r2, #0
 8003590:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003592:	4b2c      	ldr	r3, [pc, #176]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 8003594:	2200      	movs	r2, #0
 8003596:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003598:	4b2a      	ldr	r3, [pc, #168]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 800359a:	2200      	movs	r2, #0
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800359e:	4829      	ldr	r0, [pc, #164]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 80035a0:	f001 fa86 	bl	8004ab0 <HAL_DMA_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80035aa:	f7ff faad 	bl	8002b08 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a24      	ldr	r2, [pc, #144]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 80035b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80035b4:	4a23      	ldr	r2, [pc, #140]	@ (8003644 <HAL_TIM_Base_MspInit+0x118>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80035ba:	e03a      	b.n	8003632 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM10)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a22      	ldr	r2, [pc, #136]	@ (800364c <HAL_TIM_Base_MspInit+0x120>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d10e      	bne.n	80035e4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 80035d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
}
 80035e2:	e026      	b.n	8003632 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM11)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a19      	ldr	r2, [pc, #100]	@ (8003650 <HAL_TIM_Base_MspInit+0x124>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	4a12      	ldr	r2, [pc, #72]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 80035f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035fe:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	e012      	b.n	8003632 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM13)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a10      	ldr	r2, [pc, #64]	@ (8003654 <HAL_TIM_Base_MspInit+0x128>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10d      	bne.n	8003632 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	4a08      	ldr	r2, [pc, #32]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 8003620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003624:	6413      	str	r3, [r2, #64]	@ 0x40
 8003626:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <HAL_TIM_Base_MspInit+0x114>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
}
 8003632:	bf00      	nop
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40010000 	.word	0x40010000
 8003640:	40023800 	.word	0x40023800
 8003644:	200007a8 	.word	0x200007a8
 8003648:	40026428 	.word	0x40026428
 800364c:	40014400 	.word	0x40014400
 8003650:	40014800 	.word	0x40014800
 8003654:	40001c00 	.word	0x40001c00

08003658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	f107 030c 	add.w	r3, r7, #12
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a12      	ldr	r2, [pc, #72]	@ (80036c0 <HAL_TIM_MspPostInit+0x68>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d11e      	bne.n	80036b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <HAL_TIM_MspPostInit+0x6c>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	4a10      	ldr	r2, [pc, #64]	@ (80036c4 <HAL_TIM_MspPostInit+0x6c>)
 8003684:	f043 0310 	orr.w	r3, r3, #16
 8003688:	6313      	str	r3, [r2, #48]	@ 0x30
 800368a:	4b0e      	ldr	r3, [pc, #56]	@ (80036c4 <HAL_TIM_MspPostInit+0x6c>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SPEC_CLK_Pin;
 8003696:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800369a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPEC_CLK_GPIO_Port, &GPIO_InitStruct);
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	4619      	mov	r1, r3
 80036b2:	4805      	ldr	r0, [pc, #20]	@ (80036c8 <HAL_TIM_MspPostInit+0x70>)
 80036b4:	f002 f896 	bl	80057e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036b8:	bf00      	nop
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40021000 	.word	0x40021000

080036cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a30      	ldr	r2, [pc, #192]	@ (80037ac <HAL_UART_MspInit+0xe0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d159      	bne.n	80037a2 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	4b2f      	ldr	r3, [pc, #188]	@ (80037b0 <HAL_UART_MspInit+0xe4>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	4a2e      	ldr	r2, [pc, #184]	@ (80037b0 <HAL_UART_MspInit+0xe4>)
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036fe:	4b2c      	ldr	r3, [pc, #176]	@ (80037b0 <HAL_UART_MspInit+0xe4>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	4b28      	ldr	r3, [pc, #160]	@ (80037b0 <HAL_UART_MspInit+0xe4>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	4a27      	ldr	r2, [pc, #156]	@ (80037b0 <HAL_UART_MspInit+0xe4>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6313      	str	r3, [r2, #48]	@ 0x30
 800371a:	4b25      	ldr	r3, [pc, #148]	@ (80037b0 <HAL_UART_MspInit+0xe4>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TTL_TX_Pin|TTL_RX_Pin;
 8003726:	230c      	movs	r3, #12
 8003728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372a:	2302      	movs	r3, #2
 800372c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003732:	2303      	movs	r3, #3
 8003734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003736:	2307      	movs	r3, #7
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373a:	f107 0314 	add.w	r3, r7, #20
 800373e:	4619      	mov	r1, r3
 8003740:	481c      	ldr	r0, [pc, #112]	@ (80037b4 <HAL_UART_MspInit+0xe8>)
 8003742:	f002 f84f 	bl	80057e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003746:	4b1c      	ldr	r3, [pc, #112]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 8003748:	4a1c      	ldr	r2, [pc, #112]	@ (80037bc <HAL_UART_MspInit+0xf0>)
 800374a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800374c:	4b1a      	ldr	r3, [pc, #104]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 800374e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003752:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003754:	4b18      	ldr	r3, [pc, #96]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 8003756:	2240      	movs	r2, #64	@ 0x40
 8003758:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800375a:	4b17      	ldr	r3, [pc, #92]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 800375c:	2200      	movs	r2, #0
 800375e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003760:	4b15      	ldr	r3, [pc, #84]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 8003762:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003766:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003768:	4b13      	ldr	r3, [pc, #76]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 800376a:	2200      	movs	r2, #0
 800376c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800376e:	4b12      	ldr	r3, [pc, #72]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 8003770:	2200      	movs	r2, #0
 8003772:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003774:	4b10      	ldr	r3, [pc, #64]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 8003776:	2200      	movs	r2, #0
 8003778:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800377a:	4b0f      	ldr	r3, [pc, #60]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 800377c:	2200      	movs	r2, #0
 800377e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003780:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 8003782:	2200      	movs	r2, #0
 8003784:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003786:	480c      	ldr	r0, [pc, #48]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 8003788:	f001 f992 	bl	8004ab0 <HAL_DMA_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003792:	f7ff f9b9 	bl	8002b08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a07      	ldr	r2, [pc, #28]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 800379a:	639a      	str	r2, [r3, #56]	@ 0x38
 800379c:	4a06      	ldr	r2, [pc, #24]	@ (80037b8 <HAL_UART_MspInit+0xec>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037a2:	bf00      	nop
 80037a4:	3728      	adds	r7, #40	@ 0x28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40004400 	.word	0x40004400
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40020000 	.word	0x40020000
 80037b8:	20000850 	.word	0x20000850
 80037bc:	400260a0 	.word	0x400260a0

080037c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037c4:	bf00      	nop
 80037c6:	e7fd      	b.n	80037c4 <NMI_Handler+0x4>

080037c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037cc:	bf00      	nop
 80037ce:	e7fd      	b.n	80037cc <HardFault_Handler+0x4>

080037d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037d4:	bf00      	nop
 80037d6:	e7fd      	b.n	80037d4 <MemManage_Handler+0x4>

080037d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <BusFault_Handler+0x4>

080037e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e4:	bf00      	nop
 80037e6:	e7fd      	b.n	80037e4 <UsageFault_Handler+0x4>

080037e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003816:	f000 fbb1 	bl	8003f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_2);
 8003824:	4802      	ldr	r0, [pc, #8]	@ (8003830 <EXTI2_IRQHandler+0x10>)
 8003826:	f001 fce1 	bl	80051ec <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000328 	.word	0x20000328

08003834 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_3);
 8003838:	4802      	ldr	r0, [pc, #8]	@ (8003844 <EXTI3_IRQHandler+0x10>)
 800383a:	f001 fcd7 	bl	80051ec <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000010 	.word	0x20000010

08003848 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800384c:	4802      	ldr	r0, [pc, #8]	@ (8003858 <DMA1_Stream6_IRQHandler+0x10>)
 800384e:	f001 fa35 	bl	8004cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000850 	.word	0x20000850

0800385c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003860:	4802      	ldr	r0, [pc, #8]	@ (800386c <DMA2_Stream0_IRQHandler+0x10>)
 8003862:	f001 fa2b 	bl	8004cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	2000057c 	.word	0x2000057c

08003870 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003874:	4802      	ldr	r0, [pc, #8]	@ (8003880 <DMA2_Stream1_IRQHandler+0x10>)
 8003876:	f001 fa21 	bl	8004cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200007a8 	.word	0x200007a8

08003884 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003888:	4802      	ldr	r0, [pc, #8]	@ (8003894 <DMA2_Stream4_IRQHandler+0x10>)
 800388a:	f001 fa17 	bl	8004cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	2000051c 	.word	0x2000051c

08003898 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800389c:	4802      	ldr	r0, [pc, #8]	@ (80038a8 <OTG_FS_IRQHandler+0x10>)
 800389e:	f002 fd63 	bl	8006368 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200016e8 	.word	0x200016e8

080038ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return 1;
 80038b0:	2301      	movs	r3, #1
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <_kill>:

int _kill(int pid, int sig)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038c6:	f012 fc95 	bl	80161f4 <__errno>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2216      	movs	r2, #22
 80038ce:	601a      	str	r2, [r3, #0]
  return -1;
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_exit>:

void _exit (int status)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ffe7 	bl	80038bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <_exit+0x12>

080038f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e00a      	b.n	800391a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003904:	f3af 8000 	nop.w
 8003908:	4601      	mov	r1, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	60ba      	str	r2, [r7, #8]
 8003910:	b2ca      	uxtb	r2, r1
 8003912:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3301      	adds	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	429a      	cmp	r2, r3
 8003920:	dbf0      	blt.n	8003904 <_read+0x12>
  }

  return len;
 8003922:	687b      	ldr	r3, [r7, #4]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e009      	b.n	8003952 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	60ba      	str	r2, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fa60 	bl	8003e0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	3301      	adds	r3, #1
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	dbf1      	blt.n	800393e <_write+0x12>
  }
  return len;
 800395a:	687b      	ldr	r3, [r7, #4]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_close>:

int _close(int file)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800396c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800398c:	605a      	str	r2, [r3, #4]
  return 0;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_isatty>:

int _isatty(int file)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039a4:	2301      	movs	r3, #1
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039d4:	4a14      	ldr	r2, [pc, #80]	@ (8003a28 <_sbrk+0x5c>)
 80039d6:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <_sbrk+0x60>)
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039e0:	4b13      	ldr	r3, [pc, #76]	@ (8003a30 <_sbrk+0x64>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039e8:	4b11      	ldr	r3, [pc, #68]	@ (8003a30 <_sbrk+0x64>)
 80039ea:	4a12      	ldr	r2, [pc, #72]	@ (8003a34 <_sbrk+0x68>)
 80039ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ee:	4b10      	ldr	r3, [pc, #64]	@ (8003a30 <_sbrk+0x64>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d207      	bcs.n	8003a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039fc:	f012 fbfa 	bl	80161f4 <__errno>
 8003a00:	4603      	mov	r3, r0
 8003a02:	220c      	movs	r2, #12
 8003a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0a:	e009      	b.n	8003a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a0c:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <_sbrk+0x64>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a12:	4b07      	ldr	r3, [pc, #28]	@ (8003a30 <_sbrk+0x64>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	4a05      	ldr	r2, [pc, #20]	@ (8003a30 <_sbrk+0x64>)
 8003a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20020000 	.word	0x20020000
 8003a2c:	00000400 	.word	0x00000400
 8003a30:	20000cb8 	.word	0x20000cb8
 8003a34:	20002890 	.word	0x20002890

08003a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a3c:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <SystemInit+0x20>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	4a05      	ldr	r2, [pc, #20]	@ (8003a58 <SystemInit+0x20>)
 8003a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003a60:	f7ff ffea 	bl	8003a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a64:	480c      	ldr	r0, [pc, #48]	@ (8003a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a66:	490d      	ldr	r1, [pc, #52]	@ (8003a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a68:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a6c:	e002      	b.n	8003a74 <LoopCopyDataInit>

08003a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a72:	3304      	adds	r3, #4

08003a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a78:	d3f9      	bcc.n	8003a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8003aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a80:	e001      	b.n	8003a86 <LoopFillZerobss>

08003a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a84:	3204      	adds	r2, #4

08003a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a88:	d3fb      	bcc.n	8003a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a8a:	f012 fbb9 	bl	8016200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a8e:	f7fe fb6d 	bl	800216c <main>
  bx  lr    
 8003a92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a9c:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 8003aa0:	0801acd4 	.word	0x0801acd4
  ldr r2, =_sbss
 8003aa4:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8003aa8:	20002890 	.word	0x20002890

08003aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aac:	e7fe      	b.n	8003aac <ADC_IRQHandler>
	...

08003ab0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	4a04      	ldr	r2, [pc, #16]	@ (8003ad0 <BSP_LED_Init+0x20>)
 8003abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08019da4 	.word	0x08019da4

08003ad4 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	4a06      	ldr	r2, [pc, #24]	@ (8003afc <BSP_LED_On+0x28>)
 8003ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae6:	2110      	movs	r1, #16
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f002 f92a 	bl	8005d44 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000008 	.word	0x20000008

08003b00 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	4a06      	ldr	r2, [pc, #24]	@ (8003b28 <BSP_LED_Off+0x28>)
 8003b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b12:	2110      	movs	r1, #16
 8003b14:	2200      	movs	r2, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f002 f914 	bl	8005d44 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000008 	.word	0x20000008

08003b2c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba8 <LED_USER_GPIO_Init+0x7c>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <LED_USER_GPIO_Init+0x7c>)
 8003b3c:	f043 0310 	orr.w	r3, r3, #16
 8003b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b42:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <LED_USER_GPIO_Init+0x7c>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4e:	f107 030c 	add.w	r3, r7, #12
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	605a      	str	r2, [r3, #4]
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	60da      	str	r2, [r3, #12]
 8003b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	4b11      	ldr	r3, [pc, #68]	@ (8003ba8 <LED_USER_GPIO_Init+0x7c>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	4a10      	ldr	r2, [pc, #64]	@ (8003ba8 <LED_USER_GPIO_Init+0x7c>)
 8003b68:	f043 0310 	orr.w	r3, r3, #16
 8003b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba8 <LED_USER_GPIO_Init+0x7c>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2110      	movs	r1, #16
 8003b7e:	480b      	ldr	r0, [pc, #44]	@ (8003bac <LED_USER_GPIO_Init+0x80>)
 8003b80:	f002 f8e0 	bl	8005d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8003b84:	2310      	movs	r3, #16
 8003b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4804      	ldr	r0, [pc, #16]	@ (8003bac <LED_USER_GPIO_Init+0x80>)
 8003b9c:	f001 fe22 	bl	80057e4 <HAL_GPIO_Init>

}
 8003ba0:	bf00      	nop
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40021000 	.word	0x40021000

08003bb0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	460a      	mov	r2, r1
 8003bba:	71fb      	strb	r3, [r7, #7]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c44 <BSP_PB_Init+0x94>)
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003bce:	79bb      	ldrb	r3, [r7, #6]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d132      	bne.n	8003c3a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <BSP_PB_Init+0x98>)
 8003bda:	441a      	add	r2, r3
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	491b      	ldr	r1, [pc, #108]	@ (8003c4c <BSP_PB_Init+0x9c>)
 8003be0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f001 faec 	bl	80051c4 <HAL_EXTI_GetHandle>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003bf2:	f06f 0303 	mvn.w	r3, #3
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e01f      	b.n	8003c3a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4a12      	ldr	r2, [pc, #72]	@ (8003c48 <BSP_PB_Init+0x98>)
 8003c00:	1898      	adds	r0, r3, r2
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	4a12      	ldr	r2, [pc, #72]	@ (8003c50 <BSP_PB_Init+0xa0>)
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	f001 fabf 	bl	8005190 <HAL_EXTI_RegisterCallback>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003c18:	f06f 0303 	mvn.w	r3, #3
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e00c      	b.n	8003c3a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003c20:	2009      	movs	r0, #9
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	4a0b      	ldr	r2, [pc, #44]	@ (8003c54 <BSP_PB_Init+0xa4>)
 8003c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f000 fefa 	bl	8004a26 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003c32:	2309      	movs	r3, #9
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 ff12 	bl	8004a5e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	08019da8 	.word	0x08019da8
 8003c48:	20000010 	.word	0x20000010
 8003c4c:	08019dac 	.word	0x08019dac
 8003c50:	08019db0 	.word	0x08019db0
 8003c54:	08019db4 	.word	0x08019db4

08003c58 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	4a08      	ldr	r2, [pc, #32]	@ (8003c88 <BSP_PB_GetState+0x30>)
 8003c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f002 f850 	bl	8005d14 <HAL_GPIO_ReadPin>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bf0c      	ite	eq
 8003c7a:	2301      	moveq	r3, #1
 8003c7c:	2300      	movne	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	2000000c 	.word	0x2000000c

08003c8c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003c90:	2000      	movs	r0, #0
 8003c92:	f7fd fa79 	bl	8001188 <BSP_PB_Callback>
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	4b21      	ldr	r3, [pc, #132]	@ (8003d2c <BUTTON_USER_GPIO_Init+0x90>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	4a20      	ldr	r2, [pc, #128]	@ (8003d2c <BUTTON_USER_GPIO_Init+0x90>)
 8003cac:	f043 0310 	orr.w	r3, r3, #16
 8003cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d2c <BUTTON_USER_GPIO_Init+0x90>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	2009      	movs	r0, #9
 8003cc4:	f000 feaf 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003cc8:	2009      	movs	r0, #9
 8003cca:	f000 fec8 	bl	8004a5e <HAL_NVIC_EnableIRQ>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cce:	f107 030c 	add.w	r3, r7, #12
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <BUTTON_USER_GPIO_Init+0x90>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a11      	ldr	r2, [pc, #68]	@ (8003d2c <BUTTON_USER_GPIO_Init+0x90>)
 8003ce8:	f043 0310 	orr.w	r3, r3, #16
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b0f      	ldr	r3, [pc, #60]	@ (8003d2c <BUTTON_USER_GPIO_Init+0x90>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8003d08:	f107 030c 	add.w	r3, r7, #12
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4808      	ldr	r0, [pc, #32]	@ (8003d30 <BUTTON_USER_GPIO_Init+0x94>)
 8003d10:	f001 fd68 	bl	80057e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003d14:	2200      	movs	r2, #0
 8003d16:	2100      	movs	r1, #0
 8003d18:	2009      	movs	r0, #9
 8003d1a:	f000 fe84 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003d1e:	2009      	movs	r0, #9
 8003d20:	f000 fe9d 	bl	8004a5e <HAL_NVIC_EnableIRQ>

}
 8003d24:	bf00      	nop
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40021000 	.word	0x40021000

08003d34 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d903      	bls.n	8003d50 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003d48:	f06f 0301 	mvn.w	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e025      	b.n	8003d9c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	79fa      	ldrb	r2, [r7, #7]
 8003d54:	4914      	ldr	r1, [pc, #80]	@ (8003da8 <BSP_COM_Init+0x74>)
 8003d56:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003d5a:	4814      	ldr	r0, [pc, #80]	@ (8003dac <BSP_COM_Init+0x78>)
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4403      	add	r3, r0
 8003d66:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8003d68:	79fa      	ldrb	r2, [r7, #7]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4a0e      	ldr	r2, [pc, #56]	@ (8003dac <BSP_COM_Init+0x78>)
 8003d74:	4413      	add	r3, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f864 	bl	8003e44 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8003d7c:	79fa      	ldrb	r2, [r7, #7]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4a09      	ldr	r2, [pc, #36]	@ (8003dac <BSP_COM_Init+0x78>)
 8003d88:	4413      	add	r3, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f810 	bl	8003db0 <MX_USART1_UART_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003d96:	f06f 0303 	mvn.w	r3, #3
 8003d9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000018 	.word	0x20000018
 8003dac:	20000cbc 	.word	0x20000cbc

08003db0 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	@ (8003e08 <MX_USART1_UART_Init+0x58>)
 8003dc0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003dc8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	220c      	movs	r2, #12
 8003de0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f007 fae6 	bl	800b3c0 <HAL_UART_Init>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_USART1_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40011000 	.word	0x40011000

08003e0c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003e14:	4b09      	ldr	r3, [pc, #36]	@ (8003e3c <__io_putchar+0x30>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4413      	add	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4a07      	ldr	r2, [pc, #28]	@ (8003e40 <__io_putchar+0x34>)
 8003e24:	1898      	adds	r0, r3, r2
 8003e26:	1d39      	adds	r1, r7, #4
 8003e28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f007 fb17 	bl	800b460 <HAL_UART_Transmit>
  return ch;
 8003e32:	687b      	ldr	r3, [r7, #4]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000d04 	.word	0x20000d04
 8003e40:	20000cbc 	.word	0x20000cbc

08003e44 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	@ 0x28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed0 <USART1_MspInit+0x8c>)
 8003e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e54:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed0 <USART1_MspInit+0x8c>)
 8003e56:	f043 0310 	orr.w	r3, r3, #16
 8003e5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed0 <USART1_MspInit+0x8c>)
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ed0 <USART1_MspInit+0x8c>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	4a17      	ldr	r2, [pc, #92]	@ (8003ed0 <USART1_MspInit+0x8c>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e78:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <USART1_MspInit+0x8c>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8003e84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e92:	2303      	movs	r3, #3
 8003e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8003e96:	2307      	movs	r3, #7
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480c      	ldr	r0, [pc, #48]	@ (8003ed4 <USART1_MspInit+0x90>)
 8003ea2:	f001 fc9f 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8003ea6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eac:	2302      	movs	r3, #2
 8003eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8003eb8:	2307      	movs	r3, #7
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4804      	ldr	r0, [pc, #16]	@ (8003ed4 <USART1_MspInit+0x90>)
 8003ec4:	f001 fc8e 	bl	80057e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	3728      	adds	r7, #40	@ 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40020000 	.word	0x40020000

08003ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003edc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f18 <HAL_Init+0x40>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8003f18 <HAL_Init+0x40>)
 8003ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f18 <HAL_Init+0x40>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a0a      	ldr	r2, [pc, #40]	@ (8003f18 <HAL_Init+0x40>)
 8003eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ef4:	4b08      	ldr	r3, [pc, #32]	@ (8003f18 <HAL_Init+0x40>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a07      	ldr	r2, [pc, #28]	@ (8003f18 <HAL_Init+0x40>)
 8003efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f00:	2003      	movs	r0, #3
 8003f02:	f000 fd85 	bl	8004a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f06:	200f      	movs	r0, #15
 8003f08:	f000 f808 	bl	8003f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f0c:	f7ff f956 	bl	80031bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023c00 	.word	0x40023c00

08003f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f24:	4b12      	ldr	r3, [pc, #72]	@ (8003f70 <HAL_InitTick+0x54>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b12      	ldr	r3, [pc, #72]	@ (8003f74 <HAL_InitTick+0x58>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fdab 	bl	8004a96 <HAL_SYSTICK_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e00e      	b.n	8003f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d80a      	bhi.n	8003f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f50:	2200      	movs	r2, #0
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	f000 fd65 	bl	8004a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f5c:	4a06      	ldr	r2, [pc, #24]	@ (8003f78 <HAL_InitTick+0x5c>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000004 	.word	0x20000004
 8003f74:	20000020 	.word	0x20000020
 8003f78:	2000001c 	.word	0x2000001c

08003f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f80:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <HAL_IncTick+0x20>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <HAL_IncTick+0x24>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4a04      	ldr	r2, [pc, #16]	@ (8003fa0 <HAL_IncTick+0x24>)
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000020 	.word	0x20000020
 8003fa0:	20000d08 	.word	0x20000d08

08003fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	@ (8003fb8 <HAL_GetTick+0x14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000d08 	.word	0x20000d08

08003fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fc4:	f7ff ffee 	bl	8003fa4 <HAL_GetTick>
 8003fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d005      	beq.n	8003fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004000 <HAL_Delay+0x44>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fe2:	bf00      	nop
 8003fe4:	f7ff ffde 	bl	8003fa4 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d8f7      	bhi.n	8003fe4 <HAL_Delay+0x28>
  {
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000020 	.word	0x20000020

08004004 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e033      	b.n	8004082 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff f8f2 	bl	800320c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d118      	bne.n	8004074 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800404a:	f023 0302 	bic.w	r3, r3, #2
 800404e:	f043 0202 	orr.w	r2, r3, #2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fa68 	bl	800452c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	f043 0201 	orr.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	641a      	str	r2, [r3, #64]	@ 0x40
 8004072:	e001      	b.n	8004078 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_ADC_Start_DMA+0x1e>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0e9      	b.n	800427e <HAL_ADC_Start_DMA+0x1f2>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d018      	beq.n	80040f2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040d0:	4b6d      	ldr	r3, [pc, #436]	@ (8004288 <HAL_ADC_Start_DMA+0x1fc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6d      	ldr	r2, [pc, #436]	@ (800428c <HAL_ADC_Start_DMA+0x200>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	0c9a      	lsrs	r2, r3, #18
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80040e4:	e002      	b.n	80040ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f9      	bne.n	80040e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004100:	d107      	bne.n	8004112 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004110:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b01      	cmp	r3, #1
 800411e:	f040 80a1 	bne.w	8004264 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800414c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004160:	d106      	bne.n	8004170 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	f023 0206 	bic.w	r2, r3, #6
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44
 800416e:	e002      	b.n	8004176 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800417e:	4b44      	ldr	r3, [pc, #272]	@ (8004290 <HAL_ADC_Start_DMA+0x204>)
 8004180:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004186:	4a43      	ldr	r2, [pc, #268]	@ (8004294 <HAL_ADC_Start_DMA+0x208>)
 8004188:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	4a42      	ldr	r2, [pc, #264]	@ (8004298 <HAL_ADC_Start_DMA+0x20c>)
 8004190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004196:	4a41      	ldr	r2, [pc, #260]	@ (800429c <HAL_ADC_Start_DMA+0x210>)
 8004198:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80041a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80041b2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	334c      	adds	r3, #76	@ 0x4c
 80041ce:	4619      	mov	r1, r3
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f000 fd1a 	bl	8004c0c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d12a      	bne.n	800423a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2d      	ldr	r2, [pc, #180]	@ (80042a0 <HAL_ADC_Start_DMA+0x214>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d015      	beq.n	800421a <HAL_ADC_Start_DMA+0x18e>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2c      	ldr	r2, [pc, #176]	@ (80042a4 <HAL_ADC_Start_DMA+0x218>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d105      	bne.n	8004204 <HAL_ADC_Start_DMA+0x178>
 80041f8:	4b25      	ldr	r3, [pc, #148]	@ (8004290 <HAL_ADC_Start_DMA+0x204>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a27      	ldr	r2, [pc, #156]	@ (80042a8 <HAL_ADC_Start_DMA+0x21c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d136      	bne.n	800427c <HAL_ADC_Start_DMA+0x1f0>
 800420e:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <HAL_ADC_Start_DMA+0x204>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d130      	bne.n	800427c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d129      	bne.n	800427c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	e020      	b.n	800427c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a18      	ldr	r2, [pc, #96]	@ (80042a0 <HAL_ADC_Start_DMA+0x214>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d11b      	bne.n	800427c <HAL_ADC_Start_DMA+0x1f0>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d114      	bne.n	800427c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004260:	609a      	str	r2, [r3, #8]
 8004262:	e00b      	b.n	800427c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	f043 0210 	orr.w	r2, r3, #16
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004274:	f043 0201 	orr.w	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000004 	.word	0x20000004
 800428c:	431bde83 	.word	0x431bde83
 8004290:	40012300 	.word	0x40012300
 8004294:	08004725 	.word	0x08004725
 8004298:	080047df 	.word	0x080047df
 800429c:	080047fb 	.word	0x080047fb
 80042a0:	40012000 	.word	0x40012000
 80042a4:	40012100 	.word	0x40012100
 80042a8:	40012200 	.word	0x40012200

080042ac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x1c>
 8004300:	2302      	movs	r3, #2
 8004302:	e105      	b.n	8004510 <HAL_ADC_ConfigChannel+0x228>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b09      	cmp	r3, #9
 8004312:	d925      	bls.n	8004360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68d9      	ldr	r1, [r3, #12]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	4613      	mov	r3, r2
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	4413      	add	r3, r2
 8004328:	3b1e      	subs	r3, #30
 800432a:	2207      	movs	r2, #7
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43da      	mvns	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	400a      	ands	r2, r1
 8004338:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68d9      	ldr	r1, [r3, #12]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	4618      	mov	r0, r3
 800434c:	4603      	mov	r3, r0
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4403      	add	r3, r0
 8004352:	3b1e      	subs	r3, #30
 8004354:	409a      	lsls	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	e022      	b.n	80043a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6919      	ldr	r1, [r3, #16]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	2207      	movs	r2, #7
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43da      	mvns	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	400a      	ands	r2, r1
 8004382:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6919      	ldr	r1, [r3, #16]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	4618      	mov	r0, r3
 8004396:	4603      	mov	r3, r0
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	4403      	add	r3, r0
 800439c:	409a      	lsls	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b06      	cmp	r3, #6
 80043ac:	d824      	bhi.n	80043f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	3b05      	subs	r3, #5
 80043c0:	221f      	movs	r2, #31
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43da      	mvns	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	400a      	ands	r2, r1
 80043ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	4618      	mov	r0, r3
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	3b05      	subs	r3, #5
 80043ea:	fa00 f203 	lsl.w	r2, r0, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80043f6:	e04c      	b.n	8004492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d824      	bhi.n	800444a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	3b23      	subs	r3, #35	@ 0x23
 8004412:	221f      	movs	r2, #31
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	43da      	mvns	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	400a      	ands	r2, r1
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b29b      	uxth	r3, r3
 800442e:	4618      	mov	r0, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	3b23      	subs	r3, #35	@ 0x23
 800443c:	fa00 f203 	lsl.w	r2, r0, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	631a      	str	r2, [r3, #48]	@ 0x30
 8004448:	e023      	b.n	8004492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	3b41      	subs	r3, #65	@ 0x41
 800445c:	221f      	movs	r2, #31
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43da      	mvns	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	400a      	ands	r2, r1
 800446a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	4618      	mov	r0, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	3b41      	subs	r3, #65	@ 0x41
 8004486:	fa00 f203 	lsl.w	r2, r0, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004492:	4b22      	ldr	r3, [pc, #136]	@ (800451c <HAL_ADC_ConfigChannel+0x234>)
 8004494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a21      	ldr	r2, [pc, #132]	@ (8004520 <HAL_ADC_ConfigChannel+0x238>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d109      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x1cc>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b12      	cmp	r3, #18
 80044a6:	d105      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a19      	ldr	r2, [pc, #100]	@ (8004520 <HAL_ADC_ConfigChannel+0x238>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d123      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x21e>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d003      	beq.n	80044ce <HAL_ADC_ConfigChannel+0x1e6>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b11      	cmp	r3, #17
 80044cc:	d11b      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b10      	cmp	r3, #16
 80044e0:	d111      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <HAL_ADC_ConfigChannel+0x23c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a10      	ldr	r2, [pc, #64]	@ (8004528 <HAL_ADC_ConfigChannel+0x240>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	0c9a      	lsrs	r2, r3, #18
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80044f8:	e002      	b.n	8004500 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f9      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40012300 	.word	0x40012300
 8004520:	40012000 	.word	0x40012000
 8004524:	20000004 	.word	0x20000004
 8004528:	431bde83 	.word	0x431bde83

0800452c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004534:	4b79      	ldr	r3, [pc, #484]	@ (800471c <ADC_Init+0x1f0>)
 8004536:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	431a      	orrs	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	021a      	lsls	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045be:	4a58      	ldr	r2, [pc, #352]	@ (8004720 <ADC_Init+0x1f4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d022      	beq.n	800460a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80045d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6899      	ldr	r1, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80045f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6899      	ldr	r1, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	e00f      	b.n	800462a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004628:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0202 	bic.w	r2, r2, #2
 8004638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6899      	ldr	r1, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	7e1b      	ldrb	r3, [r3, #24]
 8004644:	005a      	lsls	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004666:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	3b01      	subs	r3, #1
 8004684:	035a      	lsls	r2, r3, #13
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	e007      	b.n	80046a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800469e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80046ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	051a      	lsls	r2, r3, #20
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80046d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6899      	ldr	r1, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046e2:	025a      	lsls	r2, r3, #9
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6899      	ldr	r1, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	029a      	lsls	r2, r3, #10
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	609a      	str	r2, [r3, #8]
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40012300 	.word	0x40012300
 8004720:	0f000001 	.word	0x0f000001

08004724 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800473a:	2b00      	cmp	r3, #0
 800473c:	d13c      	bne.n	80047b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d12b      	bne.n	80047b0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800475c:	2b00      	cmp	r3, #0
 800475e:	d127      	bne.n	80047b0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800476a:	2b00      	cmp	r3, #0
 800476c:	d006      	beq.n	800477c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004778:	2b00      	cmp	r3, #0
 800477a:	d119      	bne.n	80047b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0220 	bic.w	r2, r2, #32
 800478a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d105      	bne.n	80047b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a8:	f043 0201 	orr.w	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f7ff fd7b 	bl	80042ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047b6:	e00e      	b.n	80047d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff fd85 	bl	80042d4 <HAL_ADC_ErrorCallback>
}
 80047ca:	e004      	b.n	80047d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fd67 	bl	80042c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2240      	movs	r2, #64	@ 0x40
 800480c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	f043 0204 	orr.w	r2, r3, #4
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7ff fd5a 	bl	80042d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004838:	4b0c      	ldr	r3, [pc, #48]	@ (800486c <__NVIC_SetPriorityGrouping+0x44>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004844:	4013      	ands	r3, r2
 8004846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004850:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800485a:	4a04      	ldr	r2, [pc, #16]	@ (800486c <__NVIC_SetPriorityGrouping+0x44>)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	60d3      	str	r3, [r2, #12]
}
 8004860:	bf00      	nop
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004874:	4b04      	ldr	r3, [pc, #16]	@ (8004888 <__NVIC_GetPriorityGrouping+0x18>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	0a1b      	lsrs	r3, r3, #8
 800487a:	f003 0307 	and.w	r3, r3, #7
}
 800487e:	4618      	mov	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489a:	2b00      	cmp	r3, #0
 800489c:	db0b      	blt.n	80048b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	f003 021f 	and.w	r2, r3, #31
 80048a4:	4907      	ldr	r1, [pc, #28]	@ (80048c4 <__NVIC_EnableIRQ+0x38>)
 80048a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2001      	movs	r0, #1
 80048ae:	fa00 f202 	lsl.w	r2, r0, r2
 80048b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	e000e100 	.word	0xe000e100

080048c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	db12      	blt.n	8004900 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	f003 021f 	and.w	r2, r3, #31
 80048e0:	490a      	ldr	r1, [pc, #40]	@ (800490c <__NVIC_DisableIRQ+0x44>)
 80048e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2001      	movs	r0, #1
 80048ea:	fa00 f202 	lsl.w	r2, r0, r2
 80048ee:	3320      	adds	r3, #32
 80048f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80048f4:	f3bf 8f4f 	dsb	sy
}
 80048f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048fa:	f3bf 8f6f 	isb	sy
}
 80048fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000e100 	.word	0xe000e100

08004910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	6039      	str	r1, [r7, #0]
 800491a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004920:	2b00      	cmp	r3, #0
 8004922:	db0a      	blt.n	800493a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	490c      	ldr	r1, [pc, #48]	@ (800495c <__NVIC_SetPriority+0x4c>)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	0112      	lsls	r2, r2, #4
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	440b      	add	r3, r1
 8004934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004938:	e00a      	b.n	8004950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	b2da      	uxtb	r2, r3
 800493e:	4908      	ldr	r1, [pc, #32]	@ (8004960 <__NVIC_SetPriority+0x50>)
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	3b04      	subs	r3, #4
 8004948:	0112      	lsls	r2, r2, #4
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	440b      	add	r3, r1
 800494e:	761a      	strb	r2, [r3, #24]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000e100 	.word	0xe000e100
 8004960:	e000ed00 	.word	0xe000ed00

08004964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004964:	b480      	push	{r7}
 8004966:	b089      	sub	sp, #36	@ 0x24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f1c3 0307 	rsb	r3, r3, #7
 800497e:	2b04      	cmp	r3, #4
 8004980:	bf28      	it	cs
 8004982:	2304      	movcs	r3, #4
 8004984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3304      	adds	r3, #4
 800498a:	2b06      	cmp	r3, #6
 800498c:	d902      	bls.n	8004994 <NVIC_EncodePriority+0x30>
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3b03      	subs	r3, #3
 8004992:	e000      	b.n	8004996 <NVIC_EncodePriority+0x32>
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004998:	f04f 32ff 	mov.w	r2, #4294967295
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43da      	mvns	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	401a      	ands	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049ac:	f04f 31ff 	mov.w	r1, #4294967295
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	43d9      	mvns	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049bc:	4313      	orrs	r3, r2
         );
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3724      	adds	r7, #36	@ 0x24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049dc:	d301      	bcc.n	80049e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049de:	2301      	movs	r3, #1
 80049e0:	e00f      	b.n	8004a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049e2:	4a0a      	ldr	r2, [pc, #40]	@ (8004a0c <SysTick_Config+0x40>)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049ea:	210f      	movs	r1, #15
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	f7ff ff8e 	bl	8004910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <SysTick_Config+0x40>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049fa:	4b04      	ldr	r3, [pc, #16]	@ (8004a0c <SysTick_Config+0x40>)
 80049fc:	2207      	movs	r2, #7
 80049fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	e000e010 	.word	0xe000e010

08004a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ff05 	bl	8004828 <__NVIC_SetPriorityGrouping>
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a38:	f7ff ff1a 	bl	8004870 <__NVIC_GetPriorityGrouping>
 8004a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	6978      	ldr	r0, [r7, #20]
 8004a44:	f7ff ff8e 	bl	8004964 <NVIC_EncodePriority>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff ff5d 	bl	8004910 <__NVIC_SetPriority>
}
 8004a56:	bf00      	nop
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	4603      	mov	r3, r0
 8004a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff ff0d 	bl	800488c <__NVIC_EnableIRQ>
}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	4603      	mov	r3, r0
 8004a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff ff1d 	bl	80048c8 <__NVIC_DisableIRQ>
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff ff94 	bl	80049cc <SysTick_Config>
 8004aa4:	4603      	mov	r3, r0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004abc:	f7ff fa72 	bl	8003fa4 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e099      	b.n	8004c00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aec:	e00f      	b.n	8004b0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004aee:	f7ff fa59 	bl	8003fa4 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b05      	cmp	r3, #5
 8004afa:	d908      	bls.n	8004b0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2203      	movs	r2, #3
 8004b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e078      	b.n	8004c00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e8      	bne.n	8004aee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4b38      	ldr	r3, [pc, #224]	@ (8004c08 <HAL_DMA_Init+0x158>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d107      	bne.n	8004b78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b70:	4313      	orrs	r3, r2
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0307 	bic.w	r3, r3, #7
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d117      	bne.n	8004bd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fa6f 	bl	8005098 <DMA_CheckFifoParam>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2240      	movs	r2, #64	@ 0x40
 8004bc4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e016      	b.n	8004c00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa26 	bl	800502c <DMA_CalcBaseAndBitshift>
 8004be0:	4603      	mov	r3, r0
 8004be2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be8:	223f      	movs	r2, #63	@ 0x3f
 8004bea:	409a      	lsls	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	f010803f 	.word	0xf010803f

08004c0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_DMA_Start_IT+0x26>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e040      	b.n	8004cb4 <HAL_DMA_Start_IT+0xa8>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d12f      	bne.n	8004ca6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f9b8 	bl	8004fd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c64:	223f      	movs	r2, #63	@ 0x3f
 8004c66:	409a      	lsls	r2, r3
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0216 	orr.w	r2, r2, #22
 8004c7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0208 	orr.w	r2, r2, #8
 8004c92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e005      	b.n	8004cb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8004f04 <HAL_DMA_IRQHandler+0x248>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a8e      	ldr	r2, [pc, #568]	@ (8004f08 <HAL_DMA_IRQHandler+0x24c>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0a9b      	lsrs	r3, r3, #10
 8004cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	409a      	lsls	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01a      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d013      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0204 	bic.w	r2, r2, #4
 8004d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d14:	2208      	movs	r2, #8
 8004d16:	409a      	lsls	r2, r3
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	f043 0201 	orr.w	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d012      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d56:	f043 0202 	orr.w	r2, r3, #2
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d62:	2204      	movs	r2, #4
 8004d64:	409a      	lsls	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d012      	beq.n	8004d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d80:	2204      	movs	r2, #4
 8004d82:	409a      	lsls	r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8c:	f043 0204 	orr.w	r2, r3, #4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d98:	2210      	movs	r2, #16
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d043      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d03c      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db6:	2210      	movs	r2, #16
 8004db8:	409a      	lsls	r2, r3
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d018      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d108      	bne.n	8004dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d024      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4798      	blx	r3
 8004dea:	e01f      	b.n	8004e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01b      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
 8004dfc:	e016      	b.n	8004e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d107      	bne.n	8004e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0208 	bic.w	r2, r2, #8
 8004e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e30:	2220      	movs	r2, #32
 8004e32:	409a      	lsls	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 808f 	beq.w	8004f5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8087 	beq.w	8004f5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e52:	2220      	movs	r2, #32
 8004e54:	409a      	lsls	r2, r3
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d136      	bne.n	8004ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0216 	bic.w	r2, r2, #22
 8004e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <HAL_DMA_IRQHandler+0x1da>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0208 	bic.w	r2, r2, #8
 8004ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eaa:	223f      	movs	r2, #63	@ 0x3f
 8004eac:	409a      	lsls	r2, r3
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d07e      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
        }
        return;
 8004ed2:	e079      	b.n	8004fc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01d      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10d      	bne.n	8004f0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d031      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
 8004f00:	e02c      	b.n	8004f5c <HAL_DMA_IRQHandler+0x2a0>
 8004f02:	bf00      	nop
 8004f04:	20000004 	.word	0x20000004
 8004f08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d023      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
 8004f1c:	e01e      	b.n	8004f5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10f      	bne.n	8004f4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0210 	bic.w	r2, r2, #16
 8004f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d032      	beq.n	8004fca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d022      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2205      	movs	r2, #5
 8004f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d307      	bcc.n	8004fa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f2      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x2cc>
 8004fa2:	e000      	b.n	8004fa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004fa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	4798      	blx	r3
 8004fc6:	e000      	b.n	8004fca <HAL_DMA_IRQHandler+0x30e>
        return;
 8004fc8:	bf00      	nop
    }
  }
}
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004fec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b40      	cmp	r3, #64	@ 0x40
 8004ffc:	d108      	bne.n	8005010 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800500e:	e007      	b.n	8005020 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	60da      	str	r2, [r3, #12]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	3b10      	subs	r3, #16
 800503c:	4a14      	ldr	r2, [pc, #80]	@ (8005090 <DMA_CalcBaseAndBitshift+0x64>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005046:	4a13      	ldr	r2, [pc, #76]	@ (8005094 <DMA_CalcBaseAndBitshift+0x68>)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d909      	bls.n	800506e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	1d1a      	adds	r2, r3, #4
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	659a      	str	r2, [r3, #88]	@ 0x58
 800506c:	e007      	b.n	800507e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	aaaaaaab 	.word	0xaaaaaaab
 8005094:	08019db8 	.word	0x08019db8

08005098 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d11f      	bne.n	80050f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d856      	bhi.n	8005166 <DMA_CheckFifoParam+0xce>
 80050b8:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <DMA_CheckFifoParam+0x28>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050e3 	.word	0x080050e3
 80050c8:	080050d1 	.word	0x080050d1
 80050cc:	08005167 	.word	0x08005167
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d046      	beq.n	800516a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050e0:	e043      	b.n	800516a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050ea:	d140      	bne.n	800516e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050f0:	e03d      	b.n	800516e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050fa:	d121      	bne.n	8005140 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d837      	bhi.n	8005172 <DMA_CheckFifoParam+0xda>
 8005102:	a201      	add	r2, pc, #4	@ (adr r2, 8005108 <DMA_CheckFifoParam+0x70>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005119 	.word	0x08005119
 800510c:	0800511f 	.word	0x0800511f
 8005110:	08005119 	.word	0x08005119
 8005114:	08005131 	.word	0x08005131
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
      break;
 800511c:	e030      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005122:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d025      	beq.n	8005176 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800512e:	e022      	b.n	8005176 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005134:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005138:	d11f      	bne.n	800517a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800513e:	e01c      	b.n	800517a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d903      	bls.n	800514e <DMA_CheckFifoParam+0xb6>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d003      	beq.n	8005154 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800514c:	e018      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	73fb      	strb	r3, [r7, #15]
      break;
 8005152:	e015      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005158:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00e      	beq.n	800517e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
      break;
 8005164:	e00b      	b.n	800517e <DMA_CheckFifoParam+0xe6>
      break;
 8005166:	bf00      	nop
 8005168:	e00a      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;
 800516a:	bf00      	nop
 800516c:	e008      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;
 800516e:	bf00      	nop
 8005170:	e006      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;
 8005172:	bf00      	nop
 8005174:	e004      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;   
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;
 800517e:	bf00      	nop
    }
  } 
  
  return status; 
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop

08005190 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	460b      	mov	r3, r1
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80051a2:	7afb      	ldrb	r3, [r7, #11]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	605a      	str	r2, [r3, #4]
      break;
 80051ae:	e002      	b.n	80051b6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	75fb      	strb	r3, [r7, #23]
      break;
 80051b4:	bf00      	nop
  }

  return status;
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e003      	b.n	80051e0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80051de:	2300      	movs	r3, #0
  }
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	2201      	movs	r2, #1
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8005204:	4b0a      	ldr	r3, [pc, #40]	@ (8005230 <HAL_EXTI_IRQHandler+0x44>)
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4013      	ands	r3, r2
 800520c:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8005214:	4a06      	ldr	r2, [pc, #24]	@ (8005230 <HAL_EXTI_IRQHandler+0x44>)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4798      	blx	r3
    }
  }
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40013c00 	.word	0x40013c00

08005234 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005246:	4b23      	ldr	r3, [pc, #140]	@ (80052d4 <HAL_FLASH_Program+0xa0>)
 8005248:	7e1b      	ldrb	r3, [r3, #24]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_FLASH_Program+0x1e>
 800524e:	2302      	movs	r3, #2
 8005250:	e03b      	b.n	80052ca <HAL_FLASH_Program+0x96>
 8005252:	4b20      	ldr	r3, [pc, #128]	@ (80052d4 <HAL_FLASH_Program+0xa0>)
 8005254:	2201      	movs	r2, #1
 8005256:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005258:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800525c:	f000 f870 	bl	8005340 <FLASH_WaitForLastOperation>
 8005260:	4603      	mov	r3, r0
 8005262:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005264:	7dfb      	ldrb	r3, [r7, #23]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d12b      	bne.n	80052c2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005270:	783b      	ldrb	r3, [r7, #0]
 8005272:	4619      	mov	r1, r3
 8005274:	68b8      	ldr	r0, [r7, #8]
 8005276:	f000 f91b 	bl	80054b0 <FLASH_Program_Byte>
 800527a:	e016      	b.n	80052aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d105      	bne.n	800528e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005282:	883b      	ldrh	r3, [r7, #0]
 8005284:	4619      	mov	r1, r3
 8005286:	68b8      	ldr	r0, [r7, #8]
 8005288:	f000 f8ee 	bl	8005468 <FLASH_Program_HalfWord>
 800528c:	e00d      	b.n	80052aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d105      	bne.n	80052a0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4619      	mov	r1, r3
 8005298:	68b8      	ldr	r0, [r7, #8]
 800529a:	f000 f8c3 	bl	8005424 <FLASH_Program_Word>
 800529e:	e004      	b.n	80052aa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80052a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a4:	68b8      	ldr	r0, [r7, #8]
 80052a6:	f000 f88b 	bl	80053c0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80052aa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80052ae:	f000 f847 	bl	8005340 <FLASH_WaitForLastOperation>
 80052b2:	4603      	mov	r3, r0
 80052b4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80052b6:	4b08      	ldr	r3, [pc, #32]	@ (80052d8 <HAL_FLASH_Program+0xa4>)
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	4a07      	ldr	r2, [pc, #28]	@ (80052d8 <HAL_FLASH_Program+0xa4>)
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80052c2:	4b04      	ldr	r3, [pc, #16]	@ (80052d4 <HAL_FLASH_Program+0xa0>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000d0c 	.word	0x20000d0c
 80052d8:	40023c00 	.word	0x40023c00

080052dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80052e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <HAL_FLASH_Unlock+0x38>)
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da0b      	bge.n	8005306 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80052ee:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_FLASH_Unlock+0x38>)
 80052f0:	4a09      	ldr	r2, [pc, #36]	@ (8005318 <HAL_FLASH_Unlock+0x3c>)
 80052f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80052f4:	4b07      	ldr	r3, [pc, #28]	@ (8005314 <HAL_FLASH_Unlock+0x38>)
 80052f6:	4a09      	ldr	r2, [pc, #36]	@ (800531c <HAL_FLASH_Unlock+0x40>)
 80052f8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80052fa:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <HAL_FLASH_Unlock+0x38>)
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	da01      	bge.n	8005306 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005306:	79fb      	ldrb	r3, [r7, #7]
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	40023c00 	.word	0x40023c00
 8005318:	45670123 	.word	0x45670123
 800531c:	cdef89ab 	.word	0xcdef89ab

08005320 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005324:	4b05      	ldr	r3, [pc, #20]	@ (800533c <HAL_FLASH_Lock+0x1c>)
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	4a04      	ldr	r2, [pc, #16]	@ (800533c <HAL_FLASH_Lock+0x1c>)
 800532a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800532e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40023c00 	.word	0x40023c00

08005340 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800534c:	4b1a      	ldr	r3, [pc, #104]	@ (80053b8 <FLASH_WaitForLastOperation+0x78>)
 800534e:	2200      	movs	r2, #0
 8005350:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005352:	f7fe fe27 	bl	8003fa4 <HAL_GetTick>
 8005356:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005358:	e010      	b.n	800537c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d00c      	beq.n	800537c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <FLASH_WaitForLastOperation+0x38>
 8005368:	f7fe fe1c 	bl	8003fa4 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d201      	bcs.n	800537c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e019      	b.n	80053b0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800537c:	4b0f      	ldr	r3, [pc, #60]	@ (80053bc <FLASH_WaitForLastOperation+0x7c>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e8      	bne.n	800535a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005388:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <FLASH_WaitForLastOperation+0x7c>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005394:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <FLASH_WaitForLastOperation+0x7c>)
 8005396:	2201      	movs	r2, #1
 8005398:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800539a:	4b08      	ldr	r3, [pc, #32]	@ (80053bc <FLASH_WaitForLastOperation+0x7c>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80053a6:	f000 f8a5 	bl	80054f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
  
}  
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000d0c 	.word	0x20000d0c
 80053bc:	40023c00 	.word	0x40023c00

080053c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053cc:	4b14      	ldr	r3, [pc, #80]	@ (8005420 <FLASH_Program_DoubleWord+0x60>)
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	4a13      	ldr	r2, [pc, #76]	@ (8005420 <FLASH_Program_DoubleWord+0x60>)
 80053d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80053d8:	4b11      	ldr	r3, [pc, #68]	@ (8005420 <FLASH_Program_DoubleWord+0x60>)
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	4a10      	ldr	r2, [pc, #64]	@ (8005420 <FLASH_Program_DoubleWord+0x60>)
 80053de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80053e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80053e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005420 <FLASH_Program_DoubleWord+0x60>)
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005420 <FLASH_Program_DoubleWord+0x60>)
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80053f6:	f3bf 8f6f 	isb	sy
}
 80053fa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80053fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	000a      	movs	r2, r1
 800540a:	2300      	movs	r3, #0
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	3104      	adds	r1, #4
 8005410:	4613      	mov	r3, r2
 8005412:	600b      	str	r3, [r1, #0]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40023c00 	.word	0x40023c00

08005424 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800542e:	4b0d      	ldr	r3, [pc, #52]	@ (8005464 <FLASH_Program_Word+0x40>)
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	4a0c      	ldr	r2, [pc, #48]	@ (8005464 <FLASH_Program_Word+0x40>)
 8005434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005438:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800543a:	4b0a      	ldr	r3, [pc, #40]	@ (8005464 <FLASH_Program_Word+0x40>)
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	4a09      	ldr	r2, [pc, #36]	@ (8005464 <FLASH_Program_Word+0x40>)
 8005440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005444:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005446:	4b07      	ldr	r3, [pc, #28]	@ (8005464 <FLASH_Program_Word+0x40>)
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	4a06      	ldr	r2, [pc, #24]	@ (8005464 <FLASH_Program_Word+0x40>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	601a      	str	r2, [r3, #0]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40023c00 	.word	0x40023c00

08005468 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005474:	4b0d      	ldr	r3, [pc, #52]	@ (80054ac <FLASH_Program_HalfWord+0x44>)
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	4a0c      	ldr	r2, [pc, #48]	@ (80054ac <FLASH_Program_HalfWord+0x44>)
 800547a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800547e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005480:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <FLASH_Program_HalfWord+0x44>)
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	4a09      	ldr	r2, [pc, #36]	@ (80054ac <FLASH_Program_HalfWord+0x44>)
 8005486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800548a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800548c:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <FLASH_Program_HalfWord+0x44>)
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	4a06      	ldr	r2, [pc, #24]	@ (80054ac <FLASH_Program_HalfWord+0x44>)
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	887a      	ldrh	r2, [r7, #2]
 800549c:	801a      	strh	r2, [r3, #0]
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40023c00 	.word	0x40023c00

080054b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054bc:	4b0c      	ldr	r3, [pc, #48]	@ (80054f0 <FLASH_Program_Byte+0x40>)
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	4a0b      	ldr	r2, [pc, #44]	@ (80054f0 <FLASH_Program_Byte+0x40>)
 80054c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80054c8:	4b09      	ldr	r3, [pc, #36]	@ (80054f0 <FLASH_Program_Byte+0x40>)
 80054ca:	4a09      	ldr	r2, [pc, #36]	@ (80054f0 <FLASH_Program_Byte+0x40>)
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80054d0:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <FLASH_Program_Byte+0x40>)
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	4a06      	ldr	r2, [pc, #24]	@ (80054f0 <FLASH_Program_Byte+0x40>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	78fa      	ldrb	r2, [r7, #3]
 80054e0:	701a      	strb	r2, [r3, #0]
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40023c00 	.word	0x40023c00

080054f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80054f8:	4b27      	ldr	r3, [pc, #156]	@ (8005598 <FLASH_SetErrorCode+0xa4>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005504:	4b25      	ldr	r3, [pc, #148]	@ (800559c <FLASH_SetErrorCode+0xa8>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f043 0310 	orr.w	r3, r3, #16
 800550c:	4a23      	ldr	r2, [pc, #140]	@ (800559c <FLASH_SetErrorCode+0xa8>)
 800550e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005510:	4b21      	ldr	r3, [pc, #132]	@ (8005598 <FLASH_SetErrorCode+0xa4>)
 8005512:	2210      	movs	r2, #16
 8005514:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005516:	4b20      	ldr	r3, [pc, #128]	@ (8005598 <FLASH_SetErrorCode+0xa4>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005522:	4b1e      	ldr	r3, [pc, #120]	@ (800559c <FLASH_SetErrorCode+0xa8>)
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f043 0308 	orr.w	r3, r3, #8
 800552a:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <FLASH_SetErrorCode+0xa8>)
 800552c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800552e:	4b1a      	ldr	r3, [pc, #104]	@ (8005598 <FLASH_SetErrorCode+0xa4>)
 8005530:	2220      	movs	r2, #32
 8005532:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005534:	4b18      	ldr	r3, [pc, #96]	@ (8005598 <FLASH_SetErrorCode+0xa4>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005540:	4b16      	ldr	r3, [pc, #88]	@ (800559c <FLASH_SetErrorCode+0xa8>)
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f043 0304 	orr.w	r3, r3, #4
 8005548:	4a14      	ldr	r2, [pc, #80]	@ (800559c <FLASH_SetErrorCode+0xa8>)
 800554a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800554c:	4b12      	ldr	r3, [pc, #72]	@ (8005598 <FLASH_SetErrorCode+0xa4>)
 800554e:	2240      	movs	r2, #64	@ 0x40
 8005550:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005552:	4b11      	ldr	r3, [pc, #68]	@ (8005598 <FLASH_SetErrorCode+0xa4>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d008      	beq.n	8005570 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800555e:	4b0f      	ldr	r3, [pc, #60]	@ (800559c <FLASH_SetErrorCode+0xa8>)
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f043 0302 	orr.w	r3, r3, #2
 8005566:	4a0d      	ldr	r2, [pc, #52]	@ (800559c <FLASH_SetErrorCode+0xa8>)
 8005568:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800556a:	4b0b      	ldr	r3, [pc, #44]	@ (8005598 <FLASH_SetErrorCode+0xa4>)
 800556c:	2280      	movs	r2, #128	@ 0x80
 800556e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005570:	4b09      	ldr	r3, [pc, #36]	@ (8005598 <FLASH_SetErrorCode+0xa4>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800557c:	4b07      	ldr	r3, [pc, #28]	@ (800559c <FLASH_SetErrorCode+0xa8>)
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f043 0320 	orr.w	r3, r3, #32
 8005584:	4a05      	ldr	r2, [pc, #20]	@ (800559c <FLASH_SetErrorCode+0xa8>)
 8005586:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005588:	4b03      	ldr	r3, [pc, #12]	@ (8005598 <FLASH_SetErrorCode+0xa4>)
 800558a:	2202      	movs	r2, #2
 800558c:	60da      	str	r2, [r3, #12]
  }
}
 800558e:	bf00      	nop
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40023c00 	.word	0x40023c00
 800559c:	20000d0c 	.word	0x20000d0c

080055a0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055b2:	4b31      	ldr	r3, [pc, #196]	@ (8005678 <HAL_FLASHEx_Erase+0xd8>)
 80055b4:	7e1b      	ldrb	r3, [r3, #24]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_FLASHEx_Erase+0x1e>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e058      	b.n	8005670 <HAL_FLASHEx_Erase+0xd0>
 80055be:	4b2e      	ldr	r3, [pc, #184]	@ (8005678 <HAL_FLASHEx_Erase+0xd8>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80055c8:	f7ff feba 	bl	8005340 <FLASH_WaitForLastOperation>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d148      	bne.n	8005668 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f04f 32ff 	mov.w	r2, #4294967295
 80055dc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d115      	bne.n	8005612 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f000 f844 	bl	8005680 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80055fc:	f7ff fea0 	bl	8005340 <FLASH_WaitForLastOperation>
 8005600:	4603      	mov	r3, r0
 8005602:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005604:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <HAL_FLASHEx_Erase+0xdc>)
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	4a1c      	ldr	r2, [pc, #112]	@ (800567c <HAL_FLASHEx_Erase+0xdc>)
 800560a:	f023 0304 	bic.w	r3, r3, #4
 800560e:	6113      	str	r3, [r2, #16]
 8005610:	e028      	b.n	8005664 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	e01c      	b.n	8005654 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	4619      	mov	r1, r3
 8005622:	68b8      	ldr	r0, [r7, #8]
 8005624:	f000 f850 	bl	80056c8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005628:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800562c:	f7ff fe88 	bl	8005340 <FLASH_WaitForLastOperation>
 8005630:	4603      	mov	r3, r0
 8005632:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005634:	4b11      	ldr	r3, [pc, #68]	@ (800567c <HAL_FLASHEx_Erase+0xdc>)
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	4a10      	ldr	r2, [pc, #64]	@ (800567c <HAL_FLASHEx_Erase+0xdc>)
 800563a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800563e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	601a      	str	r2, [r3, #0]
          break;
 800564c:	e00a      	b.n	8005664 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3301      	adds	r3, #1
 8005652:	60bb      	str	r3, [r7, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4413      	add	r3, r2
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d3da      	bcc.n	800561a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005664:	f000 f878 	bl	8005758 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005668:	4b03      	ldr	r3, [pc, #12]	@ (8005678 <HAL_FLASHEx_Erase+0xd8>)
 800566a:	2200      	movs	r2, #0
 800566c:	761a      	strb	r2, [r3, #24]

  return status;
 800566e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000d0c 	.word	0x20000d0c
 800567c:	40023c00 	.word	0x40023c00

08005680 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	6039      	str	r1, [r7, #0]
 800568a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800568c:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <FLASH_MassErase+0x44>)
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	4a0c      	ldr	r2, [pc, #48]	@ (80056c4 <FLASH_MassErase+0x44>)
 8005692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005696:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <FLASH_MassErase+0x44>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	4a09      	ldr	r2, [pc, #36]	@ (80056c4 <FLASH_MassErase+0x44>)
 800569e:	f043 0304 	orr.w	r3, r3, #4
 80056a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80056a4:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <FLASH_MassErase+0x44>)
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	4313      	orrs	r3, r2
 80056ae:	4a05      	ldr	r2, [pc, #20]	@ (80056c4 <FLASH_MassErase+0x44>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056b4:	6113      	str	r3, [r2, #16]
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40023c00 	.word	0x40023c00

080056c8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e010      	b.n	8005706 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d103      	bne.n	80056f2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80056ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e009      	b.n	8005706 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d103      	bne.n	8005700 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80056f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e002      	b.n	8005706 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005700:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005704:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005706:	4b13      	ldr	r3, [pc, #76]	@ (8005754 <FLASH_Erase_Sector+0x8c>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	4a12      	ldr	r2, [pc, #72]	@ (8005754 <FLASH_Erase_Sector+0x8c>)
 800570c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005710:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005712:	4b10      	ldr	r3, [pc, #64]	@ (8005754 <FLASH_Erase_Sector+0x8c>)
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	490f      	ldr	r1, [pc, #60]	@ (8005754 <FLASH_Erase_Sector+0x8c>)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800571e:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <FLASH_Erase_Sector+0x8c>)
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	4a0c      	ldr	r2, [pc, #48]	@ (8005754 <FLASH_Erase_Sector+0x8c>)
 8005724:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005728:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800572a:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <FLASH_Erase_Sector+0x8c>)
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4313      	orrs	r3, r2
 8005734:	4a07      	ldr	r2, [pc, #28]	@ (8005754 <FLASH_Erase_Sector+0x8c>)
 8005736:	f043 0302 	orr.w	r3, r3, #2
 800573a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <FLASH_Erase_Sector+0x8c>)
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	4a04      	ldr	r2, [pc, #16]	@ (8005754 <FLASH_Erase_Sector+0x8c>)
 8005742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005746:	6113      	str	r3, [r2, #16]
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40023c00 	.word	0x40023c00

08005758 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800575c:	4b20      	ldr	r3, [pc, #128]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005764:	2b00      	cmp	r3, #0
 8005766:	d017      	beq.n	8005798 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005768:	4b1d      	ldr	r3, [pc, #116]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1c      	ldr	r2, [pc, #112]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 800576e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005772:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005774:	4b1a      	ldr	r3, [pc, #104]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a19      	ldr	r2, [pc, #100]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 800577a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	4b17      	ldr	r3, [pc, #92]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a16      	ldr	r2, [pc, #88]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 8005786:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800578a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800578c:	4b14      	ldr	r3, [pc, #80]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a13      	ldr	r2, [pc, #76]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 8005792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005796:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005798:	4b11      	ldr	r3, [pc, #68]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d017      	beq.n	80057d4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80057a4:	4b0e      	ldr	r3, [pc, #56]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a0d      	ldr	r2, [pc, #52]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 80057aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80057b0:	4b0b      	ldr	r3, [pc, #44]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0a      	ldr	r2, [pc, #40]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 80057b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	4b08      	ldr	r3, [pc, #32]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a07      	ldr	r2, [pc, #28]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 80057c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80057c8:	4b05      	ldr	r3, [pc, #20]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a04      	ldr	r2, [pc, #16]	@ (80057e0 <FLASH_FlushCaches+0x88>)
 80057ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057d2:	6013      	str	r3, [r2, #0]
  }
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40023c00 	.word	0x40023c00

080057e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b089      	sub	sp, #36	@ 0x24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057fa:	2300      	movs	r3, #0
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	e16b      	b.n	8005ad8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005800:	2201      	movs	r2, #1
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4013      	ands	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	429a      	cmp	r2, r3
 800581a:	f040 815a 	bne.w	8005ad2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b01      	cmp	r3, #1
 8005828:	d005      	beq.n	8005836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005832:	2b02      	cmp	r3, #2
 8005834:	d130      	bne.n	8005898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	2203      	movs	r2, #3
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	43db      	mvns	r3, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4013      	ands	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4313      	orrs	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800586c:	2201      	movs	r2, #1
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4013      	ands	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f003 0201 	and.w	r2, r3, #1
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d017      	beq.n	80058d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	2203      	movs	r2, #3
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4013      	ands	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d123      	bne.n	8005928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	08da      	lsrs	r2, r3, #3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3208      	adds	r2, #8
 80058e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	220f      	movs	r2, #15
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	08da      	lsrs	r2, r3, #3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3208      	adds	r2, #8
 8005922:	69b9      	ldr	r1, [r7, #24]
 8005924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	2203      	movs	r2, #3
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4013      	ands	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 0203 	and.w	r2, r3, #3
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4313      	orrs	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 80b4 	beq.w	8005ad2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	4b60      	ldr	r3, [pc, #384]	@ (8005af0 <HAL_GPIO_Init+0x30c>)
 8005970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005972:	4a5f      	ldr	r2, [pc, #380]	@ (8005af0 <HAL_GPIO_Init+0x30c>)
 8005974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005978:	6453      	str	r3, [r2, #68]	@ 0x44
 800597a:	4b5d      	ldr	r3, [pc, #372]	@ (8005af0 <HAL_GPIO_Init+0x30c>)
 800597c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005986:	4a5b      	ldr	r2, [pc, #364]	@ (8005af4 <HAL_GPIO_Init+0x310>)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	089b      	lsrs	r3, r3, #2
 800598c:	3302      	adds	r3, #2
 800598e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	220f      	movs	r2, #15
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a52      	ldr	r2, [pc, #328]	@ (8005af8 <HAL_GPIO_Init+0x314>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d02b      	beq.n	8005a0a <HAL_GPIO_Init+0x226>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a51      	ldr	r2, [pc, #324]	@ (8005afc <HAL_GPIO_Init+0x318>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d025      	beq.n	8005a06 <HAL_GPIO_Init+0x222>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a50      	ldr	r2, [pc, #320]	@ (8005b00 <HAL_GPIO_Init+0x31c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01f      	beq.n	8005a02 <HAL_GPIO_Init+0x21e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a4f      	ldr	r2, [pc, #316]	@ (8005b04 <HAL_GPIO_Init+0x320>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d019      	beq.n	80059fe <HAL_GPIO_Init+0x21a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a4e      	ldr	r2, [pc, #312]	@ (8005b08 <HAL_GPIO_Init+0x324>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <HAL_GPIO_Init+0x216>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a4d      	ldr	r2, [pc, #308]	@ (8005b0c <HAL_GPIO_Init+0x328>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00d      	beq.n	80059f6 <HAL_GPIO_Init+0x212>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a4c      	ldr	r2, [pc, #304]	@ (8005b10 <HAL_GPIO_Init+0x32c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d007      	beq.n	80059f2 <HAL_GPIO_Init+0x20e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005b14 <HAL_GPIO_Init+0x330>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_GPIO_Init+0x20a>
 80059ea:	2307      	movs	r3, #7
 80059ec:	e00e      	b.n	8005a0c <HAL_GPIO_Init+0x228>
 80059ee:	2308      	movs	r3, #8
 80059f0:	e00c      	b.n	8005a0c <HAL_GPIO_Init+0x228>
 80059f2:	2306      	movs	r3, #6
 80059f4:	e00a      	b.n	8005a0c <HAL_GPIO_Init+0x228>
 80059f6:	2305      	movs	r3, #5
 80059f8:	e008      	b.n	8005a0c <HAL_GPIO_Init+0x228>
 80059fa:	2304      	movs	r3, #4
 80059fc:	e006      	b.n	8005a0c <HAL_GPIO_Init+0x228>
 80059fe:	2303      	movs	r3, #3
 8005a00:	e004      	b.n	8005a0c <HAL_GPIO_Init+0x228>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e002      	b.n	8005a0c <HAL_GPIO_Init+0x228>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_GPIO_Init+0x228>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	f002 0203 	and.w	r2, r2, #3
 8005a12:	0092      	lsls	r2, r2, #2
 8005a14:	4093      	lsls	r3, r2
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a1c:	4935      	ldr	r1, [pc, #212]	@ (8005af4 <HAL_GPIO_Init+0x310>)
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	3302      	adds	r3, #2
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b18 <HAL_GPIO_Init+0x334>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a4e:	4a32      	ldr	r2, [pc, #200]	@ (8005b18 <HAL_GPIO_Init+0x334>)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a54:	4b30      	ldr	r3, [pc, #192]	@ (8005b18 <HAL_GPIO_Init+0x334>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4013      	ands	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a78:	4a27      	ldr	r2, [pc, #156]	@ (8005b18 <HAL_GPIO_Init+0x334>)
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a7e:	4b26      	ldr	r3, [pc, #152]	@ (8005b18 <HAL_GPIO_Init+0x334>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8005b18 <HAL_GPIO_Init+0x334>)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <HAL_GPIO_Init+0x334>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005acc:	4a12      	ldr	r2, [pc, #72]	@ (8005b18 <HAL_GPIO_Init+0x334>)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b0f      	cmp	r3, #15
 8005adc:	f67f ae90 	bls.w	8005800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	3724      	adds	r7, #36	@ 0x24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40023800 	.word	0x40023800
 8005af4:	40013800 	.word	0x40013800
 8005af8:	40020000 	.word	0x40020000
 8005afc:	40020400 	.word	0x40020400
 8005b00:	40020800 	.word	0x40020800
 8005b04:	40020c00 	.word	0x40020c00
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	40021400 	.word	0x40021400
 8005b10:	40021800 	.word	0x40021800
 8005b14:	40021c00 	.word	0x40021c00
 8005b18:	40013c00 	.word	0x40013c00

08005b1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	e0cd      	b.n	8005cd4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b38:	2201      	movs	r2, #1
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	4013      	ands	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	f040 80bd 	bne.w	8005cce <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005b54:	4a65      	ldr	r2, [pc, #404]	@ (8005cec <HAL_GPIO_DeInit+0x1d0>)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	089b      	lsrs	r3, r3, #2
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b60:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	220f      	movs	r2, #15
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	4013      	ands	r3, r2
 8005b74:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a5d      	ldr	r2, [pc, #372]	@ (8005cf0 <HAL_GPIO_DeInit+0x1d4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d02b      	beq.n	8005bd6 <HAL_GPIO_DeInit+0xba>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a5c      	ldr	r2, [pc, #368]	@ (8005cf4 <HAL_GPIO_DeInit+0x1d8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d025      	beq.n	8005bd2 <HAL_GPIO_DeInit+0xb6>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a5b      	ldr	r2, [pc, #364]	@ (8005cf8 <HAL_GPIO_DeInit+0x1dc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d01f      	beq.n	8005bce <HAL_GPIO_DeInit+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a5a      	ldr	r2, [pc, #360]	@ (8005cfc <HAL_GPIO_DeInit+0x1e0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d019      	beq.n	8005bca <HAL_GPIO_DeInit+0xae>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a59      	ldr	r2, [pc, #356]	@ (8005d00 <HAL_GPIO_DeInit+0x1e4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <HAL_GPIO_DeInit+0xaa>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a58      	ldr	r2, [pc, #352]	@ (8005d04 <HAL_GPIO_DeInit+0x1e8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00d      	beq.n	8005bc2 <HAL_GPIO_DeInit+0xa6>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a57      	ldr	r2, [pc, #348]	@ (8005d08 <HAL_GPIO_DeInit+0x1ec>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d007      	beq.n	8005bbe <HAL_GPIO_DeInit+0xa2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a56      	ldr	r2, [pc, #344]	@ (8005d0c <HAL_GPIO_DeInit+0x1f0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d101      	bne.n	8005bba <HAL_GPIO_DeInit+0x9e>
 8005bb6:	2307      	movs	r3, #7
 8005bb8:	e00e      	b.n	8005bd8 <HAL_GPIO_DeInit+0xbc>
 8005bba:	2308      	movs	r3, #8
 8005bbc:	e00c      	b.n	8005bd8 <HAL_GPIO_DeInit+0xbc>
 8005bbe:	2306      	movs	r3, #6
 8005bc0:	e00a      	b.n	8005bd8 <HAL_GPIO_DeInit+0xbc>
 8005bc2:	2305      	movs	r3, #5
 8005bc4:	e008      	b.n	8005bd8 <HAL_GPIO_DeInit+0xbc>
 8005bc6:	2304      	movs	r3, #4
 8005bc8:	e006      	b.n	8005bd8 <HAL_GPIO_DeInit+0xbc>
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e004      	b.n	8005bd8 <HAL_GPIO_DeInit+0xbc>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e002      	b.n	8005bd8 <HAL_GPIO_DeInit+0xbc>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_GPIO_DeInit+0xbc>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	f002 0203 	and.w	r2, r2, #3
 8005bde:	0092      	lsls	r2, r2, #2
 8005be0:	4093      	lsls	r3, r2
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d132      	bne.n	8005c4e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005be8:	4b49      	ldr	r3, [pc, #292]	@ (8005d10 <HAL_GPIO_DeInit+0x1f4>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	4947      	ldr	r1, [pc, #284]	@ (8005d10 <HAL_GPIO_DeInit+0x1f4>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005bf6:	4b46      	ldr	r3, [pc, #280]	@ (8005d10 <HAL_GPIO_DeInit+0x1f4>)
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	4944      	ldr	r1, [pc, #272]	@ (8005d10 <HAL_GPIO_DeInit+0x1f4>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005c04:	4b42      	ldr	r3, [pc, #264]	@ (8005d10 <HAL_GPIO_DeInit+0x1f4>)
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	4940      	ldr	r1, [pc, #256]	@ (8005d10 <HAL_GPIO_DeInit+0x1f4>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005c12:	4b3f      	ldr	r3, [pc, #252]	@ (8005d10 <HAL_GPIO_DeInit+0x1f4>)
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	493d      	ldr	r1, [pc, #244]	@ (8005d10 <HAL_GPIO_DeInit+0x1f4>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	220f      	movs	r2, #15
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005c30:	4a2e      	ldr	r2, [pc, #184]	@ (8005cec <HAL_GPIO_DeInit+0x1d0>)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	089b      	lsrs	r3, r3, #2
 8005c36:	3302      	adds	r3, #2
 8005c38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	43da      	mvns	r2, r3
 8005c40:	482a      	ldr	r0, [pc, #168]	@ (8005cec <HAL_GPIO_DeInit+0x1d0>)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	089b      	lsrs	r3, r3, #2
 8005c46:	400a      	ands	r2, r1
 8005c48:	3302      	adds	r3, #2
 8005c4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	2103      	movs	r1, #3
 8005c58:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	401a      	ands	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	08da      	lsrs	r2, r3, #3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3208      	adds	r2, #8
 8005c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	220f      	movs	r2, #15
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	08d2      	lsrs	r2, r2, #3
 8005c84:	4019      	ands	r1, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3208      	adds	r2, #8
 8005c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	2103      	movs	r1, #3
 8005c98:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	2101      	movs	r1, #1
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	2103      	movs	r1, #3
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	401a      	ands	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b0f      	cmp	r3, #15
 8005cd8:	f67f af2e 	bls.w	8005b38 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40013800 	.word	0x40013800
 8005cf0:	40020000 	.word	0x40020000
 8005cf4:	40020400 	.word	0x40020400
 8005cf8:	40020800 	.word	0x40020800
 8005cfc:	40020c00 	.word	0x40020c00
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40021400 	.word	0x40021400
 8005d08:	40021800 	.word	0x40021800
 8005d0c:	40021c00 	.word	0x40021c00
 8005d10:	40013c00 	.word	0x40013c00

08005d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	887b      	ldrh	r3, [r7, #2]
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
 8005d30:	e001      	b.n	8005d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d32:	2300      	movs	r3, #0
 8005d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	807b      	strh	r3, [r7, #2]
 8005d50:	4613      	mov	r3, r2
 8005d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d54:	787b      	ldrb	r3, [r7, #1]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d5a:	887a      	ldrh	r2, [r7, #2]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d60:	e003      	b.n	8005d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d62:	887b      	ldrh	r3, [r7, #2]
 8005d64:	041a      	lsls	r2, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	619a      	str	r2, [r3, #24]
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d82:	4b08      	ldr	r3, [pc, #32]	@ (8005da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d006      	beq.n	8005d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d8e:	4a05      	ldr	r2, [pc, #20]	@ (8005da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f00f fad8 	bl	801534c <HAL_GPIO_EXTI_Callback>
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40013c00 	.word	0x40013c00

08005da8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e059      	b.n	8005e6e <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d106      	bne.n	8005dda <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f00c fc45 	bl	8012664 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2203      	movs	r2, #3
 8005dde:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005de8:	d102      	bne.n	8005df0 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f005 ff64 	bl	800bcc2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7c1a      	ldrb	r2, [r3, #16]
 8005e02:	f88d 2000 	strb.w	r2, [sp]
 8005e06:	3304      	adds	r3, #4
 8005e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e0a:	f005 fee5 	bl	800bbd8 <USB_CoreInit>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e026      	b.n	8005e6e <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2101      	movs	r1, #1
 8005e26:	4618      	mov	r0, r3
 8005e28:	f005 ff5c 	bl	800bce4 <USB_SetCurrentMode>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e017      	b.n	8005e6e <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	7c1a      	ldrb	r2, [r3, #16]
 8005e46:	f88d 2000 	strb.w	r2, [sp]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e4e:	f006 f8ff 	bl	800c050 <USB_HostInit>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e004      	b.n	8005e6e <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005e76:	b590      	push	{r4, r7, lr}
 8005e78:	b08b      	sub	sp, #44	@ 0x2c
 8005e7a:	af04      	add	r7, sp, #16
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	4608      	mov	r0, r1
 8005e80:	4611      	mov	r1, r2
 8005e82:	461a      	mov	r2, r3
 8005e84:	4603      	mov	r3, r0
 8005e86:	70fb      	strb	r3, [r7, #3]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70bb      	strb	r3, [r7, #2]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8005e90:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005e92:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_HCD_HC_Init+0x2c>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e09d      	b.n	8005fde <HAL_HCD_HC_Init+0x168>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	3319      	adds	r3, #25
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	3314      	adds	r3, #20
 8005ece:	787a      	ldrb	r2, [r7, #1]
 8005ed0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005ed2:	78fa      	ldrb	r2, [r7, #3]
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	3315      	adds	r3, #21
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005ee6:	78fa      	ldrb	r2, [r7, #3]
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	3326      	adds	r3, #38	@ 0x26
 8005ef6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005efa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	78bb      	ldrb	r3, [r7, #2]
 8005f00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f04:	b2d8      	uxtb	r0, r3
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	3316      	adds	r3, #22
 8005f14:	4602      	mov	r2, r0
 8005f16:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fbc7 	bl	80066b0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005f22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da0a      	bge.n	8005f40 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	3317      	adds	r3, #23
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	e009      	b.n	8005f54 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005f40:	78fa      	ldrb	r2, [r7, #3]
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	1a9b      	subs	r3, r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	3317      	adds	r3, #23
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f006 f9dd 	bl	800c318 <USB_GetHostSpeed>
 8005f5e:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005f60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d10b      	bne.n	8005f80 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8005f68:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d107      	bne.n	8005f80 <HAL_HCD_HC_Init+0x10a>
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2bbc      	cmp	r3, #188	@ 0xbc
 8005f7a:	d901      	bls.n	8005f80 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005f7c:	23bc      	movs	r3, #188	@ 0xbc
 8005f7e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	3318      	adds	r3, #24
 8005f90:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005f94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	b298      	uxth	r0, r3
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3328      	adds	r3, #40	@ 0x28
 8005faa:	4602      	mov	r2, r0
 8005fac:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	787c      	ldrb	r4, [r7, #1]
 8005fb8:	78ba      	ldrb	r2, [r7, #2]
 8005fba:	78f9      	ldrb	r1, [r7, #3]
 8005fbc:	9302      	str	r3, [sp, #8]
 8005fbe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	4623      	mov	r3, r4
 8005fcc:	f006 f9cc 	bl	800c368 <USB_HC_Init>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd90      	pop	{r4, r7, pc}

08005fe6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_HCD_HC_Halt+0x1e>
 8006000:	2302      	movs	r3, #2
 8006002:	e00f      	b.n	8006024 <HAL_HCD_HC_Halt+0x3e>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	4611      	mov	r1, r2
 8006014:	4618      	mov	r0, r3
 8006016:	f006 fd5e 	bl	800cad6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	461a      	mov	r2, r3
 800603a:	4603      	mov	r3, r0
 800603c:	70fb      	strb	r3, [r7, #3]
 800603e:	460b      	mov	r3, r1
 8006040:	70bb      	strb	r3, [r7, #2]
 8006042:	4613      	mov	r3, r2
 8006044:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006046:	78fa      	ldrb	r2, [r7, #3]
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	4613      	mov	r3, r2
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	440b      	add	r3, r1
 8006054:	3317      	adds	r3, #23
 8006056:	78ba      	ldrb	r2, [r7, #2]
 8006058:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800605a:	78fa      	ldrb	r2, [r7, #3]
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	4613      	mov	r3, r2
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	3326      	adds	r3, #38	@ 0x26
 800606a:	787a      	ldrb	r2, [r7, #1]
 800606c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800606e:	7c3b      	ldrb	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d114      	bne.n	800609e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	332a      	adds	r3, #42	@ 0x2a
 8006084:	2203      	movs	r2, #3
 8006086:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	4613      	mov	r3, r2
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	3319      	adds	r3, #25
 8006098:	7f3a      	ldrb	r2, [r7, #28]
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	e009      	b.n	80060b2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800609e:	78fa      	ldrb	r2, [r7, #3]
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	332a      	adds	r3, #42	@ 0x2a
 80060ae:	2202      	movs	r2, #2
 80060b0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80060b2:	787b      	ldrb	r3, [r7, #1]
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	f200 8102 	bhi.w	80062be <HAL_HCD_HC_SubmitRequest+0x292>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060d1 	.word	0x080060d1
 80060c4:	080062a9 	.word	0x080062a9
 80060c8:	08006195 	.word	0x08006195
 80060cc:	0800621f 	.word	0x0800621f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80060d0:	7c3b      	ldrb	r3, [r7, #16]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	f040 80f5 	bne.w	80062c2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80060d8:	78bb      	ldrb	r3, [r7, #2]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d12d      	bne.n	800613a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80060de:	8b3b      	ldrh	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80060e4:	78fa      	ldrb	r2, [r7, #3]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	333d      	adds	r3, #61	@ 0x3d
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	333d      	adds	r3, #61	@ 0x3d
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	332a      	adds	r3, #42	@ 0x2a
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8006122:	e0ce      	b.n	80062c2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	332a      	adds	r3, #42	@ 0x2a
 8006134:	2202      	movs	r2, #2
 8006136:	701a      	strb	r2, [r3, #0]
      break;
 8006138:	e0c3      	b.n	80062c2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	331a      	adds	r3, #26
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	f040 80b8 	bne.w	80062c2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	333c      	adds	r3, #60	@ 0x3c
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006168:	78fa      	ldrb	r2, [r7, #3]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	332a      	adds	r3, #42	@ 0x2a
 8006178:	2200      	movs	r2, #0
 800617a:	701a      	strb	r2, [r3, #0]
      break;
 800617c:	e0a1      	b.n	80062c2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800617e:	78fa      	ldrb	r2, [r7, #3]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	332a      	adds	r3, #42	@ 0x2a
 800618e:	2202      	movs	r2, #2
 8006190:	701a      	strb	r2, [r3, #0]
      break;
 8006192:	e096      	b.n	80062c2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006194:	78bb      	ldrb	r3, [r7, #2]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d120      	bne.n	80061dc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800619a:	78fa      	ldrb	r2, [r7, #3]
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	333d      	adds	r3, #61	@ 0x3d
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80061b0:	78fa      	ldrb	r2, [r7, #3]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	332a      	adds	r3, #42	@ 0x2a
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80061c4:	e07e      	b.n	80062c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80061c6:	78fa      	ldrb	r2, [r7, #3]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	332a      	adds	r3, #42	@ 0x2a
 80061d6:	2202      	movs	r2, #2
 80061d8:	701a      	strb	r2, [r3, #0]
      break;
 80061da:	e073      	b.n	80062c4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	333c      	adds	r3, #60	@ 0x3c
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	332a      	adds	r3, #42	@ 0x2a
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
      break;
 8006206:	e05d      	b.n	80062c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	332a      	adds	r3, #42	@ 0x2a
 8006218:	2202      	movs	r2, #2
 800621a:	701a      	strb	r2, [r3, #0]
      break;
 800621c:	e052      	b.n	80062c4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800621e:	78bb      	ldrb	r3, [r7, #2]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d120      	bne.n	8006266 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006224:	78fa      	ldrb	r2, [r7, #3]
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	333d      	adds	r3, #61	@ 0x3d
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800623a:	78fa      	ldrb	r2, [r7, #3]
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	332a      	adds	r3, #42	@ 0x2a
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800624e:	e039      	b.n	80062c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	332a      	adds	r3, #42	@ 0x2a
 8006260:	2202      	movs	r2, #2
 8006262:	701a      	strb	r2, [r3, #0]
      break;
 8006264:	e02e      	b.n	80062c4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	333c      	adds	r3, #60	@ 0x3c
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	4613      	mov	r3, r2
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	332a      	adds	r3, #42	@ 0x2a
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
      break;
 8006290:	e018      	b.n	80062c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	440b      	add	r3, r1
 80062a0:	332a      	adds	r3, #42	@ 0x2a
 80062a2:	2202      	movs	r2, #2
 80062a4:	701a      	strb	r2, [r3, #0]
      break;
 80062a6:	e00d      	b.n	80062c4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	332a      	adds	r3, #42	@ 0x2a
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
      break;
 80062bc:	e002      	b.n	80062c4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80062be:	bf00      	nop
 80062c0:	e000      	b.n	80062c4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80062c2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80062c4:	78fa      	ldrb	r2, [r7, #3]
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	4613      	mov	r3, r2
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	332c      	adds	r3, #44	@ 0x2c
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80062d8:	78fa      	ldrb	r2, [r7, #3]
 80062da:	8b39      	ldrh	r1, [r7, #24]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4403      	add	r3, r0
 80062e8:	3334      	adds	r3, #52	@ 0x34
 80062ea:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80062ec:	78fa      	ldrb	r2, [r7, #3]
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	334c      	adds	r3, #76	@ 0x4c
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	3338      	adds	r3, #56	@ 0x38
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	4613      	mov	r3, r2
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	3315      	adds	r3, #21
 8006324:	78fa      	ldrb	r2, [r7, #3]
 8006326:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	4613      	mov	r3, r2
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	334d      	adds	r3, #77	@ 0x4d
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	4613      	mov	r3, r2
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	3310      	adds	r3, #16
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	4413      	add	r3, r2
 8006350:	1d19      	adds	r1, r3, #4
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	799b      	ldrb	r3, [r3, #6]
 8006356:	461a      	mov	r2, r3
 8006358:	f006 f932 	bl	800c5c0 <USB_HC_StartXfer>
 800635c:	4603      	mov	r3, r0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop

08006368 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f005 fe26 	bl	800bfd0 <USB_GetMode>
 8006384:	4603      	mov	r3, r0
 8006386:	2b01      	cmp	r3, #1
 8006388:	f040 80fb 	bne.w	8006582 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f005 fde9 	bl	800bf68 <USB_ReadInterrupts>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80f1 	beq.w	8006580 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f005 fde0 	bl	800bf68 <USB_ReadInterrupts>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063b2:	d104      	bne.n	80063be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80063bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f005 fdd0 	bl	800bf68 <USB_ReadInterrupts>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063d2:	d104      	bne.n	80063de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80063dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f005 fdc0 	bl	800bf68 <USB_ReadInterrupts>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063f2:	d104      	bne.n	80063fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80063fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f005 fdb0 	bl	800bf68 <USB_ReadInterrupts>
 8006408:	4603      	mov	r3, r0
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b02      	cmp	r3, #2
 8006410:	d103      	bne.n	800641a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2202      	movs	r2, #2
 8006418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f005 fda2 	bl	800bf68 <USB_ReadInterrupts>
 8006424:	4603      	mov	r3, r0
 8006426:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800642a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800642e:	d120      	bne.n	8006472 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006438:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d113      	bne.n	8006472 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800644a:	2110      	movs	r1, #16
 800644c:	6938      	ldr	r0, [r7, #16]
 800644e:	f005 fc95 	bl	800bd7c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006452:	6938      	ldr	r0, [r7, #16]
 8006454:	f005 fcc4 	bl	800bde0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	7a5b      	ldrb	r3, [r3, #9]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d105      	bne.n	800646c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2101      	movs	r1, #1
 8006466:	4618      	mov	r0, r3
 8006468:	f005 feb6 	bl	800c1d8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f00c f969 	bl	8012744 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f005 fd76 	bl	800bf68 <USB_ReadInterrupts>
 800647c:	4603      	mov	r3, r0
 800647e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006486:	d102      	bne.n	800648e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fd33 	bl	8007ef4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f005 fd68 	bl	800bf68 <USB_ReadInterrupts>
 8006498:	4603      	mov	r3, r0
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d106      	bne.n	80064b0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f00c f932 	bl	801270c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2208      	movs	r2, #8
 80064ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f005 fd57 	bl	800bf68 <USB_ReadInterrupts>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064c4:	d139      	bne.n	800653a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f006 faf2 	bl	800cab4 <USB_HC_ReadInterrupt>
 80064d0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e025      	b.n	8006524 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	fa22 f303 	lsr.w	r3, r2, r3
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d018      	beq.n	800651e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006502:	d106      	bne.n	8006512 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f905 	bl	800671a <HCD_HC_IN_IRQHandler>
 8006510:	e005      	b.n	800651e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 ff67 	bl	80073ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	3301      	adds	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	795b      	ldrb	r3, [r3, #5]
 8006528:	461a      	mov	r2, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	4293      	cmp	r3, r2
 800652e:	d3d3      	bcc.n	80064d8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f005 fd12 	bl	800bf68 <USB_ReadInterrupts>
 8006544:	4603      	mov	r3, r0
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b10      	cmp	r3, #16
 800654c:	d101      	bne.n	8006552 <HAL_HCD_IRQHandler+0x1ea>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <HAL_HCD_IRQHandler+0x1ec>
 8006552:	2300      	movs	r3, #0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d014      	beq.n	8006582 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0210 	bic.w	r2, r2, #16
 8006566:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fbe4 	bl	8007d36 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699a      	ldr	r2, [r3, #24]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0210 	orr.w	r2, r2, #16
 800657c:	619a      	str	r2, [r3, #24]
 800657e:	e000      	b.n	8006582 <HAL_HCD_IRQHandler+0x21a>
      return;
 8006580:	bf00      	nop
    }
  }
}
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <HAL_HCD_Start+0x16>
 800659a:	2302      	movs	r3, #2
 800659c:	e013      	b.n	80065c6 <HAL_HCD_Start+0x3e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2101      	movs	r1, #1
 80065ac:	4618      	mov	r0, r3
 80065ae:	f005 fe7a 	bl	800c2a6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f005 fb72 	bl	800bca0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_HCD_Stop+0x16>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e00d      	b.n	8006600 <HAL_HCD_Stop+0x32>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f006 fbcd 	bl	800cd90 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f005 fe1c 	bl	800c252 <USB_ResetPort>
 800661a:	4603      	mov	r3, r0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006630:	78fa      	ldrb	r2, [r7, #3]
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	4613      	mov	r3, r2
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	1a9b      	subs	r3, r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	334c      	adds	r3, #76	@ 0x4c
 8006640:	781b      	ldrb	r3, [r3, #0]
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	3338      	adds	r3, #56	@ 0x38
 800666a:	681b      	ldr	r3, [r3, #0]
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	f005 fe5e 	bl	800c346 <USB_GetCurrentFrame>
 800668a:	4603      	mov	r3, r0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f005 fe39 	bl	800c318 <USB_GetHostSpeed>
 80066a6:	4603      	mov	r3, r0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80066bc:	78fa      	ldrb	r2, [r7, #3]
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	4613      	mov	r3, r2
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	331a      	adds	r3, #26
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80066d0:	78fa      	ldrb	r2, [r7, #3]
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	4613      	mov	r3, r2
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	331b      	adds	r3, #27
 80066e0:	2200      	movs	r2, #0
 80066e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80066e4:	78fa      	ldrb	r2, [r7, #3]
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	4613      	mov	r3, r2
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	440b      	add	r3, r1
 80066f2:	3325      	adds	r3, #37	@ 0x25
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4613      	mov	r3, r2
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	3324      	adds	r3, #36	@ 0x24
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b086      	sub	sp, #24
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	78fa      	ldrb	r2, [r7, #3]
 8006736:	4611      	mov	r1, r2
 8006738:	4618      	mov	r0, r3
 800673a:	f005 fc28 	bl	800bf8e <USB_ReadChInterrupts>
 800673e:	4603      	mov	r3, r0
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b04      	cmp	r3, #4
 8006746:	d11a      	bne.n	800677e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006754:	461a      	mov	r2, r3
 8006756:	2304      	movs	r3, #4
 8006758:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	440b      	add	r3, r1
 8006768:	334d      	adds	r3, #77	@ 0x4d
 800676a:	2207      	movs	r2, #7
 800676c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	78fa      	ldrb	r2, [r7, #3]
 8006774:	4611      	mov	r1, r2
 8006776:	4618      	mov	r0, r3
 8006778:	f006 f9ad 	bl	800cad6 <USB_HC_Halt>
 800677c:	e09e      	b.n	80068bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	4611      	mov	r1, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f005 fc01 	bl	800bf8e <USB_ReadChInterrupts>
 800678c:	4603      	mov	r3, r0
 800678e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006796:	d11b      	bne.n	80067d0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a4:	461a      	mov	r2, r3
 80067a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	334d      	adds	r3, #77	@ 0x4d
 80067bc:	2208      	movs	r2, #8
 80067be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f006 f984 	bl	800cad6 <USB_HC_Halt>
 80067ce:	e075      	b.n	80068bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f005 fbd8 	bl	800bf8e <USB_ReadChInterrupts>
 80067de:	4603      	mov	r3, r0
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d11a      	bne.n	800681e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f4:	461a      	mov	r2, r3
 80067f6:	2308      	movs	r3, #8
 80067f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80067fa:	78fa      	ldrb	r2, [r7, #3]
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	4613      	mov	r3, r2
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	334d      	adds	r3, #77	@ 0x4d
 800680a:	2206      	movs	r2, #6
 800680c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	78fa      	ldrb	r2, [r7, #3]
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f006 f95d 	bl	800cad6 <USB_HC_Halt>
 800681c:	e04e      	b.n	80068bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	4611      	mov	r1, r2
 8006826:	4618      	mov	r0, r3
 8006828:	f005 fbb1 	bl	800bf8e <USB_ReadChInterrupts>
 800682c:	4603      	mov	r3, r0
 800682e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006836:	d11b      	bne.n	8006870 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	4413      	add	r3, r2
 8006840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006844:	461a      	mov	r2, r3
 8006846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800684a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	334d      	adds	r3, #77	@ 0x4d
 800685c:	2209      	movs	r2, #9
 800685e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	78fa      	ldrb	r2, [r7, #3]
 8006866:	4611      	mov	r1, r2
 8006868:	4618      	mov	r0, r3
 800686a:	f006 f934 	bl	800cad6 <USB_HC_Halt>
 800686e:	e025      	b.n	80068bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	4611      	mov	r1, r2
 8006878:	4618      	mov	r0, r3
 800687a:	f005 fb88 	bl	800bf8e <USB_ReadChInterrupts>
 800687e:	4603      	mov	r3, r0
 8006880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006884:	2b80      	cmp	r3, #128	@ 0x80
 8006886:	d119      	bne.n	80068bc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006894:	461a      	mov	r2, r3
 8006896:	2380      	movs	r3, #128	@ 0x80
 8006898:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	4613      	mov	r3, r2
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	334d      	adds	r3, #77	@ 0x4d
 80068aa:	2207      	movs	r2, #7
 80068ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	78fa      	ldrb	r2, [r7, #3]
 80068b4:	4611      	mov	r1, r2
 80068b6:	4618      	mov	r0, r3
 80068b8:	f006 f90d 	bl	800cad6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	78fa      	ldrb	r2, [r7, #3]
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f005 fb62 	bl	800bf8e <USB_ReadChInterrupts>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d4:	d112      	bne.n	80068fc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	78fa      	ldrb	r2, [r7, #3]
 80068dc:	4611      	mov	r1, r2
 80068de:	4618      	mov	r0, r3
 80068e0:	f006 f8f9 	bl	800cad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f0:	461a      	mov	r2, r3
 80068f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068f6:	6093      	str	r3, [r2, #8]
 80068f8:	f000 bd75 	b.w	80073e6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	78fa      	ldrb	r2, [r7, #3]
 8006902:	4611      	mov	r1, r2
 8006904:	4618      	mov	r0, r3
 8006906:	f005 fb42 	bl	800bf8e <USB_ReadChInterrupts>
 800690a:	4603      	mov	r3, r0
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b01      	cmp	r3, #1
 8006912:	f040 8128 	bne.w	8006b66 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006922:	461a      	mov	r2, r3
 8006924:	2320      	movs	r3, #32
 8006926:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	4613      	mov	r3, r2
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	1a9b      	subs	r3, r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	331b      	adds	r3, #27
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d119      	bne.n	8006972 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800693e:	78fa      	ldrb	r2, [r7, #3]
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	4613      	mov	r3, r2
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	440b      	add	r3, r1
 800694c:	331b      	adds	r3, #27
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	78fa      	ldrb	r2, [r7, #3]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	440a      	add	r2, r1
 8006968:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800696c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006970:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	799b      	ldrb	r3, [r3, #6]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d01b      	beq.n	80069b2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800697a:	78fa      	ldrb	r2, [r7, #3]
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	3330      	adds	r3, #48	@ 0x30
 800698a:	6819      	ldr	r1, [r3, #0]
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	4413      	add	r3, r2
 8006994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800699e:	78fa      	ldrb	r2, [r7, #3]
 80069a0:	1ac9      	subs	r1, r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4403      	add	r3, r0
 80069ae:	3338      	adds	r3, #56	@ 0x38
 80069b0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80069b2:	78fa      	ldrb	r2, [r7, #3]
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	1a9b      	subs	r3, r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	334d      	adds	r3, #77	@ 0x4d
 80069c2:	2201      	movs	r2, #1
 80069c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	3344      	adds	r3, #68	@ 0x44
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e6:	461a      	mov	r2, r3
 80069e8:	2301      	movs	r3, #1
 80069ea:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80069ec:	78fa      	ldrb	r2, [r7, #3]
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4613      	mov	r3, r2
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	1a9b      	subs	r3, r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	3326      	adds	r3, #38	@ 0x26
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	3326      	adds	r3, #38	@ 0x26
 8006a12:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d110      	bne.n	8006a3a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	4611      	mov	r1, r2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f006 f858 	bl	800cad6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a32:	461a      	mov	r2, r3
 8006a34:	2310      	movs	r3, #16
 8006a36:	6093      	str	r3, [r2, #8]
 8006a38:	e03d      	b.n	8006ab6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	1a9b      	subs	r3, r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	3326      	adds	r3, #38	@ 0x26
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d00a      	beq.n	8006a66 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006a50:	78fa      	ldrb	r2, [r7, #3]
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	3326      	adds	r3, #38	@ 0x26
 8006a60:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d127      	bne.n	8006ab6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a84:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006a86:	78fa      	ldrb	r2, [r7, #3]
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	1a9b      	subs	r3, r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	334c      	adds	r3, #76	@ 0x4c
 8006a96:	2201      	movs	r2, #1
 8006a98:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	1a9b      	subs	r3, r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	334c      	adds	r3, #76	@ 0x4c
 8006aaa:	781a      	ldrb	r2, [r3, #0]
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f00b fe55 	bl	8012760 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	799b      	ldrb	r3, [r3, #6]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d13b      	bne.n	8006b36 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8006abe:	78fa      	ldrb	r2, [r7, #3]
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	3338      	adds	r3, #56	@ 0x38
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	78fa      	ldrb	r2, [r7, #3]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	1a9b      	subs	r3, r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4403      	add	r3, r0
 8006ade:	3328      	adds	r3, #40	@ 0x28
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	440b      	add	r3, r1
 8006ae4:	1e59      	subs	r1, r3, #1
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4613      	mov	r3, r2
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4403      	add	r3, r0
 8006af4:	3328      	adds	r3, #40	@ 0x28
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8470 	beq.w	80073e6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8006b06:	78fa      	ldrb	r2, [r7, #3]
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	333c      	adds	r3, #60	@ 0x3c
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	f083 0301 	eor.w	r3, r3, #1
 8006b1e:	b2d8      	uxtb	r0, r3
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	1a9b      	subs	r3, r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	333c      	adds	r3, #60	@ 0x3c
 8006b2e:	4602      	mov	r2, r0
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	f000 bc58 	b.w	80073e6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	333c      	adds	r3, #60	@ 0x3c
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	78fa      	ldrb	r2, [r7, #3]
 8006b4a:	f083 0301 	eor.w	r3, r3, #1
 8006b4e:	b2d8      	uxtb	r0, r3
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	333c      	adds	r3, #60	@ 0x3c
 8006b5e:	4602      	mov	r2, r0
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	f000 bc40 	b.w	80073e6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	78fa      	ldrb	r2, [r7, #3]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f005 fa0d 	bl	800bf8e <USB_ReadChInterrupts>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	d131      	bne.n	8006be2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2320      	movs	r3, #32
 8006b8e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8006b90:	78fa      	ldrb	r2, [r7, #3]
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	4613      	mov	r3, r2
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	331a      	adds	r3, #26
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	f040 841f 	bne.w	80073e6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8006ba8:	78fa      	ldrb	r2, [r7, #3]
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	331b      	adds	r3, #27
 8006bb8:	2201      	movs	r2, #1
 8006bba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006bbc:	78fa      	ldrb	r2, [r7, #3]
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	1a9b      	subs	r3, r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	334d      	adds	r3, #77	@ 0x4d
 8006bcc:	2203      	movs	r2, #3
 8006bce:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	78fa      	ldrb	r2, [r7, #3]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f005 ff7c 	bl	800cad6 <USB_HC_Halt>
 8006bde:	f000 bc02 	b.w	80073e6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	78fa      	ldrb	r2, [r7, #3]
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f005 f9cf 	bl	800bf8e <USB_ReadChInterrupts>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	f040 8305 	bne.w	8007206 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006c0e:	78fa      	ldrb	r2, [r7, #3]
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	334d      	adds	r3, #77	@ 0x4d
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d114      	bne.n	8006c4e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	334d      	adds	r3, #77	@ 0x4d
 8006c34:	2202      	movs	r2, #2
 8006c36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	334c      	adds	r3, #76	@ 0x4c
 8006c48:	2201      	movs	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	e2cc      	b.n	80071e8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006c4e:	78fa      	ldrb	r2, [r7, #3]
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	334d      	adds	r3, #77	@ 0x4d
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b06      	cmp	r3, #6
 8006c62:	d114      	bne.n	8006c8e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c64:	78fa      	ldrb	r2, [r7, #3]
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	334d      	adds	r3, #77	@ 0x4d
 8006c74:	2202      	movs	r2, #2
 8006c76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8006c78:	78fa      	ldrb	r2, [r7, #3]
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	440b      	add	r3, r1
 8006c86:	334c      	adds	r3, #76	@ 0x4c
 8006c88:	2205      	movs	r2, #5
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	e2ac      	b.n	80071e8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006c8e:	78fa      	ldrb	r2, [r7, #3]
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	1a9b      	subs	r3, r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	334d      	adds	r3, #77	@ 0x4d
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b07      	cmp	r3, #7
 8006ca2:	d00b      	beq.n	8006cbc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006ca4:	78fa      	ldrb	r2, [r7, #3]
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	1a9b      	subs	r3, r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	334d      	adds	r3, #77	@ 0x4d
 8006cb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	f040 80a6 	bne.w	8006e08 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006cbc:	78fa      	ldrb	r2, [r7, #3]
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	1a9b      	subs	r3, r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	440b      	add	r3, r1
 8006cca:	334d      	adds	r3, #77	@ 0x4d
 8006ccc:	2202      	movs	r2, #2
 8006cce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006cd0:	78fa      	ldrb	r2, [r7, #3]
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	1a9b      	subs	r3, r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	440b      	add	r3, r1
 8006cde:	3344      	adds	r3, #68	@ 0x44
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4403      	add	r3, r0
 8006cf0:	3344      	adds	r3, #68	@ 0x44
 8006cf2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	1a9b      	subs	r3, r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	3344      	adds	r3, #68	@ 0x44
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d943      	bls.n	8006d92 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006d0a:	78fa      	ldrb	r2, [r7, #3]
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	3344      	adds	r3, #68	@ 0x44
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006d1e:	78fa      	ldrb	r2, [r7, #3]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	331a      	adds	r3, #26
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d123      	bne.n	8006d7c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006d34:	78fa      	ldrb	r2, [r7, #3]
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	1a9b      	subs	r3, r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	440b      	add	r3, r1
 8006d42:	331b      	adds	r3, #27
 8006d44:	2200      	movs	r2, #0
 8006d46:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006d48:	78fa      	ldrb	r2, [r7, #3]
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	331c      	adds	r3, #28
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d7a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006d7c:	78fa      	ldrb	r2, [r7, #3]
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	4613      	mov	r3, r2
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	440b      	add	r3, r1
 8006d8a:	334c      	adds	r3, #76	@ 0x4c
 8006d8c:	2204      	movs	r2, #4
 8006d8e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006d90:	e229      	b.n	80071e6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006d92:	78fa      	ldrb	r2, [r7, #3]
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	334c      	adds	r3, #76	@ 0x4c
 8006da2:	2202      	movs	r2, #2
 8006da4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006da6:	78fa      	ldrb	r2, [r7, #3]
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	1a9b      	subs	r3, r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	3326      	adds	r3, #38	@ 0x26
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00b      	beq.n	8006dd4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006dbc:	78fa      	ldrb	r2, [r7, #3]
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	3326      	adds	r3, #38	@ 0x26
 8006dcc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	f040 8209 	bne.w	80071e6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006dea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006df2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e00:	461a      	mov	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006e06:	e1ee      	b.n	80071e6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	334d      	adds	r3, #77	@ 0x4d
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	f040 80c8 	bne.w	8006fb0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	334d      	adds	r3, #77	@ 0x4d
 8006e30:	2202      	movs	r2, #2
 8006e32:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006e34:	78fa      	ldrb	r2, [r7, #3]
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	331b      	adds	r3, #27
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	f040 81ce 	bne.w	80071e8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	3326      	adds	r3, #38	@ 0x26
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d16b      	bne.n	8006f3a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8006e62:	78fa      	ldrb	r2, [r7, #3]
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	3348      	adds	r3, #72	@ 0x48
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	1c59      	adds	r1, r3, #1
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4403      	add	r3, r0
 8006e82:	3348      	adds	r3, #72	@ 0x48
 8006e84:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8006e86:	78fa      	ldrb	r2, [r7, #3]
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	3348      	adds	r3, #72	@ 0x48
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d943      	bls.n	8006f24 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006e9c:	78fa      	ldrb	r2, [r7, #3]
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	3348      	adds	r3, #72	@ 0x48
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8006eb0:	78fa      	ldrb	r2, [r7, #3]
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	331b      	adds	r3, #27
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	1a9b      	subs	r3, r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	3344      	adds	r3, #68	@ 0x44
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d809      	bhi.n	8006eee <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006eda:	78fa      	ldrb	r2, [r7, #3]
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	331c      	adds	r3, #28
 8006eea:	2201      	movs	r2, #1
 8006eec:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f0c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006f0e:	78fa      	ldrb	r2, [r7, #3]
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	4613      	mov	r3, r2
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	334c      	adds	r3, #76	@ 0x4c
 8006f1e:	2204      	movs	r2, #4
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	e014      	b.n	8006f4e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006f24:	78fa      	ldrb	r2, [r7, #3]
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	1a9b      	subs	r3, r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	334c      	adds	r3, #76	@ 0x4c
 8006f34:	2202      	movs	r2, #2
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	e009      	b.n	8006f4e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	1a9b      	subs	r3, r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	334c      	adds	r3, #76	@ 0x4c
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	1a9b      	subs	r3, r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3326      	adds	r3, #38	@ 0x26
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	011b      	lsls	r3, r3, #4
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	3326      	adds	r3, #38	@ 0x26
 8006f74:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	f040 8136 	bne.w	80071e8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f92:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f9a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fa8:	461a      	mov	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	e11b      	b.n	80071e8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006fb0:	78fa      	ldrb	r2, [r7, #3]
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	334d      	adds	r3, #77	@ 0x4d
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	f040 8081 	bne.w	80070ca <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006fc8:	78fa      	ldrb	r2, [r7, #3]
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	334d      	adds	r3, #77	@ 0x4d
 8006fd8:	2202      	movs	r2, #2
 8006fda:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006fdc:	78fa      	ldrb	r2, [r7, #3]
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	331b      	adds	r3, #27
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	f040 80fa 	bne.w	80071e8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ff4:	78fa      	ldrb	r2, [r7, #3]
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	1a9b      	subs	r3, r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	440b      	add	r3, r1
 8007002:	334c      	adds	r3, #76	@ 0x4c
 8007004:	2202      	movs	r2, #2
 8007006:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	4413      	add	r3, r2
 8007010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	440a      	add	r2, r1
 800701e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007026:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	4413      	add	r3, r2
 8007030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	440a      	add	r2, r1
 800703e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007046:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	4413      	add	r3, r2
 8007050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	78fa      	ldrb	r2, [r7, #3]
 8007058:	0151      	lsls	r1, r2, #5
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	440a      	add	r2, r1
 800705e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007062:	f023 0320 	bic.w	r3, r3, #32
 8007066:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007068:	78fa      	ldrb	r2, [r7, #3]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	3326      	adds	r3, #38	@ 0x26
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800707e:	78fa      	ldrb	r2, [r7, #3]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	3326      	adds	r3, #38	@ 0x26
 800708e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007090:	2b02      	cmp	r3, #2
 8007092:	f040 80a9 	bne.w	80071e8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	4413      	add	r3, r2
 800709e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070ac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070b4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80070b6:	78fb      	ldrb	r3, [r7, #3]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c2:	461a      	mov	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	e08e      	b.n	80071e8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	1a9b      	subs	r3, r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	334d      	adds	r3, #77	@ 0x4d
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d143      	bne.n	8007168 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80070e0:	78fa      	ldrb	r2, [r7, #3]
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	334d      	adds	r3, #77	@ 0x4d
 80070f0:	2202      	movs	r2, #2
 80070f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80070f4:	78fa      	ldrb	r2, [r7, #3]
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	4613      	mov	r3, r2
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	1a9b      	subs	r3, r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	334c      	adds	r3, #76	@ 0x4c
 8007104:	2202      	movs	r2, #2
 8007106:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	4613      	mov	r3, r2
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	1a9b      	subs	r3, r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	440b      	add	r3, r1
 8007116:	3326      	adds	r3, #38	@ 0x26
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	011b      	lsls	r3, r3, #4
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	3326      	adds	r3, #38	@ 0x26
 800712e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007130:	2b02      	cmp	r3, #2
 8007132:	d159      	bne.n	80071e8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	4413      	add	r3, r2
 800713c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800714a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007152:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	4413      	add	r3, r2
 800715c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007160:	461a      	mov	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	e03f      	b.n	80071e8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8007168:	78fa      	ldrb	r2, [r7, #3]
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	4613      	mov	r3, r2
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	334d      	adds	r3, #77	@ 0x4d
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b08      	cmp	r3, #8
 800717c:	d126      	bne.n	80071cc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800717e:	78fa      	ldrb	r2, [r7, #3]
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	4613      	mov	r3, r2
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	1a9b      	subs	r3, r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	440b      	add	r3, r1
 800718c:	334d      	adds	r3, #77	@ 0x4d
 800718e:	2202      	movs	r2, #2
 8007190:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007192:	78fa      	ldrb	r2, [r7, #3]
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	4613      	mov	r3, r2
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	3344      	adds	r3, #68	@ 0x44
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	1c59      	adds	r1, r3, #1
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4403      	add	r3, r0
 80071b2:	3344      	adds	r3, #68	@ 0x44
 80071b4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80071b6:	78fa      	ldrb	r2, [r7, #3]
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	4613      	mov	r3, r2
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	440b      	add	r3, r1
 80071c4:	334c      	adds	r3, #76	@ 0x4c
 80071c6:	2204      	movs	r2, #4
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	e00d      	b.n	80071e8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80071cc:	78fa      	ldrb	r2, [r7, #3]
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	4613      	mov	r3, r2
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	334d      	adds	r3, #77	@ 0x4d
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	f000 8100 	beq.w	80073e4 <HCD_HC_IN_IRQHandler+0xcca>
 80071e4:	e000      	b.n	80071e8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80071e6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	4613      	mov	r3, r2
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	1a9b      	subs	r3, r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	334c      	adds	r3, #76	@ 0x4c
 80071f8:	781a      	ldrb	r2, [r3, #0]
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f00b faae 	bl	8012760 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007204:	e0ef      	b.n	80073e6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f004 febd 	bl	800bf8e <USB_ReadChInterrupts>
 8007214:	4603      	mov	r3, r0
 8007216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800721a:	2b40      	cmp	r3, #64	@ 0x40
 800721c:	d12f      	bne.n	800727e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	4413      	add	r3, r2
 8007226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800722a:	461a      	mov	r2, r3
 800722c:	2340      	movs	r3, #64	@ 0x40
 800722e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8007230:	78fa      	ldrb	r2, [r7, #3]
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	4613      	mov	r3, r2
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	440b      	add	r3, r1
 800723e:	334d      	adds	r3, #77	@ 0x4d
 8007240:	2205      	movs	r2, #5
 8007242:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007244:	78fa      	ldrb	r2, [r7, #3]
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	4613      	mov	r3, r2
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	440b      	add	r3, r1
 8007252:	331a      	adds	r3, #26
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800725a:	78fa      	ldrb	r2, [r7, #3]
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	3344      	adds	r3, #68	@ 0x44
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	78fa      	ldrb	r2, [r7, #3]
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f005 fc2d 	bl	800cad6 <USB_HC_Halt>
 800727c:	e0b3      	b.n	80073e6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	78fa      	ldrb	r2, [r7, #3]
 8007284:	4611      	mov	r1, r2
 8007286:	4618      	mov	r0, r3
 8007288:	f004 fe81 	bl	800bf8e <USB_ReadChInterrupts>
 800728c:	4603      	mov	r3, r0
 800728e:	f003 0310 	and.w	r3, r3, #16
 8007292:	2b10      	cmp	r3, #16
 8007294:	f040 80a7 	bne.w	80073e6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007298:	78fa      	ldrb	r2, [r7, #3]
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	4613      	mov	r3, r2
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	3326      	adds	r3, #38	@ 0x26
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d11b      	bne.n	80072e6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3344      	adds	r3, #68	@ 0x44
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	334d      	adds	r3, #77	@ 0x4d
 80072d2:	2204      	movs	r2, #4
 80072d4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f005 fbf9 	bl	800cad6 <USB_HC_Halt>
 80072e4:	e03f      	b.n	8007366 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80072e6:	78fa      	ldrb	r2, [r7, #3]
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	3326      	adds	r3, #38	@ 0x26
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	3326      	adds	r3, #38	@ 0x26
 800730c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800730e:	2b02      	cmp	r3, #2
 8007310:	d129      	bne.n	8007366 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	3344      	adds	r3, #68	@ 0x44
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	799b      	ldrb	r3, [r3, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <HCD_HC_IN_IRQHandler+0xc2a>
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	331b      	adds	r3, #27
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d110      	bne.n	8007366 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	334d      	adds	r3, #77	@ 0x4d
 8007354:	2204      	movs	r2, #4
 8007356:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	4611      	mov	r1, r2
 8007360:	4618      	mov	r0, r3
 8007362:	f005 fbb8 	bl	800cad6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	331b      	adds	r3, #27
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d129      	bne.n	80073d0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800737c:	78fa      	ldrb	r2, [r7, #3]
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4613      	mov	r3, r2
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	331b      	adds	r3, #27
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	78fa      	ldrb	r2, [r7, #3]
 80073a0:	0151      	lsls	r1, r2, #5
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	440a      	add	r2, r1
 80073a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073ae:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	0151      	lsls	r1, r2, #5
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	440a      	add	r2, r1
 80073c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073ca:	f043 0320 	orr.w	r3, r3, #32
 80073ce:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80073d0:	78fb      	ldrb	r3, [r7, #3]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073dc:	461a      	mov	r2, r3
 80073de:	2310      	movs	r3, #16
 80073e0:	6093      	str	r3, [r2, #8]
 80073e2:	e000      	b.n	80073e6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80073e4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f004 fdbf 	bl	800bf8e <USB_ReadChInterrupts>
 8007410:	4603      	mov	r3, r0
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b04      	cmp	r3, #4
 8007418:	d11b      	bne.n	8007452 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4413      	add	r3, r2
 8007422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007426:	461a      	mov	r2, r3
 8007428:	2304      	movs	r3, #4
 800742a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	4613      	mov	r3, r2
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	334d      	adds	r3, #77	@ 0x4d
 800743c:	2207      	movs	r2, #7
 800743e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	4611      	mov	r1, r2
 8007448:	4618      	mov	r0, r3
 800744a:	f005 fb44 	bl	800cad6 <USB_HC_Halt>
 800744e:	f000 bc6f 	b.w	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	4611      	mov	r1, r2
 800745a:	4618      	mov	r0, r3
 800745c:	f004 fd97 	bl	800bf8e <USB_ReadChInterrupts>
 8007460:	4603      	mov	r3, r0
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b20      	cmp	r3, #32
 8007468:	f040 8082 	bne.w	8007570 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800746c:	78fb      	ldrb	r3, [r7, #3]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	4413      	add	r3, r2
 8007474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007478:	461a      	mov	r2, r3
 800747a:	2320      	movs	r3, #32
 800747c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800747e:	78fa      	ldrb	r2, [r7, #3]
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	4613      	mov	r3, r2
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	1a9b      	subs	r3, r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	440b      	add	r3, r1
 800748c:	3319      	adds	r3, #25
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d124      	bne.n	80074de <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8007494:	78fa      	ldrb	r2, [r7, #3]
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	4613      	mov	r3, r2
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	1a9b      	subs	r3, r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	3319      	adds	r3, #25
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	4613      	mov	r3, r2
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	334c      	adds	r3, #76	@ 0x4c
 80074b8:	2202      	movs	r2, #2
 80074ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80074bc:	78fa      	ldrb	r2, [r7, #3]
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	334d      	adds	r3, #77	@ 0x4d
 80074cc:	2203      	movs	r2, #3
 80074ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	4611      	mov	r1, r2
 80074d8:	4618      	mov	r0, r3
 80074da:	f005 fafc 	bl	800cad6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80074de:	78fa      	ldrb	r2, [r7, #3]
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	4613      	mov	r3, r2
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	440b      	add	r3, r1
 80074ec:	331a      	adds	r3, #26
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	f040 841d 	bne.w	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
 80074f6:	78fa      	ldrb	r2, [r7, #3]
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	1a9b      	subs	r3, r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	440b      	add	r3, r1
 8007504:	331b      	adds	r3, #27
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f040 8411 	bne.w	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	011b      	lsls	r3, r3, #4
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	3326      	adds	r3, #38	@ 0x26
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d009      	beq.n	8007538 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4613      	mov	r3, r2
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	1a9b      	subs	r3, r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	331b      	adds	r3, #27
 8007534:	2201      	movs	r2, #1
 8007536:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8007538:	78fa      	ldrb	r2, [r7, #3]
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	334d      	adds	r3, #77	@ 0x4d
 8007548:	2203      	movs	r2, #3
 800754a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	78fa      	ldrb	r2, [r7, #3]
 8007552:	4611      	mov	r1, r2
 8007554:	4618      	mov	r0, r3
 8007556:	f005 fabe 	bl	800cad6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	3344      	adds	r3, #68	@ 0x44
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	e3df      	b.n	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	78fa      	ldrb	r2, [r7, #3]
 8007576:	4611      	mov	r1, r2
 8007578:	4618      	mov	r0, r3
 800757a:	f004 fd08 	bl	800bf8e <USB_ReadChInterrupts>
 800757e:	4603      	mov	r3, r0
 8007580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007588:	d111      	bne.n	80075ae <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	4413      	add	r3, r2
 8007592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007596:	461a      	mov	r2, r3
 8007598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800759c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	78fa      	ldrb	r2, [r7, #3]
 80075a4:	4611      	mov	r1, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f005 fa95 	bl	800cad6 <USB_HC_Halt>
 80075ac:	e3c0      	b.n	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f004 fce9 	bl	800bf8e <USB_ReadChInterrupts>
 80075bc:	4603      	mov	r3, r0
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d168      	bne.n	8007698 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80075c6:	78fa      	ldrb	r2, [r7, #3]
 80075c8:	6879      	ldr	r1, [r7, #4]
 80075ca:	4613      	mov	r3, r2
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	1a9b      	subs	r3, r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	3344      	adds	r3, #68	@ 0x44
 80075d6:	2200      	movs	r2, #0
 80075d8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	78fa      	ldrb	r2, [r7, #3]
 80075e0:	4611      	mov	r1, r2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f004 fcd3 	bl	800bf8e <USB_ReadChInterrupts>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ee:	2b40      	cmp	r3, #64	@ 0x40
 80075f0:	d112      	bne.n	8007618 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80075f2:	78fa      	ldrb	r2, [r7, #3]
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	4613      	mov	r3, r2
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	3319      	adds	r3, #25
 8007602:	2201      	movs	r2, #1
 8007604:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007606:	78fb      	ldrb	r3, [r7, #3]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	4413      	add	r3, r2
 800760e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007612:	461a      	mov	r2, r3
 8007614:	2340      	movs	r3, #64	@ 0x40
 8007616:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	4613      	mov	r3, r2
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	1a9b      	subs	r3, r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	440b      	add	r3, r1
 8007626:	331b      	adds	r3, #27
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d019      	beq.n	8007662 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800762e:	78fa      	ldrb	r2, [r7, #3]
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4613      	mov	r3, r2
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	1a9b      	subs	r3, r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	331b      	adds	r3, #27
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	4413      	add	r3, r2
 800764a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	78fa      	ldrb	r2, [r7, #3]
 8007652:	0151      	lsls	r1, r2, #5
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	440a      	add	r2, r1
 8007658:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800765c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007660:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	4413      	add	r3, r2
 800766a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800766e:	461a      	mov	r2, r3
 8007670:	2301      	movs	r3, #1
 8007672:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007674:	78fa      	ldrb	r2, [r7, #3]
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	4613      	mov	r3, r2
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	1a9b      	subs	r3, r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	440b      	add	r3, r1
 8007682:	334d      	adds	r3, #77	@ 0x4d
 8007684:	2201      	movs	r2, #1
 8007686:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	78fa      	ldrb	r2, [r7, #3]
 800768e:	4611      	mov	r1, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f005 fa20 	bl	800cad6 <USB_HC_Halt>
 8007696:	e34b      	b.n	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	78fa      	ldrb	r2, [r7, #3]
 800769e:	4611      	mov	r1, r2
 80076a0:	4618      	mov	r0, r3
 80076a2:	f004 fc74 	bl	800bf8e <USB_ReadChInterrupts>
 80076a6:	4603      	mov	r3, r0
 80076a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ac:	2b40      	cmp	r3, #64	@ 0x40
 80076ae:	d139      	bne.n	8007724 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	4613      	mov	r3, r2
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	1a9b      	subs	r3, r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	334d      	adds	r3, #77	@ 0x4d
 80076c0:	2205      	movs	r2, #5
 80076c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	331a      	adds	r3, #26
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80076da:	78fa      	ldrb	r2, [r7, #3]
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	1a9b      	subs	r3, r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	3319      	adds	r3, #25
 80076ea:	2201      	movs	r2, #1
 80076ec:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80076ee:	78fa      	ldrb	r2, [r7, #3]
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	1a9b      	subs	r3, r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	440b      	add	r3, r1
 80076fc:	3344      	adds	r3, #68	@ 0x44
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	78fa      	ldrb	r2, [r7, #3]
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f005 f9e3 	bl	800cad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	4413      	add	r3, r2
 8007718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800771c:	461a      	mov	r2, r3
 800771e:	2340      	movs	r3, #64	@ 0x40
 8007720:	6093      	str	r3, [r2, #8]
 8007722:	e305      	b.n	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	78fa      	ldrb	r2, [r7, #3]
 800772a:	4611      	mov	r1, r2
 800772c:	4618      	mov	r0, r3
 800772e:	f004 fc2e 	bl	800bf8e <USB_ReadChInterrupts>
 8007732:	4603      	mov	r3, r0
 8007734:	f003 0308 	and.w	r3, r3, #8
 8007738:	2b08      	cmp	r3, #8
 800773a:	d11a      	bne.n	8007772 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4413      	add	r3, r2
 8007744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007748:	461a      	mov	r2, r3
 800774a:	2308      	movs	r3, #8
 800774c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	334d      	adds	r3, #77	@ 0x4d
 800775e:	2206      	movs	r2, #6
 8007760:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	78fa      	ldrb	r2, [r7, #3]
 8007768:	4611      	mov	r1, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f005 f9b3 	bl	800cad6 <USB_HC_Halt>
 8007770:	e2de      	b.n	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f004 fc07 	bl	800bf8e <USB_ReadChInterrupts>
 8007780:	4603      	mov	r3, r0
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	2b10      	cmp	r3, #16
 8007788:	d144      	bne.n	8007814 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	4613      	mov	r3, r2
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	1a9b      	subs	r3, r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	440b      	add	r3, r1
 8007798:	3344      	adds	r3, #68	@ 0x44
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	6879      	ldr	r1, [r7, #4]
 80077a2:	4613      	mov	r3, r2
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	1a9b      	subs	r3, r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	334d      	adds	r3, #77	@ 0x4d
 80077ae:	2204      	movs	r2, #4
 80077b0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	4613      	mov	r3, r2
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	1a9b      	subs	r3, r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	440b      	add	r3, r1
 80077c0:	3319      	adds	r3, #25
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d114      	bne.n	80077f2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80077c8:	78fa      	ldrb	r2, [r7, #3]
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	4613      	mov	r3, r2
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	1a9b      	subs	r3, r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	3318      	adds	r3, #24
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d109      	bne.n	80077f2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80077de:	78fa      	ldrb	r2, [r7, #3]
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	4613      	mov	r3, r2
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	440b      	add	r3, r1
 80077ec:	3319      	adds	r3, #25
 80077ee:	2201      	movs	r2, #1
 80077f0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f005 f96b 	bl	800cad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4413      	add	r3, r2
 8007808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800780c:	461a      	mov	r2, r3
 800780e:	2310      	movs	r3, #16
 8007810:	6093      	str	r3, [r2, #8]
 8007812:	e28d      	b.n	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	78fa      	ldrb	r2, [r7, #3]
 800781a:	4611      	mov	r1, r2
 800781c:	4618      	mov	r0, r3
 800781e:	f004 fbb6 	bl	800bf8e <USB_ReadChInterrupts>
 8007822:	4603      	mov	r3, r0
 8007824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007828:	2b80      	cmp	r3, #128	@ 0x80
 800782a:	d169      	bne.n	8007900 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	799b      	ldrb	r3, [r3, #6]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d111      	bne.n	8007858 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007834:	78fa      	ldrb	r2, [r7, #3]
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4613      	mov	r3, r2
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	334d      	adds	r3, #77	@ 0x4d
 8007844:	2207      	movs	r2, #7
 8007846:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	78fa      	ldrb	r2, [r7, #3]
 800784e:	4611      	mov	r1, r2
 8007850:	4618      	mov	r0, r3
 8007852:	f005 f940 	bl	800cad6 <USB_HC_Halt>
 8007856:	e049      	b.n	80078ec <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8007858:	78fa      	ldrb	r2, [r7, #3]
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4613      	mov	r3, r2
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	3344      	adds	r3, #68	@ 0x44
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	1c59      	adds	r1, r3, #1
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4613      	mov	r3, r2
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	1a9b      	subs	r3, r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4403      	add	r3, r0
 8007878:	3344      	adds	r3, #68	@ 0x44
 800787a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800787c:	78fa      	ldrb	r2, [r7, #3]
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	4613      	mov	r3, r2
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	440b      	add	r3, r1
 800788a:	3344      	adds	r3, #68	@ 0x44
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d922      	bls.n	80078d8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007892:	78fa      	ldrb	r2, [r7, #3]
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	1a9b      	subs	r3, r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	3344      	adds	r3, #68	@ 0x44
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80078a6:	78fa      	ldrb	r2, [r7, #3]
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	4613      	mov	r3, r2
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	440b      	add	r3, r1
 80078b4:	334c      	adds	r3, #76	@ 0x4c
 80078b6:	2204      	movs	r2, #4
 80078b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	4613      	mov	r3, r2
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	334c      	adds	r3, #76	@ 0x4c
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f00a ff45 	bl	8012760 <HAL_HCD_HC_NotifyURBChange_Callback>
 80078d6:	e009      	b.n	80078ec <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80078d8:	78fa      	ldrb	r2, [r7, #3]
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	4613      	mov	r3, r2
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	334c      	adds	r3, #76	@ 0x4c
 80078e8:	2202      	movs	r2, #2
 80078ea:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f8:	461a      	mov	r2, r3
 80078fa:	2380      	movs	r3, #128	@ 0x80
 80078fc:	6093      	str	r3, [r2, #8]
 80078fe:	e217      	b.n	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	78fa      	ldrb	r2, [r7, #3]
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f004 fb40 	bl	800bf8e <USB_ReadChInterrupts>
 800790e:	4603      	mov	r3, r0
 8007910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007918:	d11b      	bne.n	8007952 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4613      	mov	r3, r2
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	334d      	adds	r3, #77	@ 0x4d
 800792a:	2209      	movs	r2, #9
 800792c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	78fa      	ldrb	r2, [r7, #3]
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f005 f8cd 	bl	800cad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	4413      	add	r3, r2
 8007944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007948:	461a      	mov	r2, r3
 800794a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800794e:	6093      	str	r3, [r2, #8]
 8007950:	e1ee      	b.n	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	4611      	mov	r1, r2
 800795a:	4618      	mov	r0, r3
 800795c:	f004 fb17 	bl	800bf8e <USB_ReadChInterrupts>
 8007960:	4603      	mov	r3, r0
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b02      	cmp	r3, #2
 8007968:	f040 81df 	bne.w	8007d2a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	4413      	add	r3, r2
 8007974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007978:	461a      	mov	r2, r3
 800797a:	2302      	movs	r3, #2
 800797c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	4613      	mov	r3, r2
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	1a9b      	subs	r3, r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	440b      	add	r3, r1
 800798c:	334d      	adds	r3, #77	@ 0x4d
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	f040 8093 	bne.w	8007abc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007996:	78fa      	ldrb	r2, [r7, #3]
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	4613      	mov	r3, r2
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	440b      	add	r3, r1
 80079a4:	334d      	adds	r3, #77	@ 0x4d
 80079a6:	2202      	movs	r2, #2
 80079a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80079aa:	78fa      	ldrb	r2, [r7, #3]
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	1a9b      	subs	r3, r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	334c      	adds	r3, #76	@ 0x4c
 80079ba:	2201      	movs	r2, #1
 80079bc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	4613      	mov	r3, r2
 80079c4:	011b      	lsls	r3, r3, #4
 80079c6:	1a9b      	subs	r3, r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	440b      	add	r3, r1
 80079cc:	3326      	adds	r3, #38	@ 0x26
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d00b      	beq.n	80079ec <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80079d4:	78fa      	ldrb	r2, [r7, #3]
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	4613      	mov	r3, r2
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	1a9b      	subs	r3, r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	440b      	add	r3, r1
 80079e2:	3326      	adds	r3, #38	@ 0x26
 80079e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	f040 8190 	bne.w	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	799b      	ldrb	r3, [r3, #6]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d115      	bne.n	8007a20 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80079f4:	78fa      	ldrb	r2, [r7, #3]
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	4613      	mov	r3, r2
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	440b      	add	r3, r1
 8007a02:	333d      	adds	r3, #61	@ 0x3d
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	78fa      	ldrb	r2, [r7, #3]
 8007a08:	f083 0301 	eor.w	r3, r3, #1
 8007a0c:	b2d8      	uxtb	r0, r3
 8007a0e:	6879      	ldr	r1, [r7, #4]
 8007a10:	4613      	mov	r3, r2
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	1a9b      	subs	r3, r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	333d      	adds	r3, #61	@ 0x3d
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	799b      	ldrb	r3, [r3, #6]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	f040 8171 	bne.w	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
 8007a2a:	78fa      	ldrb	r2, [r7, #3]
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	1a9b      	subs	r3, r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	3334      	adds	r3, #52	@ 0x34
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 8165 	beq.w	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8007a42:	78fa      	ldrb	r2, [r7, #3]
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	011b      	lsls	r3, r3, #4
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	3334      	adds	r3, #52	@ 0x34
 8007a52:	6819      	ldr	r1, [r3, #0]
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	1a9b      	subs	r3, r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4403      	add	r3, r0
 8007a62:	3328      	adds	r3, #40	@ 0x28
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	440b      	add	r3, r1
 8007a68:	1e59      	subs	r1, r3, #1
 8007a6a:	78fa      	ldrb	r2, [r7, #3]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	1a9b      	subs	r3, r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4403      	add	r3, r0
 8007a78:	3328      	adds	r3, #40	@ 0x28
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a80:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 813f 	beq.w	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8007a8e:	78fa      	ldrb	r2, [r7, #3]
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	1a9b      	subs	r3, r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	333d      	adds	r3, #61	@ 0x3d
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	78fa      	ldrb	r2, [r7, #3]
 8007aa2:	f083 0301 	eor.w	r3, r3, #1
 8007aa6:	b2d8      	uxtb	r0, r3
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	1a9b      	subs	r3, r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	440b      	add	r3, r1
 8007ab4:	333d      	adds	r3, #61	@ 0x3d
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	e127      	b.n	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	1a9b      	subs	r3, r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	334d      	adds	r3, #77	@ 0x4d
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d120      	bne.n	8007b14 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	1a9b      	subs	r3, r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	334d      	adds	r3, #77	@ 0x4d
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	6879      	ldr	r1, [r7, #4]
 8007aea:	4613      	mov	r3, r2
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	440b      	add	r3, r1
 8007af4:	331b      	adds	r3, #27
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	f040 8107 	bne.w	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007afe:	78fa      	ldrb	r2, [r7, #3]
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	334c      	adds	r3, #76	@ 0x4c
 8007b0e:	2202      	movs	r2, #2
 8007b10:	701a      	strb	r2, [r3, #0]
 8007b12:	e0fb      	b.n	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007b14:	78fa      	ldrb	r2, [r7, #3]
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	440b      	add	r3, r1
 8007b22:	334d      	adds	r3, #77	@ 0x4d
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d13a      	bne.n	8007ba0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007b2a:	78fa      	ldrb	r2, [r7, #3]
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	1a9b      	subs	r3, r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	440b      	add	r3, r1
 8007b38:	334d      	adds	r3, #77	@ 0x4d
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	4613      	mov	r3, r2
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	1a9b      	subs	r3, r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	334c      	adds	r3, #76	@ 0x4c
 8007b4e:	2202      	movs	r2, #2
 8007b50:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007b52:	78fa      	ldrb	r2, [r7, #3]
 8007b54:	6879      	ldr	r1, [r7, #4]
 8007b56:	4613      	mov	r3, r2
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	1a9b      	subs	r3, r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	331b      	adds	r3, #27
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	f040 80d1 	bne.w	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8007b6a:	78fa      	ldrb	r2, [r7, #3]
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	1a9b      	subs	r3, r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	440b      	add	r3, r1
 8007b78:	331b      	adds	r3, #27
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b9c:	6053      	str	r3, [r2, #4]
 8007b9e:	e0b5      	b.n	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	011b      	lsls	r3, r3, #4
 8007ba8:	1a9b      	subs	r3, r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	440b      	add	r3, r1
 8007bae:	334d      	adds	r3, #77	@ 0x4d
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2b05      	cmp	r3, #5
 8007bb4:	d114      	bne.n	8007be0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	1a9b      	subs	r3, r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	334d      	adds	r3, #77	@ 0x4d
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8007bca:	78fa      	ldrb	r2, [r7, #3]
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	1a9b      	subs	r3, r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	334c      	adds	r3, #76	@ 0x4c
 8007bda:	2202      	movs	r2, #2
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	e095      	b.n	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	1a9b      	subs	r3, r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	334d      	adds	r3, #77	@ 0x4d
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b06      	cmp	r3, #6
 8007bf4:	d114      	bne.n	8007c20 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007bf6:	78fa      	ldrb	r2, [r7, #3]
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	334d      	adds	r3, #77	@ 0x4d
 8007c06:	2202      	movs	r2, #2
 8007c08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	334c      	adds	r3, #76	@ 0x4c
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	701a      	strb	r2, [r3, #0]
 8007c1e:	e075      	b.n	8007d0c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007c20:	78fa      	ldrb	r2, [r7, #3]
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4613      	mov	r3, r2
 8007c26:	011b      	lsls	r3, r3, #4
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	334d      	adds	r3, #77	@ 0x4d
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b07      	cmp	r3, #7
 8007c34:	d00a      	beq.n	8007c4c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	334d      	adds	r3, #77	@ 0x4d
 8007c46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007c48:	2b09      	cmp	r3, #9
 8007c4a:	d170      	bne.n	8007d2e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007c4c:	78fa      	ldrb	r2, [r7, #3]
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	334d      	adds	r3, #77	@ 0x4d
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007c60:	78fa      	ldrb	r2, [r7, #3]
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	4613      	mov	r3, r2
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	1a9b      	subs	r3, r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	3344      	adds	r3, #68	@ 0x44
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	1c59      	adds	r1, r3, #1
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4613      	mov	r3, r2
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4403      	add	r3, r0
 8007c80:	3344      	adds	r3, #68	@ 0x44
 8007c82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	3344      	adds	r3, #68	@ 0x44
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d914      	bls.n	8007cc4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	1a9b      	subs	r3, r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	3344      	adds	r3, #68	@ 0x44
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	6879      	ldr	r1, [r7, #4]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	011b      	lsls	r3, r3, #4
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	440b      	add	r3, r1
 8007cbc:	334c      	adds	r3, #76	@ 0x4c
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007cc2:	e022      	b.n	8007d0a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	334c      	adds	r3, #76	@ 0x4c
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007cd8:	78fb      	ldrb	r3, [r7, #3]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cf6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d04:	461a      	mov	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007d0a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007d0c:	78fa      	ldrb	r2, [r7, #3]
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	4613      	mov	r3, r2
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	1a9b      	subs	r3, r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	440b      	add	r3, r1
 8007d1a:	334c      	adds	r3, #76	@ 0x4c
 8007d1c:	781a      	ldrb	r2, [r3, #0]
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f00a fd1c 	bl	8012760 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007d28:	e002      	b.n	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007d2a:	bf00      	nop
 8007d2c:	e000      	b.n	8007d30 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8007d2e:	bf00      	nop
  }
}
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b08a      	sub	sp, #40	@ 0x28
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	0c5b      	lsrs	r3, r3, #17
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	091b      	lsrs	r3, r3, #4
 8007d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d6a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d004      	beq.n	8007d7c <HCD_RXQLVL_IRQHandler+0x46>
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b05      	cmp	r3, #5
 8007d76:	f000 80b6 	beq.w	8007ee6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007d7a:	e0b7      	b.n	8007eec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 80b3 	beq.w	8007eea <HCD_RXQLVL_IRQHandler+0x1b4>
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	1a9b      	subs	r3, r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	332c      	adds	r3, #44	@ 0x2c
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 80a7 	beq.w	8007eea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	4613      	mov	r3, r2
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	3338      	adds	r3, #56	@ 0x38
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	18d1      	adds	r1, r2, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	4613      	mov	r3, r2
 8007db8:	011b      	lsls	r3, r3, #4
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4403      	add	r3, r0
 8007dc0:	3334      	adds	r3, #52	@ 0x34
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4299      	cmp	r1, r3
 8007dc6:	f200 8083 	bhi.w	8007ed0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	1a9b      	subs	r3, r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	332c      	adds	r3, #44	@ 0x2c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	b292      	uxth	r2, r2
 8007de4:	4619      	mov	r1, r3
 8007de6:	f004 f867 	bl	800beb8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007dea:	6879      	ldr	r1, [r7, #4]
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	4613      	mov	r3, r2
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	1a9b      	subs	r3, r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	332c      	adds	r3, #44	@ 0x2c
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	18d1      	adds	r1, r2, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	4613      	mov	r3, r2
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4403      	add	r3, r0
 8007e0e:	332c      	adds	r3, #44	@ 0x2c
 8007e10:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	4613      	mov	r3, r2
 8007e18:	011b      	lsls	r3, r3, #4
 8007e1a:	1a9b      	subs	r3, r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	440b      	add	r3, r1
 8007e20:	3338      	adds	r3, #56	@ 0x38
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	18d1      	adds	r1, r2, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4403      	add	r3, r0
 8007e36:	3338      	adds	r3, #56	@ 0x38
 8007e38:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	0cdb      	lsrs	r3, r3, #19
 8007e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e4e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	4613      	mov	r3, r2
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	1a9b      	subs	r3, r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	440b      	add	r3, r1
 8007e5e:	3328      	adds	r3, #40	@ 0x28
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d13f      	bne.n	8007eea <HCD_RXQLVL_IRQHandler+0x1b4>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d03c      	beq.n	8007eea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e86:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e8e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	333c      	adds	r3, #60	@ 0x3c
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f083 0301 	eor.w	r3, r3, #1
 8007eb8:	b2d8      	uxtb	r0, r3
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	011b      	lsls	r3, r3, #4
 8007ec2:	1a9b      	subs	r3, r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	333c      	adds	r3, #60	@ 0x3c
 8007eca:	4602      	mov	r2, r0
 8007ecc:	701a      	strb	r2, [r3, #0]
      break;
 8007ece:	e00c      	b.n	8007eea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	1a9b      	subs	r3, r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	440b      	add	r3, r1
 8007ede:	334c      	adds	r3, #76	@ 0x4c
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	701a      	strb	r2, [r3, #0]
      break;
 8007ee4:	e001      	b.n	8007eea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007ee6:	bf00      	nop
 8007ee8:	e000      	b.n	8007eec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007eea:	bf00      	nop
  }
}
 8007eec:	bf00      	nop
 8007eee:	3728      	adds	r7, #40	@ 0x28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007f20:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d10b      	bne.n	8007f44 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d102      	bne.n	8007f3c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f00a fbf6 	bl	8012728 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f043 0302 	orr.w	r3, r3, #2
 8007f42:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f003 0308 	and.w	r3, r3, #8
 8007f4a:	2b08      	cmp	r3, #8
 8007f4c:	d132      	bne.n	8007fb4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f043 0308 	orr.w	r3, r3, #8
 8007f54:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	d126      	bne.n	8007fae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7a5b      	ldrb	r3, [r3, #9]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d113      	bne.n	8007f90 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8007f6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f72:	d106      	bne.n	8007f82 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2102      	movs	r1, #2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f004 f92c 	bl	800c1d8 <USB_InitFSLSPClkSel>
 8007f80:	e011      	b.n	8007fa6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2101      	movs	r1, #1
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f004 f925 	bl	800c1d8 <USB_InitFSLSPClkSel>
 8007f8e:	e00a      	b.n	8007fa6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	79db      	ldrb	r3, [r3, #7]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d106      	bne.n	8007fa6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007fa4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f00a fbe8 	bl	801277c <HAL_HCD_PortEnabled_Callback>
 8007fac:	e002      	b.n	8007fb4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f00a fbf2 	bl	8012798 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d103      	bne.n	8007fc6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f043 0320 	orr.w	r3, r3, #32
 8007fc4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007fcc:	461a      	mov	r2, r3
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	6013      	str	r3, [r2, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e12b      	b.n	8008246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fb f9e0 	bl	80033c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2224      	movs	r2, #36	@ 0x24
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0201 	bic.w	r2, r2, #1
 800801e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800802e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800803e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008040:	f001 fc60 	bl	8009904 <HAL_RCC_GetPCLK1Freq>
 8008044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	4a81      	ldr	r2, [pc, #516]	@ (8008250 <HAL_I2C_Init+0x274>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d807      	bhi.n	8008060 <HAL_I2C_Init+0x84>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a80      	ldr	r2, [pc, #512]	@ (8008254 <HAL_I2C_Init+0x278>)
 8008054:	4293      	cmp	r3, r2
 8008056:	bf94      	ite	ls
 8008058:	2301      	movls	r3, #1
 800805a:	2300      	movhi	r3, #0
 800805c:	b2db      	uxtb	r3, r3
 800805e:	e006      	b.n	800806e <HAL_I2C_Init+0x92>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a7d      	ldr	r2, [pc, #500]	@ (8008258 <HAL_I2C_Init+0x27c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	bf94      	ite	ls
 8008068:	2301      	movls	r3, #1
 800806a:	2300      	movhi	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e0e7      	b.n	8008246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4a78      	ldr	r2, [pc, #480]	@ (800825c <HAL_I2C_Init+0x280>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	0c9b      	lsrs	r3, r3, #18
 8008080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	430a      	orrs	r2, r1
 8008094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	4a6a      	ldr	r2, [pc, #424]	@ (8008250 <HAL_I2C_Init+0x274>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d802      	bhi.n	80080b0 <HAL_I2C_Init+0xd4>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	3301      	adds	r3, #1
 80080ae:	e009      	b.n	80080c4 <HAL_I2C_Init+0xe8>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80080b6:	fb02 f303 	mul.w	r3, r2, r3
 80080ba:	4a69      	ldr	r2, [pc, #420]	@ (8008260 <HAL_I2C_Init+0x284>)
 80080bc:	fba2 2303 	umull	r2, r3, r2, r3
 80080c0:	099b      	lsrs	r3, r3, #6
 80080c2:	3301      	adds	r3, #1
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	6812      	ldr	r2, [r2, #0]
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80080d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	495c      	ldr	r1, [pc, #368]	@ (8008250 <HAL_I2C_Init+0x274>)
 80080e0:	428b      	cmp	r3, r1
 80080e2:	d819      	bhi.n	8008118 <HAL_I2C_Init+0x13c>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	1e59      	subs	r1, r3, #1
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80080f2:	1c59      	adds	r1, r3, #1
 80080f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80080f8:	400b      	ands	r3, r1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <HAL_I2C_Init+0x138>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	1e59      	subs	r1, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	fbb1 f3f3 	udiv	r3, r1, r3
 800810c:	3301      	adds	r3, #1
 800810e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008112:	e051      	b.n	80081b8 <HAL_I2C_Init+0x1dc>
 8008114:	2304      	movs	r3, #4
 8008116:	e04f      	b.n	80081b8 <HAL_I2C_Init+0x1dc>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d111      	bne.n	8008144 <HAL_I2C_Init+0x168>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	1e58      	subs	r0, r3, #1
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6859      	ldr	r1, [r3, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	440b      	add	r3, r1
 800812e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008132:	3301      	adds	r3, #1
 8008134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008138:	2b00      	cmp	r3, #0
 800813a:	bf0c      	ite	eq
 800813c:	2301      	moveq	r3, #1
 800813e:	2300      	movne	r3, #0
 8008140:	b2db      	uxtb	r3, r3
 8008142:	e012      	b.n	800816a <HAL_I2C_Init+0x18e>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	1e58      	subs	r0, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6859      	ldr	r1, [r3, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	0099      	lsls	r1, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	fbb0 f3f3 	udiv	r3, r0, r3
 800815a:	3301      	adds	r3, #1
 800815c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008160:	2b00      	cmp	r3, #0
 8008162:	bf0c      	ite	eq
 8008164:	2301      	moveq	r3, #1
 8008166:	2300      	movne	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <HAL_I2C_Init+0x196>
 800816e:	2301      	movs	r3, #1
 8008170:	e022      	b.n	80081b8 <HAL_I2C_Init+0x1dc>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10e      	bne.n	8008198 <HAL_I2C_Init+0x1bc>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	1e58      	subs	r0, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6859      	ldr	r1, [r3, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	440b      	add	r3, r1
 8008188:	fbb0 f3f3 	udiv	r3, r0, r3
 800818c:	3301      	adds	r3, #1
 800818e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008196:	e00f      	b.n	80081b8 <HAL_I2C_Init+0x1dc>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	1e58      	subs	r0, r3, #1
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6859      	ldr	r1, [r3, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	440b      	add	r3, r1
 80081a6:	0099      	lsls	r1, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80081ae:	3301      	adds	r3, #1
 80081b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	6809      	ldr	r1, [r1, #0]
 80081bc:	4313      	orrs	r3, r2
 80081be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	69da      	ldr	r2, [r3, #28]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80081e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6911      	ldr	r1, [r2, #16]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	68d2      	ldr	r2, [r2, #12]
 80081f2:	4311      	orrs	r1, r2
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6812      	ldr	r2, [r2, #0]
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	695a      	ldr	r2, [r3, #20]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2220      	movs	r2, #32
 8008232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	000186a0 	.word	0x000186a0
 8008254:	001e847f 	.word	0x001e847f
 8008258:	003d08ff 	.word	0x003d08ff
 800825c:	431bde83 	.word	0x431bde83
 8008260:	10624dd3 	.word	0x10624dd3

08008264 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af02      	add	r7, sp, #8
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	607a      	str	r2, [r7, #4]
 800826e:	461a      	mov	r2, r3
 8008270:	460b      	mov	r3, r1
 8008272:	817b      	strh	r3, [r7, #10]
 8008274:	4613      	mov	r3, r2
 8008276:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008278:	f7fb fe94 	bl	8003fa4 <HAL_GetTick>
 800827c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b20      	cmp	r3, #32
 8008288:	f040 80e0 	bne.w	800844c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	2319      	movs	r3, #25
 8008292:	2201      	movs	r2, #1
 8008294:	4970      	ldr	r1, [pc, #448]	@ (8008458 <HAL_I2C_Master_Transmit+0x1f4>)
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fc64 	bl	8008b64 <I2C_WaitOnFlagUntilTimeout>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80082a2:	2302      	movs	r3, #2
 80082a4:	e0d3      	b.n	800844e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_I2C_Master_Transmit+0x50>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e0cc      	b.n	800844e <HAL_I2C_Master_Transmit+0x1ea>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d007      	beq.n	80082da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0201 	orr.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2221      	movs	r2, #33	@ 0x21
 80082ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2210      	movs	r2, #16
 80082f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	893a      	ldrh	r2, [r7, #8]
 800830a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4a50      	ldr	r2, [pc, #320]	@ (800845c <HAL_I2C_Master_Transmit+0x1f8>)
 800831a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800831c:	8979      	ldrh	r1, [r7, #10]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	6a3a      	ldr	r2, [r7, #32]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 face 	bl	80088c4 <I2C_MasterRequestWrite>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e08d      	b.n	800844e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008332:	2300      	movs	r3, #0
 8008334:	613b      	str	r3, [r7, #16]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008348:	e066      	b.n	8008418 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	6a39      	ldr	r1, [r7, #32]
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fd22 	bl	8008d98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00d      	beq.n	8008376 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835e:	2b04      	cmp	r3, #4
 8008360:	d107      	bne.n	8008372 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e06b      	b.n	800844e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837a:	781a      	ldrb	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800839e:	3b01      	subs	r3, #1
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	f003 0304 	and.w	r3, r3, #4
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d11b      	bne.n	80083ec <HAL_I2C_Master_Transmit+0x188>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d017      	beq.n	80083ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	6a39      	ldr	r1, [r7, #32]
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fd19 	bl	8008e28 <I2C_WaitOnBTFFlagUntilTimeout>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00d      	beq.n	8008418 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008400:	2b04      	cmp	r3, #4
 8008402:	d107      	bne.n	8008414 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008412:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e01a      	b.n	800844e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800841c:	2b00      	cmp	r3, #0
 800841e:	d194      	bne.n	800834a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800842e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	e000      	b.n	800844e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800844c:	2302      	movs	r3, #2
  }
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	00100002 	.word	0x00100002
 800845c:	ffff0000 	.word	0xffff0000

08008460 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08c      	sub	sp, #48	@ 0x30
 8008464:	af02      	add	r7, sp, #8
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	607a      	str	r2, [r7, #4]
 800846a:	461a      	mov	r2, r3
 800846c:	460b      	mov	r3, r1
 800846e:	817b      	strh	r3, [r7, #10]
 8008470:	4613      	mov	r3, r2
 8008472:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008474:	f7fb fd96 	bl	8003fa4 <HAL_GetTick>
 8008478:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b20      	cmp	r3, #32
 8008484:	f040 8217 	bne.w	80088b6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	2319      	movs	r3, #25
 800848e:	2201      	movs	r2, #1
 8008490:	497c      	ldr	r1, [pc, #496]	@ (8008684 <HAL_I2C_Master_Receive+0x224>)
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fb66 	bl	8008b64 <I2C_WaitOnFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800849e:	2302      	movs	r3, #2
 80084a0:	e20a      	b.n	80088b8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_I2C_Master_Receive+0x50>
 80084ac:	2302      	movs	r3, #2
 80084ae:	e203      	b.n	80088b8 <HAL_I2C_Master_Receive+0x458>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d007      	beq.n	80084d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0201 	orr.w	r2, r2, #1
 80084d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2222      	movs	r2, #34	@ 0x22
 80084ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2210      	movs	r2, #16
 80084f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	893a      	ldrh	r2, [r7, #8]
 8008506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4a5c      	ldr	r2, [pc, #368]	@ (8008688 <HAL_I2C_Master_Receive+0x228>)
 8008516:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008518:	8979      	ldrh	r1, [r7, #10]
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 fa52 	bl	80089c8 <I2C_MasterRequestRead>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e1c4      	b.n	80088b8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008532:	2b00      	cmp	r3, #0
 8008534:	d113      	bne.n	800855e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008536:	2300      	movs	r3, #0
 8008538:	623b      	str	r3, [r7, #32]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	623b      	str	r3, [r7, #32]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	623b      	str	r3, [r7, #32]
 800854a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	e198      	b.n	8008890 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008562:	2b01      	cmp	r3, #1
 8008564:	d11b      	bne.n	800859e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008576:	2300      	movs	r3, #0
 8008578:	61fb      	str	r3, [r7, #28]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	61fb      	str	r3, [r7, #28]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	61fb      	str	r3, [r7, #28]
 800858a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	e178      	b.n	8008890 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d11b      	bne.n	80085de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085c6:	2300      	movs	r3, #0
 80085c8:	61bb      	str	r3, [r7, #24]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	61bb      	str	r3, [r7, #24]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	61bb      	str	r3, [r7, #24]
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	e158      	b.n	8008890 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80085ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ee:	2300      	movs	r3, #0
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008604:	e144      	b.n	8008890 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800860a:	2b03      	cmp	r3, #3
 800860c:	f200 80f1 	bhi.w	80087f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008614:	2b01      	cmp	r3, #1
 8008616:	d123      	bne.n	8008660 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800861a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 fc4b 	bl	8008eb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e145      	b.n	80088b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	691a      	ldr	r2, [r3, #16]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008648:	3b01      	subs	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008654:	b29b      	uxth	r3, r3
 8008656:	3b01      	subs	r3, #1
 8008658:	b29a      	uxth	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800865e:	e117      	b.n	8008890 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008664:	2b02      	cmp	r3, #2
 8008666:	d14e      	bne.n	8008706 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866e:	2200      	movs	r2, #0
 8008670:	4906      	ldr	r1, [pc, #24]	@ (800868c <HAL_I2C_Master_Receive+0x22c>)
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fa76 	bl	8008b64 <I2C_WaitOnFlagUntilTimeout>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d008      	beq.n	8008690 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e11a      	b.n	80088b8 <HAL_I2C_Master_Receive+0x458>
 8008682:	bf00      	nop
 8008684:	00100002 	.word	0x00100002
 8008688:	ffff0000 	.word	0xffff0000
 800868c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800869e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	691a      	ldr	r2, [r3, #16]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086bc:	3b01      	subs	r3, #1
 80086be:	b29a      	uxth	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	3b01      	subs	r3, #1
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	691a      	ldr	r2, [r3, #16]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086dc:	b2d2      	uxtb	r2, r2
 80086de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008704:	e0c4      	b.n	8008890 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	2200      	movs	r2, #0
 800870e:	496c      	ldr	r1, [pc, #432]	@ (80088c0 <HAL_I2C_Master_Receive+0x460>)
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 fa27 	bl	8008b64 <I2C_WaitOnFlagUntilTimeout>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e0cb      	b.n	80088b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800872e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691a      	ldr	r2, [r3, #16]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800874c:	3b01      	subs	r3, #1
 800874e:	b29a      	uxth	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008758:	b29b      	uxth	r3, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	b29a      	uxth	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	2200      	movs	r2, #0
 800876a:	4955      	ldr	r1, [pc, #340]	@ (80088c0 <HAL_I2C_Master_Receive+0x460>)
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f9f9 	bl	8008b64 <I2C_WaitOnFlagUntilTimeout>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e09d      	b.n	80088b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800878a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691a      	ldr	r2, [r3, #16]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087a8:	3b01      	subs	r3, #1
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	691a      	ldr	r2, [r3, #16]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c8:	b2d2      	uxtb	r2, r2
 80087ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087da:	3b01      	subs	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80087f0:	e04e      	b.n	8008890 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 fb5e 	bl	8008eb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e058      	b.n	80088b8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008822:	3b01      	subs	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800882e:	b29b      	uxth	r3, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	f003 0304 	and.w	r3, r3, #4
 8008842:	2b04      	cmp	r3, #4
 8008844:	d124      	bne.n	8008890 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800884a:	2b03      	cmp	r3, #3
 800884c:	d107      	bne.n	800885e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800885c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800887a:	3b01      	subs	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008886:	b29b      	uxth	r3, r3
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008894:	2b00      	cmp	r3, #0
 8008896:	f47f aeb6 	bne.w	8008606 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2220      	movs	r2, #32
 800889e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	e000      	b.n	80088b8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80088b6:	2302      	movs	r3, #2
  }
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3728      	adds	r7, #40	@ 0x28
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	00010004 	.word	0x00010004

080088c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	607a      	str	r2, [r7, #4]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	460b      	mov	r3, r1
 80088d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d006      	beq.n	80088ee <I2C_MasterRequestWrite+0x2a>
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d003      	beq.n	80088ee <I2C_MasterRequestWrite+0x2a>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80088ec:	d108      	bne.n	8008900 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	e00b      	b.n	8008918 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008904:	2b12      	cmp	r3, #18
 8008906:	d107      	bne.n	8008918 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008916:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f91d 	bl	8008b64 <I2C_WaitOnFlagUntilTimeout>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00d      	beq.n	800894c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800893a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893e:	d103      	bne.n	8008948 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008946:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e035      	b.n	80089b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008954:	d108      	bne.n	8008968 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008956:	897b      	ldrh	r3, [r7, #10]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	461a      	mov	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008964:	611a      	str	r2, [r3, #16]
 8008966:	e01b      	b.n	80089a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008968:	897b      	ldrh	r3, [r7, #10]
 800896a:	11db      	asrs	r3, r3, #7
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 0306 	and.w	r3, r3, #6
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f063 030f 	orn	r3, r3, #15
 8008978:	b2da      	uxtb	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	490e      	ldr	r1, [pc, #56]	@ (80089c0 <I2C_MasterRequestWrite+0xfc>)
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 f966 	bl	8008c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e010      	b.n	80089b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008996:	897b      	ldrh	r3, [r7, #10]
 8008998:	b2da      	uxtb	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	4907      	ldr	r1, [pc, #28]	@ (80089c4 <I2C_MasterRequestWrite+0x100>)
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 f956 	bl	8008c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	00010008 	.word	0x00010008
 80089c4:	00010002 	.word	0x00010002

080089c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b088      	sub	sp, #32
 80089cc:	af02      	add	r7, sp, #8
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	607a      	str	r2, [r7, #4]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	460b      	mov	r3, r1
 80089d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80089ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d006      	beq.n	8008a02 <I2C_MasterRequestRead+0x3a>
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d003      	beq.n	8008a02 <I2C_MasterRequestRead+0x3a>
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a00:	d108      	bne.n	8008a14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e00b      	b.n	8008a2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a18:	2b11      	cmp	r3, #17
 8008a1a:	d107      	bne.n	8008a2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 f893 	bl	8008b64 <I2C_WaitOnFlagUntilTimeout>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00d      	beq.n	8008a60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a52:	d103      	bne.n	8008a5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e079      	b.n	8008b54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a68:	d108      	bne.n	8008a7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008a6a:	897b      	ldrh	r3, [r7, #10]
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f043 0301 	orr.w	r3, r3, #1
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	611a      	str	r2, [r3, #16]
 8008a7a:	e05f      	b.n	8008b3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008a7c:	897b      	ldrh	r3, [r7, #10]
 8008a7e:	11db      	asrs	r3, r3, #7
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f003 0306 	and.w	r3, r3, #6
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f063 030f 	orn	r3, r3, #15
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	4930      	ldr	r1, [pc, #192]	@ (8008b5c <I2C_MasterRequestRead+0x194>)
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 f8dc 	bl	8008c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e054      	b.n	8008b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008aaa:	897b      	ldrh	r3, [r7, #10]
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	4929      	ldr	r1, [pc, #164]	@ (8008b60 <I2C_MasterRequestRead+0x198>)
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f000 f8cc 	bl	8008c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e044      	b.n	8008b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aca:	2300      	movs	r3, #0
 8008acc:	613b      	str	r3, [r7, #16]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	613b      	str	r3, [r7, #16]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	613b      	str	r3, [r7, #16]
 8008ade:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008aee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f831 	bl	8008b64 <I2C_WaitOnFlagUntilTimeout>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00d      	beq.n	8008b24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b16:	d103      	bne.n	8008b20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b1e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e017      	b.n	8008b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008b24:	897b      	ldrh	r3, [r7, #10]
 8008b26:	11db      	asrs	r3, r3, #7
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 0306 	and.w	r3, r3, #6
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f063 030e 	orn	r3, r3, #14
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	4907      	ldr	r1, [pc, #28]	@ (8008b60 <I2C_MasterRequestRead+0x198>)
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 f888 	bl	8008c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	00010008 	.word	0x00010008
 8008b60:	00010002 	.word	0x00010002

08008b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	4613      	mov	r3, r2
 8008b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b74:	e048      	b.n	8008c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7c:	d044      	beq.n	8008c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b7e:	f7fb fa11 	bl	8003fa4 <HAL_GetTick>
 8008b82:	4602      	mov	r2, r0
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d302      	bcc.n	8008b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d139      	bne.n	8008c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	0c1b      	lsrs	r3, r3, #16
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d10d      	bne.n	8008bba <I2C_WaitOnFlagUntilTimeout+0x56>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	43da      	mvns	r2, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bf0c      	ite	eq
 8008bb0:	2301      	moveq	r3, #1
 8008bb2:	2300      	movne	r3, #0
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	e00c      	b.n	8008bd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	43da      	mvns	r2, r3
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	bf0c      	ite	eq
 8008bcc:	2301      	moveq	r3, #1
 8008bce:	2300      	movne	r3, #0
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d116      	bne.n	8008c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf4:	f043 0220 	orr.w	r2, r3, #32
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e023      	b.n	8008c50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	0c1b      	lsrs	r3, r3, #16
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d10d      	bne.n	8008c2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	43da      	mvns	r2, r3
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bf0c      	ite	eq
 8008c24:	2301      	moveq	r3, #1
 8008c26:	2300      	movne	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	e00c      	b.n	8008c48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	43da      	mvns	r2, r3
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bf0c      	ite	eq
 8008c40:	2301      	moveq	r3, #1
 8008c42:	2300      	movne	r3, #0
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	461a      	mov	r2, r3
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d093      	beq.n	8008b76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c66:	e071      	b.n	8008d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c76:	d123      	bne.n	8008cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008c90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cac:	f043 0204 	orr.w	r2, r3, #4
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e067      	b.n	8008d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc6:	d041      	beq.n	8008d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc8:	f7fb f96c 	bl	8003fa4 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d302      	bcc.n	8008cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d136      	bne.n	8008d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	0c1b      	lsrs	r3, r3, #16
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d10c      	bne.n	8008d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	43da      	mvns	r2, r3
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bf14      	ite	ne
 8008cfa:	2301      	movne	r3, #1
 8008cfc:	2300      	moveq	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	e00b      	b.n	8008d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	43da      	mvns	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bf14      	ite	ne
 8008d14:	2301      	movne	r3, #1
 8008d16:	2300      	moveq	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d016      	beq.n	8008d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d38:	f043 0220 	orr.w	r2, r3, #32
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e021      	b.n	8008d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	0c1b      	lsrs	r3, r3, #16
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d10c      	bne.n	8008d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	43da      	mvns	r2, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	4013      	ands	r3, r2
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bf14      	ite	ne
 8008d68:	2301      	movne	r3, #1
 8008d6a:	2300      	moveq	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	e00b      	b.n	8008d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	43da      	mvns	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf14      	ite	ne
 8008d82:	2301      	movne	r3, #1
 8008d84:	2300      	moveq	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f47f af6d 	bne.w	8008c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008da4:	e034      	b.n	8008e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f000 f8e3 	bl	8008f72 <I2C_IsAcknowledgeFailed>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e034      	b.n	8008e20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbc:	d028      	beq.n	8008e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dbe:	f7fb f8f1 	bl	8003fa4 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d302      	bcc.n	8008dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d11d      	bne.n	8008e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dde:	2b80      	cmp	r3, #128	@ 0x80
 8008de0:	d016      	beq.n	8008e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfc:	f043 0220 	orr.w	r2, r3, #32
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e007      	b.n	8008e20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e1a:	2b80      	cmp	r3, #128	@ 0x80
 8008e1c:	d1c3      	bne.n	8008da6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e34:	e034      	b.n	8008ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 f89b 	bl	8008f72 <I2C_IsAcknowledgeFailed>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e034      	b.n	8008eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d028      	beq.n	8008ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e4e:	f7fb f8a9 	bl	8003fa4 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d302      	bcc.n	8008e64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d11d      	bne.n	8008ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d016      	beq.n	8008ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e8c:	f043 0220 	orr.w	r2, r3, #32
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e007      	b.n	8008eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	f003 0304 	and.w	r3, r3, #4
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d1c3      	bne.n	8008e36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ec4:	e049      	b.n	8008f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	f003 0310 	and.w	r3, r3, #16
 8008ed0:	2b10      	cmp	r3, #16
 8008ed2:	d119      	bne.n	8008f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f06f 0210 	mvn.w	r2, #16
 8008edc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e030      	b.n	8008f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f08:	f7fb f84c 	bl	8003fa4 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d302      	bcc.n	8008f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d11d      	bne.n	8008f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f28:	2b40      	cmp	r3, #64	@ 0x40
 8008f2a:	d016      	beq.n	8008f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2220      	movs	r2, #32
 8008f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f46:	f043 0220 	orr.w	r2, r3, #32
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e007      	b.n	8008f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f64:	2b40      	cmp	r3, #64	@ 0x40
 8008f66:	d1ae      	bne.n	8008ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f88:	d11b      	bne.n	8008fc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008f92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fae:	f043 0204 	orr.w	r2, r3, #4
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e000      	b.n	8008fc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8008fd8:	4b05      	ldr	r3, [pc, #20]	@ (8008ff0 <HAL_PWR_EnableWakeUpPin+0x20>)
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	4904      	ldr	r1, [pc, #16]	@ (8008ff0 <HAL_PWR_EnableWakeUpPin+0x20>)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	604b      	str	r3, [r1, #4]
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	40007000 	.word	0x40007000

08008ff4 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8008ff8:	4b08      	ldr	r3, [pc, #32]	@ (800901c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a07      	ldr	r2, [pc, #28]	@ (800901c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8008ffe:	f043 0302 	orr.w	r3, r3, #2
 8009002:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009004:	4b06      	ldr	r3, [pc, #24]	@ (8009020 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	4a05      	ldr	r2, [pc, #20]	@ (8009020 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800900a:	f043 0304 	orr.w	r3, r3, #4
 800900e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009010:	bf30      	wfi
}
 8009012:	bf00      	nop
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	40007000 	.word	0x40007000
 8009020:	e000ed00 	.word	0xe000ed00

08009024 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e267      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d075      	beq.n	800912e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009042:	4b88      	ldr	r3, [pc, #544]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f003 030c 	and.w	r3, r3, #12
 800904a:	2b04      	cmp	r3, #4
 800904c:	d00c      	beq.n	8009068 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800904e:	4b85      	ldr	r3, [pc, #532]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009056:	2b08      	cmp	r3, #8
 8009058:	d112      	bne.n	8009080 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800905a:	4b82      	ldr	r3, [pc, #520]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009062:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009066:	d10b      	bne.n	8009080 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009068:	4b7e      	ldr	r3, [pc, #504]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d05b      	beq.n	800912c <HAL_RCC_OscConfig+0x108>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d157      	bne.n	800912c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e242      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009088:	d106      	bne.n	8009098 <HAL_RCC_OscConfig+0x74>
 800908a:	4b76      	ldr	r3, [pc, #472]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a75      	ldr	r2, [pc, #468]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 8009090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	e01d      	b.n	80090d4 <HAL_RCC_OscConfig+0xb0>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090a0:	d10c      	bne.n	80090bc <HAL_RCC_OscConfig+0x98>
 80090a2:	4b70      	ldr	r3, [pc, #448]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a6f      	ldr	r2, [pc, #444]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80090a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090ac:	6013      	str	r3, [r2, #0]
 80090ae:	4b6d      	ldr	r3, [pc, #436]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a6c      	ldr	r2, [pc, #432]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80090b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	e00b      	b.n	80090d4 <HAL_RCC_OscConfig+0xb0>
 80090bc:	4b69      	ldr	r3, [pc, #420]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a68      	ldr	r2, [pc, #416]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80090c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	4b66      	ldr	r3, [pc, #408]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a65      	ldr	r2, [pc, #404]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80090ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d013      	beq.n	8009104 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090dc:	f7fa ff62 	bl	8003fa4 <HAL_GetTick>
 80090e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090e2:	e008      	b.n	80090f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090e4:	f7fa ff5e 	bl	8003fa4 <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b64      	cmp	r3, #100	@ 0x64
 80090f0:	d901      	bls.n	80090f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e207      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090f6:	4b5b      	ldr	r3, [pc, #364]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0f0      	beq.n	80090e4 <HAL_RCC_OscConfig+0xc0>
 8009102:	e014      	b.n	800912e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009104:	f7fa ff4e 	bl	8003fa4 <HAL_GetTick>
 8009108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800910a:	e008      	b.n	800911e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800910c:	f7fa ff4a 	bl	8003fa4 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b64      	cmp	r3, #100	@ 0x64
 8009118:	d901      	bls.n	800911e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e1f3      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800911e:	4b51      	ldr	r3, [pc, #324]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1f0      	bne.n	800910c <HAL_RCC_OscConfig+0xe8>
 800912a:	e000      	b.n	800912e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800912c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d063      	beq.n	8009202 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800913a:	4b4a      	ldr	r3, [pc, #296]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 030c 	and.w	r3, r3, #12
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00b      	beq.n	800915e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009146:	4b47      	ldr	r3, [pc, #284]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800914e:	2b08      	cmp	r3, #8
 8009150:	d11c      	bne.n	800918c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009152:	4b44      	ldr	r3, [pc, #272]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d116      	bne.n	800918c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800915e:	4b41      	ldr	r3, [pc, #260]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d005      	beq.n	8009176 <HAL_RCC_OscConfig+0x152>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d001      	beq.n	8009176 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e1c7      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009176:	4b3b      	ldr	r3, [pc, #236]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	4937      	ldr	r1, [pc, #220]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 8009186:	4313      	orrs	r3, r2
 8009188:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800918a:	e03a      	b.n	8009202 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d020      	beq.n	80091d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009194:	4b34      	ldr	r3, [pc, #208]	@ (8009268 <HAL_RCC_OscConfig+0x244>)
 8009196:	2201      	movs	r2, #1
 8009198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800919a:	f7fa ff03 	bl	8003fa4 <HAL_GetTick>
 800919e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091a0:	e008      	b.n	80091b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091a2:	f7fa feff 	bl	8003fa4 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d901      	bls.n	80091b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e1a8      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091b4:	4b2b      	ldr	r3, [pc, #172]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0f0      	beq.n	80091a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091c0:	4b28      	ldr	r3, [pc, #160]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	4925      	ldr	r1, [pc, #148]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	600b      	str	r3, [r1, #0]
 80091d4:	e015      	b.n	8009202 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091d6:	4b24      	ldr	r3, [pc, #144]	@ (8009268 <HAL_RCC_OscConfig+0x244>)
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091dc:	f7fa fee2 	bl	8003fa4 <HAL_GetTick>
 80091e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091e2:	e008      	b.n	80091f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091e4:	f7fa fede 	bl	8003fa4 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d901      	bls.n	80091f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e187      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091f6:	4b1b      	ldr	r3, [pc, #108]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1f0      	bne.n	80091e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0308 	and.w	r3, r3, #8
 800920a:	2b00      	cmp	r3, #0
 800920c:	d036      	beq.n	800927c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d016      	beq.n	8009244 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009216:	4b15      	ldr	r3, [pc, #84]	@ (800926c <HAL_RCC_OscConfig+0x248>)
 8009218:	2201      	movs	r2, #1
 800921a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800921c:	f7fa fec2 	bl	8003fa4 <HAL_GetTick>
 8009220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009222:	e008      	b.n	8009236 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009224:	f7fa febe 	bl	8003fa4 <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b02      	cmp	r3, #2
 8009230:	d901      	bls.n	8009236 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e167      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009236:	4b0b      	ldr	r3, [pc, #44]	@ (8009264 <HAL_RCC_OscConfig+0x240>)
 8009238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0f0      	beq.n	8009224 <HAL_RCC_OscConfig+0x200>
 8009242:	e01b      	b.n	800927c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009244:	4b09      	ldr	r3, [pc, #36]	@ (800926c <HAL_RCC_OscConfig+0x248>)
 8009246:	2200      	movs	r2, #0
 8009248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800924a:	f7fa feab 	bl	8003fa4 <HAL_GetTick>
 800924e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009250:	e00e      	b.n	8009270 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009252:	f7fa fea7 	bl	8003fa4 <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d907      	bls.n	8009270 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e150      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
 8009264:	40023800 	.word	0x40023800
 8009268:	42470000 	.word	0x42470000
 800926c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009270:	4b88      	ldr	r3, [pc, #544]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1ea      	bne.n	8009252 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0304 	and.w	r3, r3, #4
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8097 	beq.w	80093b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800928a:	2300      	movs	r3, #0
 800928c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800928e:	4b81      	ldr	r3, [pc, #516]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10f      	bne.n	80092ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800929a:	2300      	movs	r3, #0
 800929c:	60bb      	str	r3, [r7, #8]
 800929e:	4b7d      	ldr	r3, [pc, #500]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 80092a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a2:	4a7c      	ldr	r2, [pc, #496]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 80092a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80092aa:	4b7a      	ldr	r3, [pc, #488]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 80092ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b2:	60bb      	str	r3, [r7, #8]
 80092b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092b6:	2301      	movs	r3, #1
 80092b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092ba:	4b77      	ldr	r3, [pc, #476]	@ (8009498 <HAL_RCC_OscConfig+0x474>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d118      	bne.n	80092f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092c6:	4b74      	ldr	r3, [pc, #464]	@ (8009498 <HAL_RCC_OscConfig+0x474>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a73      	ldr	r2, [pc, #460]	@ (8009498 <HAL_RCC_OscConfig+0x474>)
 80092cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092d2:	f7fa fe67 	bl	8003fa4 <HAL_GetTick>
 80092d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092d8:	e008      	b.n	80092ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092da:	f7fa fe63 	bl	8003fa4 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e10c      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092ec:	4b6a      	ldr	r3, [pc, #424]	@ (8009498 <HAL_RCC_OscConfig+0x474>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0f0      	beq.n	80092da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d106      	bne.n	800930e <HAL_RCC_OscConfig+0x2ea>
 8009300:	4b64      	ldr	r3, [pc, #400]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009304:	4a63      	ldr	r2, [pc, #396]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	6713      	str	r3, [r2, #112]	@ 0x70
 800930c:	e01c      	b.n	8009348 <HAL_RCC_OscConfig+0x324>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	2b05      	cmp	r3, #5
 8009314:	d10c      	bne.n	8009330 <HAL_RCC_OscConfig+0x30c>
 8009316:	4b5f      	ldr	r3, [pc, #380]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800931a:	4a5e      	ldr	r2, [pc, #376]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 800931c:	f043 0304 	orr.w	r3, r3, #4
 8009320:	6713      	str	r3, [r2, #112]	@ 0x70
 8009322:	4b5c      	ldr	r3, [pc, #368]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009326:	4a5b      	ldr	r2, [pc, #364]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009328:	f043 0301 	orr.w	r3, r3, #1
 800932c:	6713      	str	r3, [r2, #112]	@ 0x70
 800932e:	e00b      	b.n	8009348 <HAL_RCC_OscConfig+0x324>
 8009330:	4b58      	ldr	r3, [pc, #352]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009334:	4a57      	ldr	r2, [pc, #348]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009336:	f023 0301 	bic.w	r3, r3, #1
 800933a:	6713      	str	r3, [r2, #112]	@ 0x70
 800933c:	4b55      	ldr	r3, [pc, #340]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 800933e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009340:	4a54      	ldr	r2, [pc, #336]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009342:	f023 0304 	bic.w	r3, r3, #4
 8009346:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d015      	beq.n	800937c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009350:	f7fa fe28 	bl	8003fa4 <HAL_GetTick>
 8009354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009356:	e00a      	b.n	800936e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009358:	f7fa fe24 	bl	8003fa4 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009366:	4293      	cmp	r3, r2
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e0cb      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800936e:	4b49      	ldr	r3, [pc, #292]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0ee      	beq.n	8009358 <HAL_RCC_OscConfig+0x334>
 800937a:	e014      	b.n	80093a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800937c:	f7fa fe12 	bl	8003fa4 <HAL_GetTick>
 8009380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009382:	e00a      	b.n	800939a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009384:	f7fa fe0e 	bl	8003fa4 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009392:	4293      	cmp	r3, r2
 8009394:	d901      	bls.n	800939a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e0b5      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800939a:	4b3e      	ldr	r3, [pc, #248]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 800939c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1ee      	bne.n	8009384 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d105      	bne.n	80093b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093ac:	4b39      	ldr	r3, [pc, #228]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 80093ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b0:	4a38      	ldr	r2, [pc, #224]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 80093b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 80a1 	beq.w	8009504 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80093c2:	4b34      	ldr	r3, [pc, #208]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f003 030c 	and.w	r3, r3, #12
 80093ca:	2b08      	cmp	r3, #8
 80093cc:	d05c      	beq.n	8009488 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d141      	bne.n	800945a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093d6:	4b31      	ldr	r3, [pc, #196]	@ (800949c <HAL_RCC_OscConfig+0x478>)
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093dc:	f7fa fde2 	bl	8003fa4 <HAL_GetTick>
 80093e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093e2:	e008      	b.n	80093f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093e4:	f7fa fdde 	bl	8003fa4 <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d901      	bls.n	80093f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e087      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093f6:	4b27      	ldr	r3, [pc, #156]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1f0      	bne.n	80093e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	69da      	ldr	r2, [r3, #28]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009410:	019b      	lsls	r3, r3, #6
 8009412:	431a      	orrs	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009418:	085b      	lsrs	r3, r3, #1
 800941a:	3b01      	subs	r3, #1
 800941c:	041b      	lsls	r3, r3, #16
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009424:	061b      	lsls	r3, r3, #24
 8009426:	491b      	ldr	r1, [pc, #108]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 8009428:	4313      	orrs	r3, r2
 800942a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800942c:	4b1b      	ldr	r3, [pc, #108]	@ (800949c <HAL_RCC_OscConfig+0x478>)
 800942e:	2201      	movs	r2, #1
 8009430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009432:	f7fa fdb7 	bl	8003fa4 <HAL_GetTick>
 8009436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009438:	e008      	b.n	800944c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800943a:	f7fa fdb3 	bl	8003fa4 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d901      	bls.n	800944c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e05c      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800944c:	4b11      	ldr	r3, [pc, #68]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0f0      	beq.n	800943a <HAL_RCC_OscConfig+0x416>
 8009458:	e054      	b.n	8009504 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800945a:	4b10      	ldr	r3, [pc, #64]	@ (800949c <HAL_RCC_OscConfig+0x478>)
 800945c:	2200      	movs	r2, #0
 800945e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009460:	f7fa fda0 	bl	8003fa4 <HAL_GetTick>
 8009464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009466:	e008      	b.n	800947a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009468:	f7fa fd9c 	bl	8003fa4 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	2b02      	cmp	r3, #2
 8009474:	d901      	bls.n	800947a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	e045      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800947a:	4b06      	ldr	r3, [pc, #24]	@ (8009494 <HAL_RCC_OscConfig+0x470>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1f0      	bne.n	8009468 <HAL_RCC_OscConfig+0x444>
 8009486:	e03d      	b.n	8009504 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d107      	bne.n	80094a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e038      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
 8009494:	40023800 	.word	0x40023800
 8009498:	40007000 	.word	0x40007000
 800949c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80094a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009510 <HAL_RCC_OscConfig+0x4ec>)
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d028      	beq.n	8009500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d121      	bne.n	8009500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d11a      	bne.n	8009500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80094d0:	4013      	ands	r3, r2
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80094d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094d8:	4293      	cmp	r3, r2
 80094da:	d111      	bne.n	8009500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e6:	085b      	lsrs	r3, r3, #1
 80094e8:	3b01      	subs	r3, #1
 80094ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d107      	bne.n	8009500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d001      	beq.n	8009504 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e000      	b.n	8009506 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	40023800 	.word	0x40023800

08009514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e0cc      	b.n	80096c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009528:	4b68      	ldr	r3, [pc, #416]	@ (80096cc <HAL_RCC_ClockConfig+0x1b8>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0307 	and.w	r3, r3, #7
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d90c      	bls.n	8009550 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009536:	4b65      	ldr	r3, [pc, #404]	@ (80096cc <HAL_RCC_ClockConfig+0x1b8>)
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	b2d2      	uxtb	r2, r2
 800953c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800953e:	4b63      	ldr	r3, [pc, #396]	@ (80096cc <HAL_RCC_ClockConfig+0x1b8>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	429a      	cmp	r2, r3
 800954a:	d001      	beq.n	8009550 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e0b8      	b.n	80096c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0302 	and.w	r3, r3, #2
 8009558:	2b00      	cmp	r3, #0
 800955a:	d020      	beq.n	800959e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d005      	beq.n	8009574 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009568:	4b59      	ldr	r3, [pc, #356]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	4a58      	ldr	r2, [pc, #352]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 800956e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009572:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0308 	and.w	r3, r3, #8
 800957c:	2b00      	cmp	r3, #0
 800957e:	d005      	beq.n	800958c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009580:	4b53      	ldr	r3, [pc, #332]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	4a52      	ldr	r2, [pc, #328]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009586:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800958a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800958c:	4b50      	ldr	r3, [pc, #320]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	494d      	ldr	r1, [pc, #308]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 800959a:	4313      	orrs	r3, r2
 800959c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d044      	beq.n	8009634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d107      	bne.n	80095c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095b2:	4b47      	ldr	r3, [pc, #284]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d119      	bne.n	80095f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e07f      	b.n	80096c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d003      	beq.n	80095d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d107      	bne.n	80095e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095d2:	4b3f      	ldr	r3, [pc, #252]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d109      	bne.n	80095f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e06f      	b.n	80096c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095e2:	4b3b      	ldr	r3, [pc, #236]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e067      	b.n	80096c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095f2:	4b37      	ldr	r3, [pc, #220]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f023 0203 	bic.w	r2, r3, #3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	4934      	ldr	r1, [pc, #208]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009600:	4313      	orrs	r3, r2
 8009602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009604:	f7fa fcce 	bl	8003fa4 <HAL_GetTick>
 8009608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800960a:	e00a      	b.n	8009622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800960c:	f7fa fcca 	bl	8003fa4 <HAL_GetTick>
 8009610:	4602      	mov	r2, r0
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800961a:	4293      	cmp	r3, r2
 800961c:	d901      	bls.n	8009622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e04f      	b.n	80096c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009622:	4b2b      	ldr	r3, [pc, #172]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	f003 020c 	and.w	r2, r3, #12
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	429a      	cmp	r2, r3
 8009632:	d1eb      	bne.n	800960c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009634:	4b25      	ldr	r3, [pc, #148]	@ (80096cc <HAL_RCC_ClockConfig+0x1b8>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	429a      	cmp	r2, r3
 8009640:	d20c      	bcs.n	800965c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009642:	4b22      	ldr	r3, [pc, #136]	@ (80096cc <HAL_RCC_ClockConfig+0x1b8>)
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	b2d2      	uxtb	r2, r2
 8009648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800964a:	4b20      	ldr	r3, [pc, #128]	@ (80096cc <HAL_RCC_ClockConfig+0x1b8>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0307 	and.w	r3, r3, #7
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d001      	beq.n	800965c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e032      	b.n	80096c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d008      	beq.n	800967a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009668:	4b19      	ldr	r3, [pc, #100]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	4916      	ldr	r1, [pc, #88]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009676:	4313      	orrs	r3, r2
 8009678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0308 	and.w	r3, r3, #8
 8009682:	2b00      	cmp	r3, #0
 8009684:	d009      	beq.n	800969a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009686:	4b12      	ldr	r3, [pc, #72]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	490e      	ldr	r1, [pc, #56]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009696:	4313      	orrs	r3, r2
 8009698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800969a:	f000 f821 	bl	80096e0 <HAL_RCC_GetSysClockFreq>
 800969e:	4602      	mov	r2, r0
 80096a0:	4b0b      	ldr	r3, [pc, #44]	@ (80096d0 <HAL_RCC_ClockConfig+0x1bc>)
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	091b      	lsrs	r3, r3, #4
 80096a6:	f003 030f 	and.w	r3, r3, #15
 80096aa:	490a      	ldr	r1, [pc, #40]	@ (80096d4 <HAL_RCC_ClockConfig+0x1c0>)
 80096ac:	5ccb      	ldrb	r3, [r1, r3]
 80096ae:	fa22 f303 	lsr.w	r3, r2, r3
 80096b2:	4a09      	ldr	r2, [pc, #36]	@ (80096d8 <HAL_RCC_ClockConfig+0x1c4>)
 80096b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80096b6:	4b09      	ldr	r3, [pc, #36]	@ (80096dc <HAL_RCC_ClockConfig+0x1c8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fa fc2e 	bl	8003f1c <HAL_InitTick>

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	40023c00 	.word	0x40023c00
 80096d0:	40023800 	.word	0x40023800
 80096d4:	08019d8c 	.word	0x08019d8c
 80096d8:	20000004 	.word	0x20000004
 80096dc:	2000001c 	.word	0x2000001c

080096e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096e4:	b094      	sub	sp, #80	@ 0x50
 80096e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ec:	2300      	movs	r3, #0
 80096ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096f0:	2300      	movs	r3, #0
 80096f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096f8:	4b79      	ldr	r3, [pc, #484]	@ (80098e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f003 030c 	and.w	r3, r3, #12
 8009700:	2b08      	cmp	r3, #8
 8009702:	d00d      	beq.n	8009720 <HAL_RCC_GetSysClockFreq+0x40>
 8009704:	2b08      	cmp	r3, #8
 8009706:	f200 80e1 	bhi.w	80098cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d002      	beq.n	8009714 <HAL_RCC_GetSysClockFreq+0x34>
 800970e:	2b04      	cmp	r3, #4
 8009710:	d003      	beq.n	800971a <HAL_RCC_GetSysClockFreq+0x3a>
 8009712:	e0db      	b.n	80098cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009714:	4b73      	ldr	r3, [pc, #460]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8009716:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009718:	e0db      	b.n	80098d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800971a:	4b73      	ldr	r3, [pc, #460]	@ (80098e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800971c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800971e:	e0d8      	b.n	80098d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009720:	4b6f      	ldr	r3, [pc, #444]	@ (80098e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009728:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800972a:	4b6d      	ldr	r3, [pc, #436]	@ (80098e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d063      	beq.n	80097fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009736:	4b6a      	ldr	r3, [pc, #424]	@ (80098e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	099b      	lsrs	r3, r3, #6
 800973c:	2200      	movs	r2, #0
 800973e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009740:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009748:	633b      	str	r3, [r7, #48]	@ 0x30
 800974a:	2300      	movs	r3, #0
 800974c:	637b      	str	r3, [r7, #52]	@ 0x34
 800974e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009752:	4622      	mov	r2, r4
 8009754:	462b      	mov	r3, r5
 8009756:	f04f 0000 	mov.w	r0, #0
 800975a:	f04f 0100 	mov.w	r1, #0
 800975e:	0159      	lsls	r1, r3, #5
 8009760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009764:	0150      	lsls	r0, r2, #5
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	4621      	mov	r1, r4
 800976c:	1a51      	subs	r1, r2, r1
 800976e:	6139      	str	r1, [r7, #16]
 8009770:	4629      	mov	r1, r5
 8009772:	eb63 0301 	sbc.w	r3, r3, r1
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	f04f 0200 	mov.w	r2, #0
 800977c:	f04f 0300 	mov.w	r3, #0
 8009780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009784:	4659      	mov	r1, fp
 8009786:	018b      	lsls	r3, r1, #6
 8009788:	4651      	mov	r1, sl
 800978a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800978e:	4651      	mov	r1, sl
 8009790:	018a      	lsls	r2, r1, #6
 8009792:	4651      	mov	r1, sl
 8009794:	ebb2 0801 	subs.w	r8, r2, r1
 8009798:	4659      	mov	r1, fp
 800979a:	eb63 0901 	sbc.w	r9, r3, r1
 800979e:	f04f 0200 	mov.w	r2, #0
 80097a2:	f04f 0300 	mov.w	r3, #0
 80097a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80097aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80097ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80097b2:	4690      	mov	r8, r2
 80097b4:	4699      	mov	r9, r3
 80097b6:	4623      	mov	r3, r4
 80097b8:	eb18 0303 	adds.w	r3, r8, r3
 80097bc:	60bb      	str	r3, [r7, #8]
 80097be:	462b      	mov	r3, r5
 80097c0:	eb49 0303 	adc.w	r3, r9, r3
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	f04f 0200 	mov.w	r2, #0
 80097ca:	f04f 0300 	mov.w	r3, #0
 80097ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80097d2:	4629      	mov	r1, r5
 80097d4:	024b      	lsls	r3, r1, #9
 80097d6:	4621      	mov	r1, r4
 80097d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80097dc:	4621      	mov	r1, r4
 80097de:	024a      	lsls	r2, r1, #9
 80097e0:	4610      	mov	r0, r2
 80097e2:	4619      	mov	r1, r3
 80097e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097e6:	2200      	movs	r2, #0
 80097e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80097f0:	f7f7 fa3a 	bl	8000c68 <__aeabi_uldivmod>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4613      	mov	r3, r2
 80097fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097fc:	e058      	b.n	80098b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097fe:	4b38      	ldr	r3, [pc, #224]	@ (80098e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	099b      	lsrs	r3, r3, #6
 8009804:	2200      	movs	r2, #0
 8009806:	4618      	mov	r0, r3
 8009808:	4611      	mov	r1, r2
 800980a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800980e:	623b      	str	r3, [r7, #32]
 8009810:	2300      	movs	r3, #0
 8009812:	627b      	str	r3, [r7, #36]	@ 0x24
 8009814:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	f04f 0000 	mov.w	r0, #0
 8009820:	f04f 0100 	mov.w	r1, #0
 8009824:	0159      	lsls	r1, r3, #5
 8009826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800982a:	0150      	lsls	r0, r2, #5
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	4641      	mov	r1, r8
 8009832:	ebb2 0a01 	subs.w	sl, r2, r1
 8009836:	4649      	mov	r1, r9
 8009838:	eb63 0b01 	sbc.w	fp, r3, r1
 800983c:	f04f 0200 	mov.w	r2, #0
 8009840:	f04f 0300 	mov.w	r3, #0
 8009844:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009848:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800984c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009850:	ebb2 040a 	subs.w	r4, r2, sl
 8009854:	eb63 050b 	sbc.w	r5, r3, fp
 8009858:	f04f 0200 	mov.w	r2, #0
 800985c:	f04f 0300 	mov.w	r3, #0
 8009860:	00eb      	lsls	r3, r5, #3
 8009862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009866:	00e2      	lsls	r2, r4, #3
 8009868:	4614      	mov	r4, r2
 800986a:	461d      	mov	r5, r3
 800986c:	4643      	mov	r3, r8
 800986e:	18e3      	adds	r3, r4, r3
 8009870:	603b      	str	r3, [r7, #0]
 8009872:	464b      	mov	r3, r9
 8009874:	eb45 0303 	adc.w	r3, r5, r3
 8009878:	607b      	str	r3, [r7, #4]
 800987a:	f04f 0200 	mov.w	r2, #0
 800987e:	f04f 0300 	mov.w	r3, #0
 8009882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009886:	4629      	mov	r1, r5
 8009888:	028b      	lsls	r3, r1, #10
 800988a:	4621      	mov	r1, r4
 800988c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009890:	4621      	mov	r1, r4
 8009892:	028a      	lsls	r2, r1, #10
 8009894:	4610      	mov	r0, r2
 8009896:	4619      	mov	r1, r3
 8009898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800989a:	2200      	movs	r2, #0
 800989c:	61bb      	str	r3, [r7, #24]
 800989e:	61fa      	str	r2, [r7, #28]
 80098a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098a4:	f7f7 f9e0 	bl	8000c68 <__aeabi_uldivmod>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4613      	mov	r3, r2
 80098ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80098b0:	4b0b      	ldr	r3, [pc, #44]	@ (80098e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	0c1b      	lsrs	r3, r3, #16
 80098b6:	f003 0303 	and.w	r3, r3, #3
 80098ba:	3301      	adds	r3, #1
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80098c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80098ca:	e002      	b.n	80098d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80098cc:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80098ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80098d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80098d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3750      	adds	r7, #80	@ 0x50
 80098d8:	46bd      	mov	sp, r7
 80098da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098de:	bf00      	nop
 80098e0:	40023800 	.word	0x40023800
 80098e4:	00f42400 	.word	0x00f42400
 80098e8:	007a1200 	.word	0x007a1200

080098ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098f0:	4b03      	ldr	r3, [pc, #12]	@ (8009900 <HAL_RCC_GetHCLKFreq+0x14>)
 80098f2:	681b      	ldr	r3, [r3, #0]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	20000004 	.word	0x20000004

08009904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009908:	f7ff fff0 	bl	80098ec <HAL_RCC_GetHCLKFreq>
 800990c:	4602      	mov	r2, r0
 800990e:	4b05      	ldr	r3, [pc, #20]	@ (8009924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	0a9b      	lsrs	r3, r3, #10
 8009914:	f003 0307 	and.w	r3, r3, #7
 8009918:	4903      	ldr	r1, [pc, #12]	@ (8009928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800991a:	5ccb      	ldrb	r3, [r1, r3]
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009920:	4618      	mov	r0, r3
 8009922:	bd80      	pop	{r7, pc}
 8009924:	40023800 	.word	0x40023800
 8009928:	08019d9c 	.word	0x08019d9c

0800992c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009930:	f7ff ffdc 	bl	80098ec <HAL_RCC_GetHCLKFreq>
 8009934:	4602      	mov	r2, r0
 8009936:	4b05      	ldr	r3, [pc, #20]	@ (800994c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	0b5b      	lsrs	r3, r3, #13
 800993c:	f003 0307 	and.w	r3, r3, #7
 8009940:	4903      	ldr	r1, [pc, #12]	@ (8009950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009942:	5ccb      	ldrb	r3, [r1, r3]
 8009944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009948:	4618      	mov	r0, r3
 800994a:	bd80      	pop	{r7, pc}
 800994c:	40023800 	.word	0x40023800
 8009950:	08019d9c 	.word	0x08019d9c

08009954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e07b      	b.n	8009a5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996a:	2b00      	cmp	r3, #0
 800996c:	d108      	bne.n	8009980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009976:	d009      	beq.n	800998c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	61da      	str	r2, [r3, #28]
 800997e:	e005      	b.n	800998c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	d106      	bne.n	80099ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7f9 fd78 	bl	800349c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099de:	431a      	orrs	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	431a      	orrs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	431a      	orrs	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	69db      	ldr	r3, [r3, #28]
 8009a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a06:	431a      	orrs	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a10:	ea42 0103 	orr.w	r1, r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a18:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	0c1b      	lsrs	r3, r3, #16
 8009a2a:	f003 0104 	and.w	r1, r3, #4
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a32:	f003 0210 	and.w	r2, r3, #16
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	69da      	ldr	r2, [r3, #28]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b088      	sub	sp, #32
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	603b      	str	r3, [r7, #0]
 8009a72:	4613      	mov	r3, r2
 8009a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_SPI_Transmit+0x22>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e12d      	b.n	8009ce4 <HAL_SPI_Transmit+0x27e>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a90:	f7fa fa88 	bl	8003fa4 <HAL_GetTick>
 8009a94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009a96:	88fb      	ldrh	r3, [r7, #6]
 8009a98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d002      	beq.n	8009aac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009aaa:	e116      	b.n	8009cda <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <HAL_SPI_Transmit+0x52>
 8009ab2:	88fb      	ldrh	r3, [r7, #6]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d102      	bne.n	8009abe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009abc:	e10d      	b.n	8009cda <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	88fa      	ldrh	r2, [r7, #6]
 8009ad6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	88fa      	ldrh	r2, [r7, #6]
 8009adc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b04:	d10f      	bne.n	8009b26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b30:	2b40      	cmp	r3, #64	@ 0x40
 8009b32:	d007      	beq.n	8009b44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b4c:	d14f      	bne.n	8009bee <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <HAL_SPI_Transmit+0xf6>
 8009b56:	8afb      	ldrh	r3, [r7, #22]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d142      	bne.n	8009be2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b60:	881a      	ldrh	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6c:	1c9a      	adds	r2, r3, #2
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009b80:	e02f      	b.n	8009be2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f003 0302 	and.w	r3, r3, #2
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d112      	bne.n	8009bb6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b94:	881a      	ldrh	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba0:	1c9a      	adds	r2, r3, #2
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009bb4:	e015      	b.n	8009be2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bb6:	f7fa f9f5 	bl	8003fa4 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d803      	bhi.n	8009bce <HAL_SPI_Transmit+0x168>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bcc:	d102      	bne.n	8009bd4 <HAL_SPI_Transmit+0x16e>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d106      	bne.n	8009be2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8009be0:	e07b      	b.n	8009cda <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1ca      	bne.n	8009b82 <HAL_SPI_Transmit+0x11c>
 8009bec:	e050      	b.n	8009c90 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <HAL_SPI_Transmit+0x196>
 8009bf6:	8afb      	ldrh	r3, [r7, #22]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d144      	bne.n	8009c86 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	330c      	adds	r3, #12
 8009c06:	7812      	ldrb	r2, [r2, #0]
 8009c08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009c22:	e030      	b.n	8009c86 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f003 0302 	and.w	r3, r3, #2
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d113      	bne.n	8009c5a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	330c      	adds	r3, #12
 8009c3c:	7812      	ldrb	r2, [r2, #0]
 8009c3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	3b01      	subs	r3, #1
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009c58:	e015      	b.n	8009c86 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c5a:	f7fa f9a3 	bl	8003fa4 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d803      	bhi.n	8009c72 <HAL_SPI_Transmit+0x20c>
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c70:	d102      	bne.n	8009c78 <HAL_SPI_Transmit+0x212>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d106      	bne.n	8009c86 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8009c84:	e029      	b.n	8009cda <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1c9      	bne.n	8009c24 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c90:	69ba      	ldr	r2, [r7, #24]
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 fa6f 	bl	800a178 <SPI_EndRxTxTransaction>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cae:	2300      	movs	r3, #0
 8009cb0:	613b      	str	r3, [r7, #16]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	613b      	str	r3, [r7, #16]
 8009cc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	77fb      	strb	r3, [r7, #31]
 8009cd0:	e003      	b.n	8009cda <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009ce2:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3720      	adds	r7, #32
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08c      	sub	sp, #48	@ 0x30
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d101      	bne.n	8009d12 <HAL_SPI_TransmitReceive+0x26>
 8009d0e:	2302      	movs	r3, #2
 8009d10:	e198      	b.n	800a044 <HAL_SPI_TransmitReceive+0x358>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d1a:	f7fa f943 	bl	8003fa4 <HAL_GetTick>
 8009d1e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009d30:	887b      	ldrh	r3, [r7, #2]
 8009d32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009d34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d00f      	beq.n	8009d5c <HAL_SPI_TransmitReceive+0x70>
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d42:	d107      	bne.n	8009d54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d103      	bne.n	8009d54 <HAL_SPI_TransmitReceive+0x68>
 8009d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d003      	beq.n	8009d5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009d54:	2302      	movs	r3, #2
 8009d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009d5a:	e16d      	b.n	800a038 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d005      	beq.n	8009d6e <HAL_SPI_TransmitReceive+0x82>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <HAL_SPI_TransmitReceive+0x82>
 8009d68:	887b      	ldrh	r3, [r7, #2]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d103      	bne.n	8009d76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009d74:	e160      	b.n	800a038 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d003      	beq.n	8009d8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2205      	movs	r2, #5
 8009d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	887a      	ldrh	r2, [r7, #2]
 8009d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	887a      	ldrh	r2, [r7, #2]
 8009da0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	887a      	ldrh	r2, [r7, #2]
 8009dac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	887a      	ldrh	r2, [r7, #2]
 8009db2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dca:	2b40      	cmp	r3, #64	@ 0x40
 8009dcc:	d007      	beq.n	8009dde <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ddc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009de6:	d17c      	bne.n	8009ee2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <HAL_SPI_TransmitReceive+0x10a>
 8009df0:	8b7b      	ldrh	r3, [r7, #26]
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d16a      	bne.n	8009ecc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dfa:	881a      	ldrh	r2, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e06:	1c9a      	adds	r2, r3, #2
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	3b01      	subs	r3, #1
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e1a:	e057      	b.n	8009ecc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d11b      	bne.n	8009e62 <HAL_SPI_TransmitReceive+0x176>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d016      	beq.n	8009e62 <HAL_SPI_TransmitReceive+0x176>
 8009e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d113      	bne.n	8009e62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e3e:	881a      	ldrh	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e4a:	1c9a      	adds	r2, r3, #2
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	3b01      	subs	r3, #1
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d119      	bne.n	8009ea4 <HAL_SPI_TransmitReceive+0x1b8>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d014      	beq.n	8009ea4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68da      	ldr	r2, [r3, #12]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e84:	b292      	uxth	r2, r2
 8009e86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8c:	1c9a      	adds	r2, r3, #2
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ea4:	f7fa f87e 	bl	8003fa4 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d80b      	bhi.n	8009ecc <HAL_SPI_TransmitReceive+0x1e0>
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eba:	d007      	beq.n	8009ecc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8009eca:	e0b5      	b.n	800a038 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1a2      	bne.n	8009e1c <HAL_SPI_TransmitReceive+0x130>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d19d      	bne.n	8009e1c <HAL_SPI_TransmitReceive+0x130>
 8009ee0:	e080      	b.n	8009fe4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <HAL_SPI_TransmitReceive+0x204>
 8009eea:	8b7b      	ldrh	r3, [r7, #26]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d16f      	bne.n	8009fd0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	330c      	adds	r3, #12
 8009efa:	7812      	ldrb	r2, [r2, #0]
 8009efc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f16:	e05b      	b.n	8009fd0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f003 0302 	and.w	r3, r3, #2
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d11c      	bne.n	8009f60 <HAL_SPI_TransmitReceive+0x274>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d017      	beq.n	8009f60 <HAL_SPI_TransmitReceive+0x274>
 8009f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d114      	bne.n	8009f60 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	330c      	adds	r3, #12
 8009f40:	7812      	ldrb	r2, [r2, #0]
 8009f42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	3b01      	subs	r3, #1
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d119      	bne.n	8009fa2 <HAL_SPI_TransmitReceive+0x2b6>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d014      	beq.n	8009fa2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68da      	ldr	r2, [r3, #12]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f82:	b2d2      	uxtb	r2, r2
 8009f84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	3b01      	subs	r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009fa2:	f7f9 ffff 	bl	8003fa4 <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d803      	bhi.n	8009fba <HAL_SPI_TransmitReceive+0x2ce>
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb8:	d102      	bne.n	8009fc0 <HAL_SPI_TransmitReceive+0x2d4>
 8009fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d107      	bne.n	8009fd0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8009fce:	e033      	b.n	800a038 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d19e      	bne.n	8009f18 <HAL_SPI_TransmitReceive+0x22c>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d199      	bne.n	8009f18 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fe6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f8c5 	bl	800a178 <SPI_EndRxTxTransaction>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d006      	beq.n	800a002 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800a000:	e01a      	b.n	800a038 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10a      	bne.n	800a020 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a00a:	2300      	movs	r3, #0
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	617b      	str	r3, [r7, #20]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	617b      	str	r3, [r7, #20]
 800a01e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a024:	2b00      	cmp	r3, #0
 800a026:	d003      	beq.n	800a030 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a02e:	e003      	b.n	800a038 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a040:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800a044:	4618      	mov	r0, r3
 800a046:	3730      	adds	r7, #48	@ 0x30
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a05a:	b2db      	uxtb	r3, r3
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	4613      	mov	r3, r2
 800a076:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a078:	f7f9 ff94 	bl	8003fa4 <HAL_GetTick>
 800a07c:	4602      	mov	r2, r0
 800a07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a080:	1a9b      	subs	r3, r3, r2
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	4413      	add	r3, r2
 800a086:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a088:	f7f9 ff8c 	bl	8003fa4 <HAL_GetTick>
 800a08c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a08e:	4b39      	ldr	r3, [pc, #228]	@ (800a174 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	015b      	lsls	r3, r3, #5
 800a094:	0d1b      	lsrs	r3, r3, #20
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	fb02 f303 	mul.w	r3, r2, r3
 800a09c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a09e:	e054      	b.n	800a14a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a6:	d050      	beq.n	800a14a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a0a8:	f7f9 ff7c 	bl	8003fa4 <HAL_GetTick>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	69fa      	ldr	r2, [r7, #28]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d902      	bls.n	800a0be <SPI_WaitFlagStateUntilTimeout+0x56>
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d13d      	bne.n	800a13a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685a      	ldr	r2, [r3, #4]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a0cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0d6:	d111      	bne.n	800a0fc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0e0:	d004      	beq.n	800a0ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0ea:	d107      	bne.n	800a0fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a104:	d10f      	bne.n	800a126 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a124:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e017      	b.n	800a16a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	3b01      	subs	r3, #1
 800a148:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4013      	ands	r3, r2
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	429a      	cmp	r2, r3
 800a158:	bf0c      	ite	eq
 800a15a:	2301      	moveq	r3, #1
 800a15c:	2300      	movne	r3, #0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	461a      	mov	r2, r3
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	429a      	cmp	r2, r3
 800a166:	d19b      	bne.n	800a0a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3720      	adds	r7, #32
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20000004 	.word	0x20000004

0800a178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af02      	add	r7, sp, #8
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2201      	movs	r2, #1
 800a18c:	2102      	movs	r1, #2
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f7ff ff6a 	bl	800a068 <SPI_WaitFlagStateUntilTimeout>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d007      	beq.n	800a1aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a19e:	f043 0220 	orr.w	r2, r3, #32
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e032      	b.n	800a210 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a1aa:	4b1b      	ldr	r3, [pc, #108]	@ (800a218 <SPI_EndRxTxTransaction+0xa0>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a21c <SPI_EndRxTxTransaction+0xa4>)
 800a1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b4:	0d5b      	lsrs	r3, r3, #21
 800a1b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a1ba:	fb02 f303 	mul.w	r3, r2, r3
 800a1be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a1c8:	d112      	bne.n	800a1f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2180      	movs	r1, #128	@ 0x80
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7ff ff47 	bl	800a068 <SPI_WaitFlagStateUntilTimeout>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d016      	beq.n	800a20e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1e4:	f043 0220 	orr.w	r2, r3, #32
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e00f      	b.n	800a210 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a206:	2b80      	cmp	r3, #128	@ 0x80
 800a208:	d0f2      	beq.n	800a1f0 <SPI_EndRxTxTransaction+0x78>
 800a20a:	e000      	b.n	800a20e <SPI_EndRxTxTransaction+0x96>
        break;
 800a20c:	bf00      	nop
  }

  return HAL_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	20000004 	.word	0x20000004
 800a21c:	165e9f81 	.word	0x165e9f81

0800a220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e041      	b.n	800a2b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d106      	bne.n	800a24c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7f9 f970 	bl	800352c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2202      	movs	r2, #2
 800a250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f000 fcb0 	bl	800abc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e041      	b.n	800a354 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f839 	bl	800a35c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	f000 fc61 	bl	800abc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e041      	b.n	800a406 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d106      	bne.n	800a39c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f839 	bl	800a40e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	f000 fc08 	bl	800abc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
	...

0800a424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d109      	bne.n	800a448 <HAL_TIM_PWM_Start+0x24>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	bf14      	ite	ne
 800a440:	2301      	movne	r3, #1
 800a442:	2300      	moveq	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	e022      	b.n	800a48e <HAL_TIM_PWM_Start+0x6a>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b04      	cmp	r3, #4
 800a44c:	d109      	bne.n	800a462 <HAL_TIM_PWM_Start+0x3e>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b01      	cmp	r3, #1
 800a458:	bf14      	ite	ne
 800a45a:	2301      	movne	r3, #1
 800a45c:	2300      	moveq	r3, #0
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	e015      	b.n	800a48e <HAL_TIM_PWM_Start+0x6a>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b08      	cmp	r3, #8
 800a466:	d109      	bne.n	800a47c <HAL_TIM_PWM_Start+0x58>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b01      	cmp	r3, #1
 800a472:	bf14      	ite	ne
 800a474:	2301      	movne	r3, #1
 800a476:	2300      	moveq	r3, #0
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	e008      	b.n	800a48e <HAL_TIM_PWM_Start+0x6a>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b01      	cmp	r3, #1
 800a486:	bf14      	ite	ne
 800a488:	2301      	movne	r3, #1
 800a48a:	2300      	moveq	r3, #0
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e07c      	b.n	800a590 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d104      	bne.n	800a4a6 <HAL_TIM_PWM_Start+0x82>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4a4:	e013      	b.n	800a4ce <HAL_TIM_PWM_Start+0xaa>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d104      	bne.n	800a4b6 <HAL_TIM_PWM_Start+0x92>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4b4:	e00b      	b.n	800a4ce <HAL_TIM_PWM_Start+0xaa>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b08      	cmp	r3, #8
 800a4ba:	d104      	bne.n	800a4c6 <HAL_TIM_PWM_Start+0xa2>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4c4:	e003      	b.n	800a4ce <HAL_TIM_PWM_Start+0xaa>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 fe6a 	bl	800b1b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a2d      	ldr	r2, [pc, #180]	@ (800a598 <HAL_TIM_PWM_Start+0x174>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d004      	beq.n	800a4f0 <HAL_TIM_PWM_Start+0xcc>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a2c      	ldr	r2, [pc, #176]	@ (800a59c <HAL_TIM_PWM_Start+0x178>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d101      	bne.n	800a4f4 <HAL_TIM_PWM_Start+0xd0>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e000      	b.n	800a4f6 <HAL_TIM_PWM_Start+0xd2>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d007      	beq.n	800a50a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a508:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a22      	ldr	r2, [pc, #136]	@ (800a598 <HAL_TIM_PWM_Start+0x174>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d022      	beq.n	800a55a <HAL_TIM_PWM_Start+0x136>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a51c:	d01d      	beq.n	800a55a <HAL_TIM_PWM_Start+0x136>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a1f      	ldr	r2, [pc, #124]	@ (800a5a0 <HAL_TIM_PWM_Start+0x17c>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d018      	beq.n	800a55a <HAL_TIM_PWM_Start+0x136>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a1d      	ldr	r2, [pc, #116]	@ (800a5a4 <HAL_TIM_PWM_Start+0x180>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d013      	beq.n	800a55a <HAL_TIM_PWM_Start+0x136>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a1c      	ldr	r2, [pc, #112]	@ (800a5a8 <HAL_TIM_PWM_Start+0x184>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d00e      	beq.n	800a55a <HAL_TIM_PWM_Start+0x136>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a16      	ldr	r2, [pc, #88]	@ (800a59c <HAL_TIM_PWM_Start+0x178>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d009      	beq.n	800a55a <HAL_TIM_PWM_Start+0x136>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a18      	ldr	r2, [pc, #96]	@ (800a5ac <HAL_TIM_PWM_Start+0x188>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d004      	beq.n	800a55a <HAL_TIM_PWM_Start+0x136>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a16      	ldr	r2, [pc, #88]	@ (800a5b0 <HAL_TIM_PWM_Start+0x18c>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d111      	bne.n	800a57e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	f003 0307 	and.w	r3, r3, #7
 800a564:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2b06      	cmp	r3, #6
 800a56a:	d010      	beq.n	800a58e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f042 0201 	orr.w	r2, r2, #1
 800a57a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a57c:	e007      	b.n	800a58e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0201 	orr.w	r2, r2, #1
 800a58c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	40010000 	.word	0x40010000
 800a59c:	40010400 	.word	0x40010400
 800a5a0:	40000400 	.word	0x40000400
 800a5a4:	40000800 	.word	0x40000800
 800a5a8:	40000c00 	.word	0x40000c00
 800a5ac:	40014000 	.word	0x40014000
 800a5b0:	40001800 	.word	0x40001800

0800a5b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f003 0302 	and.w	r3, r3, #2
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d020      	beq.n	800a618 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01b      	beq.n	800a618 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f06f 0202 	mvn.w	r2, #2
 800a5e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fac1 	bl	800ab86 <HAL_TIM_IC_CaptureCallback>
 800a604:	e005      	b.n	800a612 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fab3 	bl	800ab72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fac4 	bl	800ab9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f003 0304 	and.w	r3, r3, #4
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d020      	beq.n	800a664 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f003 0304 	and.w	r3, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01b      	beq.n	800a664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f06f 0204 	mvn.w	r2, #4
 800a634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2202      	movs	r2, #2
 800a63a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a646:	2b00      	cmp	r3, #0
 800a648:	d003      	beq.n	800a652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fa9b 	bl	800ab86 <HAL_TIM_IC_CaptureCallback>
 800a650:	e005      	b.n	800a65e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fa8d 	bl	800ab72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fa9e 	bl	800ab9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f003 0308 	and.w	r3, r3, #8
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d020      	beq.n	800a6b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01b      	beq.n	800a6b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f06f 0208 	mvn.w	r2, #8
 800a680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2204      	movs	r2, #4
 800a686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	69db      	ldr	r3, [r3, #28]
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fa75 	bl	800ab86 <HAL_TIM_IC_CaptureCallback>
 800a69c:	e005      	b.n	800a6aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fa67 	bl	800ab72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fa78 	bl	800ab9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f003 0310 	and.w	r3, r3, #16
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d020      	beq.n	800a6fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f003 0310 	and.w	r3, r3, #16
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d01b      	beq.n	800a6fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f06f 0210 	mvn.w	r2, #16
 800a6cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2208      	movs	r2, #8
 800a6d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d003      	beq.n	800a6ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fa4f 	bl	800ab86 <HAL_TIM_IC_CaptureCallback>
 800a6e8:	e005      	b.n	800a6f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fa41 	bl	800ab72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fa52 	bl	800ab9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00c      	beq.n	800a720 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d007      	beq.n	800a720 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f06f 0201 	mvn.w	r2, #1
 800a718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fa1f 	bl	800ab5e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00c      	beq.n	800a744 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a73c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fe34 	bl	800b3ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00c      	beq.n	800a768 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a754:	2b00      	cmp	r3, #0
 800a756:	d007      	beq.n	800a768 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fa23 	bl	800abae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00c      	beq.n	800a78c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f003 0320 	and.w	r3, r3, #32
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d007      	beq.n	800a78c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f06f 0220 	mvn.w	r2, #32
 800a784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fe06 	bl	800b398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d101      	bne.n	800a7b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	e048      	b.n	800a844 <HAL_TIM_OC_ConfigChannel+0xb0>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b0c      	cmp	r3, #12
 800a7be:	d839      	bhi.n	800a834 <HAL_TIM_OC_ConfigChannel+0xa0>
 800a7c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c6:	bf00      	nop
 800a7c8:	0800a7fd 	.word	0x0800a7fd
 800a7cc:	0800a835 	.word	0x0800a835
 800a7d0:	0800a835 	.word	0x0800a835
 800a7d4:	0800a835 	.word	0x0800a835
 800a7d8:	0800a80b 	.word	0x0800a80b
 800a7dc:	0800a835 	.word	0x0800a835
 800a7e0:	0800a835 	.word	0x0800a835
 800a7e4:	0800a835 	.word	0x0800a835
 800a7e8:	0800a819 	.word	0x0800a819
 800a7ec:	0800a835 	.word	0x0800a835
 800a7f0:	0800a835 	.word	0x0800a835
 800a7f4:	0800a835 	.word	0x0800a835
 800a7f8:	0800a827 	.word	0x0800a827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68b9      	ldr	r1, [r7, #8]
 800a802:	4618      	mov	r0, r3
 800a804:	f000 fa8a 	bl	800ad1c <TIM_OC1_SetConfig>
      break;
 800a808:	e017      	b.n	800a83a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68b9      	ldr	r1, [r7, #8]
 800a810:	4618      	mov	r0, r3
 800a812:	f000 faf3 	bl	800adfc <TIM_OC2_SetConfig>
      break;
 800a816:	e010      	b.n	800a83a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68b9      	ldr	r1, [r7, #8]
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 fb62 	bl	800aee8 <TIM_OC3_SetConfig>
      break;
 800a824:	e009      	b.n	800a83a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68b9      	ldr	r1, [r7, #8]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 fbcf 	bl	800afd0 <TIM_OC4_SetConfig>
      break;
 800a832:	e002      	b.n	800a83a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	75fb      	strb	r3, [r7, #23]
      break;
 800a838:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a842:	7dfb      	ldrb	r3, [r7, #23]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a862:	2b01      	cmp	r3, #1
 800a864:	d101      	bne.n	800a86a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a866:	2302      	movs	r3, #2
 800a868:	e0ae      	b.n	800a9c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b0c      	cmp	r3, #12
 800a876:	f200 809f 	bhi.w	800a9b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a87a:	a201      	add	r2, pc, #4	@ (adr r2, 800a880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a880:	0800a8b5 	.word	0x0800a8b5
 800a884:	0800a9b9 	.word	0x0800a9b9
 800a888:	0800a9b9 	.word	0x0800a9b9
 800a88c:	0800a9b9 	.word	0x0800a9b9
 800a890:	0800a8f5 	.word	0x0800a8f5
 800a894:	0800a9b9 	.word	0x0800a9b9
 800a898:	0800a9b9 	.word	0x0800a9b9
 800a89c:	0800a9b9 	.word	0x0800a9b9
 800a8a0:	0800a937 	.word	0x0800a937
 800a8a4:	0800a9b9 	.word	0x0800a9b9
 800a8a8:	0800a9b9 	.word	0x0800a9b9
 800a8ac:	0800a9b9 	.word	0x0800a9b9
 800a8b0:	0800a977 	.word	0x0800a977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68b9      	ldr	r1, [r7, #8]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 fa2e 	bl	800ad1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699a      	ldr	r2, [r3, #24]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0208 	orr.w	r2, r2, #8
 800a8ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	699a      	ldr	r2, [r3, #24]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0204 	bic.w	r2, r2, #4
 800a8de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6999      	ldr	r1, [r3, #24]
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	691a      	ldr	r2, [r3, #16]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	430a      	orrs	r2, r1
 800a8f0:	619a      	str	r2, [r3, #24]
      break;
 800a8f2:	e064      	b.n	800a9be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 fa7e 	bl	800adfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	699a      	ldr	r2, [r3, #24]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a90e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a91e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6999      	ldr	r1, [r3, #24]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	021a      	lsls	r2, r3, #8
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	619a      	str	r2, [r3, #24]
      break;
 800a934:	e043      	b.n	800a9be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 fad3 	bl	800aee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	69da      	ldr	r2, [r3, #28]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f042 0208 	orr.w	r2, r2, #8
 800a950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	69da      	ldr	r2, [r3, #28]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f022 0204 	bic.w	r2, r2, #4
 800a960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69d9      	ldr	r1, [r3, #28]
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	691a      	ldr	r2, [r3, #16]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	430a      	orrs	r2, r1
 800a972:	61da      	str	r2, [r3, #28]
      break;
 800a974:	e023      	b.n	800a9be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68b9      	ldr	r1, [r7, #8]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fb27 	bl	800afd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	69da      	ldr	r2, [r3, #28]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69da      	ldr	r2, [r3, #28]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69d9      	ldr	r1, [r3, #28]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	021a      	lsls	r2, r3, #8
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	61da      	str	r2, [r3, #28]
      break;
 800a9b6:	e002      	b.n	800a9be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a9bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d101      	bne.n	800a9ec <HAL_TIM_ConfigClockSource+0x1c>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e0b4      	b.n	800ab56 <HAL_TIM_ConfigClockSource+0x186>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aa0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa24:	d03e      	beq.n	800aaa4 <HAL_TIM_ConfigClockSource+0xd4>
 800aa26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa2a:	f200 8087 	bhi.w	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa32:	f000 8086 	beq.w	800ab42 <HAL_TIM_ConfigClockSource+0x172>
 800aa36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa3a:	d87f      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa3c:	2b70      	cmp	r3, #112	@ 0x70
 800aa3e:	d01a      	beq.n	800aa76 <HAL_TIM_ConfigClockSource+0xa6>
 800aa40:	2b70      	cmp	r3, #112	@ 0x70
 800aa42:	d87b      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa44:	2b60      	cmp	r3, #96	@ 0x60
 800aa46:	d050      	beq.n	800aaea <HAL_TIM_ConfigClockSource+0x11a>
 800aa48:	2b60      	cmp	r3, #96	@ 0x60
 800aa4a:	d877      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa4c:	2b50      	cmp	r3, #80	@ 0x50
 800aa4e:	d03c      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0xfa>
 800aa50:	2b50      	cmp	r3, #80	@ 0x50
 800aa52:	d873      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa54:	2b40      	cmp	r3, #64	@ 0x40
 800aa56:	d058      	beq.n	800ab0a <HAL_TIM_ConfigClockSource+0x13a>
 800aa58:	2b40      	cmp	r3, #64	@ 0x40
 800aa5a:	d86f      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa5c:	2b30      	cmp	r3, #48	@ 0x30
 800aa5e:	d064      	beq.n	800ab2a <HAL_TIM_ConfigClockSource+0x15a>
 800aa60:	2b30      	cmp	r3, #48	@ 0x30
 800aa62:	d86b      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa64:	2b20      	cmp	r3, #32
 800aa66:	d060      	beq.n	800ab2a <HAL_TIM_ConfigClockSource+0x15a>
 800aa68:	2b20      	cmp	r3, #32
 800aa6a:	d867      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d05c      	beq.n	800ab2a <HAL_TIM_ConfigClockSource+0x15a>
 800aa70:	2b10      	cmp	r3, #16
 800aa72:	d05a      	beq.n	800ab2a <HAL_TIM_ConfigClockSource+0x15a>
 800aa74:	e062      	b.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa86:	f000 fb73 	bl	800b170 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	609a      	str	r2, [r3, #8]
      break;
 800aaa2:	e04f      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aab4:	f000 fb5c 	bl	800b170 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aac6:	609a      	str	r2, [r3, #8]
      break;
 800aac8:	e03c      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aad6:	461a      	mov	r2, r3
 800aad8:	f000 fad0 	bl	800b07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2150      	movs	r1, #80	@ 0x50
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fb29 	bl	800b13a <TIM_ITRx_SetConfig>
      break;
 800aae8:	e02c      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f000 faef 	bl	800b0da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2160      	movs	r1, #96	@ 0x60
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fb19 	bl	800b13a <TIM_ITRx_SetConfig>
      break;
 800ab08:	e01c      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab16:	461a      	mov	r2, r3
 800ab18:	f000 fab0 	bl	800b07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2140      	movs	r1, #64	@ 0x40
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 fb09 	bl	800b13a <TIM_ITRx_SetConfig>
      break;
 800ab28:	e00c      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4619      	mov	r1, r3
 800ab34:	4610      	mov	r0, r2
 800ab36:	f000 fb00 	bl	800b13a <TIM_ITRx_SetConfig>
      break;
 800ab3a:	e003      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab40:	e000      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ab42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ab66:	bf00      	nop
 800ab68:	370c      	adds	r7, #12
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr

0800ab72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b083      	sub	sp, #12
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab7a:	bf00      	nop
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aba2:	bf00      	nop
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
	...

0800abc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a46      	ldr	r2, [pc, #280]	@ (800acf0 <TIM_Base_SetConfig+0x12c>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d013      	beq.n	800ac04 <TIM_Base_SetConfig+0x40>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abe2:	d00f      	beq.n	800ac04 <TIM_Base_SetConfig+0x40>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a43      	ldr	r2, [pc, #268]	@ (800acf4 <TIM_Base_SetConfig+0x130>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d00b      	beq.n	800ac04 <TIM_Base_SetConfig+0x40>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a42      	ldr	r2, [pc, #264]	@ (800acf8 <TIM_Base_SetConfig+0x134>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d007      	beq.n	800ac04 <TIM_Base_SetConfig+0x40>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a41      	ldr	r2, [pc, #260]	@ (800acfc <TIM_Base_SetConfig+0x138>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d003      	beq.n	800ac04 <TIM_Base_SetConfig+0x40>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4a40      	ldr	r2, [pc, #256]	@ (800ad00 <TIM_Base_SetConfig+0x13c>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d108      	bne.n	800ac16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a35      	ldr	r2, [pc, #212]	@ (800acf0 <TIM_Base_SetConfig+0x12c>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d02b      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac24:	d027      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a32      	ldr	r2, [pc, #200]	@ (800acf4 <TIM_Base_SetConfig+0x130>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d023      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a31      	ldr	r2, [pc, #196]	@ (800acf8 <TIM_Base_SetConfig+0x134>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d01f      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a30      	ldr	r2, [pc, #192]	@ (800acfc <TIM_Base_SetConfig+0x138>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d01b      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a2f      	ldr	r2, [pc, #188]	@ (800ad00 <TIM_Base_SetConfig+0x13c>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d017      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a2e      	ldr	r2, [pc, #184]	@ (800ad04 <TIM_Base_SetConfig+0x140>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d013      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a2d      	ldr	r2, [pc, #180]	@ (800ad08 <TIM_Base_SetConfig+0x144>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d00f      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a2c      	ldr	r2, [pc, #176]	@ (800ad0c <TIM_Base_SetConfig+0x148>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d00b      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a2b      	ldr	r2, [pc, #172]	@ (800ad10 <TIM_Base_SetConfig+0x14c>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d007      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a2a      	ldr	r2, [pc, #168]	@ (800ad14 <TIM_Base_SetConfig+0x150>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d003      	beq.n	800ac76 <TIM_Base_SetConfig+0xb2>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a29      	ldr	r2, [pc, #164]	@ (800ad18 <TIM_Base_SetConfig+0x154>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d108      	bne.n	800ac88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	695b      	ldr	r3, [r3, #20]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	689a      	ldr	r2, [r3, #8]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a10      	ldr	r2, [pc, #64]	@ (800acf0 <TIM_Base_SetConfig+0x12c>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d003      	beq.n	800acbc <TIM_Base_SetConfig+0xf8>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a12      	ldr	r2, [pc, #72]	@ (800ad00 <TIM_Base_SetConfig+0x13c>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d103      	bne.n	800acc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	691a      	ldr	r2, [r3, #16]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d105      	bne.n	800ace2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f023 0201 	bic.w	r2, r3, #1
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	611a      	str	r2, [r3, #16]
  }
}
 800ace2:	bf00      	nop
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	40010000 	.word	0x40010000
 800acf4:	40000400 	.word	0x40000400
 800acf8:	40000800 	.word	0x40000800
 800acfc:	40000c00 	.word	0x40000c00
 800ad00:	40010400 	.word	0x40010400
 800ad04:	40014000 	.word	0x40014000
 800ad08:	40014400 	.word	0x40014400
 800ad0c:	40014800 	.word	0x40014800
 800ad10:	40001800 	.word	0x40001800
 800ad14:	40001c00 	.word	0x40001c00
 800ad18:	40002000 	.word	0x40002000

0800ad1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b087      	sub	sp, #28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	f023 0201 	bic.w	r2, r3, #1
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f023 0303 	bic.w	r3, r3, #3
 800ad52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f023 0302 	bic.w	r3, r3, #2
 800ad64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a20      	ldr	r2, [pc, #128]	@ (800adf4 <TIM_OC1_SetConfig+0xd8>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d003      	beq.n	800ad80 <TIM_OC1_SetConfig+0x64>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a1f      	ldr	r2, [pc, #124]	@ (800adf8 <TIM_OC1_SetConfig+0xdc>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d10c      	bne.n	800ad9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f023 0308 	bic.w	r3, r3, #8
 800ad86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f023 0304 	bic.w	r3, r3, #4
 800ad98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a15      	ldr	r2, [pc, #84]	@ (800adf4 <TIM_OC1_SetConfig+0xd8>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d003      	beq.n	800adaa <TIM_OC1_SetConfig+0x8e>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a14      	ldr	r2, [pc, #80]	@ (800adf8 <TIM_OC1_SetConfig+0xdc>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d111      	bne.n	800adce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800adb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	695b      	ldr	r3, [r3, #20]
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	4313      	orrs	r3, r2
 800adcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	621a      	str	r2, [r3, #32]
}
 800ade8:	bf00      	nop
 800adea:	371c      	adds	r7, #28
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	40010000 	.word	0x40010000
 800adf8:	40010400 	.word	0x40010400

0800adfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	f023 0210 	bic.w	r2, r3, #16
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	021b      	lsls	r3, r3, #8
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f023 0320 	bic.w	r3, r3, #32
 800ae46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	011b      	lsls	r3, r3, #4
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a22      	ldr	r2, [pc, #136]	@ (800aee0 <TIM_OC2_SetConfig+0xe4>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d003      	beq.n	800ae64 <TIM_OC2_SetConfig+0x68>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a21      	ldr	r2, [pc, #132]	@ (800aee4 <TIM_OC2_SetConfig+0xe8>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d10d      	bne.n	800ae80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	011b      	lsls	r3, r3, #4
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a17      	ldr	r2, [pc, #92]	@ (800aee0 <TIM_OC2_SetConfig+0xe4>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d003      	beq.n	800ae90 <TIM_OC2_SetConfig+0x94>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a16      	ldr	r2, [pc, #88]	@ (800aee4 <TIM_OC2_SetConfig+0xe8>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d113      	bne.n	800aeb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	621a      	str	r2, [r3, #32]
}
 800aed2:	bf00      	nop
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	40010000 	.word	0x40010000
 800aee4:	40010400 	.word	0x40010400

0800aee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f023 0303 	bic.w	r3, r3, #3
 800af1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	4313      	orrs	r3, r2
 800af28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	021b      	lsls	r3, r3, #8
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a21      	ldr	r2, [pc, #132]	@ (800afc8 <TIM_OC3_SetConfig+0xe0>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d003      	beq.n	800af4e <TIM_OC3_SetConfig+0x66>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a20      	ldr	r2, [pc, #128]	@ (800afcc <TIM_OC3_SetConfig+0xe4>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d10d      	bne.n	800af6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	021b      	lsls	r3, r3, #8
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	4313      	orrs	r3, r2
 800af60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a16      	ldr	r2, [pc, #88]	@ (800afc8 <TIM_OC3_SetConfig+0xe0>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d003      	beq.n	800af7a <TIM_OC3_SetConfig+0x92>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a15      	ldr	r2, [pc, #84]	@ (800afcc <TIM_OC3_SetConfig+0xe4>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d113      	bne.n	800afa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	011b      	lsls	r3, r3, #4
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	4313      	orrs	r3, r2
 800af94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	011b      	lsls	r3, r3, #4
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	685a      	ldr	r2, [r3, #4]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	621a      	str	r2, [r3, #32]
}
 800afbc:	bf00      	nop
 800afbe:	371c      	adds	r7, #28
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr
 800afc8:	40010000 	.word	0x40010000
 800afcc:	40010400 	.word	0x40010400

0800afd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b087      	sub	sp, #28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a1b      	ldr	r3, [r3, #32]
 800afe4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800affe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	021b      	lsls	r3, r3, #8
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	4313      	orrs	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b01a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	031b      	lsls	r3, r3, #12
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	4313      	orrs	r3, r2
 800b026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a12      	ldr	r2, [pc, #72]	@ (800b074 <TIM_OC4_SetConfig+0xa4>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d003      	beq.n	800b038 <TIM_OC4_SetConfig+0x68>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a11      	ldr	r2, [pc, #68]	@ (800b078 <TIM_OC4_SetConfig+0xa8>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d109      	bne.n	800b04c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b03e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	019b      	lsls	r3, r3, #6
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	4313      	orrs	r3, r2
 800b04a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	621a      	str	r2, [r3, #32]
}
 800b066:	bf00      	nop
 800b068:	371c      	adds	r7, #28
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	40010000 	.word	0x40010000
 800b078:	40010400 	.word	0x40010400

0800b07c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b087      	sub	sp, #28
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	f023 0201 	bic.w	r2, r3, #1
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	011b      	lsls	r3, r3, #4
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f023 030a 	bic.w	r3, r3, #10
 800b0b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	621a      	str	r2, [r3, #32]
}
 800b0ce:	bf00      	nop
 800b0d0:	371c      	adds	r7, #28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b087      	sub	sp, #28
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	60f8      	str	r0, [r7, #12]
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6a1b      	ldr	r3, [r3, #32]
 800b0f0:	f023 0210 	bic.w	r2, r3, #16
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	031b      	lsls	r3, r3, #12
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b116:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	011b      	lsls	r3, r3, #4
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	4313      	orrs	r3, r2
 800b120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	621a      	str	r2, [r3, #32]
}
 800b12e:	bf00      	nop
 800b130:	371c      	adds	r7, #28
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b085      	sub	sp, #20
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4313      	orrs	r3, r2
 800b158:	f043 0307 	orr.w	r3, r3, #7
 800b15c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	609a      	str	r2, [r3, #8]
}
 800b164:	bf00      	nop
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b170:	b480      	push	{r7}
 800b172:	b087      	sub	sp, #28
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b18a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	021a      	lsls	r2, r3, #8
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	431a      	orrs	r2, r3
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	4313      	orrs	r3, r2
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	697a      	ldr	r2, [r7, #20]
 800b1a2:	609a      	str	r2, [r3, #8]
}
 800b1a4:	bf00      	nop
 800b1a6:	371c      	adds	r7, #28
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b087      	sub	sp, #28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	f003 031f 	and.w	r3, r3, #31
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6a1a      	ldr	r2, [r3, #32]
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	43db      	mvns	r3, r3
 800b1d2:	401a      	ands	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6a1a      	ldr	r2, [r3, #32]
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	f003 031f 	and.w	r3, r3, #31
 800b1e2:	6879      	ldr	r1, [r7, #4]
 800b1e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b1e8:	431a      	orrs	r2, r3
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	621a      	str	r2, [r3, #32]
}
 800b1ee:	bf00      	nop
 800b1f0:	371c      	adds	r7, #28
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d101      	bne.n	800b214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b210:	2302      	movs	r3, #2
 800b212:	e05a      	b.n	800b2ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2202      	movs	r2, #2
 800b220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b23a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4313      	orrs	r3, r2
 800b244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a21      	ldr	r2, [pc, #132]	@ (800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d022      	beq.n	800b29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b260:	d01d      	beq.n	800b29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a1d      	ldr	r2, [pc, #116]	@ (800b2dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d018      	beq.n	800b29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a1b      	ldr	r2, [pc, #108]	@ (800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d013      	beq.n	800b29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a1a      	ldr	r2, [pc, #104]	@ (800b2e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d00e      	beq.n	800b29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a18      	ldr	r2, [pc, #96]	@ (800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d009      	beq.n	800b29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a17      	ldr	r2, [pc, #92]	@ (800b2ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d004      	beq.n	800b29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a15      	ldr	r2, [pc, #84]	@ (800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d10c      	bne.n	800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	40010000 	.word	0x40010000
 800b2dc:	40000400 	.word	0x40000400
 800b2e0:	40000800 	.word	0x40000800
 800b2e4:	40000c00 	.word	0x40000c00
 800b2e8:	40010400 	.word	0x40010400
 800b2ec:	40014000 	.word	0x40014000
 800b2f0:	40001800 	.word	0x40001800

0800b2f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d101      	bne.n	800b310 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b30c:	2302      	movs	r3, #2
 800b30e:	e03d      	b.n	800b38c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	4313      	orrs	r3, r2
 800b332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	4313      	orrs	r3, r2
 800b340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	4313      	orrs	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	4313      	orrs	r3, r2
 800b378:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e042      	b.n	800b458 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7f8 f970 	bl	80036cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2224      	movs	r2, #36	@ 0x24
 800b3f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68da      	ldr	r2, [r3, #12]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f973 	bl	800b6f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	691a      	ldr	r2, [r3, #16]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	695a      	ldr	r2, [r3, #20]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68da      	ldr	r2, [r3, #12]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2220      	movs	r2, #32
 800b444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2220      	movs	r2, #32
 800b44c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b08a      	sub	sp, #40	@ 0x28
 800b464:	af02      	add	r7, sp, #8
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	603b      	str	r3, [r7, #0]
 800b46c:	4613      	mov	r3, r2
 800b46e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b470:	2300      	movs	r3, #0
 800b472:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	2b20      	cmp	r3, #32
 800b47e:	d175      	bne.n	800b56c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d002      	beq.n	800b48c <HAL_UART_Transmit+0x2c>
 800b486:	88fb      	ldrh	r3, [r7, #6]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e06e      	b.n	800b56e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2221      	movs	r2, #33	@ 0x21
 800b49a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b49e:	f7f8 fd81 	bl	8003fa4 <HAL_GetTick>
 800b4a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	88fa      	ldrh	r2, [r7, #6]
 800b4a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	88fa      	ldrh	r2, [r7, #6]
 800b4ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4b8:	d108      	bne.n	800b4cc <HAL_UART_Transmit+0x6c>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d104      	bne.n	800b4cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	61bb      	str	r3, [r7, #24]
 800b4ca:	e003      	b.n	800b4d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b4d4:	e02e      	b.n	800b534 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2180      	movs	r1, #128	@ 0x80
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 f848 	bl	800b576 <UART_WaitOnFlagUntilTimeout>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d005      	beq.n	800b4f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	e03a      	b.n	800b56e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10b      	bne.n	800b516 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	881b      	ldrh	r3, [r3, #0]
 800b502:	461a      	mov	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b50c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	3302      	adds	r3, #2
 800b512:	61bb      	str	r3, [r7, #24]
 800b514:	e007      	b.n	800b526 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	781a      	ldrb	r2, [r3, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	3301      	adds	r3, #1
 800b524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	3b01      	subs	r3, #1
 800b52e:	b29a      	uxth	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b538:	b29b      	uxth	r3, r3
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1cb      	bne.n	800b4d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	2200      	movs	r2, #0
 800b546:	2140      	movs	r1, #64	@ 0x40
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 f814 	bl	800b576 <UART_WaitOnFlagUntilTimeout>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2220      	movs	r2, #32
 800b558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b55c:	2303      	movs	r3, #3
 800b55e:	e006      	b.n	800b56e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2220      	movs	r2, #32
 800b564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b568:	2300      	movs	r3, #0
 800b56a:	e000      	b.n	800b56e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b56c:	2302      	movs	r3, #2
  }
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3720      	adds	r7, #32
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b086      	sub	sp, #24
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	60f8      	str	r0, [r7, #12]
 800b57e:	60b9      	str	r1, [r7, #8]
 800b580:	603b      	str	r3, [r7, #0]
 800b582:	4613      	mov	r3, r2
 800b584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b586:	e03b      	b.n	800b600 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b588:	6a3b      	ldr	r3, [r7, #32]
 800b58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58e:	d037      	beq.n	800b600 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b590:	f7f8 fd08 	bl	8003fa4 <HAL_GetTick>
 800b594:	4602      	mov	r2, r0
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	1ad3      	subs	r3, r2, r3
 800b59a:	6a3a      	ldr	r2, [r7, #32]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d302      	bcc.n	800b5a6 <UART_WaitOnFlagUntilTimeout+0x30>
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	e03a      	b.n	800b620 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d023      	beq.n	800b600 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2b80      	cmp	r3, #128	@ 0x80
 800b5bc:	d020      	beq.n	800b600 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b40      	cmp	r3, #64	@ 0x40
 800b5c2:	d01d      	beq.n	800b600 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f003 0308 	and.w	r3, r3, #8
 800b5ce:	2b08      	cmp	r3, #8
 800b5d0:	d116      	bne.n	800b600 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	617b      	str	r3, [r7, #20]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	617b      	str	r3, [r7, #20]
 800b5e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 f81d 	bl	800b628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2208      	movs	r2, #8
 800b5f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e00f      	b.n	800b620 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	4013      	ands	r3, r2
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	bf0c      	ite	eq
 800b610:	2301      	moveq	r3, #1
 800b612:	2300      	movne	r3, #0
 800b614:	b2db      	uxtb	r3, r3
 800b616:	461a      	mov	r2, r3
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d0b4      	beq.n	800b588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3718      	adds	r7, #24
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b628:	b480      	push	{r7}
 800b62a:	b095      	sub	sp, #84	@ 0x54
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	330c      	adds	r3, #12
 800b636:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b63a:	e853 3f00 	ldrex	r3, [r3]
 800b63e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b642:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	330c      	adds	r3, #12
 800b64e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b650:	643a      	str	r2, [r7, #64]	@ 0x40
 800b652:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b654:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b656:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b658:	e841 2300 	strex	r3, r2, [r1]
 800b65c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1e5      	bne.n	800b630 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	3314      	adds	r3, #20
 800b66a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	e853 3f00 	ldrex	r3, [r3]
 800b672:	61fb      	str	r3, [r7, #28]
   return(result);
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	f023 0301 	bic.w	r3, r3, #1
 800b67a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3314      	adds	r3, #20
 800b682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b684:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b686:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b68a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e5      	bne.n	800b664 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d119      	bne.n	800b6d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	330c      	adds	r3, #12
 800b6a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	e853 3f00 	ldrex	r3, [r3]
 800b6ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	f023 0310 	bic.w	r3, r3, #16
 800b6b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	330c      	adds	r3, #12
 800b6be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6c0:	61ba      	str	r2, [r7, #24]
 800b6c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c4:	6979      	ldr	r1, [r7, #20]
 800b6c6:	69ba      	ldr	r2, [r7, #24]
 800b6c8:	e841 2300 	strex	r3, r2, [r1]
 800b6cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1e5      	bne.n	800b6a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b6e2:	bf00      	nop
 800b6e4:	3754      	adds	r7, #84	@ 0x54
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
	...

0800b6f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6f4:	b0c0      	sub	sp, #256	@ 0x100
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b70c:	68d9      	ldr	r1, [r3, #12]
 800b70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	ea40 0301 	orr.w	r3, r0, r1
 800b718:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b71a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b71e:	689a      	ldr	r2, [r3, #8]
 800b720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	431a      	orrs	r2, r3
 800b728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b72c:	695b      	ldr	r3, [r3, #20]
 800b72e:	431a      	orrs	r2, r3
 800b730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b734:	69db      	ldr	r3, [r3, #28]
 800b736:	4313      	orrs	r3, r2
 800b738:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b73c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b748:	f021 010c 	bic.w	r1, r1, #12
 800b74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b756:	430b      	orrs	r3, r1
 800b758:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b75a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	695b      	ldr	r3, [r3, #20]
 800b762:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b76a:	6999      	ldr	r1, [r3, #24]
 800b76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	ea40 0301 	orr.w	r3, r0, r1
 800b776:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	4b8f      	ldr	r3, [pc, #572]	@ (800b9bc <UART_SetConfig+0x2cc>)
 800b780:	429a      	cmp	r2, r3
 800b782:	d005      	beq.n	800b790 <UART_SetConfig+0xa0>
 800b784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	4b8d      	ldr	r3, [pc, #564]	@ (800b9c0 <UART_SetConfig+0x2d0>)
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d104      	bne.n	800b79a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b790:	f7fe f8cc 	bl	800992c <HAL_RCC_GetPCLK2Freq>
 800b794:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b798:	e003      	b.n	800b7a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b79a:	f7fe f8b3 	bl	8009904 <HAL_RCC_GetPCLK1Freq>
 800b79e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7a6:	69db      	ldr	r3, [r3, #28]
 800b7a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7ac:	f040 810c 	bne.w	800b9c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b7b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b7ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b7be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b7c2:	4622      	mov	r2, r4
 800b7c4:	462b      	mov	r3, r5
 800b7c6:	1891      	adds	r1, r2, r2
 800b7c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b7ca:	415b      	adcs	r3, r3
 800b7cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	eb12 0801 	adds.w	r8, r2, r1
 800b7d8:	4629      	mov	r1, r5
 800b7da:	eb43 0901 	adc.w	r9, r3, r1
 800b7de:	f04f 0200 	mov.w	r2, #0
 800b7e2:	f04f 0300 	mov.w	r3, #0
 800b7e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b7ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b7ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b7f2:	4690      	mov	r8, r2
 800b7f4:	4699      	mov	r9, r3
 800b7f6:	4623      	mov	r3, r4
 800b7f8:	eb18 0303 	adds.w	r3, r8, r3
 800b7fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b800:	462b      	mov	r3, r5
 800b802:	eb49 0303 	adc.w	r3, r9, r3
 800b806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b80a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b816:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b81a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b81e:	460b      	mov	r3, r1
 800b820:	18db      	adds	r3, r3, r3
 800b822:	653b      	str	r3, [r7, #80]	@ 0x50
 800b824:	4613      	mov	r3, r2
 800b826:	eb42 0303 	adc.w	r3, r2, r3
 800b82a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b82c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b830:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b834:	f7f5 fa18 	bl	8000c68 <__aeabi_uldivmod>
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	4b61      	ldr	r3, [pc, #388]	@ (800b9c4 <UART_SetConfig+0x2d4>)
 800b83e:	fba3 2302 	umull	r2, r3, r3, r2
 800b842:	095b      	lsrs	r3, r3, #5
 800b844:	011c      	lsls	r4, r3, #4
 800b846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b84a:	2200      	movs	r2, #0
 800b84c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b850:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b854:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b858:	4642      	mov	r2, r8
 800b85a:	464b      	mov	r3, r9
 800b85c:	1891      	adds	r1, r2, r2
 800b85e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b860:	415b      	adcs	r3, r3
 800b862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b864:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b868:	4641      	mov	r1, r8
 800b86a:	eb12 0a01 	adds.w	sl, r2, r1
 800b86e:	4649      	mov	r1, r9
 800b870:	eb43 0b01 	adc.w	fp, r3, r1
 800b874:	f04f 0200 	mov.w	r2, #0
 800b878:	f04f 0300 	mov.w	r3, #0
 800b87c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b880:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b888:	4692      	mov	sl, r2
 800b88a:	469b      	mov	fp, r3
 800b88c:	4643      	mov	r3, r8
 800b88e:	eb1a 0303 	adds.w	r3, sl, r3
 800b892:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b896:	464b      	mov	r3, r9
 800b898:	eb4b 0303 	adc.w	r3, fp, r3
 800b89c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b8ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b8b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	18db      	adds	r3, r3, r3
 800b8b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	eb42 0303 	adc.w	r3, r2, r3
 800b8c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b8c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b8ca:	f7f5 f9cd 	bl	8000c68 <__aeabi_uldivmod>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	4b3b      	ldr	r3, [pc, #236]	@ (800b9c4 <UART_SetConfig+0x2d4>)
 800b8d6:	fba3 2301 	umull	r2, r3, r3, r1
 800b8da:	095b      	lsrs	r3, r3, #5
 800b8dc:	2264      	movs	r2, #100	@ 0x64
 800b8de:	fb02 f303 	mul.w	r3, r2, r3
 800b8e2:	1acb      	subs	r3, r1, r3
 800b8e4:	00db      	lsls	r3, r3, #3
 800b8e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b8ea:	4b36      	ldr	r3, [pc, #216]	@ (800b9c4 <UART_SetConfig+0x2d4>)
 800b8ec:	fba3 2302 	umull	r2, r3, r3, r2
 800b8f0:	095b      	lsrs	r3, r3, #5
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b8f8:	441c      	add	r4, r3
 800b8fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8fe:	2200      	movs	r2, #0
 800b900:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b904:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b908:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b90c:	4642      	mov	r2, r8
 800b90e:	464b      	mov	r3, r9
 800b910:	1891      	adds	r1, r2, r2
 800b912:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b914:	415b      	adcs	r3, r3
 800b916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b91c:	4641      	mov	r1, r8
 800b91e:	1851      	adds	r1, r2, r1
 800b920:	6339      	str	r1, [r7, #48]	@ 0x30
 800b922:	4649      	mov	r1, r9
 800b924:	414b      	adcs	r3, r1
 800b926:	637b      	str	r3, [r7, #52]	@ 0x34
 800b928:	f04f 0200 	mov.w	r2, #0
 800b92c:	f04f 0300 	mov.w	r3, #0
 800b930:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b934:	4659      	mov	r1, fp
 800b936:	00cb      	lsls	r3, r1, #3
 800b938:	4651      	mov	r1, sl
 800b93a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b93e:	4651      	mov	r1, sl
 800b940:	00ca      	lsls	r2, r1, #3
 800b942:	4610      	mov	r0, r2
 800b944:	4619      	mov	r1, r3
 800b946:	4603      	mov	r3, r0
 800b948:	4642      	mov	r2, r8
 800b94a:	189b      	adds	r3, r3, r2
 800b94c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b950:	464b      	mov	r3, r9
 800b952:	460a      	mov	r2, r1
 800b954:	eb42 0303 	adc.w	r3, r2, r3
 800b958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b968:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b96c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b970:	460b      	mov	r3, r1
 800b972:	18db      	adds	r3, r3, r3
 800b974:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b976:	4613      	mov	r3, r2
 800b978:	eb42 0303 	adc.w	r3, r2, r3
 800b97c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b97e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b982:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b986:	f7f5 f96f 	bl	8000c68 <__aeabi_uldivmod>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c4 <UART_SetConfig+0x2d4>)
 800b990:	fba3 1302 	umull	r1, r3, r3, r2
 800b994:	095b      	lsrs	r3, r3, #5
 800b996:	2164      	movs	r1, #100	@ 0x64
 800b998:	fb01 f303 	mul.w	r3, r1, r3
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	3332      	adds	r3, #50	@ 0x32
 800b9a2:	4a08      	ldr	r2, [pc, #32]	@ (800b9c4 <UART_SetConfig+0x2d4>)
 800b9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a8:	095b      	lsrs	r3, r3, #5
 800b9aa:	f003 0207 	and.w	r2, r3, #7
 800b9ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4422      	add	r2, r4
 800b9b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b9b8:	e106      	b.n	800bbc8 <UART_SetConfig+0x4d8>
 800b9ba:	bf00      	nop
 800b9bc:	40011000 	.word	0x40011000
 800b9c0:	40011400 	.word	0x40011400
 800b9c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b9c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b9d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b9d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b9da:	4642      	mov	r2, r8
 800b9dc:	464b      	mov	r3, r9
 800b9de:	1891      	adds	r1, r2, r2
 800b9e0:	6239      	str	r1, [r7, #32]
 800b9e2:	415b      	adcs	r3, r3
 800b9e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b9ea:	4641      	mov	r1, r8
 800b9ec:	1854      	adds	r4, r2, r1
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	eb43 0501 	adc.w	r5, r3, r1
 800b9f4:	f04f 0200 	mov.w	r2, #0
 800b9f8:	f04f 0300 	mov.w	r3, #0
 800b9fc:	00eb      	lsls	r3, r5, #3
 800b9fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ba02:	00e2      	lsls	r2, r4, #3
 800ba04:	4614      	mov	r4, r2
 800ba06:	461d      	mov	r5, r3
 800ba08:	4643      	mov	r3, r8
 800ba0a:	18e3      	adds	r3, r4, r3
 800ba0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ba10:	464b      	mov	r3, r9
 800ba12:	eb45 0303 	adc.w	r3, r5, r3
 800ba16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ba1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ba2a:	f04f 0200 	mov.w	r2, #0
 800ba2e:	f04f 0300 	mov.w	r3, #0
 800ba32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ba36:	4629      	mov	r1, r5
 800ba38:	008b      	lsls	r3, r1, #2
 800ba3a:	4621      	mov	r1, r4
 800ba3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba40:	4621      	mov	r1, r4
 800ba42:	008a      	lsls	r2, r1, #2
 800ba44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ba48:	f7f5 f90e 	bl	8000c68 <__aeabi_uldivmod>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	460b      	mov	r3, r1
 800ba50:	4b60      	ldr	r3, [pc, #384]	@ (800bbd4 <UART_SetConfig+0x4e4>)
 800ba52:	fba3 2302 	umull	r2, r3, r3, r2
 800ba56:	095b      	lsrs	r3, r3, #5
 800ba58:	011c      	lsls	r4, r3, #4
 800ba5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ba68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ba6c:	4642      	mov	r2, r8
 800ba6e:	464b      	mov	r3, r9
 800ba70:	1891      	adds	r1, r2, r2
 800ba72:	61b9      	str	r1, [r7, #24]
 800ba74:	415b      	adcs	r3, r3
 800ba76:	61fb      	str	r3, [r7, #28]
 800ba78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba7c:	4641      	mov	r1, r8
 800ba7e:	1851      	adds	r1, r2, r1
 800ba80:	6139      	str	r1, [r7, #16]
 800ba82:	4649      	mov	r1, r9
 800ba84:	414b      	adcs	r3, r1
 800ba86:	617b      	str	r3, [r7, #20]
 800ba88:	f04f 0200 	mov.w	r2, #0
 800ba8c:	f04f 0300 	mov.w	r3, #0
 800ba90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba94:	4659      	mov	r1, fp
 800ba96:	00cb      	lsls	r3, r1, #3
 800ba98:	4651      	mov	r1, sl
 800ba9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba9e:	4651      	mov	r1, sl
 800baa0:	00ca      	lsls	r2, r1, #3
 800baa2:	4610      	mov	r0, r2
 800baa4:	4619      	mov	r1, r3
 800baa6:	4603      	mov	r3, r0
 800baa8:	4642      	mov	r2, r8
 800baaa:	189b      	adds	r3, r3, r2
 800baac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bab0:	464b      	mov	r3, r9
 800bab2:	460a      	mov	r2, r1
 800bab4:	eb42 0303 	adc.w	r3, r2, r3
 800bab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800babc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bac6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bac8:	f04f 0200 	mov.w	r2, #0
 800bacc:	f04f 0300 	mov.w	r3, #0
 800bad0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bad4:	4649      	mov	r1, r9
 800bad6:	008b      	lsls	r3, r1, #2
 800bad8:	4641      	mov	r1, r8
 800bada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bade:	4641      	mov	r1, r8
 800bae0:	008a      	lsls	r2, r1, #2
 800bae2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bae6:	f7f5 f8bf 	bl	8000c68 <__aeabi_uldivmod>
 800baea:	4602      	mov	r2, r0
 800baec:	460b      	mov	r3, r1
 800baee:	4611      	mov	r1, r2
 800baf0:	4b38      	ldr	r3, [pc, #224]	@ (800bbd4 <UART_SetConfig+0x4e4>)
 800baf2:	fba3 2301 	umull	r2, r3, r3, r1
 800baf6:	095b      	lsrs	r3, r3, #5
 800baf8:	2264      	movs	r2, #100	@ 0x64
 800bafa:	fb02 f303 	mul.w	r3, r2, r3
 800bafe:	1acb      	subs	r3, r1, r3
 800bb00:	011b      	lsls	r3, r3, #4
 800bb02:	3332      	adds	r3, #50	@ 0x32
 800bb04:	4a33      	ldr	r2, [pc, #204]	@ (800bbd4 <UART_SetConfig+0x4e4>)
 800bb06:	fba2 2303 	umull	r2, r3, r2, r3
 800bb0a:	095b      	lsrs	r3, r3, #5
 800bb0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bb10:	441c      	add	r4, r3
 800bb12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb16:	2200      	movs	r2, #0
 800bb18:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb1a:	677a      	str	r2, [r7, #116]	@ 0x74
 800bb1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bb20:	4642      	mov	r2, r8
 800bb22:	464b      	mov	r3, r9
 800bb24:	1891      	adds	r1, r2, r2
 800bb26:	60b9      	str	r1, [r7, #8]
 800bb28:	415b      	adcs	r3, r3
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb30:	4641      	mov	r1, r8
 800bb32:	1851      	adds	r1, r2, r1
 800bb34:	6039      	str	r1, [r7, #0]
 800bb36:	4649      	mov	r1, r9
 800bb38:	414b      	adcs	r3, r1
 800bb3a:	607b      	str	r3, [r7, #4]
 800bb3c:	f04f 0200 	mov.w	r2, #0
 800bb40:	f04f 0300 	mov.w	r3, #0
 800bb44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bb48:	4659      	mov	r1, fp
 800bb4a:	00cb      	lsls	r3, r1, #3
 800bb4c:	4651      	mov	r1, sl
 800bb4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb52:	4651      	mov	r1, sl
 800bb54:	00ca      	lsls	r2, r1, #3
 800bb56:	4610      	mov	r0, r2
 800bb58:	4619      	mov	r1, r3
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	4642      	mov	r2, r8
 800bb5e:	189b      	adds	r3, r3, r2
 800bb60:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb62:	464b      	mov	r3, r9
 800bb64:	460a      	mov	r2, r1
 800bb66:	eb42 0303 	adc.w	r3, r2, r3
 800bb6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb76:	667a      	str	r2, [r7, #100]	@ 0x64
 800bb78:	f04f 0200 	mov.w	r2, #0
 800bb7c:	f04f 0300 	mov.w	r3, #0
 800bb80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bb84:	4649      	mov	r1, r9
 800bb86:	008b      	lsls	r3, r1, #2
 800bb88:	4641      	mov	r1, r8
 800bb8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb8e:	4641      	mov	r1, r8
 800bb90:	008a      	lsls	r2, r1, #2
 800bb92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bb96:	f7f5 f867 	bl	8000c68 <__aeabi_uldivmod>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bbd4 <UART_SetConfig+0x4e4>)
 800bba0:	fba3 1302 	umull	r1, r3, r3, r2
 800bba4:	095b      	lsrs	r3, r3, #5
 800bba6:	2164      	movs	r1, #100	@ 0x64
 800bba8:	fb01 f303 	mul.w	r3, r1, r3
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	011b      	lsls	r3, r3, #4
 800bbb0:	3332      	adds	r3, #50	@ 0x32
 800bbb2:	4a08      	ldr	r2, [pc, #32]	@ (800bbd4 <UART_SetConfig+0x4e4>)
 800bbb4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb8:	095b      	lsrs	r3, r3, #5
 800bbba:	f003 020f 	and.w	r2, r3, #15
 800bbbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4422      	add	r2, r4
 800bbc6:	609a      	str	r2, [r3, #8]
}
 800bbc8:	bf00      	nop
 800bbca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbd4:	51eb851f 	.word	0x51eb851f

0800bbd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bbd8:	b084      	sub	sp, #16
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b084      	sub	sp, #16
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	f107 001c 	add.w	r0, r7, #28
 800bbe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bbea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d123      	bne.n	800bc3a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbf6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800bc06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bc1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d105      	bne.n	800bc2e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f9dc 	bl	800bfec <USB_CoreReset>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]
 800bc38:	e01b      	b.n	800bc72 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f9d0 	bl	800bfec <USB_CoreReset>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bc50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d106      	bne.n	800bc66 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	639a      	str	r2, [r3, #56]	@ 0x38
 800bc64:	e005      	b.n	800bc72 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bc72:	7fbb      	ldrb	r3, [r7, #30]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d10b      	bne.n	800bc90 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	f043 0206 	orr.w	r2, r3, #6
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	f043 0220 	orr.w	r2, r3, #32
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc9c:	b004      	add	sp, #16
 800bc9e:	4770      	bx	lr

0800bca0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	f043 0201 	orr.w	r2, r3, #1
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	370c      	adds	r7, #12
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr

0800bcc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcc2:	b480      	push	{r7}
 800bcc4:	b083      	sub	sp, #12
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	f023 0201 	bic.w	r2, r3, #1
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bd00:	78fb      	ldrb	r3, [r7, #3]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d115      	bne.n	800bd32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd12:	200a      	movs	r0, #10
 800bd14:	f7f8 f952 	bl	8003fbc <HAL_Delay>
      ms += 10U;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	330a      	adds	r3, #10
 800bd1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f956 	bl	800bfd0 <USB_GetMode>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d01e      	beq.n	800bd68 <USB_SetCurrentMode+0x84>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2bc7      	cmp	r3, #199	@ 0xc7
 800bd2e:	d9f0      	bls.n	800bd12 <USB_SetCurrentMode+0x2e>
 800bd30:	e01a      	b.n	800bd68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bd32:	78fb      	ldrb	r3, [r7, #3]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d115      	bne.n	800bd64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd44:	200a      	movs	r0, #10
 800bd46:	f7f8 f939 	bl	8003fbc <HAL_Delay>
      ms += 10U;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	330a      	adds	r3, #10
 800bd4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f93d 	bl	800bfd0 <USB_GetMode>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d005      	beq.n	800bd68 <USB_SetCurrentMode+0x84>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2bc7      	cmp	r3, #199	@ 0xc7
 800bd60:	d9f0      	bls.n	800bd44 <USB_SetCurrentMode+0x60>
 800bd62:	e001      	b.n	800bd68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e005      	b.n	800bd74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2bc8      	cmp	r3, #200	@ 0xc8
 800bd6c:	d101      	bne.n	800bd72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e000      	b.n	800bd74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd86:	2300      	movs	r3, #0
 800bd88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd96:	d901      	bls.n	800bd9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e01b      	b.n	800bdd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	daf2      	bge.n	800bd8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bda4:	2300      	movs	r3, #0
 800bda6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	019b      	lsls	r3, r3, #6
 800bdac:	f043 0220 	orr.w	r2, r3, #32
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdc0:	d901      	bls.n	800bdc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e006      	b.n	800bdd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	f003 0320 	and.w	r3, r3, #32
 800bdce:	2b20      	cmp	r3, #32
 800bdd0:	d0f0      	beq.n	800bdb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bde8:	2300      	movs	r3, #0
 800bdea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdf8:	d901      	bls.n	800bdfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	e018      	b.n	800be30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	691b      	ldr	r3, [r3, #16]
 800be02:	2b00      	cmp	r3, #0
 800be04:	daf2      	bge.n	800bdec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800be06:	2300      	movs	r3, #0
 800be08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2210      	movs	r2, #16
 800be0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3301      	adds	r3, #1
 800be14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be1c:	d901      	bls.n	800be22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800be1e:	2303      	movs	r3, #3
 800be20:	e006      	b.n	800be30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	f003 0310 	and.w	r3, r3, #16
 800be2a:	2b10      	cmp	r3, #16
 800be2c:	d0f0      	beq.n	800be10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b089      	sub	sp, #36	@ 0x24
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	4611      	mov	r1, r2
 800be48:	461a      	mov	r2, r3
 800be4a:	460b      	mov	r3, r1
 800be4c:	71fb      	strb	r3, [r7, #7]
 800be4e:	4613      	mov	r3, r2
 800be50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800be5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d123      	bne.n	800beaa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800be62:	88bb      	ldrh	r3, [r7, #4]
 800be64:	3303      	adds	r3, #3
 800be66:	089b      	lsrs	r3, r3, #2
 800be68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800be6a:	2300      	movs	r3, #0
 800be6c:	61bb      	str	r3, [r7, #24]
 800be6e:	e018      	b.n	800bea2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	031a      	lsls	r2, r3, #12
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	4413      	add	r3, r2
 800be78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be7c:	461a      	mov	r2, r3
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	6013      	str	r3, [r2, #0]
      pSrc++;
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	3301      	adds	r3, #1
 800be88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	3301      	adds	r3, #1
 800be8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	3301      	adds	r3, #1
 800be94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	3301      	adds	r3, #1
 800be9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	3301      	adds	r3, #1
 800bea0:	61bb      	str	r3, [r7, #24]
 800bea2:	69ba      	ldr	r2, [r7, #24]
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d3e2      	bcc.n	800be70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3724      	adds	r7, #36	@ 0x24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800beb8:	b480      	push	{r7}
 800beba:	b08b      	sub	sp, #44	@ 0x2c
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	4613      	mov	r3, r2
 800bec4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bece:	88fb      	ldrh	r3, [r7, #6]
 800bed0:	089b      	lsrs	r3, r3, #2
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bed6:	88fb      	ldrh	r3, [r7, #6]
 800bed8:	f003 0303 	and.w	r3, r3, #3
 800bedc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bede:	2300      	movs	r3, #0
 800bee0:	623b      	str	r3, [r7, #32]
 800bee2:	e014      	b.n	800bf0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beee:	601a      	str	r2, [r3, #0]
    pDest++;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef2:	3301      	adds	r3, #1
 800bef4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef8:	3301      	adds	r3, #1
 800befa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	3301      	adds	r3, #1
 800bf00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bf02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf04:	3301      	adds	r3, #1
 800bf06:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800bf08:	6a3b      	ldr	r3, [r7, #32]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	623b      	str	r3, [r7, #32]
 800bf0e:	6a3a      	ldr	r2, [r7, #32]
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d3e6      	bcc.n	800bee4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bf16:	8bfb      	ldrh	r3, [r7, #30]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d01e      	beq.n	800bf5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf26:	461a      	mov	r2, r3
 800bf28:	f107 0310 	add.w	r3, r7, #16
 800bf2c:	6812      	ldr	r2, [r2, #0]
 800bf2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf30:	693a      	ldr	r2, [r7, #16]
 800bf32:	6a3b      	ldr	r3, [r7, #32]
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	00db      	lsls	r3, r3, #3
 800bf38:	fa22 f303 	lsr.w	r3, r2, r3
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf40:	701a      	strb	r2, [r3, #0]
      i++;
 800bf42:	6a3b      	ldr	r3, [r7, #32]
 800bf44:	3301      	adds	r3, #1
 800bf46:	623b      	str	r3, [r7, #32]
      pDest++;
 800bf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800bf4e:	8bfb      	ldrh	r3, [r7, #30]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bf54:	8bfb      	ldrh	r3, [r7, #30]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1ea      	bne.n	800bf30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	372c      	adds	r7, #44	@ 0x2c
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	695b      	ldr	r3, [r3, #20]
 800bf74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	699b      	ldr	r3, [r3, #24]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bf80:	68fb      	ldr	r3, [r7, #12]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3714      	adds	r7, #20
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	b085      	sub	sp, #20
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	460b      	mov	r3, r1
 800bf98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800bf9e:	78fb      	ldrb	r3, [r7, #3]
 800bfa0:	015a      	lsls	r2, r3, #5
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800bfae:	78fb      	ldrb	r3, [r7, #3]
 800bfb0:	015a      	lsls	r2, r3, #5
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	4013      	ands	r3, r2
 800bfc0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bfc2:	68bb      	ldr	r3, [r7, #8]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3714      	adds	r7, #20
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	695b      	ldr	r3, [r3, #20]
 800bfdc:	f003 0301 	and.w	r3, r3, #1
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bff4:	2300      	movs	r3, #0
 800bff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	3301      	adds	r3, #1
 800bffc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c004:	d901      	bls.n	800c00a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e01b      	b.n	800c042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	daf2      	bge.n	800bff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c012:	2300      	movs	r3, #0
 800c014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	f043 0201 	orr.w	r2, r3, #1
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3301      	adds	r3, #1
 800c026:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c02e:	d901      	bls.n	800c034 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c030:	2303      	movs	r3, #3
 800c032:	e006      	b.n	800c042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d0f0      	beq.n	800c022 <USB_CoreReset+0x36>

  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
	...

0800c050 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c050:	b084      	sub	sp, #16
 800c052:	b580      	push	{r7, lr}
 800c054:	b086      	sub	sp, #24
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c05e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c062:	2300      	movs	r3, #0
 800c064:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c070:	461a      	mov	r2, r3
 800c072:	2300      	movs	r3, #0
 800c074:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c07a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c086:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c092:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d119      	bne.n	800c0da <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c0a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d10a      	bne.n	800c0c4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c0bc:	f043 0304 	orr.w	r3, r3, #4
 800c0c0:	6013      	str	r3, [r2, #0]
 800c0c2:	e014      	b.n	800c0ee <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c0d2:	f023 0304 	bic.w	r3, r3, #4
 800c0d6:	6013      	str	r3, [r2, #0]
 800c0d8:	e009      	b.n	800c0ee <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c0e8:	f023 0304 	bic.w	r3, r3, #4
 800c0ec:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0ee:	2110      	movs	r1, #16
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f7ff fe43 	bl	800bd7c <USB_FlushTxFifo>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d001      	beq.n	800c100 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff fe6d 	bl	800bde0 <USB_FlushRxFifo>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c110:	2300      	movs	r3, #0
 800c112:	613b      	str	r3, [r7, #16]
 800c114:	e015      	b.n	800c142 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	015a      	lsls	r2, r3, #5
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	4413      	add	r3, r2
 800c11e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c122:	461a      	mov	r2, r3
 800c124:	f04f 33ff 	mov.w	r3, #4294967295
 800c128:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	015a      	lsls	r2, r3, #5
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	4413      	add	r3, r2
 800c132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c136:	461a      	mov	r2, r3
 800c138:	2300      	movs	r3, #0
 800c13a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	3301      	adds	r3, #1
 800c140:	613b      	str	r3, [r7, #16]
 800c142:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c146:	461a      	mov	r2, r3
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d3e3      	bcc.n	800c116 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f04f 32ff 	mov.w	r2, #4294967295
 800c15a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a18      	ldr	r2, [pc, #96]	@ (800c1c0 <USB_HostInit+0x170>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d10b      	bne.n	800c17c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c16a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a15      	ldr	r2, [pc, #84]	@ (800c1c4 <USB_HostInit+0x174>)
 800c170:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a14      	ldr	r2, [pc, #80]	@ (800c1c8 <USB_HostInit+0x178>)
 800c176:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800c17a:	e009      	b.n	800c190 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2280      	movs	r2, #128	@ 0x80
 800c180:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a11      	ldr	r2, [pc, #68]	@ (800c1cc <USB_HostInit+0x17c>)
 800c186:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a11      	ldr	r2, [pc, #68]	@ (800c1d0 <USB_HostInit+0x180>)
 800c18c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c190:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c194:	2b00      	cmp	r3, #0
 800c196:	d105      	bne.n	800c1a4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	699b      	ldr	r3, [r3, #24]
 800c19c:	f043 0210 	orr.w	r2, r3, #16
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	699a      	ldr	r2, [r3, #24]
 800c1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c1d4 <USB_HostInit+0x184>)
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1bc:	b004      	add	sp, #16
 800c1be:	4770      	bx	lr
 800c1c0:	40040000 	.word	0x40040000
 800c1c4:	01000200 	.word	0x01000200
 800c1c8:	00e00300 	.word	0x00e00300
 800c1cc:	00600080 	.word	0x00600080
 800c1d0:	004000e0 	.word	0x004000e0
 800c1d4:	a3200008 	.word	0xa3200008

0800c1d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c1f6:	f023 0303 	bic.w	r3, r3, #3
 800c1fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	78fb      	ldrb	r3, [r7, #3]
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	68f9      	ldr	r1, [r7, #12]
 800c20c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c210:	4313      	orrs	r3, r2
 800c212:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c214:	78fb      	ldrb	r3, [r7, #3]
 800c216:	2b01      	cmp	r3, #1
 800c218:	d107      	bne.n	800c22a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c220:	461a      	mov	r2, r3
 800c222:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c226:	6053      	str	r3, [r2, #4]
 800c228:	e00c      	b.n	800c244 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800c22a:	78fb      	ldrb	r3, [r7, #3]
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d107      	bne.n	800c240 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c236:	461a      	mov	r2, r3
 800c238:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c23c:	6053      	str	r3, [r2, #4]
 800c23e:	e001      	b.n	800c244 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	e000      	b.n	800c246 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr

0800c252 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b084      	sub	sp, #16
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c25e:	2300      	movs	r3, #0
 800c260:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c272:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c27c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c280:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c282:	2064      	movs	r0, #100	@ 0x64
 800c284:	f7f7 fe9a 	bl	8003fbc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c294:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c296:	200a      	movs	r0, #10
 800c298:	f7f7 fe90 	bl	8003fbc <HAL_Delay>

  return HAL_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c2a6:	b480      	push	{r7}
 800c2a8:	b085      	sub	sp, #20
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c2ca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d109      	bne.n	800c2ea <USB_DriveVbus+0x44>
 800c2d6:	78fb      	ldrb	r3, [r7, #3]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d106      	bne.n	800c2ea <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c2e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c2e8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c2f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2f4:	d109      	bne.n	800c30a <USB_DriveVbus+0x64>
 800c2f6:	78fb      	ldrb	r3, [r7, #3]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d106      	bne.n	800c30a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c304:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c308:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c324:	2300      	movs	r3, #0
 800c326:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	0c5b      	lsrs	r3, r3, #17
 800c336:	f003 0303 	and.w	r3, r3, #3
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3714      	adds	r7, #20
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800c346:	b480      	push	{r7}
 800c348:	b085      	sub	sp, #20
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	b29b      	uxth	r3, r3
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b088      	sub	sp, #32
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	4608      	mov	r0, r1
 800c372:	4611      	mov	r1, r2
 800c374:	461a      	mov	r2, r3
 800c376:	4603      	mov	r3, r0
 800c378:	70fb      	strb	r3, [r7, #3]
 800c37a:	460b      	mov	r3, r1
 800c37c:	70bb      	strb	r3, [r7, #2]
 800c37e:	4613      	mov	r3, r2
 800c380:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800c38a:	78fb      	ldrb	r3, [r7, #3]
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	4413      	add	r3, r2
 800c392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c396:	461a      	mov	r2, r3
 800c398:	f04f 33ff 	mov.w	r3, #4294967295
 800c39c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c39e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c3a2:	2b03      	cmp	r3, #3
 800c3a4:	d87c      	bhi.n	800c4a0 <USB_HC_Init+0x138>
 800c3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3ac <USB_HC_Init+0x44>)
 800c3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ac:	0800c3bd 	.word	0x0800c3bd
 800c3b0:	0800c463 	.word	0x0800c463
 800c3b4:	0800c3bd 	.word	0x0800c3bd
 800c3b8:	0800c425 	.word	0x0800c425
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c3bc:	78fb      	ldrb	r3, [r7, #3]
 800c3be:	015a      	lsls	r2, r3, #5
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	f240 439d 	movw	r3, #1181	@ 0x49d
 800c3ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c3d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	da10      	bge.n	800c3fa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c3d8:	78fb      	ldrb	r3, [r7, #3]
 800c3da:	015a      	lsls	r2, r3, #5
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	4413      	add	r3, r2
 800c3e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	78fa      	ldrb	r2, [r7, #3]
 800c3e8:	0151      	lsls	r1, r2, #5
 800c3ea:	693a      	ldr	r2, [r7, #16]
 800c3ec:	440a      	add	r2, r1
 800c3ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c3f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c3f6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800c3f8:	e055      	b.n	800c4a6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4a6f      	ldr	r2, [pc, #444]	@ (800c5bc <USB_HC_Init+0x254>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d151      	bne.n	800c4a6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c402:	78fb      	ldrb	r3, [r7, #3]
 800c404:	015a      	lsls	r2, r3, #5
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	4413      	add	r3, r2
 800c40a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	78fa      	ldrb	r2, [r7, #3]
 800c412:	0151      	lsls	r1, r2, #5
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	440a      	add	r2, r1
 800c418:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c41c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c420:	60d3      	str	r3, [r2, #12]
      break;
 800c422:	e040      	b.n	800c4a6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c430:	461a      	mov	r2, r3
 800c432:	f240 639d 	movw	r3, #1693	@ 0x69d
 800c436:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c438:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	da34      	bge.n	800c4aa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c440:	78fb      	ldrb	r3, [r7, #3]
 800c442:	015a      	lsls	r2, r3, #5
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	4413      	add	r3, r2
 800c448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	78fa      	ldrb	r2, [r7, #3]
 800c450:	0151      	lsls	r1, r2, #5
 800c452:	693a      	ldr	r2, [r7, #16]
 800c454:	440a      	add	r2, r1
 800c456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c45a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c45e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c460:	e023      	b.n	800c4aa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c462:	78fb      	ldrb	r3, [r7, #3]
 800c464:	015a      	lsls	r2, r3, #5
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	4413      	add	r3, r2
 800c46a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c46e:	461a      	mov	r2, r3
 800c470:	f240 2325 	movw	r3, #549	@ 0x225
 800c474:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c476:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	da17      	bge.n	800c4ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c47e:	78fb      	ldrb	r3, [r7, #3]
 800c480:	015a      	lsls	r2, r3, #5
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	4413      	add	r3, r2
 800c486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	78fa      	ldrb	r2, [r7, #3]
 800c48e:	0151      	lsls	r1, r2, #5
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	440a      	add	r2, r1
 800c494:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c498:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800c49c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c49e:	e006      	b.n	800c4ae <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	77fb      	strb	r3, [r7, #31]
      break;
 800c4a4:	e004      	b.n	800c4b0 <USB_HC_Init+0x148>
      break;
 800c4a6:	bf00      	nop
 800c4a8:	e002      	b.n	800c4b0 <USB_HC_Init+0x148>
      break;
 800c4aa:	bf00      	nop
 800c4ac:	e000      	b.n	800c4b0 <USB_HC_Init+0x148>
      break;
 800c4ae:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800c4b0:	78fb      	ldrb	r3, [r7, #3]
 800c4b2:	015a      	lsls	r2, r3, #5
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c4bc:	461a      	mov	r2, r3
 800c4be:	2300      	movs	r3, #0
 800c4c0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c4c2:	78fb      	ldrb	r3, [r7, #3]
 800c4c4:	015a      	lsls	r2, r3, #5
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	78fa      	ldrb	r2, [r7, #3]
 800c4d2:	0151      	lsls	r1, r2, #5
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	440a      	add	r2, r1
 800c4d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c4dc:	f043 0302 	orr.w	r3, r3, #2
 800c4e0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c4e8:	699a      	ldr	r2, [r3, #24]
 800c4ea:	78fb      	ldrb	r3, [r7, #3]
 800c4ec:	f003 030f 	and.w	r3, r3, #15
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c4f6:	6939      	ldr	r1, [r7, #16]
 800c4f8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c50c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c510:	2b00      	cmp	r3, #0
 800c512:	da03      	bge.n	800c51c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c514:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c518:	61bb      	str	r3, [r7, #24]
 800c51a:	e001      	b.n	800c520 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800c51c:	2300      	movs	r3, #0
 800c51e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff fef9 	bl	800c318 <USB_GetHostSpeed>
 800c526:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c528:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d106      	bne.n	800c53e <USB_HC_Init+0x1d6>
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d003      	beq.n	800c53e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c536:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c53a:	617b      	str	r3, [r7, #20]
 800c53c:	e001      	b.n	800c542 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c53e:	2300      	movs	r3, #0
 800c540:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c542:	787b      	ldrb	r3, [r7, #1]
 800c544:	059b      	lsls	r3, r3, #22
 800c546:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c54a:	78bb      	ldrb	r3, [r7, #2]
 800c54c:	02db      	lsls	r3, r3, #11
 800c54e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c552:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c554:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c558:	049b      	lsls	r3, r3, #18
 800c55a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c55e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800c560:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c562:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c566:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	431a      	orrs	r2, r3
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c570:	78fa      	ldrb	r2, [r7, #3]
 800c572:	0151      	lsls	r1, r2, #5
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	440a      	add	r2, r1
 800c578:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c57c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c580:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c582:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c586:	2b03      	cmp	r3, #3
 800c588:	d003      	beq.n	800c592 <USB_HC_Init+0x22a>
 800c58a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d10f      	bne.n	800c5b2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c592:	78fb      	ldrb	r3, [r7, #3]
 800c594:	015a      	lsls	r2, r3, #5
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	4413      	add	r3, r2
 800c59a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	78fa      	ldrb	r2, [r7, #3]
 800c5a2:	0151      	lsls	r1, r2, #5
 800c5a4:	693a      	ldr	r2, [r7, #16]
 800c5a6:	440a      	add	r2, r1
 800c5a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c5ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c5b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c5b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3720      	adds	r7, #32
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	40040000 	.word	0x40040000

0800c5c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08c      	sub	sp, #48	@ 0x30
 800c5c4:	af02      	add	r7, sp, #8
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	785b      	ldrb	r3, [r3, #1]
 800c5d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800c5d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c5dc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	4a5d      	ldr	r2, [pc, #372]	@ (800c758 <USB_HC_StartXfer+0x198>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d12f      	bne.n	800c646 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800c5e6:	79fb      	ldrb	r3, [r7, #7]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d11c      	bne.n	800c626 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	7c9b      	ldrb	r3, [r3, #18]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d003      	beq.n	800c5fc <USB_HC_StartXfer+0x3c>
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	7c9b      	ldrb	r3, [r3, #18]
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d124      	bne.n	800c646 <USB_HC_StartXfer+0x86>
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	799b      	ldrb	r3, [r3, #6]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d120      	bne.n	800c646 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	015a      	lsls	r2, r3, #5
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	69fa      	ldr	r2, [r7, #28]
 800c614:	0151      	lsls	r1, r2, #5
 800c616:	6a3a      	ldr	r2, [r7, #32]
 800c618:	440a      	add	r2, r1
 800c61a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c61e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c622:	60d3      	str	r3, [r2, #12]
 800c624:	e00f      	b.n	800c646 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	791b      	ldrb	r3, [r3, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10b      	bne.n	800c646 <USB_HC_StartXfer+0x86>
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	795b      	ldrb	r3, [r3, #5]
 800c632:	2b01      	cmp	r3, #1
 800c634:	d107      	bne.n	800c646 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	785b      	ldrb	r3, [r3, #1]
 800c63a:	4619      	mov	r1, r3
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 fb6b 	bl	800cd18 <USB_DoPing>
        return HAL_OK;
 800c642:	2300      	movs	r3, #0
 800c644:	e232      	b.n	800caac <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	799b      	ldrb	r3, [r3, #6]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d158      	bne.n	800c700 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800c64e:	2301      	movs	r3, #1
 800c650:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	78db      	ldrb	r3, [r3, #3]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d007      	beq.n	800c66a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c65a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	8a92      	ldrh	r2, [r2, #20]
 800c660:	fb03 f202 	mul.w	r2, r3, r2
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	61da      	str	r2, [r3, #28]
 800c668:	e07c      	b.n	800c764 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	7c9b      	ldrb	r3, [r3, #18]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d130      	bne.n	800c6d4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	2bbc      	cmp	r3, #188	@ 0xbc
 800c678:	d918      	bls.n	800c6ac <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	8a9b      	ldrh	r3, [r3, #20]
 800c67e:	461a      	mov	r2, r3
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	69da      	ldr	r2, [r3, #28]
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d003      	beq.n	800c69c <USB_HC_StartXfer+0xdc>
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d103      	bne.n	800c6a4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	60da      	str	r2, [r3, #12]
 800c6a2:	e05f      	b.n	800c764 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	60da      	str	r2, [r3, #12]
 800c6aa:	e05b      	b.n	800c764 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	6a1a      	ldr	r2, [r3, #32]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d007      	beq.n	800c6cc <USB_HC_StartXfer+0x10c>
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d003      	beq.n	800c6cc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	2204      	movs	r2, #4
 800c6c8:	60da      	str	r2, [r3, #12]
 800c6ca:	e04b      	b.n	800c764 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2203      	movs	r2, #3
 800c6d0:	60da      	str	r2, [r3, #12]
 800c6d2:	e047      	b.n	800c764 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800c6d4:	79fb      	ldrb	r3, [r7, #7]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d10d      	bne.n	800c6f6 <USB_HC_StartXfer+0x136>
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	6a1b      	ldr	r3, [r3, #32]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	8a92      	ldrh	r2, [r2, #20]
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d907      	bls.n	800c6f6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c6e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	8a92      	ldrh	r2, [r2, #20]
 800c6ec:	fb03 f202 	mul.w	r2, r3, r2
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	61da      	str	r2, [r3, #28]
 800c6f4:	e036      	b.n	800c764 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	6a1a      	ldr	r2, [r3, #32]
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	61da      	str	r2, [r3, #28]
 800c6fe:	e031      	b.n	800c764 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	6a1b      	ldr	r3, [r3, #32]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d018      	beq.n	800c73a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	6a1b      	ldr	r3, [r3, #32]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	8a92      	ldrh	r2, [r2, #20]
 800c710:	4413      	add	r3, r2
 800c712:	3b01      	subs	r3, #1
 800c714:	68ba      	ldr	r2, [r7, #8]
 800c716:	8a92      	ldrh	r2, [r2, #20]
 800c718:	fbb3 f3f2 	udiv	r3, r3, r2
 800c71c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800c71e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c720:	8b7b      	ldrh	r3, [r7, #26]
 800c722:	429a      	cmp	r2, r3
 800c724:	d90b      	bls.n	800c73e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800c726:	8b7b      	ldrh	r3, [r7, #26]
 800c728:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c72a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	8a92      	ldrh	r2, [r2, #20]
 800c730:	fb03 f202 	mul.w	r2, r3, r2
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	61da      	str	r2, [r3, #28]
 800c738:	e001      	b.n	800c73e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800c73a:	2301      	movs	r3, #1
 800c73c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	78db      	ldrb	r3, [r3, #3]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00a      	beq.n	800c75c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c746:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	8a92      	ldrh	r2, [r2, #20]
 800c74c:	fb03 f202 	mul.w	r2, r3, r2
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	61da      	str	r2, [r3, #28]
 800c754:	e006      	b.n	800c764 <USB_HC_StartXfer+0x1a4>
 800c756:	bf00      	nop
 800c758:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	6a1a      	ldr	r2, [r3, #32]
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	69db      	ldr	r3, [r3, #28]
 800c768:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c76c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c76e:	04d9      	lsls	r1, r3, #19
 800c770:	4ba3      	ldr	r3, [pc, #652]	@ (800ca00 <USB_HC_StartXfer+0x440>)
 800c772:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c774:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	7d9b      	ldrb	r3, [r3, #22]
 800c77a:	075b      	lsls	r3, r3, #29
 800c77c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c780:	69f9      	ldr	r1, [r7, #28]
 800c782:	0148      	lsls	r0, r1, #5
 800c784:	6a39      	ldr	r1, [r7, #32]
 800c786:	4401      	add	r1, r0
 800c788:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c78c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c78e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c790:	79fb      	ldrb	r3, [r7, #7]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d009      	beq.n	800c7aa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	6999      	ldr	r1, [r3, #24]
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	015a      	lsls	r2, r3, #5
 800c79e:	6a3b      	ldr	r3, [r7, #32]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c7a6:	460a      	mov	r2, r1
 800c7a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	f003 0301 	and.w	r3, r3, #1
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	bf0c      	ite	eq
 800c7ba:	2301      	moveq	r3, #1
 800c7bc:	2300      	movne	r3, #0
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	015a      	lsls	r2, r3, #5
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	69fa      	ldr	r2, [r7, #28]
 800c7d2:	0151      	lsls	r1, r2, #5
 800c7d4:	6a3a      	ldr	r2, [r7, #32]
 800c7d6:	440a      	add	r2, r1
 800c7d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c7dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c7e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	015a      	lsls	r2, r3, #5
 800c7e6:	6a3b      	ldr	r3, [r7, #32]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	7e7b      	ldrb	r3, [r7, #25]
 800c7f2:	075b      	lsls	r3, r3, #29
 800c7f4:	69f9      	ldr	r1, [r7, #28]
 800c7f6:	0148      	lsls	r0, r1, #5
 800c7f8:	6a39      	ldr	r1, [r7, #32]
 800c7fa:	4401      	add	r1, r0
 800c7fc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800c800:	4313      	orrs	r3, r2
 800c802:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	799b      	ldrb	r3, [r3, #6]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	f040 80c3 	bne.w	800c994 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	7c5b      	ldrb	r3, [r3, #17]
 800c812:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c818:	4313      	orrs	r3, r2
 800c81a:	69fa      	ldr	r2, [r7, #28]
 800c81c:	0151      	lsls	r1, r2, #5
 800c81e:	6a3a      	ldr	r2, [r7, #32]
 800c820:	440a      	add	r2, r1
 800c822:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800c826:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c82a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	015a      	lsls	r2, r3, #5
 800c830:	6a3b      	ldr	r3, [r7, #32]
 800c832:	4413      	add	r3, r2
 800c834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	69fa      	ldr	r2, [r7, #28]
 800c83c:	0151      	lsls	r1, r2, #5
 800c83e:	6a3a      	ldr	r2, [r7, #32]
 800c840:	440a      	add	r2, r1
 800c842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c846:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c84a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	79db      	ldrb	r3, [r3, #7]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d123      	bne.n	800c89c <USB_HC_StartXfer+0x2dc>
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	78db      	ldrb	r3, [r3, #3]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d11f      	bne.n	800c89c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	015a      	lsls	r2, r3, #5
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	4413      	add	r3, r2
 800c864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	69fa      	ldr	r2, [r7, #28]
 800c86c:	0151      	lsls	r1, r2, #5
 800c86e:	6a3a      	ldr	r2, [r7, #32]
 800c870:	440a      	add	r2, r1
 800c872:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c87a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	015a      	lsls	r2, r3, #5
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	4413      	add	r3, r2
 800c884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	69fa      	ldr	r2, [r7, #28]
 800c88c:	0151      	lsls	r1, r2, #5
 800c88e:	6a3a      	ldr	r2, [r7, #32]
 800c890:	440a      	add	r2, r1
 800c892:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c89a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	7c9b      	ldrb	r3, [r3, #18]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d003      	beq.n	800c8ac <USB_HC_StartXfer+0x2ec>
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	7c9b      	ldrb	r3, [r3, #18]
 800c8a8:	2b03      	cmp	r3, #3
 800c8aa:	d117      	bne.n	800c8dc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d113      	bne.n	800c8dc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	78db      	ldrb	r3, [r3, #3]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d10f      	bne.n	800c8dc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	015a      	lsls	r2, r3, #5
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	69fa      	ldr	r2, [r7, #28]
 800c8cc:	0151      	lsls	r1, r2, #5
 800c8ce:	6a3a      	ldr	r2, [r7, #32]
 800c8d0:	440a      	add	r2, r1
 800c8d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c8d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8da:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	7c9b      	ldrb	r3, [r3, #18]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d162      	bne.n	800c9aa <USB_HC_StartXfer+0x3ea>
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	78db      	ldrb	r3, [r3, #3]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d15e      	bne.n	800c9aa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	2b03      	cmp	r3, #3
 800c8f4:	d858      	bhi.n	800c9a8 <USB_HC_StartXfer+0x3e8>
 800c8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c8fc <USB_HC_StartXfer+0x33c>)
 800c8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fc:	0800c90d 	.word	0x0800c90d
 800c900:	0800c92f 	.word	0x0800c92f
 800c904:	0800c951 	.word	0x0800c951
 800c908:	0800c973 	.word	0x0800c973
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	015a      	lsls	r2, r3, #5
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	4413      	add	r3, r2
 800c914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	69fa      	ldr	r2, [r7, #28]
 800c91c:	0151      	lsls	r1, r2, #5
 800c91e:	6a3a      	ldr	r2, [r7, #32]
 800c920:	440a      	add	r2, r1
 800c922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c92a:	6053      	str	r3, [r2, #4]
          break;
 800c92c:	e03d      	b.n	800c9aa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	015a      	lsls	r2, r3, #5
 800c932:	6a3b      	ldr	r3, [r7, #32]
 800c934:	4413      	add	r3, r2
 800c936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	69fa      	ldr	r2, [r7, #28]
 800c93e:	0151      	lsls	r1, r2, #5
 800c940:	6a3a      	ldr	r2, [r7, #32]
 800c942:	440a      	add	r2, r1
 800c944:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c948:	f043 030e 	orr.w	r3, r3, #14
 800c94c:	6053      	str	r3, [r2, #4]
          break;
 800c94e:	e02c      	b.n	800c9aa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	015a      	lsls	r2, r3, #5
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	4413      	add	r3, r2
 800c958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	69fa      	ldr	r2, [r7, #28]
 800c960:	0151      	lsls	r1, r2, #5
 800c962:	6a3a      	ldr	r2, [r7, #32]
 800c964:	440a      	add	r2, r1
 800c966:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c96a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c96e:	6053      	str	r3, [r2, #4]
          break;
 800c970:	e01b      	b.n	800c9aa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	015a      	lsls	r2, r3, #5
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	4413      	add	r3, r2
 800c97a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	69fa      	ldr	r2, [r7, #28]
 800c982:	0151      	lsls	r1, r2, #5
 800c984:	6a3a      	ldr	r2, [r7, #32]
 800c986:	440a      	add	r2, r1
 800c988:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c98c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c990:	6053      	str	r3, [r2, #4]
          break;
 800c992:	e00a      	b.n	800c9aa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	6a3b      	ldr	r3, [r7, #32]
 800c99a:	4413      	add	r3, r2
 800c99c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	6053      	str	r3, [r2, #4]
 800c9a6:	e000      	b.n	800c9aa <USB_HC_StartXfer+0x3ea>
          break;
 800c9a8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	015a      	lsls	r2, r3, #5
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c9c0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	78db      	ldrb	r3, [r3, #3]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d004      	beq.n	800c9d4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9d0:	613b      	str	r3, [r7, #16]
 800c9d2:	e003      	b.n	800c9dc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c9da:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c9e2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	015a      	lsls	r2, r3, #5
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c9f6:	79fb      	ldrb	r3, [r7, #7]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d003      	beq.n	800ca04 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e055      	b.n	800caac <USB_HC_StartXfer+0x4ec>
 800ca00:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	78db      	ldrb	r3, [r3, #3]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d14e      	bne.n	800caaa <USB_HC_StartXfer+0x4ea>
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	6a1b      	ldr	r3, [r3, #32]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d04a      	beq.n	800caaa <USB_HC_StartXfer+0x4ea>
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	79db      	ldrb	r3, [r3, #7]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d146      	bne.n	800caaa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	7c9b      	ldrb	r3, [r3, #18]
 800ca20:	2b03      	cmp	r3, #3
 800ca22:	d831      	bhi.n	800ca88 <USB_HC_StartXfer+0x4c8>
 800ca24:	a201      	add	r2, pc, #4	@ (adr r2, 800ca2c <USB_HC_StartXfer+0x46c>)
 800ca26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2a:	bf00      	nop
 800ca2c:	0800ca3d 	.word	0x0800ca3d
 800ca30:	0800ca61 	.word	0x0800ca61
 800ca34:	0800ca3d 	.word	0x0800ca3d
 800ca38:	0800ca61 	.word	0x0800ca61
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	6a1b      	ldr	r3, [r3, #32]
 800ca40:	3303      	adds	r3, #3
 800ca42:	089b      	lsrs	r3, r3, #2
 800ca44:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ca46:	8afa      	ldrh	r2, [r7, #22]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d91c      	bls.n	800ca8c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	f043 0220 	orr.w	r2, r3, #32
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	619a      	str	r2, [r3, #24]
        }
        break;
 800ca5e:	e015      	b.n	800ca8c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	3303      	adds	r3, #3
 800ca66:	089b      	lsrs	r3, r3, #2
 800ca68:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ca6a:	8afa      	ldrh	r2, [r7, #22]
 800ca6c:	6a3b      	ldr	r3, [r7, #32]
 800ca6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d90a      	bls.n	800ca90 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	619a      	str	r2, [r3, #24]
        }
        break;
 800ca86:	e003      	b.n	800ca90 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800ca88:	bf00      	nop
 800ca8a:	e002      	b.n	800ca92 <USB_HC_StartXfer+0x4d2>
        break;
 800ca8c:	bf00      	nop
 800ca8e:	e000      	b.n	800ca92 <USB_HC_StartXfer+0x4d2>
        break;
 800ca90:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	6999      	ldr	r1, [r3, #24]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	785a      	ldrb	r2, [r3, #1]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	6a1b      	ldr	r3, [r3, #32]
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	2000      	movs	r0, #0
 800caa2:	9000      	str	r0, [sp, #0]
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f7ff f9c9 	bl	800be3c <USB_WritePacket>
  }

  return HAL_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3728      	adds	r7, #40	@ 0x28
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	b29b      	uxth	r3, r3
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800cad6:	b480      	push	{r7}
 800cad8:	b089      	sub	sp, #36	@ 0x24
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	460b      	mov	r3, r1
 800cae0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800cae6:	78fb      	ldrb	r3, [r7, #3]
 800cae8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800caea:	2300      	movs	r3, #0
 800caec:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	015a      	lsls	r2, r3, #5
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	4413      	add	r3, r2
 800caf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	0c9b      	lsrs	r3, r3, #18
 800cafe:	f003 0303 	and.w	r3, r3, #3
 800cb02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	0fdb      	lsrs	r3, r3, #31
 800cb14:	f003 0301 	and.w	r3, r3, #1
 800cb18:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	015a      	lsls	r2, r3, #5
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	4413      	add	r3, r2
 800cb22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	0fdb      	lsrs	r3, r3, #31
 800cb2a:	f003 0301 	and.w	r3, r3, #1
 800cb2e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	f003 0320 	and.w	r3, r3, #32
 800cb38:	2b20      	cmp	r3, #32
 800cb3a:	d10d      	bne.n	800cb58 <USB_HC_Halt+0x82>
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10a      	bne.n	800cb58 <USB_HC_Halt+0x82>
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d005      	beq.n	800cb54 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d002      	beq.n	800cb54 <USB_HC_Halt+0x7e>
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2b03      	cmp	r3, #3
 800cb52:	d101      	bne.n	800cb58 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	e0d8      	b.n	800cd0a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <USB_HC_Halt+0x8e>
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d173      	bne.n	800cc4c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	015a      	lsls	r2, r3, #5
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	0151      	lsls	r1, r2, #5
 800cb76:	69fa      	ldr	r2, [r7, #28]
 800cb78:	440a      	add	r2, r1
 800cb7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cb7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cb82:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	f003 0320 	and.w	r3, r3, #32
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d14a      	bne.n	800cc26 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d133      	bne.n	800cc04 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	015a      	lsls	r2, r3, #5
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	4413      	add	r3, r2
 800cba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	69ba      	ldr	r2, [r7, #24]
 800cbac:	0151      	lsls	r1, r2, #5
 800cbae:	69fa      	ldr	r2, [r7, #28]
 800cbb0:	440a      	add	r2, r1
 800cbb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cbb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cbba:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	015a      	lsls	r2, r3, #5
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	69ba      	ldr	r2, [r7, #24]
 800cbcc:	0151      	lsls	r1, r2, #5
 800cbce:	69fa      	ldr	r2, [r7, #28]
 800cbd0:	440a      	add	r2, r1
 800cbd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cbd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cbda:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cbe8:	d82e      	bhi.n	800cc48 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	015a      	lsls	r2, r3, #5
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cbfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc00:	d0ec      	beq.n	800cbdc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cc02:	e081      	b.n	800cd08 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	015a      	lsls	r2, r3, #5
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	69ba      	ldr	r2, [r7, #24]
 800cc14:	0151      	lsls	r1, r2, #5
 800cc16:	69fa      	ldr	r2, [r7, #28]
 800cc18:	440a      	add	r2, r1
 800cc1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cc1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cc22:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cc24:	e070      	b.n	800cd08 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	015a      	lsls	r2, r3, #5
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	69ba      	ldr	r2, [r7, #24]
 800cc36:	0151      	lsls	r1, r2, #5
 800cc38:	69fa      	ldr	r2, [r7, #28]
 800cc3a:	440a      	add	r2, r1
 800cc3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cc40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cc44:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cc46:	e05f      	b.n	800cd08 <USB_HC_Halt+0x232>
            break;
 800cc48:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cc4a:	e05d      	b.n	800cd08 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	69ba      	ldr	r2, [r7, #24]
 800cc5c:	0151      	lsls	r1, r2, #5
 800cc5e:	69fa      	ldr	r2, [r7, #28]
 800cc60:	440a      	add	r2, r1
 800cc62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cc66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cc6a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d133      	bne.n	800cce4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	015a      	lsls	r2, r3, #5
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	4413      	add	r3, r2
 800cc84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	69ba      	ldr	r2, [r7, #24]
 800cc8c:	0151      	lsls	r1, r2, #5
 800cc8e:	69fa      	ldr	r2, [r7, #28]
 800cc90:	440a      	add	r2, r1
 800cc92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cc96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	015a      	lsls	r2, r3, #5
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	4413      	add	r3, r2
 800cca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	69ba      	ldr	r2, [r7, #24]
 800ccac:	0151      	lsls	r1, r2, #5
 800ccae:	69fa      	ldr	r2, [r7, #28]
 800ccb0:	440a      	add	r2, r1
 800ccb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ccb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ccba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ccc8:	d81d      	bhi.n	800cd06 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	015a      	lsls	r2, r3, #5
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ccdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cce0:	d0ec      	beq.n	800ccbc <USB_HC_Halt+0x1e6>
 800cce2:	e011      	b.n	800cd08 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	015a      	lsls	r2, r3, #5
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	4413      	add	r3, r2
 800ccec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	69ba      	ldr	r2, [r7, #24]
 800ccf4:	0151      	lsls	r1, r2, #5
 800ccf6:	69fa      	ldr	r2, [r7, #28]
 800ccf8:	440a      	add	r2, r1
 800ccfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ccfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cd02:	6013      	str	r3, [r2, #0]
 800cd04:	e000      	b.n	800cd08 <USB_HC_Halt+0x232>
          break;
 800cd06:	bf00      	nop
    }
  }

  return HAL_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3724      	adds	r7, #36	@ 0x24
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
	...

0800cd18 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	460b      	mov	r3, r1
 800cd22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cd28:	78fb      	ldrb	r3, [r7, #3]
 800cd2a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	04da      	lsls	r2, r3, #19
 800cd34:	4b15      	ldr	r3, [pc, #84]	@ (800cd8c <USB_DoPing+0x74>)
 800cd36:	4013      	ands	r3, r2
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	0151      	lsls	r1, r2, #5
 800cd3c:	697a      	ldr	r2, [r7, #20]
 800cd3e:	440a      	add	r2, r1
 800cd40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cd44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cd48:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	015a      	lsls	r2, r3, #5
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	4413      	add	r3, r2
 800cd52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cd60:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cd68:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	015a      	lsls	r2, r3, #5
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	4413      	add	r3, r2
 800cd72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd76:	461a      	mov	r2, r3
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	1ff80000 	.word	0x1ff80000

0800cd90 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b088      	sub	sp, #32
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800cda0:	2300      	movs	r3, #0
 800cda2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7fe ff8c 	bl	800bcc2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cdaa:	2110      	movs	r1, #16
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7fe ffe5 	bl	800bd7c <USB_FlushTxFifo>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d001      	beq.n	800cdbc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7ff f80f 	bl	800bde0 <USB_FlushRxFifo>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d001      	beq.n	800cdcc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cdcc:	2300      	movs	r3, #0
 800cdce:	61bb      	str	r3, [r7, #24]
 800cdd0:	e01f      	b.n	800ce12 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	015a      	lsls	r2, r3, #5
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	4413      	add	r3, r2
 800cdda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cde8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cdf0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cdf8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	015a      	lsls	r2, r3, #5
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	4413      	add	r3, r2
 800ce02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce06:	461a      	mov	r2, r3
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	61bb      	str	r3, [r7, #24]
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	2b0f      	cmp	r3, #15
 800ce16:	d9dc      	bls.n	800cdd2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	61bb      	str	r3, [r7, #24]
 800ce1c:	e034      	b.n	800ce88 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	015a      	lsls	r2, r3, #5
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	4413      	add	r3, r2
 800ce26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ce34:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ce3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ce44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	015a      	lsls	r2, r3, #5
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce52:	461a      	mov	r2, r3
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce64:	d80c      	bhi.n	800ce80 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	015a      	lsls	r2, r3, #5
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ce78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce7c:	d0ec      	beq.n	800ce58 <USB_StopHost+0xc8>
 800ce7e:	e000      	b.n	800ce82 <USB_StopHost+0xf2>
        break;
 800ce80:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	3301      	adds	r3, #1
 800ce86:	61bb      	str	r3, [r7, #24]
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	2b0f      	cmp	r3, #15
 800ce8c:	d9c7      	bls.n	800ce1e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce94:	461a      	mov	r2, r3
 800ce96:	f04f 33ff 	mov.w	r3, #4294967295
 800ce9a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cea2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f7fe fefb 	bl	800bca0 <USB_EnableGlobalInt>

  return ret;
 800ceaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3720      	adds	r7, #32
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	7818      	ldrb	r0, [r3, #0]
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cece:	b299      	uxth	r1, r3
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	78db      	ldrb	r3, [r3, #3]
 800ced4:	461a      	mov	r2, r3
 800ced6:	f7f4 f991 	bl	80011fc <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ceec:	2300      	movs	r3, #0
 800ceee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	7818      	ldrb	r0, [r3, #0]
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cefe:	b299      	uxth	r1, r3
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	78db      	ldrb	r3, [r3, #3]
 800cf04:	461a      	mov	r2, r3
 800cf06:	f000 ffca 	bl	800de9e <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 800cf14:	b590      	push	{r4, r7, lr}
 800cf16:	b087      	sub	sp, #28
 800cf18:	af02      	add	r7, sp, #8
 800cf1a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	7818      	ldrb	r0, [r3, #0]
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cf2e:	b299      	uxth	r1, r3
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	78da      	ldrb	r2, [r3, #3]
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	889b      	ldrh	r3, [r3, #4]
 800cf38:	b29c      	uxth	r4, r3
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	88db      	ldrh	r3, [r3, #6]
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	4623      	mov	r3, r4
 800cf44:	f000 ffba 	bl	800debc <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3714      	adds	r7, #20
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd90      	pop	{r4, r7, pc}

0800cf52 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b084      	sub	sp, #16
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 ffbc 	bl	800dee4 <hci_hardware_error_event>

  return status;
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b0a6      	sub	sp, #152	@ 0x98
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800cf90:	2300      	movs	r3, #0
 800cf92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cf96:	e02e      	b.n	800cff6 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800cf98:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cf9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	4413      	add	r3, r2
 800cfa4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	3398      	adds	r3, #152	@ 0x98
 800cfb2:	443b      	add	r3, r7
 800cfb4:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800cfb8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cfbc:	3302      	adds	r3, #2
 800cfbe:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800cfc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cfc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	3398      	adds	r3, #152	@ 0x98
 800cfdc:	443b      	add	r3, r7
 800cfde:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800cfe2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cfe6:	3302      	adds	r3, #2
 800cfe8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800cfec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cff0:	3301      	adds	r3, #1
 800cff2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	461a      	mov	r2, r3
 800cffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d002:	4293      	cmp	r3, r2
 800d004:	dbc8      	blt.n	800cf98 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 800d006:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	f107 0208 	add.w	r2, r7, #8
 800d010:	4611      	mov	r1, r2
 800d012:	4618      	mov	r0, r3
 800d014:	f000 ff71 	bl	800defa <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 800d018:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3798      	adds	r7, #152	@ 0x98
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d02c:	2300      	movs	r3, #0
 800d02e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	4618      	mov	r0, r3
 800d03a:	f000 ff6a 	bl	800df12 <hci_data_buffer_overflow_event>

  return status;
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d050:	2300      	movs	r3, #0
 800d052:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	781a      	ldrb	r2, [r3, #0]
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d062:	b29b      	uxth	r3, r3
 800d064:	4619      	mov	r1, r3
 800d066:	4610      	mov	r0, r2
 800d068:	f000 ff5e 	bl	800df28 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 800d076:	b580      	push	{r7, lr}
 800d078:	b084      	sub	sp, #16
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d07e:	2300      	movs	r3, #0
 800d080:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f001 f9b8 	bl	800e400 <aci_blue_initialized_event>

  return status;
 800d090:	7bfb      	ldrb	r3, [r7, #15]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b084      	sub	sp, #16
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f001 f9b2 	bl	800e416 <aci_blue_events_lost_event>

  return status;
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800d0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0c0:	b08d      	sub	sp, #52	@ 0x34
 800d0c2:	af08      	add	r7, sp, #32
 800d0c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	f893 c000 	ldrb.w	ip, [r3]
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	f8d3 e001 	ldr.w	lr, [r3, #1]
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	f8d3 8005 	ldr.w	r8, [r3, #5]
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	f8d3 9009 	ldr.w	r9, [r3, #9]
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800d0ec:	603b      	str	r3, [r7, #0]
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	f8d2 2011 	ldr.w	r2, [r2, #17]
 800d0f4:	68b9      	ldr	r1, [r7, #8]
 800d0f6:	f8d1 1015 	ldr.w	r1, [r1, #21]
 800d0fa:	68b8      	ldr	r0, [r7, #8]
 800d0fc:	f8d0 0019 	ldr.w	r0, [r0, #25]
 800d100:	68bc      	ldr	r4, [r7, #8]
 800d102:	f8d4 401d 	ldr.w	r4, [r4, #29]
 800d106:	68bd      	ldr	r5, [r7, #8]
 800d108:	f8d5 5021 	ldr.w	r5, [r5, #33]	@ 0x21
 800d10c:	68be      	ldr	r6, [r7, #8]
 800d10e:	f896 6025 	ldrb.w	r6, [r6, #37]	@ 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	3326      	adds	r3, #38	@ 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 800d116:	9307      	str	r3, [sp, #28]
 800d118:	9606      	str	r6, [sp, #24]
 800d11a:	9505      	str	r5, [sp, #20]
 800d11c:	9404      	str	r4, [sp, #16]
 800d11e:	9003      	str	r0, [sp, #12]
 800d120:	9102      	str	r1, [sp, #8]
 800d122:	9201      	str	r2, [sp, #4]
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	464b      	mov	r3, r9
 800d12a:	4642      	mov	r2, r8
 800d12c:	4671      	mov	r1, lr
 800d12e:	4660      	mov	r0, ip
 800d130:	f001 f97b 	bl	800e42a <aci_blue_crash_info_event>

  return status;
 800d134:	7bfb      	ldrb	r3, [r7, #15]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3714      	adds	r7, #20
 800d13a:	46bd      	mov	sp, r7
 800d13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d140 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d148:	2300      	movs	r3, #0
 800d14a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	7818      	ldrb	r0, [r3, #0]
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	7859      	ldrb	r1, [r3, #1]
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d15e:	461a      	mov	r2, r3
 800d160:	f001 f971 	bl	800e446 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 800d164:	7bfb      	ldrb	r3, [r7, #15]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b084      	sub	sp, #16
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d176:	2300      	movs	r3, #0
 800d178:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	f993 0000 	ldrsb.w	r0, [r3]
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 800d18c:	461a      	mov	r2, r3
 800d18e:	f001 f968 	bl	800e462 <aci_hal_scan_req_report_event>

  return status;
 800d192:	7bfb      	ldrb	r3, [r7, #15]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	7818      	ldrb	r0, [r3, #0]
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	f001 f960 	bl	800e47e <aci_hal_fw_error_event>

  return status;
 800d1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 800d1d4:	f000 ff3e 	bl	800e054 <aci_gap_limited_discoverable_event>

  return status;
 800d1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	881b      	ldrh	r3, [r3, #0]
 800d1f6:	b298      	uxth	r0, r3
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	7899      	ldrb	r1, [r3, #2]
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	78db      	ldrb	r3, [r3, #3]
 800d200:	461a      	mov	r2, r3
 800d202:	f7f4 f869 	bl	80012d8 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 800d206:	7bfb      	ldrb	r3, [r7, #15]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d218:	2300      	movs	r3, #0
 800d21a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	881b      	ldrh	r3, [r3, #0]
 800d224:	b29b      	uxth	r3, r3
 800d226:	4618      	mov	r0, r3
 800d228:	f7f4 f840 	bl	80012ac <aci_gap_pass_key_req_event>

  return status;
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b084      	sub	sp, #16
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d23e:	2300      	movs	r3, #0
 800d240:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	881b      	ldrh	r3, [r3, #0]
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	4618      	mov	r0, r3
 800d24e:	f000 ff08 	bl	800e062 <aci_gap_authorization_req_event>

  return status;
 800d252:	7bfb      	ldrb	r3, [r7, #15]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3710      	adds	r7, #16
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d264:	2300      	movs	r3, #0
 800d266:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 800d268:	f000 ff06 	bl	800e078 <aci_gap_slave_security_initiated_event>

  return status;
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b084      	sub	sp, #16
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d27e:	2300      	movs	r3, #0
 800d280:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 800d282:	f000 ff00 	bl	800e086 <aci_gap_bond_lost_event>

  return status;
 800d286:	7bfb      	ldrb	r3, [r7, #15]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d298:	2300      	movs	r3, #0
 800d29a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	7818      	ldrb	r0, [r3, #0]
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	7859      	ldrb	r1, [r3, #1]
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800d2b0:	f000 fef0 	bl	800e094 <aci_gap_proc_complete_event>

  return status;
 800d2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3710      	adds	r7, #16
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b084      	sub	sp, #16
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f000 feed 	bl	800e0b4 <aci_gap_addr_not_resolved_event>

  return status;
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	881b      	ldrh	r3, [r3, #0]
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d300:	4619      	mov	r1, r3
 800d302:	4610      	mov	r0, r2
 800d304:	f000 fee1 	bl	800e0ca <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 800d308:	7bfb      	ldrb	r3, [r7, #15]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b084      	sub	sp, #16
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d31a:	2300      	movs	r3, #0
 800d31c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	b29a      	uxth	r2, r3
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	789b      	ldrb	r3, [r3, #2]
 800d32c:	4619      	mov	r1, r3
 800d32e:	4610      	mov	r0, r2
 800d330:	f000 fed7 	bl	800e0e2 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 800d334:	7bfb      	ldrb	r3, [r7, #15]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b084      	sub	sp, #16
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d346:	2300      	movs	r3, #0
 800d348:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	b29a      	uxth	r2, r3
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	885b      	ldrh	r3, [r3, #2]
 800d358:	b29b      	uxth	r3, r3
 800d35a:	4619      	mov	r1, r3
 800d35c:	4610      	mov	r0, r2
 800d35e:	f001 f80b 	bl	800e378 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 800d362:	7bfb      	ldrb	r3, [r7, #15]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d374:	2300      	movs	r3, #0
 800d376:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	b298      	uxth	r0, r3
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800d38a:	461a      	mov	r2, r3
 800d38c:	f001 f802 	bl	800e394 <aci_l2cap_proc_timeout_event>

  return status;
 800d390:	7bfb      	ldrb	r3, [r7, #15]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800d39a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d39c:	b089      	sub	sp, #36	@ 0x24
 800d39e:	af04      	add	r7, sp, #16
 800d3a0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	881b      	ldrh	r3, [r3, #0]
 800d3ae:	b298      	uxth	r0, r3
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	789c      	ldrb	r4, [r3, #2]
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d3ba:	b29d      	uxth	r5, r3
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d3c2:	b29e      	uxth	r6, r3
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800d3d2:	b292      	uxth	r2, r2
 800d3d4:	68b9      	ldr	r1, [r7, #8]
 800d3d6:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 800d3da:	b289      	uxth	r1, r1
 800d3dc:	9102      	str	r1, [sp, #8]
 800d3de:	9201      	str	r2, [sp, #4]
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	4633      	mov	r3, r6
 800d3e4:	462a      	mov	r2, r5
 800d3e6:	4621      	mov	r1, r4
 800d3e8:	f000 ffe2 	bl	800e3b0 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3f6 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 800d3f6:	b590      	push	{r4, r7, lr}
 800d3f8:	b087      	sub	sp, #28
 800d3fa:	af02      	add	r7, sp, #8
 800d3fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d3fe:	2300      	movs	r3, #0
 800d400:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	881b      	ldrh	r3, [r3, #0]
 800d40a:	b298      	uxth	r0, r3
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	7899      	ldrb	r1, [r3, #2]
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d416:	b29a      	uxth	r2, r3
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	4623      	mov	r3, r4
 800d424:	f000 ffd8 	bl	800e3d8 <aci_l2cap_command_reject_event>

  return status;
 800d428:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3714      	adds	r7, #20
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd90      	pop	{r4, r7, pc}

0800d432 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 800d432:	b590      	push	{r4, r7, lr}
 800d434:	b087      	sub	sp, #28
 800d436:	af02      	add	r7, sp, #8
 800d438:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d43a:	2300      	movs	r3, #0
 800d43c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	b298      	uxth	r0, r3
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	885b      	ldrh	r3, [r3, #2]
 800d44c:	b299      	uxth	r1, r3
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	889b      	ldrh	r3, [r3, #4]
 800d452:	b29a      	uxth	r2, r3
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	88db      	ldrh	r3, [r3, #6]
 800d458:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	4623      	mov	r3, r4
 800d462:	f7f3 ff06 	bl	8001272 <aci_gatt_attribute_modified_event>

  return status;
 800d466:	7bfb      	ldrb	r3, [r7, #15]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3714      	adds	r7, #20
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd90      	pop	{r4, r7, pc}

0800d470 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d478:	2300      	movs	r3, #0
 800d47a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	881b      	ldrh	r3, [r3, #0]
 800d484:	b29b      	uxth	r3, r3
 800d486:	4618      	mov	r0, r3
 800d488:	f000 fe39 	bl	800e0fe <aci_gatt_proc_timeout_event>

  return status;
 800d48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3710      	adds	r7, #16
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b084      	sub	sp, #16
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	885b      	ldrh	r3, [r3, #2]
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	f000 fe2d 	bl	800e114 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	881b      	ldrh	r3, [r3, #0]
 800d4d8:	b298      	uxth	r0, r3
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	7899      	ldrb	r1, [r3, #2]
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800d4e6:	f000 fe23 	bl	800e130 <aci_att_find_info_resp_event>

  return status;
 800d4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b0a6      	sub	sp, #152	@ 0x98
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 800d508:	2303      	movs	r3, #3
 800d50a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800d50e:	2300      	movs	r3, #0
 800d510:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d514:	e02e      	b.n	800d574 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800d516:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d51a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	4413      	add	r3, r2
 800d522:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d526:	b29a      	uxth	r2, r3
 800d528:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	3398      	adds	r3, #152	@ 0x98
 800d530:	443b      	add	r3, r7
 800d532:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800d536:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d53a:	3302      	adds	r3, #2
 800d53c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800d540:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d544:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4413      	add	r3, r2
 800d54c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d550:	b29a      	uxth	r2, r3
 800d552:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	3398      	adds	r3, #152	@ 0x98
 800d55a:	443b      	add	r3, r7
 800d55c:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800d560:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d564:	3302      	adds	r3, #2
 800d566:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800d56a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d56e:	3301      	adds	r3, #1
 800d570:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d574:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d578:	789b      	ldrb	r3, [r3, #2]
 800d57a:	461a      	mov	r2, r3
 800d57c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d580:	4293      	cmp	r3, r2
 800d582:	dbc8      	blt.n	800d516 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800d584:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	b298      	uxth	r0, r3
 800d58c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d590:	789b      	ldrb	r3, [r3, #2]
 800d592:	f107 0208 	add.w	r2, r7, #8
 800d596:	4619      	mov	r1, r3
 800d598:	f000 fdda 	bl	800e150 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 800d59c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3798      	adds	r7, #152	@ 0x98
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	881b      	ldrh	r3, [r3, #0]
 800d5bc:	b298      	uxth	r0, r3
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	7899      	ldrb	r1, [r3, #2]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800d5ca:	f000 fdcf 	bl	800e16c <aci_att_read_by_type_resp_event>

  return status;
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	881b      	ldrh	r3, [r3, #0]
 800d5ec:	b298      	uxth	r0, r3
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	f000 fdc8 	bl	800e18c <aci_att_read_resp_event>

  return status;
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b084      	sub	sp, #16
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d60e:	2300      	movs	r3, #0
 800d610:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	881b      	ldrh	r3, [r3, #0]
 800d61a:	b298      	uxth	r0, r3
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800d624:	461a      	mov	r2, r3
 800d626:	f000 fdbf 	bl	800e1a8 <aci_att_read_blob_resp_event>

  return status;
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d63c:	2300      	movs	r3, #0
 800d63e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	881b      	ldrh	r3, [r3, #0]
 800d648:	b298      	uxth	r0, r3
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800d652:	461a      	mov	r2, r3
 800d654:	f000 fdb6 	bl	800e1c4 <aci_att_read_multiple_resp_event>

  return status;
 800d658:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b084      	sub	sp, #16
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d66a:	2300      	movs	r3, #0
 800d66c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	b298      	uxth	r0, r3
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	7899      	ldrb	r1, [r3, #2]
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800d684:	f000 fdac 	bl	800e1e0 <aci_att_read_by_group_type_resp_event>

  return status;
 800d688:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800d692:	b590      	push	{r4, r7, lr}
 800d694:	b087      	sub	sp, #28
 800d696:	af02      	add	r7, sp, #8
 800d698:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d69a:	2300      	movs	r3, #0
 800d69c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	881b      	ldrh	r3, [r3, #0]
 800d6a6:	b298      	uxth	r0, r3
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	885b      	ldrh	r3, [r3, #2]
 800d6ac:	b299      	uxth	r1, r3
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	889b      	ldrh	r3, [r3, #4]
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	4623      	mov	r3, r4
 800d6c0:	f000 fd9e 	bl	800e200 <aci_att_prepare_write_resp_event>

  return status;
 800d6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3714      	adds	r7, #20
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd90      	pop	{r4, r7, pc}

0800d6ce <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b084      	sub	sp, #16
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	881b      	ldrh	r3, [r3, #0]
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f000 fd9f 	bl	800e228 <aci_att_exec_write_resp_event>

  return status;
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	b298      	uxth	r0, r3
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	885b      	ldrh	r3, [r3, #2]
 800d70e:	b299      	uxth	r1, r3
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 800d718:	f000 fd91 	bl	800e23e <aci_gatt_indication_event>

  return status;
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b084      	sub	sp, #16
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d72e:	2300      	movs	r3, #0
 800d730:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	b298      	uxth	r0, r3
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	885b      	ldrh	r3, [r3, #2]
 800d740:	b299      	uxth	r1, r3
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 800d74a:	f000 fd88 	bl	800e25e <aci_gatt_notification_event>

  return status;
 800d74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d760:	2300      	movs	r3, #0
 800d762:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	881b      	ldrh	r3, [r3, #0]
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	789b      	ldrb	r3, [r3, #2]
 800d772:	4619      	mov	r1, r3
 800d774:	4610      	mov	r0, r2
 800d776:	f000 fd82 	bl	800e27e <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 800d77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d78c:	2300      	movs	r3, #0
 800d78e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	881b      	ldrh	r3, [r3, #0]
 800d798:	b298      	uxth	r0, r3
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	7899      	ldrb	r1, [r3, #2]
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d7a4:	b29a      	uxth	r2, r3
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	795b      	ldrb	r3, [r3, #5]
 800d7aa:	f000 fd76 	bl	800e29a <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 800d7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	881b      	ldrh	r3, [r3, #0]
 800d7cc:	b298      	uxth	r0, r3
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	885b      	ldrh	r3, [r3, #2]
 800d7d2:	b299      	uxth	r1, r3
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800d7dc:	f000 fd71 	bl	800e2c2 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800d7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	b298      	uxth	r0, r3
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	885b      	ldrh	r3, [r3, #2]
 800d804:	b299      	uxth	r1, r3
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800d80e:	f000 fd68 	bl	800e2e2 <aci_gatt_write_permit_req_event>

  return status;
 800d812:	7bfb      	ldrb	r3, [r7, #15]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3710      	adds	r7, #16
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d824:	2300      	movs	r3, #0
 800d826:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	b298      	uxth	r0, r3
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	885b      	ldrh	r3, [r3, #2]
 800d836:	b299      	uxth	r1, r3
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	889b      	ldrh	r3, [r3, #4]
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	461a      	mov	r2, r3
 800d840:	f7f3 fd06 	bl	8001250 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 800d844:	7bfb      	ldrb	r3, [r7, #15]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b0a6      	sub	sp, #152	@ 0x98
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d856:	2300      	movs	r3, #0
 800d858:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 800d862:	2303      	movs	r3, #3
 800d864:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800d868:	2300      	movs	r3, #0
 800d86a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d86e:	e019      	b.n	800d8a4 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800d870:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d874:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d878:	005b      	lsls	r3, r3, #1
 800d87a:	4413      	add	r3, r2
 800d87c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d880:	b29a      	uxth	r2, r3
 800d882:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	3398      	adds	r3, #152	@ 0x98
 800d88a:	443b      	add	r3, r7
 800d88c:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800d890:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d894:	3302      	adds	r3, #2
 800d896:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800d89a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d89e:	3301      	adds	r3, #1
 800d8a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d8a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d8a8:	789b      	ldrb	r3, [r3, #2]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	dbdd      	blt.n	800d870 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800d8b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	b298      	uxth	r0, r3
 800d8bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d8c0:	789b      	ldrb	r3, [r3, #2]
 800d8c2:	f107 0208 	add.w	r2, r7, #8
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	f000 fd1b 	bl	800e302 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800d8cc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3798      	adds	r7, #152	@ 0x98
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	881b      	ldrh	r3, [r3, #0]
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	885b      	ldrh	r3, [r3, #2]
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	f000 fd11 	bl	800e31e <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b084      	sub	sp, #16
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d90e:	2300      	movs	r3, #0
 800d910:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	881b      	ldrh	r3, [r3, #0]
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	4618      	mov	r0, r3
 800d91e:	f000 fd0c 	bl	800e33a <aci_gatt_server_confirmation_event>

  return status;
 800d922:	7bfb      	ldrb	r3, [r7, #15]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3710      	adds	r7, #16
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800d92c:	b590      	push	{r4, r7, lr}
 800d92e:	b087      	sub	sp, #28
 800d930:	af02      	add	r7, sp, #8
 800d932:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d934:	2300      	movs	r3, #0
 800d936:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	881b      	ldrh	r3, [r3, #0]
 800d940:	b298      	uxth	r0, r3
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	885b      	ldrh	r3, [r3, #2]
 800d946:	b299      	uxth	r1, r3
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	889b      	ldrh	r3, [r3, #4]
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800d956:	9300      	str	r3, [sp, #0]
 800d958:	4623      	mov	r3, r4
 800d95a:	f000 fcf9 	bl	800e350 <aci_gatt_prepare_write_permit_req_event>

  return status;
 800d95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d960:	4618      	mov	r0, r3
 800d962:	3714      	adds	r7, #20
 800d964:	46bd      	mov	sp, r7
 800d966:	bd90      	pop	{r4, r7, pc}

0800d968 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800d968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d96a:	b08b      	sub	sp, #44	@ 0x2c
 800d96c:	af06      	add	r7, sp, #24
 800d96e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d970:	2300      	movs	r3, #0
 800d972:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	781d      	ldrb	r5, [r3, #0]
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d982:	b29e      	uxth	r6, r3
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	f893 c003 	ldrb.w	ip, [r3, #3]
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800d99a:	b292      	uxth	r2, r2
 800d99c:	68b9      	ldr	r1, [r7, #8]
 800d99e:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 800d9a2:	b289      	uxth	r1, r1
 800d9a4:	68b8      	ldr	r0, [r7, #8]
 800d9a6:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 800d9aa:	b280      	uxth	r0, r0
 800d9ac:	68bc      	ldr	r4, [r7, #8]
 800d9ae:	7c64      	ldrb	r4, [r4, #17]
 800d9b0:	9404      	str	r4, [sp, #16]
 800d9b2:	9003      	str	r0, [sp, #12]
 800d9b4:	9102      	str	r1, [sp, #8]
 800d9b6:	9201      	str	r2, [sp, #4]
 800d9b8:	9300      	str	r3, [sp, #0]
 800d9ba:	4673      	mov	r3, lr
 800d9bc:	4662      	mov	r2, ip
 800d9be:	4631      	mov	r1, r6
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	f7f3 fbf1 	bl	80011a8 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800d9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3714      	adds	r7, #20
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9d0 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b0a4      	sub	sp, #144	@ 0x90
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint8_t size = 1;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d9f0:	e0b3      	b.n	800db5a <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800d9f2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800d9f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	005b      	lsls	r3, r3, #1
 800da02:	4413      	add	r3, r2
 800da04:	440b      	add	r3, r1
 800da06:	3301      	adds	r3, #1
 800da08:	7819      	ldrb	r1, [r3, #0]
 800da0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800da0e:	4613      	mov	r3, r2
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	4413      	add	r3, r2
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	3390      	adds	r3, #144	@ 0x90
 800da18:	443b      	add	r3, r7
 800da1a:	3b88      	subs	r3, #136	@ 0x88
 800da1c:	460a      	mov	r2, r1
 800da1e:	701a      	strb	r2, [r3, #0]
    size += 1;
 800da20:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da24:	3301      	adds	r3, #1
 800da26:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800da2a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800da2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800da32:	4613      	mov	r3, r2
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	4413      	add	r3, r2
 800da38:	005b      	lsls	r3, r3, #1
 800da3a:	4413      	add	r3, r2
 800da3c:	440b      	add	r3, r1
 800da3e:	3302      	adds	r3, #2
 800da40:	7819      	ldrb	r1, [r3, #0]
 800da42:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800da46:	4613      	mov	r3, r2
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	4413      	add	r3, r2
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	3390      	adds	r3, #144	@ 0x90
 800da50:	443b      	add	r3, r7
 800da52:	3b87      	subs	r3, #135	@ 0x87
 800da54:	460a      	mov	r2, r1
 800da56:	701a      	strb	r2, [r3, #0]
    size += 1;
 800da58:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da5c:	3301      	adds	r3, #1
 800da5e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800da62:	f107 0108 	add.w	r1, r7, #8
 800da66:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800da6a:	4613      	mov	r3, r2
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	4413      	add	r3, r2
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	440b      	add	r3, r1
 800da74:	1c98      	adds	r0, r3, #2
 800da76:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800da7a:	4613      	mov	r3, r2
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4413      	add	r3, r2
 800da80:	005b      	lsls	r3, r3, #1
 800da82:	4413      	add	r3, r2
 800da84:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800da88:	4413      	add	r3, r2
 800da8a:	3303      	adds	r3, #3
 800da8c:	2206      	movs	r2, #6
 800da8e:	4619      	mov	r1, r3
 800da90:	f008 fbe5 	bl	801625e <memcpy>
    size += 6;
 800da94:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da98:	3306      	adds	r3, #6
 800da9a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800da9e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800daa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800daa6:	4613      	mov	r3, r2
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	4413      	add	r3, r2
 800daac:	005b      	lsls	r3, r3, #1
 800daae:	4413      	add	r3, r2
 800dab0:	440b      	add	r3, r1
 800dab2:	3309      	adds	r3, #9
 800dab4:	7819      	ldrb	r1, [r3, #0]
 800dab6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800daba:	4613      	mov	r3, r2
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4413      	add	r3, r2
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	3390      	adds	r3, #144	@ 0x90
 800dac4:	443b      	add	r3, r7
 800dac6:	3b80      	subs	r3, #128	@ 0x80
 800dac8:	460a      	mov	r2, r1
 800daca:	701a      	strb	r2, [r3, #0]
    size += 1;
 800dacc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dad0:	3301      	adds	r3, #1
 800dad2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800dad6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dada:	4613      	mov	r3, r2
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	4413      	add	r3, r2
 800dae0:	005b      	lsls	r3, r3, #1
 800dae2:	4413      	add	r3, r2
 800dae4:	3308      	adds	r3, #8
 800dae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800daea:	4413      	add	r3, r2
 800daec:	1c99      	adds	r1, r3, #2
 800daee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800daf2:	4613      	mov	r3, r2
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	4413      	add	r3, r2
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	3390      	adds	r3, #144	@ 0x90
 800dafc:	443b      	add	r3, r7
 800dafe:	3b7c      	subs	r3, #124	@ 0x7c
 800db00:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800db02:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800db06:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800db0a:	4613      	mov	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	4413      	add	r3, r2
 800db10:	005b      	lsls	r3, r3, #1
 800db12:	4413      	add	r3, r2
 800db14:	440b      	add	r3, r1
 800db16:	3309      	adds	r3, #9
 800db18:	781a      	ldrb	r2, [r3, #0]
 800db1a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800db1e:	4413      	add	r3, r2
 800db20:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800db24:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	4413      	add	r3, r2
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	b259      	sxtb	r1, r3
 800db30:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800db34:	4613      	mov	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4413      	add	r3, r2
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	3390      	adds	r3, #144	@ 0x90
 800db3e:	443b      	add	r3, r7
 800db40:	3b78      	subs	r3, #120	@ 0x78
 800db42:	460a      	mov	r2, r1
 800db44:	701a      	strb	r2, [r3, #0]
    size += 1;
 800db46:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800db4a:	3301      	adds	r3, #1
 800db4c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800db50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800db54:	3301      	adds	r3, #1
 800db56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800db5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	461a      	mov	r2, r3
 800db62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800db66:	4293      	cmp	r3, r2
 800db68:	f6ff af43 	blt.w	800d9f2 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800db6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	f107 0208 	add.w	r2, r7, #8
 800db76:	4611      	mov	r1, r2
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 f9e3 	bl	800df44 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800db7e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800db82:	4618      	mov	r0, r3
 800db84:	3790      	adds	r7, #144	@ 0x90
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800db8a:	b590      	push	{r4, r7, lr}
 800db8c:	b087      	sub	sp, #28
 800db8e:	af02      	add	r7, sp, #8
 800db90:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800db92:	2300      	movs	r3, #0
 800db94:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	7818      	ldrb	r0, [r3, #0]
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dba4:	b299      	uxth	r1, r3
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800dbb4:	b29c      	uxth	r4, r3
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	4623      	mov	r3, r4
 800dbc2:	f000 f9cb 	bl	800df5c <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3714      	adds	r7, #20
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd90      	pop	{r4, r7, pc}

0800dbd0 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	7818      	ldrb	r0, [r3, #0]
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dbea:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	f000 f9c7 	bl	800df84 <hci_le_read_remote_used_features_complete_event>

  return status;
 800dbf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	881b      	ldrh	r3, [r3, #0]
 800dc14:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	895b      	ldrh	r3, [r3, #10]
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	461a      	mov	r2, r3
 800dc22:	f000 f9bd 	bl	800dfa0 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800dc30:	b590      	push	{r4, r7, lr}
 800dc32:	b087      	sub	sp, #28
 800dc34:	af02      	add	r7, sp, #8
 800dc36:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	881b      	ldrh	r3, [r3, #0]
 800dc44:	b298      	uxth	r0, r3
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	885b      	ldrh	r3, [r3, #2]
 800dc4a:	b299      	uxth	r1, r3
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	889b      	ldrh	r3, [r3, #4]
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	88db      	ldrh	r3, [r3, #6]
 800dc56:	b29c      	uxth	r4, r3
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	891b      	ldrh	r3, [r3, #8]
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	4623      	mov	r3, r4
 800dc62:	f000 f9ab 	bl	800dfbc <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3714      	adds	r7, #20
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd90      	pop	{r4, r7, pc}

0800dc70 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	f000 f9aa 	bl	800dfe4 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800dc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b084      	sub	sp, #16
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dca2:	2300      	movs	r3, #0
 800dca4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	f000 f9a1 	bl	800dffc <hci_le_generate_dhkey_complete_event>

  return status;
 800dcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800dcc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcc8:	b08d      	sub	sp, #52	@ 0x34
 800dcca:	af08      	add	r7, sp, #32
 800dccc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	f893 c000 	ldrb.w	ip, [r3]
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dce2:	fa1f fe83 	uxth.w	lr, r3
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	f893 8003 	ldrb.w	r8, [r3, #3]
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800dcfa:	68b9      	ldr	r1, [r7, #8]
 800dcfc:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800dcfe:	68b8      	ldr	r0, [r7, #8]
 800dd00:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800dd04:	b280      	uxth	r0, r0
 800dd06:	68bc      	ldr	r4, [r7, #8]
 800dd08:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800dd0c:	b2a4      	uxth	r4, r4
 800dd0e:	68bd      	ldr	r5, [r7, #8]
 800dd10:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800dd14:	b2ad      	uxth	r5, r5
 800dd16:	68be      	ldr	r6, [r7, #8]
 800dd18:	7f76      	ldrb	r6, [r6, #29]
 800dd1a:	9606      	str	r6, [sp, #24]
 800dd1c:	9505      	str	r5, [sp, #20]
 800dd1e:	9404      	str	r4, [sp, #16]
 800dd20:	9003      	str	r0, [sp, #12]
 800dd22:	9102      	str	r1, [sp, #8]
 800dd24:	9201      	str	r2, [sp, #4]
 800dd26:	9300      	str	r3, [sp, #0]
 800dd28:	464b      	mov	r3, r9
 800dd2a:	4642      	mov	r2, r8
 800dd2c:	4671      	mov	r1, lr
 800dd2e:	4660      	mov	r0, ip
 800dd30:	f000 f970 	bl	800e014 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3714      	adds	r7, #20
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800dd40 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b0a6      	sub	sp, #152	@ 0x98
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 800dd54:	2301      	movs	r3, #1
 800dd56:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dd60:	e085      	b.n	800de6e <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800dd62:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dd66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dd6a:	011b      	lsls	r3, r3, #4
 800dd6c:	4413      	add	r3, r2
 800dd6e:	3301      	adds	r3, #1
 800dd70:	781a      	ldrb	r2, [r3, #0]
 800dd72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dd76:	011b      	lsls	r3, r3, #4
 800dd78:	3398      	adds	r3, #152	@ 0x98
 800dd7a:	443b      	add	r3, r7
 800dd7c:	3b90      	subs	r3, #144	@ 0x90
 800dd7e:	701a      	strb	r2, [r3, #0]
    size += 1;
 800dd80:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800dd84:	3301      	adds	r3, #1
 800dd86:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800dd8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dd8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dd92:	011b      	lsls	r3, r3, #4
 800dd94:	4413      	add	r3, r2
 800dd96:	3302      	adds	r3, #2
 800dd98:	781a      	ldrb	r2, [r3, #0]
 800dd9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dd9e:	011b      	lsls	r3, r3, #4
 800dda0:	3398      	adds	r3, #152	@ 0x98
 800dda2:	443b      	add	r3, r7
 800dda4:	3b8f      	subs	r3, #143	@ 0x8f
 800dda6:	701a      	strb	r2, [r3, #0]
    size += 1;
 800dda8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ddac:	3301      	adds	r3, #1
 800ddae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800ddb2:	f107 0208 	add.w	r2, r7, #8
 800ddb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ddba:	011b      	lsls	r3, r3, #4
 800ddbc:	4413      	add	r3, r2
 800ddbe:	1c98      	adds	r0, r3, #2
 800ddc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ddc4:	011b      	lsls	r3, r3, #4
 800ddc6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ddca:	4413      	add	r3, r2
 800ddcc:	3303      	adds	r3, #3
 800ddce:	2206      	movs	r2, #6
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	f008 fa44 	bl	801625e <memcpy>
    size += 6;
 800ddd6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ddda:	3306      	adds	r3, #6
 800dddc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800dde0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dde4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dde8:	011b      	lsls	r3, r3, #4
 800ddea:	4413      	add	r3, r2
 800ddec:	3309      	adds	r3, #9
 800ddee:	781a      	ldrb	r2, [r3, #0]
 800ddf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ddf4:	011b      	lsls	r3, r3, #4
 800ddf6:	3398      	adds	r3, #152	@ 0x98
 800ddf8:	443b      	add	r3, r7
 800ddfa:	3b88      	subs	r3, #136	@ 0x88
 800ddfc:	701a      	strb	r2, [r3, #0]
    size += 1;
 800ddfe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800de02:	3301      	adds	r3, #1
 800de04:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800de08:	f107 0208 	add.w	r2, r7, #8
 800de0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800de10:	011b      	lsls	r3, r3, #4
 800de12:	3308      	adds	r3, #8
 800de14:	4413      	add	r3, r2
 800de16:	1c58      	adds	r0, r3, #1
 800de18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800de1c:	011b      	lsls	r3, r3, #4
 800de1e:	3308      	adds	r3, #8
 800de20:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800de24:	4413      	add	r3, r2
 800de26:	3302      	adds	r3, #2
 800de28:	2206      	movs	r2, #6
 800de2a:	4619      	mov	r1, r3
 800de2c:	f008 fa17 	bl	801625e <memcpy>
    size += 6;
 800de30:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800de34:	3306      	adds	r3, #6
 800de36:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800de3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800de3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800de42:	011b      	lsls	r3, r3, #4
 800de44:	4413      	add	r3, r2
 800de46:	3310      	adds	r3, #16
 800de48:	f993 2000 	ldrsb.w	r2, [r3]
 800de4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800de50:	011b      	lsls	r3, r3, #4
 800de52:	3398      	adds	r3, #152	@ 0x98
 800de54:	443b      	add	r3, r7
 800de56:	3b81      	subs	r3, #129	@ 0x81
 800de58:	701a      	strb	r2, [r3, #0]
    size += 1;
 800de5a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800de5e:	3301      	adds	r3, #1
 800de60:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800de64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800de68:	3301      	adds	r3, #1
 800de6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	461a      	mov	r2, r3
 800de76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800de7a:	4293      	cmp	r3, r2
 800de7c:	f6ff af71 	blt.w	800dd62 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800de80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	f107 0208 	add.w	r2, r7, #8
 800de8a:	4611      	mov	r1, r2
 800de8c:	4618      	mov	r0, r3
 800de8e:	f000 f8d5 	bl	800e03c <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800de92:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800de96:	4618      	mov	r0, r3
 800de98:	3798      	adds	r7, #152	@ 0x98
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800de9e:	b480      	push	{r7}
 800dea0:	b083      	sub	sp, #12
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	4603      	mov	r3, r0
 800dea6:	71fb      	strb	r3, [r7, #7]
 800dea8:	460b      	mov	r3, r1
 800deaa:	80bb      	strh	r3, [r7, #4]
 800deac:	4613      	mov	r3, r2
 800deae:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800debc:	b490      	push	{r4, r7}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	4604      	mov	r4, r0
 800dec4:	4608      	mov	r0, r1
 800dec6:	4611      	mov	r1, r2
 800dec8:	461a      	mov	r2, r3
 800deca:	4623      	mov	r3, r4
 800decc:	71fb      	strb	r3, [r7, #7]
 800dece:	4603      	mov	r3, r0
 800ded0:	80bb      	strh	r3, [r7, #4]
 800ded2:	460b      	mov	r3, r1
 800ded4:	71bb      	strb	r3, [r7, #6]
 800ded6:	4613      	mov	r3, r2
 800ded8:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800deda:	bf00      	nop
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bc90      	pop	{r4, r7}
 800dee2:	4770      	bx	lr

0800dee4 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	4603      	mov	r3, r0
 800deec:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 800deee:	bf00      	nop
 800def0:	370c      	adds	r7, #12
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr

0800defa <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800defa:	b480      	push	{r7}
 800defc:	b083      	sub	sp, #12
 800defe:	af00      	add	r7, sp, #0
 800df00:	4603      	mov	r3, r0
 800df02:	6039      	str	r1, [r7, #0]
 800df04:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800df06:	bf00      	nop
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 800df12:	b480      	push	{r7}
 800df14:	b083      	sub	sp, #12
 800df16:	af00      	add	r7, sp, #0
 800df18:	4603      	mov	r3, r0
 800df1a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	4603      	mov	r3, r0
 800df30:	460a      	mov	r2, r1
 800df32:	71fb      	strb	r3, [r7, #7]
 800df34:	4613      	mov	r3, r2
 800df36:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800df38:	bf00      	nop
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	4603      	mov	r3, r0
 800df4c:	6039      	str	r1, [r7, #0]
 800df4e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 800df50:	bf00      	nop
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 800df5c:	b490      	push	{r4, r7}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	4604      	mov	r4, r0
 800df64:	4608      	mov	r0, r1
 800df66:	4611      	mov	r1, r2
 800df68:	461a      	mov	r2, r3
 800df6a:	4623      	mov	r3, r4
 800df6c:	71fb      	strb	r3, [r7, #7]
 800df6e:	4603      	mov	r3, r0
 800df70:	80bb      	strh	r3, [r7, #4]
 800df72:	460b      	mov	r3, r1
 800df74:	807b      	strh	r3, [r7, #2]
 800df76:	4613      	mov	r3, r2
 800df78:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 800df7a:	bf00      	nop
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bc90      	pop	{r4, r7}
 800df82:	4770      	bx	lr

0800df84 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	603a      	str	r2, [r7, #0]
 800df8e:	71fb      	strb	r3, [r7, #7]
 800df90:	460b      	mov	r3, r1
 800df92:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	6039      	str	r1, [r7, #0]
 800dfaa:	80fb      	strh	r3, [r7, #6]
 800dfac:	4613      	mov	r3, r2
 800dfae:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800dfb0:	bf00      	nop
 800dfb2:	370c      	adds	r7, #12
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800dfbc:	b490      	push	{r4, r7}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	4608      	mov	r0, r1
 800dfc6:	4611      	mov	r1, r2
 800dfc8:	461a      	mov	r2, r3
 800dfca:	4623      	mov	r3, r4
 800dfcc:	80fb      	strh	r3, [r7, #6]
 800dfce:	4603      	mov	r3, r0
 800dfd0:	80bb      	strh	r3, [r7, #4]
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	807b      	strh	r3, [r7, #2]
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 800dfda:	bf00      	nop
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bc90      	pop	{r4, r7}
 800dfe2:	4770      	bx	lr

0800dfe4 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	6039      	str	r1, [r7, #0]
 800dfee:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 800dff0:	bf00      	nop
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
 800e002:	4603      	mov	r3, r0
 800e004:	6039      	str	r1, [r7, #0]
 800e006:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800e008:	bf00      	nop
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800e014:	b490      	push	{r4, r7}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	4604      	mov	r4, r0
 800e01c:	4608      	mov	r0, r1
 800e01e:	4611      	mov	r1, r2
 800e020:	461a      	mov	r2, r3
 800e022:	4623      	mov	r3, r4
 800e024:	71fb      	strb	r3, [r7, #7]
 800e026:	4603      	mov	r3, r0
 800e028:	80bb      	strh	r3, [r7, #4]
 800e02a:	460b      	mov	r3, r1
 800e02c:	71bb      	strb	r3, [r7, #6]
 800e02e:	4613      	mov	r3, r2
 800e030:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800e032:	bf00      	nop
 800e034:	3708      	adds	r7, #8
 800e036:	46bd      	mov	sp, r7
 800e038:	bc90      	pop	{r4, r7}
 800e03a:	4770      	bx	lr

0800e03c <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	4603      	mov	r3, r0
 800e044:	6039      	str	r1, [r7, #0]
 800e046:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800e048:	bf00      	nop
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800e054:	b480      	push	{r7}
 800e056:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800e058:	bf00      	nop
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	4603      	mov	r3, r0
 800e06a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 800e078:	b480      	push	{r7}
 800e07a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800e07c:	bf00      	nop
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr

0800e086 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 800e086:	b480      	push	{r7}
 800e088:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 800e08a:	bf00      	nop
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	603b      	str	r3, [r7, #0]
 800e09c:	4603      	mov	r3, r0
 800e09e:	71fb      	strb	r3, [r7, #7]
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	71bb      	strb	r3, [r7, #6]
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800e0a8:	bf00      	nop
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800e0be:	bf00      	nop
 800e0c0:	370c      	adds	r7, #12
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr

0800e0ca <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800e0ca:	b480      	push	{r7}
 800e0cc:	b083      	sub	sp, #12
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	6039      	str	r1, [r7, #0]
 800e0d4:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 800e0d6:	bf00      	nop
 800e0d8:	370c      	adds	r7, #12
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr

0800e0e2 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800e0e2:	b480      	push	{r7}
 800e0e4:	b083      	sub	sp, #12
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	460a      	mov	r2, r1
 800e0ec:	80fb      	strh	r3, [r7, #6]
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800e0f2:	bf00      	nop
 800e0f4:	370c      	adds	r7, #12
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800e0fe:	b480      	push	{r7}
 800e100:	b083      	sub	sp, #12
 800e102:	af00      	add	r7, sp, #0
 800e104:	4603      	mov	r3, r0
 800e106:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 800e108:	bf00      	nop
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	4603      	mov	r3, r0
 800e11c:	460a      	mov	r2, r1
 800e11e:	80fb      	strh	r3, [r7, #6]
 800e120:	4613      	mov	r3, r2
 800e122:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 800e124:	bf00      	nop
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	603b      	str	r3, [r7, #0]
 800e138:	4603      	mov	r3, r0
 800e13a:	80fb      	strh	r3, [r7, #6]
 800e13c:	460b      	mov	r3, r1
 800e13e:	717b      	strb	r3, [r7, #5]
 800e140:	4613      	mov	r3, r2
 800e142:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800e144:	bf00      	nop
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	4603      	mov	r3, r0
 800e158:	603a      	str	r2, [r7, #0]
 800e15a:	80fb      	strh	r3, [r7, #6]
 800e15c:	460b      	mov	r3, r1
 800e15e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	603b      	str	r3, [r7, #0]
 800e174:	4603      	mov	r3, r0
 800e176:	80fb      	strh	r3, [r7, #6]
 800e178:	460b      	mov	r3, r1
 800e17a:	717b      	strb	r3, [r7, #5]
 800e17c:	4613      	mov	r3, r2
 800e17e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 800e180:	bf00      	nop
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	4603      	mov	r3, r0
 800e194:	603a      	str	r2, [r7, #0]
 800e196:	80fb      	strh	r3, [r7, #6]
 800e198:	460b      	mov	r3, r1
 800e19a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 800e19c:	bf00      	nop
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	603a      	str	r2, [r7, #0]
 800e1b2:	80fb      	strh	r3, [r7, #6]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 800e1b8:	bf00      	nop
 800e1ba:	370c      	adds	r7, #12
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	603a      	str	r2, [r7, #0]
 800e1ce:	80fb      	strh	r3, [r7, #6]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 800e1d4:	bf00      	nop
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	603b      	str	r3, [r7, #0]
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	80fb      	strh	r3, [r7, #6]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	717b      	strb	r3, [r7, #5]
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 800e1f4:	bf00      	nop
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 800e200:	b490      	push	{r4, r7}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	4604      	mov	r4, r0
 800e208:	4608      	mov	r0, r1
 800e20a:	4611      	mov	r1, r2
 800e20c:	461a      	mov	r2, r3
 800e20e:	4623      	mov	r3, r4
 800e210:	80fb      	strh	r3, [r7, #6]
 800e212:	4603      	mov	r3, r0
 800e214:	80bb      	strh	r3, [r7, #4]
 800e216:	460b      	mov	r3, r1
 800e218:	807b      	strh	r3, [r7, #2]
 800e21a:	4613      	mov	r3, r2
 800e21c:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800e21e:	bf00      	nop
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bc90      	pop	{r4, r7}
 800e226:	4770      	bx	lr

0800e228 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	4603      	mov	r3, r0
 800e230:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 800e232:	bf00      	nop
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800e23e:	b480      	push	{r7}
 800e240:	b085      	sub	sp, #20
 800e242:	af00      	add	r7, sp, #0
 800e244:	607b      	str	r3, [r7, #4]
 800e246:	4603      	mov	r3, r0
 800e248:	81fb      	strh	r3, [r7, #14]
 800e24a:	460b      	mov	r3, r1
 800e24c:	81bb      	strh	r3, [r7, #12]
 800e24e:	4613      	mov	r3, r2
 800e250:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 800e252:	bf00      	nop
 800e254:	3714      	adds	r7, #20
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr

0800e25e <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 800e25e:	b480      	push	{r7}
 800e260:	b085      	sub	sp, #20
 800e262:	af00      	add	r7, sp, #0
 800e264:	607b      	str	r3, [r7, #4]
 800e266:	4603      	mov	r3, r0
 800e268:	81fb      	strh	r3, [r7, #14]
 800e26a:	460b      	mov	r3, r1
 800e26c:	81bb      	strh	r3, [r7, #12]
 800e26e:	4613      	mov	r3, r2
 800e270:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 800e272:	bf00      	nop
 800e274:	3714      	adds	r7, #20
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 800e27e:	b480      	push	{r7}
 800e280:	b083      	sub	sp, #12
 800e282:	af00      	add	r7, sp, #0
 800e284:	4603      	mov	r3, r0
 800e286:	460a      	mov	r2, r1
 800e288:	80fb      	strh	r3, [r7, #6]
 800e28a:	4613      	mov	r3, r2
 800e28c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 800e28e:	bf00      	nop
 800e290:	370c      	adds	r7, #12
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr

0800e29a <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800e29a:	b490      	push	{r4, r7}
 800e29c:	b082      	sub	sp, #8
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	4608      	mov	r0, r1
 800e2a4:	4611      	mov	r1, r2
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	4623      	mov	r3, r4
 800e2aa:	80fb      	strh	r3, [r7, #6]
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	717b      	strb	r3, [r7, #5]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	807b      	strh	r3, [r7, #2]
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800e2b8:	bf00      	nop
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bc90      	pop	{r4, r7}
 800e2c0:	4770      	bx	lr

0800e2c2 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 800e2c2:	b480      	push	{r7}
 800e2c4:	b085      	sub	sp, #20
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	607b      	str	r3, [r7, #4]
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	81fb      	strh	r3, [r7, #14]
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	81bb      	strh	r3, [r7, #12]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 800e2d6:	bf00      	nop
 800e2d8:	3714      	adds	r7, #20
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800e2e2:	b480      	push	{r7}
 800e2e4:	b085      	sub	sp, #20
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	607b      	str	r3, [r7, #4]
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	81fb      	strh	r3, [r7, #14]
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	81bb      	strh	r3, [r7, #12]
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 800e2f6:	bf00      	nop
 800e2f8:	3714      	adds	r7, #20
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr

0800e302 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800e302:	b480      	push	{r7}
 800e304:	b083      	sub	sp, #12
 800e306:	af00      	add	r7, sp, #0
 800e308:	4603      	mov	r3, r0
 800e30a:	603a      	str	r2, [r7, #0]
 800e30c:	80fb      	strh	r3, [r7, #6]
 800e30e:	460b      	mov	r3, r1
 800e310:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 800e312:	bf00      	nop
 800e314:	370c      	adds	r7, #12
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr

0800e31e <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800e31e:	b480      	push	{r7}
 800e320:	b083      	sub	sp, #12
 800e322:	af00      	add	r7, sp, #0
 800e324:	4603      	mov	r3, r0
 800e326:	460a      	mov	r2, r1
 800e328:	80fb      	strh	r3, [r7, #6]
 800e32a:	4613      	mov	r3, r2
 800e32c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800e32e:	bf00      	nop
 800e330:	370c      	adds	r7, #12
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr

0800e33a <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800e33a:	b480      	push	{r7}
 800e33c:	b083      	sub	sp, #12
 800e33e:	af00      	add	r7, sp, #0
 800e340:	4603      	mov	r3, r0
 800e342:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 800e344:	bf00      	nop
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800e350:	b490      	push	{r4, r7}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	4604      	mov	r4, r0
 800e358:	4608      	mov	r0, r1
 800e35a:	4611      	mov	r1, r2
 800e35c:	461a      	mov	r2, r3
 800e35e:	4623      	mov	r3, r4
 800e360:	80fb      	strh	r3, [r7, #6]
 800e362:	4603      	mov	r3, r0
 800e364:	80bb      	strh	r3, [r7, #4]
 800e366:	460b      	mov	r3, r1
 800e368:	807b      	strh	r3, [r7, #2]
 800e36a:	4613      	mov	r3, r2
 800e36c:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 800e36e:	bf00      	nop
 800e370:	3708      	adds	r7, #8
 800e372:	46bd      	mov	sp, r7
 800e374:	bc90      	pop	{r4, r7}
 800e376:	4770      	bx	lr

0800e378 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	4603      	mov	r3, r0
 800e380:	460a      	mov	r2, r1
 800e382:	80fb      	strh	r3, [r7, #6]
 800e384:	4613      	mov	r3, r2
 800e386:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	603a      	str	r2, [r7, #0]
 800e39e:	80fb      	strh	r3, [r7, #6]
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800e3a4:	bf00      	nop
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800e3b0:	b490      	push	{r4, r7}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	4608      	mov	r0, r1
 800e3ba:	4611      	mov	r1, r2
 800e3bc:	461a      	mov	r2, r3
 800e3be:	4623      	mov	r3, r4
 800e3c0:	80fb      	strh	r3, [r7, #6]
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	717b      	strb	r3, [r7, #5]
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	807b      	strh	r3, [r7, #2]
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800e3ce:	bf00      	nop
 800e3d0:	3708      	adds	r7, #8
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bc90      	pop	{r4, r7}
 800e3d6:	4770      	bx	lr

0800e3d8 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800e3d8:	b490      	push	{r4, r7}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	4604      	mov	r4, r0
 800e3e0:	4608      	mov	r0, r1
 800e3e2:	4611      	mov	r1, r2
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	4623      	mov	r3, r4
 800e3e8:	80fb      	strh	r3, [r7, #6]
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	717b      	strb	r3, [r7, #5]
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	807b      	strh	r3, [r7, #2]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800e3f6:	bf00      	nop
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bc90      	pop	{r4, r7}
 800e3fe:	4770      	bx	lr

0800e400 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
 800e406:	4603      	mov	r3, r0
 800e408:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 800e40a:	bf00      	nop
 800e40c:	370c      	adds	r7, #12
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr

0800e416 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800e416:	b480      	push	{r7}
 800e418:	b083      	sub	sp, #12
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800e41e:	bf00      	nop
 800e420:	370c      	adds	r7, #12
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr

0800e42a <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800e42a:	b480      	push	{r7}
 800e42c:	b085      	sub	sp, #20
 800e42e:	af00      	add	r7, sp, #0
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	607a      	str	r2, [r7, #4]
 800e434:	603b      	str	r3, [r7, #0]
 800e436:	4603      	mov	r3, r0
 800e438:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800e43a:	bf00      	nop
 800e43c:	3714      	adds	r7, #20
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr

0800e446 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800e446:	b480      	push	{r7}
 800e448:	b083      	sub	sp, #12
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	4603      	mov	r3, r0
 800e44e:	603a      	str	r2, [r7, #0]
 800e450:	71fb      	strb	r3, [r7, #7]
 800e452:	460b      	mov	r3, r1
 800e454:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800e456:	bf00      	nop
 800e458:	370c      	adds	r7, #12
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 800e462:	b480      	push	{r7}
 800e464:	b083      	sub	sp, #12
 800e466:	af00      	add	r7, sp, #0
 800e468:	4603      	mov	r3, r0
 800e46a:	603a      	str	r2, [r7, #0]
 800e46c:	71fb      	strb	r3, [r7, #7]
 800e46e:	460b      	mov	r3, r1
 800e470:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 800e472:	bf00      	nop
 800e474:	370c      	adds	r7, #12
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr

0800e47e <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800e47e:	b480      	push	{r7}
 800e480:	b083      	sub	sp, #12
 800e482:	af00      	add	r7, sp, #0
 800e484:	4603      	mov	r3, r0
 800e486:	603a      	str	r2, [r7, #0]
 800e488:	71fb      	strb	r3, [r7, #7]
 800e48a:	460b      	mov	r3, r1
 800e48c:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800e48e:	bf00      	nop
 800e490:	370c      	adds	r7, #12
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr

0800e49a <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b088      	sub	sp, #32
 800e49e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e4a4:	f107 0308 	add.w	r3, r7, #8
 800e4a8:	2218      	movs	r2, #24
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f007 fe1c 	bl	80160ea <memset>
  rq.ogf = 0x03;
 800e4b2:	2303      	movs	r3, #3
 800e4b4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800e4b6:	2303      	movs	r3, #3
 800e4b8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e4ba:	1dfb      	adds	r3, r7, #7
 800e4bc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800e4c2:	f107 0308 	add.w	r3, r7, #8
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f001 fa53 	bl	800f974 <hci_send_req>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	da01      	bge.n	800e4d8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e4d4:	23ff      	movs	r3, #255	@ 0xff
 800e4d6:	e005      	b.n	800e4e4 <hci_reset+0x4a>
  if (status) {
 800e4d8:	79fb      	ldrb	r3, [r7, #7]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d001      	beq.n	800e4e2 <hci_reset+0x48>
    return status;
 800e4de:	79fb      	ldrb	r3, [r7, #7]
 800e4e0:	e000      	b.n	800e4e4 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800e4e2:	2300      	movs	r3, #0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3720      	adds	r7, #32
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b08e      	sub	sp, #56	@ 0x38
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
 800e4f8:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e4fa:	f107 0314 	add.w	r3, r7, #20
 800e4fe:	2209      	movs	r2, #9
 800e500:	2100      	movs	r1, #0
 800e502:	4618      	mov	r0, r3
 800e504:	f007 fdf1 	bl	80160ea <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e508:	f107 0320 	add.w	r3, r7, #32
 800e50c:	2218      	movs	r2, #24
 800e50e:	2100      	movs	r1, #0
 800e510:	4618      	mov	r0, r3
 800e512:	f007 fdea 	bl	80160ea <memset>
  rq.ogf = 0x04;
 800e516:	2304      	movs	r3, #4
 800e518:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 800e51a:	2301      	movs	r3, #1
 800e51c:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.rparam = &resp;
 800e51e:	f107 0314 	add.w	r3, r7, #20
 800e522:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = sizeof(resp);
 800e524:	2309      	movs	r3, #9
 800e526:	637b      	str	r3, [r7, #52]	@ 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800e528:	f107 0320 	add.w	r3, r7, #32
 800e52c:	2100      	movs	r1, #0
 800e52e:	4618      	mov	r0, r3
 800e530:	f001 fa20 	bl	800f974 <hci_send_req>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	da01      	bge.n	800e53e <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 800e53a:	23ff      	movs	r3, #255	@ 0xff
 800e53c:	e018      	b.n	800e570 <hci_read_local_version_information+0x84>
  if (resp.Status) {
 800e53e:	7d3b      	ldrb	r3, [r7, #20]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d001      	beq.n	800e548 <hci_read_local_version_information+0x5c>
    return resp.Status;
 800e544:	7d3b      	ldrb	r3, [r7, #20]
 800e546:	e013      	b.n	800e570 <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800e548:	7d7a      	ldrb	r2, [r7, #21]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800e54e:	8afa      	ldrh	r2, [r7, #22]
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800e554:	7e3a      	ldrb	r2, [r7, #24]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800e55a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800e55e:	b29a      	uxth	r2, r3
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800e564:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800e568:	b29a      	uxth	r2, r3
 800e56a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e56c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e56e:	2300      	movs	r3, #0
}
 800e570:	4618      	mov	r0, r3
 800e572:	3738      	adds	r7, #56	@ 0x38
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b0cc      	sub	sp, #304	@ 0x130
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	4602      	mov	r2, r0
 800e580:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e584:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e588:	6019      	str	r1, [r3, #0]
 800e58a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e58e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e592:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800e594:	f107 030c 	add.w	r3, r7, #12
 800e598:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e59c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5a0:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800e5ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e5b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e5b6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e5ba:	7812      	ldrb	r2, [r2, #0]
 800e5bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e5be:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800e5c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5cc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00a      	beq.n	800e5ec <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800e5d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e5da:	1c58      	adds	r0, r3, #1
 800e5dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e5e4:	221f      	movs	r2, #31
 800e5e6:	6819      	ldr	r1, [r3, #0]
 800e5e8:	f007 fe39 	bl	801625e <memcpy>
  }
  index_input += 31;
 800e5ec:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e5f0:	331f      	adds	r3, #31
 800e5f2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e5f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e5fa:	2218      	movs	r2, #24
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	4618      	mov	r0, r3
 800e600:	f007 fd73 	bl	80160ea <memset>
  rq.ogf = 0x08;
 800e604:	2308      	movs	r3, #8
 800e606:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x009;
 800e60a:	2309      	movs	r3, #9
 800e60c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e610:	f107 030c 	add.w	r3, r7, #12
 800e614:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e618:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e61c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e620:	f107 030b 	add.w	r3, r7, #11
 800e624:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e628:	2301      	movs	r3, #1
 800e62a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800e62e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e632:	2100      	movs	r1, #0
 800e634:	4618      	mov	r0, r3
 800e636:	f001 f99d 	bl	800f974 <hci_send_req>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	da01      	bge.n	800e644 <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 800e640:	23ff      	movs	r3, #255	@ 0xff
 800e642:	e00d      	b.n	800e660 <hci_le_set_scan_response_data+0xe8>
  if (status) {
 800e644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e648:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d005      	beq.n	800e65e <hci_le_set_scan_response_data+0xe6>
    return status;
 800e652:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e656:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	e000      	b.n	800e660 <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800e66a:	b5b0      	push	{r4, r5, r7, lr}
 800e66c:	b0ce      	sub	sp, #312	@ 0x138
 800e66e:	af00      	add	r7, sp, #0
 800e670:	4605      	mov	r5, r0
 800e672:	460c      	mov	r4, r1
 800e674:	4610      	mov	r0, r2
 800e676:	4619      	mov	r1, r3
 800e678:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e67c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800e680:	462a      	mov	r2, r5
 800e682:	701a      	strb	r2, [r3, #0]
 800e684:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e688:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e68c:	4622      	mov	r2, r4
 800e68e:	801a      	strh	r2, [r3, #0]
 800e690:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e694:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800e698:	4602      	mov	r2, r0
 800e69a:	801a      	strh	r2, [r3, #0]
 800e69c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e6a0:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800e6a4:	460a      	mov	r2, r1
 800e6a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800e6a8:	f107 030c 	add.w	r3, r7, #12
 800e6ac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800e6b0:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	f107 020c 	add.w	r2, r7, #12
 800e6ba:	4413      	add	r3, r2
 800e6bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800e6c0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e6c4:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800e6c8:	4413      	add	r3, r2
 800e6ca:	3309      	adds	r3, #9
 800e6cc:	f107 020c 	add.w	r2, r7, #12
 800e6d0:	4413      	add	r3, r2
 800e6d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e6d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e6da:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800e6de:	2200      	movs	r2, #0
 800e6e0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800e6e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e6ec:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e6f0:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800e6f4:	7812      	ldrb	r2, [r2, #0]
 800e6f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e6f8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800e702:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e706:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e70a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800e70e:	8812      	ldrh	r2, [r2, #0]
 800e710:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800e714:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e718:	3302      	adds	r3, #2
 800e71a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800e71e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e722:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e726:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800e72a:	8812      	ldrh	r2, [r2, #0]
 800e72c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800e730:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e734:	3302      	adds	r3, #2
 800e736:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800e73a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e73e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e742:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800e746:	7812      	ldrb	r2, [r2, #0]
 800e748:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e74a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e74e:	3301      	adds	r3, #1
 800e750:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800e754:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e758:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800e75c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e75e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e762:	3301      	adds	r3, #1
 800e764:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800e768:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e76c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e770:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800e772:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e776:	3301      	adds	r3, #1
 800e778:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800e77c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e780:	3308      	adds	r3, #8
 800e782:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e786:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800e78a:	4618      	mov	r0, r3
 800e78c:	f007 fd67 	bl	801625e <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 800e790:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800e794:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800e798:	4413      	add	r3, r2
 800e79a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800e79e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e7a2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800e7a6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e7a8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800e7b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800e7bc:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f007 fd4c 	bl	801625e <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800e7c6:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800e7ca:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800e7d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e7d8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800e7dc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e7de:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e7e2:	3302      	adds	r3, #2
 800e7e4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800e7e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e7ec:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800e7f0:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800e7f2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e7f6:	3302      	adds	r3, #2
 800e7f8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e7fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e800:	2218      	movs	r2, #24
 800e802:	2100      	movs	r1, #0
 800e804:	4618      	mov	r0, r3
 800e806:	f007 fc70 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800e80a:	233f      	movs	r3, #63	@ 0x3f
 800e80c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800e810:	2383      	movs	r3, #131	@ 0x83
 800e812:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e816:	f107 030c 	add.w	r3, r7, #12
 800e81a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e81e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e822:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e826:	f107 030b 	add.w	r3, r7, #11
 800e82a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e82e:	2301      	movs	r3, #1
 800e830:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800e834:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e838:	2100      	movs	r1, #0
 800e83a:	4618      	mov	r0, r3
 800e83c:	f001 f89a 	bl	800f974 <hci_send_req>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	da01      	bge.n	800e84a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800e846:	23ff      	movs	r3, #255	@ 0xff
 800e848:	e00d      	b.n	800e866 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 800e84a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e84e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d005      	beq.n	800e864 <aci_gap_set_discoverable+0x1fa>
    return status;
 800e858:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e85c:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	e000      	b.n	800e866 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 800e864:	2300      	movs	r3, #0
}
 800e866:	4618      	mov	r0, r3
 800e868:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bdb0      	pop	{r4, r5, r7, pc}

0800e870 <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b0cc      	sub	sp, #304	@ 0x130
 800e874:	af00      	add	r7, sp, #0
 800e876:	4602      	mov	r2, r0
 800e878:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e87c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e880:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800e882:	f107 030c 	add.w	r3, r7, #12
 800e886:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e88a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e88e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800e892:	2200      	movs	r2, #0
 800e894:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800e896:	2300      	movs	r3, #0
 800e898:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->IO_Capability = htob(IO_Capability, 1);
 800e89c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e8a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e8a4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e8a8:	7812      	ldrb	r2, [r2, #0]
 800e8aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e8ac:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e8b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e8ba:	2218      	movs	r2, #24
 800e8bc:	2100      	movs	r1, #0
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f007 fc13 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800e8c4:	233f      	movs	r3, #63	@ 0x3f
 800e8c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800e8ca:	2385      	movs	r3, #133	@ 0x85
 800e8cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e8d0:	f107 030c 	add.w	r3, r7, #12
 800e8d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e8d8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e8dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e8e0:	f107 030b 	add.w	r3, r7, #11
 800e8e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800e8ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e8f2:	2100      	movs	r1, #0
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f001 f83d 	bl	800f974 <hci_send_req>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	da01      	bge.n	800e904 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800e900:	23ff      	movs	r3, #255	@ 0xff
 800e902:	e00d      	b.n	800e920 <aci_gap_set_io_capability+0xb0>
  if (status) {
 800e904:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e908:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d005      	beq.n	800e91e <aci_gap_set_io_capability+0xae>
    return status;
 800e912:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e916:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	e000      	b.n	800e920 <aci_gap_set_io_capability+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 800e91e:	2300      	movs	r3, #0
}
 800e920:	4618      	mov	r0, r3
 800e922:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800e92a:	b5b0      	push	{r4, r5, r7, lr}
 800e92c:	b0cc      	sub	sp, #304	@ 0x130
 800e92e:	af00      	add	r7, sp, #0
 800e930:	4605      	mov	r5, r0
 800e932:	460c      	mov	r4, r1
 800e934:	4610      	mov	r0, r2
 800e936:	4619      	mov	r1, r3
 800e938:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e93c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e940:	462a      	mov	r2, r5
 800e942:	701a      	strb	r2, [r3, #0]
 800e944:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e948:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e94c:	4622      	mov	r2, r4
 800e94e:	701a      	strb	r2, [r3, #0]
 800e950:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e954:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800e958:	4602      	mov	r2, r0
 800e95a:	701a      	strb	r2, [r3, #0]
 800e95c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e960:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e964:	460a      	mov	r2, r1
 800e966:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800e968:	f107 030c 	add.w	r3, r7, #12
 800e96c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e970:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e974:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800e978:	2200      	movs	r2, #0
 800e97a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800e982:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e986:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e98a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e98e:	7812      	ldrb	r2, [r2, #0]
 800e990:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e992:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e996:	3301      	adds	r3, #1
 800e998:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800e99c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e9a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e9a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e9a8:	7812      	ldrb	r2, [r2, #0]
 800e9aa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e9ac:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 800e9b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e9ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e9be:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800e9c2:	7812      	ldrb	r2, [r2, #0]
 800e9c4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e9c6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800e9d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e9d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e9d8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800e9dc:	7812      	ldrb	r2, [r2, #0]
 800e9de:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800e9e0:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800e9ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e9ee:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800e9f2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e9f4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800e9fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ea02:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800ea06:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ea08:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800ea12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ea16:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800ea1a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ea1c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ea20:	3301      	adds	r3, #1
 800ea22:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800ea26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ea2a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800ea2e:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800ea32:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ea36:	3304      	adds	r3, #4
 800ea38:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800ea3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ea40:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800ea44:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800ea46:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ea50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea54:	2218      	movs	r2, #24
 800ea56:	2100      	movs	r1, #0
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f007 fb46 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800ea5e:	233f      	movs	r3, #63	@ 0x3f
 800ea60:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800ea64:	2386      	movs	r3, #134	@ 0x86
 800ea66:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ea6a:	f107 030c 	add.w	r3, r7, #12
 800ea6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ea72:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ea76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ea7a:	f107 030b 	add.w	r3, r7, #11
 800ea7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ea82:	2301      	movs	r3, #1
 800ea84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ea88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea8c:	2100      	movs	r1, #0
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f000 ff70 	bl	800f974 <hci_send_req>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	da01      	bge.n	800ea9e <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800ea9a:	23ff      	movs	r3, #255	@ 0xff
 800ea9c:	e00d      	b.n	800eaba <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 800ea9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eaa2:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d005      	beq.n	800eab8 <aci_gap_set_authentication_requirement+0x18e>
    return status;
 800eaac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eab0:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	e000      	b.n	800eaba <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bdb0      	pop	{r4, r5, r7, pc}

0800eac4 <aci_gap_pass_key_resp>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_pass_key_resp(uint16_t Connection_Handle,
                                 uint32_t Pass_Key)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b0cc      	sub	sp, #304	@ 0x130
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	4602      	mov	r2, r0
 800eacc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ead0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ead4:	6019      	str	r1, [r3, #0]
 800ead6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eada:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800eade:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800eae0:	f107 030c 	add.w	r3, r7, #12
 800eae4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800eae8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eaec:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800eafa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eafe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eb02:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800eb06:	8812      	ldrh	r2, [r2, #0]
 800eb08:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800eb0a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800eb0e:	3302      	adds	r3, #2
 800eb10:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Pass_Key = htob(Pass_Key, 4);
 800eb14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eb1c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800eb20:	6812      	ldr	r2, [r2, #0]
 800eb22:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800eb26:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800eb2a:	3304      	adds	r3, #4
 800eb2c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800eb30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb34:	2218      	movs	r2, #24
 800eb36:	2100      	movs	r1, #0
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f007 fad6 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800eb3e:	233f      	movs	r3, #63	@ 0x3f
 800eb40:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800eb44:	2388      	movs	r3, #136	@ 0x88
 800eb46:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800eb4a:	f107 030c 	add.w	r3, r7, #12
 800eb4e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800eb52:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800eb56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800eb5a:	f107 030b 	add.w	r3, r7, #11
 800eb5e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800eb62:	2301      	movs	r3, #1
 800eb64:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800eb68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 ff00 	bl	800f974 <hci_send_req>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	da01      	bge.n	800eb7e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800eb7a:	23ff      	movs	r3, #255	@ 0xff
 800eb7c:	e00d      	b.n	800eb9a <aci_gap_pass_key_resp+0xd6>
  if (status) {
 800eb7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eb82:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d005      	beq.n	800eb98 <aci_gap_pass_key_resp+0xd4>
    return status;
 800eb8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eb90:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	e000      	b.n	800eb9a <aci_gap_pass_key_resp+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800eba4:	b590      	push	{r4, r7, lr}
 800eba6:	b0cf      	sub	sp, #316	@ 0x13c
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	4604      	mov	r4, r0
 800ebac:	4608      	mov	r0, r1
 800ebae:	4611      	mov	r1, r2
 800ebb0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ebb4:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800ebb8:	6013      	str	r3, [r2, #0]
 800ebba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ebbe:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ebc2:	4622      	mov	r2, r4
 800ebc4:	701a      	strb	r2, [r3, #0]
 800ebc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ebca:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800ebce:	4602      	mov	r2, r0
 800ebd0:	701a      	strb	r2, [r3, #0]
 800ebd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ebd6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ebda:	460a      	mov	r2, r1
 800ebdc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ebde:	f107 0314 	add.w	r3, r7, #20
 800ebe2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ebe6:	f107 030c 	add.w	r3, r7, #12
 800ebea:	2207      	movs	r2, #7
 800ebec:	2100      	movs	r1, #0
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f007 fa7b 	bl	80160ea <memset>
  uint8_t index_input = 0;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Role = htob(Role, 1);
 800ebfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ebfe:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ec02:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ec06:	7812      	ldrb	r2, [r2, #0]
 800ec08:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ec0a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800ec0e:	3301      	adds	r3, #1
 800ec10:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800ec14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ec18:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ec1c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800ec20:	7812      	ldrb	r2, [r2, #0]
 800ec22:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ec24:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800ec28:	3301      	adds	r3, #1
 800ec2a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800ec2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ec32:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ec36:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800ec3a:	7812      	ldrb	r2, [r2, #0]
 800ec3c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ec3e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800ec42:	3301      	adds	r3, #1
 800ec44:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ec4c:	2218      	movs	r2, #24
 800ec4e:	2100      	movs	r1, #0
 800ec50:	4618      	mov	r0, r3
 800ec52:	f007 fa4a 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800ec56:	233f      	movs	r3, #63	@ 0x3f
 800ec58:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x08a;
 800ec5c:	238a      	movs	r3, #138	@ 0x8a
 800ec5e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800ec62:	f107 0314 	add.w	r3, r7, #20
 800ec66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800ec6a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800ec6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800ec72:	f107 030c 	add.w	r3, r7, #12
 800ec76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800ec7a:	2307      	movs	r3, #7
 800ec7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800ec80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ec84:	2100      	movs	r1, #0
 800ec86:	4618      	mov	r0, r3
 800ec88:	f000 fe74 	bl	800f974 <hci_send_req>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	da01      	bge.n	800ec96 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800ec92:	23ff      	movs	r3, #255	@ 0xff
 800ec94:	e02e      	b.n	800ecf4 <aci_gap_init+0x150>
  if (resp.Status) {
 800ec96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ec9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d005      	beq.n	800ecb0 <aci_gap_init+0x10c>
    return resp.Status;
 800eca4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eca8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	e021      	b.n	800ecf4 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800ecb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ecb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ecb8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ecc2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800ecca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ecce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ecd2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800ecdc:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800ecde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ece2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ece6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ecf0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ecf2:	2300      	movs	r3, #0
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd90      	pop	{r4, r7, pc}

0800ecfe <aci_gap_update_adv_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b0cc      	sub	sp, #304	@ 0x130
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	4602      	mov	r2, r0
 800ed06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ed0e:	6019      	str	r1, [r3, #0]
 800ed10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed14:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ed18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800ed1a:	f107 030c 	add.w	r3, r7, #12
 800ed1e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ed22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed26:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800ed34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ed3c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ed40:	7812      	ldrb	r2, [r2, #0]
 800ed42:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ed44:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ed48:	3301      	adds	r3, #1
 800ed4a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800ed4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed52:	1c58      	adds	r0, r3, #1
 800ed54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed58:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ed5c:	781a      	ldrb	r2, [r3, #0]
 800ed5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ed66:	6819      	ldr	r1, [r3, #0]
 800ed68:	f007 fa79 	bl	801625e <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 800ed6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed70:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ed74:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ed80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed84:	2218      	movs	r2, #24
 800ed86:	2100      	movs	r1, #0
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f007 f9ae 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800ed8e:	233f      	movs	r3, #63	@ 0x3f
 800ed90:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800ed94:	238e      	movs	r3, #142	@ 0x8e
 800ed96:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ed9a:	f107 030c 	add.w	r3, r7, #12
 800ed9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800eda2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800eda6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800edaa:	f107 030b 	add.w	r3, r7, #11
 800edae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800edb2:	2301      	movs	r3, #1
 800edb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800edb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800edbc:	2100      	movs	r1, #0
 800edbe:	4618      	mov	r0, r3
 800edc0:	f000 fdd8 	bl	800f974 <hci_send_req>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	da01      	bge.n	800edce <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800edca:	23ff      	movs	r3, #255	@ 0xff
 800edcc:	e00d      	b.n	800edea <aci_gap_update_adv_data+0xec>
  if (status) {
 800edce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800edd2:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d005      	beq.n	800ede8 <aci_gap_update_adv_data+0xea>
    return status;
 800eddc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ede0:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	e000      	b.n	800edea <aci_gap_update_adv_data+0xec>
  }
  return BLE_STATUS_SUCCESS;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <aci_gap_clear_security_db>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_clear_security_db(void)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b088      	sub	sp, #32
 800edf8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800edfe:	f107 0308 	add.w	r3, r7, #8
 800ee02:	2218      	movs	r2, #24
 800ee04:	2100      	movs	r1, #0
 800ee06:	4618      	mov	r0, r3
 800ee08:	f007 f96f 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800ee0c:	233f      	movs	r3, #63	@ 0x3f
 800ee0e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 800ee10:	2394      	movs	r3, #148	@ 0x94
 800ee12:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ee14:	1dfb      	adds	r3, r7, #7
 800ee16:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ee1c:	f107 0308 	add.w	r3, r7, #8
 800ee20:	2100      	movs	r1, #0
 800ee22:	4618      	mov	r0, r3
 800ee24:	f000 fda6 	bl	800f974 <hci_send_req>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	da01      	bge.n	800ee32 <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ee2e:	23ff      	movs	r3, #255	@ 0xff
 800ee30:	e005      	b.n	800ee3e <aci_gap_clear_security_db+0x4a>
  if (status) {
 800ee32:	79fb      	ldrb	r3, [r7, #7]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d001      	beq.n	800ee3c <aci_gap_clear_security_db+0x48>
    return status;
 800ee38:	79fb      	ldrb	r3, [r7, #7]
 800ee3a:	e000      	b.n	800ee3e <aci_gap_clear_security_db+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3720      	adds	r7, #32
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b088      	sub	sp, #32
 800ee4a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ee50:	f107 0308 	add.w	r3, r7, #8
 800ee54:	2218      	movs	r2, #24
 800ee56:	2100      	movs	r1, #0
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f007 f946 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800ee5e:	233f      	movs	r3, #63	@ 0x3f
 800ee60:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800ee62:	f240 1301 	movw	r3, #257	@ 0x101
 800ee66:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ee68:	1dfb      	adds	r3, r7, #7
 800ee6a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ee70:	f107 0308 	add.w	r3, r7, #8
 800ee74:	2100      	movs	r1, #0
 800ee76:	4618      	mov	r0, r3
 800ee78:	f000 fd7c 	bl	800f974 <hci_send_req>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	da01      	bge.n	800ee86 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800ee82:	23ff      	movs	r3, #255	@ 0xff
 800ee84:	e005      	b.n	800ee92 <aci_gatt_init+0x4c>
  if (status) {
 800ee86:	79fb      	ldrb	r3, [r7, #7]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d001      	beq.n	800ee90 <aci_gatt_init+0x4a>
    return status;
 800ee8c:	79fb      	ldrb	r3, [r7, #7]
 800ee8e:	e000      	b.n	800ee92 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3720      	adds	r7, #32
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}

0800ee9a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800ee9a:	b590      	push	{r4, r7, lr}
 800ee9c:	b0cf      	sub	sp, #316	@ 0x13c
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	4604      	mov	r4, r0
 800eea2:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800eea6:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800eeaa:	6001      	str	r1, [r0, #0]
 800eeac:	4610      	mov	r0, r2
 800eeae:	4619      	mov	r1, r3
 800eeb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eeb4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800eeb8:	4622      	mov	r2, r4
 800eeba:	701a      	strb	r2, [r3, #0]
 800eebc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eec0:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800eec4:	4602      	mov	r2, r0
 800eec6:	701a      	strb	r2, [r3, #0]
 800eec8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eecc:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800eed0:	460a      	mov	r2, r1
 800eed2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800eed4:	f107 030c 	add.w	r3, r7, #12
 800eed8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800eedc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eee0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d00a      	beq.n	800ef00 <aci_gatt_add_service+0x66>
 800eeea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eeee:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	2b02      	cmp	r3, #2
 800eef6:	d101      	bne.n	800eefc <aci_gatt_add_service+0x62>
 800eef8:	2311      	movs	r3, #17
 800eefa:	e002      	b.n	800ef02 <aci_gatt_add_service+0x68>
 800eefc:	2301      	movs	r3, #1
 800eefe:	e000      	b.n	800ef02 <aci_gatt_add_service+0x68>
 800ef00:	2303      	movs	r3, #3
 800ef02:	f107 020c 	add.w	r2, r7, #12
 800ef06:	4413      	add	r3, r2
 800ef08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ef0c:	f107 0308 	add.w	r3, r7, #8
 800ef10:	2203      	movs	r2, #3
 800ef12:	2100      	movs	r1, #0
 800ef14:	4618      	mov	r0, r3
 800ef16:	f007 f8e8 	bl	80160ea <memset>
  uint8_t index_input = 0;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800ef20:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ef24:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ef28:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ef2c:	7812      	ldrb	r2, [r2, #0]
 800ef2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ef30:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ef34:	3301      	adds	r3, #1
 800ef36:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800ef3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ef3e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d002      	beq.n	800ef4e <aci_gatt_add_service+0xb4>
 800ef48:	2b02      	cmp	r3, #2
 800ef4a:	d004      	beq.n	800ef56 <aci_gatt_add_service+0xbc>
 800ef4c:	e007      	b.n	800ef5e <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 800ef4e:	2302      	movs	r3, #2
 800ef50:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800ef54:	e005      	b.n	800ef62 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800ef56:	2310      	movs	r3, #16
 800ef58:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800ef5c:	e001      	b.n	800ef62 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800ef5e:	2347      	movs	r3, #71	@ 0x47
 800ef60:	e06c      	b.n	800f03c <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800ef62:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ef66:	1c58      	adds	r0, r3, #1
 800ef68:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800ef6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ef70:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ef74:	6819      	ldr	r1, [r3, #0]
 800ef76:	f007 f972 	bl	801625e <memcpy>
    index_input += size;
 800ef7a:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800ef7e:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800ef82:	4413      	add	r3, r2
 800ef84:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800ef88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef8c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ef90:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800ef94:	7812      	ldrb	r2, [r2, #0]
 800ef96:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ef98:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800efa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800efa6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800efaa:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800efae:	7812      	ldrb	r2, [r2, #0]
 800efb0:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800efb2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800efb6:	3301      	adds	r3, #1
 800efb8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800efbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800efc0:	2218      	movs	r2, #24
 800efc2:	2100      	movs	r1, #0
 800efc4:	4618      	mov	r0, r3
 800efc6:	f007 f890 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800efca:	233f      	movs	r3, #63	@ 0x3f
 800efcc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800efd0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800efd4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800efd8:	f107 030c 	add.w	r3, r7, #12
 800efdc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800efe0:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800efe4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800efe8:	f107 0308 	add.w	r3, r7, #8
 800efec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800eff0:	2303      	movs	r3, #3
 800eff2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800eff6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800effa:	2100      	movs	r1, #0
 800effc:	4618      	mov	r0, r3
 800effe:	f000 fcb9 	bl	800f974 <hci_send_req>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	da01      	bge.n	800f00c <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800f008:	23ff      	movs	r3, #255	@ 0xff
 800f00a:	e017      	b.n	800f03c <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 800f00c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f010:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d005      	beq.n	800f026 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800f01a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f01e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	e00a      	b.n	800f03c <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800f026:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f02a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f02e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f032:	b29a      	uxth	r2, r3
 800f034:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f038:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800f042:	46bd      	mov	sp, r7
 800f044:	bd90      	pop	{r4, r7, pc}

0800f046 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800f046:	b590      	push	{r4, r7, lr}
 800f048:	b0d1      	sub	sp, #324	@ 0x144
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	4604      	mov	r4, r0
 800f04e:	4608      	mov	r0, r1
 800f050:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800f054:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800f058:	600a      	str	r2, [r1, #0]
 800f05a:	4619      	mov	r1, r3
 800f05c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f060:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f064:	4622      	mov	r2, r4
 800f066:	801a      	strh	r2, [r3, #0]
 800f068:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f06c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f070:	4602      	mov	r2, r0
 800f072:	701a      	strb	r2, [r3, #0]
 800f074:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f078:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800f07c:	460a      	mov	r2, r1
 800f07e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800f080:	f107 0314 	add.w	r3, r7, #20
 800f084:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f088:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f08c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	2b01      	cmp	r3, #1
 800f094:	d00a      	beq.n	800f0ac <aci_gatt_add_char+0x66>
 800f096:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f09a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d101      	bne.n	800f0a8 <aci_gatt_add_char+0x62>
 800f0a4:	2313      	movs	r3, #19
 800f0a6:	e002      	b.n	800f0ae <aci_gatt_add_char+0x68>
 800f0a8:	2303      	movs	r3, #3
 800f0aa:	e000      	b.n	800f0ae <aci_gatt_add_char+0x68>
 800f0ac:	2305      	movs	r3, #5
 800f0ae:	f107 0214 	add.w	r2, r7, #20
 800f0b2:	4413      	add	r3, r2
 800f0b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f0b8:	f107 0310 	add.w	r3, r7, #16
 800f0bc:	2203      	movs	r2, #3
 800f0be:	2100      	movs	r1, #0
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f007 f812 	bl	80160ea <memset>
  uint8_t index_input = 0;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 800f0cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f0d0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f0d4:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f0d8:	8812      	ldrh	r2, [r2, #0]
 800f0da:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f0dc:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800f0e0:	3302      	adds	r3, #2
 800f0e2:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800f0e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f0ea:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f0ee:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800f0f2:	7812      	ldrb	r2, [r2, #0]
 800f0f4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f0f6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800f100:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f104:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d002      	beq.n	800f114 <aci_gatt_add_char+0xce>
 800f10e:	2b02      	cmp	r3, #2
 800f110:	d004      	beq.n	800f11c <aci_gatt_add_char+0xd6>
 800f112:	e007      	b.n	800f124 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 800f114:	2302      	movs	r3, #2
 800f116:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800f11a:	e005      	b.n	800f128 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800f11c:	2310      	movs	r3, #16
 800f11e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800f122:	e001      	b.n	800f128 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800f124:	2347      	movs	r3, #71	@ 0x47
 800f126:	e091      	b.n	800f24c <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800f128:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f12c:	1cd8      	adds	r0, r3, #3
 800f12e:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800f132:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f136:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f13a:	6819      	ldr	r1, [r3, #0]
 800f13c:	f007 f88f 	bl	801625e <memcpy>
    index_input += size;
 800f140:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800f144:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800f148:	4413      	add	r3, r2
 800f14a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800f14e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f152:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f156:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800f15a:	8812      	ldrh	r2, [r2, #0]
 800f15c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f15e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800f162:	3302      	adds	r3, #2
 800f164:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800f168:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f16c:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800f170:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800f172:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800f176:	3301      	adds	r3, #1
 800f178:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800f17c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f180:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800f184:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800f186:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800f18a:	3301      	adds	r3, #1
 800f18c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800f190:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f194:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800f198:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800f19a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800f19e:	3301      	adds	r3, #1
 800f1a0:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800f1a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f1a8:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800f1ac:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800f1ae:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800f1b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f1bc:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800f1c0:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800f1c2:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f1cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f1d0:	2218      	movs	r2, #24
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f006 ff88 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800f1da:	233f      	movs	r3, #63	@ 0x3f
 800f1dc:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800f1e0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800f1e4:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800f1e8:	f107 0314 	add.w	r3, r7, #20
 800f1ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800f1f0:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800f1f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800f1f8:	f107 0310 	add.w	r3, r7, #16
 800f1fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800f200:	2303      	movs	r3, #3
 800f202:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800f206:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f20a:	2100      	movs	r1, #0
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 fbb1 	bl	800f974 <hci_send_req>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	da01      	bge.n	800f21c <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800f218:	23ff      	movs	r3, #255	@ 0xff
 800f21a:	e017      	b.n	800f24c <aci_gatt_add_char+0x206>
  if (resp.Status) {
 800f21c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f220:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d005      	beq.n	800f236 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800f22a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f22e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	e00a      	b.n	800f24c <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800f236:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f23a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f23e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f242:	b29a      	uxth	r2, r3
 800f244:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f248:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f24a:	2300      	movs	r3, #0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800f252:	46bd      	mov	sp, r7
 800f254:	bd90      	pop	{r4, r7, pc}

0800f256 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800f256:	b5b0      	push	{r4, r5, r7, lr}
 800f258:	b0cc      	sub	sp, #304	@ 0x130
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	4605      	mov	r5, r0
 800f25e:	460c      	mov	r4, r1
 800f260:	4610      	mov	r0, r2
 800f262:	4619      	mov	r1, r3
 800f264:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f268:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f26c:	462a      	mov	r2, r5
 800f26e:	801a      	strh	r2, [r3, #0]
 800f270:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f274:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f278:	4622      	mov	r2, r4
 800f27a:	801a      	strh	r2, [r3, #0]
 800f27c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f280:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800f284:	4602      	mov	r2, r0
 800f286:	701a      	strb	r2, [r3, #0]
 800f288:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f28c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f290:	460a      	mov	r2, r1
 800f292:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800f294:	f107 030c 	add.w	r3, r7, #12
 800f298:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f29c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f2a0:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 800f2ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f2b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f2b6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f2ba:	8812      	ldrh	r2, [r2, #0]
 800f2bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f2be:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f2c2:	3302      	adds	r3, #2
 800f2c4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 800f2c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f2cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f2d0:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800f2d4:	8812      	ldrh	r2, [r2, #0]
 800f2d6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800f2d8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f2dc:	3302      	adds	r3, #2
 800f2de:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800f2e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f2e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f2ea:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800f2ee:	7812      	ldrb	r2, [r2, #0]
 800f2f0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f2f2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800f2fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f300:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f304:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800f308:	7812      	ldrb	r2, [r2, #0]
 800f30a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f30c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f310:	3301      	adds	r3, #1
 800f312:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800f316:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f31a:	1d98      	adds	r0, r3, #6
 800f31c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f320:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	461a      	mov	r2, r3
 800f328:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800f32c:	f006 ff97 	bl	801625e <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 800f330:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f334:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f338:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	4413      	add	r3, r2
 800f340:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f344:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f348:	2218      	movs	r2, #24
 800f34a:	2100      	movs	r1, #0
 800f34c:	4618      	mov	r0, r3
 800f34e:	f006 fecc 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800f352:	233f      	movs	r3, #63	@ 0x3f
 800f354:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800f358:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800f35c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f360:	f107 030c 	add.w	r3, r7, #12
 800f364:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f368:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f36c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f370:	f107 030b 	add.w	r3, r7, #11
 800f374:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f378:	2301      	movs	r3, #1
 800f37a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800f37e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f382:	2100      	movs	r1, #0
 800f384:	4618      	mov	r0, r3
 800f386:	f000 faf5 	bl	800f974 <hci_send_req>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	da01      	bge.n	800f394 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800f390:	23ff      	movs	r3, #255	@ 0xff
 800f392:	e00d      	b.n	800f3b0 <aci_gatt_update_char_value+0x15a>
  if (status) {
 800f394:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f398:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d005      	beq.n	800f3ae <aci_gatt_update_char_value+0x158>
    return status;
 800f3a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f3a6:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	e000      	b.n	800f3b0 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 800f3ae:	2300      	movs	r3, #0
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bdb0      	pop	{r4, r5, r7, pc}

0800f3ba <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b0cc      	sub	sp, #304	@ 0x130
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f3c6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f3ca:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800f3cc:	f107 030c 	add.w	r3, r7, #12
 800f3d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f3d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f3d8:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f3dc:	2200      	movs	r2, #0
 800f3de:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f3e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f3ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f3ee:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f3f2:	8812      	ldrh	r2, [r2, #0]
 800f3f4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f3f6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f3fa:	3302      	adds	r3, #2
 800f3fc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f404:	2218      	movs	r2, #24
 800f406:	2100      	movs	r1, #0
 800f408:	4618      	mov	r0, r3
 800f40a:	f006 fe6e 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800f40e:	233f      	movs	r3, #63	@ 0x3f
 800f410:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 800f414:	f240 1327 	movw	r3, #295	@ 0x127
 800f418:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f41c:	f107 030c 	add.w	r3, r7, #12
 800f420:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f424:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f428:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f42c:	f107 030b 	add.w	r3, r7, #11
 800f430:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f434:	2301      	movs	r3, #1
 800f436:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800f43a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f43e:	2100      	movs	r1, #0
 800f440:	4618      	mov	r0, r3
 800f442:	f000 fa97 	bl	800f974 <hci_send_req>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	da01      	bge.n	800f450 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800f44c:	23ff      	movs	r3, #255	@ 0xff
 800f44e:	e00d      	b.n	800f46c <aci_gatt_allow_read+0xb2>
  if (status) {
 800f450:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f454:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d005      	beq.n	800f46a <aci_gatt_allow_read+0xb0>
    return status;
 800f45e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f462:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	e000      	b.n	800f46c <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800f46a:	2300      	movs	r3, #0
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b0cc      	sub	sp, #304	@ 0x130
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f480:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f484:	601a      	str	r2, [r3, #0]
 800f486:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f48a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f48e:	4602      	mov	r2, r0
 800f490:	701a      	strb	r2, [r3, #0]
 800f492:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f496:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f49a:	460a      	mov	r2, r1
 800f49c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800f49e:	f107 030c 	add.w	r3, r7, #12
 800f4a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f4a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f4aa:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Offset = htob(Offset, 1);
 800f4b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f4bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f4c0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f4c4:	7812      	ldrb	r2, [r2, #0]
 800f4c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f4c8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Length = htob(Length, 1);
 800f4d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f4d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f4da:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f4de:	7812      	ldrb	r2, [r2, #0]
 800f4e0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f4e2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800f4ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f4f0:	1c98      	adds	r0, r3, #2
 800f4f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f4f6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f4fa:	781a      	ldrb	r2, [r3, #0]
 800f4fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f500:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f504:	6819      	ldr	r1, [r3, #0]
 800f506:	f006 feaa 	bl	801625e <memcpy>
    index_input += Length*sizeof(uint8_t);
 800f50a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f50e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f512:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	4413      	add	r3, r2
 800f51a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f51e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f522:	2218      	movs	r2, #24
 800f524:	2100      	movs	r1, #0
 800f526:	4618      	mov	r0, r3
 800f528:	f006 fddf 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800f52c:	233f      	movs	r3, #63	@ 0x3f
 800f52e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800f532:	230c      	movs	r3, #12
 800f534:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f538:	f107 030c 	add.w	r3, r7, #12
 800f53c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f540:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f544:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f548:	f107 030b 	add.w	r3, r7, #11
 800f54c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f550:	2301      	movs	r3, #1
 800f552:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800f556:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f55a:	2100      	movs	r1, #0
 800f55c:	4618      	mov	r0, r3
 800f55e:	f000 fa09 	bl	800f974 <hci_send_req>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	da01      	bge.n	800f56c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f568:	23ff      	movs	r3, #255	@ 0xff
 800f56a:	e00d      	b.n	800f588 <aci_hal_write_config_data+0x112>
  if (status) {
 800f56c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f570:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d005      	beq.n	800f586 <aci_hal_write_config_data+0x110>
    return status;
 800f57a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f57e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	e000      	b.n	800f588 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800f586:	2300      	movs	r3, #0
}
 800f588:	4618      	mov	r0, r3
 800f58a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <aci_hal_read_config_data>:
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b0ee      	sub	sp, #440	@ 0x1b8
 800f596:	af00      	add	r7, sp, #0
 800f598:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800f59c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800f5a0:	6019      	str	r1, [r3, #0]
 800f5a2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800f5a6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800f5aa:	601a      	str	r2, [r3, #0]
 800f5ac:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800f5b0:	f2a3 13a9 	subw	r3, r3, #425	@ 0x1a9
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 800f5b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f5bc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f5c0:	f107 0314 	add.w	r3, r7, #20
 800f5c4:	2280      	movs	r2, #128	@ 0x80
 800f5c6:	2100      	movs	r1, #0
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f006 fd8e 	bl	80160ea <memset>
  uint8_t index_input = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
  cp0->Offset = htob(Offset, 1);
 800f5d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800f5d8:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 800f5dc:	f2a2 12a9 	subw	r2, r2, #425	@ 0x1a9
 800f5e0:	7812      	ldrb	r2, [r2, #0]
 800f5e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f5e4:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f5ee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800f5f2:	2218      	movs	r2, #24
 800f5f4:	2100      	movs	r1, #0
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f006 fd77 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800f5fc:	233f      	movs	r3, #63	@ 0x3f
 800f5fe:	f8a7 3198 	strh.w	r3, [r7, #408]	@ 0x198
  rq.ocf = 0x00d;
 800f602:	230d      	movs	r3, #13
 800f604:	f8a7 319a 	strh.w	r3, [r7, #410]	@ 0x19a
  rq.cparam = cmd_buffer;
 800f608:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f60c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  rq.clen = index_input;
 800f610:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 800f614:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  rq.rparam = &resp;
 800f618:	f107 0314 	add.w	r3, r7, #20
 800f61c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  rq.rlen = sizeof(resp);
 800f620:	2380      	movs	r3, #128	@ 0x80
 800f622:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 800f626:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800f62a:	2100      	movs	r1, #0
 800f62c:	4618      	mov	r0, r3
 800f62e:	f000 f9a1 	bl	800f974 <hci_send_req>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	da01      	bge.n	800f63c <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 800f638:	23ff      	movs	r3, #255	@ 0xff
 800f63a:	e029      	b.n	800f690 <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 800f63c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800f640:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d005      	beq.n	800f656 <aci_hal_read_config_data+0xc4>
    return resp.Status;
 800f64a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800f64e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	e01c      	b.n	800f690 <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 800f656:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800f65a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800f65e:	785a      	ldrb	r2, [r3, #1]
 800f660:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800f664:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 800f66c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800f670:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	461a      	mov	r2, r3
 800f67a:	f107 0314 	add.w	r3, r7, #20
 800f67e:	1c99      	adds	r1, r3, #2
 800f680:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800f684:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800f688:	6818      	ldr	r0, [r3, #0]
 800f68a:	f006 fde8 	bl	801625e <memcpy>
  return BLE_STATUS_SUCCESS;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	4618      	mov	r0, r3
 800f692:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b0cc      	sub	sp, #304	@ 0x130
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6a6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f6aa:	701a      	strb	r2, [r3, #0]
 800f6ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6b0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f6b4:	460a      	mov	r2, r1
 800f6b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800f6b8:	f107 030c 	add.w	r3, r7, #12
 800f6bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f6c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6c4:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 800f6d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f6d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f6da:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f6de:	7812      	ldrb	r2, [r2, #0]
 800f6e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f6e2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 800f6ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f6f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f6f4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f6f8:	7812      	ldrb	r2, [r2, #0]
 800f6fa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f6fc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f700:	3301      	adds	r3, #1
 800f702:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f706:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f70a:	2218      	movs	r2, #24
 800f70c:	2100      	movs	r1, #0
 800f70e:	4618      	mov	r0, r3
 800f710:	f006 fceb 	bl	80160ea <memset>
  rq.ogf = 0x3f;
 800f714:	233f      	movs	r3, #63	@ 0x3f
 800f716:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800f71a:	230f      	movs	r3, #15
 800f71c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f720:	f107 030c 	add.w	r3, r7, #12
 800f724:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f728:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800f72c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f730:	f107 030b 	add.w	r3, r7, #11
 800f734:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f738:	2301      	movs	r3, #1
 800f73a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800f73e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f742:	2100      	movs	r1, #0
 800f744:	4618      	mov	r0, r3
 800f746:	f000 f915 	bl	800f974 <hci_send_req>
 800f74a:	4603      	mov	r3, r0
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	da01      	bge.n	800f754 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800f750:	23ff      	movs	r3, #255	@ 0xff
 800f752:	e00d      	b.n	800f770 <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 800f754:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f758:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d005      	beq.n	800f76e <aci_hal_set_tx_power_level+0xd4>
    return status;
 800f762:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f766:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	e000      	b.n	800f770 <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800f77a:	b480      	push	{r7}
 800f77c:	b085      	sub	sp, #20
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	3308      	adds	r3, #8
 800f786:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	2b04      	cmp	r3, #4
 800f78e:	d001      	beq.n	800f794 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800f790:	2301      	movs	r3, #1
 800f792:	e00c      	b.n	800f7ae <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	3302      	adds	r3, #2
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	461a      	mov	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800f7a2:	3b03      	subs	r3, #3
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d001      	beq.n	800f7ac <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	e000      	b.n	800f7ae <verify_packet+0x34>
  
  return 0;      
 800f7ac:	2300      	movs	r3, #0
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3714      	adds	r7, #20
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr
	...

0800f7bc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b0a6      	sub	sp, #152	@ 0x98
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	607b      	str	r3, [r7, #4]
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	81fb      	strh	r3, [r7, #14]
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	81bb      	strh	r3, [r7, #12]
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800f7d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7d8:	b21a      	sxth	r2, r3
 800f7da:	89fb      	ldrh	r3, [r7, #14]
 800f7dc:	029b      	lsls	r3, r3, #10
 800f7de:	b21b      	sxth	r3, r3
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	b21b      	sxth	r3, r3
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800f7e8:	7afb      	ldrb	r3, [r7, #11]
 800f7ea:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800f7f0:	f107 0318 	add.w	r3, r7, #24
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	f107 0314 	add.w	r3, r7, #20
 800f7fc:	8819      	ldrh	r1, [r3, #0]
 800f7fe:	789b      	ldrb	r3, [r3, #2]
 800f800:	8011      	strh	r1, [r2, #0]
 800f802:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800f804:	f107 0318 	add.w	r3, r7, #24
 800f808:	3304      	adds	r3, #4
 800f80a:	7afa      	ldrb	r2, [r7, #11]
 800f80c:	6879      	ldr	r1, [r7, #4]
 800f80e:	4618      	mov	r0, r3
 800f810:	f006 fd25 	bl	801625e <memcpy>
  
  if (hciContext.io.Send)
 800f814:	4b08      	ldr	r3, [pc, #32]	@ (800f838 <send_cmd+0x7c>)
 800f816:	691b      	ldr	r3, [r3, #16]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d009      	beq.n	800f830 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800f81c:	4b06      	ldr	r3, [pc, #24]	@ (800f838 <send_cmd+0x7c>)
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	7afa      	ldrb	r2, [r7, #11]
 800f822:	b292      	uxth	r2, r2
 800f824:	3204      	adds	r2, #4
 800f826:	b291      	uxth	r1, r2
 800f828:	f107 0218 	add.w	r2, r7, #24
 800f82c:	4610      	mov	r0, r2
 800f82e:	4798      	blx	r3
  }
}
 800f830:	bf00      	nop
 800f832:	3798      	adds	r7, #152	@ 0x98
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	200012b4 	.word	0x200012b4

0800f83c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800f846:	e00a      	b.n	800f85e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800f848:	f107 030c 	add.w	r3, r7, #12
 800f84c:	4619      	mov	r1, r3
 800f84e:	6838      	ldr	r0, [r7, #0]
 800f850:	f000 fabc 	bl	800fdcc <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	4619      	mov	r1, r3
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 fa23 	bl	800fca4 <list_insert_head>
  while (!list_is_empty(src_list))
 800f85e:	6838      	ldr	r0, [r7, #0]
 800f860:	f000 f9fe 	bl	800fc60 <list_is_empty>
 800f864:	4603      	mov	r3, r0
 800f866:	2b00      	cmp	r3, #0
 800f868:	d0ee      	beq.n	800f848 <move_list+0xc>
  }
}
 800f86a:	bf00      	nop
 800f86c:	bf00      	nop
 800f86e:	3710      	adds	r7, #16
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f87a:	e009      	b.n	800f890 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800f87c:	1d3b      	adds	r3, r7, #4
 800f87e:	4619      	mov	r1, r3
 800f880:	4809      	ldr	r0, [pc, #36]	@ (800f8a8 <free_event_list+0x34>)
 800f882:	f000 fa7c 	bl	800fd7e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4619      	mov	r1, r3
 800f88a:	4808      	ldr	r0, [pc, #32]	@ (800f8ac <free_event_list+0x38>)
 800f88c:	f000 fa30 	bl	800fcf0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f890:	4806      	ldr	r0, [pc, #24]	@ (800f8ac <free_event_list+0x38>)
 800f892:	f000 fac2 	bl	800fe1a <list_get_size>
 800f896:	4603      	mov	r3, r0
 800f898:	2b04      	cmp	r3, #4
 800f89a:	ddef      	ble.n	800f87c <free_event_list+0x8>
  }
}
 800f89c:	bf00      	nop
 800f89e:	bf00      	nop
 800f8a0:	3708      	adds	r7, #8
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	20000d34 	.word	0x20000d34
 800f8ac:	20000d2c 	.word	0x20000d2c

0800f8b0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d002      	beq.n	800f8c6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800f8c0:	4a18      	ldr	r2, [pc, #96]	@ (800f924 <hci_init+0x74>)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800f8c6:	4818      	ldr	r0, [pc, #96]	@ (800f928 <hci_init+0x78>)
 800f8c8:	f000 f9ba 	bl	800fc40 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800f8cc:	4817      	ldr	r0, [pc, #92]	@ (800f92c <hci_init+0x7c>)
 800f8ce:	f000 f9b7 	bl	800fc40 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800f8d2:	f7f2 fb01 	bl	8001ed8 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	73fb      	strb	r3, [r7, #15]
 800f8da:	e00c      	b.n	800f8f6 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800f8dc:	7bfb      	ldrb	r3, [r7, #15]
 800f8de:	228c      	movs	r2, #140	@ 0x8c
 800f8e0:	fb02 f303 	mul.w	r3, r2, r3
 800f8e4:	4a12      	ldr	r2, [pc, #72]	@ (800f930 <hci_init+0x80>)
 800f8e6:	4413      	add	r3, r2
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	480f      	ldr	r0, [pc, #60]	@ (800f928 <hci_init+0x78>)
 800f8ec:	f000 fa00 	bl	800fcf0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f8f0:	7bfb      	ldrb	r3, [r7, #15]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	73fb      	strb	r3, [r7, #15]
 800f8f6:	7bfb      	ldrb	r3, [r7, #15]
 800f8f8:	2b09      	cmp	r3, #9
 800f8fa:	d9ef      	bls.n	800f8dc <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800f8fc:	4b09      	ldr	r3, [pc, #36]	@ (800f924 <hci_init+0x74>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d003      	beq.n	800f90c <hci_init+0x5c>
 800f904:	4b07      	ldr	r3, [pc, #28]	@ (800f924 <hci_init+0x74>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	2000      	movs	r0, #0
 800f90a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800f90c:	4b05      	ldr	r3, [pc, #20]	@ (800f924 <hci_init+0x74>)
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d002      	beq.n	800f91a <hci_init+0x6a>
 800f914:	4b03      	ldr	r3, [pc, #12]	@ (800f924 <hci_init+0x74>)
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	4798      	blx	r3
}
 800f91a:	bf00      	nop
 800f91c:	3710      	adds	r7, #16
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	200012b4 	.word	0x200012b4
 800f928:	20000d2c 	.word	0x20000d2c
 800f92c:	20000d34 	.word	0x20000d34
 800f930:	20000d3c 	.word	0x20000d3c

0800f934 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a0b      	ldr	r2, [pc, #44]	@ (800f970 <hci_register_io_bus+0x3c>)
 800f942:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	4a09      	ldr	r2, [pc, #36]	@ (800f970 <hci_register_io_bus+0x3c>)
 800f94a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	691b      	ldr	r3, [r3, #16]
 800f950:	4a07      	ldr	r2, [pc, #28]	@ (800f970 <hci_register_io_bus+0x3c>)
 800f952:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	699b      	ldr	r3, [r3, #24]
 800f958:	4a05      	ldr	r2, [pc, #20]	@ (800f970 <hci_register_io_bus+0x3c>)
 800f95a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	4a03      	ldr	r2, [pc, #12]	@ (800f970 <hci_register_io_bus+0x3c>)
 800f962:	6093      	str	r3, [r2, #8]
}
 800f964:	bf00      	nop
 800f966:	370c      	adds	r7, #12
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr
 800f970:	200012b4 	.word	0x200012b4

0800f974 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b08e      	sub	sp, #56	@ 0x38
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	460b      	mov	r3, r1
 800f97e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	885b      	ldrh	r3, [r3, #2]
 800f984:	b21b      	sxth	r3, r3
 800f986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f98a:	b21a      	sxth	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	029b      	lsls	r3, r3, #10
 800f992:	b21b      	sxth	r3, r3
 800f994:	4313      	orrs	r3, r2
 800f996:	b21b      	sxth	r3, r3
 800f998:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800f99a:	2300      	movs	r3, #0
 800f99c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800f99e:	f107 0308 	add.w	r3, r7, #8
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f000 f94c 	bl	800fc40 <list_init_head>

  free_event_list();
 800f9a8:	f7ff ff64 	bl	800f874 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	8818      	ldrh	r0, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	8859      	ldrh	r1, [r3, #2]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	b2da      	uxtb	r2, r3
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	689b      	ldr	r3, [r3, #8]
 800f9be:	f7ff fefd 	bl	800f7bc <send_cmd>
  
  if (async)
 800f9c2:	78fb      	ldrb	r3, [r7, #3]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d001      	beq.n	800f9cc <hci_send_req+0x58>
  {
    return 0;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	e0e2      	b.n	800fb92 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800f9cc:	f7f4 faea 	bl	8003fa4 <HAL_GetTick>
 800f9d0:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f9d2:	f7f4 fae7 	bl	8003fa4 <HAL_GetTick>
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9da:	1ad3      	subs	r3, r2, r3
 800f9dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f9e0:	f200 80b3 	bhi.w	800fb4a <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800f9e4:	486d      	ldr	r0, [pc, #436]	@ (800fb9c <hci_send_req+0x228>)
 800f9e6:	f000 f93b 	bl	800fc60 <list_is_empty>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d000      	beq.n	800f9f2 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f9f0:	e7ef      	b.n	800f9d2 <hci_send_req+0x5e>
      {
        break;
 800f9f2:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800f9f4:	f107 0310 	add.w	r3, r7, #16
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	4868      	ldr	r0, [pc, #416]	@ (800fb9c <hci_send_req+0x228>)
 800f9fc:	f000 f9bf 	bl	800fd7e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	3308      	adds	r3, #8
 800fa04:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800fa06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	2b04      	cmp	r3, #4
 800fa0c:	d17f      	bne.n	800fb0e <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800fa0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa10:	3301      	adds	r3, #1
 800fa12:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	3308      	adds	r3, #8
 800fa18:	3303      	adds	r3, #3
 800fa1a:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800fa22:	3b03      	subs	r3, #3
 800fa24:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800fa26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	2b3e      	cmp	r3, #62	@ 0x3e
 800fa2c:	d04c      	beq.n	800fac8 <hci_send_req+0x154>
 800fa2e:	2b3e      	cmp	r3, #62	@ 0x3e
 800fa30:	dc68      	bgt.n	800fb04 <hci_send_req+0x190>
 800fa32:	2b10      	cmp	r3, #16
 800fa34:	f000 808b 	beq.w	800fb4e <hci_send_req+0x1da>
 800fa38:	2b10      	cmp	r3, #16
 800fa3a:	dc63      	bgt.n	800fb04 <hci_send_req+0x190>
 800fa3c:	2b0e      	cmp	r3, #14
 800fa3e:	d023      	beq.n	800fa88 <hci_send_req+0x114>
 800fa40:	2b0f      	cmp	r3, #15
 800fa42:	d15f      	bne.n	800fb04 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800fa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa46:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	885b      	ldrh	r3, [r3, #2]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d17e      	bne.n	800fb52 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	2b0f      	cmp	r3, #15
 800fa5a:	d004      	beq.n	800fa66 <hci_send_req+0xf2>
          if (cs->status) {
 800fa5c:	69bb      	ldr	r3, [r7, #24]
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d051      	beq.n	800fb08 <hci_send_req+0x194>
            goto failed;
 800fa64:	e078      	b.n	800fb58 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	695a      	ldr	r2, [r3, #20]
 800fa6a:	6a3b      	ldr	r3, [r7, #32]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	bf28      	it	cs
 800fa70:	461a      	movcs	r2, r3
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6918      	ldr	r0, [r3, #16]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	695b      	ldr	r3, [r3, #20]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fa82:	f006 fbec 	bl	801625e <memcpy>
        goto done;
 800fa86:	e078      	b.n	800fb7a <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800fa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa8a:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d15d      	bne.n	800fb56 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800fa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa9c:	3303      	adds	r3, #3
 800fa9e:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800faa0:	6a3b      	ldr	r3, [r7, #32]
 800faa2:	3b03      	subs	r3, #3
 800faa4:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	695a      	ldr	r2, [r3, #20]
 800faaa:	6a3b      	ldr	r3, [r7, #32]
 800faac:	429a      	cmp	r2, r3
 800faae:	bf28      	it	cs
 800fab0:	461a      	movcs	r2, r3
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6918      	ldr	r0, [r3, #16]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	695b      	ldr	r3, [r3, #20]
 800fabe:	461a      	mov	r2, r3
 800fac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fac2:	f006 fbcc 	bl	801625e <memcpy>
        goto done;
 800fac6:	e058      	b.n	800fb7a <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800fac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faca:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	461a      	mov	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d118      	bne.n	800fb0c <hci_send_req+0x198>
          break;
      
        len -= 1;
 800fada:	6a3b      	ldr	r3, [r7, #32]
 800fadc:	3b01      	subs	r3, #1
 800fade:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	695a      	ldr	r2, [r3, #20]
 800fae4:	6a3b      	ldr	r3, [r7, #32]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	bf28      	it	cs
 800faea:	461a      	movcs	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6918      	ldr	r0, [r3, #16]
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	1c59      	adds	r1, r3, #1
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	695b      	ldr	r3, [r3, #20]
 800fafc:	461a      	mov	r2, r3
 800fafe:	f006 fbae 	bl	801625e <memcpy>
        goto done;
 800fb02:	e03a      	b.n	800fb7a <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800fb04:	bf00      	nop
 800fb06:	e002      	b.n	800fb0e <hci_send_req+0x19a>
          break;
 800fb08:	bf00      	nop
 800fb0a:	e000      	b.n	800fb0e <hci_send_req+0x19a>
          break;
 800fb0c:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800fb0e:	4824      	ldr	r0, [pc, #144]	@ (800fba0 <hci_send_req+0x22c>)
 800fb10:	f000 f8a6 	bl	800fc60 <list_is_empty>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00d      	beq.n	800fb36 <hci_send_req+0x1c2>
 800fb1a:	4820      	ldr	r0, [pc, #128]	@ (800fb9c <hci_send_req+0x228>)
 800fb1c:	f000 f8a0 	bl	800fc60 <list_is_empty>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d007      	beq.n	800fb36 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	4619      	mov	r1, r3
 800fb2a:	481d      	ldr	r0, [pc, #116]	@ (800fba0 <hci_send_req+0x22c>)
 800fb2c:	f000 f8e0 	bl	800fcf0 <list_insert_tail>
      hciReadPacket=NULL;
 800fb30:	2300      	movs	r3, #0
 800fb32:	613b      	str	r3, [r7, #16]
 800fb34:	e008      	b.n	800fb48 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800fb36:	693a      	ldr	r2, [r7, #16]
 800fb38:	f107 0308 	add.w	r3, r7, #8
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f000 f8d6 	bl	800fcf0 <list_insert_tail>
      hciReadPacket=NULL;
 800fb44:	2300      	movs	r3, #0
 800fb46:	613b      	str	r3, [r7, #16]
  {
 800fb48:	e740      	b.n	800f9cc <hci_send_req+0x58>
        goto failed;
 800fb4a:	bf00      	nop
 800fb4c:	e004      	b.n	800fb58 <hci_send_req+0x1e4>
        goto failed;
 800fb4e:	bf00      	nop
 800fb50:	e002      	b.n	800fb58 <hci_send_req+0x1e4>
          goto failed;
 800fb52:	bf00      	nop
 800fb54:	e000      	b.n	800fb58 <hci_send_req+0x1e4>
          goto failed;
 800fb56:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d004      	beq.n	800fb68 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	4619      	mov	r1, r3
 800fb62:	480f      	ldr	r0, [pc, #60]	@ (800fba0 <hci_send_req+0x22c>)
 800fb64:	f000 f89e 	bl	800fca4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800fb68:	f107 0308 	add.w	r3, r7, #8
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	480b      	ldr	r0, [pc, #44]	@ (800fb9c <hci_send_req+0x228>)
 800fb70:	f7ff fe64 	bl	800f83c <move_list>

  return -1;
 800fb74:	f04f 33ff 	mov.w	r3, #4294967295
 800fb78:	e00b      	b.n	800fb92 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	4808      	ldr	r0, [pc, #32]	@ (800fba0 <hci_send_req+0x22c>)
 800fb80:	f000 f890 	bl	800fca4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800fb84:	f107 0308 	add.w	r3, r7, #8
 800fb88:	4619      	mov	r1, r3
 800fb8a:	4804      	ldr	r0, [pc, #16]	@ (800fb9c <hci_send_req+0x228>)
 800fb8c:	f7ff fe56 	bl	800f83c <move_list>

  return 0;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3738      	adds	r7, #56	@ 0x38
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	20000d34 	.word	0x20000d34
 800fba0:	20000d2c 	.word	0x20000d2c

0800fba4 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b086      	sub	sp, #24
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800fbac:	2300      	movs	r3, #0
 800fbae:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800fbb4:	481f      	ldr	r0, [pc, #124]	@ (800fc34 <hci_notify_asynch_evt+0x90>)
 800fbb6:	f000 f853 	bl	800fc60 <list_is_empty>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d132      	bne.n	800fc26 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800fbc0:	f107 030c 	add.w	r3, r7, #12
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	481b      	ldr	r0, [pc, #108]	@ (800fc34 <hci_notify_asynch_evt+0x90>)
 800fbc8:	f000 f8d9 	bl	800fd7e <list_remove_head>
    
    if (hciContext.io.Receive)
 800fbcc:	4b1a      	ldr	r3, [pc, #104]	@ (800fc38 <hci_notify_asynch_evt+0x94>)
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d02a      	beq.n	800fc2a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800fbd4:	4b18      	ldr	r3, [pc, #96]	@ (800fc38 <hci_notify_asynch_evt+0x94>)
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	3208      	adds	r2, #8
 800fbdc:	2180      	movs	r1, #128	@ 0x80
 800fbde:	4610      	mov	r0, r2
 800fbe0:	4798      	blx	r3
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800fbe6:	7cfb      	ldrb	r3, [r7, #19]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d016      	beq.n	800fc1a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	7cfa      	ldrb	r2, [r7, #19]
 800fbf0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7ff fdbf 	bl	800f77a <verify_packet>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d105      	bne.n	800fc0e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	4619      	mov	r1, r3
 800fc06:	480d      	ldr	r0, [pc, #52]	@ (800fc3c <hci_notify_asynch_evt+0x98>)
 800fc08:	f000 f872 	bl	800fcf0 <list_insert_tail>
 800fc0c:	e00d      	b.n	800fc2a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	4619      	mov	r1, r3
 800fc12:	4808      	ldr	r0, [pc, #32]	@ (800fc34 <hci_notify_asynch_evt+0x90>)
 800fc14:	f000 f846 	bl	800fca4 <list_insert_head>
 800fc18:	e007      	b.n	800fc2a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	4805      	ldr	r0, [pc, #20]	@ (800fc34 <hci_notify_asynch_evt+0x90>)
 800fc20:	f000 f840 	bl	800fca4 <list_insert_head>
 800fc24:	e001      	b.n	800fc2a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800fc26:	2301      	movs	r3, #1
 800fc28:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800fc2a:	697b      	ldr	r3, [r7, #20]
  
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3718      	adds	r7, #24
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	20000d2c 	.word	0x20000d2c
 800fc38:	200012b4 	.word	0x200012b4
 800fc3c:	20000d34 	.word	0x20000d34

0800fc40 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	605a      	str	r2, [r3, #4]
}
 800fc54:	bf00      	nop
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b087      	sub	sp, #28
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800fc68:	f3ef 8310 	mrs	r3, PRIMASK
 800fc6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fc70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc72:	b672      	cpsid	i
}
 800fc74:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d102      	bne.n	800fc86 <list_is_empty+0x26>
  {
    return_value = 1;
 800fc80:	2301      	movs	r3, #1
 800fc82:	75fb      	strb	r3, [r7, #23]
 800fc84:	e001      	b.n	800fc8a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800fc86:	2300      	movs	r3, #0
 800fc88:	75fb      	strb	r3, [r7, #23]
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	f383 8810 	msr	PRIMASK, r3
}
 800fc94:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800fc96:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	371c      	adds	r7, #28
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b087      	sub	sp, #28
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800fcae:	f3ef 8310 	mrs	r3, PRIMASK
 800fcb2:	60fb      	str	r3, [r7, #12]
  return(result);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fcb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fcb8:	b672      	cpsid	i
}
 800fcba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	683a      	ldr	r2, [r7, #0]
 800fcce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	683a      	ldr	r2, [r7, #0]
 800fcd6:	605a      	str	r2, [r3, #4]
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	f383 8810 	msr	PRIMASK, r3
}
 800fce2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fce4:	bf00      	nop
 800fce6:	371c      	adds	r7, #28
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800fcfa:	f3ef 8310 	mrs	r3, PRIMASK
 800fcfe:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd00:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd04:	b672      	cpsid	i
}
 800fd06:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	685a      	ldr	r2, [r3, #4]
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	683a      	ldr	r2, [r7, #0]
 800fd1a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	683a      	ldr	r2, [r7, #0]
 800fd22:	601a      	str	r2, [r3, #0]
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	f383 8810 	msr	PRIMASK, r3
}
 800fd2e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fd30:	bf00      	nop
 800fd32:	371c      	adds	r7, #28
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b087      	sub	sp, #28
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800fd44:	f3ef 8310 	mrs	r3, PRIMASK
 800fd48:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd4e:	b672      	cpsid	i
}
 800fd50:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	6812      	ldr	r2, [r2, #0]
 800fd5a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	6852      	ldr	r2, [r2, #4]
 800fd64:	605a      	str	r2, [r3, #4]
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	f383 8810 	msr	PRIMASK, r3
}
 800fd70:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fd72:	bf00      	nop
 800fd74:	371c      	adds	r7, #28
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr

0800fd7e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b086      	sub	sp, #24
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
 800fd86:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800fd88:	f3ef 8310 	mrs	r3, PRIMASK
 800fd8c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd92:	b672      	cpsid	i
}
 800fd94:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7ff ffca 	bl	800fd3c <list_remove_node>
  (*node)->next = NULL;
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2200      	movs	r2, #0
 800fdae:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	605a      	str	r2, [r3, #4]
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	f383 8810 	msr	PRIMASK, r3
}
 800fdc2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fdc4:	bf00      	nop
 800fdc6:	3718      	adds	r7, #24
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}

0800fdcc <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b086      	sub	sp, #24
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800fdd6:	f3ef 8310 	mrs	r3, PRIMASK
 800fdda:	60fb      	str	r3, [r7, #12]
  return(result);
 800fddc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fdde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fde0:	b672      	cpsid	i
}
 800fde2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	685a      	ldr	r2, [r3, #4]
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7ff ffa3 	bl	800fd3c <list_remove_node>
  (*node)->next = NULL;
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2200      	movs	r2, #0
 800fe04:	605a      	str	r2, [r3, #4]
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	f383 8810 	msr	PRIMASK, r3
}
 800fe10:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fe12:	bf00      	nop
 800fe14:	3718      	adds	r7, #24
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800fe1a:	b480      	push	{r7}
 800fe1c:	b089      	sub	sp, #36	@ 0x24
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
  int size = 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800fe26:	f3ef 8310 	mrs	r3, PRIMASK
 800fe2a:	613b      	str	r3, [r7, #16]
  return(result);
 800fe2c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe30:	b672      	cpsid	i
}
 800fe32:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800fe3a:	e005      	b.n	800fe48 <list_get_size+0x2e>
  {
    size++;
 800fe3c:	69fb      	ldr	r3, [r7, #28]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800fe42:	69bb      	ldr	r3, [r7, #24]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800fe48:	69ba      	ldr	r2, [r7, #24]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d1f5      	bne.n	800fe3c <list_get_size+0x22>
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f383 8810 	msr	PRIMASK, r3
}
 800fe5a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800fe5c:	69fb      	ldr	r3, [r7, #28]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3724      	adds	r7, #36	@ 0x24
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
	...

0800fe6c <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800fe6c:	b590      	push	{r4, r7, lr}
 800fe6e:	b08b      	sub	sp, #44	@ 0x2c
 800fe70:	af04      	add	r7, sp, #16
 800fe72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800fe74:	2300      	movs	r3, #0
 800fe76:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe7e:	7919      	ldrb	r1, [r3, #4]
 800fe80:	23ff      	movs	r3, #255	@ 0xff
 800fe82:	2201      	movs	r2, #1
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 ffc2 	bl	8010e0e <USBH_FindInterface>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800fe8e:	7dbb      	ldrb	r3, [r7, #22]
 800fe90:	2bff      	cmp	r3, #255	@ 0xff
 800fe92:	d002      	beq.n	800fe9a <USBH_HID_InterfaceInit+0x2e>
 800fe94:	7dbb      	ldrb	r3, [r7, #22]
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d901      	bls.n	800fe9e <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800fe9a:	2302      	movs	r3, #2
 800fe9c:	e122      	b.n	80100e4 <USBH_HID_InterfaceInit+0x278>
  }

  status = USBH_SelectInterface(phost, interface);
 800fe9e:	7dbb      	ldrb	r3, [r7, #22]
 800fea0:	4619      	mov	r1, r3
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 ff97 	bl	8010dd6 <USBH_SelectInterface>
 800fea8:	4603      	mov	r3, r0
 800feaa:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800feac:	7d7b      	ldrb	r3, [r7, #21]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d001      	beq.n	800feb6 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 800feb2:	2302      	movs	r3, #2
 800feb4:	e116      	b.n	80100e4 <USBH_HID_InterfaceInit+0x278>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800febc:	2034      	movs	r0, #52	@ 0x34
 800febe:	f005 fa6d 	bl	801539c <malloc>
 800fec2:	4603      	mov	r3, r0
 800fec4:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fecc:	69db      	ldr	r3, [r3, #28]
 800fece:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d101      	bne.n	800feda <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 800fed6:	2302      	movs	r3, #2
 800fed8:	e104      	b.n	80100e4 <USBH_HID_InterfaceInit+0x278>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800feda:	2234      	movs	r2, #52	@ 0x34
 800fedc:	2100      	movs	r1, #0
 800fede:	6938      	ldr	r0, [r7, #16]
 800fee0:	f006 f903 	bl	80160ea <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	2207      	movs	r2, #7
 800fee8:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800feea:	7dbb      	ldrb	r3, [r7, #22]
 800feec:	687a      	ldr	r2, [r7, #4]
 800feee:	211a      	movs	r1, #26
 800fef0:	fb01 f303 	mul.w	r3, r1, r3
 800fef4:	4413      	add	r3, r2
 800fef6:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d103      	bne.n	800ff08 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	4a7a      	ldr	r2, [pc, #488]	@ (80100ec <USBH_HID_InterfaceInit+0x280>)
 800ff04:	631a      	str	r2, [r3, #48]	@ 0x30
 800ff06:	e010      	b.n	800ff2a <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800ff08:	7dbb      	ldrb	r3, [r7, #22]
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	211a      	movs	r1, #26
 800ff0e:	fb01 f303 	mul.w	r3, r1, r3
 800ff12:	4413      	add	r3, r2
 800ff14:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	2b02      	cmp	r3, #2
 800ff1c:	d103      	bne.n	800ff26 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	4a73      	ldr	r2, [pc, #460]	@ (80100f0 <USBH_HID_InterfaceInit+0x284>)
 800ff22:	631a      	str	r2, [r3, #48]	@ 0x30
 800ff24:	e001      	b.n	800ff2a <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 800ff26:	2302      	movs	r3, #2
 800ff28:	e0dc      	b.n	80100e4 <USBH_HID_InterfaceInit+0x278>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	2200      	movs	r2, #0
 800ff34:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ff36:	7dbb      	ldrb	r3, [r7, #22]
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	211a      	movs	r1, #26
 800ff3c:	fb01 f303 	mul.w	r3, r1, r3
 800ff40:	4413      	add	r3, r2
 800ff42:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ff46:	781a      	ldrb	r2, [r3, #0]
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ff4c:	7dbb      	ldrb	r3, [r7, #22]
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	211a      	movs	r1, #26
 800ff52:	fb01 f303 	mul.w	r3, r1, r3
 800ff56:	4413      	add	r3, r2
 800ff58:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ff5c:	881a      	ldrh	r2, [r3, #0]
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800ff62:	7dbb      	ldrb	r3, [r7, #22]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	211a      	movs	r1, #26
 800ff68:	fb01 f303 	mul.w	r3, r1, r3
 800ff6c:	4413      	add	r3, r2
 800ff6e:	f203 3352 	addw	r3, r3, #850	@ 0x352
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	461a      	mov	r2, r3
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	8b9b      	ldrh	r3, [r3, #28]
 800ff7e:	2b09      	cmp	r3, #9
 800ff80:	d802      	bhi.n	800ff88 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	220a      	movs	r2, #10
 800ff86:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800ff88:	7dbb      	ldrb	r3, [r7, #22]
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	211a      	movs	r1, #26
 800ff8e:	fb01 f303 	mul.w	r3, r1, r3
 800ff92:	4413      	add	r3, r2
 800ff94:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	2b02      	cmp	r3, #2
 800ff9c:	bf28      	it	cs
 800ff9e:	2302      	movcs	r3, #2
 800ffa0:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	75fb      	strb	r3, [r7, #23]
 800ffa6:	e097      	b.n	80100d8 <USBH_HID_InterfaceInit+0x26c>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800ffa8:	7dbb      	ldrb	r3, [r7, #22]
 800ffaa:	7df9      	ldrb	r1, [r7, #23]
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	3101      	adds	r1, #1
 800ffb0:	00c9      	lsls	r1, r1, #3
 800ffb2:	201a      	movs	r0, #26
 800ffb4:	fb00 f303 	mul.w	r3, r0, r3
 800ffb8:	440b      	add	r3, r1
 800ffba:	4413      	add	r3, r2
 800ffbc:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	b25b      	sxtb	r3, r3
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	da42      	bge.n	801004e <USBH_HID_InterfaceInit+0x1e2>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800ffc8:	7dbb      	ldrb	r3, [r7, #22]
 800ffca:	7df9      	ldrb	r1, [r7, #23]
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	3101      	adds	r1, #1
 800ffd0:	00c9      	lsls	r1, r1, #3
 800ffd2:	201a      	movs	r0, #26
 800ffd4:	fb00 f303 	mul.w	r3, r0, r3
 800ffd8:	440b      	add	r3, r1
 800ffda:	4413      	add	r3, r2
 800ffdc:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800ffe0:	781a      	ldrb	r2, [r3, #0]
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	791b      	ldrb	r3, [r3, #4]
 800ffea:	4619      	mov	r1, r3
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f002 fa78 	bl	80124e2 <USBH_AllocPipe>
 800fff2:	4603      	mov	r3, r0
 800fff4:	461a      	mov	r2, r3
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800fffa:	7dbb      	ldrb	r3, [r7, #22]
 800fffc:	7df9      	ldrb	r1, [r7, #23]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	3101      	adds	r1, #1
 8010002:	00c9      	lsls	r1, r1, #3
 8010004:	201a      	movs	r0, #26
 8010006:	fb00 f303 	mul.w	r3, r0, r3
 801000a:	440b      	add	r3, r1
 801000c:	4413      	add	r3, r2
 801000e:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8010012:	881b      	ldrh	r3, [r3, #0]
 8010014:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	7859      	ldrb	r1, [r3, #1]
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	7918      	ldrb	r0, [r3, #4]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801002a:	89ba      	ldrh	r2, [r7, #12]
 801002c:	9202      	str	r2, [sp, #8]
 801002e:	2203      	movs	r2, #3
 8010030:	9201      	str	r2, [sp, #4]
 8010032:	9300      	str	r3, [sp, #0]
 8010034:	4623      	mov	r3, r4
 8010036:	4602      	mov	r2, r0
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f002 fa23 	bl	8012484 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	785b      	ldrb	r3, [r3, #1]
 8010042:	2200      	movs	r2, #0
 8010044:	4619      	mov	r1, r3
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f002 fd24 	bl	8012a94 <USBH_LL_SetToggle>
 801004c:	e041      	b.n	80100d2 <USBH_HID_InterfaceInit+0x266>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 801004e:	7dbb      	ldrb	r3, [r7, #22]
 8010050:	7df9      	ldrb	r1, [r7, #23]
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	3101      	adds	r1, #1
 8010056:	00c9      	lsls	r1, r1, #3
 8010058:	201a      	movs	r0, #26
 801005a:	fb00 f303 	mul.w	r3, r0, r3
 801005e:	440b      	add	r3, r1
 8010060:	4413      	add	r3, r2
 8010062:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8010066:	781a      	ldrb	r2, [r3, #0]
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	78db      	ldrb	r3, [r3, #3]
 8010070:	4619      	mov	r1, r3
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f002 fa35 	bl	80124e2 <USBH_AllocPipe>
 8010078:	4603      	mov	r3, r0
 801007a:	461a      	mov	r2, r3
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 8010080:	7dbb      	ldrb	r3, [r7, #22]
 8010082:	7df9      	ldrb	r1, [r7, #23]
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	3101      	adds	r1, #1
 8010088:	00c9      	lsls	r1, r1, #3
 801008a:	201a      	movs	r0, #26
 801008c:	fb00 f303 	mul.w	r3, r0, r3
 8010090:	440b      	add	r3, r1
 8010092:	4413      	add	r3, r2
 8010094:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	7819      	ldrb	r1, [r3, #0]
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	78d8      	ldrb	r0, [r3, #3]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80100b0:	89ba      	ldrh	r2, [r7, #12]
 80100b2:	9202      	str	r2, [sp, #8]
 80100b4:	2203      	movs	r2, #3
 80100b6:	9201      	str	r2, [sp, #4]
 80100b8:	9300      	str	r3, [sp, #0]
 80100ba:	4623      	mov	r3, r4
 80100bc:	4602      	mov	r2, r0
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f002 f9e0 	bl	8012484 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	2200      	movs	r2, #0
 80100ca:	4619      	mov	r1, r3
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f002 fce1 	bl	8012a94 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 80100d2:	7dfb      	ldrb	r3, [r7, #23]
 80100d4:	3301      	adds	r3, #1
 80100d6:	75fb      	strb	r3, [r7, #23]
 80100d8:	7dfa      	ldrb	r2, [r7, #23]
 80100da:	7bfb      	ldrb	r3, [r7, #15]
 80100dc:	429a      	cmp	r2, r3
 80100de:	f4ff af63 	bcc.w	800ffa8 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 80100e2:	2300      	movs	r3, #0
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	371c      	adds	r7, #28
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd90      	pop	{r4, r7, pc}
 80100ec:	08010811 	.word	0x08010811
 80100f0:	08010a61 	.word	0x08010a61

080100f4 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010102:	69db      	ldr	r3, [r3, #28]
 8010104:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	785b      	ldrb	r3, [r3, #1]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d00e      	beq.n	801012c <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	785b      	ldrb	r3, [r3, #1]
 8010112:	4619      	mov	r1, r3
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f002 f9d4 	bl	80124c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	785b      	ldrb	r3, [r3, #1]
 801011e:	4619      	mov	r1, r3
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f002 f9ff 	bl	8012524 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2200      	movs	r2, #0
 801012a:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00e      	beq.n	8010152 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	4619      	mov	r1, r3
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f002 f9c1 	bl	80124c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	4619      	mov	r1, r3
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f002 f9ec 	bl	8012524 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2200      	movs	r2, #0
 8010150:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010158:	69db      	ldr	r3, [r3, #28]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00b      	beq.n	8010176 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010164:	69db      	ldr	r3, [r3, #28]
 8010166:	4618      	mov	r0, r3
 8010168:	f005 f920 	bl	80153ac <free>
    phost->pActiveClass->pData = 0U;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010172:	2200      	movs	r2, #0
 8010174:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8010176:	2300      	movs	r3, #0
}
 8010178:	4618      	mov	r0, r3
 801017a:	3710      	adds	r7, #16
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8010188:	2301      	movs	r3, #1
 801018a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 801018c:	2301      	movs	r3, #1
 801018e:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010196:	69db      	ldr	r3, [r3, #28]
 8010198:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	795b      	ldrb	r3, [r3, #5]
 801019e:	2b05      	cmp	r3, #5
 80101a0:	d860      	bhi.n	8010264 <USBH_HID_ClassRequest+0xe4>
 80101a2:	a201      	add	r2, pc, #4	@ (adr r2, 80101a8 <USBH_HID_ClassRequest+0x28>)
 80101a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101a8:	080101c1 	.word	0x080101c1
 80101ac:	08010265 	.word	0x08010265
 80101b0:	080101db 	.word	0x080101db
 80101b4:	080101c1 	.word	0x080101c1
 80101b8:	08010205 	.word	0x08010205
 80101bc:	0801022f 	.word	0x0801022f
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	331c      	adds	r3, #28
 80101ca:	4619      	mov	r1, r3
 80101cc:	4610      	mov	r0, r2
 80101ce:	f000 f9e1 	bl	8010594 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	2202      	movs	r2, #2
 80101d6:	715a      	strb	r2, [r3, #5]

      break;
 80101d8:	e04b      	b.n	8010272 <USBH_HID_ClassRequest+0xf2>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80101de:	4619      	mov	r1, r3
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 f93e 	bl	8010462 <USBH_HID_GetHIDReportDescriptor>
 80101e6:	4603      	mov	r3, r0
 80101e8:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 80101ea:	7bbb      	ldrb	r3, [r7, #14]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d103      	bne.n	80101f8 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	2204      	movs	r2, #4
 80101f4:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 80101f6:	e037      	b.n	8010268 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80101f8:	7bbb      	ldrb	r3, [r7, #14]
 80101fa:	2b03      	cmp	r3, #3
 80101fc:	d134      	bne.n	8010268 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 80101fe:	2302      	movs	r3, #2
 8010200:	73fb      	strb	r3, [r7, #15]
      break;
 8010202:	e031      	b.n	8010268 <USBH_HID_ClassRequest+0xe8>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8010204:	2200      	movs	r2, #0
 8010206:	2100      	movs	r1, #0
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f000 f949 	bl	80104a0 <USBH_HID_SetIdle>
 801020e:	4603      	mov	r3, r0
 8010210:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8010212:	7bbb      	ldrb	r3, [r7, #14]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d103      	bne.n	8010220 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	2205      	movs	r2, #5
 801021c:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 801021e:	e025      	b.n	801026c <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8010220:	7bbb      	ldrb	r3, [r7, #14]
 8010222:	2b03      	cmp	r3, #3
 8010224:	d122      	bne.n	801026c <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	2205      	movs	r2, #5
 801022a:	715a      	strb	r2, [r3, #5]
      break;
 801022c:	e01e      	b.n	801026c <USBH_HID_ClassRequest+0xec>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 801022e:	2100      	movs	r1, #0
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f000 f989 	bl	8010548 <USBH_HID_SetProtocol>
 8010236:	4603      	mov	r3, r0
 8010238:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 801023a:	7bbb      	ldrb	r3, [r7, #14]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d10b      	bne.n	8010258 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	2201      	movs	r2, #1
 8010244:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801024c:	2102      	movs	r1, #2
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	4798      	blx	r3
        status = USBH_OK;
 8010252:	2300      	movs	r3, #0
 8010254:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8010256:	e00b      	b.n	8010270 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8010258:	7bbb      	ldrb	r3, [r7, #14]
 801025a:	2b03      	cmp	r3, #3
 801025c:	d108      	bne.n	8010270 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 801025e:	2302      	movs	r3, #2
 8010260:	73fb      	strb	r3, [r7, #15]
      break;
 8010262:	e005      	b.n	8010270 <USBH_HID_ClassRequest+0xf0>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 8010264:	bf00      	nop
 8010266:	e004      	b.n	8010272 <USBH_HID_ClassRequest+0xf2>
      break;
 8010268:	bf00      	nop
 801026a:	e002      	b.n	8010272 <USBH_HID_ClassRequest+0xf2>
      break;
 801026c:	bf00      	nop
 801026e:	e000      	b.n	8010272 <USBH_HID_ClassRequest+0xf2>
      break;
 8010270:	bf00      	nop
  }

  return status;
 8010272:	7bfb      	ldrb	r3, [r7, #15]
}
 8010274:	4618      	mov	r0, r3
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b088      	sub	sp, #32
 8010280:	af02      	add	r7, sp, #8
 8010282:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010284:	2300      	movs	r3, #0
 8010286:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801028e:	69db      	ldr	r3, [r3, #28]
 8010290:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	789b      	ldrb	r3, [r3, #2]
 8010296:	2b06      	cmp	r3, #6
 8010298:	f200 80b8 	bhi.w	801040c <USBH_HID_Process+0x190>
 801029c:	a201      	add	r2, pc, #4	@ (adr r2, 80102a4 <USBH_HID_Process+0x28>)
 801029e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102a2:	bf00      	nop
 80102a4:	080102c1 	.word	0x080102c1
 80102a8:	080102e7 	.word	0x080102e7
 80102ac:	0801040d 	.word	0x0801040d
 80102b0:	0801040d 	.word	0x0801040d
 80102b4:	08010357 	.word	0x08010357
 80102b8:	08010341 	.word	0x08010341
 80102bc:	08010385 	.word	0x08010385
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	4798      	blx	r3
 80102c8:	4603      	mov	r3, r0
 80102ca:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 80102cc:	7dfb      	ldrb	r3, [r7, #23]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d103      	bne.n	80102da <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	2201      	movs	r2, #1
 80102d6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80102d8:	e09d      	b.n	8010416 <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	2207      	movs	r2, #7
 80102de:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80102e0:	2302      	movs	r3, #2
 80102e2:	75fb      	strb	r3, [r7, #23]
      break;
 80102e4:	e097      	b.n	8010416 <USBH_HID_Process+0x19a>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	695a      	ldr	r2, [r3, #20]
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	8b1b      	ldrh	r3, [r3, #24]
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	9300      	str	r3, [sp, #0]
 80102f2:	4613      	mov	r3, r2
 80102f4:	2200      	movs	r2, #0
 80102f6:	2101      	movs	r1, #1
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f000 f8f9 	bl	80104f0 <USBH_HID_GetReport>
 80102fe:	4603      	mov	r3, r0
 8010300:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8010302:	7dfb      	ldrb	r3, [r7, #23]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d103      	bne.n	8010310 <USBH_HID_Process+0x94>
      {
        HID_Handle->state = USBH_HID_SYNC;
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	2205      	movs	r2, #5
 801030c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801030e:	e082      	b.n	8010416 <USBH_HID_Process+0x19a>
      else if (status == USBH_BUSY)
 8010310:	7dfb      	ldrb	r3, [r7, #23]
 8010312:	2b01      	cmp	r3, #1
 8010314:	d105      	bne.n	8010322 <USBH_HID_Process+0xa6>
        HID_Handle->state = USBH_HID_IDLE;
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	2201      	movs	r2, #1
 801031a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 801031c:	2300      	movs	r3, #0
 801031e:	75fb      	strb	r3, [r7, #23]
      break;
 8010320:	e079      	b.n	8010416 <USBH_HID_Process+0x19a>
      else if (status == USBH_NOT_SUPPORTED)
 8010322:	7dfb      	ldrb	r3, [r7, #23]
 8010324:	2b03      	cmp	r3, #3
 8010326:	d105      	bne.n	8010334 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_SYNC;
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	2205      	movs	r2, #5
 801032c:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 801032e:	2300      	movs	r3, #0
 8010330:	75fb      	strb	r3, [r7, #23]
      break;
 8010332:	e070      	b.n	8010416 <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	2207      	movs	r2, #7
 8010338:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 801033a:	2302      	movs	r3, #2
 801033c:	75fb      	strb	r3, [r7, #23]
      break;
 801033e:	e06a      	b.n	8010416 <USBH_HID_Process+0x19a>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010346:	f003 0301 	and.w	r3, r3, #1
 801034a:	2b00      	cmp	r3, #0
 801034c:	d060      	beq.n	8010410 <USBH_HID_Process+0x194>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	2204      	movs	r2, #4
 8010352:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010354:	e05c      	b.n	8010410 <USBH_HID_Process+0x194>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 801035e:	b2da      	uxtb	r2, r3
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	785b      	ldrb	r3, [r3, #1]
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f002 f86e 	bl	8012446 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	2206      	movs	r2, #6
 801036e:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 801037a:	693b      	ldr	r3, [r7, #16]
 801037c:	2200      	movs	r2, #0
 801037e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 8010382:	e048      	b.n	8010416 <USBH_HID_Process+0x19a>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	785b      	ldrb	r3, [r3, #1]
 8010388:	4619      	mov	r1, r3
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f002 fb58 	bl	8012a40 <USBH_LL_GetURBState>
 8010390:	4603      	mov	r3, r0
 8010392:	2b01      	cmp	r3, #1
 8010394:	d124      	bne.n	80103e0 <USBH_HID_Process+0x164>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	785b      	ldrb	r3, [r3, #1]
 801039a:	4619      	mov	r1, r3
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f002 fabd 	bl	801291c <USBH_LL_GetLastXferSize>
 80103a2:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d132      	bne.n	8010414 <USBH_HID_Process+0x198>
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d02f      	beq.n	8010414 <USBH_HID_Process+0x198>
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d02b      	beq.n	8010414 <USBH_HID_Process+0x198>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	f103 0008 	add.w	r0, r3, #8
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	6959      	ldr	r1, [r3, #20]
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	8b1b      	ldrh	r3, [r3, #24]
 80103ca:	461a      	mov	r2, r3
 80103cc:	f000 f9cc 	bl	8010768 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	2201      	movs	r2, #1
 80103d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f002 fd5b 	bl	8012e94 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 80103de:	e019      	b.n	8010414 <USBH_HID_Process+0x198>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	785b      	ldrb	r3, [r3, #1]
 80103e4:	4619      	mov	r1, r3
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f002 fb2a 	bl	8012a40 <USBH_LL_GetURBState>
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b05      	cmp	r3, #5
 80103f0:	d110      	bne.n	8010414 <USBH_HID_Process+0x198>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	7e9b      	ldrb	r3, [r3, #26]
 80103f6:	4619      	mov	r1, r3
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f001 fae1 	bl	80119c0 <USBH_ClrFeature>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d107      	bne.n	8010414 <USBH_HID_Process+0x198>
            HID_Handle->state = USBH_HID_GET_DATA;
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	2204      	movs	r2, #4
 8010408:	709a      	strb	r2, [r3, #2]
      break;
 801040a:	e003      	b.n	8010414 <USBH_HID_Process+0x198>

    default:
      break;
 801040c:	bf00      	nop
 801040e:	e002      	b.n	8010416 <USBH_HID_Process+0x19a>
      break;
 8010410:	bf00      	nop
 8010412:	e000      	b.n	8010416 <USBH_HID_Process+0x19a>
      break;
 8010414:	bf00      	nop
  }

  return status;
 8010416:	7dfb      	ldrb	r3, [r7, #23]
}
 8010418:	4618      	mov	r0, r3
 801041a:	3718      	adds	r7, #24
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010420:	b480      	push	{r7}
 8010422:	b085      	sub	sp, #20
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801042e:	69db      	ldr	r3, [r3, #28]
 8010430:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	789b      	ldrb	r3, [r3, #2]
 8010436:	2b06      	cmp	r3, #6
 8010438:	d10c      	bne.n	8010454 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6a1b      	ldr	r3, [r3, #32]
 8010444:	1ad3      	subs	r3, r2, r3
 8010446:	68fa      	ldr	r2, [r7, #12]
 8010448:	8b92      	ldrh	r2, [r2, #28]
 801044a:	4293      	cmp	r3, r2
 801044c:	d302      	bcc.n	8010454 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2204      	movs	r2, #4
 8010452:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8010454:	2300      	movs	r3, #0
}
 8010456:	4618      	mov	r0, r3
 8010458:	3714      	adds	r7, #20
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr

08010462 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8010462:	b580      	push	{r7, lr}
 8010464:	b086      	sub	sp, #24
 8010466:	af02      	add	r7, sp, #8
 8010468:	6078      	str	r0, [r7, #4]
 801046a:	460b      	mov	r3, r1
 801046c:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 801046e:	887b      	ldrh	r3, [r7, #2]
 8010470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010474:	d901      	bls.n	801047a <USBH_HID_GetHIDReportDescriptor+0x18>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010476:	2303      	movs	r3, #3
 8010478:	e00e      	b.n	8010498 <USBH_HID_GetHIDReportDescriptor+0x36>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010480:	887b      	ldrh	r3, [r7, #2]
 8010482:	9300      	str	r3, [sp, #0]
 8010484:	4613      	mov	r3, r2
 8010486:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 801048a:	2101      	movs	r1, #1
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f001 f9f7 	bl	8011880 <USBH_GetDescriptor>
 8010492:	4603      	mov	r3, r0
 8010494:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8010496:	7bfb      	ldrb	r3, [r7, #15]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3710      	adds	r7, #16
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	460b      	mov	r3, r1
 80104aa:	70fb      	strb	r3, [r7, #3]
 80104ac:	4613      	mov	r3, r2
 80104ae:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2221      	movs	r2, #33	@ 0x21
 80104b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	220a      	movs	r2, #10
 80104ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 80104bc:	78fb      	ldrb	r3, [r7, #3]
 80104be:	b29b      	uxth	r3, r3
 80104c0:	021b      	lsls	r3, r3, #8
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	78bb      	ldrb	r3, [r7, #2]
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	4313      	orrs	r3, r2
 80104ca:	b29a      	uxth	r2, r3
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2200      	movs	r2, #0
 80104d4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2200      	movs	r2, #0
 80104da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80104dc:	2200      	movs	r2, #0
 80104de:	2100      	movs	r1, #0
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f001 fda2 	bl	801202a <USBH_CtlReq>
 80104e6:	4603      	mov	r3, r0
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3708      	adds	r7, #8
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	607b      	str	r3, [r7, #4]
 80104fa:	460b      	mov	r3, r1
 80104fc:	72fb      	strb	r3, [r7, #11]
 80104fe:	4613      	mov	r3, r2
 8010500:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	22a1      	movs	r2, #161	@ 0xa1
 8010506:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2201      	movs	r2, #1
 801050c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 801050e:	7afb      	ldrb	r3, [r7, #11]
 8010510:	b29b      	uxth	r3, r3
 8010512:	021b      	lsls	r3, r3, #8
 8010514:	b29a      	uxth	r2, r3
 8010516:	7abb      	ldrb	r3, [r7, #10]
 8010518:	b29b      	uxth	r3, r3
 801051a:	4313      	orrs	r3, r2
 801051c:	b29a      	uxth	r2, r3
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	2200      	movs	r2, #0
 8010526:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8010528:	7e3b      	ldrb	r3, [r7, #24]
 801052a:	b29a      	uxth	r2, r3
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8010530:	7e3b      	ldrb	r3, [r7, #24]
 8010532:	b29b      	uxth	r3, r3
 8010534:	461a      	mov	r2, r3
 8010536:	6879      	ldr	r1, [r7, #4]
 8010538:	68f8      	ldr	r0, [r7, #12]
 801053a:	f001 fd76 	bl	801202a <USBH_CtlReq>
 801053e:	4603      	mov	r3, r0
}
 8010540:	4618      	mov	r0, r3
 8010542:	3710      	adds	r7, #16
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	460b      	mov	r3, r1
 8010552:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2221      	movs	r2, #33	@ 0x21
 8010558:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	220b      	movs	r2, #11
 801055e:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8010560:	78fb      	ldrb	r3, [r7, #3]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d003      	beq.n	801056e <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	825a      	strh	r2, [r3, #18]
 801056c:	e002      	b.n	8010574 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2201      	movs	r2, #1
 8010572:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8010580:	2200      	movs	r2, #0
 8010582:	2100      	movs	r1, #0
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f001 fd50 	bl	801202a <USBH_CtlReq>
 801058a:	4603      	mov	r3, r0

}
 801058c:	4618      	mov	r0, r3
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	3302      	adds	r3, #2
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	461a      	mov	r2, r3
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	3303      	adds	r3, #3
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	021b      	lsls	r3, r3, #8
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	4313      	orrs	r3, r2
 80105b6:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 80105b8:	897b      	ldrh	r3, [r7, #10]
 80105ba:	2b09      	cmp	r3, #9
 80105bc:	d941      	bls.n	8010642 <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 80105be:	2309      	movs	r3, #9
 80105c0:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 80105c2:	e03a      	b.n	801063a <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80105c4:	f107 0308 	add.w	r3, r7, #8
 80105c8:	4619      	mov	r1, r3
 80105ca:	68f8      	ldr	r0, [r7, #12]
 80105cc:	f001 fd13 	bl	8011ff6 <USBH_GetNextDesc>
 80105d0:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	785b      	ldrb	r3, [r3, #1]
 80105d6:	2b21      	cmp	r3, #33	@ 0x21
 80105d8:	d12f      	bne.n	801063a <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	781a      	ldrb	r2, [r3, #0]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	785a      	ldrb	r2, [r3, #1]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	3302      	adds	r3, #2
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	461a      	mov	r2, r3
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	3303      	adds	r3, #3
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	021b      	lsls	r3, r3, #8
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	4313      	orrs	r3, r2
 80105fe:	b29a      	uxth	r2, r3
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	791a      	ldrb	r2, [r3, #4]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	795a      	ldrb	r2, [r3, #5]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	799a      	ldrb	r2, [r3, #6]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	3307      	adds	r3, #7
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	461a      	mov	r2, r3
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	3308      	adds	r3, #8
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	021b      	lsls	r3, r3, #8
 801062c:	b29b      	uxth	r3, r3
 801062e:	4313      	orrs	r3, r2
 8010630:	b29a      	uxth	r2, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	811a      	strh	r2, [r3, #8]
        break;
 8010636:	bf00      	nop
      }
    }
  }
}
 8010638:	e003      	b.n	8010642 <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 801063a:	893b      	ldrh	r3, [r7, #8]
 801063c:	897a      	ldrh	r2, [r7, #10]
 801063e:	429a      	cmp	r2, r3
 8010640:	d8c0      	bhi.n	80105c4 <USBH_HID_ParseHIDDesc+0x30>
}
 8010642:	bf00      	nop
 8010644:	3710      	adds	r7, #16
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}

0801064a <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 801064a:	b480      	push	{r7}
 801064c:	b085      	sub	sp, #20
 801064e:	af00      	add	r7, sp, #0
 8010650:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8010652:	23ff      	movs	r3, #255	@ 0xff
 8010654:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b0b      	cmp	r3, #11
 801065e:	d117      	bne.n	8010690 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8010666:	4619      	mov	r1, r3
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	231a      	movs	r3, #26
 801066c:	fb01 f303 	mul.w	r3, r1, r3
 8010670:	4413      	add	r3, r2
 8010672:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 801067a:	7bbb      	ldrb	r3, [r7, #14]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d102      	bne.n	8010686 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 8010680:	2302      	movs	r3, #2
 8010682:	73fb      	strb	r3, [r7, #15]
 8010684:	e004      	b.n	8010690 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8010686:	7bbb      	ldrb	r3, [r7, #14]
 8010688:	2b02      	cmp	r3, #2
 801068a:	d101      	bne.n	8010690 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 801068c:	2301      	movs	r3, #1
 801068e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 8010690:	7bfb      	ldrb	r3, [r7, #15]
}
 8010692:	4618      	mov	r0, r3
 8010694:	3714      	adds	r7, #20
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr

0801069e <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 801069e:	b480      	push	{r7}
 80106a0:	b085      	sub	sp, #20
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	60f8      	str	r0, [r7, #12]
 80106a6:	60b9      	str	r1, [r7, #8]
 80106a8:	4613      	mov	r3, r2
 80106aa:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2200      	movs	r2, #0
 80106b0:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2200      	movs	r2, #0
 80106b6:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2200      	movs	r2, #0
 80106bc:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	88fa      	ldrh	r2, [r7, #6]
 80106c2:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	68ba      	ldr	r2, [r7, #8]
 80106c8:	601a      	str	r2, [r3, #0]
}
 80106ca:	bf00      	nop
 80106cc:	3714      	adds	r7, #20
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr

080106d6 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 80106d6:	b480      	push	{r7}
 80106d8:	b087      	sub	sp, #28
 80106da:	af00      	add	r7, sp, #0
 80106dc:	60f8      	str	r0, [r7, #12]
 80106de:	60b9      	str	r1, [r7, #8]
 80106e0:	4613      	mov	r3, r2
 80106e2:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	7a9b      	ldrb	r3, [r3, #10]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d131      	bne.n	8010754 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2201      	movs	r2, #1
 80106f4:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80106f6:	2300      	movs	r3, #0
 80106f8:	82fb      	strh	r3, [r7, #22]
 80106fa:	e027      	b.n	801074c <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	88da      	ldrh	r2, [r3, #6]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	889b      	ldrh	r3, [r3, #4]
 8010704:	429a      	cmp	r2, r3
 8010706:	d019      	beq.n	801073c <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	68fa      	ldr	r2, [r7, #12]
 801070e:	88d2      	ldrh	r2, [r2, #6]
 8010710:	441a      	add	r2, r3
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	1c59      	adds	r1, r3, #1
 8010716:	6139      	str	r1, [r7, #16]
 8010718:	7812      	ldrb	r2, [r2, #0]
 801071a:	701a      	strb	r2, [r3, #0]
        f->tail++;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	88db      	ldrh	r3, [r3, #6]
 8010720:	3301      	adds	r3, #1
 8010722:	b29a      	uxth	r2, r3
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	88da      	ldrh	r2, [r3, #6]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	891b      	ldrh	r3, [r3, #8]
 8010730:	429a      	cmp	r2, r3
 8010732:	d108      	bne.n	8010746 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2200      	movs	r2, #0
 8010738:	80da      	strh	r2, [r3, #6]
 801073a:	e004      	b.n	8010746 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2200      	movs	r2, #0
 8010740:	729a      	strb	r2, [r3, #10]
        return i;
 8010742:	8afb      	ldrh	r3, [r7, #22]
 8010744:	e00a      	b.n	801075c <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8010746:	8afb      	ldrh	r3, [r7, #22]
 8010748:	3301      	adds	r3, #1
 801074a:	82fb      	strh	r3, [r7, #22]
 801074c:	8afa      	ldrh	r2, [r7, #22]
 801074e:	88fb      	ldrh	r3, [r7, #6]
 8010750:	429a      	cmp	r2, r3
 8010752:	d3d3      	bcc.n	80106fc <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2200      	movs	r2, #0
 8010758:	729a      	strb	r2, [r3, #10]

  return nbytes;
 801075a:	88fb      	ldrh	r3, [r7, #6]
}
 801075c:	4618      	mov	r0, r3
 801075e:	371c      	adds	r7, #28
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr

08010768 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8010768:	b480      	push	{r7}
 801076a:	b087      	sub	sp, #28
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	4613      	mov	r3, r2
 8010774:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	7a9b      	ldrb	r3, [r3, #10]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d13c      	bne.n	80107fc <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2201      	movs	r2, #1
 8010786:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8010788:	2300      	movs	r3, #0
 801078a:	82fb      	strh	r3, [r7, #22]
 801078c:	e032      	b.n	80107f4 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	889b      	ldrh	r3, [r3, #4]
 8010792:	3301      	adds	r3, #1
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	88d2      	ldrh	r2, [r2, #6]
 8010798:	4293      	cmp	r3, r2
 801079a:	d00a      	beq.n	80107b2 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	889b      	ldrh	r3, [r3, #4]
 80107a0:	3301      	adds	r3, #1
 80107a2:	68fa      	ldr	r2, [r7, #12]
 80107a4:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 80107a6:	4293      	cmp	r3, r2
 80107a8:	d108      	bne.n	80107bc <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	88db      	ldrh	r3, [r3, #6]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d104      	bne.n	80107bc <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2200      	movs	r2, #0
 80107b6:	729a      	strb	r2, [r3, #10]
        return i;
 80107b8:	8afb      	ldrh	r3, [r7, #22]
 80107ba:	e023      	b.n	8010804 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	613a      	str	r2, [r7, #16]
 80107c2:	68fa      	ldr	r2, [r7, #12]
 80107c4:	6812      	ldr	r2, [r2, #0]
 80107c6:	68f9      	ldr	r1, [r7, #12]
 80107c8:	8889      	ldrh	r1, [r1, #4]
 80107ca:	440a      	add	r2, r1
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	7013      	strb	r3, [r2, #0]
        f->head++;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	889b      	ldrh	r3, [r3, #4]
 80107d4:	3301      	adds	r3, #1
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	889a      	ldrh	r2, [r3, #4]
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	891b      	ldrh	r3, [r3, #8]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d102      	bne.n	80107ee <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2200      	movs	r2, #0
 80107ec:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80107ee:	8afb      	ldrh	r3, [r7, #22]
 80107f0:	3301      	adds	r3, #1
 80107f2:	82fb      	strh	r3, [r7, #22]
 80107f4:	8afa      	ldrh	r2, [r7, #22]
 80107f6:	88fb      	ldrh	r3, [r7, #6]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d3c8      	bcc.n	801078e <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	2200      	movs	r2, #0
 8010800:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8010802:	88fb      	ldrh	r3, [r7, #6]
}
 8010804:	4618      	mov	r0, r3
 8010806:	371c      	adds	r7, #28
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801081e:	69db      	ldr	r3, [r3, #28]
 8010820:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 8010822:	4b22      	ldr	r3, [pc, #136]	@ (80108ac <USBH_HID_KeybdInit+0x9c>)
 8010824:	2200      	movs	r2, #0
 8010826:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 8010828:	4b20      	ldr	r3, [pc, #128]	@ (80108ac <USBH_HID_KeybdInit+0x9c>)
 801082a:	2200      	movs	r2, #0
 801082c:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 801082e:	4b1f      	ldr	r3, [pc, #124]	@ (80108ac <USBH_HID_KeybdInit+0x9c>)
 8010830:	2200      	movs	r2, #0
 8010832:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8010834:	4b1d      	ldr	r3, [pc, #116]	@ (80108ac <USBH_HID_KeybdInit+0x9c>)
 8010836:	2200      	movs	r2, #0
 8010838:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 801083a:	4b1c      	ldr	r3, [pc, #112]	@ (80108ac <USBH_HID_KeybdInit+0x9c>)
 801083c:	2200      	movs	r2, #0
 801083e:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8010840:	4b1a      	ldr	r3, [pc, #104]	@ (80108ac <USBH_HID_KeybdInit+0x9c>)
 8010842:	2200      	movs	r2, #0
 8010844:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8010846:	4b19      	ldr	r3, [pc, #100]	@ (80108ac <USBH_HID_KeybdInit+0x9c>)
 8010848:	2200      	movs	r2, #0
 801084a:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 801084c:	4b17      	ldr	r3, [pc, #92]	@ (80108ac <USBH_HID_KeybdInit+0x9c>)
 801084e:	2200      	movs	r2, #0
 8010850:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 8010852:	2300      	movs	r3, #0
 8010854:	60fb      	str	r3, [r7, #12]
 8010856:	e00c      	b.n	8010872 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8010858:	4a15      	ldr	r2, [pc, #84]	@ (80108b0 <USBH_HID_KeybdInit+0xa0>)
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	4413      	add	r3, r2
 801085e:	2200      	movs	r2, #0
 8010860:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 8010862:	4a14      	ldr	r2, [pc, #80]	@ (80108b4 <USBH_HID_KeybdInit+0xa4>)
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	4413      	add	r3, r2
 8010868:	2200      	movs	r2, #0
 801086a:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	3301      	adds	r3, #1
 8010870:	60fb      	str	r3, [r7, #12]
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2b07      	cmp	r3, #7
 8010876:	d9ef      	bls.n	8010858 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	8b1b      	ldrh	r3, [r3, #24]
 801087c:	2b08      	cmp	r3, #8
 801087e:	d902      	bls.n	8010886 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	2208      	movs	r2, #8
 8010884:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	4a0a      	ldr	r2, [pc, #40]	@ (80108b4 <USBH_HID_KeybdInit+0xa4>)
 801088a:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	f103 0008 	add.w	r0, r3, #8
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010898:	2250      	movs	r2, #80	@ 0x50
 801089a:	4619      	mov	r1, r3
 801089c:	f7ff feff 	bl	801069e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3710      	adds	r7, #16
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	200012d4 	.word	0x200012d4
 80108b0:	200012ec 	.word	0x200012ec
 80108b4:	200012e4 	.word	0x200012e4

080108b8 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 f80d 	bl	80108e0 <USBH_HID_KeybdDecode>
 80108c6:	4603      	mov	r3, r0
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d101      	bne.n	80108d0 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 80108cc:	4b03      	ldr	r3, [pc, #12]	@ (80108dc <USBH_HID_GetKeybdInfo+0x24>)
 80108ce:	e000      	b.n	80108d2 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 80108d0:	2300      	movs	r3, #0
  }
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	200012d4 	.word	0x200012d4

080108e0 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80108ee:	69db      	ldr	r3, [r3, #28]
 80108f0:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	8b1b      	ldrh	r3, [r3, #24]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d003      	beq.n	8010902 <USBH_HID_KeybdDecode+0x22>
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	689b      	ldr	r3, [r3, #8]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d101      	bne.n	8010906 <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 8010902:	2302      	movs	r3, #2
 8010904:	e066      	b.n	80109d4 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	f103 0008 	add.w	r0, r3, #8
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	8b1b      	ldrh	r3, [r3, #24]
 8010910:	461a      	mov	r2, r3
 8010912:	4932      	ldr	r1, [pc, #200]	@ (80109dc <USBH_HID_KeybdDecode+0xfc>)
 8010914:	f7ff fedf 	bl	80106d6 <USBH_HID_FifoRead>
 8010918:	4603      	mov	r3, r0
 801091a:	461a      	mov	r2, r3
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	8b1b      	ldrh	r3, [r3, #24]
 8010920:	429a      	cmp	r2, r3
 8010922:	d156      	bne.n	80109d2 <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8010924:	2100      	movs	r1, #0
 8010926:	482e      	ldr	r0, [pc, #184]	@ (80109e0 <USBH_HID_KeybdDecode+0x100>)
 8010928:	f000 f8e4 	bl	8010af4 <HID_ReadItem>
 801092c:	4603      	mov	r3, r0
 801092e:	b2da      	uxtb	r2, r3
 8010930:	4b2c      	ldr	r3, [pc, #176]	@ (80109e4 <USBH_HID_KeybdDecode+0x104>)
 8010932:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8010934:	2100      	movs	r1, #0
 8010936:	482c      	ldr	r0, [pc, #176]	@ (80109e8 <USBH_HID_KeybdDecode+0x108>)
 8010938:	f000 f8dc 	bl	8010af4 <HID_ReadItem>
 801093c:	4603      	mov	r3, r0
 801093e:	b2da      	uxtb	r2, r3
 8010940:	4b28      	ldr	r3, [pc, #160]	@ (80109e4 <USBH_HID_KeybdDecode+0x104>)
 8010942:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8010944:	2100      	movs	r1, #0
 8010946:	4829      	ldr	r0, [pc, #164]	@ (80109ec <USBH_HID_KeybdDecode+0x10c>)
 8010948:	f000 f8d4 	bl	8010af4 <HID_ReadItem>
 801094c:	4603      	mov	r3, r0
 801094e:	b2da      	uxtb	r2, r3
 8010950:	4b24      	ldr	r3, [pc, #144]	@ (80109e4 <USBH_HID_KeybdDecode+0x104>)
 8010952:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8010954:	2100      	movs	r1, #0
 8010956:	4826      	ldr	r0, [pc, #152]	@ (80109f0 <USBH_HID_KeybdDecode+0x110>)
 8010958:	f000 f8cc 	bl	8010af4 <HID_ReadItem>
 801095c:	4603      	mov	r3, r0
 801095e:	b2da      	uxtb	r2, r3
 8010960:	4b20      	ldr	r3, [pc, #128]	@ (80109e4 <USBH_HID_KeybdDecode+0x104>)
 8010962:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8010964:	2100      	movs	r1, #0
 8010966:	4823      	ldr	r0, [pc, #140]	@ (80109f4 <USBH_HID_KeybdDecode+0x114>)
 8010968:	f000 f8c4 	bl	8010af4 <HID_ReadItem>
 801096c:	4603      	mov	r3, r0
 801096e:	b2da      	uxtb	r2, r3
 8010970:	4b1c      	ldr	r3, [pc, #112]	@ (80109e4 <USBH_HID_KeybdDecode+0x104>)
 8010972:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8010974:	2100      	movs	r1, #0
 8010976:	4820      	ldr	r0, [pc, #128]	@ (80109f8 <USBH_HID_KeybdDecode+0x118>)
 8010978:	f000 f8bc 	bl	8010af4 <HID_ReadItem>
 801097c:	4603      	mov	r3, r0
 801097e:	b2da      	uxtb	r2, r3
 8010980:	4b18      	ldr	r3, [pc, #96]	@ (80109e4 <USBH_HID_KeybdDecode+0x104>)
 8010982:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8010984:	2100      	movs	r1, #0
 8010986:	481d      	ldr	r0, [pc, #116]	@ (80109fc <USBH_HID_KeybdDecode+0x11c>)
 8010988:	f000 f8b4 	bl	8010af4 <HID_ReadItem>
 801098c:	4603      	mov	r3, r0
 801098e:	b2da      	uxtb	r2, r3
 8010990:	4b14      	ldr	r3, [pc, #80]	@ (80109e4 <USBH_HID_KeybdDecode+0x104>)
 8010992:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8010994:	2100      	movs	r1, #0
 8010996:	481a      	ldr	r0, [pc, #104]	@ (8010a00 <USBH_HID_KeybdDecode+0x120>)
 8010998:	f000 f8ac 	bl	8010af4 <HID_ReadItem>
 801099c:	4603      	mov	r3, r0
 801099e:	b2da      	uxtb	r2, r3
 80109a0:	4b10      	ldr	r3, [pc, #64]	@ (80109e4 <USBH_HID_KeybdDecode+0x104>)
 80109a2:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80109a4:	2300      	movs	r3, #0
 80109a6:	73fb      	strb	r3, [r7, #15]
 80109a8:	e00e      	b.n	80109c8 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 80109aa:	7bfb      	ldrb	r3, [r7, #15]
 80109ac:	4619      	mov	r1, r3
 80109ae:	4815      	ldr	r0, [pc, #84]	@ (8010a04 <USBH_HID_KeybdDecode+0x124>)
 80109b0:	f000 f8a0 	bl	8010af4 <HID_ReadItem>
 80109b4:	4602      	mov	r2, r0
 80109b6:	7bfb      	ldrb	r3, [r7, #15]
 80109b8:	b2d1      	uxtb	r1, r2
 80109ba:	4a0a      	ldr	r2, [pc, #40]	@ (80109e4 <USBH_HID_KeybdDecode+0x104>)
 80109bc:	4413      	add	r3, r2
 80109be:	460a      	mov	r2, r1
 80109c0:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80109c2:	7bfb      	ldrb	r3, [r7, #15]
 80109c4:	3301      	adds	r3, #1
 80109c6:	73fb      	strb	r3, [r7, #15]
 80109c8:	7bfb      	ldrb	r3, [r7, #15]
 80109ca:	2b05      	cmp	r3, #5
 80109cc:	d9ed      	bls.n	80109aa <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 80109ce:	2300      	movs	r3, #0
 80109d0:	e000      	b.n	80109d4 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 80109d2:	2302      	movs	r3, #2
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3710      	adds	r7, #16
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	200012ec 	.word	0x200012ec
 80109e0:	08019fa0 	.word	0x08019fa0
 80109e4:	200012d4 	.word	0x200012d4
 80109e8:	08019fc0 	.word	0x08019fc0
 80109ec:	08019fe0 	.word	0x08019fe0
 80109f0:	0801a000 	.word	0x0801a000
 80109f4:	0801a020 	.word	0x0801a020
 80109f8:	0801a040 	.word	0x0801a040
 80109fc:	0801a060 	.word	0x0801a060
 8010a00:	0801a080 	.word	0x0801a080
 8010a04:	0801a0a0 	.word	0x0801a0a0

08010a08 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b085      	sub	sp, #20
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	789b      	ldrb	r3, [r3, #2]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d103      	bne.n	8010a20 <USBH_HID_GetASCIICode+0x18>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	799b      	ldrb	r3, [r3, #6]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d009      	beq.n	8010a34 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	7a5b      	ldrb	r3, [r3, #9]
 8010a24:	461a      	mov	r2, r3
 8010a26:	4b0b      	ldr	r3, [pc, #44]	@ (8010a54 <USBH_HID_GetASCIICode+0x4c>)
 8010a28:	5c9b      	ldrb	r3, [r3, r2]
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8010a58 <USBH_HID_GetASCIICode+0x50>)
 8010a2e:	5c9b      	ldrb	r3, [r3, r2]
 8010a30:	73fb      	strb	r3, [r7, #15]
 8010a32:	e008      	b.n	8010a46 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	7a5b      	ldrb	r3, [r3, #9]
 8010a38:	461a      	mov	r2, r3
 8010a3a:	4b06      	ldr	r3, [pc, #24]	@ (8010a54 <USBH_HID_GetASCIICode+0x4c>)
 8010a3c:	5c9b      	ldrb	r3, [r3, r2]
 8010a3e:	461a      	mov	r2, r3
 8010a40:	4b06      	ldr	r3, [pc, #24]	@ (8010a5c <USBH_HID_GetASCIICode+0x54>)
 8010a42:	5c9b      	ldrb	r3, [r3, r2]
 8010a44:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 8010a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3714      	adds	r7, #20
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr
 8010a54:	0801a1c8 	.word	0x0801a1c8
 8010a58:	0801a144 	.word	0x0801a144
 8010a5c:	0801a0c0 	.word	0x0801a0c0

08010a60 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010a6e:	69db      	ldr	r3, [r3, #28]
 8010a70:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8010a72:	4b1d      	ldr	r3, [pc, #116]	@ (8010ae8 <USBH_HID_MouseInit+0x88>)
 8010a74:	2200      	movs	r2, #0
 8010a76:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8010a78:	4b1b      	ldr	r3, [pc, #108]	@ (8010ae8 <USBH_HID_MouseInit+0x88>)
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8010a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ae8 <USBH_HID_MouseInit+0x88>)
 8010a80:	2200      	movs	r2, #0
 8010a82:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8010a84:	4b18      	ldr	r3, [pc, #96]	@ (8010ae8 <USBH_HID_MouseInit+0x88>)
 8010a86:	2200      	movs	r2, #0
 8010a88:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8010a8a:	4b17      	ldr	r3, [pc, #92]	@ (8010ae8 <USBH_HID_MouseInit+0x88>)
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 8010a90:	2300      	movs	r3, #0
 8010a92:	60fb      	str	r3, [r7, #12]
 8010a94:	e00c      	b.n	8010ab0 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8010a96:	4a15      	ldr	r2, [pc, #84]	@ (8010aec <USBH_HID_MouseInit+0x8c>)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 8010aa0:	4a13      	ldr	r2, [pc, #76]	@ (8010af0 <USBH_HID_MouseInit+0x90>)
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	3301      	adds	r3, #1
 8010aae:	60fb      	str	r3, [r7, #12]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2b07      	cmp	r3, #7
 8010ab4:	d9ef      	bls.n	8010a96 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	8b1b      	ldrh	r3, [r3, #24]
 8010aba:	2b08      	cmp	r3, #8
 8010abc:	d902      	bls.n	8010ac4 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	2208      	movs	r2, #8
 8010ac2:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8010af0 <USBH_HID_MouseInit+0x90>)
 8010ac8:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	f103 0008 	add.w	r0, r3, #8
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010ad6:	2250      	movs	r2, #80	@ 0x50
 8010ad8:	4619      	mov	r1, r3
 8010ada:	f7ff fde0 	bl	801069e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 8010ade:	2300      	movs	r3, #0
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3710      	adds	r7, #16
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	200012f4 	.word	0x200012f4
 8010aec:	200012fc 	.word	0x200012fc
 8010af0:	20001304 	.word	0x20001304

08010af4 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b089      	sub	sp, #36	@ 0x24
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	460b      	mov	r3, r1
 8010afe:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8010b00:	2300      	movs	r3, #0
 8010b02:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8010b04:	2300      	movs	r3, #0
 8010b06:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	7a1b      	ldrb	r3, [r3, #8]
 8010b12:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	7a5b      	ldrb	r3, [r3, #9]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d01a      	beq.n	8010b52 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	7a5b      	ldrb	r3, [r3, #9]
 8010b20:	78fa      	ldrb	r2, [r7, #3]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d301      	bcc.n	8010b2a <HID_ReadItem+0x36>
    {
      return (0U);
 8010b26:	2300      	movs	r3, #0
 8010b28:	e078      	b.n	8010c1c <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8010b2a:	78fb      	ldrb	r3, [r7, #3]
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	6852      	ldr	r2, [r2, #4]
 8010b30:	fb02 f303 	mul.w	r3, r2, r3
 8010b34:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8010b36:	7cfb      	ldrb	r3, [r7, #19]
 8010b38:	68fa      	ldr	r2, [r7, #12]
 8010b3a:	4413      	add	r3, r2
 8010b3c:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	08db      	lsrs	r3, r3, #3
 8010b42:	697a      	ldr	r2, [r7, #20]
 8010b44:	4413      	add	r3, r2
 8010b46:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	f003 0307 	and.w	r3, r3, #7
 8010b50:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8010b52:	2300      	movs	r3, #0
 8010b54:	61bb      	str	r3, [r7, #24]
 8010b56:	e00a      	b.n	8010b6e <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	00db      	lsls	r3, r3, #3
 8010b62:	fa02 f303 	lsl.w	r3, r2, r3
 8010b66:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	3301      	adds	r3, #1
 8010b6c:	61bb      	str	r3, [r7, #24]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	f003 0307 	and.w	r3, r3, #7
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d004      	beq.n	8010b84 <HID_ReadItem+0x90>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	08db      	lsrs	r3, r3, #3
 8010b80:	3301      	adds	r3, #1
 8010b82:	e002      	b.n	8010b8a <HID_ReadItem+0x96>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	08db      	lsrs	r3, r3, #3
 8010b8a:	69ba      	ldr	r2, [r7, #24]
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d8e3      	bhi.n	8010b58 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8010b90:	7cfb      	ldrb	r3, [r7, #19]
 8010b92:	69fa      	ldr	r2, [r7, #28]
 8010b94:	40da      	lsrs	r2, r3
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	685b      	ldr	r3, [r3, #4]
 8010b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8010b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8010ba2:	43db      	mvns	r3, r3
 8010ba4:	4013      	ands	r3, r2
 8010ba6:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	69fa      	ldr	r2, [r7, #28]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d304      	bcc.n	8010bbc <HID_ReadItem+0xc8>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	691b      	ldr	r3, [r3, #16]
 8010bb6:	69fa      	ldr	r2, [r7, #28]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d901      	bls.n	8010bc0 <HID_ReadItem+0xcc>
  {
    return (0U);
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	e02d      	b.n	8010c1c <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	7a9b      	ldrb	r3, [r3, #10]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d01e      	beq.n	8010c06 <HID_ReadItem+0x112>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	3b01      	subs	r3, #1
 8010bce:	69fa      	ldr	r2, [r7, #28]
 8010bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d014      	beq.n	8010c06 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	2201      	movs	r2, #1
 8010be2:	fa02 f303 	lsl.w	r3, r2, r3
 8010be6:	425b      	negs	r3, r3
 8010be8:	69fa      	ldr	r2, [r7, #28]
 8010bea:	4313      	orrs	r3, r2
 8010bec:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	69db      	ldr	r3, [r3, #28]
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	d101      	bne.n	8010bfa <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	e010      	b.n	8010c1c <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	69db      	ldr	r3, [r3, #28]
 8010bfe:	68ba      	ldr	r2, [r7, #8]
 8010c00:	fb02 f303 	mul.w	r3, r2, r3
 8010c04:	e00a      	b.n	8010c1c <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	69db      	ldr	r3, [r3, #28]
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	d101      	bne.n	8010c12 <HID_ReadItem+0x11e>
    {
      return (val);
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	e004      	b.n	8010c1c <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	69db      	ldr	r3, [r3, #28]
 8010c16:	69fa      	ldr	r2, [r7, #28]
 8010c18:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3724      	adds	r7, #36	@ 0x24
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr

08010c28 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	4613      	mov	r3, r2
 8010c34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d101      	bne.n	8010c40 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010c3c:	2302      	movs	r3, #2
 8010c3e:	e029      	b.n	8010c94 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	79fa      	ldrb	r2, [r7, #7]
 8010c44:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2200      	movs	r2, #0
 8010c54:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	f000 f81f 	bl	8010c9c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	2200      	movs	r2, #0
 8010c62:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2200      	movs	r2, #0
 8010c72:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d003      	beq.n	8010c8c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f001 fd91 	bl	80127b4 <USBH_LL_Init>

  return USBH_OK;
 8010c92:	2300      	movs	r3, #0
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3710      	adds	r7, #16
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010ca8:	2300      	movs	r3, #0
 8010caa:	60fb      	str	r3, [r7, #12]
 8010cac:	e009      	b.n	8010cc2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	33e0      	adds	r3, #224	@ 0xe0
 8010cb4:	009b      	lsls	r3, r3, #2
 8010cb6:	4413      	add	r3, r2
 8010cb8:	2200      	movs	r2, #0
 8010cba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	60fb      	str	r3, [r7, #12]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2b0f      	cmp	r3, #15
 8010cc6:	d9f2      	bls.n	8010cae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010cc8:	2300      	movs	r3, #0
 8010cca:	60fb      	str	r3, [r7, #12]
 8010ccc:	e009      	b.n	8010ce2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010cd8:	2200      	movs	r2, #0
 8010cda:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	60fb      	str	r3, [r7, #12]
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ce8:	d3f1      	bcc.n	8010cce <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2200      	movs	r2, #0
 8010cee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2201      	movs	r2, #1
 8010d08:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2240      	movs	r2, #64	@ 0x40
 8010d0e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2200      	movs	r2, #0
 8010d14:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2201      	movs	r2, #1
 8010d22:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2200      	movs	r2, #0
 8010d2a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2200      	movs	r2, #0
 8010d32:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	331c      	adds	r3, #28
 8010d3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d3e:	2100      	movs	r1, #0
 8010d40:	4618      	mov	r0, r3
 8010d42:	f005 f9d2 	bl	80160ea <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d50:	2100      	movs	r1, #0
 8010d52:	4618      	mov	r0, r3
 8010d54:	f005 f9c9 	bl	80160ea <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010d5e:	2212      	movs	r2, #18
 8010d60:	2100      	movs	r1, #0
 8010d62:	4618      	mov	r0, r3
 8010d64:	f005 f9c1 	bl	80160ea <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010d6e:	223e      	movs	r2, #62	@ 0x3e
 8010d70:	2100      	movs	r1, #0
 8010d72:	4618      	mov	r0, r3
 8010d74:	f005 f9b9 	bl	80160ea <memset>

  return USBH_OK;
 8010d78:	2300      	movs	r3, #0
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010d82:	b480      	push	{r7}
 8010d84:	b085      	sub	sp, #20
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
 8010d8a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d016      	beq.n	8010dc4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d10e      	bne.n	8010dbe <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010da6:	1c59      	adds	r1, r3, #1
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	33de      	adds	r3, #222	@ 0xde
 8010db2:	6839      	ldr	r1, [r7, #0]
 8010db4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010db8:	2300      	movs	r3, #0
 8010dba:	73fb      	strb	r3, [r7, #15]
 8010dbc:	e004      	b.n	8010dc8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010dbe:	2302      	movs	r3, #2
 8010dc0:	73fb      	strb	r3, [r7, #15]
 8010dc2:	e001      	b.n	8010dc8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010dc4:	2302      	movs	r3, #2
 8010dc6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3714      	adds	r7, #20
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd4:	4770      	bx	lr

08010dd6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010dd6:	b480      	push	{r7}
 8010dd8:	b085      	sub	sp, #20
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]
 8010dde:	460b      	mov	r3, r1
 8010de0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010de2:	2300      	movs	r3, #0
 8010de4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8010dec:	78fa      	ldrb	r2, [r7, #3]
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d204      	bcs.n	8010dfc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	78fa      	ldrb	r2, [r7, #3]
 8010df6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8010dfa:	e001      	b.n	8010e00 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010dfc:	2302      	movs	r3, #2
 8010dfe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3714      	adds	r7, #20
 8010e06:	46bd      	mov	sp, r7
 8010e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0c:	4770      	bx	lr

08010e0e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010e0e:	b480      	push	{r7}
 8010e10:	b087      	sub	sp, #28
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
 8010e16:	4608      	mov	r0, r1
 8010e18:	4611      	mov	r1, r2
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	70fb      	strb	r3, [r7, #3]
 8010e20:	460b      	mov	r3, r1
 8010e22:	70bb      	strb	r3, [r7, #2]
 8010e24:	4613      	mov	r3, r2
 8010e26:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010e36:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010e38:	e025      	b.n	8010e86 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010e3a:	7dfb      	ldrb	r3, [r7, #23]
 8010e3c:	221a      	movs	r2, #26
 8010e3e:	fb02 f303 	mul.w	r3, r2, r3
 8010e42:	3308      	adds	r3, #8
 8010e44:	68fa      	ldr	r2, [r7, #12]
 8010e46:	4413      	add	r3, r2
 8010e48:	3302      	adds	r3, #2
 8010e4a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010e4c:	693b      	ldr	r3, [r7, #16]
 8010e4e:	795b      	ldrb	r3, [r3, #5]
 8010e50:	78fa      	ldrb	r2, [r7, #3]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d002      	beq.n	8010e5c <USBH_FindInterface+0x4e>
 8010e56:	78fb      	ldrb	r3, [r7, #3]
 8010e58:	2bff      	cmp	r3, #255	@ 0xff
 8010e5a:	d111      	bne.n	8010e80 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010e60:	78ba      	ldrb	r2, [r7, #2]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d002      	beq.n	8010e6c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010e66:	78bb      	ldrb	r3, [r7, #2]
 8010e68:	2bff      	cmp	r3, #255	@ 0xff
 8010e6a:	d109      	bne.n	8010e80 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010e70:	787a      	ldrb	r2, [r7, #1]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d002      	beq.n	8010e7c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010e76:	787b      	ldrb	r3, [r7, #1]
 8010e78:	2bff      	cmp	r3, #255	@ 0xff
 8010e7a:	d101      	bne.n	8010e80 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010e7c:	7dfb      	ldrb	r3, [r7, #23]
 8010e7e:	e006      	b.n	8010e8e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010e80:	7dfb      	ldrb	r3, [r7, #23]
 8010e82:	3301      	adds	r3, #1
 8010e84:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010e86:	7dfb      	ldrb	r3, [r7, #23]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d9d6      	bls.n	8010e3a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010e8c:	23ff      	movs	r3, #255	@ 0xff
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	371c      	adds	r7, #28
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr

08010e9a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8010e9a:	b580      	push	{r7, lr}
 8010e9c:	b082      	sub	sp, #8
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f001 fcc2 	bl	801282c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8010ea8:	2101      	movs	r1, #1
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f001 fddb 	bl	8012a66 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010eb0:	2300      	movs	r3, #0
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3708      	adds	r7, #8
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
	...

08010ebc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b088      	sub	sp, #32
 8010ec0:	af04      	add	r7, sp, #16
 8010ec2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8010ec4:	2302      	movs	r3, #2
 8010ec6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8010ed2:	b2db      	uxtb	r3, r3
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d102      	bne.n	8010ede <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2203      	movs	r2, #3
 8010edc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	b2db      	uxtb	r3, r3
 8010ee4:	2b0b      	cmp	r3, #11
 8010ee6:	f200 81bb 	bhi.w	8011260 <USBH_Process+0x3a4>
 8010eea:	a201      	add	r2, pc, #4	@ (adr r2, 8010ef0 <USBH_Process+0x34>)
 8010eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ef0:	08010f21 	.word	0x08010f21
 8010ef4:	08010f53 	.word	0x08010f53
 8010ef8:	08010fbb 	.word	0x08010fbb
 8010efc:	080111fb 	.word	0x080111fb
 8010f00:	08011261 	.word	0x08011261
 8010f04:	0801105b 	.word	0x0801105b
 8010f08:	080111a1 	.word	0x080111a1
 8010f0c:	08011091 	.word	0x08011091
 8010f10:	080110b1 	.word	0x080110b1
 8010f14:	080110cf 	.word	0x080110cf
 8010f18:	08011113 	.word	0x08011113
 8010f1c:	080111e3 	.word	0x080111e3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	f000 819b 	beq.w	8011264 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2201      	movs	r2, #1
 8010f32:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8010f34:	20c8      	movs	r0, #200	@ 0xc8
 8010f36:	f001 fde0 	bl	8012afa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f001 fcd3 	bl	80128e6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2200      	movs	r2, #0
 8010f44:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010f50:	e188      	b.n	8011264 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d107      	bne.n	8010f6c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2202      	movs	r2, #2
 8010f68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010f6a:	e18a      	b.n	8011282 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010f72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010f76:	d914      	bls.n	8010fa2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010f7e:	3301      	adds	r3, #1
 8010f80:	b2da      	uxtb	r2, r3
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010f8e:	2b03      	cmp	r3, #3
 8010f90:	d903      	bls.n	8010f9a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	220d      	movs	r2, #13
 8010f96:	701a      	strb	r2, [r3, #0]
      break;
 8010f98:	e173      	b.n	8011282 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	701a      	strb	r2, [r3, #0]
      break;
 8010fa0:	e16f      	b.n	8011282 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010fa8:	f103 020a 	add.w	r2, r3, #10
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8010fb2:	200a      	movs	r0, #10
 8010fb4:	f001 fda1 	bl	8012afa <USBH_Delay>
      break;
 8010fb8:	e163      	b.n	8011282 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d005      	beq.n	8010fd0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010fca:	2104      	movs	r1, #4
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8010fd0:	2064      	movs	r0, #100	@ 0x64
 8010fd2:	f001 fd92 	bl	8012afa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f001 fc5e 	bl	8012898 <USBH_LL_GetSpeed>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	461a      	mov	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2205      	movs	r2, #5
 8010fea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8010fec:	2100      	movs	r1, #0
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f001 fa77 	bl	80124e2 <USBH_AllocPipe>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8010ffc:	2180      	movs	r1, #128	@ 0x80
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f001 fa6f 	bl	80124e2 <USBH_AllocPipe>
 8011004:	4603      	mov	r3, r0
 8011006:	461a      	mov	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	7919      	ldrb	r1, [r3, #4]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801101c:	687a      	ldr	r2, [r7, #4]
 801101e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8011020:	9202      	str	r2, [sp, #8]
 8011022:	2200      	movs	r2, #0
 8011024:	9201      	str	r2, [sp, #4]
 8011026:	9300      	str	r3, [sp, #0]
 8011028:	4603      	mov	r3, r0
 801102a:	2280      	movs	r2, #128	@ 0x80
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f001 fa29 	bl	8012484 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	7959      	ldrb	r1, [r3, #5]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8011042:	687a      	ldr	r2, [r7, #4]
 8011044:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8011046:	9202      	str	r2, [sp, #8]
 8011048:	2200      	movs	r2, #0
 801104a:	9201      	str	r2, [sp, #4]
 801104c:	9300      	str	r3, [sp, #0]
 801104e:	4603      	mov	r3, r0
 8011050:	2200      	movs	r2, #0
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f001 fa16 	bl	8012484 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011058:	e113      	b.n	8011282 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f000 f916 	bl	801128c <USBH_HandleEnum>
 8011060:	4603      	mov	r3, r0
 8011062:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8011064:	7bbb      	ldrb	r3, [r7, #14]
 8011066:	b2db      	uxtb	r3, r3
 8011068:	2b00      	cmp	r3, #0
 801106a:	f040 80fd 	bne.w	8011268 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 801107c:	2b01      	cmp	r3, #1
 801107e:	d103      	bne.n	8011088 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2208      	movs	r2, #8
 8011084:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011086:	e0ef      	b.n	8011268 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2207      	movs	r2, #7
 801108c:	701a      	strb	r2, [r3, #0]
      break;
 801108e:	e0eb      	b.n	8011268 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011096:	2b00      	cmp	r3, #0
 8011098:	f000 80e8 	beq.w	801126c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80110a2:	2101      	movs	r1, #1
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2208      	movs	r2, #8
 80110ac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80110ae:	e0dd      	b.n	801126c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80110b6:	4619      	mov	r1, r3
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 fc3a 	bl	8011932 <USBH_SetCfg>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f040 80d5 	bne.w	8011270 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2209      	movs	r2, #9
 80110ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80110cc:	e0d0      	b.n	8011270 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80110d4:	f003 0320 	and.w	r3, r3, #32
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d016      	beq.n	801110a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80110dc:	2101      	movs	r1, #1
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 fc4a 	bl	8011978 <USBH_SetFeature>
 80110e4:	4603      	mov	r3, r0
 80110e6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80110e8:	7bbb      	ldrb	r3, [r7, #14]
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d103      	bne.n	80110f8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	220a      	movs	r2, #10
 80110f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80110f6:	e0bd      	b.n	8011274 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80110f8:	7bbb      	ldrb	r3, [r7, #14]
 80110fa:	b2db      	uxtb	r3, r3
 80110fc:	2b03      	cmp	r3, #3
 80110fe:	f040 80b9 	bne.w	8011274 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	220a      	movs	r2, #10
 8011106:	701a      	strb	r2, [r3, #0]
      break;
 8011108:	e0b4      	b.n	8011274 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	220a      	movs	r2, #10
 801110e:	701a      	strb	r2, [r3, #0]
      break;
 8011110:	e0b0      	b.n	8011274 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8011118:	2b00      	cmp	r3, #0
 801111a:	f000 80ad 	beq.w	8011278 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2200      	movs	r2, #0
 8011122:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8011126:	2300      	movs	r3, #0
 8011128:	73fb      	strb	r3, [r7, #15]
 801112a:	e016      	b.n	801115a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801112c:	7bfa      	ldrb	r2, [r7, #15]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	32de      	adds	r2, #222	@ 0xde
 8011132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011136:	791a      	ldrb	r2, [r3, #4]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 801113e:	429a      	cmp	r2, r3
 8011140:	d108      	bne.n	8011154 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8011142:	7bfa      	ldrb	r2, [r7, #15]
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	32de      	adds	r2, #222	@ 0xde
 8011148:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8011152:	e005      	b.n	8011160 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8011154:	7bfb      	ldrb	r3, [r7, #15]
 8011156:	3301      	adds	r3, #1
 8011158:	73fb      	strb	r3, [r7, #15]
 801115a:	7bfb      	ldrb	r3, [r7, #15]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d0e5      	beq.n	801112c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011166:	2b00      	cmp	r3, #0
 8011168:	d016      	beq.n	8011198 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	4798      	blx	r3
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d109      	bne.n	8011190 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2206      	movs	r2, #6
 8011180:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011188:	2103      	movs	r1, #3
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801118e:	e073      	b.n	8011278 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	220d      	movs	r2, #13
 8011194:	701a      	strb	r2, [r3, #0]
      break;
 8011196:	e06f      	b.n	8011278 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	220d      	movs	r2, #13
 801119c:	701a      	strb	r2, [r3, #0]
      break;
 801119e:	e06b      	b.n	8011278 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d017      	beq.n	80111da <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80111b0:	691b      	ldr	r3, [r3, #16]
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	4798      	blx	r3
 80111b6:	4603      	mov	r3, r0
 80111b8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80111ba:	7bbb      	ldrb	r3, [r7, #14]
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d103      	bne.n	80111ca <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	220b      	movs	r2, #11
 80111c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80111c8:	e058      	b.n	801127c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80111ca:	7bbb      	ldrb	r3, [r7, #14]
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	2b02      	cmp	r3, #2
 80111d0:	d154      	bne.n	801127c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	220d      	movs	r2, #13
 80111d6:	701a      	strb	r2, [r3, #0]
      break;
 80111d8:	e050      	b.n	801127c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	220d      	movs	r2, #13
 80111de:	701a      	strb	r2, [r3, #0]
      break;
 80111e0:	e04c      	b.n	801127c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d049      	beq.n	8011280 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80111f2:	695b      	ldr	r3, [r3, #20]
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	4798      	blx	r3
      }
      break;
 80111f8:	e042      	b.n	8011280 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2200      	movs	r2, #0
 80111fe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7ff fd4a 	bl	8010c9c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801120e:	2b00      	cmp	r3, #0
 8011210:	d009      	beq.n	8011226 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011218:	68db      	ldr	r3, [r3, #12]
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2200      	movs	r2, #0
 8011222:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801122c:	2b00      	cmp	r3, #0
 801122e:	d005      	beq.n	801123c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011236:	2105      	movs	r1, #5
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8011242:	b2db      	uxtb	r3, r3
 8011244:	2b01      	cmp	r3, #1
 8011246:	d107      	bne.n	8011258 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2200      	movs	r2, #0
 801124c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f7ff fe22 	bl	8010e9a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011256:	e014      	b.n	8011282 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f001 fae7 	bl	801282c <USBH_LL_Start>
      break;
 801125e:	e010      	b.n	8011282 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8011260:	bf00      	nop
 8011262:	e00e      	b.n	8011282 <USBH_Process+0x3c6>
      break;
 8011264:	bf00      	nop
 8011266:	e00c      	b.n	8011282 <USBH_Process+0x3c6>
      break;
 8011268:	bf00      	nop
 801126a:	e00a      	b.n	8011282 <USBH_Process+0x3c6>
    break;
 801126c:	bf00      	nop
 801126e:	e008      	b.n	8011282 <USBH_Process+0x3c6>
      break;
 8011270:	bf00      	nop
 8011272:	e006      	b.n	8011282 <USBH_Process+0x3c6>
      break;
 8011274:	bf00      	nop
 8011276:	e004      	b.n	8011282 <USBH_Process+0x3c6>
      break;
 8011278:	bf00      	nop
 801127a:	e002      	b.n	8011282 <USBH_Process+0x3c6>
      break;
 801127c:	bf00      	nop
 801127e:	e000      	b.n	8011282 <USBH_Process+0x3c6>
      break;
 8011280:	bf00      	nop
  }
  return USBH_OK;
 8011282:	2300      	movs	r3, #0
}
 8011284:	4618      	mov	r0, r3
 8011286:	3710      	adds	r7, #16
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b088      	sub	sp, #32
 8011290:	af04      	add	r7, sp, #16
 8011292:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8011294:	2301      	movs	r3, #1
 8011296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8011298:	2301      	movs	r3, #1
 801129a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	785b      	ldrb	r3, [r3, #1]
 80112a0:	2b07      	cmp	r3, #7
 80112a2:	f200 81bd 	bhi.w	8011620 <USBH_HandleEnum+0x394>
 80112a6:	a201      	add	r2, pc, #4	@ (adr r2, 80112ac <USBH_HandleEnum+0x20>)
 80112a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ac:	080112cd 	.word	0x080112cd
 80112b0:	08011387 	.word	0x08011387
 80112b4:	080113f1 	.word	0x080113f1
 80112b8:	0801147b 	.word	0x0801147b
 80112bc:	080114e5 	.word	0x080114e5
 80112c0:	08011555 	.word	0x08011555
 80112c4:	0801159b 	.word	0x0801159b
 80112c8:	080115e1 	.word	0x080115e1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80112cc:	2108      	movs	r1, #8
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f000 fa4c 	bl	801176c <USBH_Get_DevDesc>
 80112d4:	4603      	mov	r3, r0
 80112d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80112d8:	7bbb      	ldrb	r3, [r7, #14]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d12e      	bne.n	801133c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2201      	movs	r2, #1
 80112ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	7919      	ldrb	r1, [r3, #4]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8011302:	9202      	str	r2, [sp, #8]
 8011304:	2200      	movs	r2, #0
 8011306:	9201      	str	r2, [sp, #4]
 8011308:	9300      	str	r3, [sp, #0]
 801130a:	4603      	mov	r3, r0
 801130c:	2280      	movs	r2, #128	@ 0x80
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f001 f8b8 	bl	8012484 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	7959      	ldrb	r1, [r3, #5]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011324:	687a      	ldr	r2, [r7, #4]
 8011326:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011328:	9202      	str	r2, [sp, #8]
 801132a:	2200      	movs	r2, #0
 801132c:	9201      	str	r2, [sp, #4]
 801132e:	9300      	str	r3, [sp, #0]
 8011330:	4603      	mov	r3, r0
 8011332:	2200      	movs	r2, #0
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f001 f8a5 	bl	8012484 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801133a:	e173      	b.n	8011624 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801133c:	7bbb      	ldrb	r3, [r7, #14]
 801133e:	2b03      	cmp	r3, #3
 8011340:	f040 8170 	bne.w	8011624 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801134a:	3301      	adds	r3, #1
 801134c:	b2da      	uxtb	r2, r3
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801135a:	2b03      	cmp	r3, #3
 801135c:	d903      	bls.n	8011366 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	220d      	movs	r2, #13
 8011362:	701a      	strb	r2, [r3, #0]
      break;
 8011364:	e15e      	b.n	8011624 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	795b      	ldrb	r3, [r3, #5]
 801136a:	4619      	mov	r1, r3
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f001 f8d9 	bl	8012524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	791b      	ldrb	r3, [r3, #4]
 8011376:	4619      	mov	r1, r3
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f001 f8d3 	bl	8012524 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2200      	movs	r2, #0
 8011382:	701a      	strb	r2, [r3, #0]
      break;
 8011384:	e14e      	b.n	8011624 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8011386:	2112      	movs	r1, #18
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f000 f9ef 	bl	801176c <USBH_Get_DevDesc>
 801138e:	4603      	mov	r3, r0
 8011390:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011392:	7bbb      	ldrb	r3, [r7, #14]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d103      	bne.n	80113a0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2202      	movs	r2, #2
 801139c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801139e:	e143      	b.n	8011628 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80113a0:	7bbb      	ldrb	r3, [r7, #14]
 80113a2:	2b03      	cmp	r3, #3
 80113a4:	f040 8140 	bne.w	8011628 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80113ae:	3301      	adds	r3, #1
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d903      	bls.n	80113ca <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	220d      	movs	r2, #13
 80113c6:	701a      	strb	r2, [r3, #0]
      break;
 80113c8:	e12e      	b.n	8011628 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	795b      	ldrb	r3, [r3, #5]
 80113ce:	4619      	mov	r1, r3
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f001 f8a7 	bl	8012524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	791b      	ldrb	r3, [r3, #4]
 80113da:	4619      	mov	r1, r3
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f001 f8a1 	bl	8012524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2200      	movs	r2, #0
 80113e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2200      	movs	r2, #0
 80113ec:	701a      	strb	r2, [r3, #0]
      break;
 80113ee:	e11b      	b.n	8011628 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80113f0:	2101      	movs	r1, #1
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f000 fa79 	bl	80118ea <USBH_SetAddress>
 80113f8:	4603      	mov	r3, r0
 80113fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80113fc:	7bbb      	ldrb	r3, [r7, #14]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d130      	bne.n	8011464 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8011402:	2002      	movs	r0, #2
 8011404:	f001 fb79 	bl	8012afa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2201      	movs	r2, #1
 801140c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2203      	movs	r2, #3
 8011414:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	7919      	ldrb	r1, [r3, #4]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801142a:	9202      	str	r2, [sp, #8]
 801142c:	2200      	movs	r2, #0
 801142e:	9201      	str	r2, [sp, #4]
 8011430:	9300      	str	r3, [sp, #0]
 8011432:	4603      	mov	r3, r0
 8011434:	2280      	movs	r2, #128	@ 0x80
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f001 f824 	bl	8012484 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	7959      	ldrb	r1, [r3, #5]
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011450:	9202      	str	r2, [sp, #8]
 8011452:	2200      	movs	r2, #0
 8011454:	9201      	str	r2, [sp, #4]
 8011456:	9300      	str	r3, [sp, #0]
 8011458:	4603      	mov	r3, r0
 801145a:	2200      	movs	r2, #0
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f001 f811 	bl	8012484 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8011462:	e0e3      	b.n	801162c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011464:	7bbb      	ldrb	r3, [r7, #14]
 8011466:	2b03      	cmp	r3, #3
 8011468:	f040 80e0 	bne.w	801162c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	220d      	movs	r2, #13
 8011470:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2200      	movs	r2, #0
 8011476:	705a      	strb	r2, [r3, #1]
      break;
 8011478:	e0d8      	b.n	801162c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801147a:	2109      	movs	r1, #9
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f000 f9a1 	bl	80117c4 <USBH_Get_CfgDesc>
 8011482:	4603      	mov	r3, r0
 8011484:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011486:	7bbb      	ldrb	r3, [r7, #14]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d103      	bne.n	8011494 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2204      	movs	r2, #4
 8011490:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011492:	e0cd      	b.n	8011630 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011494:	7bbb      	ldrb	r3, [r7, #14]
 8011496:	2b03      	cmp	r3, #3
 8011498:	f040 80ca 	bne.w	8011630 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80114a2:	3301      	adds	r3, #1
 80114a4:	b2da      	uxtb	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80114b2:	2b03      	cmp	r3, #3
 80114b4:	d903      	bls.n	80114be <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	220d      	movs	r2, #13
 80114ba:	701a      	strb	r2, [r3, #0]
      break;
 80114bc:	e0b8      	b.n	8011630 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	795b      	ldrb	r3, [r3, #5]
 80114c2:	4619      	mov	r1, r3
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f001 f82d 	bl	8012524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	791b      	ldrb	r3, [r3, #4]
 80114ce:	4619      	mov	r1, r3
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f001 f827 	bl	8012524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2200      	movs	r2, #0
 80114da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2200      	movs	r2, #0
 80114e0:	701a      	strb	r2, [r3, #0]
      break;
 80114e2:	e0a5      	b.n	8011630 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80114ea:	4619      	mov	r1, r3
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 f969 	bl	80117c4 <USBH_Get_CfgDesc>
 80114f2:	4603      	mov	r3, r0
 80114f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80114f6:	7bbb      	ldrb	r3, [r7, #14]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d103      	bne.n	8011504 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2205      	movs	r2, #5
 8011500:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011502:	e097      	b.n	8011634 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011504:	7bbb      	ldrb	r3, [r7, #14]
 8011506:	2b03      	cmp	r3, #3
 8011508:	f040 8094 	bne.w	8011634 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011512:	3301      	adds	r3, #1
 8011514:	b2da      	uxtb	r2, r3
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011522:	2b03      	cmp	r3, #3
 8011524:	d903      	bls.n	801152e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	220d      	movs	r2, #13
 801152a:	701a      	strb	r2, [r3, #0]
      break;
 801152c:	e082      	b.n	8011634 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	795b      	ldrb	r3, [r3, #5]
 8011532:	4619      	mov	r1, r3
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f000 fff5 	bl	8012524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	791b      	ldrb	r3, [r3, #4]
 801153e:	4619      	mov	r1, r3
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f000 ffef 	bl	8012524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2200      	movs	r2, #0
 801154a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2200      	movs	r2, #0
 8011550:	701a      	strb	r2, [r3, #0]
      break;
 8011552:	e06f      	b.n	8011634 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 801155a:	2b00      	cmp	r3, #0
 801155c:	d019      	beq.n	8011592 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801156a:	23ff      	movs	r3, #255	@ 0xff
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f000 f953 	bl	8011818 <USBH_Get_StringDesc>
 8011572:	4603      	mov	r3, r0
 8011574:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011576:	7bbb      	ldrb	r3, [r7, #14]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d103      	bne.n	8011584 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2206      	movs	r2, #6
 8011580:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011582:	e059      	b.n	8011638 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011584:	7bbb      	ldrb	r3, [r7, #14]
 8011586:	2b03      	cmp	r3, #3
 8011588:	d156      	bne.n	8011638 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2206      	movs	r2, #6
 801158e:	705a      	strb	r2, [r3, #1]
      break;
 8011590:	e052      	b.n	8011638 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2206      	movs	r2, #6
 8011596:	705a      	strb	r2, [r3, #1]
      break;
 8011598:	e04e      	b.n	8011638 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d019      	beq.n	80115d8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80115b0:	23ff      	movs	r3, #255	@ 0xff
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f000 f930 	bl	8011818 <USBH_Get_StringDesc>
 80115b8:	4603      	mov	r3, r0
 80115ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80115bc:	7bbb      	ldrb	r3, [r7, #14]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d103      	bne.n	80115ca <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2207      	movs	r2, #7
 80115c6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80115c8:	e038      	b.n	801163c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80115ca:	7bbb      	ldrb	r3, [r7, #14]
 80115cc:	2b03      	cmp	r3, #3
 80115ce:	d135      	bne.n	801163c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2207      	movs	r2, #7
 80115d4:	705a      	strb	r2, [r3, #1]
      break;
 80115d6:	e031      	b.n	801163c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2207      	movs	r2, #7
 80115dc:	705a      	strb	r2, [r3, #1]
      break;
 80115de:	e02d      	b.n	801163c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d017      	beq.n	801161a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80115f6:	23ff      	movs	r3, #255	@ 0xff
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 f90d 	bl	8011818 <USBH_Get_StringDesc>
 80115fe:	4603      	mov	r3, r0
 8011600:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011602:	7bbb      	ldrb	r3, [r7, #14]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d102      	bne.n	801160e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8011608:	2300      	movs	r3, #0
 801160a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801160c:	e018      	b.n	8011640 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801160e:	7bbb      	ldrb	r3, [r7, #14]
 8011610:	2b03      	cmp	r3, #3
 8011612:	d115      	bne.n	8011640 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8011614:	2300      	movs	r3, #0
 8011616:	73fb      	strb	r3, [r7, #15]
      break;
 8011618:	e012      	b.n	8011640 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 801161a:	2300      	movs	r3, #0
 801161c:	73fb      	strb	r3, [r7, #15]
      break;
 801161e:	e00f      	b.n	8011640 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8011620:	bf00      	nop
 8011622:	e00e      	b.n	8011642 <USBH_HandleEnum+0x3b6>
      break;
 8011624:	bf00      	nop
 8011626:	e00c      	b.n	8011642 <USBH_HandleEnum+0x3b6>
      break;
 8011628:	bf00      	nop
 801162a:	e00a      	b.n	8011642 <USBH_HandleEnum+0x3b6>
      break;
 801162c:	bf00      	nop
 801162e:	e008      	b.n	8011642 <USBH_HandleEnum+0x3b6>
      break;
 8011630:	bf00      	nop
 8011632:	e006      	b.n	8011642 <USBH_HandleEnum+0x3b6>
      break;
 8011634:	bf00      	nop
 8011636:	e004      	b.n	8011642 <USBH_HandleEnum+0x3b6>
      break;
 8011638:	bf00      	nop
 801163a:	e002      	b.n	8011642 <USBH_HandleEnum+0x3b6>
      break;
 801163c:	bf00      	nop
 801163e:	e000      	b.n	8011642 <USBH_HandleEnum+0x3b6>
      break;
 8011640:	bf00      	nop
  }
  return Status;
 8011642:	7bfb      	ldrb	r3, [r7, #15]
}
 8011644:	4618      	mov	r0, r3
 8011646:	3710      	adds	r7, #16
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	683a      	ldr	r2, [r7, #0]
 801165a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 801165e:	bf00      	nop
 8011660:	370c      	adds	r7, #12
 8011662:	46bd      	mov	sp, r7
 8011664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011668:	4770      	bx	lr

0801166a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801166a:	b580      	push	{r7, lr}
 801166c:	b082      	sub	sp, #8
 801166e:	af00      	add	r7, sp, #0
 8011670:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011678:	1c5a      	adds	r2, r3, #1
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f000 f804 	bl	801168e <USBH_HandleSof>
}
 8011686:	bf00      	nop
 8011688:	3708      	adds	r7, #8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}

0801168e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801168e:	b580      	push	{r7, lr}
 8011690:	b082      	sub	sp, #8
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	b2db      	uxtb	r3, r3
 801169c:	2b0b      	cmp	r3, #11
 801169e:	d10a      	bne.n	80116b6 <USBH_HandleSof+0x28>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d005      	beq.n	80116b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80116b0:	699b      	ldr	r3, [r3, #24]
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	4798      	blx	r3
  }
}
 80116b6:	bf00      	nop
 80116b8:	3708      	adds	r7, #8
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}

080116be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80116be:	b480      	push	{r7}
 80116c0:	b083      	sub	sp, #12
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2201      	movs	r2, #1
 80116ca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80116ce:	bf00      	nop
}
 80116d0:	370c      	adds	r7, #12
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr

080116da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80116da:	b480      	push	{r7}
 80116dc:	b083      	sub	sp, #12
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2200      	movs	r2, #0
 80116e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80116ea:	bf00      	nop
}
 80116ec:	370c      	adds	r7, #12
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr

080116f6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80116f6:	b480      	push	{r7}
 80116f8:	b083      	sub	sp, #12
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2201      	movs	r2, #1
 8011702:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2200      	movs	r2, #0
 801170a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2200      	movs	r2, #0
 8011712:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8011716:	2300      	movs	r3, #0
}
 8011718:	4618      	mov	r0, r3
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr

08011724 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2201      	movs	r2, #1
 8011730:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2200      	movs	r2, #0
 8011738:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2200      	movs	r2, #0
 8011740:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f001 f88c 	bl	8012862 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	791b      	ldrb	r3, [r3, #4]
 801174e:	4619      	mov	r1, r3
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f000 fee7 	bl	8012524 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	795b      	ldrb	r3, [r3, #5]
 801175a:	4619      	mov	r1, r3
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 fee1 	bl	8012524 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8011762:	2300      	movs	r3, #0
}
 8011764:	4618      	mov	r0, r3
 8011766:	3708      	adds	r7, #8
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}

0801176c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b086      	sub	sp, #24
 8011770:	af02      	add	r7, sp, #8
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	460b      	mov	r3, r1
 8011776:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8011778:	887b      	ldrh	r3, [r7, #2]
 801177a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801177e:	d901      	bls.n	8011784 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8011780:	2303      	movs	r3, #3
 8011782:	e01b      	b.n	80117bc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801178a:	887b      	ldrh	r3, [r7, #2]
 801178c:	9300      	str	r3, [sp, #0]
 801178e:	4613      	mov	r3, r2
 8011790:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011794:	2100      	movs	r1, #0
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 f872 	bl	8011880 <USBH_GetDescriptor>
 801179c:	4603      	mov	r3, r0
 801179e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80117a0:	7bfb      	ldrb	r3, [r7, #15]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d109      	bne.n	80117ba <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80117ac:	887a      	ldrh	r2, [r7, #2]
 80117ae:	4619      	mov	r1, r3
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 f929 	bl	8011a08 <USBH_ParseDevDesc>
 80117b6:	4603      	mov	r3, r0
 80117b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80117ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b086      	sub	sp, #24
 80117c8:	af02      	add	r7, sp, #8
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	460b      	mov	r3, r1
 80117ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	331c      	adds	r3, #28
 80117d4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80117d6:	887b      	ldrh	r3, [r7, #2]
 80117d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117dc:	d901      	bls.n	80117e2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80117de:	2303      	movs	r3, #3
 80117e0:	e016      	b.n	8011810 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80117e2:	887b      	ldrh	r3, [r7, #2]
 80117e4:	9300      	str	r3, [sp, #0]
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80117ec:	2100      	movs	r1, #0
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 f846 	bl	8011880 <USBH_GetDescriptor>
 80117f4:	4603      	mov	r3, r0
 80117f6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80117f8:	7bfb      	ldrb	r3, [r7, #15]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d107      	bne.n	801180e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80117fe:	887b      	ldrh	r3, [r7, #2]
 8011800:	461a      	mov	r2, r3
 8011802:	68b9      	ldr	r1, [r7, #8]
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f000 f9af 	bl	8011b68 <USBH_ParseCfgDesc>
 801180a:	4603      	mov	r3, r0
 801180c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011810:	4618      	mov	r0, r3
 8011812:	3710      	adds	r7, #16
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b088      	sub	sp, #32
 801181c:	af02      	add	r7, sp, #8
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	607a      	str	r2, [r7, #4]
 8011822:	461a      	mov	r2, r3
 8011824:	460b      	mov	r3, r1
 8011826:	72fb      	strb	r3, [r7, #11]
 8011828:	4613      	mov	r3, r2
 801182a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 801182c:	893b      	ldrh	r3, [r7, #8]
 801182e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011832:	d802      	bhi.n	801183a <USBH_Get_StringDesc+0x22>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d101      	bne.n	801183e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801183a:	2303      	movs	r3, #3
 801183c:	e01c      	b.n	8011878 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 801183e:	7afb      	ldrb	r3, [r7, #11]
 8011840:	b29b      	uxth	r3, r3
 8011842:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8011846:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801184e:	893b      	ldrh	r3, [r7, #8]
 8011850:	9300      	str	r3, [sp, #0]
 8011852:	460b      	mov	r3, r1
 8011854:	2100      	movs	r1, #0
 8011856:	68f8      	ldr	r0, [r7, #12]
 8011858:	f000 f812 	bl	8011880 <USBH_GetDescriptor>
 801185c:	4603      	mov	r3, r0
 801185e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8011860:	7dfb      	ldrb	r3, [r7, #23]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d107      	bne.n	8011876 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801186c:	893a      	ldrh	r2, [r7, #8]
 801186e:	6879      	ldr	r1, [r7, #4]
 8011870:	4618      	mov	r0, r3
 8011872:	f000 fb8d 	bl	8011f90 <USBH_ParseStringDesc>
  }

  return status;
 8011876:	7dfb      	ldrb	r3, [r7, #23]
}
 8011878:	4618      	mov	r0, r3
 801187a:	3718      	adds	r7, #24
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}

08011880 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	607b      	str	r3, [r7, #4]
 801188a:	460b      	mov	r3, r1
 801188c:	72fb      	strb	r3, [r7, #11]
 801188e:	4613      	mov	r3, r2
 8011890:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	789b      	ldrb	r3, [r3, #2]
 8011896:	2b01      	cmp	r3, #1
 8011898:	d11c      	bne.n	80118d4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801189a:	7afb      	ldrb	r3, [r7, #11]
 801189c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80118a0:	b2da      	uxtb	r2, r3
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	2206      	movs	r2, #6
 80118aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	893a      	ldrh	r2, [r7, #8]
 80118b0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80118b2:	893b      	ldrh	r3, [r7, #8]
 80118b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80118b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80118bc:	d104      	bne.n	80118c8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f240 4209 	movw	r2, #1033	@ 0x409
 80118c4:	829a      	strh	r2, [r3, #20]
 80118c6:	e002      	b.n	80118ce <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2200      	movs	r2, #0
 80118cc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	8b3a      	ldrh	r2, [r7, #24]
 80118d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80118d4:	8b3b      	ldrh	r3, [r7, #24]
 80118d6:	461a      	mov	r2, r3
 80118d8:	6879      	ldr	r1, [r7, #4]
 80118da:	68f8      	ldr	r0, [r7, #12]
 80118dc:	f000 fba5 	bl	801202a <USBH_CtlReq>
 80118e0:	4603      	mov	r3, r0
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3710      	adds	r7, #16
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}

080118ea <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80118ea:	b580      	push	{r7, lr}
 80118ec:	b082      	sub	sp, #8
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
 80118f2:	460b      	mov	r3, r1
 80118f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	789b      	ldrb	r3, [r3, #2]
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d10f      	bne.n	801191e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2200      	movs	r2, #0
 8011902:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2205      	movs	r2, #5
 8011908:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801190a:	78fb      	ldrb	r3, [r7, #3]
 801190c:	b29a      	uxth	r2, r3
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2200      	movs	r2, #0
 8011916:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2200      	movs	r2, #0
 801191c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801191e:	2200      	movs	r2, #0
 8011920:	2100      	movs	r1, #0
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f000 fb81 	bl	801202a <USBH_CtlReq>
 8011928:	4603      	mov	r3, r0
}
 801192a:	4618      	mov	r0, r3
 801192c:	3708      	adds	r7, #8
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}

08011932 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011932:	b580      	push	{r7, lr}
 8011934:	b082      	sub	sp, #8
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
 801193a:	460b      	mov	r3, r1
 801193c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	789b      	ldrb	r3, [r3, #2]
 8011942:	2b01      	cmp	r3, #1
 8011944:	d10e      	bne.n	8011964 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2200      	movs	r2, #0
 801194a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2209      	movs	r2, #9
 8011950:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	887a      	ldrh	r2, [r7, #2]
 8011956:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2200      	movs	r2, #0
 8011962:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011964:	2200      	movs	r2, #0
 8011966:	2100      	movs	r1, #0
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f000 fb5e 	bl	801202a <USBH_CtlReq>
 801196e:	4603      	mov	r3, r0
}
 8011970:	4618      	mov	r0, r3
 8011972:	3708      	adds	r7, #8
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	789b      	ldrb	r3, [r3, #2]
 8011988:	2b01      	cmp	r3, #1
 801198a:	d10f      	bne.n	80119ac <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2200      	movs	r2, #0
 8011990:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2203      	movs	r2, #3
 8011996:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011998:	78fb      	ldrb	r3, [r7, #3]
 801199a:	b29a      	uxth	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2200      	movs	r2, #0
 80119a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80119ac:	2200      	movs	r2, #0
 80119ae:	2100      	movs	r1, #0
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f000 fb3a 	bl	801202a <USBH_CtlReq>
 80119b6:	4603      	mov	r3, r0
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3708      	adds	r7, #8
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	460b      	mov	r3, r1
 80119ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	789b      	ldrb	r3, [r3, #2]
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	d10f      	bne.n	80119f4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2202      	movs	r2, #2
 80119d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2201      	movs	r2, #1
 80119de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2200      	movs	r2, #0
 80119e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80119e6:	78fb      	ldrb	r3, [r7, #3]
 80119e8:	b29a      	uxth	r2, r3
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2200      	movs	r2, #0
 80119f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80119f4:	2200      	movs	r2, #0
 80119f6:	2100      	movs	r1, #0
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f000 fb16 	bl	801202a <USBH_CtlReq>
 80119fe:	4603      	mov	r3, r0
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3708      	adds	r7, #8
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b087      	sub	sp, #28
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	4613      	mov	r3, r2
 8011a14:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8011a1c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d101      	bne.n	8011a2c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8011a28:	2302      	movs	r3, #2
 8011a2a:	e094      	b.n	8011b56 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	781a      	ldrb	r2, [r3, #0]
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	785a      	ldrb	r2, [r3, #1]
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	3302      	adds	r3, #2
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	461a      	mov	r2, r3
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	3303      	adds	r3, #3
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	021b      	lsls	r3, r3, #8
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	4313      	orrs	r3, r2
 8011a50:	b29a      	uxth	r2, r3
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	791a      	ldrb	r2, [r3, #4]
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	795a      	ldrb	r2, [r3, #5]
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	799a      	ldrb	r2, [r3, #6]
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	79da      	ldrb	r2, [r3, #7]
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d004      	beq.n	8011a8a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d11b      	bne.n	8011ac2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	79db      	ldrb	r3, [r3, #7]
 8011a8e:	2b20      	cmp	r3, #32
 8011a90:	dc0f      	bgt.n	8011ab2 <USBH_ParseDevDesc+0xaa>
 8011a92:	2b08      	cmp	r3, #8
 8011a94:	db0f      	blt.n	8011ab6 <USBH_ParseDevDesc+0xae>
 8011a96:	3b08      	subs	r3, #8
 8011a98:	4a32      	ldr	r2, [pc, #200]	@ (8011b64 <USBH_ParseDevDesc+0x15c>)
 8011a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8011a9e:	f003 0301 	and.w	r3, r3, #1
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	bf14      	ite	ne
 8011aa6:	2301      	movne	r3, #1
 8011aa8:	2300      	moveq	r3, #0
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d106      	bne.n	8011abe <USBH_ParseDevDesc+0xb6>
 8011ab0:	e001      	b.n	8011ab6 <USBH_ParseDevDesc+0xae>
 8011ab2:	2b40      	cmp	r3, #64	@ 0x40
 8011ab4:	d003      	beq.n	8011abe <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	2208      	movs	r2, #8
 8011aba:	71da      	strb	r2, [r3, #7]
        break;
 8011abc:	e000      	b.n	8011ac0 <USBH_ParseDevDesc+0xb8>
        break;
 8011abe:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8011ac0:	e00e      	b.n	8011ae0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011ac8:	2b02      	cmp	r3, #2
 8011aca:	d107      	bne.n	8011adc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	79db      	ldrb	r3, [r3, #7]
 8011ad0:	2b08      	cmp	r3, #8
 8011ad2:	d005      	beq.n	8011ae0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	2208      	movs	r2, #8
 8011ad8:	71da      	strb	r2, [r3, #7]
 8011ada:	e001      	b.n	8011ae0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8011adc:	2303      	movs	r3, #3
 8011ade:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8011ae0:	88fb      	ldrh	r3, [r7, #6]
 8011ae2:	2b08      	cmp	r3, #8
 8011ae4:	d936      	bls.n	8011b54 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	3308      	adds	r3, #8
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	461a      	mov	r2, r3
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	3309      	adds	r3, #9
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	021b      	lsls	r3, r3, #8
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	4313      	orrs	r3, r2
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	330a      	adds	r3, #10
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	461a      	mov	r2, r3
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	330b      	adds	r3, #11
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	021b      	lsls	r3, r3, #8
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	4313      	orrs	r3, r2
 8011b14:	b29a      	uxth	r2, r3
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	330c      	adds	r3, #12
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	461a      	mov	r2, r3
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	330d      	adds	r3, #13
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	021b      	lsls	r3, r3, #8
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	4313      	orrs	r3, r2
 8011b2e:	b29a      	uxth	r2, r3
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	7b9a      	ldrb	r2, [r3, #14]
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	7bda      	ldrb	r2, [r3, #15]
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	7c1a      	ldrb	r2, [r3, #16]
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	7c5a      	ldrb	r2, [r3, #17]
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8011b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	371c      	adds	r7, #28
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b60:	4770      	bx	lr
 8011b62:	bf00      	nop
 8011b64:	01000101 	.word	0x01000101

08011b68 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b08c      	sub	sp, #48	@ 0x30
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	4613      	mov	r3, r2
 8011b74:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8011b7c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011b84:	2300      	movs	r3, #0
 8011b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d101      	bne.n	8011b9a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8011b96:	2302      	movs	r3, #2
 8011b98:	e0da      	b.n	8011d50 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	781a      	ldrb	r2, [r3, #0]
 8011ba2:	6a3b      	ldr	r3, [r7, #32]
 8011ba4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	785a      	ldrb	r2, [r3, #1]
 8011baa:	6a3b      	ldr	r3, [r7, #32]
 8011bac:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	3302      	adds	r3, #2
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	3303      	adds	r3, #3
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	021b      	lsls	r3, r3, #8
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011bc8:	bf28      	it	cs
 8011bca:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8011bce:	b29a      	uxth	r2, r3
 8011bd0:	6a3b      	ldr	r3, [r7, #32]
 8011bd2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	791a      	ldrb	r2, [r3, #4]
 8011bd8:	6a3b      	ldr	r3, [r7, #32]
 8011bda:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	795a      	ldrb	r2, [r3, #5]
 8011be0:	6a3b      	ldr	r3, [r7, #32]
 8011be2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	799a      	ldrb	r2, [r3, #6]
 8011be8:	6a3b      	ldr	r3, [r7, #32]
 8011bea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	79da      	ldrb	r2, [r3, #7]
 8011bf0:	6a3b      	ldr	r3, [r7, #32]
 8011bf2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	7a1a      	ldrb	r2, [r3, #8]
 8011bf8:	6a3b      	ldr	r3, [r7, #32]
 8011bfa:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8011bfc:	6a3b      	ldr	r3, [r7, #32]
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	2b09      	cmp	r3, #9
 8011c02:	d002      	beq.n	8011c0a <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8011c04:	6a3b      	ldr	r3, [r7, #32]
 8011c06:	2209      	movs	r2, #9
 8011c08:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8011c0a:	88fb      	ldrh	r3, [r7, #6]
 8011c0c:	2b09      	cmp	r3, #9
 8011c0e:	f240 809d 	bls.w	8011d4c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8011c12:	2309      	movs	r3, #9
 8011c14:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011c16:	2300      	movs	r3, #0
 8011c18:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011c1a:	e081      	b.n	8011d20 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011c1c:	f107 0316 	add.w	r3, r7, #22
 8011c20:	4619      	mov	r1, r3
 8011c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c24:	f000 f9e7 	bl	8011ff6 <USBH_GetNextDesc>
 8011c28:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8011c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c2c:	785b      	ldrb	r3, [r3, #1]
 8011c2e:	2b04      	cmp	r3, #4
 8011c30:	d176      	bne.n	8011d20 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	2b09      	cmp	r3, #9
 8011c38:	d002      	beq.n	8011c40 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8011c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c3c:	2209      	movs	r2, #9
 8011c3e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c44:	221a      	movs	r2, #26
 8011c46:	fb02 f303 	mul.w	r3, r2, r3
 8011c4a:	3308      	adds	r3, #8
 8011c4c:	6a3a      	ldr	r2, [r7, #32]
 8011c4e:	4413      	add	r3, r2
 8011c50:	3302      	adds	r3, #2
 8011c52:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011c54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c56:	69f8      	ldr	r0, [r7, #28]
 8011c58:	f000 f87e 	bl	8011d58 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011c62:	2300      	movs	r3, #0
 8011c64:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011c66:	e043      	b.n	8011cf0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011c68:	f107 0316 	add.w	r3, r7, #22
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c70:	f000 f9c1 	bl	8011ff6 <USBH_GetNextDesc>
 8011c74:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c78:	785b      	ldrb	r3, [r3, #1]
 8011c7a:	2b05      	cmp	r3, #5
 8011c7c:	d138      	bne.n	8011cf0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8011c7e:	69fb      	ldr	r3, [r7, #28]
 8011c80:	795b      	ldrb	r3, [r3, #5]
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d113      	bne.n	8011cae <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011c86:	69fb      	ldr	r3, [r7, #28]
 8011c88:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8011c8a:	2b02      	cmp	r3, #2
 8011c8c:	d003      	beq.n	8011c96 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011c8e:	69fb      	ldr	r3, [r7, #28]
 8011c90:	799b      	ldrb	r3, [r3, #6]
 8011c92:	2b03      	cmp	r3, #3
 8011c94:	d10b      	bne.n	8011cae <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011c96:	69fb      	ldr	r3, [r7, #28]
 8011c98:	79db      	ldrb	r3, [r3, #7]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d10b      	bne.n	8011cb6 <USBH_ParseCfgDesc+0x14e>
 8011c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	2b09      	cmp	r3, #9
 8011ca4:	d007      	beq.n	8011cb6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8011ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca8:	2209      	movs	r2, #9
 8011caa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011cac:	e003      	b.n	8011cb6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8011cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cb0:	2207      	movs	r2, #7
 8011cb2:	701a      	strb	r2, [r3, #0]
 8011cb4:	e000      	b.n	8011cb8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011cb6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011cbc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011cc0:	3201      	adds	r2, #1
 8011cc2:	00d2      	lsls	r2, r2, #3
 8011cc4:	211a      	movs	r1, #26
 8011cc6:	fb01 f303 	mul.w	r3, r1, r3
 8011cca:	4413      	add	r3, r2
 8011ccc:	3308      	adds	r3, #8
 8011cce:	6a3a      	ldr	r2, [r7, #32]
 8011cd0:	4413      	add	r3, r2
 8011cd2:	3304      	adds	r3, #4
 8011cd4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8011cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011cd8:	69b9      	ldr	r1, [r7, #24]
 8011cda:	68f8      	ldr	r0, [r7, #12]
 8011cdc:	f000 f870 	bl	8011dc0 <USBH_ParseEPDesc>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8011ce6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011cea:	3301      	adds	r3, #1
 8011cec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	791b      	ldrb	r3, [r3, #4]
 8011cf4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	d204      	bcs.n	8011d06 <USBH_ParseCfgDesc+0x19e>
 8011cfc:	6a3b      	ldr	r3, [r7, #32]
 8011cfe:	885a      	ldrh	r2, [r3, #2]
 8011d00:	8afb      	ldrh	r3, [r7, #22]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d8b0      	bhi.n	8011c68 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8011d06:	69fb      	ldr	r3, [r7, #28]
 8011d08:	791b      	ldrb	r3, [r3, #4]
 8011d0a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	d201      	bcs.n	8011d16 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8011d12:	2303      	movs	r3, #3
 8011d14:	e01c      	b.n	8011d50 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8011d16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d1a:	3301      	adds	r3, #1
 8011d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d805      	bhi.n	8011d34 <USBH_ParseCfgDesc+0x1cc>
 8011d28:	6a3b      	ldr	r3, [r7, #32]
 8011d2a:	885a      	ldrh	r2, [r3, #2]
 8011d2c:	8afb      	ldrh	r3, [r7, #22]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	f63f af74 	bhi.w	8011c1c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8011d34:	6a3b      	ldr	r3, [r7, #32]
 8011d36:	791b      	ldrb	r3, [r3, #4]
 8011d38:	2b02      	cmp	r3, #2
 8011d3a:	bf28      	it	cs
 8011d3c:	2302      	movcs	r3, #2
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d201      	bcs.n	8011d4c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8011d48:	2303      	movs	r3, #3
 8011d4a:	e001      	b.n	8011d50 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8011d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3730      	adds	r7, #48	@ 0x30
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b083      	sub	sp, #12
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	781a      	ldrb	r2, [r3, #0]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	785a      	ldrb	r2, [r3, #1]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	789a      	ldrb	r2, [r3, #2]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	78da      	ldrb	r2, [r3, #3]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	3304      	adds	r3, #4
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	2b02      	cmp	r3, #2
 8011d8a:	bf28      	it	cs
 8011d8c:	2302      	movcs	r3, #2
 8011d8e:	b2da      	uxtb	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	795a      	ldrb	r2, [r3, #5]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	799a      	ldrb	r2, [r3, #6]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	79da      	ldrb	r2, [r3, #7]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	7a1a      	ldrb	r2, [r3, #8]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	721a      	strb	r2, [r3, #8]
}
 8011db4:	bf00      	nop
 8011db6:	370c      	adds	r7, #12
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr

08011dc0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b087      	sub	sp, #28
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	781a      	ldrb	r2, [r3, #0]
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	785a      	ldrb	r2, [r3, #1]
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	789a      	ldrb	r2, [r3, #2]
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	78da      	ldrb	r2, [r3, #3]
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	3304      	adds	r3, #4
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	461a      	mov	r2, r3
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	3305      	adds	r3, #5
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	021b      	lsls	r3, r3, #8
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	4313      	orrs	r3, r2
 8011e04:	b29a      	uxth	r2, r3
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	799a      	ldrb	r2, [r3, #6]
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	889b      	ldrh	r3, [r3, #4]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d009      	beq.n	8011e2e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8011e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011e22:	d804      	bhi.n	8011e2e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8011e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e2c:	d901      	bls.n	8011e32 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8011e2e:	2303      	movs	r3, #3
 8011e30:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d136      	bne.n	8011eaa <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	78db      	ldrb	r3, [r3, #3]
 8011e40:	f003 0303 	and.w	r3, r3, #3
 8011e44:	2b02      	cmp	r3, #2
 8011e46:	d108      	bne.n	8011e5a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	889b      	ldrh	r3, [r3, #4]
 8011e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e50:	f240 8097 	bls.w	8011f82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e54:	2303      	movs	r3, #3
 8011e56:	75fb      	strb	r3, [r7, #23]
 8011e58:	e093      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	78db      	ldrb	r3, [r3, #3]
 8011e5e:	f003 0303 	and.w	r3, r3, #3
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d107      	bne.n	8011e76 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	889b      	ldrh	r3, [r3, #4]
 8011e6a:	2b40      	cmp	r3, #64	@ 0x40
 8011e6c:	f240 8089 	bls.w	8011f82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e70:	2303      	movs	r3, #3
 8011e72:	75fb      	strb	r3, [r7, #23]
 8011e74:	e085      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	78db      	ldrb	r3, [r3, #3]
 8011e7a:	f003 0303 	and.w	r3, r3, #3
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	d005      	beq.n	8011e8e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	78db      	ldrb	r3, [r3, #3]
 8011e86:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011e8a:	2b03      	cmp	r3, #3
 8011e8c:	d10a      	bne.n	8011ea4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	799b      	ldrb	r3, [r3, #6]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d003      	beq.n	8011e9e <USBH_ParseEPDesc+0xde>
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	799b      	ldrb	r3, [r3, #6]
 8011e9a:	2b10      	cmp	r3, #16
 8011e9c:	d970      	bls.n	8011f80 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8011e9e:	2303      	movs	r3, #3
 8011ea0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011ea2:	e06d      	b.n	8011f80 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011ea4:	2303      	movs	r3, #3
 8011ea6:	75fb      	strb	r3, [r7, #23]
 8011ea8:	e06b      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d13c      	bne.n	8011f2e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	78db      	ldrb	r3, [r3, #3]
 8011eb8:	f003 0303 	and.w	r3, r3, #3
 8011ebc:	2b02      	cmp	r3, #2
 8011ebe:	d005      	beq.n	8011ecc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	78db      	ldrb	r3, [r3, #3]
 8011ec4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d106      	bne.n	8011eda <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	889b      	ldrh	r3, [r3, #4]
 8011ed0:	2b40      	cmp	r3, #64	@ 0x40
 8011ed2:	d956      	bls.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011ed4:	2303      	movs	r3, #3
 8011ed6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011ed8:	e053      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	78db      	ldrb	r3, [r3, #3]
 8011ede:	f003 0303 	and.w	r3, r3, #3
 8011ee2:	2b01      	cmp	r3, #1
 8011ee4:	d10e      	bne.n	8011f04 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	799b      	ldrb	r3, [r3, #6]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d007      	beq.n	8011efe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8011ef2:	2b10      	cmp	r3, #16
 8011ef4:	d803      	bhi.n	8011efe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8011efa:	2b40      	cmp	r3, #64	@ 0x40
 8011efc:	d941      	bls.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011efe:	2303      	movs	r3, #3
 8011f00:	75fb      	strb	r3, [r7, #23]
 8011f02:	e03e      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	78db      	ldrb	r3, [r3, #3]
 8011f08:	f003 0303 	and.w	r3, r3, #3
 8011f0c:	2b03      	cmp	r3, #3
 8011f0e:	d10b      	bne.n	8011f28 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	799b      	ldrb	r3, [r3, #6]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d004      	beq.n	8011f22 <USBH_ParseEPDesc+0x162>
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	889b      	ldrh	r3, [r3, #4]
 8011f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011f20:	d32f      	bcc.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011f22:	2303      	movs	r3, #3
 8011f24:	75fb      	strb	r3, [r7, #23]
 8011f26:	e02c      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011f28:	2303      	movs	r3, #3
 8011f2a:	75fb      	strb	r3, [r7, #23]
 8011f2c:	e029      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011f34:	2b02      	cmp	r3, #2
 8011f36:	d120      	bne.n	8011f7a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	78db      	ldrb	r3, [r3, #3]
 8011f3c:	f003 0303 	and.w	r3, r3, #3
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d106      	bne.n	8011f52 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	889b      	ldrh	r3, [r3, #4]
 8011f48:	2b08      	cmp	r3, #8
 8011f4a:	d01a      	beq.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011f4c:	2303      	movs	r3, #3
 8011f4e:	75fb      	strb	r3, [r7, #23]
 8011f50:	e017      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	78db      	ldrb	r3, [r3, #3]
 8011f56:	f003 0303 	and.w	r3, r3, #3
 8011f5a:	2b03      	cmp	r3, #3
 8011f5c:	d10a      	bne.n	8011f74 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	799b      	ldrb	r3, [r3, #6]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d003      	beq.n	8011f6e <USBH_ParseEPDesc+0x1ae>
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	889b      	ldrh	r3, [r3, #4]
 8011f6a:	2b08      	cmp	r3, #8
 8011f6c:	d909      	bls.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011f6e:	2303      	movs	r3, #3
 8011f70:	75fb      	strb	r3, [r7, #23]
 8011f72:	e006      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011f74:	2303      	movs	r3, #3
 8011f76:	75fb      	strb	r3, [r7, #23]
 8011f78:	e003      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8011f7a:	2303      	movs	r3, #3
 8011f7c:	75fb      	strb	r3, [r7, #23]
 8011f7e:	e000      	b.n	8011f82 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011f80:	bf00      	nop
  }

  return status;
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	371c      	adds	r7, #28
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr

08011f90 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b087      	sub	sp, #28
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	60f8      	str	r0, [r7, #12]
 8011f98:	60b9      	str	r1, [r7, #8]
 8011f9a:	4613      	mov	r3, r2
 8011f9c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	2b03      	cmp	r3, #3
 8011fa6:	d120      	bne.n	8011fea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	1e9a      	subs	r2, r3, #2
 8011fae:	88fb      	ldrh	r3, [r7, #6]
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	bf28      	it	cs
 8011fb4:	4613      	movcs	r3, r2
 8011fb6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	3302      	adds	r3, #2
 8011fbc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	82fb      	strh	r3, [r7, #22]
 8011fc2:	e00b      	b.n	8011fdc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8011fc4:	8afb      	ldrh	r3, [r7, #22]
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	4413      	add	r3, r2
 8011fca:	781a      	ldrb	r2, [r3, #0]
 8011fcc:	68bb      	ldr	r3, [r7, #8]
 8011fce:	701a      	strb	r2, [r3, #0]
      pdest++;
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8011fd6:	8afb      	ldrh	r3, [r7, #22]
 8011fd8:	3302      	adds	r3, #2
 8011fda:	82fb      	strh	r3, [r7, #22]
 8011fdc:	8afa      	ldrh	r2, [r7, #22]
 8011fde:	8abb      	ldrh	r3, [r7, #20]
 8011fe0:	429a      	cmp	r2, r3
 8011fe2:	d3ef      	bcc.n	8011fc4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	701a      	strb	r2, [r3, #0]
  }
}
 8011fea:	bf00      	nop
 8011fec:	371c      	adds	r7, #28
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr

08011ff6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011ff6:	b480      	push	{r7}
 8011ff8:	b085      	sub	sp, #20
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	6078      	str	r0, [r7, #4]
 8011ffe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	881b      	ldrh	r3, [r3, #0]
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	7812      	ldrb	r2, [r2, #0]
 8012008:	4413      	add	r3, r2
 801200a:	b29a      	uxth	r2, r3
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	4413      	add	r3, r2
 801201a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801201c:	68fb      	ldr	r3, [r7, #12]
}
 801201e:	4618      	mov	r0, r3
 8012020:	3714      	adds	r7, #20
 8012022:	46bd      	mov	sp, r7
 8012024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012028:	4770      	bx	lr

0801202a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801202a:	b580      	push	{r7, lr}
 801202c:	b086      	sub	sp, #24
 801202e:	af00      	add	r7, sp, #0
 8012030:	60f8      	str	r0, [r7, #12]
 8012032:	60b9      	str	r1, [r7, #8]
 8012034:	4613      	mov	r3, r2
 8012036:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8012038:	2301      	movs	r3, #1
 801203a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	789b      	ldrb	r3, [r3, #2]
 8012040:	2b01      	cmp	r3, #1
 8012042:	d002      	beq.n	801204a <USBH_CtlReq+0x20>
 8012044:	2b02      	cmp	r3, #2
 8012046:	d00f      	beq.n	8012068 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8012048:	e027      	b.n	801209a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	68ba      	ldr	r2, [r7, #8]
 801204e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	88fa      	ldrh	r2, [r7, #6]
 8012054:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	2201      	movs	r2, #1
 801205a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2202      	movs	r2, #2
 8012060:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8012062:	2301      	movs	r3, #1
 8012064:	75fb      	strb	r3, [r7, #23]
      break;
 8012066:	e018      	b.n	801209a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f000 f81b 	bl	80120a4 <USBH_HandleControl>
 801206e:	4603      	mov	r3, r0
 8012070:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8012072:	7dfb      	ldrb	r3, [r7, #23]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d002      	beq.n	801207e <USBH_CtlReq+0x54>
 8012078:	7dfb      	ldrb	r3, [r7, #23]
 801207a:	2b03      	cmp	r3, #3
 801207c:	d106      	bne.n	801208c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	2201      	movs	r2, #1
 8012082:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2200      	movs	r2, #0
 8012088:	761a      	strb	r2, [r3, #24]
      break;
 801208a:	e005      	b.n	8012098 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801208c:	7dfb      	ldrb	r3, [r7, #23]
 801208e:	2b02      	cmp	r3, #2
 8012090:	d102      	bne.n	8012098 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	2201      	movs	r2, #1
 8012096:	709a      	strb	r2, [r3, #2]
      break;
 8012098:	bf00      	nop
  }
  return status;
 801209a:	7dfb      	ldrb	r3, [r7, #23]
}
 801209c:	4618      	mov	r0, r3
 801209e:	3718      	adds	r7, #24
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b086      	sub	sp, #24
 80120a8:	af02      	add	r7, sp, #8
 80120aa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80120ac:	2301      	movs	r3, #1
 80120ae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80120b0:	2300      	movs	r3, #0
 80120b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	7e1b      	ldrb	r3, [r3, #24]
 80120b8:	3b01      	subs	r3, #1
 80120ba:	2b0a      	cmp	r3, #10
 80120bc:	f200 8156 	bhi.w	801236c <USBH_HandleControl+0x2c8>
 80120c0:	a201      	add	r2, pc, #4	@ (adr r2, 80120c8 <USBH_HandleControl+0x24>)
 80120c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120c6:	bf00      	nop
 80120c8:	080120f5 	.word	0x080120f5
 80120cc:	0801210f 	.word	0x0801210f
 80120d0:	08012179 	.word	0x08012179
 80120d4:	0801219f 	.word	0x0801219f
 80120d8:	080121d7 	.word	0x080121d7
 80120dc:	08012201 	.word	0x08012201
 80120e0:	08012253 	.word	0x08012253
 80120e4:	08012275 	.word	0x08012275
 80120e8:	080122b1 	.word	0x080122b1
 80120ec:	080122d7 	.word	0x080122d7
 80120f0:	08012315 	.word	0x08012315
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f103 0110 	add.w	r1, r3, #16
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	795b      	ldrb	r3, [r3, #5]
 80120fe:	461a      	mov	r2, r3
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f000 f943 	bl	801238c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2202      	movs	r2, #2
 801210a:	761a      	strb	r2, [r3, #24]
      break;
 801210c:	e139      	b.n	8012382 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	795b      	ldrb	r3, [r3, #5]
 8012112:	4619      	mov	r1, r3
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f000 fc93 	bl	8012a40 <USBH_LL_GetURBState>
 801211a:	4603      	mov	r3, r0
 801211c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801211e:	7bbb      	ldrb	r3, [r7, #14]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d11e      	bne.n	8012162 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	7c1b      	ldrb	r3, [r3, #16]
 8012128:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801212c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	8adb      	ldrh	r3, [r3, #22]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d00a      	beq.n	801214c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8012136:	7b7b      	ldrb	r3, [r7, #13]
 8012138:	2b80      	cmp	r3, #128	@ 0x80
 801213a:	d103      	bne.n	8012144 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2203      	movs	r2, #3
 8012140:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012142:	e115      	b.n	8012370 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2205      	movs	r2, #5
 8012148:	761a      	strb	r2, [r3, #24]
      break;
 801214a:	e111      	b.n	8012370 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 801214c:	7b7b      	ldrb	r3, [r7, #13]
 801214e:	2b80      	cmp	r3, #128	@ 0x80
 8012150:	d103      	bne.n	801215a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2209      	movs	r2, #9
 8012156:	761a      	strb	r2, [r3, #24]
      break;
 8012158:	e10a      	b.n	8012370 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2207      	movs	r2, #7
 801215e:	761a      	strb	r2, [r3, #24]
      break;
 8012160:	e106      	b.n	8012370 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8012162:	7bbb      	ldrb	r3, [r7, #14]
 8012164:	2b04      	cmp	r3, #4
 8012166:	d003      	beq.n	8012170 <USBH_HandleControl+0xcc>
 8012168:	7bbb      	ldrb	r3, [r7, #14]
 801216a:	2b02      	cmp	r3, #2
 801216c:	f040 8100 	bne.w	8012370 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	220b      	movs	r2, #11
 8012174:	761a      	strb	r2, [r3, #24]
      break;
 8012176:	e0fb      	b.n	8012370 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801217e:	b29a      	uxth	r2, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6899      	ldr	r1, [r3, #8]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	899a      	ldrh	r2, [r3, #12]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	791b      	ldrb	r3, [r3, #4]
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 f93a 	bl	801240a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2204      	movs	r2, #4
 801219a:	761a      	strb	r2, [r3, #24]
      break;
 801219c:	e0f1      	b.n	8012382 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	791b      	ldrb	r3, [r3, #4]
 80121a2:	4619      	mov	r1, r3
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f000 fc4b 	bl	8012a40 <USBH_LL_GetURBState>
 80121aa:	4603      	mov	r3, r0
 80121ac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80121ae:	7bbb      	ldrb	r3, [r7, #14]
 80121b0:	2b01      	cmp	r3, #1
 80121b2:	d102      	bne.n	80121ba <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2209      	movs	r2, #9
 80121b8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80121ba:	7bbb      	ldrb	r3, [r7, #14]
 80121bc:	2b05      	cmp	r3, #5
 80121be:	d102      	bne.n	80121c6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80121c0:	2303      	movs	r3, #3
 80121c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80121c4:	e0d6      	b.n	8012374 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80121c6:	7bbb      	ldrb	r3, [r7, #14]
 80121c8:	2b04      	cmp	r3, #4
 80121ca:	f040 80d3 	bne.w	8012374 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	220b      	movs	r2, #11
 80121d2:	761a      	strb	r2, [r3, #24]
      break;
 80121d4:	e0ce      	b.n	8012374 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6899      	ldr	r1, [r3, #8]
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	899a      	ldrh	r2, [r3, #12]
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	795b      	ldrb	r3, [r3, #5]
 80121e2:	2001      	movs	r0, #1
 80121e4:	9000      	str	r0, [sp, #0]
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f000 f8ea 	bl	80123c0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2206      	movs	r2, #6
 80121fc:	761a      	strb	r2, [r3, #24]
      break;
 80121fe:	e0c0      	b.n	8012382 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	795b      	ldrb	r3, [r3, #5]
 8012204:	4619      	mov	r1, r3
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f000 fc1a 	bl	8012a40 <USBH_LL_GetURBState>
 801220c:	4603      	mov	r3, r0
 801220e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012210:	7bbb      	ldrb	r3, [r7, #14]
 8012212:	2b01      	cmp	r3, #1
 8012214:	d103      	bne.n	801221e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2207      	movs	r2, #7
 801221a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801221c:	e0ac      	b.n	8012378 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 801221e:	7bbb      	ldrb	r3, [r7, #14]
 8012220:	2b05      	cmp	r3, #5
 8012222:	d105      	bne.n	8012230 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	220c      	movs	r2, #12
 8012228:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801222a:	2303      	movs	r3, #3
 801222c:	73fb      	strb	r3, [r7, #15]
      break;
 801222e:	e0a3      	b.n	8012378 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8012230:	7bbb      	ldrb	r3, [r7, #14]
 8012232:	2b02      	cmp	r3, #2
 8012234:	d103      	bne.n	801223e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2205      	movs	r2, #5
 801223a:	761a      	strb	r2, [r3, #24]
      break;
 801223c:	e09c      	b.n	8012378 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 801223e:	7bbb      	ldrb	r3, [r7, #14]
 8012240:	2b04      	cmp	r3, #4
 8012242:	f040 8099 	bne.w	8012378 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	220b      	movs	r2, #11
 801224a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801224c:	2302      	movs	r3, #2
 801224e:	73fb      	strb	r3, [r7, #15]
      break;
 8012250:	e092      	b.n	8012378 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	791b      	ldrb	r3, [r3, #4]
 8012256:	2200      	movs	r2, #0
 8012258:	2100      	movs	r1, #0
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f000 f8d5 	bl	801240a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012266:	b29a      	uxth	r2, r3
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2208      	movs	r2, #8
 8012270:	761a      	strb	r2, [r3, #24]

      break;
 8012272:	e086      	b.n	8012382 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	791b      	ldrb	r3, [r3, #4]
 8012278:	4619      	mov	r1, r3
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f000 fbe0 	bl	8012a40 <USBH_LL_GetURBState>
 8012280:	4603      	mov	r3, r0
 8012282:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012284:	7bbb      	ldrb	r3, [r7, #14]
 8012286:	2b01      	cmp	r3, #1
 8012288:	d105      	bne.n	8012296 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	220d      	movs	r2, #13
 801228e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8012290:	2300      	movs	r3, #0
 8012292:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012294:	e072      	b.n	801237c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8012296:	7bbb      	ldrb	r3, [r7, #14]
 8012298:	2b04      	cmp	r3, #4
 801229a:	d103      	bne.n	80122a4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	220b      	movs	r2, #11
 80122a0:	761a      	strb	r2, [r3, #24]
      break;
 80122a2:	e06b      	b.n	801237c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80122a4:	7bbb      	ldrb	r3, [r7, #14]
 80122a6:	2b05      	cmp	r3, #5
 80122a8:	d168      	bne.n	801237c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80122aa:	2303      	movs	r3, #3
 80122ac:	73fb      	strb	r3, [r7, #15]
      break;
 80122ae:	e065      	b.n	801237c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	795b      	ldrb	r3, [r3, #5]
 80122b4:	2201      	movs	r2, #1
 80122b6:	9200      	str	r2, [sp, #0]
 80122b8:	2200      	movs	r2, #0
 80122ba:	2100      	movs	r1, #0
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 f87f 	bl	80123c0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80122c8:	b29a      	uxth	r2, r3
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	220a      	movs	r2, #10
 80122d2:	761a      	strb	r2, [r3, #24]
      break;
 80122d4:	e055      	b.n	8012382 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	795b      	ldrb	r3, [r3, #5]
 80122da:	4619      	mov	r1, r3
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f000 fbaf 	bl	8012a40 <USBH_LL_GetURBState>
 80122e2:	4603      	mov	r3, r0
 80122e4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80122e6:	7bbb      	ldrb	r3, [r7, #14]
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	d105      	bne.n	80122f8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80122ec:	2300      	movs	r3, #0
 80122ee:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	220d      	movs	r2, #13
 80122f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80122f6:	e043      	b.n	8012380 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80122f8:	7bbb      	ldrb	r3, [r7, #14]
 80122fa:	2b02      	cmp	r3, #2
 80122fc:	d103      	bne.n	8012306 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2209      	movs	r2, #9
 8012302:	761a      	strb	r2, [r3, #24]
      break;
 8012304:	e03c      	b.n	8012380 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8012306:	7bbb      	ldrb	r3, [r7, #14]
 8012308:	2b04      	cmp	r3, #4
 801230a:	d139      	bne.n	8012380 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	220b      	movs	r2, #11
 8012310:	761a      	strb	r2, [r3, #24]
      break;
 8012312:	e035      	b.n	8012380 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	7e5b      	ldrb	r3, [r3, #25]
 8012318:	3301      	adds	r3, #1
 801231a:	b2da      	uxtb	r2, r3
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	765a      	strb	r2, [r3, #25]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	7e5b      	ldrb	r3, [r3, #25]
 8012324:	2b02      	cmp	r3, #2
 8012326:	d806      	bhi.n	8012336 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2201      	movs	r2, #1
 801232c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2201      	movs	r2, #1
 8012332:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8012334:	e025      	b.n	8012382 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801233c:	2106      	movs	r1, #6
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2200      	movs	r2, #0
 8012346:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	795b      	ldrb	r3, [r3, #5]
 801234c:	4619      	mov	r1, r3
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f000 f8e8 	bl	8012524 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	791b      	ldrb	r3, [r3, #4]
 8012358:	4619      	mov	r1, r3
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 f8e2 	bl	8012524 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8012366:	2302      	movs	r3, #2
 8012368:	73fb      	strb	r3, [r7, #15]
      break;
 801236a:	e00a      	b.n	8012382 <USBH_HandleControl+0x2de>

    default:
      break;
 801236c:	bf00      	nop
 801236e:	e008      	b.n	8012382 <USBH_HandleControl+0x2de>
      break;
 8012370:	bf00      	nop
 8012372:	e006      	b.n	8012382 <USBH_HandleControl+0x2de>
      break;
 8012374:	bf00      	nop
 8012376:	e004      	b.n	8012382 <USBH_HandleControl+0x2de>
      break;
 8012378:	bf00      	nop
 801237a:	e002      	b.n	8012382 <USBH_HandleControl+0x2de>
      break;
 801237c:	bf00      	nop
 801237e:	e000      	b.n	8012382 <USBH_HandleControl+0x2de>
      break;
 8012380:	bf00      	nop
  }

  return status;
 8012382:	7bfb      	ldrb	r3, [r7, #15]
}
 8012384:	4618      	mov	r0, r3
 8012386:	3710      	adds	r7, #16
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b088      	sub	sp, #32
 8012390:	af04      	add	r7, sp, #16
 8012392:	60f8      	str	r0, [r7, #12]
 8012394:	60b9      	str	r1, [r7, #8]
 8012396:	4613      	mov	r3, r2
 8012398:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801239a:	79f9      	ldrb	r1, [r7, #7]
 801239c:	2300      	movs	r3, #0
 801239e:	9303      	str	r3, [sp, #12]
 80123a0:	2308      	movs	r3, #8
 80123a2:	9302      	str	r3, [sp, #8]
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	9301      	str	r3, [sp, #4]
 80123a8:	2300      	movs	r3, #0
 80123aa:	9300      	str	r3, [sp, #0]
 80123ac:	2300      	movs	r3, #0
 80123ae:	2200      	movs	r2, #0
 80123b0:	68f8      	ldr	r0, [r7, #12]
 80123b2:	f000 fb14 	bl	80129de <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80123b6:	2300      	movs	r3, #0
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3710      	adds	r7, #16
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b088      	sub	sp, #32
 80123c4:	af04      	add	r7, sp, #16
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	60b9      	str	r1, [r7, #8]
 80123ca:	4611      	mov	r1, r2
 80123cc:	461a      	mov	r2, r3
 80123ce:	460b      	mov	r3, r1
 80123d0:	80fb      	strh	r3, [r7, #6]
 80123d2:	4613      	mov	r3, r2
 80123d4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d001      	beq.n	80123e4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80123e0:	2300      	movs	r3, #0
 80123e2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80123e4:	7979      	ldrb	r1, [r7, #5]
 80123e6:	7e3b      	ldrb	r3, [r7, #24]
 80123e8:	9303      	str	r3, [sp, #12]
 80123ea:	88fb      	ldrh	r3, [r7, #6]
 80123ec:	9302      	str	r3, [sp, #8]
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	9301      	str	r3, [sp, #4]
 80123f2:	2301      	movs	r3, #1
 80123f4:	9300      	str	r3, [sp, #0]
 80123f6:	2300      	movs	r3, #0
 80123f8:	2200      	movs	r2, #0
 80123fa:	68f8      	ldr	r0, [r7, #12]
 80123fc:	f000 faef 	bl	80129de <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8012400:	2300      	movs	r3, #0
}
 8012402:	4618      	mov	r0, r3
 8012404:	3710      	adds	r7, #16
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}

0801240a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801240a:	b580      	push	{r7, lr}
 801240c:	b088      	sub	sp, #32
 801240e:	af04      	add	r7, sp, #16
 8012410:	60f8      	str	r0, [r7, #12]
 8012412:	60b9      	str	r1, [r7, #8]
 8012414:	4611      	mov	r1, r2
 8012416:	461a      	mov	r2, r3
 8012418:	460b      	mov	r3, r1
 801241a:	80fb      	strh	r3, [r7, #6]
 801241c:	4613      	mov	r3, r2
 801241e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012420:	7979      	ldrb	r1, [r7, #5]
 8012422:	2300      	movs	r3, #0
 8012424:	9303      	str	r3, [sp, #12]
 8012426:	88fb      	ldrh	r3, [r7, #6]
 8012428:	9302      	str	r3, [sp, #8]
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	9301      	str	r3, [sp, #4]
 801242e:	2301      	movs	r3, #1
 8012430:	9300      	str	r3, [sp, #0]
 8012432:	2300      	movs	r3, #0
 8012434:	2201      	movs	r2, #1
 8012436:	68f8      	ldr	r0, [r7, #12]
 8012438:	f000 fad1 	bl	80129de <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801243c:	2300      	movs	r3, #0

}
 801243e:	4618      	mov	r0, r3
 8012440:	3710      	adds	r7, #16
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8012446:	b580      	push	{r7, lr}
 8012448:	b088      	sub	sp, #32
 801244a:	af04      	add	r7, sp, #16
 801244c:	60f8      	str	r0, [r7, #12]
 801244e:	60b9      	str	r1, [r7, #8]
 8012450:	4611      	mov	r1, r2
 8012452:	461a      	mov	r2, r3
 8012454:	460b      	mov	r3, r1
 8012456:	71fb      	strb	r3, [r7, #7]
 8012458:	4613      	mov	r3, r2
 801245a:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801245c:	79fb      	ldrb	r3, [r7, #7]
 801245e:	b29b      	uxth	r3, r3
 8012460:	79b9      	ldrb	r1, [r7, #6]
 8012462:	2200      	movs	r2, #0
 8012464:	9203      	str	r2, [sp, #12]
 8012466:	9302      	str	r3, [sp, #8]
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	9301      	str	r3, [sp, #4]
 801246c:	2301      	movs	r3, #1
 801246e:	9300      	str	r3, [sp, #0]
 8012470:	2303      	movs	r3, #3
 8012472:	2201      	movs	r2, #1
 8012474:	68f8      	ldr	r0, [r7, #12]
 8012476:	f000 fab2 	bl	80129de <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 801247a:	2300      	movs	r3, #0
}
 801247c:	4618      	mov	r0, r3
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b086      	sub	sp, #24
 8012488:	af04      	add	r7, sp, #16
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	4608      	mov	r0, r1
 801248e:	4611      	mov	r1, r2
 8012490:	461a      	mov	r2, r3
 8012492:	4603      	mov	r3, r0
 8012494:	70fb      	strb	r3, [r7, #3]
 8012496:	460b      	mov	r3, r1
 8012498:	70bb      	strb	r3, [r7, #2]
 801249a:	4613      	mov	r3, r2
 801249c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801249e:	7878      	ldrb	r0, [r7, #1]
 80124a0:	78ba      	ldrb	r2, [r7, #2]
 80124a2:	78f9      	ldrb	r1, [r7, #3]
 80124a4:	8b3b      	ldrh	r3, [r7, #24]
 80124a6:	9302      	str	r3, [sp, #8]
 80124a8:	7d3b      	ldrb	r3, [r7, #20]
 80124aa:	9301      	str	r3, [sp, #4]
 80124ac:	7c3b      	ldrb	r3, [r7, #16]
 80124ae:	9300      	str	r3, [sp, #0]
 80124b0:	4603      	mov	r3, r0
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 fa45 	bl	8012942 <USBH_LL_OpenPipe>

  return USBH_OK;
 80124b8:	2300      	movs	r3, #0
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3708      	adds	r7, #8
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b082      	sub	sp, #8
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
 80124ca:	460b      	mov	r3, r1
 80124cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80124ce:	78fb      	ldrb	r3, [r7, #3]
 80124d0:	4619      	mov	r1, r3
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f000 fa64 	bl	80129a0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80124d8:	2300      	movs	r3, #0
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3708      	adds	r7, #8
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}

080124e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80124e2:	b580      	push	{r7, lr}
 80124e4:	b084      	sub	sp, #16
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
 80124ea:	460b      	mov	r3, r1
 80124ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 f836 	bl	8012560 <USBH_GetFreePipe>
 80124f4:	4603      	mov	r3, r0
 80124f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80124f8:	89fb      	ldrh	r3, [r7, #14]
 80124fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124fe:	4293      	cmp	r3, r2
 8012500:	d00a      	beq.n	8012518 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8012502:	78fa      	ldrb	r2, [r7, #3]
 8012504:	89fb      	ldrh	r3, [r7, #14]
 8012506:	f003 030f 	and.w	r3, r3, #15
 801250a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801250e:	6879      	ldr	r1, [r7, #4]
 8012510:	33e0      	adds	r3, #224	@ 0xe0
 8012512:	009b      	lsls	r3, r3, #2
 8012514:	440b      	add	r3, r1
 8012516:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8012518:	89fb      	ldrh	r3, [r7, #14]
 801251a:	b2db      	uxtb	r3, r3
}
 801251c:	4618      	mov	r0, r3
 801251e:	3710      	adds	r7, #16
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}

08012524 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8012524:	b480      	push	{r7}
 8012526:	b083      	sub	sp, #12
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	460b      	mov	r3, r1
 801252e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8012530:	78fb      	ldrb	r3, [r7, #3]
 8012532:	2b0f      	cmp	r3, #15
 8012534:	d80d      	bhi.n	8012552 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8012536:	78fb      	ldrb	r3, [r7, #3]
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	33e0      	adds	r3, #224	@ 0xe0
 801253c:	009b      	lsls	r3, r3, #2
 801253e:	4413      	add	r3, r2
 8012540:	685a      	ldr	r2, [r3, #4]
 8012542:	78fb      	ldrb	r3, [r7, #3]
 8012544:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8012548:	6879      	ldr	r1, [r7, #4]
 801254a:	33e0      	adds	r3, #224	@ 0xe0
 801254c:	009b      	lsls	r3, r3, #2
 801254e:	440b      	add	r3, r1
 8012550:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8012552:	2300      	movs	r3, #0
}
 8012554:	4618      	mov	r0, r3
 8012556:	370c      	adds	r7, #12
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr

08012560 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8012560:	b480      	push	{r7}
 8012562:	b085      	sub	sp, #20
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8012568:	2300      	movs	r3, #0
 801256a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801256c:	2300      	movs	r3, #0
 801256e:	73fb      	strb	r3, [r7, #15]
 8012570:	e00f      	b.n	8012592 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8012572:	7bfb      	ldrb	r3, [r7, #15]
 8012574:	687a      	ldr	r2, [r7, #4]
 8012576:	33e0      	adds	r3, #224	@ 0xe0
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	4413      	add	r3, r2
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012582:	2b00      	cmp	r3, #0
 8012584:	d102      	bne.n	801258c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8012586:	7bfb      	ldrb	r3, [r7, #15]
 8012588:	b29b      	uxth	r3, r3
 801258a:	e007      	b.n	801259c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801258c:	7bfb      	ldrb	r3, [r7, #15]
 801258e:	3301      	adds	r3, #1
 8012590:	73fb      	strb	r3, [r7, #15]
 8012592:	7bfb      	ldrb	r3, [r7, #15]
 8012594:	2b0f      	cmp	r3, #15
 8012596:	d9ec      	bls.n	8012572 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8012598:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 801259c:	4618      	mov	r0, r3
 801259e:	3714      	adds	r7, #20
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80125ac:	2201      	movs	r2, #1
 80125ae:	490e      	ldr	r1, [pc, #56]	@ (80125e8 <MX_USB_HOST_Init+0x40>)
 80125b0:	480e      	ldr	r0, [pc, #56]	@ (80125ec <MX_USB_HOST_Init+0x44>)
 80125b2:	f7fe fb39 	bl	8010c28 <USBH_Init>
 80125b6:	4603      	mov	r3, r0
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d001      	beq.n	80125c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80125bc:	f7f0 faa4 	bl	8002b08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 80125c0:	490b      	ldr	r1, [pc, #44]	@ (80125f0 <MX_USB_HOST_Init+0x48>)
 80125c2:	480a      	ldr	r0, [pc, #40]	@ (80125ec <MX_USB_HOST_Init+0x44>)
 80125c4:	f7fe fbdd 	bl	8010d82 <USBH_RegisterClass>
 80125c8:	4603      	mov	r3, r0
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d001      	beq.n	80125d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80125ce:	f7f0 fa9b 	bl	8002b08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80125d2:	4806      	ldr	r0, [pc, #24]	@ (80125ec <MX_USB_HOST_Init+0x44>)
 80125d4:	f7fe fc61 	bl	8010e9a <USBH_Start>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d001      	beq.n	80125e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80125de:	f7f0 fa93 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80125e2:	bf00      	nop
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	08012609 	.word	0x08012609
 80125ec:	2000130c 	.word	0x2000130c
 80125f0:	20000024 	.word	0x20000024

080125f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80125f8:	4802      	ldr	r0, [pc, #8]	@ (8012604 <MX_USB_HOST_Process+0x10>)
 80125fa:	f7fe fc5f 	bl	8010ebc <USBH_Process>
}
 80125fe:	bf00      	nop
 8012600:	bd80      	pop	{r7, pc}
 8012602:	bf00      	nop
 8012604:	2000130c 	.word	0x2000130c

08012608 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012608:	b480      	push	{r7}
 801260a:	b083      	sub	sp, #12
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	460b      	mov	r3, r1
 8012612:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012614:	78fb      	ldrb	r3, [r7, #3]
 8012616:	3b01      	subs	r3, #1
 8012618:	2b04      	cmp	r3, #4
 801261a:	d819      	bhi.n	8012650 <USBH_UserProcess+0x48>
 801261c:	a201      	add	r2, pc, #4	@ (adr r2, 8012624 <USBH_UserProcess+0x1c>)
 801261e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012622:	bf00      	nop
 8012624:	08012651 	.word	0x08012651
 8012628:	08012641 	.word	0x08012641
 801262c:	08012651 	.word	0x08012651
 8012630:	08012649 	.word	0x08012649
 8012634:	08012639 	.word	0x08012639
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012638:	4b09      	ldr	r3, [pc, #36]	@ (8012660 <USBH_UserProcess+0x58>)
 801263a:	2203      	movs	r2, #3
 801263c:	701a      	strb	r2, [r3, #0]
  break;
 801263e:	e008      	b.n	8012652 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012640:	4b07      	ldr	r3, [pc, #28]	@ (8012660 <USBH_UserProcess+0x58>)
 8012642:	2202      	movs	r2, #2
 8012644:	701a      	strb	r2, [r3, #0]
  break;
 8012646:	e004      	b.n	8012652 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012648:	4b05      	ldr	r3, [pc, #20]	@ (8012660 <USBH_UserProcess+0x58>)
 801264a:	2201      	movs	r2, #1
 801264c:	701a      	strb	r2, [r3, #0]
  break;
 801264e:	e000      	b.n	8012652 <USBH_UserProcess+0x4a>

  default:
  break;
 8012650:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8012652:	bf00      	nop
 8012654:	370c      	adds	r7, #12
 8012656:	46bd      	mov	sp, r7
 8012658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop
 8012660:	200016e4 	.word	0x200016e4

08012664 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b08a      	sub	sp, #40	@ 0x28
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801266c:	f107 0314 	add.w	r3, r7, #20
 8012670:	2200      	movs	r2, #0
 8012672:	601a      	str	r2, [r3, #0]
 8012674:	605a      	str	r2, [r3, #4]
 8012676:	609a      	str	r2, [r3, #8]
 8012678:	60da      	str	r2, [r3, #12]
 801267a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012684:	d13a      	bne.n	80126fc <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012686:	2300      	movs	r3, #0
 8012688:	613b      	str	r3, [r7, #16]
 801268a:	4b1e      	ldr	r3, [pc, #120]	@ (8012704 <HAL_HCD_MspInit+0xa0>)
 801268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801268e:	4a1d      	ldr	r2, [pc, #116]	@ (8012704 <HAL_HCD_MspInit+0xa0>)
 8012690:	f043 0301 	orr.w	r3, r3, #1
 8012694:	6313      	str	r3, [r2, #48]	@ 0x30
 8012696:	4b1b      	ldr	r3, [pc, #108]	@ (8012704 <HAL_HCD_MspInit+0xa0>)
 8012698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801269a:	f003 0301 	and.w	r3, r3, #1
 801269e:	613b      	str	r3, [r7, #16]
 80126a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80126a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80126a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80126a8:	2302      	movs	r3, #2
 80126aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126ac:	2300      	movs	r3, #0
 80126ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80126b0:	2303      	movs	r3, #3
 80126b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80126b4:	230a      	movs	r3, #10
 80126b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80126b8:	f107 0314 	add.w	r3, r7, #20
 80126bc:	4619      	mov	r1, r3
 80126be:	4812      	ldr	r0, [pc, #72]	@ (8012708 <HAL_HCD_MspInit+0xa4>)
 80126c0:	f7f3 f890 	bl	80057e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80126c4:	4b0f      	ldr	r3, [pc, #60]	@ (8012704 <HAL_HCD_MspInit+0xa0>)
 80126c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126c8:	4a0e      	ldr	r2, [pc, #56]	@ (8012704 <HAL_HCD_MspInit+0xa0>)
 80126ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80126d0:	2300      	movs	r3, #0
 80126d2:	60fb      	str	r3, [r7, #12]
 80126d4:	4b0b      	ldr	r3, [pc, #44]	@ (8012704 <HAL_HCD_MspInit+0xa0>)
 80126d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126d8:	4a0a      	ldr	r2, [pc, #40]	@ (8012704 <HAL_HCD_MspInit+0xa0>)
 80126da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80126de:	6453      	str	r3, [r2, #68]	@ 0x44
 80126e0:	4b08      	ldr	r3, [pc, #32]	@ (8012704 <HAL_HCD_MspInit+0xa0>)
 80126e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80126e8:	60fb      	str	r3, [r7, #12]
 80126ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80126ec:	2200      	movs	r2, #0
 80126ee:	2100      	movs	r1, #0
 80126f0:	2043      	movs	r0, #67	@ 0x43
 80126f2:	f7f2 f998 	bl	8004a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80126f6:	2043      	movs	r0, #67	@ 0x43
 80126f8:	f7f2 f9b1 	bl	8004a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80126fc:	bf00      	nop
 80126fe:	3728      	adds	r7, #40	@ 0x28
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	40023800 	.word	0x40023800
 8012708:	40020000 	.word	0x40020000

0801270c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801271a:	4618      	mov	r0, r3
 801271c:	f7fe ffa5 	bl	801166a <USBH_LL_IncTimer>
}
 8012720:	bf00      	nop
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}

08012728 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012736:	4618      	mov	r0, r3
 8012738:	f7fe ffdd 	bl	80116f6 <USBH_LL_Connect>
}
 801273c:	bf00      	nop
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012752:	4618      	mov	r0, r3
 8012754:	f7fe ffe6 	bl	8011724 <USBH_LL_Disconnect>
}
 8012758:	bf00      	nop
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	460b      	mov	r3, r1
 801276a:	70fb      	strb	r3, [r7, #3]
 801276c:	4613      	mov	r3, r2
 801276e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8012770:	bf00      	nop
 8012772:	370c      	adds	r7, #12
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr

0801277c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801278a:	4618      	mov	r0, r3
 801278c:	f7fe ff97 	bl	80116be <USBH_LL_PortEnabled>
}
 8012790:	bf00      	nop
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7fe ff97 	bl	80116da <USBH_LL_PortDisabled>
}
 80127ac:	bf00      	nop
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d12a      	bne.n	801281c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80127c6:	4a18      	ldr	r2, [pc, #96]	@ (8012828 <USBH_LL_Init+0x74>)
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4a15      	ldr	r2, [pc, #84]	@ (8012828 <USBH_LL_Init+0x74>)
 80127d2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80127d6:	4b14      	ldr	r3, [pc, #80]	@ (8012828 <USBH_LL_Init+0x74>)
 80127d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80127dc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80127de:	4b12      	ldr	r3, [pc, #72]	@ (8012828 <USBH_LL_Init+0x74>)
 80127e0:	2208      	movs	r2, #8
 80127e2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80127e4:	4b10      	ldr	r3, [pc, #64]	@ (8012828 <USBH_LL_Init+0x74>)
 80127e6:	2201      	movs	r2, #1
 80127e8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80127ea:	4b0f      	ldr	r3, [pc, #60]	@ (8012828 <USBH_LL_Init+0x74>)
 80127ec:	2200      	movs	r2, #0
 80127ee:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80127f0:	4b0d      	ldr	r3, [pc, #52]	@ (8012828 <USBH_LL_Init+0x74>)
 80127f2:	2202      	movs	r2, #2
 80127f4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80127f6:	4b0c      	ldr	r3, [pc, #48]	@ (8012828 <USBH_LL_Init+0x74>)
 80127f8:	2200      	movs	r2, #0
 80127fa:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80127fc:	480a      	ldr	r0, [pc, #40]	@ (8012828 <USBH_LL_Init+0x74>)
 80127fe:	f7f3 fad3 	bl	8005da8 <HAL_HCD_Init>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d001      	beq.n	801280c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012808:	f7f0 f97e 	bl	8002b08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801280c:	4806      	ldr	r0, [pc, #24]	@ (8012828 <USBH_LL_Init+0x74>)
 801280e:	f7f3 ff33 	bl	8006678 <HAL_HCD_GetCurrentFrame>
 8012812:	4603      	mov	r3, r0
 8012814:	4619      	mov	r1, r3
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f7fe ff18 	bl	801164c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801281c:	2300      	movs	r3, #0
}
 801281e:	4618      	mov	r0, r3
 8012820:	3708      	adds	r7, #8
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	200016e8 	.word	0x200016e8

0801282c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b084      	sub	sp, #16
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012834:	2300      	movs	r3, #0
 8012836:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012838:	2300      	movs	r3, #0
 801283a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012842:	4618      	mov	r0, r3
 8012844:	f7f3 fea0 	bl	8006588 <HAL_HCD_Start>
 8012848:	4603      	mov	r3, r0
 801284a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801284c:	7bfb      	ldrb	r3, [r7, #15]
 801284e:	4618      	mov	r0, r3
 8012850:	f000 f95e 	bl	8012b10 <USBH_Get_USB_Status>
 8012854:	4603      	mov	r3, r0
 8012856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012858:	7bbb      	ldrb	r3, [r7, #14]
}
 801285a:	4618      	mov	r0, r3
 801285c:	3710      	adds	r7, #16
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}

08012862 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012862:	b580      	push	{r7, lr}
 8012864:	b084      	sub	sp, #16
 8012866:	af00      	add	r7, sp, #0
 8012868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801286a:	2300      	movs	r3, #0
 801286c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801286e:	2300      	movs	r3, #0
 8012870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012878:	4618      	mov	r0, r3
 801287a:	f7f3 fea8 	bl	80065ce <HAL_HCD_Stop>
 801287e:	4603      	mov	r3, r0
 8012880:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012882:	7bfb      	ldrb	r3, [r7, #15]
 8012884:	4618      	mov	r0, r3
 8012886:	f000 f943 	bl	8012b10 <USBH_Get_USB_Status>
 801288a:	4603      	mov	r3, r0
 801288c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801288e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012890:	4618      	mov	r0, r3
 8012892:	3710      	adds	r7, #16
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80128a0:	2301      	movs	r3, #1
 80128a2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7f3 fef2 	bl	8006694 <HAL_HCD_GetCurrentSpeed>
 80128b0:	4603      	mov	r3, r0
 80128b2:	2b02      	cmp	r3, #2
 80128b4:	d00c      	beq.n	80128d0 <USBH_LL_GetSpeed+0x38>
 80128b6:	2b02      	cmp	r3, #2
 80128b8:	d80d      	bhi.n	80128d6 <USBH_LL_GetSpeed+0x3e>
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d002      	beq.n	80128c4 <USBH_LL_GetSpeed+0x2c>
 80128be:	2b01      	cmp	r3, #1
 80128c0:	d003      	beq.n	80128ca <USBH_LL_GetSpeed+0x32>
 80128c2:	e008      	b.n	80128d6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80128c4:	2300      	movs	r3, #0
 80128c6:	73fb      	strb	r3, [r7, #15]
    break;
 80128c8:	e008      	b.n	80128dc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80128ca:	2301      	movs	r3, #1
 80128cc:	73fb      	strb	r3, [r7, #15]
    break;
 80128ce:	e005      	b.n	80128dc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80128d0:	2302      	movs	r3, #2
 80128d2:	73fb      	strb	r3, [r7, #15]
    break;
 80128d4:	e002      	b.n	80128dc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80128d6:	2301      	movs	r3, #1
 80128d8:	73fb      	strb	r3, [r7, #15]
    break;
 80128da:	bf00      	nop
  }
  return  speed;
 80128dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3710      	adds	r7, #16
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}

080128e6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80128e6:	b580      	push	{r7, lr}
 80128e8:	b084      	sub	sp, #16
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128ee:	2300      	movs	r3, #0
 80128f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80128f2:	2300      	movs	r3, #0
 80128f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7f3 fe83 	bl	8006608 <HAL_HCD_ResetPort>
 8012902:	4603      	mov	r3, r0
 8012904:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012906:	7bfb      	ldrb	r3, [r7, #15]
 8012908:	4618      	mov	r0, r3
 801290a:	f000 f901 	bl	8012b10 <USBH_Get_USB_Status>
 801290e:	4603      	mov	r3, r0
 8012910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012912:	7bbb      	ldrb	r3, [r7, #14]
}
 8012914:	4618      	mov	r0, r3
 8012916:	3710      	adds	r7, #16
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	460b      	mov	r3, r1
 8012926:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801292e:	78fa      	ldrb	r2, [r7, #3]
 8012930:	4611      	mov	r1, r2
 8012932:	4618      	mov	r0, r3
 8012934:	f7f3 fe8b 	bl	800664e <HAL_HCD_HC_GetXferCount>
 8012938:	4603      	mov	r3, r0
}
 801293a:	4618      	mov	r0, r3
 801293c:	3708      	adds	r7, #8
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}

08012942 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012942:	b590      	push	{r4, r7, lr}
 8012944:	b089      	sub	sp, #36	@ 0x24
 8012946:	af04      	add	r7, sp, #16
 8012948:	6078      	str	r0, [r7, #4]
 801294a:	4608      	mov	r0, r1
 801294c:	4611      	mov	r1, r2
 801294e:	461a      	mov	r2, r3
 8012950:	4603      	mov	r3, r0
 8012952:	70fb      	strb	r3, [r7, #3]
 8012954:	460b      	mov	r3, r1
 8012956:	70bb      	strb	r3, [r7, #2]
 8012958:	4613      	mov	r3, r2
 801295a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801295c:	2300      	movs	r3, #0
 801295e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012960:	2300      	movs	r3, #0
 8012962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801296a:	787c      	ldrb	r4, [r7, #1]
 801296c:	78ba      	ldrb	r2, [r7, #2]
 801296e:	78f9      	ldrb	r1, [r7, #3]
 8012970:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012972:	9302      	str	r3, [sp, #8]
 8012974:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012978:	9301      	str	r3, [sp, #4]
 801297a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801297e:	9300      	str	r3, [sp, #0]
 8012980:	4623      	mov	r3, r4
 8012982:	f7f3 fa78 	bl	8005e76 <HAL_HCD_HC_Init>
 8012986:	4603      	mov	r3, r0
 8012988:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801298a:	7bfb      	ldrb	r3, [r7, #15]
 801298c:	4618      	mov	r0, r3
 801298e:	f000 f8bf 	bl	8012b10 <USBH_Get_USB_Status>
 8012992:	4603      	mov	r3, r0
 8012994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012996:	7bbb      	ldrb	r3, [r7, #14]
}
 8012998:	4618      	mov	r0, r3
 801299a:	3714      	adds	r7, #20
 801299c:	46bd      	mov	sp, r7
 801299e:	bd90      	pop	{r4, r7, pc}

080129a0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b084      	sub	sp, #16
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
 80129a8:	460b      	mov	r3, r1
 80129aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129ac:	2300      	movs	r3, #0
 80129ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80129b0:	2300      	movs	r3, #0
 80129b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80129ba:	78fa      	ldrb	r2, [r7, #3]
 80129bc:	4611      	mov	r1, r2
 80129be:	4618      	mov	r0, r3
 80129c0:	f7f3 fb11 	bl	8005fe6 <HAL_HCD_HC_Halt>
 80129c4:	4603      	mov	r3, r0
 80129c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80129c8:	7bfb      	ldrb	r3, [r7, #15]
 80129ca:	4618      	mov	r0, r3
 80129cc:	f000 f8a0 	bl	8012b10 <USBH_Get_USB_Status>
 80129d0:	4603      	mov	r3, r0
 80129d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80129d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3710      	adds	r7, #16
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}

080129de <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80129de:	b590      	push	{r4, r7, lr}
 80129e0:	b089      	sub	sp, #36	@ 0x24
 80129e2:	af04      	add	r7, sp, #16
 80129e4:	6078      	str	r0, [r7, #4]
 80129e6:	4608      	mov	r0, r1
 80129e8:	4611      	mov	r1, r2
 80129ea:	461a      	mov	r2, r3
 80129ec:	4603      	mov	r3, r0
 80129ee:	70fb      	strb	r3, [r7, #3]
 80129f0:	460b      	mov	r3, r1
 80129f2:	70bb      	strb	r3, [r7, #2]
 80129f4:	4613      	mov	r3, r2
 80129f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129f8:	2300      	movs	r3, #0
 80129fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80129fc:	2300      	movs	r3, #0
 80129fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8012a06:	787c      	ldrb	r4, [r7, #1]
 8012a08:	78ba      	ldrb	r2, [r7, #2]
 8012a0a:	78f9      	ldrb	r1, [r7, #3]
 8012a0c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8012a10:	9303      	str	r3, [sp, #12]
 8012a12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012a14:	9302      	str	r3, [sp, #8]
 8012a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a18:	9301      	str	r3, [sp, #4]
 8012a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	4623      	mov	r3, r4
 8012a22:	f7f3 fb03 	bl	800602c <HAL_HCD_HC_SubmitRequest>
 8012a26:	4603      	mov	r3, r0
 8012a28:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012a2a:	7bfb      	ldrb	r3, [r7, #15]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f000 f86f 	bl	8012b10 <USBH_Get_USB_Status>
 8012a32:	4603      	mov	r3, r0
 8012a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3714      	adds	r7, #20
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd90      	pop	{r4, r7, pc}

08012a40 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	460b      	mov	r3, r1
 8012a4a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012a52:	78fa      	ldrb	r2, [r7, #3]
 8012a54:	4611      	mov	r1, r2
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7f3 fde4 	bl	8006624 <HAL_HCD_HC_GetURBState>
 8012a5c:	4603      	mov	r3, r0
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3708      	adds	r7, #8
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}

08012a66 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b082      	sub	sp, #8
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
 8012a6e:	460b      	mov	r3, r1
 8012a70:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d103      	bne.n	8012a84 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012a7c:	78fb      	ldrb	r3, [r7, #3]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f000 f872 	bl	8012b68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012a84:	20c8      	movs	r0, #200	@ 0xc8
 8012a86:	f7f1 fa99 	bl	8003fbc <HAL_Delay>
  return USBH_OK;
 8012a8a:	2300      	movs	r3, #0
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3708      	adds	r7, #8
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}

08012a94 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012a94:	b480      	push	{r7}
 8012a96:	b085      	sub	sp, #20
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	460b      	mov	r3, r1
 8012a9e:	70fb      	strb	r3, [r7, #3]
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012aaa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012aac:	78fa      	ldrb	r2, [r7, #3]
 8012aae:	68f9      	ldr	r1, [r7, #12]
 8012ab0:	4613      	mov	r3, r2
 8012ab2:	011b      	lsls	r3, r3, #4
 8012ab4:	1a9b      	subs	r3, r3, r2
 8012ab6:	009b      	lsls	r3, r3, #2
 8012ab8:	440b      	add	r3, r1
 8012aba:	3317      	adds	r3, #23
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d00a      	beq.n	8012ad8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012ac2:	78fa      	ldrb	r2, [r7, #3]
 8012ac4:	68f9      	ldr	r1, [r7, #12]
 8012ac6:	4613      	mov	r3, r2
 8012ac8:	011b      	lsls	r3, r3, #4
 8012aca:	1a9b      	subs	r3, r3, r2
 8012acc:	009b      	lsls	r3, r3, #2
 8012ace:	440b      	add	r3, r1
 8012ad0:	333c      	adds	r3, #60	@ 0x3c
 8012ad2:	78ba      	ldrb	r2, [r7, #2]
 8012ad4:	701a      	strb	r2, [r3, #0]
 8012ad6:	e009      	b.n	8012aec <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012ad8:	78fa      	ldrb	r2, [r7, #3]
 8012ada:	68f9      	ldr	r1, [r7, #12]
 8012adc:	4613      	mov	r3, r2
 8012ade:	011b      	lsls	r3, r3, #4
 8012ae0:	1a9b      	subs	r3, r3, r2
 8012ae2:	009b      	lsls	r3, r3, #2
 8012ae4:	440b      	add	r3, r1
 8012ae6:	333d      	adds	r3, #61	@ 0x3d
 8012ae8:	78ba      	ldrb	r2, [r7, #2]
 8012aea:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012aec:	2300      	movs	r3, #0
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3714      	adds	r7, #20
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr

08012afa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012afa:	b580      	push	{r7, lr}
 8012afc:	b082      	sub	sp, #8
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f7f1 fa5a 	bl	8003fbc <HAL_Delay>
}
 8012b08:	bf00      	nop
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012b10:	b480      	push	{r7}
 8012b12:	b085      	sub	sp, #20
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	4603      	mov	r3, r0
 8012b18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012b1e:	79fb      	ldrb	r3, [r7, #7]
 8012b20:	2b03      	cmp	r3, #3
 8012b22:	d817      	bhi.n	8012b54 <USBH_Get_USB_Status+0x44>
 8012b24:	a201      	add	r2, pc, #4	@ (adr r2, 8012b2c <USBH_Get_USB_Status+0x1c>)
 8012b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b2a:	bf00      	nop
 8012b2c:	08012b3d 	.word	0x08012b3d
 8012b30:	08012b43 	.word	0x08012b43
 8012b34:	08012b49 	.word	0x08012b49
 8012b38:	08012b4f 	.word	0x08012b4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8012b40:	e00b      	b.n	8012b5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012b42:	2302      	movs	r3, #2
 8012b44:	73fb      	strb	r3, [r7, #15]
    break;
 8012b46:	e008      	b.n	8012b5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012b48:	2301      	movs	r3, #1
 8012b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8012b4c:	e005      	b.n	8012b5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012b4e:	2302      	movs	r3, #2
 8012b50:	73fb      	strb	r3, [r7, #15]
    break;
 8012b52:	e002      	b.n	8012b5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012b54:	2302      	movs	r3, #2
 8012b56:	73fb      	strb	r3, [r7, #15]
    break;
 8012b58:	bf00      	nop
  }
  return usb_status;
 8012b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3714      	adds	r7, #20
 8012b60:	46bd      	mov	sp, r7
 8012b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b66:	4770      	bx	lr

08012b68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	4603      	mov	r3, r0
 8012b70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012b72:	79fb      	ldrb	r3, [r7, #7]
 8012b74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012b76:	79fb      	ldrb	r3, [r7, #7]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d102      	bne.n	8012b82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	73fb      	strb	r3, [r7, #15]
 8012b80:	e001      	b.n	8012b86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8012b82:	2301      	movs	r3, #1
 8012b84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8012b86:	7bfb      	ldrb	r3, [r7, #15]
 8012b88:	461a      	mov	r2, r3
 8012b8a:	2101      	movs	r1, #1
 8012b8c:	4803      	ldr	r0, [pc, #12]	@ (8012b9c <MX_DriverVbusFS+0x34>)
 8012b8e:	f7f3 f8d9 	bl	8005d44 <HAL_GPIO_WritePin>
}
 8012b92:	bf00      	nop
 8012b94:	3710      	adds	r7, #16
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	40020800 	.word	0x40020800

08012ba0 <Send_TO_BLE>:

uint32_t readFlashedYEAR[flashIdxNo*flashAddNo];  //49
int YEARindices[7] = {6, 13, 20, 27, 34, 41, 48};
uint32_t extracted_YEAR[7]; // Array to store 7 ID numbers

void Send_TO_BLE(void){			//data to ESP ==> huart3
 8012ba0:	b590      	push	{r4, r7, lr}
 8012ba2:	b0c9      	sub	sp, #292	@ 0x124
 8012ba4:	af02      	add	r7, sp, #8

	//aci_gatt_update_char_value(service_handle, char_handle, 0, 1,&myCustomData[1]);

	ExtractDATA();          //Extract and read Bil,ID, TIME and YEAR from flash
 8012ba6:	f000 f8d9 	bl	8012d5c <ExtractDATA>

	char chunk[200];  		// Buffer for Chunks to be sent	//			!!! INCREASE MTU  *****//
							// Min Buffer Size to send All data ==> (5+9+9+3)*(7) = 182
	memset(chunk, 0, sizeof(chunk));  // Clear the buffer
 8012baa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8012bae:	22c8      	movs	r2, #200	@ 0xc8
 8012bb0:	2100      	movs	r1, #0
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f003 fa99 	bl	80160ea <memset>
	//memset(Bil_msg2, 0, sizeof(Bil_msg2));
	for (int i = 0; i < 7; i++) {
 8012bb8:	2300      	movs	r3, #0
 8012bba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8012bbe:	e01f      	b.n	8012c00 <Send_TO_BLE+0x60>
		char Bil_msg[10];
		snprintf(Bil_msg, sizeof(Bil_msg), "\n%.2f", extracted_Bil[i]);
 8012bc0:	4a5e      	ldr	r2, [pc, #376]	@ (8012d3c <Send_TO_BLE+0x19c>)
 8012bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012bc6:	009b      	lsls	r3, r3, #2
 8012bc8:	4413      	add	r3, r2
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7ed fccb 	bl	8000568 <__aeabi_f2d>
 8012bd2:	4602      	mov	r2, r0
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8012bda:	e9cd 2300 	strd	r2, r3, [sp]
 8012bde:	4a58      	ldr	r2, [pc, #352]	@ (8012d40 <Send_TO_BLE+0x1a0>)
 8012be0:	210a      	movs	r1, #10
 8012be2:	f003 f9f1 	bl	8015fc8 <sniprintf>
		strcat(chunk, Bil_msg);  // Append each value to the main message buffer
 8012be6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012bea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8012bee:	4611      	mov	r1, r2
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f003 fa82 	bl	80160fa <strcat>
	for (int i = 0; i < 7; i++) {
 8012bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8012c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c04:	2b06      	cmp	r3, #6
 8012c06:	dddb      	ble.n	8012bc0 <Send_TO_BLE+0x20>
	}
	for (int i = 0; i < 7; i++) {
 8012c08:	2300      	movs	r3, #0
 8012c0a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8012c0e:	e017      	b.n	8012c40 <Send_TO_BLE+0xa0>
		char ID_msg[15];
		snprintf(ID_msg, sizeof(ID_msg), "\n%lu", extracted_ID[i]);
 8012c10:	4a4c      	ldr	r2, [pc, #304]	@ (8012d44 <Send_TO_BLE+0x1a4>)
 8012c12:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c1a:	f107 0018 	add.w	r0, r7, #24
 8012c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8012d48 <Send_TO_BLE+0x1a8>)
 8012c20:	210f      	movs	r1, #15
 8012c22:	f003 f9d1 	bl	8015fc8 <sniprintf>
		strcat(chunk, ID_msg);  // Append each value to the main message buffer
 8012c26:	f107 0218 	add.w	r2, r7, #24
 8012c2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8012c2e:	4611      	mov	r1, r2
 8012c30:	4618      	mov	r0, r3
 8012c32:	f003 fa62 	bl	80160fa <strcat>
	for (int i = 0; i < 7; i++) {
 8012c36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8012c40:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012c44:	2b06      	cmp	r3, #6
 8012c46:	dde3      	ble.n	8012c10 <Send_TO_BLE+0x70>
	}
	for (int i = 0; i < 7; i++) {
 8012c48:	2300      	movs	r3, #0
 8012c4a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8012c4e:	e017      	b.n	8012c80 <Send_TO_BLE+0xe0>
		char TIME_msg[15];
		snprintf(TIME_msg, sizeof(TIME_msg), "\n%lu", extracted_TIME[i]);
 8012c50:	4a3e      	ldr	r2, [pc, #248]	@ (8012d4c <Send_TO_BLE+0x1ac>)
 8012c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c5a:	f107 0008 	add.w	r0, r7, #8
 8012c5e:	4a3a      	ldr	r2, [pc, #232]	@ (8012d48 <Send_TO_BLE+0x1a8>)
 8012c60:	210f      	movs	r1, #15
 8012c62:	f003 f9b1 	bl	8015fc8 <sniprintf>
		strcat(chunk, TIME_msg);  // Append each value to the main message buffer
 8012c66:	f107 0208 	add.w	r2, r7, #8
 8012c6a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8012c6e:	4611      	mov	r1, r2
 8012c70:	4618      	mov	r0, r3
 8012c72:	f003 fa42 	bl	80160fa <strcat>
	for (int i = 0; i < 7; i++) {
 8012c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012c7a:	3301      	adds	r3, #1
 8012c7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8012c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012c84:	2b06      	cmp	r3, #6
 8012c86:	dde3      	ble.n	8012c50 <Send_TO_BLE+0xb0>
	}
	for (int i = 0; i < 7; i++) {
 8012c88:	2300      	movs	r3, #0
 8012c8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8012c8e:	e015      	b.n	8012cbc <Send_TO_BLE+0x11c>
		char YEAR_msg[5];
		snprintf(YEAR_msg, sizeof(YEAR_msg), "\n%lu", extracted_YEAR[i]);
 8012c90:	4a2f      	ldr	r2, [pc, #188]	@ (8012d50 <Send_TO_BLE+0x1b0>)
 8012c92:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c9a:	4638      	mov	r0, r7
 8012c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8012d48 <Send_TO_BLE+0x1a8>)
 8012c9e:	2105      	movs	r1, #5
 8012ca0:	f003 f992 	bl	8015fc8 <sniprintf>
		strcat(chunk, YEAR_msg);  // Append each value to the main message buffer
 8012ca4:	463a      	mov	r2, r7
 8012ca6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8012caa:	4611      	mov	r1, r2
 8012cac:	4618      	mov	r0, r3
 8012cae:	f003 fa24 	bl	80160fa <strcat>
	for (int i = 0; i < 7; i++) {
 8012cb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8012cbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012cc0:	2b06      	cmp	r3, #6
 8012cc2:	dde5      	ble.n	8012c90 <Send_TO_BLE+0xf0>
	}
	// Send the data in chunks if it exceeds MTU size (20 bytes)
	int data_len = strlen(chunk);
 8012cc4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7ed fae1 	bl	8000290 <strlen>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	int offset = 0;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	while (data_len > 0) {
 8012cda:	e025      	b.n	8012d28 <Send_TO_BLE+0x188>
		int chunk_size =(data_len > 20) ? 20 : data_len;  // Max chunk size is 20 bytes
 8012cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ce0:	2b14      	cmp	r3, #20
 8012ce2:	bfa8      	it	ge
 8012ce4:	2314      	movge	r3, #20
 8012ce6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
		aci_gatt_update_char_value(service_handle, char_handle, 0, chunk_size, (uint8_t*)(chunk + offset)); //offset
 8012cea:	4b1a      	ldr	r3, [pc, #104]	@ (8012d54 <Send_TO_BLE+0x1b4>)
 8012cec:	8818      	ldrh	r0, [r3, #0]
 8012cee:	4b1a      	ldr	r3, [pc, #104]	@ (8012d58 <Send_TO_BLE+0x1b8>)
 8012cf0:	8819      	ldrh	r1, [r3, #0]
 8012cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012cf6:	b2dc      	uxtb	r4, r3
 8012cf8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8012cfc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8012d00:	4413      	add	r3, r2
 8012d02:	9300      	str	r3, [sp, #0]
 8012d04:	4623      	mov	r3, r4
 8012d06:	2200      	movs	r2, #0
 8012d08:	f7fc faa5 	bl	800f256 <aci_gatt_update_char_value>
		offset += chunk_size;
 8012d0c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8012d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d14:	4413      	add	r3, r2
 8012d16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		data_len -= chunk_size;
 8012d1a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8012d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d22:	1ad3      	subs	r3, r2, r3
 8012d24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	while (data_len > 0) {
 8012d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	dcd5      	bgt.n	8012cdc <Send_TO_BLE+0x13c>
	}
}
 8012d30:	bf00      	nop
 8012d32:	bf00      	nop
 8012d34:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd90      	pop	{r4, r7, pc}
 8012d3c:	20001b8c 	.word	0x20001b8c
 8012d40:	0801816c 	.word	0x0801816c
 8012d44:	20001c6c 	.word	0x20001c6c
 8012d48:	08018174 	.word	0x08018174
 8012d4c:	20001d4c 	.word	0x20001d4c
 8012d50:	20001e2c 	.word	0x20001e2c
 8012d54:	2000273e 	.word	0x2000273e
 8012d58:	20002740 	.word	0x20002740

08012d5c <ExtractDATA>:
uint8_t date = (extracted_TIME >> 8) & 0xFF;     // Extract the next 8 bits (date)
uint8_t month = extracted_TIME & 0xFF;           // Extract the least significant 8 bits (month)
 *******************************************************************************************************
 */

void ExtractDATA(void) {
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b086      	sub	sp, #24
 8012d60:	af00      	add	r7, sp, #0

	ReadBilResultsFromFlash(readFlashedBil); // to read BIL _ float
 8012d62:	483f      	ldr	r0, [pc, #252]	@ (8012e60 <ExtractDATA+0x104>)
 8012d64:	f000 faca 	bl	80132fc <ReadBilResultsFromFlash>
	ReadBilResultsFromFlash(readFlashedID);  // to read ID _ char
 8012d68:	483e      	ldr	r0, [pc, #248]	@ (8012e64 <ExtractDATA+0x108>)
 8012d6a:	f000 fac7 	bl	80132fc <ReadBilResultsFromFlash>
	ReadBilResultsFromFlash(readFlashedTIME);  // to read RTC _ uint8_t
 8012d6e:	483e      	ldr	r0, [pc, #248]	@ (8012e68 <ExtractDATA+0x10c>)
 8012d70:	f000 fac4 	bl	80132fc <ReadBilResultsFromFlash>
	ReadBilResultsFromFlash(readFlashedYEAR);  // to read RTC _ uint8_t
 8012d74:	483d      	ldr	r0, [pc, #244]	@ (8012e6c <ExtractDATA+0x110>)
 8012d76:	f000 fac1 	bl	80132fc <ReadBilResultsFromFlash>

	for (int i = 0; i < 7; i++) {
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	617b      	str	r3, [r7, #20]
 8012d7e:	e029      	b.n	8012dd4 <ExtractDATA+0x78>
		uint32_t tempID = 0;
 8012d80:	2300      	movs	r3, #0
 8012d82:	613b      	str	r3, [r7, #16]
		// Convert the 8 consecutive characters into a number
		for (int j = 0; j < 8; j++) {
 8012d84:	2300      	movs	r3, #0
 8012d86:	60fb      	str	r3, [r7, #12]
 8012d88:	e013      	b.n	8012db2 <ExtractDATA+0x56>
			tempID = tempID * 10 + (readFlashedID[IDindices[i] + j] - '0'); // Convert char to int
 8012d8a:	693a      	ldr	r2, [r7, #16]
 8012d8c:	4613      	mov	r3, r2
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	4413      	add	r3, r2
 8012d92:	005b      	lsls	r3, r3, #1
 8012d94:	4619      	mov	r1, r3
 8012d96:	4a36      	ldr	r2, [pc, #216]	@ (8012e70 <ExtractDATA+0x114>)
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	4413      	add	r3, r2
 8012da2:	4a30      	ldr	r2, [pc, #192]	@ (8012e64 <ExtractDATA+0x108>)
 8012da4:	5cd3      	ldrb	r3, [r2, r3]
 8012da6:	440b      	add	r3, r1
 8012da8:	3b30      	subs	r3, #48	@ 0x30
 8012daa:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < 8; j++) {
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	3301      	adds	r3, #1
 8012db0:	60fb      	str	r3, [r7, #12]
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	2b07      	cmp	r3, #7
 8012db6:	dde8      	ble.n	8012d8a <ExtractDATA+0x2e>
		}
		if(tempID==3761633968) tempID = 0;                 // if user didn't scan ID prior the test -> ID=0;
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	4a2e      	ldr	r2, [pc, #184]	@ (8012e74 <ExtractDATA+0x118>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d101      	bne.n	8012dc4 <ExtractDATA+0x68>
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	613b      	str	r3, [r7, #16]
		extracted_ID[i] = tempID; 						   // Store in the ID array
 8012dc4:	492c      	ldr	r1, [pc, #176]	@ (8012e78 <ExtractDATA+0x11c>)
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	693a      	ldr	r2, [r7, #16]
 8012dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 7; i++) {
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	617b      	str	r3, [r7, #20]
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	2b06      	cmp	r3, #6
 8012dd8:	ddd2      	ble.n	8012d80 <ExtractDATA+0x24>
	}
	for (int i = 0; i < 7; i++) {
 8012dda:	2300      	movs	r3, #0
 8012ddc:	60bb      	str	r3, [r7, #8]
 8012dde:	e00f      	b.n	8012e00 <ExtractDATA+0xa4>
		extracted_Bil[i] = readFlashedBil[BILindices[i]];  // Copy value at the given index
 8012de0:	4a26      	ldr	r2, [pc, #152]	@ (8012e7c <ExtractDATA+0x120>)
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012de8:	4a1d      	ldr	r2, [pc, #116]	@ (8012e60 <ExtractDATA+0x104>)
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	4413      	add	r3, r2
 8012dee:	681a      	ldr	r2, [r3, #0]
 8012df0:	4923      	ldr	r1, [pc, #140]	@ (8012e80 <ExtractDATA+0x124>)
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	009b      	lsls	r3, r3, #2
 8012df6:	440b      	add	r3, r1
 8012df8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 7; i++) {
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	60bb      	str	r3, [r7, #8]
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	2b06      	cmp	r3, #6
 8012e04:	ddec      	ble.n	8012de0 <ExtractDATA+0x84>
	}
	for (int i = 0; i < 7; i++) {
 8012e06:	2300      	movs	r3, #0
 8012e08:	607b      	str	r3, [r7, #4]
 8012e0a:	e00d      	b.n	8012e28 <ExtractDATA+0xcc>
		extracted_TIME[i] = readFlashedTIME[TIMEindices[i]];  // Copy value at the given index
 8012e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8012e84 <ExtractDATA+0x128>)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e14:	4a14      	ldr	r2, [pc, #80]	@ (8012e68 <ExtractDATA+0x10c>)
 8012e16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012e1a:	491b      	ldr	r1, [pc, #108]	@ (8012e88 <ExtractDATA+0x12c>)
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 7; i++) {
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	3301      	adds	r3, #1
 8012e26:	607b      	str	r3, [r7, #4]
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2b06      	cmp	r3, #6
 8012e2c:	ddee      	ble.n	8012e0c <ExtractDATA+0xb0>
	}
	for (int i = 0; i < 7; i++) {
 8012e2e:	2300      	movs	r3, #0
 8012e30:	603b      	str	r3, [r7, #0]
 8012e32:	e00d      	b.n	8012e50 <ExtractDATA+0xf4>
		extracted_YEAR[i] = readFlashedYEAR[YEARindices[i]];  // Copy value at the given index
 8012e34:	4a15      	ldr	r2, [pc, #84]	@ (8012e8c <ExtractDATA+0x130>)
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8012e6c <ExtractDATA+0x110>)
 8012e3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012e42:	4913      	ldr	r1, [pc, #76]	@ (8012e90 <ExtractDATA+0x134>)
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 7; i++) {
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	603b      	str	r3, [r7, #0]
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	2b06      	cmp	r3, #6
 8012e54:	ddee      	ble.n	8012e34 <ExtractDATA+0xd8>
	}
}
 8012e56:	bf00      	nop
 8012e58:	bf00      	nop
 8012e5a:	3718      	adds	r7, #24
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	20001ac8 	.word	0x20001ac8
 8012e64:	20001ba8 	.word	0x20001ba8
 8012e68:	20001c88 	.word	0x20001c88
 8012e6c:	20001d68 	.word	0x20001d68
 8012e70:	20000060 	.word	0x20000060
 8012e74:	e035fab0 	.word	0xe035fab0
 8012e78:	20001c6c 	.word	0x20001c6c
 8012e7c:	20000044 	.word	0x20000044
 8012e80:	20001b8c 	.word	0x20001b8c
 8012e84:	2000007c 	.word	0x2000007c
 8012e88:	20001d4c 	.word	0x20001d4c
 8012e8c:	20000098 	.word	0x20000098
 8012e90:	20001e2c 	.word	0x20001e2c

08012e94 <USBH_HID_EventCallback>:
char key;
char Buffered_ID[(BcodeIndecesNO*2)+1] = {0};    //17 // 8 characters
int ID_idx = 0;
char ID[8] = {0};

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost){
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b084      	sub	sp, #16
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_KEYBOARD){
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f7fd fbd4 	bl	801064a <USBH_HID_GetDeviceType>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	2b02      	cmp	r3, #2
 8012ea6:	d10c      	bne.n	8012ec2 <USBH_HID_EventCallback+0x2e>
		HID_KEYBD_Info_TypeDef *Keyboard_Info;
		Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f7fd fd05 	bl	80108b8 <USBH_HID_GetKeybdInfo>
 8012eae:	60f8      	str	r0, [r7, #12]
		key = USBH_HID_GetASCIICode(Keyboard_Info);
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f7fd fda9 	bl	8010a08 <USBH_HID_GetASCIICode>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	461a      	mov	r2, r3
 8012eba:	4b04      	ldr	r3, [pc, #16]	@ (8012ecc <USBH_HID_EventCallback+0x38>)
 8012ebc:	701a      	strb	r2, [r3, #0]
		//int len = sprintf(Uart_Buf, "%c", key);
		//HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, len, 1000);
        process_id();
 8012ebe:	f000 f807 	bl	8012ed0 <process_id>
	}
}
 8012ec2:	bf00      	nop
 8012ec4:	3710      	adds	r7, #16
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}
 8012eca:	bf00      	nop
 8012ecc:	20001e48 	.word	0x20001e48

08012ed0 <process_id>:

void process_id(void){
 8012ed0:	b480      	push	{r7}
 8012ed2:	b083      	sub	sp, #12
 8012ed4:	af00      	add	r7, sp, #0
		Buffered_ID[ID_idx++] = key;
 8012ed6:	4b17      	ldr	r3, [pc, #92]	@ (8012f34 <process_id+0x64>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	1c5a      	adds	r2, r3, #1
 8012edc:	4915      	ldr	r1, [pc, #84]	@ (8012f34 <process_id+0x64>)
 8012ede:	600a      	str	r2, [r1, #0]
 8012ee0:	4a15      	ldr	r2, [pc, #84]	@ (8012f38 <process_id+0x68>)
 8012ee2:	7811      	ldrb	r1, [r2, #0]
 8012ee4:	4a15      	ldr	r2, [pc, #84]	@ (8012f3c <process_id+0x6c>)
 8012ee6:	54d1      	strb	r1, [r2, r3]
		//Buffered_ID[17] = '\0'; // Add null terminator manually	}
		if(ID_idx>=(BcodeIndecesNO*2)+1) ID_idx = 1;
 8012ee8:	4b12      	ldr	r3, [pc, #72]	@ (8012f34 <process_id+0x64>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b10      	cmp	r3, #16
 8012eee:	dd02      	ble.n	8012ef6 <process_id+0x26>
 8012ef0:	4b10      	ldr	r3, [pc, #64]	@ (8012f34 <process_id+0x64>)
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	601a      	str	r2, [r3, #0]

		for (int i=1,j=0; i < (BcodeIndecesNO*2); i+=2,++j) {
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	607b      	str	r3, [r7, #4]
 8012efa:	2300      	movs	r3, #0
 8012efc:	603b      	str	r3, [r7, #0]
 8012efe:	e00e      	b.n	8012f1e <process_id+0x4e>
			ID[j] = Buffered_ID[i];
 8012f00:	4a0e      	ldr	r2, [pc, #56]	@ (8012f3c <process_id+0x6c>)
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	4413      	add	r3, r2
 8012f06:	7819      	ldrb	r1, [r3, #0]
 8012f08:	4a0d      	ldr	r2, [pc, #52]	@ (8012f40 <process_id+0x70>)
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	4413      	add	r3, r2
 8012f0e:	460a      	mov	r2, r1
 8012f10:	701a      	strb	r2, [r3, #0]
		for (int i=1,j=0; i < (BcodeIndecesNO*2); i+=2,++j) {
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	3302      	adds	r3, #2
 8012f16:	607b      	str	r3, [r7, #4]
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	603b      	str	r3, [r7, #0]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2b0f      	cmp	r3, #15
 8012f22:	dded      	ble.n	8012f00 <process_id+0x30>
		}
}
 8012f24:	bf00      	nop
 8012f26:	bf00      	nop
 8012f28:	370c      	adds	r7, #12
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f30:	4770      	bx	lr
 8012f32:	bf00      	nop
 8012f34:	20001e60 	.word	0x20001e60
 8012f38:	20001e48 	.word	0x20001e48
 8012f3c:	20001e4c 	.word	0x20001e4c
 8012f40:	20001e64 	.word	0x20001e64
 8012f44:	00000000 	.word	0x00000000

08012f48 <capture_and_send_data>:
float Bil=0;
float BilResult=0.0;
//uint32_t BilResult =1;

void capture_and_send_data(void)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0

    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 8012f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8013078 <capture_and_send_data+0x130>)
 8012f50:	2200      	movs	r2, #0
 8012f52:	601a      	str	r2, [r3, #0]
 8012f54:	e020      	b.n	8012f98 <capture_and_send_data+0x50>
    {
        HAL_ADC_Start_DMA(&hadc3, &adc_value, 1);
 8012f56:	2201      	movs	r2, #1
 8012f58:	4948      	ldr	r1, [pc, #288]	@ (801307c <capture_and_send_data+0x134>)
 8012f5a:	4849      	ldr	r0, [pc, #292]	@ (8013080 <capture_and_send_data+0x138>)
 8012f5c:	f7f1 f896 	bl	800408c <HAL_ADC_Start_DMA>
        //HAL_Delay(1);
        DWT_Delay(9);
 8012f60:	2009      	movs	r0, #9
 8012f62:	f001 ffe5 	bl	8014f30 <DWT_Delay>
        // Store the adc_value in spectral_data
        spectral_data[idx++] = adc_value;     //- 200; due to Voltage Level difference in ADC on BATT power
 8012f66:	4b47      	ldr	r3, [pc, #284]	@ (8013084 <capture_and_send_data+0x13c>)
 8012f68:	881b      	ldrh	r3, [r3, #0]
 8012f6a:	1c5a      	adds	r2, r3, #1
 8012f6c:	b291      	uxth	r1, r2
 8012f6e:	4a45      	ldr	r2, [pc, #276]	@ (8013084 <capture_and_send_data+0x13c>)
 8012f70:	8011      	strh	r1, [r2, #0]
 8012f72:	4619      	mov	r1, r3
 8012f74:	4b41      	ldr	r3, [pc, #260]	@ (801307c <capture_and_send_data+0x134>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4a43      	ldr	r2, [pc, #268]	@ (8013088 <capture_and_send_data+0x140>)
 8012f7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (idx >= NUM_WAVELENGTHS*2) idx=0;
 8012f7e:	4b41      	ldr	r3, [pc, #260]	@ (8013084 <capture_and_send_data+0x13c>)
 8012f80:	881b      	ldrh	r3, [r3, #0]
 8012f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f86:	d302      	bcc.n	8012f8e <capture_and_send_data+0x46>
 8012f88:	4b3e      	ldr	r3, [pc, #248]	@ (8013084 <capture_and_send_data+0x13c>)
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 8012f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8013078 <capture_and_send_data+0x130>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	3301      	adds	r3, #1
 8012f94:	4a38      	ldr	r2, [pc, #224]	@ (8013078 <capture_and_send_data+0x130>)
 8012f96:	6013      	str	r3, [r2, #0]
 8012f98:	4b37      	ldr	r3, [pc, #220]	@ (8013078 <capture_and_send_data+0x130>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012fa0:	dbd9      	blt.n	8012f56 <capture_and_send_data+0xe>
			spectral_data_256[index2++] = curr_value;
			if (index2 >= Filtered_Spec_Len) index2=0;
		}
	}*/

	sum_filtered_data=0;
 8012fa2:	4b3a      	ldr	r3, [pc, #232]	@ (801308c <capture_and_send_data+0x144>)
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	601a      	str	r2, [r3, #0]
	average_filtered_data=0;
 8012fa8:	4b39      	ldr	r3, [pc, #228]	@ (8013090 <capture_and_send_data+0x148>)
 8012faa:	f04f 0200 	mov.w	r2, #0
 8012fae:	601a      	str	r2, [r3, #0]
	// Calculate the average of the filtered data
	for (int i = main_spec_start; i < main_spec_end; i++)
 8012fb0:	2363      	movs	r3, #99	@ 0x63
 8012fb2:	607b      	str	r3, [r7, #4]
 8012fb4:	e00b      	b.n	8012fce <capture_and_send_data+0x86>
	{   //45 main samples
		sum_filtered_data += spectral_data[i];
 8012fb6:	4a34      	ldr	r2, [pc, #208]	@ (8013088 <capture_and_send_data+0x140>)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012fbe:	4b33      	ldr	r3, [pc, #204]	@ (801308c <capture_and_send_data+0x144>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	4413      	add	r3, r2
 8012fc4:	4a31      	ldr	r2, [pc, #196]	@ (801308c <capture_and_send_data+0x144>)
 8012fc6:	6013      	str	r3, [r2, #0]
	for (int i = main_spec_start; i < main_spec_end; i++)
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	607b      	str	r3, [r7, #4]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2b90      	cmp	r3, #144	@ 0x90
 8012fd2:	ddf0      	ble.n	8012fb6 <capture_and_send_data+0x6e>
	}
	//if (index2 > 0)
	{
		average_filtered_data = (float)sum_filtered_data / (main_spec_end-main_spec_start);
 8012fd4:	4b2d      	ldr	r3, [pc, #180]	@ (801308c <capture_and_send_data+0x144>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	ee07 3a90 	vmov	s15, r3
 8012fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012fe0:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8013094 <capture_and_send_data+0x14c>
 8012fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012fe8:	4b29      	ldr	r3, [pc, #164]	@ (8013090 <capture_and_send_data+0x148>)
 8012fea:	edc3 7a00 	vstr	s15, [r3]
		 average_Reflectance = (float)sum_Reflectance / (main_spec_end-main_spec_start);
	}*/

	//BilResult[0] = average_Reflectance*3;
	//BilResult[0]=(1.7016*average_Reflectance*average_Reflectance)-(20.6755*average_Reflectance)+(66.9023);
	 BilResult = (average_filtered_data-478)/120;     //avgSpecAtBlank_Ref = 478   //CalFactor=56;//80
 8012fee:	4b28      	ldr	r3, [pc, #160]	@ (8013090 <capture_and_send_data+0x148>)
 8012ff0:	edd3 7a00 	vldr	s15, [r3]
 8012ff4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8013098 <capture_and_send_data+0x150>
 8012ff8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8012ffc:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801309c <capture_and_send_data+0x154>
 8013000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013004:	4b26      	ldr	r3, [pc, #152]	@ (80130a0 <capture_and_send_data+0x158>)
 8013006:	edc3 7a00 	vstr	s15, [r3]
	 if(BilResult<=0.1) {
 801300a:	4b25      	ldr	r3, [pc, #148]	@ (80130a0 <capture_and_send_data+0x158>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	4618      	mov	r0, r3
 8013010:	f7ed faaa 	bl	8000568 <__aeabi_f2d>
 8013014:	a316      	add	r3, pc, #88	@ (adr r3, 8013070 <capture_and_send_data+0x128>)
 8013016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301a:	f7ed fd79 	bl	8000b10 <__aeabi_dcmple>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d01b      	beq.n	801305c <capture_and_send_data+0x114>
		 HAL_GPIO_WritePin(SPEC_LED_GPIO_Port, SPEC_LED_Pin, GPIO_PIN_RESET);
 8013024:	2200      	movs	r2, #0
 8013026:	2180      	movs	r1, #128	@ 0x80
 8013028:	481e      	ldr	r0, [pc, #120]	@ (80130a4 <capture_and_send_data+0x15c>)
 801302a:	f7f2 fe8b 	bl	8005d44 <HAL_GPIO_WritePin>
		 testDone = 0;
 801302e:	4b1e      	ldr	r3, [pc, #120]	@ (80130a8 <capture_and_send_data+0x160>)
 8013030:	2200      	movs	r2, #0
 8013032:	701a      	strb	r2, [r3, #0]
		 BilResult=0;
 8013034:	4b1a      	ldr	r3, [pc, #104]	@ (80130a0 <capture_and_send_data+0x158>)
 8013036:	f04f 0200 	mov.w	r2, #0
 801303a:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(ERR_BUZZER_GPIO_Port, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 801303c:	2201      	movs	r2, #1
 801303e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8013042:	481a      	ldr	r0, [pc, #104]	@ (80130ac <capture_and_send_data+0x164>)
 8013044:	f7f2 fe7e 	bl	8005d44 <HAL_GPIO_WritePin>
		 HAL_Delay(200);
 8013048:	20c8      	movs	r0, #200	@ 0xc8
 801304a:	f7f0 ffb7 	bl	8003fbc <HAL_Delay>
		 HAL_GPIO_WritePin(ERR_BUZZER_GPIO_Port, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 801304e:	2200      	movs	r2, #0
 8013050:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8013054:	4815      	ldr	r0, [pc, #84]	@ (80130ac <capture_and_send_data+0x164>)
 8013056:	f7f2 fe75 	bl	8005d44 <HAL_GPIO_WritePin>
      //len = sizeof(spectral_data[j]);

      HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(spectral_data[j]), HAL_MAX_DELAY);    //to ESP

    }*/
}
 801305a:	e002      	b.n	8013062 <capture_and_send_data+0x11a>
	 testDone = 1;
 801305c:	4b12      	ldr	r3, [pc, #72]	@ (80130a8 <capture_and_send_data+0x160>)
 801305e:	2201      	movs	r2, #1
 8013060:	701a      	strb	r2, [r3, #0]
}
 8013062:	bf00      	nop
 8013064:	3708      	adds	r7, #8
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	f3af 8000 	nop.w
 8013070:	9999999a 	.word	0x9999999a
 8013074:	3fb99999 	.word	0x3fb99999
 8013078:	20002674 	.word	0x20002674
 801307c:	2000266c 	.word	0x2000266c
 8013080:	200004d4 	.word	0x200004d4
 8013084:	20002670 	.word	0x20002670
 8013088:	20001e6c 	.word	0x20001e6c
 801308c:	20002678 	.word	0x20002678
 8013090:	2000267c 	.word	0x2000267c
 8013094:	42380000 	.word	0x42380000
 8013098:	43ef0000 	.word	0x43ef0000
 801309c:	42f00000 	.word	0x42f00000
 80130a0:	20002680 	.word	0x20002680
 80130a4:	40020000 	.word	0x40020000
 80130a8:	20002672 	.word	0x20002672
 80130ac:	40021000 	.word	0x40021000

080130b0 <FindLastBilResultIndex>:
// Internal variables
static uint32_t flash_index = 0;  // Index for the circular buffer
static uint32_t sequenceNumber = 0;  // Global sequence number for entries

// Function to find the last valid BIL reading index across multiple sectors
void FindLastBilResultIndex(void) {
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
    uint32_t maxSequence = 0;
 80130b6:	2300      	movs	r3, #0
 80130b8:	60fb      	str	r3, [r7, #12]
    flash_index = 0;
 80130ba:	4b1a      	ldr	r3, [pc, #104]	@ (8013124 <FindLastBilResultIndex+0x74>)
 80130bc:	2200      	movs	r2, #0
 80130be:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 80130c0:	2300      	movs	r3, #0
 80130c2:	60bb      	str	r3, [r7, #8]
 80130c4:	e01c      	b.n	8013100 <FindLastBilResultIndex+0x50>
        uint32_t sectorBaseAddress = GetSectorAddress(i + FLASH_START_SECTOR);
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	3305      	adds	r3, #5
 80130ca:	4618      	mov	r0, r3
 80130cc:	f000 f966 	bl	801339c <GetSectorAddress>
 80130d0:	6078      	str	r0, [r7, #4]
        FlashEntry* entry = (FlashEntry*)sectorBaseAddress;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	603b      	str	r3, [r7, #0]

        if (entry->magic == MAGIC_NUMBER) {
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 80130de:	d10c      	bne.n	80130fa <FindLastBilResultIndex+0x4a>
            if (entry->sequence > maxSequence) {
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	68fa      	ldr	r2, [r7, #12]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d207      	bcs.n	80130fa <FindLastBilResultIndex+0x4a>
                maxSequence = entry->sequence;
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	685b      	ldr	r3, [r3, #4]
 80130ee:	60fb      	str	r3, [r7, #12]
                flash_index = i + 1;
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	3301      	adds	r3, #1
 80130f4:	461a      	mov	r2, r3
 80130f6:	4b0b      	ldr	r3, [pc, #44]	@ (8013124 <FindLastBilResultIndex+0x74>)
 80130f8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	3301      	adds	r3, #1
 80130fe:	60bb      	str	r3, [r7, #8]
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	2b06      	cmp	r3, #6
 8013104:	dddf      	ble.n	80130c6 <FindLastBilResultIndex+0x16>
            }
        }
    }

    // Wrap around if the index exceeds the max entries
    if (flash_index >= MAX_BIL_READINGS) {
 8013106:	4b07      	ldr	r3, [pc, #28]	@ (8013124 <FindLastBilResultIndex+0x74>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	2b06      	cmp	r3, #6
 801310c:	d902      	bls.n	8013114 <FindLastBilResultIndex+0x64>
        flash_index = 0;
 801310e:	4b05      	ldr	r3, [pc, #20]	@ (8013124 <FindLastBilResultIndex+0x74>)
 8013110:	2200      	movs	r2, #0
 8013112:	601a      	str	r2, [r3, #0]
    }

    // Set the global sequenceNumber to maxSequence + 1
    sequenceNumber = maxSequence + 1;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	3301      	adds	r3, #1
 8013118:	4a03      	ldr	r2, [pc, #12]	@ (8013128 <FindLastBilResultIndex+0x78>)
 801311a:	6013      	str	r3, [r2, #0]
}
 801311c:	bf00      	nop
 801311e:	3710      	adds	r7, #16
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	20002684 	.word	0x20002684
 8013128:	20002688 	.word	0x20002688

0801312c <SaveBilResultToFlash>:

// Function to save BIL result to flash at the next sector
void SaveBilResultToFlash(void) {
 801312c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013130:	b094      	sub	sp, #80	@ 0x50
 8013132:	af04      	add	r7, sp, #16
    uint32_t sector = FLASH_START_SECTOR + flash_index;
 8013134:	4b64      	ldr	r3, [pc, #400]	@ (80132c8 <SaveBilResultToFlash+0x19c>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	3305      	adds	r3, #5
 801313a:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Erase the current sector before writing
    EraseFlashSector(sector);
 801313c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801313e:	f000 f90e 	bl	801335e <EraseFlashSector>

    RTC_GetTime(&hours, &minutes, &seconds, &day, &date, &month, &year);   //**//
 8013142:	4b62      	ldr	r3, [pc, #392]	@ (80132cc <SaveBilResultToFlash+0x1a0>)
 8013144:	9302      	str	r3, [sp, #8]
 8013146:	4b62      	ldr	r3, [pc, #392]	@ (80132d0 <SaveBilResultToFlash+0x1a4>)
 8013148:	9301      	str	r3, [sp, #4]
 801314a:	4b62      	ldr	r3, [pc, #392]	@ (80132d4 <SaveBilResultToFlash+0x1a8>)
 801314c:	9300      	str	r3, [sp, #0]
 801314e:	4b62      	ldr	r3, [pc, #392]	@ (80132d8 <SaveBilResultToFlash+0x1ac>)
 8013150:	4a62      	ldr	r2, [pc, #392]	@ (80132dc <SaveBilResultToFlash+0x1b0>)
 8013152:	4963      	ldr	r1, [pc, #396]	@ (80132e0 <SaveBilResultToFlash+0x1b4>)
 8013154:	4863      	ldr	r0, [pc, #396]	@ (80132e4 <SaveBilResultToFlash+0x1b8>)
 8013156:	f001 fd5f 	bl	8014c18 <RTC_GetTime>
    FlashEntry entry;
    entry.magic = MAGIC_NUMBER;
 801315a:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 801315e:	61bb      	str	r3, [r7, #24]
    entry.sequence = sequenceNumber++;
 8013160:	4b61      	ldr	r3, [pc, #388]	@ (80132e8 <SaveBilResultToFlash+0x1bc>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	1c59      	adds	r1, r3, #1
 8013166:	4a60      	ldr	r2, [pc, #384]	@ (80132e8 <SaveBilResultToFlash+0x1bc>)
 8013168:	6011      	str	r1, [r2, #0]
 801316a:	61fb      	str	r3, [r7, #28]
    entry.bilValue = AveragedBil; //BilResult;
 801316c:	4b5f      	ldr	r3, [pc, #380]	@ (80132ec <SaveBilResultToFlash+0x1c0>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	623b      	str	r3, [r7, #32]
    strncpy(entry.patientID, ID, sizeof(entry.patientID));
 8013172:	f107 0318 	add.w	r3, r7, #24
 8013176:	330c      	adds	r3, #12
 8013178:	2208      	movs	r2, #8
 801317a:	495d      	ldr	r1, [pc, #372]	@ (80132f0 <SaveBilResultToFlash+0x1c4>)
 801317c:	4618      	mov	r0, r3
 801317e:	f002 ffcb 	bl	8016118 <strncpy>
    // Copy RTC values
	entry.hours = hours;
 8013182:	4b58      	ldr	r3, [pc, #352]	@ (80132e4 <SaveBilResultToFlash+0x1b8>)
 8013184:	781b      	ldrb	r3, [r3, #0]
 8013186:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	entry.minutes = minutes;
 801318a:	4b55      	ldr	r3, [pc, #340]	@ (80132e0 <SaveBilResultToFlash+0x1b4>)
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	entry.date = date;
 8013192:	4b50      	ldr	r3, [pc, #320]	@ (80132d4 <SaveBilResultToFlash+0x1a8>)
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	entry.month = month;
 801319a:	4b4d      	ldr	r3, [pc, #308]	@ (80132d0 <SaveBilResultToFlash+0x1a4>)
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	entry.year = year;
 80131a2:	4b4a      	ldr	r3, [pc, #296]	@ (80132cc <SaveBilResultToFlash+0x1a0>)
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    uint32_t sectorBaseAddress = GetSectorAddress(sector);
 80131aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80131ac:	f000 f8f6 	bl	801339c <GetSectorAddress>
 80131b0:	6378      	str	r0, [r7, #52]	@ 0x34

    HAL_FLASH_Unlock();
 80131b2:	f7f2 f893 	bl	80052dc <HAL_FLASH_Unlock>

    // Write the magic number, sequence number, patient ID, and BIL value
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress, entry.magic);
 80131b6:	69bb      	ldr	r3, [r7, #24]
 80131b8:	2200      	movs	r2, #0
 80131ba:	461c      	mov	r4, r3
 80131bc:	4615      	mov	r5, r2
 80131be:	4622      	mov	r2, r4
 80131c0:	462b      	mov	r3, r5
 80131c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80131c4:	2002      	movs	r0, #2
 80131c6:	f7f2 f835 	bl	8005234 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 4, entry.sequence);
 80131ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131cc:	1d19      	adds	r1, r3, #4
 80131ce:	69fb      	ldr	r3, [r7, #28]
 80131d0:	2200      	movs	r2, #0
 80131d2:	4698      	mov	r8, r3
 80131d4:	4691      	mov	r9, r2
 80131d6:	4642      	mov	r2, r8
 80131d8:	464b      	mov	r3, r9
 80131da:	2002      	movs	r0, #2
 80131dc:	f7f2 f82a 	bl	8005234 <HAL_FLASH_Program>

    for (int i = 0; i < sizeof(entry.patientID); i += 4) {
 80131e0:	2300      	movs	r3, #0
 80131e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131e4:	e016      	b.n	8013214 <SaveBilResultToFlash+0xe8>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 8 + i, *(uint32_t*)&entry.patientID[i]);
 80131e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80131e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131ea:	4413      	add	r3, r2
 80131ec:	f103 0108 	add.w	r1, r3, #8
 80131f0:	f107 0218 	add.w	r2, r7, #24
 80131f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131f6:	3308      	adds	r3, #8
 80131f8:	4413      	add	r3, r2
 80131fa:	3304      	adds	r3, #4
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	2200      	movs	r2, #0
 8013200:	613b      	str	r3, [r7, #16]
 8013202:	617a      	str	r2, [r7, #20]
 8013204:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013208:	2002      	movs	r0, #2
 801320a:	f7f2 f813 	bl	8005234 <HAL_FLASH_Program>
    for (int i = 0; i < sizeof(entry.patientID); i += 4) {
 801320e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013210:	3304      	adds	r3, #4
 8013212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013216:	2b07      	cmp	r3, #7
 8013218:	d9e5      	bls.n	80131e6 <SaveBilResultToFlash+0xba>
    }

    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 16, *(uint32_t*)&entry.bilValue);
 801321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801321c:	f103 0110 	add.w	r1, r3, #16
 8013220:	f107 0318 	add.w	r3, r7, #24
 8013224:	3308      	adds	r3, #8
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	2200      	movs	r2, #0
 801322a:	60bb      	str	r3, [r7, #8]
 801322c:	60fa      	str	r2, [r7, #12]
 801322e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013232:	2002      	movs	r0, #2
 8013234:	f7f1 fffe 	bl	8005234 <HAL_FLASH_Program>

    // Write RTC values (stored as bytes)
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 20,
 8013238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801323a:	f103 0114 	add.w	r1, r3, #20
					 (entry.hours << 24) | (entry.minutes << 16) | (entry.date << 8) | entry.month);
 801323e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013242:	061a      	lsls	r2, r3, #24
 8013244:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013248:	041b      	lsls	r3, r3, #16
 801324a:	431a      	orrs	r2, r3
 801324c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013250:	021b      	lsls	r3, r3, #8
 8013252:	4313      	orrs	r3, r2
 8013254:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8013258:	4313      	orrs	r3, r2
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 20,
 801325a:	17da      	asrs	r2, r3, #31
 801325c:	603b      	str	r3, [r7, #0]
 801325e:	607a      	str	r2, [r7, #4]
 8013260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013264:	2002      	movs	r0, #2
 8013266:	f7f1 ffe5 	bl	8005234 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 24, entry.year);  // year
 801326a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801326c:	f103 0118 	add.w	r1, r3, #24
 8013270:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8013274:	b2db      	uxtb	r3, r3
 8013276:	2200      	movs	r2, #0
 8013278:	469a      	mov	sl, r3
 801327a:	4693      	mov	fp, r2
 801327c:	4652      	mov	r2, sl
 801327e:	465b      	mov	r3, fp
 8013280:	2002      	movs	r0, #2
 8013282:	f7f1 ffd7 	bl	8005234 <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 8013286:	f7f2 f84b 	bl	8005320 <HAL_FLASH_Lock>

    // Update index for the next write
    flash_index = (flash_index + 1) % MAX_BIL_READINGS;
 801328a:	4b0f      	ldr	r3, [pc, #60]	@ (80132c8 <SaveBilResultToFlash+0x19c>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	1c59      	adds	r1, r3, #1
 8013290:	4b18      	ldr	r3, [pc, #96]	@ (80132f4 <SaveBilResultToFlash+0x1c8>)
 8013292:	fba3 2301 	umull	r2, r3, r3, r1
 8013296:	1aca      	subs	r2, r1, r3
 8013298:	0852      	lsrs	r2, r2, #1
 801329a:	4413      	add	r3, r2
 801329c:	089a      	lsrs	r2, r3, #2
 801329e:	4613      	mov	r3, r2
 80132a0:	00db      	lsls	r3, r3, #3
 80132a2:	1a9b      	subs	r3, r3, r2
 80132a4:	1aca      	subs	r2, r1, r3
 80132a6:	4b08      	ldr	r3, [pc, #32]	@ (80132c8 <SaveBilResultToFlash+0x19c>)
 80132a8:	601a      	str	r2, [r3, #0]
    //for (int i = 0; i < 8; i++) ID[i] = 0;  // Reset ID or // memset(ID, 0, sizeof(ID));
    memset(ID, 0, sizeof(ID));
 80132aa:	2208      	movs	r2, #8
 80132ac:	2100      	movs	r1, #0
 80132ae:	4810      	ldr	r0, [pc, #64]	@ (80132f0 <SaveBilResultToFlash+0x1c4>)
 80132b0:	f002 ff1b 	bl	80160ea <memset>
    memset(Buffered_ID, 0, sizeof(ID));
 80132b4:	2208      	movs	r2, #8
 80132b6:	2100      	movs	r1, #0
 80132b8:	480f      	ldr	r0, [pc, #60]	@ (80132f8 <SaveBilResultToFlash+0x1cc>)
 80132ba:	f002 ff16 	bl	80160ea <memset>
}
 80132be:	bf00      	nop
 80132c0:	3740      	adds	r7, #64	@ 0x40
 80132c2:	46bd      	mov	sp, r7
 80132c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80132c8:	20002684 	.word	0x20002684
 80132cc:	200000d7 	.word	0x200000d7
 80132d0:	200000d6 	.word	0x200000d6
 80132d4:	200000d4 	.word	0x200000d4
 80132d8:	200000d5 	.word	0x200000d5
 80132dc:	200026d2 	.word	0x200026d2
 80132e0:	200026d1 	.word	0x200026d1
 80132e4:	200026d0 	.word	0x200026d0
 80132e8:	20002688 	.word	0x20002688
 80132ec:	200026c0 	.word	0x200026c0
 80132f0:	20001e64 	.word	0x20001e64
 80132f4:	24924925 	.word	0x24924925
 80132f8:	20001e4c 	.word	0x20001e4c

080132fc <ReadBilResultsFromFlash>:

// Function to read all BIL results from flash into a provided array
void ReadBilResultsFromFlash(FlashEntry* readings) {
 80132fc:	b5b0      	push	{r4, r5, r7, lr}
 80132fe:	b086      	sub	sp, #24
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 8013304:	2300      	movs	r3, #0
 8013306:	617b      	str	r3, [r7, #20]
 8013308:	e020      	b.n	801334c <ReadBilResultsFromFlash+0x50>
        uint32_t sectorBaseAddress = GetSectorAddress(i + FLASH_START_SECTOR);
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	3305      	adds	r3, #5
 801330e:	4618      	mov	r0, r3
 8013310:	f000 f844 	bl	801339c <GetSectorAddress>
 8013314:	6138      	str	r0, [r7, #16]
        FlashEntry* entry = (FlashEntry*)sectorBaseAddress;
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	60fb      	str	r3, [r7, #12]

        if (entry->magic != MAGIC_NUMBER) {                //EMPTY flash index
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 8013322:	d117      	bne.n	8013354 <ReadBilResultsFromFlash+0x58>
            break;
        }
        //readings[i] = entry->bilValue;
        readings[i] = *entry;
 8013324:	697a      	ldr	r2, [r7, #20]
 8013326:	4613      	mov	r3, r2
 8013328:	00db      	lsls	r3, r3, #3
 801332a:	1a9b      	subs	r3, r3, r2
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	461a      	mov	r2, r3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	441a      	add	r2, r3
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	4614      	mov	r4, r2
 8013338:	461d      	mov	r5, r3
 801333a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801333c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801333e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	3301      	adds	r3, #1
 801334a:	617b      	str	r3, [r7, #20]
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	2b06      	cmp	r3, #6
 8013350:	dddb      	ble.n	801330a <ReadBilResultsFromFlash+0xe>
    }
}
 8013352:	e000      	b.n	8013356 <ReadBilResultsFromFlash+0x5a>
            break;
 8013354:	bf00      	nop
}
 8013356:	bf00      	nop
 8013358:	3718      	adds	r7, #24
 801335a:	46bd      	mov	sp, r7
 801335c:	bdb0      	pop	{r4, r5, r7, pc}

0801335e <EraseFlashSector>:

// Function to erase a specific flash sector
void EraseFlashSector(uint32_t sector) {
 801335e:	b580      	push	{r7, lr}
 8013360:	b088      	sub	sp, #32
 8013362:	af00      	add	r7, sp, #0
 8013364:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8013366:	f7f1 ffb9 	bl	80052dc <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t SectorError = 0;
 801336a:	2300      	movs	r3, #0
 801336c:	60bb      	str	r3, [r7, #8]

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 801336e:	2300      	movs	r3, #0
 8013370:	60fb      	str	r3, [r7, #12]
    eraseInitStruct.Sector = sector;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	617b      	str	r3, [r7, #20]
    eraseInitStruct.NbSectors = 1;
 8013376:	2301      	movs	r3, #1
 8013378:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 801337a:	2302      	movs	r3, #2
 801337c:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &SectorError) != HAL_OK) {
 801337e:	f107 0208 	add.w	r2, r7, #8
 8013382:	f107 030c 	add.w	r3, r7, #12
 8013386:	4611      	mov	r1, r2
 8013388:	4618      	mov	r0, r3
 801338a:	f7f2 f909 	bl	80055a0 <HAL_FLASHEx_Erase>
        // Handle error
    }
    HAL_FLASH_Lock();
 801338e:	f7f1 ffc7 	bl	8005320 <HAL_FLASH_Lock>
}
 8013392:	bf00      	nop
 8013394:	3720      	adds	r7, #32
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
	...

0801339c <GetSectorAddress>:

// Function to get the base address of a given sector
uint32_t GetSectorAddress(uint32_t sector) {
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
    switch (sector) {
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	3b05      	subs	r3, #5
 80133a8:	2b06      	cmp	r3, #6
 80133aa:	d81f      	bhi.n	80133ec <GetSectorAddress+0x50>
 80133ac:	a201      	add	r2, pc, #4	@ (adr r2, 80133b4 <GetSectorAddress+0x18>)
 80133ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133b2:	bf00      	nop
 80133b4:	080133d1 	.word	0x080133d1
 80133b8:	080133d5 	.word	0x080133d5
 80133bc:	080133d9 	.word	0x080133d9
 80133c0:	080133dd 	.word	0x080133dd
 80133c4:	080133e1 	.word	0x080133e1
 80133c8:	080133e5 	.word	0x080133e5
 80133cc:	080133e9 	.word	0x080133e9
		//case FLASH_SECTOR_1: return 0x08004001;  // Sector 1 (16 KB)
		//case FLASH_SECTOR_2: return 0x08008001;  // Sector 2 (16 KB)
		//case FLASH_SECTOR_3: return 0x0800C000;  // Sector 3 (16 KB)
		//case FLASH_SECTOR_4: return 0x0801FFFF;  // Sector 4 (64 KB)
	    case FLASH_SECTOR_5: return 0x08020000;  // Sector 5 (128 KB)
 80133d0:	4b09      	ldr	r3, [pc, #36]	@ (80133f8 <GetSectorAddress+0x5c>)
 80133d2:	e00b      	b.n	80133ec <GetSectorAddress+0x50>
		case FLASH_SECTOR_6: return 0x08040000;  // Sector 6 (128 KB)
 80133d4:	4b09      	ldr	r3, [pc, #36]	@ (80133fc <GetSectorAddress+0x60>)
 80133d6:	e009      	b.n	80133ec <GetSectorAddress+0x50>
		case FLASH_SECTOR_7: return 0x08060000;  // Sector 7 (128 KB)
 80133d8:	4b09      	ldr	r3, [pc, #36]	@ (8013400 <GetSectorAddress+0x64>)
 80133da:	e007      	b.n	80133ec <GetSectorAddress+0x50>
		case FLASH_SECTOR_8: return 0x08080000;  // Sector 8 (128 KB)
 80133dc:	4b09      	ldr	r3, [pc, #36]	@ (8013404 <GetSectorAddress+0x68>)
 80133de:	e005      	b.n	80133ec <GetSectorAddress+0x50>
		case FLASH_SECTOR_9: return 0x080A0000;  // Sector 9 (128 KB)
 80133e0:	4b09      	ldr	r3, [pc, #36]	@ (8013408 <GetSectorAddress+0x6c>)
 80133e2:	e003      	b.n	80133ec <GetSectorAddress+0x50>
		case FLASH_SECTOR_10: return 0x080C0000;  // Sector 10 (128 KB)
 80133e4:	4b09      	ldr	r3, [pc, #36]	@ (801340c <GetSectorAddress+0x70>)
 80133e6:	e001      	b.n	80133ec <GetSectorAddress+0x50>
		case FLASH_SECTOR_11: return 0x080E0000;  // Sector 11 (128 KB)
 80133e8:	4b09      	ldr	r3, [pc, #36]	@ (8013410 <GetSectorAddress+0x74>)
 80133ea:	e7ff      	b.n	80133ec <GetSectorAddress+0x50>
		// Add more sectors based on your memory layout
		//default: return 0x08000000;  // Invalid sector (default fallback)
		////default: return 0xFFFFFFFF;  // Invalid sector
    }
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	370c      	adds	r7, #12
 80133f0:	46bd      	mov	sp, r7
 80133f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f6:	4770      	bx	lr
 80133f8:	08020000 	.word	0x08020000
 80133fc:	08040000 	.word	0x08040000
 8013400:	08060000 	.word	0x08060000
 8013404:	08080000 	.word	0x08080000
 8013408:	080a0000 	.word	0x080a0000
 801340c:	080c0000 	.word	0x080c0000
 8013410:	080e0000 	.word	0x080e0000

08013414 <LCD>:
uint8_t filterIndex = 0;       			 // Current index in the filter array
float filteredVoltage = 0.0;    		 // Filtered voltage value
int displayPercFlag = 0;

void LCD(void)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	af00      	add	r7, sp, #0
	LCD_DisplayMenu();
 8013418:	f000 f804 	bl	8013424 <LCD_DisplayMenu>
    LCD_HandleButtonPress();
 801341c:	f000 fc6c 	bl	8013cf8 <LCD_HandleButtonPress>
}
 8013420:	bf00      	nop
 8013422:	bd80      	pop	{r7, pc}

08013424 <LCD_DisplayMenu>:


// Function to display the current menu
void LCD_DisplayMenu(void) {
 8013424:	b580      	push	{r7, lr}
 8013426:	b092      	sub	sp, #72	@ 0x48
 8013428:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 801342a:	2000      	movs	r0, #0
 801342c:	f7ef fc40 	bl	8002cb0 <ssd1306_Fill>
    HAL_GPIO_WritePin(READY_LED_GPIO_Port, READY_LED_Pin, GPIO_PIN_RESET); // Turn off Indication LED
 8013430:	2200      	movs	r2, #0
 8013432:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8013436:	48ad      	ldr	r0, [pc, #692]	@ (80136ec <LCD_DisplayMenu+0x2c8>)
 8013438:	f7f2 fc84 	bl	8005d44 <HAL_GPIO_WritePin>
    DisplayPercentage();
 801343c:	f001 f93a 	bl	80146b4 <DisplayPercentage>
    RTC_DisplayTime();
 8013440:	f001 fc4c 	bl	8014cdc <RTC_DisplayTime>
    TimeSetDone=0;
 8013444:	4baa      	ldr	r3, [pc, #680]	@ (80136f0 <LCD_DisplayMenu+0x2cc>)
 8013446:	2200      	movs	r2, #0
 8013448:	601a      	str	r2, [r3, #0]
    //strncpy(entry.patientID, ID, sizeof(entry.patientID));  // Copy the ID
    HAL_GPIO_WritePin(EN_5vReg_GPIO_Port, EN_5vReg_Pin, GPIO_PIN_RESET);                 // Turn off 5v REG
 801344a:	2200      	movs	r2, #0
 801344c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8013450:	48a8      	ldr	r0, [pc, #672]	@ (80136f4 <LCD_DisplayMenu+0x2d0>)
 8013452:	f7f2 fc77 	bl	8005d44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Bcode_INIT_GPIO_Port, Bcode_INIT_Pin, GPIO_PIN_RESET); 				// Turn off Barcode
 8013456:	2200      	movs	r2, #0
 8013458:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801345c:	48a5      	ldr	r0, [pc, #660]	@ (80136f4 <LCD_DisplayMenu+0x2d0>)
 801345e:	f7f2 fc71 	bl	8005d44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BT_INIT_GPIO_Port, BT_INIT_Pin, GPIO_PIN_RESET); 				    // Turn off BT
 8013462:	2200      	movs	r2, #0
 8013464:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8013468:	48a2      	ldr	r0, [pc, #648]	@ (80136f4 <LCD_DisplayMenu+0x2d0>)
 801346a:	f7f2 fc6b 	bl	8005d44 <HAL_GPIO_WritePin>

    switch (currentMenu)
 801346e:	4ba2      	ldr	r3, [pc, #648]	@ (80136f8 <LCD_DisplayMenu+0x2d4>)
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	2b06      	cmp	r3, #6
 8013474:	f200 8408 	bhi.w	8013c88 <LCD_DisplayMenu+0x864>
 8013478:	a201      	add	r2, pc, #4	@ (adr r2, 8013480 <LCD_DisplayMenu+0x5c>)
 801347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801347e:	bf00      	nop
 8013480:	0801349d 	.word	0x0801349d
 8013484:	080134fd 	.word	0x080134fd
 8013488:	080135e9 	.word	0x080135e9
 801348c:	08013797 	.word	0x08013797
 8013490:	080138d3 	.word	0x080138d3
 8013494:	08013b5b 	.word	0x08013b5b
 8013498:	08013a11 	.word	0x08013a11
    {
    	case MENU_START_DEV:
			ssd1306_SetCursor(0, 0);
 801349c:	2100      	movs	r1, #0
 801349e:	2000      	movs	r0, #0
 80134a0:	f7ef fd50 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_DrawBitmap(0,0,image_data_logo_text,128,32, White );          //AYMED text
 80134a4:	2301      	movs	r3, #1
 80134a6:	9301      	str	r3, [sp, #4]
 80134a8:	2320      	movs	r3, #32
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	2380      	movs	r3, #128	@ 0x80
 80134ae:	4a93      	ldr	r2, [pc, #588]	@ (80136fc <LCD_DisplayMenu+0x2d8>)
 80134b0:	2100      	movs	r1, #0
 80134b2:	2000      	movs	r0, #0
 80134b4:	f7ef fdac 	bl	8003010 <ssd1306_DrawBitmap>
			//---------------------------------------------------//
			ssd1306_SetCursor(34, 38);  //48
 80134b8:	2126      	movs	r1, #38	@ 0x26
 80134ba:	2022      	movs	r0, #34	@ 0x22
 80134bc:	f7ef fd42 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("VISHNE v4", Font_7x10, White);					  //Device's Version
 80134c0:	4b8f      	ldr	r3, [pc, #572]	@ (8013700 <LCD_DisplayMenu+0x2dc>)
 80134c2:	2201      	movs	r2, #1
 80134c4:	9200      	str	r2, [sp, #0]
 80134c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80134c8:	488e      	ldr	r0, [pc, #568]	@ (8013704 <LCD_DisplayMenu+0x2e0>)
 80134ca:	f7ef fd15 	bl	8002ef8 <ssd1306_WriteString>
			//---------------------------------------------------//
			ssd1306_SetCursor(5, 55);  //48
 80134ce:	2137      	movs	r1, #55	@ 0x37
 80134d0:	2005      	movs	r0, #5
 80134d2:	f7ef fd37 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("EnterID", Font_6x8, White);		         // Prev btn (left) -> with ID
 80134d6:	4b8c      	ldr	r3, [pc, #560]	@ (8013708 <LCD_DisplayMenu+0x2e4>)
 80134d8:	2201      	movs	r2, #1
 80134da:	9200      	str	r2, [sp, #0]
 80134dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80134de:	488b      	ldr	r0, [pc, #556]	@ (801370c <LCD_DisplayMenu+0x2e8>)
 80134e0:	f7ef fd0a 	bl	8002ef8 <ssd1306_WriteString>
			ssd1306_SetCursor(90, 55);  //48
 80134e4:	2137      	movs	r1, #55	@ 0x37
 80134e6:	205a      	movs	r0, #90	@ 0x5a
 80134e8:	f7ef fd2c 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("SkipID", Font_6x8, White);					 // Next btn (right)-> without ID
 80134ec:	4b86      	ldr	r3, [pc, #536]	@ (8013708 <LCD_DisplayMenu+0x2e4>)
 80134ee:	2201      	movs	r2, #1
 80134f0:	9200      	str	r2, [sp, #0]
 80134f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80134f4:	4886      	ldr	r0, [pc, #536]	@ (8013710 <LCD_DisplayMenu+0x2ec>)
 80134f6:	f7ef fcff 	bl	8002ef8 <ssd1306_WriteString>

    		break;
 80134fa:	e3c5      	b.n	8013c88 <LCD_DisplayMenu+0x864>
      // New menu for scanning patient ID
		case MENU_READ_ID:
			HAL_GPIO_WritePin(EN_5vReg_GPIO_Port, EN_5vReg_Pin, GPIO_PIN_SET);                   // Turn on 5v REG
 80134fc:	2201      	movs	r2, #1
 80134fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8013502:	487c      	ldr	r0, [pc, #496]	@ (80136f4 <LCD_DisplayMenu+0x2d0>)
 8013504:	f7f2 fc1e 	bl	8005d44 <HAL_GPIO_WritePin>
			//HAL_Delay(10);
			HAL_GPIO_WritePin(Bcode_INIT_GPIO_Port, Bcode_INIT_Pin, GPIO_PIN_SET); 				// Turn on BarCode Reader
 8013508:	2201      	movs	r2, #1
 801350a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801350e:	4879      	ldr	r0, [pc, #484]	@ (80136f4 <LCD_DisplayMenu+0x2d0>)
 8013510:	f7f2 fc18 	bl	8005d44 <HAL_GPIO_WritePin>
			ssd1306_SetCursor(5, 56);
 8013514:	2138      	movs	r1, #56	@ 0x38
 8013516:	2005      	movs	r0, #5
 8013518:	f7ef fd14 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 801351c:	4b7a      	ldr	r3, [pc, #488]	@ (8013708 <LCD_DisplayMenu+0x2e4>)
 801351e:	2201      	movs	r2, #1
 8013520:	9200      	str	r2, [sp, #0]
 8013522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013524:	487b      	ldr	r0, [pc, #492]	@ (8013714 <LCD_DisplayMenu+0x2f0>)
 8013526:	f7ef fce7 	bl	8002ef8 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 801352a:	2138      	movs	r1, #56	@ 0x38
 801352c:	2066      	movs	r0, #102	@ 0x66
 801352e:	f7ef fd09 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 8013532:	4b75      	ldr	r3, [pc, #468]	@ (8013708 <LCD_DisplayMenu+0x2e4>)
 8013534:	2201      	movs	r2, #1
 8013536:	9200      	str	r2, [sp, #0]
 8013538:	cb0e      	ldmia	r3, {r1, r2, r3}
 801353a:	4877      	ldr	r0, [pc, #476]	@ (8013718 <LCD_DisplayMenu+0x2f4>)
 801353c:	f7ef fcdc 	bl	8002ef8 <ssd1306_WriteString>
			//ssd1306_SetCursor(10, 0);
			//ssd1306_WriteString("Scan ID", Font_7x10, White);
			ssd1306_SetCursor(10, 15);
 8013540:	210f      	movs	r1, #15
 8013542:	200a      	movs	r0, #10
 8013544:	f7ef fcfe 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("Patient ID:", Font_7x10, White);
 8013548:	4b6d      	ldr	r3, [pc, #436]	@ (8013700 <LCD_DisplayMenu+0x2dc>)
 801354a:	2201      	movs	r2, #1
 801354c:	9200      	str	r2, [sp, #0]
 801354e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013550:	4872      	ldr	r0, [pc, #456]	@ (801371c <LCD_DisplayMenu+0x2f8>)
 8013552:	f7ef fcd1 	bl	8002ef8 <ssd1306_WriteString>
			ssd1306_SetCursor(10, 35);
 8013556:	2123      	movs	r1, #35	@ 0x23
 8013558:	200a      	movs	r0, #10
 801355a:	f7ef fcf3 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString(ID, Font_11x18, White);  //Font_11x18 // Display scanned ID
 801355e:	4b70      	ldr	r3, [pc, #448]	@ (8013720 <LCD_DisplayMenu+0x2fc>)
 8013560:	2201      	movs	r2, #1
 8013562:	9200      	str	r2, [sp, #0]
 8013564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013566:	486f      	ldr	r0, [pc, #444]	@ (8013724 <LCD_DisplayMenu+0x300>)
 8013568:	f7ef fcc6 	bl	8002ef8 <ssd1306_WriteString>

			if (strlen(ID) == 0) {
 801356c:	4b6d      	ldr	r3, [pc, #436]	@ (8013724 <LCD_DisplayMenu+0x300>)
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	2b00      	cmp	r3, #0
 8013572:	f040 8384 	bne.w	8013c7e <LCD_DisplayMenu+0x85a>
				ssd1306_SetCursor(10, 35);
 8013576:	2123      	movs	r1, #35	@ 0x23
 8013578:	200a      	movs	r0, #10
 801357a:	f7ef fce3 	bl	8002f44 <ssd1306_SetCursor>
				//ssd1306_WriteString("Waiting for ID", Font_7x10, White); // Display message if no ID scanned

				// Generate moving dots based on the dotCounter
				switch (dotCounter % 3) {
 801357e:	4b6a      	ldr	r3, [pc, #424]	@ (8013728 <LCD_DisplayMenu+0x304>)
 8013580:	6819      	ldr	r1, [r3, #0]
 8013582:	4b6a      	ldr	r3, [pc, #424]	@ (801372c <LCD_DisplayMenu+0x308>)
 8013584:	fb83 3201 	smull	r3, r2, r3, r1
 8013588:	17cb      	asrs	r3, r1, #31
 801358a:	1ad3      	subs	r3, r2, r3
 801358c:	461a      	mov	r2, r3
 801358e:	0052      	lsls	r2, r2, #1
 8013590:	441a      	add	r2, r3
 8013592:	1a8b      	subs	r3, r1, r2
 8013594:	2b02      	cmp	r3, #2
 8013596:	d016      	beq.n	80135c6 <LCD_DisplayMenu+0x1a2>
 8013598:	2b02      	cmp	r3, #2
 801359a:	dc1c      	bgt.n	80135d6 <LCD_DisplayMenu+0x1b2>
 801359c:	2b00      	cmp	r3, #0
 801359e:	d002      	beq.n	80135a6 <LCD_DisplayMenu+0x182>
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d008      	beq.n	80135b6 <LCD_DisplayMenu+0x192>
 80135a4:	e017      	b.n	80135d6 <LCD_DisplayMenu+0x1b2>
					case 0:
						ssd1306_WriteString("Wait for ID .", Font_7x10, White);  // One dot
 80135a6:	4b56      	ldr	r3, [pc, #344]	@ (8013700 <LCD_DisplayMenu+0x2dc>)
 80135a8:	2201      	movs	r2, #1
 80135aa:	9200      	str	r2, [sp, #0]
 80135ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80135ae:	4860      	ldr	r0, [pc, #384]	@ (8013730 <LCD_DisplayMenu+0x30c>)
 80135b0:	f7ef fca2 	bl	8002ef8 <ssd1306_WriteString>
						break;
 80135b4:	e00f      	b.n	80135d6 <LCD_DisplayMenu+0x1b2>
					case 1:
						ssd1306_WriteString("Wait for ID ..", Font_7x10, White);  // Two dots
 80135b6:	4b52      	ldr	r3, [pc, #328]	@ (8013700 <LCD_DisplayMenu+0x2dc>)
 80135b8:	2201      	movs	r2, #1
 80135ba:	9200      	str	r2, [sp, #0]
 80135bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80135be:	485d      	ldr	r0, [pc, #372]	@ (8013734 <LCD_DisplayMenu+0x310>)
 80135c0:	f7ef fc9a 	bl	8002ef8 <ssd1306_WriteString>
						break;
 80135c4:	e007      	b.n	80135d6 <LCD_DisplayMenu+0x1b2>
					case 2:
						ssd1306_WriteString("Wait for ID ...", Font_7x10, White);  // Three dots
 80135c6:	4b4e      	ldr	r3, [pc, #312]	@ (8013700 <LCD_DisplayMenu+0x2dc>)
 80135c8:	2201      	movs	r2, #1
 80135ca:	9200      	str	r2, [sp, #0]
 80135cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80135ce:	485a      	ldr	r0, [pc, #360]	@ (8013738 <LCD_DisplayMenu+0x314>)
 80135d0:	f7ef fc92 	bl	8002ef8 <ssd1306_WriteString>
						break;
 80135d4:	bf00      	nop
				}
				// Increment dotCounter to cycle through dots
				//dotCounter++;   // TIM10 used
				if (dotCounter >= 60) {  // Reset counter after 60 refresh cycles (arbitrary limit)
 80135d6:	4b54      	ldr	r3, [pc, #336]	@ (8013728 <LCD_DisplayMenu+0x304>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	2b3b      	cmp	r3, #59	@ 0x3b
 80135dc:	f340 834f 	ble.w	8013c7e <LCD_DisplayMenu+0x85a>
					dotCounter = 0;
 80135e0:	4b51      	ldr	r3, [pc, #324]	@ (8013728 <LCD_DisplayMenu+0x304>)
 80135e2:	2200      	movs	r2, #0
 80135e4:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 80135e6:	e34a      	b.n	8013c7e <LCD_DisplayMenu+0x85a>

        case MENU_SET_AVG:
			ssd1306_SetCursor(5, 56);
 80135e8:	2138      	movs	r1, #56	@ 0x38
 80135ea:	2005      	movs	r0, #5
 80135ec:	f7ef fcaa 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 80135f0:	4b45      	ldr	r3, [pc, #276]	@ (8013708 <LCD_DisplayMenu+0x2e4>)
 80135f2:	2201      	movs	r2, #1
 80135f4:	9200      	str	r2, [sp, #0]
 80135f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80135f8:	4846      	ldr	r0, [pc, #280]	@ (8013714 <LCD_DisplayMenu+0x2f0>)
 80135fa:	f7ef fc7d 	bl	8002ef8 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 80135fe:	2138      	movs	r1, #56	@ 0x38
 8013600:	2066      	movs	r0, #102	@ 0x66
 8013602:	f7ef fc9f 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 8013606:	4b40      	ldr	r3, [pc, #256]	@ (8013708 <LCD_DisplayMenu+0x2e4>)
 8013608:	2201      	movs	r2, #1
 801360a:	9200      	str	r2, [sp, #0]
 801360c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801360e:	4842      	ldr	r0, [pc, #264]	@ (8013718 <LCD_DisplayMenu+0x2f4>)
 8013610:	f7ef fc72 	bl	8002ef8 <ssd1306_WriteString>
        	//ssd1306_FillRectangle(126, 0, 128, 128, Black);
        	DisplayPercentage();
 8013614:	f001 f84e 	bl	80146b4 <DisplayPercentage>
        	RTC_DisplayTime();
 8013618:	f001 fb60 	bl	8014cdc <RTC_DisplayTime>
        	testDone=0;                       // Do not read any result here
 801361c:	4b47      	ldr	r3, [pc, #284]	@ (801373c <LCD_DisplayMenu+0x318>)
 801361e:	2200      	movs	r2, #0
 8013620:	701a      	strb	r2, [r3, #0]
        	StartTestMenuFlag = 2;            // Not in StartMenu ==> Don't init Spectrometer
 8013622:	4b47      	ldr	r3, [pc, #284]	@ (8013740 <LCD_DisplayMenu+0x31c>)
 8013624:	2202      	movs	r2, #2
 8013626:	601a      	str	r2, [r3, #0]

        	if (currentCursor == CURSOR_ON_MENU) {
 8013628:	4b46      	ldr	r3, [pc, #280]	@ (8013744 <LCD_DisplayMenu+0x320>)
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d121      	bne.n	8013674 <LCD_DisplayMenu+0x250>
				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 8013630:	4b45      	ldr	r3, [pc, #276]	@ (8013748 <LCD_DisplayMenu+0x324>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	b2db      	uxtb	r3, r3
 8013636:	3b05      	subs	r3, #5
 8013638:	b2d8      	uxtb	r0, r3
 801363a:	4b44      	ldr	r3, [pc, #272]	@ (801374c <LCD_DisplayMenu+0x328>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	b2db      	uxtb	r3, r3
 8013640:	3b05      	subs	r3, #5
 8013642:	b2d9      	uxtb	r1, r3
 8013644:	2301      	movs	r3, #1
 8013646:	9300      	str	r3, [sp, #0]
 8013648:	2323      	movs	r3, #35	@ 0x23
 801364a:	225a      	movs	r2, #90	@ 0x5a
 801364c:	f7ef fc92 	bl	8002f74 <ssd1306_FillRectangle>
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8013650:	4b3d      	ldr	r3, [pc, #244]	@ (8013748 <LCD_DisplayMenu+0x324>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	b2db      	uxtb	r3, r3
 8013656:	4a3d      	ldr	r2, [pc, #244]	@ (801374c <LCD_DisplayMenu+0x328>)
 8013658:	6812      	ldr	r2, [r2, #0]
 801365a:	b2d2      	uxtb	r2, r2
 801365c:	4611      	mov	r1, r2
 801365e:	4618      	mov	r0, r3
 8013660:	f7ef fc70 	bl	8002f44 <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, Black);
 8013664:	4b26      	ldr	r3, [pc, #152]	@ (8013700 <LCD_DisplayMenu+0x2dc>)
 8013666:	2200      	movs	r2, #0
 8013668:	9200      	str	r2, [sp, #0]
 801366a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801366c:	4838      	ldr	r0, [pc, #224]	@ (8013750 <LCD_DisplayMenu+0x32c>)
 801366e:	f7ef fc43 	bl	8002ef8 <ssd1306_WriteString>
 8013672:	e010      	b.n	8013696 <LCD_DisplayMenu+0x272>
        	}else{
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8013674:	4b34      	ldr	r3, [pc, #208]	@ (8013748 <LCD_DisplayMenu+0x324>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	b2db      	uxtb	r3, r3
 801367a:	4a34      	ldr	r2, [pc, #208]	@ (801374c <LCD_DisplayMenu+0x328>)
 801367c:	6812      	ldr	r2, [r2, #0]
 801367e:	b2d2      	uxtb	r2, r2
 8013680:	4611      	mov	r1, r2
 8013682:	4618      	mov	r0, r3
 8013684:	f7ef fc5e 	bl	8002f44 <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, White);
 8013688:	4b1d      	ldr	r3, [pc, #116]	@ (8013700 <LCD_DisplayMenu+0x2dc>)
 801368a:	2201      	movs	r2, #1
 801368c:	9200      	str	r2, [sp, #0]
 801368e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013690:	482f      	ldr	r0, [pc, #188]	@ (8013750 <LCD_DisplayMenu+0x32c>)
 8013692:	f7ef fc31 	bl	8002ef8 <ssd1306_WriteString>
        	}

            if (currentCursor == CURSOR_ON_VALUE) {
 8013696:	4b2b      	ldr	r3, [pc, #172]	@ (8013744 <LCD_DisplayMenu+0x320>)
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	2b01      	cmp	r3, #1
 801369c:	d162      	bne.n	8013764 <LCD_DisplayMenu+0x340>
            	ssd1306_FillRectangle(set_line_X, set_line_Y, 72, 52, White);
 801369e:	4b2d      	ldr	r3, [pc, #180]	@ (8013754 <LCD_DisplayMenu+0x330>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	b2d8      	uxtb	r0, r3
 80136a4:	4b2c      	ldr	r3, [pc, #176]	@ (8013758 <LCD_DisplayMenu+0x334>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	b2d9      	uxtb	r1, r3
 80136aa:	2301      	movs	r3, #1
 80136ac:	9300      	str	r3, [sp, #0]
 80136ae:	2334      	movs	r3, #52	@ 0x34
 80136b0:	2248      	movs	r2, #72	@ 0x48
 80136b2:	f7ef fc5f 	bl	8002f74 <ssd1306_FillRectangle>
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 80136b6:	4b27      	ldr	r3, [pc, #156]	@ (8013754 <LCD_DisplayMenu+0x330>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	4a26      	ldr	r2, [pc, #152]	@ (8013758 <LCD_DisplayMenu+0x334>)
 80136be:	6812      	ldr	r2, [r2, #0]
 80136c0:	b2d2      	uxtb	r2, r2
 80136c2:	4611      	mov	r1, r2
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7ef fc3d 	bl	8002f44 <ssd1306_SetCursor>
            	 char avgStr[10];
				 snprintf(avgStr, sizeof(avgStr), "-%d-", avgValue);
 80136ca:	4b24      	ldr	r3, [pc, #144]	@ (801375c <LCD_DisplayMenu+0x338>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	f107 000c 	add.w	r0, r7, #12
 80136d2:	4a23      	ldr	r2, [pc, #140]	@ (8013760 <LCD_DisplayMenu+0x33c>)
 80136d4:	210a      	movs	r1, #10
 80136d6:	f002 fc77 	bl	8015fc8 <sniprintf>
				 ssd1306_WriteString(avgStr, Font_11x18, Black);
 80136da:	4b11      	ldr	r3, [pc, #68]	@ (8013720 <LCD_DisplayMenu+0x2fc>)
 80136dc:	f107 000c 	add.w	r0, r7, #12
 80136e0:	2200      	movs	r2, #0
 80136e2:	9200      	str	r2, [sp, #0]
 80136e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80136e6:	f7ef fc07 	bl	8002ef8 <ssd1306_WriteString>
            	char avgStr[10];
				snprintf(avgStr, sizeof(avgStr), "-%d-", avgValue);
				ssd1306_WriteString(avgStr, Font_11x18, White);
            }

            break;
 80136ea:	e2cd      	b.n	8013c88 <LCD_DisplayMenu+0x864>
 80136ec:	40021000 	.word	0x40021000
 80136f0:	200026cc 	.word	0x200026cc
 80136f4:	40020c00 	.word	0x40020c00
 80136f8:	2000268c 	.word	0x2000268c
 80136fc:	0801a2b0 	.word	0x0801a2b0
 8013700:	08019d74 	.word	0x08019d74
 8013704:	0801817c 	.word	0x0801817c
 8013708:	08019d68 	.word	0x08019d68
 801370c:	08018188 	.word	0x08018188
 8013710:	08018190 	.word	0x08018190
 8013714:	08018198 	.word	0x08018198
 8013718:	080181a0 	.word	0x080181a0
 801371c:	080181a8 	.word	0x080181a8
 8013720:	08019d80 	.word	0x08019d80
 8013724:	20001e64 	.word	0x20001e64
 8013728:	200026f4 	.word	0x200026f4
 801372c:	55555556 	.word	0x55555556
 8013730:	080181b4 	.word	0x080181b4
 8013734:	080181c4 	.word	0x080181c4
 8013738:	080181d4 	.word	0x080181d4
 801373c:	20002672 	.word	0x20002672
 8013740:	200026c8 	.word	0x200026c8
 8013744:	2000268d 	.word	0x2000268d
 8013748:	200000c4 	.word	0x200000c4
 801374c:	200000c8 	.word	0x200000c8
 8013750:	080181e4 	.word	0x080181e4
 8013754:	200000cc 	.word	0x200000cc
 8013758:	200000d0 	.word	0x200000d0
 801375c:	200000b4 	.word	0x200000b4
 8013760:	080181ec 	.word	0x080181ec
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 8013764:	4b8e      	ldr	r3, [pc, #568]	@ (80139a0 <LCD_DisplayMenu+0x57c>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	b2db      	uxtb	r3, r3
 801376a:	4a8e      	ldr	r2, [pc, #568]	@ (80139a4 <LCD_DisplayMenu+0x580>)
 801376c:	6812      	ldr	r2, [r2, #0]
 801376e:	b2d2      	uxtb	r2, r2
 8013770:	4611      	mov	r1, r2
 8013772:	4618      	mov	r0, r3
 8013774:	f7ef fbe6 	bl	8002f44 <ssd1306_SetCursor>
				snprintf(avgStr, sizeof(avgStr), "-%d-", avgValue);
 8013778:	4b8b      	ldr	r3, [pc, #556]	@ (80139a8 <LCD_DisplayMenu+0x584>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	4638      	mov	r0, r7
 801377e:	4a8b      	ldr	r2, [pc, #556]	@ (80139ac <LCD_DisplayMenu+0x588>)
 8013780:	210a      	movs	r1, #10
 8013782:	f002 fc21 	bl	8015fc8 <sniprintf>
				ssd1306_WriteString(avgStr, Font_11x18, White);
 8013786:	4b8a      	ldr	r3, [pc, #552]	@ (80139b0 <LCD_DisplayMenu+0x58c>)
 8013788:	4638      	mov	r0, r7
 801378a:	2201      	movs	r2, #1
 801378c:	9200      	str	r2, [sp, #0]
 801378e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013790:	f7ef fbb2 	bl	8002ef8 <ssd1306_WriteString>
            break;
 8013794:	e278      	b.n	8013c88 <LCD_DisplayMenu+0x864>

        case MENU_START_TEST:
        	HAL_GPIO_WritePin(EN_5vReg_GPIO_Port, EN_5vReg_Pin, GPIO_PIN_SET);                   // Turn on 5v REG
 8013796:	2201      	movs	r2, #1
 8013798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801379c:	4885      	ldr	r0, [pc, #532]	@ (80139b4 <LCD_DisplayMenu+0x590>)
 801379e:	f7f2 fad1 	bl	8005d44 <HAL_GPIO_WritePin>
			ssd1306_SetCursor(5, 56);
 80137a2:	2138      	movs	r1, #56	@ 0x38
 80137a4:	2005      	movs	r0, #5
 80137a6:	f7ef fbcd 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 80137aa:	4b83      	ldr	r3, [pc, #524]	@ (80139b8 <LCD_DisplayMenu+0x594>)
 80137ac:	2201      	movs	r2, #1
 80137ae:	9200      	str	r2, [sp, #0]
 80137b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80137b2:	4882      	ldr	r0, [pc, #520]	@ (80139bc <LCD_DisplayMenu+0x598>)
 80137b4:	f7ef fba0 	bl	8002ef8 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 80137b8:	2138      	movs	r1, #56	@ 0x38
 80137ba:	2066      	movs	r0, #102	@ 0x66
 80137bc:	f7ef fbc2 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 80137c0:	4b7d      	ldr	r3, [pc, #500]	@ (80139b8 <LCD_DisplayMenu+0x594>)
 80137c2:	2201      	movs	r2, #1
 80137c4:	9200      	str	r2, [sp, #0]
 80137c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80137c8:	487d      	ldr	r0, [pc, #500]	@ (80139c0 <LCD_DisplayMenu+0x59c>)
 80137ca:	f7ef fb95 	bl	8002ef8 <ssd1306_WriteString>
        	DisplayPercentage();
 80137ce:	f000 ff71 	bl	80146b4 <DisplayPercentage>
        	RTC_DisplayTime();
 80137d2:	f001 fa83 	bl	8014cdc <RTC_DisplayTime>
        	StartTestMenuFlag = 1;						//  in StartMenu
 80137d6:	4b7b      	ldr	r3, [pc, #492]	@ (80139c4 <LCD_DisplayMenu+0x5a0>)
 80137d8:	2201      	movs	r2, #1
 80137da:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU){
 80137dc:	4b7a      	ldr	r3, [pc, #488]	@ (80139c8 <LCD_DisplayMenu+0x5a4>)
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d120      	bne.n	8013826 <LCD_DisplayMenu+0x402>
            	ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 100, 35, White);
 80137e4:	4b79      	ldr	r3, [pc, #484]	@ (80139cc <LCD_DisplayMenu+0x5a8>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	b2db      	uxtb	r3, r3
 80137ea:	3b05      	subs	r3, #5
 80137ec:	b2d8      	uxtb	r0, r3
 80137ee:	4b78      	ldr	r3, [pc, #480]	@ (80139d0 <LCD_DisplayMenu+0x5ac>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	3b05      	subs	r3, #5
 80137f6:	b2d9      	uxtb	r1, r3
 80137f8:	2301      	movs	r3, #1
 80137fa:	9300      	str	r3, [sp, #0]
 80137fc:	2323      	movs	r3, #35	@ 0x23
 80137fe:	2264      	movs	r2, #100	@ 0x64
 8013800:	f7ef fbb8 	bl	8002f74 <ssd1306_FillRectangle>
            	ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8013804:	4b71      	ldr	r3, [pc, #452]	@ (80139cc <LCD_DisplayMenu+0x5a8>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	b2db      	uxtb	r3, r3
 801380a:	4a71      	ldr	r2, [pc, #452]	@ (80139d0 <LCD_DisplayMenu+0x5ac>)
 801380c:	6812      	ldr	r2, [r2, #0]
 801380e:	b2d2      	uxtb	r2, r2
 8013810:	4611      	mov	r1, r2
 8013812:	4618      	mov	r0, r3
 8013814:	f7ef fb96 	bl	8002f44 <ssd1306_SetCursor>
				ssd1306_WriteString("StartTest", Font_7x10, Black);
 8013818:	4b6e      	ldr	r3, [pc, #440]	@ (80139d4 <LCD_DisplayMenu+0x5b0>)
 801381a:	2200      	movs	r2, #0
 801381c:	9200      	str	r2, [sp, #0]
 801381e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013820:	486d      	ldr	r0, [pc, #436]	@ (80139d8 <LCD_DisplayMenu+0x5b4>)
 8013822:	f7ef fb69 	bl	8002ef8 <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 10, set_line_Y);
 8013826:	4b5e      	ldr	r3, [pc, #376]	@ (80139a0 <LCD_DisplayMenu+0x57c>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	b2db      	uxtb	r3, r3
 801382c:	3b0a      	subs	r3, #10
 801382e:	b2db      	uxtb	r3, r3
 8013830:	4a5c      	ldr	r2, [pc, #368]	@ (80139a4 <LCD_DisplayMenu+0x580>)
 8013832:	6812      	ldr	r2, [r2, #0]
 8013834:	b2d2      	uxtb	r2, r2
 8013836:	4611      	mov	r1, r2
 8013838:	4618      	mov	r0, r3
 801383a:	f7ef fb83 	bl	8002f44 <ssd1306_SetCursor>
            char testStr[20];
            snprintf(testStr, sizeof(testStr), "%d of %d", currentTest, avgValue);
 801383e:	4b67      	ldr	r3, [pc, #412]	@ (80139dc <LCD_DisplayMenu+0x5b8>)
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	4b59      	ldr	r3, [pc, #356]	@ (80139a8 <LCD_DisplayMenu+0x584>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	4613      	mov	r3, r2
 801384e:	4a64      	ldr	r2, [pc, #400]	@ (80139e0 <LCD_DisplayMenu+0x5bc>)
 8013850:	2114      	movs	r1, #20
 8013852:	f002 fbb9 	bl	8015fc8 <sniprintf>
            ssd1306_WriteString(testStr, Font_11x18, White);
 8013856:	4b56      	ldr	r3, [pc, #344]	@ (80139b0 <LCD_DisplayMenu+0x58c>)
 8013858:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801385c:	2201      	movs	r2, #1
 801385e:	9200      	str	r2, [sp, #0]
 8013860:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013862:	f7ef fb49 	bl	8002ef8 <ssd1306_WriteString>

            DoesTestComplete();            			    // if test btn pressed ==> ++currentTest
 8013866:	f001 f8bf 	bl	80149e8 <DoesTestComplete>

            if (currentTest > avgValue){
 801386a:	4b5c      	ldr	r3, [pc, #368]	@ (80139dc <LCD_DisplayMenu+0x5b8>)
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	4b4e      	ldr	r3, [pc, #312]	@ (80139a8 <LCD_DisplayMenu+0x584>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	429a      	cmp	r2, r3
 8013874:	dd26      	ble.n	80138c4 <LCD_DisplayMenu+0x4a0>
            	currentTest = 1;
 8013876:	4b59      	ldr	r3, [pc, #356]	@ (80139dc <LCD_DisplayMenu+0x5b8>)
 8013878:	2201      	movs	r2, #1
 801387a:	601a      	str	r2, [r3, #0]
            	//*********Bil_AVG and FlashWrite***********//
            	MeasureAverage();
 801387c:	f001 f82c 	bl	80148d8 <MeasureAverage>
            	//HAL_Delay(10);
            	SaveBilResultToFlash();
 8013880:	f7ff fc54 	bl	801312c <SaveBilResultToFlash>
            	//************RESET************************//
				//for (int i = 0; i <= 12-1; i++) BilArray[i]=0;
				memset(BilArray, 0, sizeof(BilArray));
 8013884:	2230      	movs	r2, #48	@ 0x30
 8013886:	2100      	movs	r1, #0
 8013888:	4856      	ldr	r0, [pc, #344]	@ (80139e4 <LCD_DisplayMenu+0x5c0>)
 801388a:	f002 fc2e 	bl	80160ea <memset>
				SumBil = 0;
 801388e:	4b56      	ldr	r3, [pc, #344]	@ (80139e8 <LCD_DisplayMenu+0x5c4>)
 8013890:	f04f 0200 	mov.w	r2, #0
 8013894:	601a      	str	r2, [r3, #0]
				//AveragedBil = 0;                 // Flashing done but Displaying on LCD -> can not reset
				BilResult=0;
 8013896:	4b55      	ldr	r3, [pc, #340]	@ (80139ec <LCD_DisplayMenu+0x5c8>)
 8013898:	f04f 0200 	mov.w	r2, #0
 801389c:	601a      	str	r2, [r3, #0]
				memset(ID, 0, sizeof(ID));         //Bcode reset
 801389e:	2208      	movs	r2, #8
 80138a0:	2100      	movs	r1, #0
 80138a2:	4853      	ldr	r0, [pc, #332]	@ (80139f0 <LCD_DisplayMenu+0x5cc>)
 80138a4:	f002 fc21 	bl	80160ea <memset>
				memset(Buffered_ID, 0, sizeof(ID));
 80138a8:	2208      	movs	r2, #8
 80138aa:	2100      	movs	r1, #0
 80138ac:	4851      	ldr	r0, [pc, #324]	@ (80139f4 <LCD_DisplayMenu+0x5d0>)
 80138ae:	f002 fc1c 	bl	80160ea <memset>
				ID_idx=0;
 80138b2:	4b51      	ldr	r3, [pc, #324]	@ (80139f8 <LCD_DisplayMenu+0x5d4>)
 80138b4:	2200      	movs	r2, #0
 80138b6:	601a      	str	r2, [r3, #0]
            	//***********************//
                currentMenu = MENU_SHOW_RESULT;
 80138b8:	4b50      	ldr	r3, [pc, #320]	@ (80139fc <LCD_DisplayMenu+0x5d8>)
 80138ba:	2204      	movs	r2, #4
 80138bc:	701a      	strb	r2, [r3, #0]
                LCD_DisplayMenu();
 80138be:	f7ff fdb1 	bl	8013424 <LCD_DisplayMenu>
            } else {                                   // Test not performed yet
                // Turn on the indication LED (READY)
                HAL_GPIO_WritePin(READY_LED_GPIO_Port, READY_LED_Pin, GPIO_PIN_SET); 			// IND LED
            }
            break;
 80138c2:	e1e1      	b.n	8013c88 <LCD_DisplayMenu+0x864>
                HAL_GPIO_WritePin(READY_LED_GPIO_Port, READY_LED_Pin, GPIO_PIN_SET); 			// IND LED
 80138c4:	2201      	movs	r2, #1
 80138c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80138ca:	484d      	ldr	r0, [pc, #308]	@ (8013a00 <LCD_DisplayMenu+0x5dc>)
 80138cc:	f7f2 fa3a 	bl	8005d44 <HAL_GPIO_WritePin>
            break;
 80138d0:	e1da      	b.n	8013c88 <LCD_DisplayMenu+0x864>

        case MENU_SHOW_RESULT:
			ssd1306_SetCursor(5, 56);
 80138d2:	2138      	movs	r1, #56	@ 0x38
 80138d4:	2005      	movs	r0, #5
 80138d6:	f7ef fb35 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 80138da:	4b37      	ldr	r3, [pc, #220]	@ (80139b8 <LCD_DisplayMenu+0x594>)
 80138dc:	2201      	movs	r2, #1
 80138de:	9200      	str	r2, [sp, #0]
 80138e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80138e2:	4836      	ldr	r0, [pc, #216]	@ (80139bc <LCD_DisplayMenu+0x598>)
 80138e4:	f7ef fb08 	bl	8002ef8 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 80138e8:	2138      	movs	r1, #56	@ 0x38
 80138ea:	2066      	movs	r0, #102	@ 0x66
 80138ec:	f7ef fb2a 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 80138f0:	4b31      	ldr	r3, [pc, #196]	@ (80139b8 <LCD_DisplayMenu+0x594>)
 80138f2:	2201      	movs	r2, #1
 80138f4:	9200      	str	r2, [sp, #0]
 80138f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80138f8:	4831      	ldr	r0, [pc, #196]	@ (80139c0 <LCD_DisplayMenu+0x59c>)
 80138fa:	f7ef fafd 	bl	8002ef8 <ssd1306_WriteString>
        	DisplayPercentage();
 80138fe:	f000 fed9 	bl	80146b4 <DisplayPercentage>
        	RTC_DisplayTime();
 8013902:	f001 f9eb 	bl	8014cdc <RTC_DisplayTime>
        	StartTestMenuFlag = 2;						// Not in StartMenu ==> Don't init Spectrometer
 8013906:	4b2f      	ldr	r3, [pc, #188]	@ (80139c4 <LCD_DisplayMenu+0x5a0>)
 8013908:	2202      	movs	r2, #2
 801390a:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU){
 801390c:	4b2e      	ldr	r3, [pc, #184]	@ (80139c8 <LCD_DisplayMenu+0x5a4>)
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d120      	bne.n	8013956 <LCD_DisplayMenu+0x532>
				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 8013914:	4b2d      	ldr	r3, [pc, #180]	@ (80139cc <LCD_DisplayMenu+0x5a8>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	b2db      	uxtb	r3, r3
 801391a:	3b05      	subs	r3, #5
 801391c:	b2d8      	uxtb	r0, r3
 801391e:	4b2c      	ldr	r3, [pc, #176]	@ (80139d0 <LCD_DisplayMenu+0x5ac>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	b2db      	uxtb	r3, r3
 8013924:	3b05      	subs	r3, #5
 8013926:	b2d9      	uxtb	r1, r3
 8013928:	2301      	movs	r3, #1
 801392a:	9300      	str	r3, [sp, #0]
 801392c:	2323      	movs	r3, #35	@ 0x23
 801392e:	225a      	movs	r2, #90	@ 0x5a
 8013930:	f7ef fb20 	bl	8002f74 <ssd1306_FillRectangle>
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8013934:	4b25      	ldr	r3, [pc, #148]	@ (80139cc <LCD_DisplayMenu+0x5a8>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	b2db      	uxtb	r3, r3
 801393a:	4a25      	ldr	r2, [pc, #148]	@ (80139d0 <LCD_DisplayMenu+0x5ac>)
 801393c:	6812      	ldr	r2, [r2, #0]
 801393e:	b2d2      	uxtb	r2, r2
 8013940:	4611      	mov	r1, r2
 8013942:	4618      	mov	r0, r3
 8013944:	f7ef fafe 	bl	8002f44 <ssd1306_SetCursor>
				ssd1306_WriteString(" Result", Font_7x10, Black);
 8013948:	4b22      	ldr	r3, [pc, #136]	@ (80139d4 <LCD_DisplayMenu+0x5b0>)
 801394a:	2200      	movs	r2, #0
 801394c:	9200      	str	r2, [sp, #0]
 801394e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013950:	482c      	ldr	r0, [pc, #176]	@ (8013a04 <LCD_DisplayMenu+0x5e0>)
 8013952:	f7ef fad1 	bl	8002ef8 <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 25, set_line_Y);
 8013956:	4b12      	ldr	r3, [pc, #72]	@ (80139a0 <LCD_DisplayMenu+0x57c>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	b2db      	uxtb	r3, r3
 801395c:	3b19      	subs	r3, #25
 801395e:	b2db      	uxtb	r3, r3
 8013960:	4a10      	ldr	r2, [pc, #64]	@ (80139a4 <LCD_DisplayMenu+0x580>)
 8013962:	6812      	ldr	r2, [r2, #0]
 8013964:	b2d2      	uxtb	r2, r2
 8013966:	4611      	mov	r1, r2
 8013968:	4618      	mov	r0, r3
 801396a:	f7ef faeb 	bl	8002f44 <ssd1306_SetCursor>
            char bilStr[20];
            snprintf(bilStr, sizeof(bilStr), "%.2f mg/dL", AveragedBil);
 801396e:	4b26      	ldr	r3, [pc, #152]	@ (8013a08 <LCD_DisplayMenu+0x5e4>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	4618      	mov	r0, r3
 8013974:	f7ec fdf8 	bl	8000568 <__aeabi_f2d>
 8013978:	4602      	mov	r2, r0
 801397a:	460b      	mov	r3, r1
 801397c:	f107 0018 	add.w	r0, r7, #24
 8013980:	e9cd 2300 	strd	r2, r3, [sp]
 8013984:	4a21      	ldr	r2, [pc, #132]	@ (8013a0c <LCD_DisplayMenu+0x5e8>)
 8013986:	2114      	movs	r1, #20
 8013988:	f002 fb1e 	bl	8015fc8 <sniprintf>
            ssd1306_WriteString(bilStr, Font_11x18, White);
 801398c:	4b08      	ldr	r3, [pc, #32]	@ (80139b0 <LCD_DisplayMenu+0x58c>)
 801398e:	f107 0018 	add.w	r0, r7, #24
 8013992:	2201      	movs	r2, #1
 8013994:	9200      	str	r2, [sp, #0]
 8013996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013998:	f7ef faae 	bl	8002ef8 <ssd1306_WriteString>
            break;
 801399c:	e174      	b.n	8013c88 <LCD_DisplayMenu+0x864>
 801399e:	bf00      	nop
 80139a0:	200000cc 	.word	0x200000cc
 80139a4:	200000d0 	.word	0x200000d0
 80139a8:	200000b4 	.word	0x200000b4
 80139ac:	080181ec 	.word	0x080181ec
 80139b0:	08019d80 	.word	0x08019d80
 80139b4:	40020c00 	.word	0x40020c00
 80139b8:	08019d68 	.word	0x08019d68
 80139bc:	08018198 	.word	0x08018198
 80139c0:	080181a0 	.word	0x080181a0
 80139c4:	200026c8 	.word	0x200026c8
 80139c8:	2000268d 	.word	0x2000268d
 80139cc:	200000c4 	.word	0x200000c4
 80139d0:	200000c8 	.word	0x200000c8
 80139d4:	08019d74 	.word	0x08019d74
 80139d8:	080181f4 	.word	0x080181f4
 80139dc:	200000b8 	.word	0x200000b8
 80139e0:	08018200 	.word	0x08018200
 80139e4:	20002690 	.word	0x20002690
 80139e8:	200026c4 	.word	0x200026c4
 80139ec:	20002680 	.word	0x20002680
 80139f0:	20001e64 	.word	0x20001e64
 80139f4:	20001e4c 	.word	0x20001e4c
 80139f8:	20001e60 	.word	0x20001e60
 80139fc:	2000268c 	.word	0x2000268c
 8013a00:	40021000 	.word	0x40021000
 8013a04:	0801820c 	.word	0x0801820c
 8013a08:	200026c0 	.word	0x200026c0
 8013a0c:	08018214 	.word	0x08018214

        case MENU_EDIT_RTC:
			ssd1306_SetCursor(5, 56);
 8013a10:	2138      	movs	r1, #56	@ 0x38
 8013a12:	2005      	movs	r0, #5
 8013a14:	f7ef fa96 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 8013a18:	4b9e      	ldr	r3, [pc, #632]	@ (8013c94 <LCD_DisplayMenu+0x870>)
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	9200      	str	r2, [sp, #0]
 8013a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013a20:	489d      	ldr	r0, [pc, #628]	@ (8013c98 <LCD_DisplayMenu+0x874>)
 8013a22:	f7ef fa69 	bl	8002ef8 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 8013a26:	2138      	movs	r1, #56	@ 0x38
 8013a28:	2066      	movs	r0, #102	@ 0x66
 8013a2a:	f7ef fa8b 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 8013a2e:	4b99      	ldr	r3, [pc, #612]	@ (8013c94 <LCD_DisplayMenu+0x870>)
 8013a30:	2201      	movs	r2, #1
 8013a32:	9200      	str	r2, [sp, #0]
 8013a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013a36:	4899      	ldr	r0, [pc, #612]	@ (8013c9c <LCD_DisplayMenu+0x878>)
 8013a38:	f7ef fa5e 	bl	8002ef8 <ssd1306_WriteString>

        	DisplayPercentage();
 8013a3c:	f000 fe3a 	bl	80146b4 <DisplayPercentage>
        	RTC_DisplayTime();
 8013a40:	f001 f94c 	bl	8014cdc <RTC_DisplayTime>
        	StartTestMenuFlag = 2;						// Not in StartMenu ==> Don't init Spectrometer
 8013a44:	4b96      	ldr	r3, [pc, #600]	@ (8013ca0 <LCD_DisplayMenu+0x87c>)
 8013a46:	2202      	movs	r2, #2
 8013a48:	601a      	str	r2, [r3, #0]
        	if (currentCursor == CURSOR_ON_MENU){
 8013a4a:	4b96      	ldr	r3, [pc, #600]	@ (8013ca4 <LCD_DisplayMenu+0x880>)
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d167      	bne.n	8013b22 <LCD_DisplayMenu+0x6fe>

				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 34, White);
 8013a52:	4b95      	ldr	r3, [pc, #596]	@ (8013ca8 <LCD_DisplayMenu+0x884>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	b2db      	uxtb	r3, r3
 8013a58:	3b05      	subs	r3, #5
 8013a5a:	b2d8      	uxtb	r0, r3
 8013a5c:	4b93      	ldr	r3, [pc, #588]	@ (8013cac <LCD_DisplayMenu+0x888>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	b2db      	uxtb	r3, r3
 8013a62:	3b05      	subs	r3, #5
 8013a64:	b2d9      	uxtb	r1, r3
 8013a66:	2301      	movs	r3, #1
 8013a68:	9300      	str	r3, [sp, #0]
 8013a6a:	2322      	movs	r3, #34	@ 0x22
 8013a6c:	225a      	movs	r2, #90	@ 0x5a
 8013a6e:	f7ef fa81 	bl	8002f74 <ssd1306_FillRectangle>

				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8013a72:	4b8d      	ldr	r3, [pc, #564]	@ (8013ca8 <LCD_DisplayMenu+0x884>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	b2db      	uxtb	r3, r3
 8013a78:	4a8c      	ldr	r2, [pc, #560]	@ (8013cac <LCD_DisplayMenu+0x888>)
 8013a7a:	6812      	ldr	r2, [r2, #0]
 8013a7c:	b2d2      	uxtb	r2, r2
 8013a7e:	4611      	mov	r1, r2
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7ef fa5f 	bl	8002f44 <ssd1306_SetCursor>
				ssd1306_WriteString("Edit RTC", Font_7x10, Black);
 8013a86:	4b8a      	ldr	r3, [pc, #552]	@ (8013cb0 <LCD_DisplayMenu+0x88c>)
 8013a88:	2200      	movs	r2, #0
 8013a8a:	9200      	str	r2, [sp, #0]
 8013a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013a8e:	4889      	ldr	r0, [pc, #548]	@ (8013cb4 <LCD_DisplayMenu+0x890>)
 8013a90:	f7ef fa32 	bl	8002ef8 <ssd1306_WriteString>
				//*****************************************//
			    ssd1306_SetCursor(menu_line_X, menu_line_Y+16);
 8013a94:	4b84      	ldr	r3, [pc, #528]	@ (8013ca8 <LCD_DisplayMenu+0x884>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	b2da      	uxtb	r2, r3
 8013a9a:	4b84      	ldr	r3, [pc, #528]	@ (8013cac <LCD_DisplayMenu+0x888>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	3310      	adds	r3, #16
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	4610      	mov	r0, r2
 8013aa8:	f7ef fa4c 	bl	8002f44 <ssd1306_SetCursor>
			    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 8013aac:	4b82      	ldr	r3, [pc, #520]	@ (8013cb8 <LCD_DisplayMenu+0x894>)
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	4619      	mov	r1, r3
 8013ab2:	4b82      	ldr	r3, [pc, #520]	@ (8013cbc <LCD_DisplayMenu+0x898>)
 8013ab4:	781b      	ldrb	r3, [r3, #0]
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	4b81      	ldr	r3, [pc, #516]	@ (8013cc0 <LCD_DisplayMenu+0x89c>)
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	9301      	str	r3, [sp, #4]
 8013abe:	9200      	str	r2, [sp, #0]
 8013ac0:	460b      	mov	r3, r1
 8013ac2:	4a80      	ldr	r2, [pc, #512]	@ (8013cc4 <LCD_DisplayMenu+0x8a0>)
 8013ac4:	2114      	movs	r1, #20
 8013ac6:	4880      	ldr	r0, [pc, #512]	@ (8013cc8 <LCD_DisplayMenu+0x8a4>)
 8013ac8:	f002 fa7e 	bl	8015fc8 <sniprintf>
			    ssd1306_WriteString(buffer, Font_7x10, White);
 8013acc:	4b78      	ldr	r3, [pc, #480]	@ (8013cb0 <LCD_DisplayMenu+0x88c>)
 8013ace:	2201      	movs	r2, #1
 8013ad0:	9200      	str	r2, [sp, #0]
 8013ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013ad4:	487c      	ldr	r0, [pc, #496]	@ (8013cc8 <LCD_DisplayMenu+0x8a4>)
 8013ad6:	f7ef fa0f 	bl	8002ef8 <ssd1306_WriteString>

			    ssd1306_SetCursor(menu_line_X, menu_line_Y+32);
 8013ada:	4b73      	ldr	r3, [pc, #460]	@ (8013ca8 <LCD_DisplayMenu+0x884>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	b2da      	uxtb	r2, r3
 8013ae0:	4b72      	ldr	r3, [pc, #456]	@ (8013cac <LCD_DisplayMenu+0x888>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	3320      	adds	r3, #32
 8013ae8:	b2db      	uxtb	r3, r3
 8013aea:	4619      	mov	r1, r3
 8013aec:	4610      	mov	r0, r2
 8013aee:	f7ef fa29 	bl	8002f44 <ssd1306_SetCursor>
			    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", day, month, year);
 8013af2:	4b76      	ldr	r3, [pc, #472]	@ (8013ccc <LCD_DisplayMenu+0x8a8>)
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	4619      	mov	r1, r3
 8013af8:	4b75      	ldr	r3, [pc, #468]	@ (8013cd0 <LCD_DisplayMenu+0x8ac>)
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	461a      	mov	r2, r3
 8013afe:	4b75      	ldr	r3, [pc, #468]	@ (8013cd4 <LCD_DisplayMenu+0x8b0>)
 8013b00:	781b      	ldrb	r3, [r3, #0]
 8013b02:	9301      	str	r3, [sp, #4]
 8013b04:	9200      	str	r2, [sp, #0]
 8013b06:	460b      	mov	r3, r1
 8013b08:	4a73      	ldr	r2, [pc, #460]	@ (8013cd8 <LCD_DisplayMenu+0x8b4>)
 8013b0a:	2114      	movs	r1, #20
 8013b0c:	486e      	ldr	r0, [pc, #440]	@ (8013cc8 <LCD_DisplayMenu+0x8a4>)
 8013b0e:	f002 fa5b 	bl	8015fc8 <sniprintf>
			    ssd1306_WriteString(buffer, Font_7x10, White);
 8013b12:	4b67      	ldr	r3, [pc, #412]	@ (8013cb0 <LCD_DisplayMenu+0x88c>)
 8013b14:	2201      	movs	r2, #1
 8013b16:	9200      	str	r2, [sp, #0]
 8013b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013b1a:	486b      	ldr	r0, [pc, #428]	@ (8013cc8 <LCD_DisplayMenu+0x8a4>)
 8013b1c:	f7ef f9ec 	bl	8002ef8 <ssd1306_WriteString>
 8013b20:	e010      	b.n	8013b44 <LCD_DisplayMenu+0x720>
				//*****************************************//
			}else{
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8013b22:	4b61      	ldr	r3, [pc, #388]	@ (8013ca8 <LCD_DisplayMenu+0x884>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	4a60      	ldr	r2, [pc, #384]	@ (8013cac <LCD_DisplayMenu+0x888>)
 8013b2a:	6812      	ldr	r2, [r2, #0]
 8013b2c:	b2d2      	uxtb	r2, r2
 8013b2e:	4611      	mov	r1, r2
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7ef fa07 	bl	8002f44 <ssd1306_SetCursor>
				ssd1306_WriteString("Edit RTC", Font_7x10, White);
 8013b36:	4b5e      	ldr	r3, [pc, #376]	@ (8013cb0 <LCD_DisplayMenu+0x88c>)
 8013b38:	2201      	movs	r2, #1
 8013b3a:	9200      	str	r2, [sp, #0]
 8013b3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013b3e:	485d      	ldr	r0, [pc, #372]	@ (8013cb4 <LCD_DisplayMenu+0x890>)
 8013b40:	f7ef f9da 	bl	8002ef8 <ssd1306_WriteString>
        	}

        	if (currentCursor == CURSOR_ON_VALUE){
 8013b44:	4b57      	ldr	r3, [pc, #348]	@ (8013ca4 <LCD_DisplayMenu+0x880>)
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	2b01      	cmp	r3, #1
 8013b4a:	f040 809a 	bne.w	8013c82 <LCD_DisplayMenu+0x85e>
        		EditRTC();
 8013b4e:	f000 fa19 	bl	8013f84 <EditRTC>
        		currentCursor = CURSOR_ON_MENU;
 8013b52:	4b54      	ldr	r3, [pc, #336]	@ (8013ca4 <LCD_DisplayMenu+0x880>)
 8013b54:	2200      	movs	r2, #0
 8013b56:	701a      	strb	r2, [r3, #0]
        	}

			break;
 8013b58:	e093      	b.n	8013c82 <LCD_DisplayMenu+0x85e>

        case MENU_SEND_BLE:
        	HAL_GPIO_WritePin(EN_5vReg_GPIO_Port, EN_5vReg_Pin, GPIO_PIN_SET);               // Turn on 5v REG
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8013b60:	485e      	ldr	r0, [pc, #376]	@ (8013cdc <LCD_DisplayMenu+0x8b8>)
 8013b62:	f7f2 f8ef 	bl	8005d44 <HAL_GPIO_WritePin>
        	Set_DeviceConnectable();
 8013b66:	f7ed ff35 	bl	80019d4 <Set_DeviceConnectable>
        	//HAL_GPIO_WritePin(BT_INIT_GPIO_Port, BT_INIT_Pin, GPIO_PIN_SET); 				// Turn on BT
        	AveragedBil=0;//to Erase the old test from LCD while applying new one
 8013b6a:	4b5d      	ldr	r3, [pc, #372]	@ (8013ce0 <LCD_DisplayMenu+0x8bc>)
 8013b6c:	f04f 0200 	mov.w	r2, #0
 8013b70:	601a      	str	r2, [r3, #0]

			ssd1306_SetCursor(5, 56);
 8013b72:	2138      	movs	r1, #56	@ 0x38
 8013b74:	2005      	movs	r0, #5
 8013b76:	f7ef f9e5 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 8013b7a:	4b46      	ldr	r3, [pc, #280]	@ (8013c94 <LCD_DisplayMenu+0x870>)
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	9200      	str	r2, [sp, #0]
 8013b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013b82:	4845      	ldr	r0, [pc, #276]	@ (8013c98 <LCD_DisplayMenu+0x874>)
 8013b84:	f7ef f9b8 	bl	8002ef8 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 8013b88:	2138      	movs	r1, #56	@ 0x38
 8013b8a:	2066      	movs	r0, #102	@ 0x66
 8013b8c:	f7ef f9da 	bl	8002f44 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 8013b90:	4b40      	ldr	r3, [pc, #256]	@ (8013c94 <LCD_DisplayMenu+0x870>)
 8013b92:	2201      	movs	r2, #1
 8013b94:	9200      	str	r2, [sp, #0]
 8013b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013b98:	4840      	ldr	r0, [pc, #256]	@ (8013c9c <LCD_DisplayMenu+0x878>)
 8013b9a:	f7ef f9ad 	bl	8002ef8 <ssd1306_WriteString>
            DisplayPercentage();
 8013b9e:	f000 fd89 	bl	80146b4 <DisplayPercentage>
            RTC_DisplayTime();
 8013ba2:	f001 f89b 	bl	8014cdc <RTC_DisplayTime>
            StartTestMenuFlag = 2;  // Not in StartMenu ==> Don't init Spectrometer
 8013ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8013ca0 <LCD_DisplayMenu+0x87c>)
 8013ba8:	2202      	movs	r2, #2
 8013baa:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU) {
 8013bac:	4b3d      	ldr	r3, [pc, #244]	@ (8013ca4 <LCD_DisplayMenu+0x880>)
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d122      	bne.n	8013bfa <LCD_DisplayMenu+0x7d6>
                ssd1306_FillRectangle(menu_line_X-10, menu_line_Y, 100, 40, White);
 8013bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8013ca8 <LCD_DisplayMenu+0x884>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	3b0a      	subs	r3, #10
 8013bbc:	b2d8      	uxtb	r0, r3
 8013bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8013cac <LCD_DisplayMenu+0x888>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	b2d9      	uxtb	r1, r3
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	2328      	movs	r3, #40	@ 0x28
 8013bca:	2264      	movs	r2, #100	@ 0x64
 8013bcc:	f7ef f9d2 	bl	8002f74 <ssd1306_FillRectangle>
                ssd1306_SetCursor(menu_line_X-5, menu_line_Y+5);
 8013bd0:	4b35      	ldr	r3, [pc, #212]	@ (8013ca8 <LCD_DisplayMenu+0x884>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	3b05      	subs	r3, #5
 8013bd8:	b2da      	uxtb	r2, r3
 8013bda:	4b34      	ldr	r3, [pc, #208]	@ (8013cac <LCD_DisplayMenu+0x888>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	b2db      	uxtb	r3, r3
 8013be0:	3305      	adds	r3, #5
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	4619      	mov	r1, r3
 8013be6:	4610      	mov	r0, r2
 8013be8:	f7ef f9ac 	bl	8002f44 <ssd1306_SetCursor>
                ssd1306_WriteString("Send to BT", Font_7x10, Black);
 8013bec:	4b30      	ldr	r3, [pc, #192]	@ (8013cb0 <LCD_DisplayMenu+0x88c>)
 8013bee:	2200      	movs	r2, #0
 8013bf0:	9200      	str	r2, [sp, #0]
 8013bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013bf4:	483b      	ldr	r0, [pc, #236]	@ (8013ce4 <LCD_DisplayMenu+0x8c0>)
 8013bf6:	f7ef f97f 	bl	8002ef8 <ssd1306_WriteString>
            }

            // Indicate that the user can press the NAVIGATE button to send data
            ssd1306_SetCursor(set_line_X - 5, menu_line_Y + 23);
 8013bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8013ce8 <LCD_DisplayMenu+0x8c4>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	3b05      	subs	r3, #5
 8013c02:	b2da      	uxtb	r2, r3
 8013c04:	4b29      	ldr	r3, [pc, #164]	@ (8013cac <LCD_DisplayMenu+0x888>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	b2db      	uxtb	r3, r3
 8013c0a:	3317      	adds	r3, #23
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	4619      	mov	r1, r3
 8013c10:	4610      	mov	r0, r2
 8013c12:	f7ef f997 	bl	8002f44 <ssd1306_SetCursor>
            ssd1306_WriteString("Press OK", Font_7x10, White);
 8013c16:	4b26      	ldr	r3, [pc, #152]	@ (8013cb0 <LCD_DisplayMenu+0x88c>)
 8013c18:	2201      	movs	r2, #1
 8013c1a:	9200      	str	r2, [sp, #0]
 8013c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013c1e:	4833      	ldr	r0, [pc, #204]	@ (8013cec <LCD_DisplayMenu+0x8c8>)
 8013c20:	f7ef f96a 	bl	8002ef8 <ssd1306_WriteString>

            // After NAVIGATE is pressed, send data via BLE
            if (sendBLEFlag) {
 8013c24:	4b32      	ldr	r3, [pc, #200]	@ (8013cf0 <LCD_DisplayMenu+0x8cc>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d02c      	beq.n	8013c86 <LCD_DisplayMenu+0x862>
            	ssd1306_FillRectangle(menu_line_X-5, menu_line_Y, 105, 40, Black);
 8013c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8013ca8 <LCD_DisplayMenu+0x884>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	3b05      	subs	r3, #5
 8013c34:	b2d8      	uxtb	r0, r3
 8013c36:	4b1d      	ldr	r3, [pc, #116]	@ (8013cac <LCD_DisplayMenu+0x888>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	b2d9      	uxtb	r1, r3
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	2328      	movs	r3, #40	@ 0x28
 8013c42:	2269      	movs	r2, #105	@ 0x69
 8013c44:	f7ef f996 	bl	8002f74 <ssd1306_FillRectangle>
                ssd1306_SetCursor(menu_line_X - 5, menu_line_Y + 30);
 8013c48:	4b17      	ldr	r3, [pc, #92]	@ (8013ca8 <LCD_DisplayMenu+0x884>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	b2db      	uxtb	r3, r3
 8013c4e:	3b05      	subs	r3, #5
 8013c50:	b2da      	uxtb	r2, r3
 8013c52:	4b16      	ldr	r3, [pc, #88]	@ (8013cac <LCD_DisplayMenu+0x888>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	331e      	adds	r3, #30
 8013c5a:	b2db      	uxtb	r3, r3
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	4610      	mov	r0, r2
 8013c60:	f7ef f970 	bl	8002f44 <ssd1306_SetCursor>
                ssd1306_WriteString("Sending...", Font_7x10, White);
 8013c64:	4b12      	ldr	r3, [pc, #72]	@ (8013cb0 <LCD_DisplayMenu+0x88c>)
 8013c66:	2201      	movs	r2, #1
 8013c68:	9200      	str	r2, [sp, #0]
 8013c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013c6c:	4821      	ldr	r0, [pc, #132]	@ (8013cf4 <LCD_DisplayMenu+0x8d0>)
 8013c6e:	f7ef f943 	bl	8002ef8 <ssd1306_WriteString>
                Send_TO_BLE();  // Call the function that sends data over BLE
 8013c72:	f7fe ff95 	bl	8012ba0 <Send_TO_BLE>
                sendBLEFlag = 0;  // Reset the flag after sending
 8013c76:	4b1e      	ldr	r3, [pc, #120]	@ (8013cf0 <LCD_DisplayMenu+0x8cc>)
 8013c78:	2200      	movs	r2, #0
 8013c7a:	601a      	str	r2, [r3, #0]
            }

            break;
 8013c7c:	e003      	b.n	8013c86 <LCD_DisplayMenu+0x862>
			break;
 8013c7e:	bf00      	nop
 8013c80:	e002      	b.n	8013c88 <LCD_DisplayMenu+0x864>
			break;
 8013c82:	bf00      	nop
 8013c84:	e000      	b.n	8013c88 <LCD_DisplayMenu+0x864>
            break;
 8013c86:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 8013c88:	f7ef f82a 	bl	8002ce0 <ssd1306_UpdateScreen>
}
 8013c8c:	bf00      	nop
 8013c8e:	3740      	adds	r7, #64	@ 0x40
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}
 8013c94:	08019d68 	.word	0x08019d68
 8013c98:	08018198 	.word	0x08018198
 8013c9c:	080181a0 	.word	0x080181a0
 8013ca0:	200026c8 	.word	0x200026c8
 8013ca4:	2000268d 	.word	0x2000268d
 8013ca8:	200000c4 	.word	0x200000c4
 8013cac:	200000c8 	.word	0x200000c8
 8013cb0:	08019d74 	.word	0x08019d74
 8013cb4:	08018220 	.word	0x08018220
 8013cb8:	200026d0 	.word	0x200026d0
 8013cbc:	200026d1 	.word	0x200026d1
 8013cc0:	200026d2 	.word	0x200026d2
 8013cc4:	0801822c 	.word	0x0801822c
 8013cc8:	200026d4 	.word	0x200026d4
 8013ccc:	200000d5 	.word	0x200000d5
 8013cd0:	200000d6 	.word	0x200000d6
 8013cd4:	200000d7 	.word	0x200000d7
 8013cd8:	0801823c 	.word	0x0801823c
 8013cdc:	40020c00 	.word	0x40020c00
 8013ce0:	200026c0 	.word	0x200026c0
 8013ce4:	0801824c 	.word	0x0801824c
 8013ce8:	200000cc 	.word	0x200000cc
 8013cec:	08018258 	.word	0x08018258
 8013cf0:	200026f8 	.word	0x200026f8
 8013cf4:	08018264 	.word	0x08018264

08013cf8 <LCD_HandleButtonPress>:

// Function to handle button presses
void LCD_HandleButtonPress(void) {
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	af00      	add	r7, sp, #0
    // Assume button GPIOs are connected and configured
    if ((HAL_GPIO_ReadPin(GPIOA, NAVIGATE_BTN_Pin) == GPIO_PIN_RESET)) { // Navigate Button
 8013cfc:	2101      	movs	r1, #1
 8013cfe:	487a      	ldr	r0, [pc, #488]	@ (8013ee8 <LCD_HandleButtonPress+0x1f0>)
 8013d00:	f7f2 f808 	bl	8005d14 <HAL_GPIO_ReadPin>
 8013d04:	4603      	mov	r3, r0
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d145      	bne.n	8013d96 <LCD_HandleButtonPress+0x9e>
    	UserAction_Detected();
 8013d0a:	f000 feaf 	bl	8014a6c <UserAction_Detected>
    	RTC_DisplayTime();
 8013d0e:	f000 ffe5 	bl	8014cdc <RTC_DisplayTime>
        holdNavigateBtn++;
 8013d12:	4b76      	ldr	r3, [pc, #472]	@ (8013eec <LCD_HandleButtonPress+0x1f4>)
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	3301      	adds	r3, #1
 8013d18:	b2da      	uxtb	r2, r3
 8013d1a:	4b74      	ldr	r3, [pc, #464]	@ (8013eec <LCD_HandleButtonPress+0x1f4>)
 8013d1c:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Debounce_Delay); // Debounce delay
 8013d1e:	4b74      	ldr	r3, [pc, #464]	@ (8013ef0 <LCD_HandleButtonPress+0x1f8>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7f0 f94a 	bl	8003fbc <HAL_Delay>

        if (holdNavigateBtn >= 12) { // Assuming hold for 2000 ms
 8013d28:	4b70      	ldr	r3, [pc, #448]	@ (8013eec <LCD_HandleButtonPress+0x1f4>)
 8013d2a:	781b      	ldrb	r3, [r3, #0]
 8013d2c:	2b0b      	cmp	r3, #11
 8013d2e:	d902      	bls.n	8013d36 <LCD_HandleButtonPress+0x3e>
            LCD_Reset();
 8013d30:	f000 fe0c 	bl	801494c <LCD_Reset>
		}

    } else {
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
    }
}
 8013d34:	e0d5      	b.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
        	 if (currentMenu == MENU_SET_AVG || currentMenu == MENU_EDIT_RTC)
 8013d36:	4b6f      	ldr	r3, [pc, #444]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	2b02      	cmp	r3, #2
 8013d3c:	d003      	beq.n	8013d46 <LCD_HandleButtonPress+0x4e>
 8013d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	2b06      	cmp	r3, #6
 8013d44:	d11c      	bne.n	8013d80 <LCD_HandleButtonPress+0x88>
				currentCursor = (currentCursor + 1) % CURSOR_TOTAL;
 8013d46:	4b6c      	ldr	r3, [pc, #432]	@ (8013ef8 <LCD_HandleButtonPress+0x200>)
 8013d48:	781b      	ldrb	r3, [r3, #0]
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	f003 0301 	and.w	r3, r3, #1
 8013d52:	bfb8      	it	lt
 8013d54:	425b      	neglt	r3, r3
 8013d56:	b2da      	uxtb	r2, r3
 8013d58:	4b67      	ldr	r3, [pc, #412]	@ (8013ef8 <LCD_HandleButtonPress+0x200>)
 8013d5a:	701a      	strb	r2, [r3, #0]
				if(currentCursor>=2)  currentCursor = (currentCursor - 1) % CURSOR_TOTAL;
 8013d5c:	4b66      	ldr	r3, [pc, #408]	@ (8013ef8 <LCD_HandleButtonPress+0x200>)
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	d90a      	bls.n	8013d7a <LCD_HandleButtonPress+0x82>
 8013d64:	4b64      	ldr	r3, [pc, #400]	@ (8013ef8 <LCD_HandleButtonPress+0x200>)
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	3b01      	subs	r3, #1
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	f003 0301 	and.w	r3, r3, #1
 8013d70:	bfb8      	it	lt
 8013d72:	425b      	neglt	r3, r3
 8013d74:	b2da      	uxtb	r2, r3
 8013d76:	4b60      	ldr	r3, [pc, #384]	@ (8013ef8 <LCD_HandleButtonPress+0x200>)
 8013d78:	701a      	strb	r2, [r3, #0]
				LCD_UpdateMenu();
 8013d7a:	f000 fda7 	bl	80148cc <LCD_UpdateMenu>
}
 8013d7e:	e0b0      	b.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
        	 else if (currentMenu == MENU_SEND_BLE) {
 8013d80:	4b5c      	ldr	r3, [pc, #368]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013d82:	781b      	ldrb	r3, [r3, #0]
 8013d84:	2b05      	cmp	r3, #5
 8013d86:	f040 80ac 	bne.w	8013ee2 <LCD_HandleButtonPress+0x1ea>
				 sendBLEFlag = 1;  // Set the flag to send data
 8013d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8013efc <LCD_HandleButtonPress+0x204>)
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	601a      	str	r2, [r3, #0]
				 LCD_UpdateMenu();  // Update display to show sending status
 8013d90:	f000 fd9c 	bl	80148cc <LCD_UpdateMenu>
}
 8013d94:	e0a5      	b.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
    } else if (HAL_GPIO_ReadPin(GPIOE, NEXT_BTN_Pin) == GPIO_PIN_RESET) { // Next Button
 8013d96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8013d9a:	4859      	ldr	r0, [pc, #356]	@ (8013f00 <LCD_HandleButtonPress+0x208>)
 8013d9c:	f7f1 ffba 	bl	8005d14 <HAL_GPIO_ReadPin>
 8013da0:	4603      	mov	r3, r0
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d13f      	bne.n	8013e26 <LCD_HandleButtonPress+0x12e>
    	UserAction_Detected();
 8013da6:	f000 fe61 	bl	8014a6c <UserAction_Detected>
    	RTC_DisplayTime();
 8013daa:	f000 ff97 	bl	8014cdc <RTC_DisplayTime>
        HAL_Delay(Debounce_Delay); // Debounce delay
 8013dae:	4b50      	ldr	r3, [pc, #320]	@ (8013ef0 <LCD_HandleButtonPress+0x1f8>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7f0 f902 	bl	8003fbc <HAL_Delay>
		if (currentCursor == CURSOR_ON_MENU ) {
 8013db8:	4b4f      	ldr	r3, [pc, #316]	@ (8013ef8 <LCD_HandleButtonPress+0x200>)
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d11b      	bne.n	8013df8 <LCD_HandleButtonPress+0x100>
			if (currentMenu == MENU_START_DEV) currentMenu = MENU_SET_AVG;
 8013dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013dc2:	781b      	ldrb	r3, [r3, #0]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d103      	bne.n	8013dd0 <LCD_HandleButtonPress+0xd8>
 8013dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013dca:	2202      	movs	r2, #2
 8013dcc:	701a      	strb	r2, [r3, #0]
 8013dce:	e010      	b.n	8013df2 <LCD_HandleButtonPress+0xfa>
			else currentMenu = (currentMenu + 1) % MENU_TOTAL;
 8013dd0:	4b48      	ldr	r3, [pc, #288]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013dd2:	781b      	ldrb	r3, [r3, #0]
 8013dd4:	1c5a      	adds	r2, r3, #1
 8013dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8013f04 <LCD_HandleButtonPress+0x20c>)
 8013dd8:	fb83 1302 	smull	r1, r3, r3, r2
 8013ddc:	4413      	add	r3, r2
 8013dde:	1099      	asrs	r1, r3, #2
 8013de0:	17d3      	asrs	r3, r2, #31
 8013de2:	1ac9      	subs	r1, r1, r3
 8013de4:	460b      	mov	r3, r1
 8013de6:	00db      	lsls	r3, r3, #3
 8013de8:	1a5b      	subs	r3, r3, r1
 8013dea:	1ad1      	subs	r1, r2, r3
 8013dec:	b2ca      	uxtb	r2, r1
 8013dee:	4b41      	ldr	r3, [pc, #260]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013df0:	701a      	strb	r2, [r3, #0]
			LCD_UpdateMenu();
 8013df2:	f000 fd6b 	bl	80148cc <LCD_UpdateMenu>
}
 8013df6:	e074      	b.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
		} else if (currentCursor == CURSOR_ON_VALUE) {
 8013df8:	4b3f      	ldr	r3, [pc, #252]	@ (8013ef8 <LCD_HandleButtonPress+0x200>)
 8013dfa:	781b      	ldrb	r3, [r3, #0]
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d170      	bne.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
			if (currentMenu == MENU_SET_AVG) {
 8013e00:	4b3c      	ldr	r3, [pc, #240]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	2b02      	cmp	r3, #2
 8013e06:	d16c      	bne.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
				avgValue++;
 8013e08:	4b3f      	ldr	r3, [pc, #252]	@ (8013f08 <LCD_HandleButtonPress+0x210>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8013f08 <LCD_HandleButtonPress+0x210>)
 8013e10:	6013      	str	r3, [r2, #0]
				if (avgValue > 9) avgValue = 9; // Max AVG value
 8013e12:	4b3d      	ldr	r3, [pc, #244]	@ (8013f08 <LCD_HandleButtonPress+0x210>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	2b09      	cmp	r3, #9
 8013e18:	dd02      	ble.n	8013e20 <LCD_HandleButtonPress+0x128>
 8013e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8013f08 <LCD_HandleButtonPress+0x210>)
 8013e1c:	2209      	movs	r2, #9
 8013e1e:	601a      	str	r2, [r3, #0]
				LCD_UpdateMenu();
 8013e20:	f000 fd54 	bl	80148cc <LCD_UpdateMenu>
}
 8013e24:	e05d      	b.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
    } else if (HAL_GPIO_ReadPin(GPIOE, PREV_BTN_Pin) == GPIO_PIN_RESET) { // Prev Button
 8013e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013e2a:	4835      	ldr	r0, [pc, #212]	@ (8013f00 <LCD_HandleButtonPress+0x208>)
 8013e2c:	f7f1 ff72 	bl	8005d14 <HAL_GPIO_ReadPin>
 8013e30:	4603      	mov	r3, r0
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d152      	bne.n	8013edc <LCD_HandleButtonPress+0x1e4>
    	UserAction_Detected();
 8013e36:	f000 fe19 	bl	8014a6c <UserAction_Detected>
    	RTC_DisplayTime();
 8013e3a:	f000 ff4f 	bl	8014cdc <RTC_DisplayTime>
        HAL_Delay(Debounce_Delay); // Debounce delay
 8013e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8013ef0 <LCD_HandleButtonPress+0x1f8>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7f0 f8ba 	bl	8003fbc <HAL_Delay>
		if (currentMenu == MENU_SHOW_RESULT) {SumBil = 0;AveragedBil = 0;BilResult=0;testDone=0;}
 8013e48:	4b2a      	ldr	r3, [pc, #168]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	2b04      	cmp	r3, #4
 8013e4e:	d10e      	bne.n	8013e6e <LCD_HandleButtonPress+0x176>
 8013e50:	4b2e      	ldr	r3, [pc, #184]	@ (8013f0c <LCD_HandleButtonPress+0x214>)
 8013e52:	f04f 0200 	mov.w	r2, #0
 8013e56:	601a      	str	r2, [r3, #0]
 8013e58:	4b2d      	ldr	r3, [pc, #180]	@ (8013f10 <LCD_HandleButtonPress+0x218>)
 8013e5a:	f04f 0200 	mov.w	r2, #0
 8013e5e:	601a      	str	r2, [r3, #0]
 8013e60:	4b2c      	ldr	r3, [pc, #176]	@ (8013f14 <LCD_HandleButtonPress+0x21c>)
 8013e62:	f04f 0200 	mov.w	r2, #0
 8013e66:	601a      	str	r2, [r3, #0]
 8013e68:	4b2b      	ldr	r3, [pc, #172]	@ (8013f18 <LCD_HandleButtonPress+0x220>)
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	701a      	strb	r2, [r3, #0]
		if (currentCursor == CURSOR_ON_MENU ) {
 8013e6e:	4b22      	ldr	r3, [pc, #136]	@ (8013ef8 <LCD_HandleButtonPress+0x200>)
 8013e70:	781b      	ldrb	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d11b      	bne.n	8013eae <LCD_HandleButtonPress+0x1b6>
			if (currentMenu == MENU_START_DEV) currentMenu = MENU_READ_ID;
 8013e76:	4b1f      	ldr	r3, [pc, #124]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013e78:	781b      	ldrb	r3, [r3, #0]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d103      	bne.n	8013e86 <LCD_HandleButtonPress+0x18e>
 8013e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013e80:	2201      	movs	r2, #1
 8013e82:	701a      	strb	r2, [r3, #0]
 8013e84:	e010      	b.n	8013ea8 <LCD_HandleButtonPress+0x1b0>
			else currentMenu = (currentMenu - 1 + MENU_TOTAL) % MENU_TOTAL;
 8013e86:	4b1b      	ldr	r3, [pc, #108]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	1d9a      	adds	r2, r3, #6
 8013e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8013f04 <LCD_HandleButtonPress+0x20c>)
 8013e8e:	fb83 1302 	smull	r1, r3, r3, r2
 8013e92:	4413      	add	r3, r2
 8013e94:	1099      	asrs	r1, r3, #2
 8013e96:	17d3      	asrs	r3, r2, #31
 8013e98:	1ac9      	subs	r1, r1, r3
 8013e9a:	460b      	mov	r3, r1
 8013e9c:	00db      	lsls	r3, r3, #3
 8013e9e:	1a5b      	subs	r3, r3, r1
 8013ea0:	1ad1      	subs	r1, r2, r3
 8013ea2:	b2ca      	uxtb	r2, r1
 8013ea4:	4b13      	ldr	r3, [pc, #76]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013ea6:	701a      	strb	r2, [r3, #0]
			LCD_UpdateMenu();
 8013ea8:	f000 fd10 	bl	80148cc <LCD_UpdateMenu>
}
 8013eac:	e019      	b.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
		} else if (currentCursor == CURSOR_ON_VALUE) {
 8013eae:	4b12      	ldr	r3, [pc, #72]	@ (8013ef8 <LCD_HandleButtonPress+0x200>)
 8013eb0:	781b      	ldrb	r3, [r3, #0]
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d115      	bne.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
			if (currentMenu == MENU_SET_AVG) {
 8013eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8013ef4 <LCD_HandleButtonPress+0x1fc>)
 8013eb8:	781b      	ldrb	r3, [r3, #0]
 8013eba:	2b02      	cmp	r3, #2
 8013ebc:	d111      	bne.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
				avgValue--;
 8013ebe:	4b12      	ldr	r3, [pc, #72]	@ (8013f08 <LCD_HandleButtonPress+0x210>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	3b01      	subs	r3, #1
 8013ec4:	4a10      	ldr	r2, [pc, #64]	@ (8013f08 <LCD_HandleButtonPress+0x210>)
 8013ec6:	6013      	str	r3, [r2, #0]
				if (avgValue < 1) avgValue = 1; // Min AVG value
 8013ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8013f08 <LCD_HandleButtonPress+0x210>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	dc02      	bgt.n	8013ed6 <LCD_HandleButtonPress+0x1de>
 8013ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8013f08 <LCD_HandleButtonPress+0x210>)
 8013ed2:	2201      	movs	r2, #1
 8013ed4:	601a      	str	r2, [r3, #0]
				LCD_UpdateMenu();
 8013ed6:	f000 fcf9 	bl	80148cc <LCD_UpdateMenu>
}
 8013eda:	e002      	b.n	8013ee2 <LCD_HandleButtonPress+0x1ea>
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
 8013edc:	4b03      	ldr	r3, [pc, #12]	@ (8013eec <LCD_HandleButtonPress+0x1f4>)
 8013ede:	2200      	movs	r2, #0
 8013ee0:	701a      	strb	r2, [r3, #0]
}
 8013ee2:	bf00      	nop
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	40020000 	.word	0x40020000
 8013eec:	2000268e 	.word	0x2000268e
 8013ef0:	200000bc 	.word	0x200000bc
 8013ef4:	2000268c 	.word	0x2000268c
 8013ef8:	2000268d 	.word	0x2000268d
 8013efc:	200026f8 	.word	0x200026f8
 8013f00:	40021000 	.word	0x40021000
 8013f04:	92492493 	.word	0x92492493
 8013f08:	200000b4 	.word	0x200000b4
 8013f0c:	200026c4 	.word	0x200026c4
 8013f10:	200026c0 	.word	0x200026c0
 8013f14:	20002680 	.word	0x20002680
 8013f18:	20002672 	.word	0x20002672

08013f1c <HighlightNumber>:

//##############################################################################################################

void HighlightNumber(int x, int y, const char* format, int value) {
 8013f1c:	b590      	push	{r4, r7, lr}
 8013f1e:	b08b      	sub	sp, #44	@ 0x2c
 8013f20:	af02      	add	r7, sp, #8
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	60b9      	str	r1, [r7, #8]
 8013f26:	607a      	str	r2, [r7, #4]
 8013f28:	603b      	str	r3, [r7, #0]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), format, value);
 8013f2a:	f107 0014 	add.w	r0, r7, #20
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	687a      	ldr	r2, [r7, #4]
 8013f32:	210a      	movs	r1, #10
 8013f34:	f002 f848 	bl	8015fc8 <sniprintf>
    ssd1306_SetCursor(x, y);
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	b2db      	uxtb	r3, r3
 8013f3c:	68ba      	ldr	r2, [r7, #8]
 8013f3e:	b2d2      	uxtb	r2, r2
 8013f40:	4611      	mov	r1, r2
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7ee fffe 	bl	8002f44 <ssd1306_SetCursor>
    ssd1306_FillRectangle(x, y, x+8 , y+8 , White);
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	b2d8      	uxtb	r0, r3
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	b2d9      	uxtb	r1, r3
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	b2db      	uxtb	r3, r3
 8013f54:	3308      	adds	r3, #8
 8013f56:	b2da      	uxtb	r2, r3
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	b2db      	uxtb	r3, r3
 8013f5c:	3308      	adds	r3, #8
 8013f5e:	b2db      	uxtb	r3, r3
 8013f60:	2401      	movs	r4, #1
 8013f62:	9400      	str	r4, [sp, #0]
 8013f64:	f7ef f806 	bl	8002f74 <ssd1306_FillRectangle>
    ssd1306_WriteString(buffer, Font_7x10, Black); // Write black text on white background
 8013f68:	4b05      	ldr	r3, [pc, #20]	@ (8013f80 <HighlightNumber+0x64>)
 8013f6a:	f107 0014 	add.w	r0, r7, #20
 8013f6e:	2200      	movs	r2, #0
 8013f70:	9200      	str	r2, [sp, #0]
 8013f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013f74:	f7ee ffc0 	bl	8002ef8 <ssd1306_WriteString>
}
 8013f78:	bf00      	nop
 8013f7a:	3724      	adds	r7, #36	@ 0x24
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd90      	pop	{r4, r7, pc}
 8013f80:	08019d74 	.word	0x08019d74

08013f84 <EditRTC>:

void EditRTC() {
 8013f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f86:	b085      	sub	sp, #20
 8013f88:	af04      	add	r7, sp, #16
    // Variables to store user input for the RTC
    static int editIndex = 0; // Index to navigate through time and date components

	while(editIndex<6 && !TimeSetDone)  // && !TimeSetDone
 8013f8a:	e236      	b.n	80143fa <EditRTC+0x476>
	{
		    // Display and highlight the component being edited
		    ssd1306_SetCursor(menu_line_X, menu_line_Y+16);
 8013f8c:	4bad      	ldr	r3, [pc, #692]	@ (8014244 <EditRTC+0x2c0>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	b2da      	uxtb	r2, r3
 8013f92:	4bad      	ldr	r3, [pc, #692]	@ (8014248 <EditRTC+0x2c4>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	b2db      	uxtb	r3, r3
 8013f98:	3310      	adds	r3, #16
 8013f9a:	b2db      	uxtb	r3, r3
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	4610      	mov	r0, r2
 8013fa0:	f7ee ffd0 	bl	8002f44 <ssd1306_SetCursor>
		    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 8013fa4:	4ba9      	ldr	r3, [pc, #676]	@ (801424c <EditRTC+0x2c8>)
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	4619      	mov	r1, r3
 8013faa:	4ba9      	ldr	r3, [pc, #676]	@ (8014250 <EditRTC+0x2cc>)
 8013fac:	781b      	ldrb	r3, [r3, #0]
 8013fae:	461a      	mov	r2, r3
 8013fb0:	4ba8      	ldr	r3, [pc, #672]	@ (8014254 <EditRTC+0x2d0>)
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	9301      	str	r3, [sp, #4]
 8013fb6:	9200      	str	r2, [sp, #0]
 8013fb8:	460b      	mov	r3, r1
 8013fba:	4aa7      	ldr	r2, [pc, #668]	@ (8014258 <EditRTC+0x2d4>)
 8013fbc:	2114      	movs	r1, #20
 8013fbe:	48a7      	ldr	r0, [pc, #668]	@ (801425c <EditRTC+0x2d8>)
 8013fc0:	f002 f802 	bl	8015fc8 <sniprintf>
		    ssd1306_WriteString(buffer, Font_7x10, White);
 8013fc4:	4ba6      	ldr	r3, [pc, #664]	@ (8014260 <EditRTC+0x2dc>)
 8013fc6:	2201      	movs	r2, #1
 8013fc8:	9200      	str	r2, [sp, #0]
 8013fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013fcc:	48a3      	ldr	r0, [pc, #652]	@ (801425c <EditRTC+0x2d8>)
 8013fce:	f7ee ff93 	bl	8002ef8 <ssd1306_WriteString>

		    ssd1306_SetCursor(menu_line_X, menu_line_Y+32);
 8013fd2:	4b9c      	ldr	r3, [pc, #624]	@ (8014244 <EditRTC+0x2c0>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	b2da      	uxtb	r2, r3
 8013fd8:	4b9b      	ldr	r3, [pc, #620]	@ (8014248 <EditRTC+0x2c4>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	3320      	adds	r3, #32
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	4610      	mov	r0, r2
 8013fe6:	f7ee ffad 	bl	8002f44 <ssd1306_SetCursor>
		    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", day, month, year);
 8013fea:	4b9e      	ldr	r3, [pc, #632]	@ (8014264 <EditRTC+0x2e0>)
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	4619      	mov	r1, r3
 8013ff0:	4b9d      	ldr	r3, [pc, #628]	@ (8014268 <EditRTC+0x2e4>)
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	4b9d      	ldr	r3, [pc, #628]	@ (801426c <EditRTC+0x2e8>)
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	9301      	str	r3, [sp, #4]
 8013ffc:	9200      	str	r2, [sp, #0]
 8013ffe:	460b      	mov	r3, r1
 8014000:	4a9b      	ldr	r2, [pc, #620]	@ (8014270 <EditRTC+0x2ec>)
 8014002:	2114      	movs	r1, #20
 8014004:	4895      	ldr	r0, [pc, #596]	@ (801425c <EditRTC+0x2d8>)
 8014006:	f001 ffdf 	bl	8015fc8 <sniprintf>
		    ssd1306_WriteString(buffer, Font_7x10, White);
 801400a:	4b95      	ldr	r3, [pc, #596]	@ (8014260 <EditRTC+0x2dc>)
 801400c:	2201      	movs	r2, #1
 801400e:	9200      	str	r2, [sp, #0]
 8014010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014012:	4892      	ldr	r0, [pc, #584]	@ (801425c <EditRTC+0x2d8>)
 8014014:	f7ee ff70 	bl	8002ef8 <ssd1306_WriteString>


		// Highlight the specific component being edited
		    switch (editIndex) {
 8014018:	4b96      	ldr	r3, [pc, #600]	@ (8014274 <EditRTC+0x2f0>)
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	2b05      	cmp	r3, #5
 801401e:	d85f      	bhi.n	80140e0 <EditRTC+0x15c>
 8014020:	a201      	add	r2, pc, #4	@ (adr r2, 8014028 <EditRTC+0xa4>)
 8014022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014026:	bf00      	nop
 8014028:	08014041 	.word	0x08014041
 801402c:	08014059 	.word	0x08014059
 8014030:	08014075 	.word	0x08014075
 8014034:	08014091 	.word	0x08014091
 8014038:	080140a9 	.word	0x080140a9
 801403c:	080140c5 	.word	0x080140c5
		        case 0:
		            HighlightNumber(menu_line_X, menu_line_Y+16, "%02d", hours);
 8014040:	4b80      	ldr	r3, [pc, #512]	@ (8014244 <EditRTC+0x2c0>)
 8014042:	6818      	ldr	r0, [r3, #0]
 8014044:	4b80      	ldr	r3, [pc, #512]	@ (8014248 <EditRTC+0x2c4>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	f103 0110 	add.w	r1, r3, #16
 801404c:	4b7f      	ldr	r3, [pc, #508]	@ (801424c <EditRTC+0x2c8>)
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	4a89      	ldr	r2, [pc, #548]	@ (8014278 <EditRTC+0x2f4>)
 8014052:	f7ff ff63 	bl	8013f1c <HighlightNumber>
		            break;
 8014056:	e043      	b.n	80140e0 <EditRTC+0x15c>
		        case 1:
		            HighlightNumber(menu_line_X+22, menu_line_Y+16, "%02d", minutes);
 8014058:	4b7a      	ldr	r3, [pc, #488]	@ (8014244 <EditRTC+0x2c0>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	f103 0016 	add.w	r0, r3, #22
 8014060:	4b79      	ldr	r3, [pc, #484]	@ (8014248 <EditRTC+0x2c4>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	f103 0110 	add.w	r1, r3, #16
 8014068:	4b79      	ldr	r3, [pc, #484]	@ (8014250 <EditRTC+0x2cc>)
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	4a82      	ldr	r2, [pc, #520]	@ (8014278 <EditRTC+0x2f4>)
 801406e:	f7ff ff55 	bl	8013f1c <HighlightNumber>
		            break;
 8014072:	e035      	b.n	80140e0 <EditRTC+0x15c>
		        case 2:
		            HighlightNumber(menu_line_X+44-2, menu_line_Y+16, "%02d", seconds);
 8014074:	4b73      	ldr	r3, [pc, #460]	@ (8014244 <EditRTC+0x2c0>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801407c:	4b72      	ldr	r3, [pc, #456]	@ (8014248 <EditRTC+0x2c4>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	f103 0110 	add.w	r1, r3, #16
 8014084:	4b73      	ldr	r3, [pc, #460]	@ (8014254 <EditRTC+0x2d0>)
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	4a7b      	ldr	r2, [pc, #492]	@ (8014278 <EditRTC+0x2f4>)
 801408a:	f7ff ff47 	bl	8013f1c <HighlightNumber>
		            break;
 801408e:	e027      	b.n	80140e0 <EditRTC+0x15c>
		        case 3:
		            HighlightNumber(menu_line_X, menu_line_Y+32, "%02d", day);
 8014090:	4b6c      	ldr	r3, [pc, #432]	@ (8014244 <EditRTC+0x2c0>)
 8014092:	6818      	ldr	r0, [r3, #0]
 8014094:	4b6c      	ldr	r3, [pc, #432]	@ (8014248 <EditRTC+0x2c4>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	f103 0120 	add.w	r1, r3, #32
 801409c:	4b71      	ldr	r3, [pc, #452]	@ (8014264 <EditRTC+0x2e0>)
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	4a75      	ldr	r2, [pc, #468]	@ (8014278 <EditRTC+0x2f4>)
 80140a2:	f7ff ff3b 	bl	8013f1c <HighlightNumber>
		            break;
 80140a6:	e01b      	b.n	80140e0 <EditRTC+0x15c>
		        case 4:
		            HighlightNumber(menu_line_X+22, menu_line_Y+32, "%02d", month);
 80140a8:	4b66      	ldr	r3, [pc, #408]	@ (8014244 <EditRTC+0x2c0>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	f103 0016 	add.w	r0, r3, #22
 80140b0:	4b65      	ldr	r3, [pc, #404]	@ (8014248 <EditRTC+0x2c4>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	f103 0120 	add.w	r1, r3, #32
 80140b8:	4b6b      	ldr	r3, [pc, #428]	@ (8014268 <EditRTC+0x2e4>)
 80140ba:	781b      	ldrb	r3, [r3, #0]
 80140bc:	4a6e      	ldr	r2, [pc, #440]	@ (8014278 <EditRTC+0x2f4>)
 80140be:	f7ff ff2d 	bl	8013f1c <HighlightNumber>
		            break;
 80140c2:	e00d      	b.n	80140e0 <EditRTC+0x15c>
		        case 5:
		            HighlightNumber(menu_line_X+44-2, menu_line_Y+32, "%02d", year);
 80140c4:	4b5f      	ldr	r3, [pc, #380]	@ (8014244 <EditRTC+0x2c0>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80140cc:	4b5e      	ldr	r3, [pc, #376]	@ (8014248 <EditRTC+0x2c4>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	f103 0120 	add.w	r1, r3, #32
 80140d4:	4b65      	ldr	r3, [pc, #404]	@ (801426c <EditRTC+0x2e8>)
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	4a67      	ldr	r2, [pc, #412]	@ (8014278 <EditRTC+0x2f4>)
 80140da:	f7ff ff1f 	bl	8013f1c <HighlightNumber>
		            break;
 80140de:	bf00      	nop
		    }

		// Handle button presses for editing
		if (HAL_GPIO_ReadPin(GPIOE, NEXT_BTN_Pin) == GPIO_PIN_RESET) {
 80140e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80140e4:	4865      	ldr	r0, [pc, #404]	@ (801427c <EditRTC+0x2f8>)
 80140e6:	f7f1 fe15 	bl	8005d14 <HAL_GPIO_ReadPin>
 80140ea:	4603      	mov	r3, r0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	f040 8086 	bne.w	80141fe <EditRTC+0x27a>
			HAL_Delay(Debounce_Delay); // Debounce delay
 80140f2:	4b63      	ldr	r3, [pc, #396]	@ (8014280 <EditRTC+0x2fc>)
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7ef ff60 	bl	8003fbc <HAL_Delay>
			switch (editIndex) {
 80140fc:	4b5d      	ldr	r3, [pc, #372]	@ (8014274 <EditRTC+0x2f0>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	2b05      	cmp	r3, #5
 8014102:	f200 8178 	bhi.w	80143f6 <EditRTC+0x472>
 8014106:	a201      	add	r2, pc, #4	@ (adr r2, 801410c <EditRTC+0x188>)
 8014108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801410c:	08014125 	.word	0x08014125
 8014110:	08014149 	.word	0x08014149
 8014114:	0801416f 	.word	0x0801416f
 8014118:	08014195 	.word	0x08014195
 801411c:	080141bb 	.word	0x080141bb
 8014120:	080141dd 	.word	0x080141dd
				case 0: hours = (hours + 1) % 24; break;
 8014124:	4b49      	ldr	r3, [pc, #292]	@ (801424c <EditRTC+0x2c8>)
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	1c5a      	adds	r2, r3, #1
 801412a:	4b56      	ldr	r3, [pc, #344]	@ (8014284 <EditRTC+0x300>)
 801412c:	fb83 1302 	smull	r1, r3, r3, r2
 8014130:	1099      	asrs	r1, r3, #2
 8014132:	17d3      	asrs	r3, r2, #31
 8014134:	1ac9      	subs	r1, r1, r3
 8014136:	460b      	mov	r3, r1
 8014138:	005b      	lsls	r3, r3, #1
 801413a:	440b      	add	r3, r1
 801413c:	00db      	lsls	r3, r3, #3
 801413e:	1ad1      	subs	r1, r2, r3
 8014140:	b2ca      	uxtb	r2, r1
 8014142:	4b42      	ldr	r3, [pc, #264]	@ (801424c <EditRTC+0x2c8>)
 8014144:	701a      	strb	r2, [r3, #0]
 8014146:	e156      	b.n	80143f6 <EditRTC+0x472>
				case 1: minutes = (minutes + 1) % 60; break;
 8014148:	4b41      	ldr	r3, [pc, #260]	@ (8014250 <EditRTC+0x2cc>)
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	1c5a      	adds	r2, r3, #1
 801414e:	4b4e      	ldr	r3, [pc, #312]	@ (8014288 <EditRTC+0x304>)
 8014150:	fb83 1302 	smull	r1, r3, r3, r2
 8014154:	4413      	add	r3, r2
 8014156:	1159      	asrs	r1, r3, #5
 8014158:	17d3      	asrs	r3, r2, #31
 801415a:	1ac9      	subs	r1, r1, r3
 801415c:	460b      	mov	r3, r1
 801415e:	011b      	lsls	r3, r3, #4
 8014160:	1a5b      	subs	r3, r3, r1
 8014162:	009b      	lsls	r3, r3, #2
 8014164:	1ad1      	subs	r1, r2, r3
 8014166:	b2ca      	uxtb	r2, r1
 8014168:	4b39      	ldr	r3, [pc, #228]	@ (8014250 <EditRTC+0x2cc>)
 801416a:	701a      	strb	r2, [r3, #0]
 801416c:	e143      	b.n	80143f6 <EditRTC+0x472>
				case 2: seconds = (seconds + 1) % 60; break;
 801416e:	4b39      	ldr	r3, [pc, #228]	@ (8014254 <EditRTC+0x2d0>)
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	1c5a      	adds	r2, r3, #1
 8014174:	4b44      	ldr	r3, [pc, #272]	@ (8014288 <EditRTC+0x304>)
 8014176:	fb83 1302 	smull	r1, r3, r3, r2
 801417a:	4413      	add	r3, r2
 801417c:	1159      	asrs	r1, r3, #5
 801417e:	17d3      	asrs	r3, r2, #31
 8014180:	1ac9      	subs	r1, r1, r3
 8014182:	460b      	mov	r3, r1
 8014184:	011b      	lsls	r3, r3, #4
 8014186:	1a5b      	subs	r3, r3, r1
 8014188:	009b      	lsls	r3, r3, #2
 801418a:	1ad1      	subs	r1, r2, r3
 801418c:	b2ca      	uxtb	r2, r1
 801418e:	4b31      	ldr	r3, [pc, #196]	@ (8014254 <EditRTC+0x2d0>)
 8014190:	701a      	strb	r2, [r3, #0]
 8014192:	e130      	b.n	80143f6 <EditRTC+0x472>
				case 3: day = (day % 31) + 1; break;
 8014194:	4b33      	ldr	r3, [pc, #204]	@ (8014264 <EditRTC+0x2e0>)
 8014196:	781a      	ldrb	r2, [r3, #0]
 8014198:	4b3c      	ldr	r3, [pc, #240]	@ (801428c <EditRTC+0x308>)
 801419a:	fba3 1302 	umull	r1, r3, r3, r2
 801419e:	1ad1      	subs	r1, r2, r3
 80141a0:	0849      	lsrs	r1, r1, #1
 80141a2:	440b      	add	r3, r1
 80141a4:	0919      	lsrs	r1, r3, #4
 80141a6:	460b      	mov	r3, r1
 80141a8:	015b      	lsls	r3, r3, #5
 80141aa:	1a5b      	subs	r3, r3, r1
 80141ac:	1ad3      	subs	r3, r2, r3
 80141ae:	b2db      	uxtb	r3, r3
 80141b0:	3301      	adds	r3, #1
 80141b2:	b2da      	uxtb	r2, r3
 80141b4:	4b2b      	ldr	r3, [pc, #172]	@ (8014264 <EditRTC+0x2e0>)
 80141b6:	701a      	strb	r2, [r3, #0]
 80141b8:	e11d      	b.n	80143f6 <EditRTC+0x472>
				case 4: month = (month % 12) + 1; break;
 80141ba:	4b2b      	ldr	r3, [pc, #172]	@ (8014268 <EditRTC+0x2e4>)
 80141bc:	781a      	ldrb	r2, [r3, #0]
 80141be:	4b34      	ldr	r3, [pc, #208]	@ (8014290 <EditRTC+0x30c>)
 80141c0:	fba3 1302 	umull	r1, r3, r3, r2
 80141c4:	08d9      	lsrs	r1, r3, #3
 80141c6:	460b      	mov	r3, r1
 80141c8:	005b      	lsls	r3, r3, #1
 80141ca:	440b      	add	r3, r1
 80141cc:	009b      	lsls	r3, r3, #2
 80141ce:	1ad3      	subs	r3, r2, r3
 80141d0:	b2db      	uxtb	r3, r3
 80141d2:	3301      	adds	r3, #1
 80141d4:	b2da      	uxtb	r2, r3
 80141d6:	4b24      	ldr	r3, [pc, #144]	@ (8014268 <EditRTC+0x2e4>)
 80141d8:	701a      	strb	r2, [r3, #0]
 80141da:	e10c      	b.n	80143f6 <EditRTC+0x472>
				case 5: year = (year + 1) % 100; break;
 80141dc:	4b23      	ldr	r3, [pc, #140]	@ (801426c <EditRTC+0x2e8>)
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	3301      	adds	r3, #1
 80141e2:	4a2c      	ldr	r2, [pc, #176]	@ (8014294 <EditRTC+0x310>)
 80141e4:	fb82 1203 	smull	r1, r2, r2, r3
 80141e8:	1151      	asrs	r1, r2, #5
 80141ea:	17da      	asrs	r2, r3, #31
 80141ec:	1a8a      	subs	r2, r1, r2
 80141ee:	2164      	movs	r1, #100	@ 0x64
 80141f0:	fb01 f202 	mul.w	r2, r1, r2
 80141f4:	1a9a      	subs	r2, r3, r2
 80141f6:	b2d2      	uxtb	r2, r2
 80141f8:	4b1c      	ldr	r3, [pc, #112]	@ (801426c <EditRTC+0x2e8>)
 80141fa:	701a      	strb	r2, [r3, #0]
 80141fc:	e0fb      	b.n	80143f6 <EditRTC+0x472>
			}
		} else if (HAL_GPIO_ReadPin(GPIOE, PREV_BTN_Pin) == GPIO_PIN_RESET) {
 80141fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8014202:	481e      	ldr	r0, [pc, #120]	@ (801427c <EditRTC+0x2f8>)
 8014204:	f7f1 fd86 	bl	8005d14 <HAL_GPIO_ReadPin>
 8014208:	4603      	mov	r3, r0
 801420a:	2b00      	cmp	r3, #0
 801420c:	f040 8092 	bne.w	8014334 <EditRTC+0x3b0>
			HAL_Delay(Debounce_Delay); // Debounce delay
 8014210:	4b1b      	ldr	r3, [pc, #108]	@ (8014280 <EditRTC+0x2fc>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4618      	mov	r0, r3
 8014216:	f7ef fed1 	bl	8003fbc <HAL_Delay>
			switch (editIndex) {
 801421a:	4b16      	ldr	r3, [pc, #88]	@ (8014274 <EditRTC+0x2f0>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	2b05      	cmp	r3, #5
 8014220:	f200 80e9 	bhi.w	80143f6 <EditRTC+0x472>
 8014224:	a201      	add	r2, pc, #4	@ (adr r2, 801422c <EditRTC+0x2a8>)
 8014226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801422a:	bf00      	nop
 801422c:	08014299 	.word	0x08014299
 8014230:	080142b3 	.word	0x080142b3
 8014234:	080142cd 	.word	0x080142cd
 8014238:	080142e7 	.word	0x080142e7
 801423c:	08014301 	.word	0x08014301
 8014240:	0801431b 	.word	0x0801431b
 8014244:	200000c4 	.word	0x200000c4
 8014248:	200000c8 	.word	0x200000c8
 801424c:	200026d0 	.word	0x200026d0
 8014250:	200026d1 	.word	0x200026d1
 8014254:	200026d2 	.word	0x200026d2
 8014258:	0801822c 	.word	0x0801822c
 801425c:	200026d4 	.word	0x200026d4
 8014260:	08019d74 	.word	0x08019d74
 8014264:	200000d5 	.word	0x200000d5
 8014268:	200000d6 	.word	0x200000d6
 801426c:	200000d7 	.word	0x200000d7
 8014270:	0801823c 	.word	0x0801823c
 8014274:	20002708 	.word	0x20002708
 8014278:	08018270 	.word	0x08018270
 801427c:	40021000 	.word	0x40021000
 8014280:	200000bc 	.word	0x200000bc
 8014284:	2aaaaaab 	.word	0x2aaaaaab
 8014288:	88888889 	.word	0x88888889
 801428c:	08421085 	.word	0x08421085
 8014290:	aaaaaaab 	.word	0xaaaaaaab
 8014294:	51eb851f 	.word	0x51eb851f
				case 0: hours = (hours == 0) ? 23 : hours - 1; break;
 8014298:	4b61      	ldr	r3, [pc, #388]	@ (8014420 <EditRTC+0x49c>)
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d004      	beq.n	80142aa <EditRTC+0x326>
 80142a0:	4b5f      	ldr	r3, [pc, #380]	@ (8014420 <EditRTC+0x49c>)
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	3b01      	subs	r3, #1
 80142a6:	b2db      	uxtb	r3, r3
 80142a8:	e000      	b.n	80142ac <EditRTC+0x328>
 80142aa:	2317      	movs	r3, #23
 80142ac:	4a5c      	ldr	r2, [pc, #368]	@ (8014420 <EditRTC+0x49c>)
 80142ae:	7013      	strb	r3, [r2, #0]
 80142b0:	e0a1      	b.n	80143f6 <EditRTC+0x472>
				case 1: minutes = (minutes == 0) ? 59 : minutes - 1; break;
 80142b2:	4b5c      	ldr	r3, [pc, #368]	@ (8014424 <EditRTC+0x4a0>)
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d004      	beq.n	80142c4 <EditRTC+0x340>
 80142ba:	4b5a      	ldr	r3, [pc, #360]	@ (8014424 <EditRTC+0x4a0>)
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	3b01      	subs	r3, #1
 80142c0:	b2db      	uxtb	r3, r3
 80142c2:	e000      	b.n	80142c6 <EditRTC+0x342>
 80142c4:	233b      	movs	r3, #59	@ 0x3b
 80142c6:	4a57      	ldr	r2, [pc, #348]	@ (8014424 <EditRTC+0x4a0>)
 80142c8:	7013      	strb	r3, [r2, #0]
 80142ca:	e094      	b.n	80143f6 <EditRTC+0x472>
				case 2: seconds = (seconds == 0) ? 59 : seconds - 1; break;
 80142cc:	4b56      	ldr	r3, [pc, #344]	@ (8014428 <EditRTC+0x4a4>)
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d004      	beq.n	80142de <EditRTC+0x35a>
 80142d4:	4b54      	ldr	r3, [pc, #336]	@ (8014428 <EditRTC+0x4a4>)
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	3b01      	subs	r3, #1
 80142da:	b2db      	uxtb	r3, r3
 80142dc:	e000      	b.n	80142e0 <EditRTC+0x35c>
 80142de:	233b      	movs	r3, #59	@ 0x3b
 80142e0:	4a51      	ldr	r2, [pc, #324]	@ (8014428 <EditRTC+0x4a4>)
 80142e2:	7013      	strb	r3, [r2, #0]
 80142e4:	e087      	b.n	80143f6 <EditRTC+0x472>
				case 3: day = (day == 1) ? 31 : day - 1; break;
 80142e6:	4b51      	ldr	r3, [pc, #324]	@ (801442c <EditRTC+0x4a8>)
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	2b01      	cmp	r3, #1
 80142ec:	d004      	beq.n	80142f8 <EditRTC+0x374>
 80142ee:	4b4f      	ldr	r3, [pc, #316]	@ (801442c <EditRTC+0x4a8>)
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	3b01      	subs	r3, #1
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	e000      	b.n	80142fa <EditRTC+0x376>
 80142f8:	231f      	movs	r3, #31
 80142fa:	4a4c      	ldr	r2, [pc, #304]	@ (801442c <EditRTC+0x4a8>)
 80142fc:	7013      	strb	r3, [r2, #0]
 80142fe:	e07a      	b.n	80143f6 <EditRTC+0x472>
				case 4: month = (month == 1) ? 12 : month - 1; break;
 8014300:	4b4b      	ldr	r3, [pc, #300]	@ (8014430 <EditRTC+0x4ac>)
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	2b01      	cmp	r3, #1
 8014306:	d004      	beq.n	8014312 <EditRTC+0x38e>
 8014308:	4b49      	ldr	r3, [pc, #292]	@ (8014430 <EditRTC+0x4ac>)
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	3b01      	subs	r3, #1
 801430e:	b2db      	uxtb	r3, r3
 8014310:	e000      	b.n	8014314 <EditRTC+0x390>
 8014312:	230c      	movs	r3, #12
 8014314:	4a46      	ldr	r2, [pc, #280]	@ (8014430 <EditRTC+0x4ac>)
 8014316:	7013      	strb	r3, [r2, #0]
 8014318:	e06d      	b.n	80143f6 <EditRTC+0x472>
				case 5: year = (year == 0) ? 99 : year - 1; break;
 801431a:	4b46      	ldr	r3, [pc, #280]	@ (8014434 <EditRTC+0x4b0>)
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d004      	beq.n	801432c <EditRTC+0x3a8>
 8014322:	4b44      	ldr	r3, [pc, #272]	@ (8014434 <EditRTC+0x4b0>)
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	3b01      	subs	r3, #1
 8014328:	b2db      	uxtb	r3, r3
 801432a:	e000      	b.n	801432e <EditRTC+0x3aa>
 801432c:	2363      	movs	r3, #99	@ 0x63
 801432e:	4a41      	ldr	r2, [pc, #260]	@ (8014434 <EditRTC+0x4b0>)
 8014330:	7013      	strb	r3, [r2, #0]
 8014332:	e060      	b.n	80143f6 <EditRTC+0x472>
			}
		} else if (HAL_GPIO_ReadPin(GPIOA, NAVIGATE_BTN_Pin) == GPIO_PIN_RESET) {
 8014334:	2101      	movs	r1, #1
 8014336:	4840      	ldr	r0, [pc, #256]	@ (8014438 <EditRTC+0x4b4>)
 8014338:	f7f1 fcec 	bl	8005d14 <HAL_GPIO_ReadPin>
 801433c:	4603      	mov	r3, r0
 801433e:	2b00      	cmp	r3, #0
 8014340:	d159      	bne.n	80143f6 <EditRTC+0x472>
			HAL_Delay(Debounce_Delay); // Debounce delay
 8014342:	4b3e      	ldr	r3, [pc, #248]	@ (801443c <EditRTC+0x4b8>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	4618      	mov	r0, r3
 8014348:	f7ef fe38 	bl	8003fbc <HAL_Delay>
			editIndex = (editIndex + 1) % 6;
 801434c:	4b3c      	ldr	r3, [pc, #240]	@ (8014440 <EditRTC+0x4bc>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	1c59      	adds	r1, r3, #1
 8014352:	4b3c      	ldr	r3, [pc, #240]	@ (8014444 <EditRTC+0x4c0>)
 8014354:	fb83 3201 	smull	r3, r2, r3, r1
 8014358:	17cb      	asrs	r3, r1, #31
 801435a:	1ad2      	subs	r2, r2, r3
 801435c:	4613      	mov	r3, r2
 801435e:	005b      	lsls	r3, r3, #1
 8014360:	4413      	add	r3, r2
 8014362:	005b      	lsls	r3, r3, #1
 8014364:	1aca      	subs	r2, r1, r3
 8014366:	4b36      	ldr	r3, [pc, #216]	@ (8014440 <EditRTC+0x4bc>)
 8014368:	601a      	str	r2, [r3, #0]
			holdNavigateBtn++;
 801436a:	4b37      	ldr	r3, [pc, #220]	@ (8014448 <EditRTC+0x4c4>)
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	3301      	adds	r3, #1
 8014370:	b2da      	uxtb	r2, r3
 8014372:	4b35      	ldr	r3, [pc, #212]	@ (8014448 <EditRTC+0x4c4>)
 8014374:	701a      	strb	r2, [r3, #0]
			ssd1306_UpdateScreen();
 8014376:	f7ee fcb3 	bl	8002ce0 <ssd1306_UpdateScreen>


			if (editIndex == 0) { // Completed editing all components
 801437a:	4b31      	ldr	r3, [pc, #196]	@ (8014440 <EditRTC+0x4bc>)
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d139      	bne.n	80143f6 <EditRTC+0x472>
				RTC_SetTime(hours, minutes, seconds, date, day, month, year);
 8014382:	4b27      	ldr	r3, [pc, #156]	@ (8014420 <EditRTC+0x49c>)
 8014384:	7818      	ldrb	r0, [r3, #0]
 8014386:	4b27      	ldr	r3, [pc, #156]	@ (8014424 <EditRTC+0x4a0>)
 8014388:	781c      	ldrb	r4, [r3, #0]
 801438a:	4b27      	ldr	r3, [pc, #156]	@ (8014428 <EditRTC+0x4a4>)
 801438c:	781d      	ldrb	r5, [r3, #0]
 801438e:	4b2f      	ldr	r3, [pc, #188]	@ (801444c <EditRTC+0x4c8>)
 8014390:	781e      	ldrb	r6, [r3, #0]
 8014392:	4b26      	ldr	r3, [pc, #152]	@ (801442c <EditRTC+0x4a8>)
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	4a26      	ldr	r2, [pc, #152]	@ (8014430 <EditRTC+0x4ac>)
 8014398:	7812      	ldrb	r2, [r2, #0]
 801439a:	4926      	ldr	r1, [pc, #152]	@ (8014434 <EditRTC+0x4b0>)
 801439c:	7809      	ldrb	r1, [r1, #0]
 801439e:	9102      	str	r1, [sp, #8]
 80143a0:	9201      	str	r2, [sp, #4]
 80143a2:	9300      	str	r3, [sp, #0]
 80143a4:	4633      	mov	r3, r6
 80143a6:	462a      	mov	r2, r5
 80143a8:	4621      	mov	r1, r4
 80143aa:	f000 fbe5 	bl	8014b78 <RTC_SetTime>

				HAL_Delay(10);
 80143ae:	200a      	movs	r0, #10
 80143b0:	f7ef fe04 	bl	8003fbc <HAL_Delay>
				ssd1306_Fill(Black);
 80143b4:	2000      	movs	r0, #0
 80143b6:	f7ee fc7b 	bl	8002cb0 <ssd1306_Fill>
				ssd1306_SetCursor(menu_line_X+5, menu_line_Y+5);
 80143ba:	4b25      	ldr	r3, [pc, #148]	@ (8014450 <EditRTC+0x4cc>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	b2db      	uxtb	r3, r3
 80143c0:	3305      	adds	r3, #5
 80143c2:	b2da      	uxtb	r2, r3
 80143c4:	4b23      	ldr	r3, [pc, #140]	@ (8014454 <EditRTC+0x4d0>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	b2db      	uxtb	r3, r3
 80143ca:	3305      	adds	r3, #5
 80143cc:	b2db      	uxtb	r3, r3
 80143ce:	4619      	mov	r1, r3
 80143d0:	4610      	mov	r0, r2
 80143d2:	f7ee fdb7 	bl	8002f44 <ssd1306_SetCursor>
				ssd1306_WriteString("DONE", Font_11x18, White);
 80143d6:	4b20      	ldr	r3, [pc, #128]	@ (8014458 <EditRTC+0x4d4>)
 80143d8:	2201      	movs	r2, #1
 80143da:	9200      	str	r2, [sp, #0]
 80143dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80143de:	481f      	ldr	r0, [pc, #124]	@ (801445c <EditRTC+0x4d8>)
 80143e0:	f7ee fd8a 	bl	8002ef8 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80143e4:	f7ee fc7c 	bl	8002ce0 <ssd1306_UpdateScreen>
				HAL_Delay(2000);
 80143e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80143ec:	f7ef fde6 	bl	8003fbc <HAL_Delay>

				TimeSetDone=1;
 80143f0:	4b1b      	ldr	r3, [pc, #108]	@ (8014460 <EditRTC+0x4dc>)
 80143f2:	2201      	movs	r2, #1
 80143f4:	601a      	str	r2, [r3, #0]
			}
		}

		ssd1306_UpdateScreen();
 80143f6:	f7ee fc73 	bl	8002ce0 <ssd1306_UpdateScreen>
	while(editIndex<6 && !TimeSetDone)  // && !TimeSetDone
 80143fa:	4b11      	ldr	r3, [pc, #68]	@ (8014440 <EditRTC+0x4bc>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	2b05      	cmp	r3, #5
 8014400:	dc04      	bgt.n	801440c <EditRTC+0x488>
 8014402:	4b17      	ldr	r3, [pc, #92]	@ (8014460 <EditRTC+0x4dc>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	2b00      	cmp	r3, #0
 8014408:	f43f adc0 	beq.w	8013f8c <EditRTC+0x8>
	}  //while

    currentMenu = MENU_SET_AVG;
 801440c:	4b15      	ldr	r3, [pc, #84]	@ (8014464 <EditRTC+0x4e0>)
 801440e:	2202      	movs	r2, #2
 8014410:	701a      	strb	r2, [r3, #0]
	LCD();
 8014412:	f7fe ffff 	bl	8013414 <LCD>
}
 8014416:	bf00      	nop
 8014418:	3704      	adds	r7, #4
 801441a:	46bd      	mov	sp, r7
 801441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801441e:	bf00      	nop
 8014420:	200026d0 	.word	0x200026d0
 8014424:	200026d1 	.word	0x200026d1
 8014428:	200026d2 	.word	0x200026d2
 801442c:	200000d5 	.word	0x200000d5
 8014430:	200000d6 	.word	0x200000d6
 8014434:	200000d7 	.word	0x200000d7
 8014438:	40020000 	.word	0x40020000
 801443c:	200000bc 	.word	0x200000bc
 8014440:	20002708 	.word	0x20002708
 8014444:	2aaaaaab 	.word	0x2aaaaaab
 8014448:	2000268e 	.word	0x2000268e
 801444c:	200000d4 	.word	0x200000d4
 8014450:	200000c4 	.word	0x200000c4
 8014454:	200000c8 	.word	0x200000c8
 8014458:	08019d80 	.word	0x08019d80
 801445c:	08018278 	.word	0x08018278
 8014460:	200026cc 	.word	0x200026cc
 8014464:	2000268c 	.word	0x2000268c

08014468 <BatteryPercentage>:

bool x = true;
// Function to calculate battery percentage
void BatteryPercentage(void) {                  //NOTE: With TMR: Calculate Percenatge Every 5 sec & Filter Window = 5 & UPDATE_THRESHOLD = 5
 8014468:	b580      	push	{r7, lr}
 801446a:	af00      	add	r7, sp, #0

	/*HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	adcValue1 = HAL_ADC_GetValue(&hadc1);*/

    HAL_ADC_Start_DMA(&hadc1, &adcValue1, 1);
 801446c:	2201      	movs	r2, #1
 801446e:	4942      	ldr	r1, [pc, #264]	@ (8014578 <BatteryPercentage+0x110>)
 8014470:	4842      	ldr	r0, [pc, #264]	@ (801457c <BatteryPercentage+0x114>)
 8014472:	f7ef fe0b 	bl	800408c <HAL_ADC_Start_DMA>

	batteryVoltage = (adcValue1 / 4575.0) * 3.3; //4095.0 // Convert ADC value to voltage
 8014476:	4b40      	ldr	r3, [pc, #256]	@ (8014578 <BatteryPercentage+0x110>)
 8014478:	881b      	ldrh	r3, [r3, #0]
 801447a:	4618      	mov	r0, r3
 801447c:	f7ec f862 	bl	8000544 <__aeabi_i2d>
 8014480:	a337      	add	r3, pc, #220	@ (adr r3, 8014560 <BatteryPercentage+0xf8>)
 8014482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014486:	f7ec f9f1 	bl	800086c <__aeabi_ddiv>
 801448a:	4602      	mov	r2, r0
 801448c:	460b      	mov	r3, r1
 801448e:	4610      	mov	r0, r2
 8014490:	4619      	mov	r1, r3
 8014492:	a335      	add	r3, pc, #212	@ (adr r3, 8014568 <BatteryPercentage+0x100>)
 8014494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014498:	f7ec f8be 	bl	8000618 <__aeabi_dmul>
 801449c:	4602      	mov	r2, r0
 801449e:	460b      	mov	r3, r1
 80144a0:	4610      	mov	r0, r2
 80144a2:	4619      	mov	r1, r3
 80144a4:	f7ec fb90 	bl	8000bc8 <__aeabi_d2f>
 80144a8:	4603      	mov	r3, r0
 80144aa:	4a35      	ldr	r2, [pc, #212]	@ (8014580 <BatteryPercentage+0x118>)
 80144ac:	6013      	str	r3, [r2, #0]
	batteryVoltage *= 1.52;    //1.48;  //1.53 = 240927    						//1.67	//2	 //  = (R1 + R2) / R2 = 2
 80144ae:	4b34      	ldr	r3, [pc, #208]	@ (8014580 <BatteryPercentage+0x118>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7ec f858 	bl	8000568 <__aeabi_f2d>
 80144b8:	a32d      	add	r3, pc, #180	@ (adr r3, 8014570 <BatteryPercentage+0x108>)
 80144ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144be:	f7ec f8ab 	bl	8000618 <__aeabi_dmul>
 80144c2:	4602      	mov	r2, r0
 80144c4:	460b      	mov	r3, r1
 80144c6:	4610      	mov	r0, r2
 80144c8:	4619      	mov	r1, r3
 80144ca:	f7ec fb7d 	bl	8000bc8 <__aeabi_d2f>
 80144ce:	4603      	mov	r3, r0
 80144d0:	4a2b      	ldr	r2, [pc, #172]	@ (8014580 <BatteryPercentage+0x118>)
 80144d2:	6013      	str	r3, [r2, #0]

	// Update the filter array with the new reading
	adcReadings[filterIndex] = batteryVoltage;
 80144d4:	4b2b      	ldr	r3, [pc, #172]	@ (8014584 <BatteryPercentage+0x11c>)
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	4618      	mov	r0, r3
 80144da:	4b29      	ldr	r3, [pc, #164]	@ (8014580 <BatteryPercentage+0x118>)
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	492a      	ldr	r1, [pc, #168]	@ (8014588 <BatteryPercentage+0x120>)
 80144e0:	0083      	lsls	r3, r0, #2
 80144e2:	440b      	add	r3, r1
 80144e4:	601a      	str	r2, [r3, #0]
	filterIndex = (filterIndex + 1) % FILTER_SIZE; // Circular buffer index
 80144e6:	4b27      	ldr	r3, [pc, #156]	@ (8014584 <BatteryPercentage+0x11c>)
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	1c5a      	adds	r2, r3, #1
 80144ec:	4b27      	ldr	r3, [pc, #156]	@ (801458c <BatteryPercentage+0x124>)
 80144ee:	fb83 1302 	smull	r1, r3, r3, r2
 80144f2:	1059      	asrs	r1, r3, #1
 80144f4:	17d3      	asrs	r3, r2, #31
 80144f6:	1ac9      	subs	r1, r1, r3
 80144f8:	460b      	mov	r3, r1
 80144fa:	009b      	lsls	r3, r3, #2
 80144fc:	440b      	add	r3, r1
 80144fe:	1ad1      	subs	r1, r2, r3
 8014500:	b2ca      	uxtb	r2, r1
 8014502:	4b20      	ldr	r3, [pc, #128]	@ (8014584 <BatteryPercentage+0x11c>)
 8014504:	701a      	strb	r2, [r3, #0]

	// Calculate the filtered voltage using the moving average
	filteredVoltage = CalculateAverage(adcReadings, FILTER_SIZE);
 8014506:	2105      	movs	r1, #5
 8014508:	481f      	ldr	r0, [pc, #124]	@ (8014588 <BatteryPercentage+0x120>)
 801450a:	f000 f8a1 	bl	8014650 <CalculateAverage>
 801450e:	eef0 7a40 	vmov.f32	s15, s0
 8014512:	4b1f      	ldr	r3, [pc, #124]	@ (8014590 <BatteryPercentage+0x128>)
 8014514:	edc3 7a00 	vstr	s15, [r3]

    // Calculate battery percentage based on filtered voltage
	percentage = CalculateBatteryPercentage(filteredVoltage);
 8014518:	4b1d      	ldr	r3, [pc, #116]	@ (8014590 <BatteryPercentage+0x128>)
 801451a:	edd3 7a00 	vldr	s15, [r3]
 801451e:	eeb0 0a67 	vmov.f32	s0, s15
 8014522:	f000 f839 	bl	8014598 <CalculateBatteryPercentage>
 8014526:	eef0 7a40 	vmov.f32	s15, s0
 801452a:	4b1a      	ldr	r3, [pc, #104]	@ (8014594 <BatteryPercentage+0x12c>)
 801452c:	edc3 7a00 	vstr	s15, [r3]
//************************************************************************//
	if(percentage>0 && percentage<5){				   // ULTRA LOW BATT
 8014530:	4b18      	ldr	r3, [pc, #96]	@ (8014594 <BatteryPercentage+0x12c>)
 8014532:	edd3 7a00 	vldr	s15, [r3]
 8014536:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801453a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801453e:	dc00      	bgt.n	8014542 <BatteryPercentage+0xda>
			 ssd1306_SetCursor(100, 15);
			 ssd1306_FillRectangle(100, 13, 120, 16, Black);
			 x=!x;
		 }
	}*/
}
 8014540:	e00c      	b.n	801455c <BatteryPercentage+0xf4>
	if(percentage>0 && percentage<5){				   // ULTRA LOW BATT
 8014542:	4b14      	ldr	r3, [pc, #80]	@ (8014594 <BatteryPercentage+0x12c>)
 8014544:	edd3 7a00 	vldr	s15, [r3]
 8014548:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801454c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014554:	d400      	bmi.n	8014558 <BatteryPercentage+0xf0>
}
 8014556:	e001      	b.n	801455c <BatteryPercentage+0xf4>
		Enter_Standby_Mode();
 8014558:	f000 feac 	bl	80152b4 <Enter_Standby_Mode>
}
 801455c:	bf00      	nop
 801455e:	bd80      	pop	{r7, pc}
 8014560:	00000000 	.word	0x00000000
 8014564:	40b1df00 	.word	0x40b1df00
 8014568:	66666666 	.word	0x66666666
 801456c:	400a6666 	.word	0x400a6666
 8014570:	851eb852 	.word	0x851eb852
 8014574:	3ff851eb 	.word	0x3ff851eb
 8014578:	200026e8 	.word	0x200026e8
 801457c:	2000048c 	.word	0x2000048c
 8014580:	200026f0 	.word	0x200026f0
 8014584:	20002700 	.word	0x20002700
 8014588:	20002724 	.word	0x20002724
 801458c:	66666667 	.word	0x66666667
 8014590:	20002704 	.word	0x20002704
 8014594:	200026ec 	.word	0x200026ec

08014598 <CalculateBatteryPercentage>:

float CalculateBatteryPercentage(float batteryVoltage) {
 8014598:	b580      	push	{r7, lr}
 801459a:	b084      	sub	sp, #16
 801459c:	af00      	add	r7, sp, #0
 801459e:	ed87 0a01 	vstr	s0, [r7, #4]
    float percentage;

    if (batteryVoltage >= 4.20) {  //4.15
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	f7eb ffe0 	bl	8000568 <__aeabi_f2d>
 80145a8:	a327      	add	r3, pc, #156	@ (adr r3, 8014648 <CalculateBatteryPercentage+0xb0>)
 80145aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ae:	f7ec fab9 	bl	8000b24 <__aeabi_dcmpge>
 80145b2:	4603      	mov	r3, r0
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d002      	beq.n	80145be <CalculateBatteryPercentage+0x26>
        percentage = 99.0;
 80145b8:	4b21      	ldr	r3, [pc, #132]	@ (8014640 <CalculateBatteryPercentage+0xa8>)
 80145ba:	60fb      	str	r3, [r7, #12]
 80145bc:	e030      	b.n	8014620 <CalculateBatteryPercentage+0x88>
    } else if (batteryVoltage <= 3.6) {
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f7eb ffd2 	bl	8000568 <__aeabi_f2d>
 80145c4:	a31a      	add	r3, pc, #104	@ (adr r3, 8014630 <CalculateBatteryPercentage+0x98>)
 80145c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ca:	f7ec faa1 	bl	8000b10 <__aeabi_dcmple>
 80145ce:	4603      	mov	r3, r0
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d003      	beq.n	80145dc <CalculateBatteryPercentage+0x44>
        percentage = 0.0;
 80145d4:	f04f 0300 	mov.w	r3, #0
 80145d8:	60fb      	str	r3, [r7, #12]
 80145da:	e021      	b.n	8014620 <CalculateBatteryPercentage+0x88>
    } else {
        percentage = (batteryVoltage - 3.6) / (4.20 - 3.6) * 100;    //4.15
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f7eb ffc3 	bl	8000568 <__aeabi_f2d>
 80145e2:	a313      	add	r3, pc, #76	@ (adr r3, 8014630 <CalculateBatteryPercentage+0x98>)
 80145e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e8:	f7eb fe5e 	bl	80002a8 <__aeabi_dsub>
 80145ec:	4602      	mov	r2, r0
 80145ee:	460b      	mov	r3, r1
 80145f0:	4610      	mov	r0, r2
 80145f2:	4619      	mov	r1, r3
 80145f4:	a310      	add	r3, pc, #64	@ (adr r3, 8014638 <CalculateBatteryPercentage+0xa0>)
 80145f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fa:	f7ec f937 	bl	800086c <__aeabi_ddiv>
 80145fe:	4602      	mov	r2, r0
 8014600:	460b      	mov	r3, r1
 8014602:	4610      	mov	r0, r2
 8014604:	4619      	mov	r1, r3
 8014606:	f04f 0200 	mov.w	r2, #0
 801460a:	4b0e      	ldr	r3, [pc, #56]	@ (8014644 <CalculateBatteryPercentage+0xac>)
 801460c:	f7ec f804 	bl	8000618 <__aeabi_dmul>
 8014610:	4602      	mov	r2, r0
 8014612:	460b      	mov	r3, r1
 8014614:	4610      	mov	r0, r2
 8014616:	4619      	mov	r1, r3
 8014618:	f7ec fad6 	bl	8000bc8 <__aeabi_d2f>
 801461c:	4603      	mov	r3, r0
 801461e:	60fb      	str	r3, [r7, #12]
    }

    return percentage;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	ee07 3a90 	vmov	s15, r3
}
 8014626:	eeb0 0a67 	vmov.f32	s0, s15
 801462a:	3710      	adds	r7, #16
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}
 8014630:	cccccccd 	.word	0xcccccccd
 8014634:	400ccccc 	.word	0x400ccccc
 8014638:	33333334 	.word	0x33333334
 801463c:	3fe33333 	.word	0x3fe33333
 8014640:	42c60000 	.word	0x42c60000
 8014644:	40590000 	.word	0x40590000
 8014648:	cccccccd 	.word	0xcccccccd
 801464c:	4010cccc 	.word	0x4010cccc

08014650 <CalculateAverage>:

// Function to calculate the average of an array
float CalculateAverage(float *array, uint8_t size) {
 8014650:	b480      	push	{r7}
 8014652:	b085      	sub	sp, #20
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	460b      	mov	r3, r1
 801465a:	70fb      	strb	r3, [r7, #3]
    float sum = 0.0;
 801465c:	f04f 0300 	mov.w	r3, #0
 8014660:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < size; i++) {
 8014662:	2300      	movs	r3, #0
 8014664:	72fb      	strb	r3, [r7, #11]
 8014666:	e00e      	b.n	8014686 <CalculateAverage+0x36>
        sum += array[i];
 8014668:	7afb      	ldrb	r3, [r7, #11]
 801466a:	009b      	lsls	r3, r3, #2
 801466c:	687a      	ldr	r2, [r7, #4]
 801466e:	4413      	add	r3, r2
 8014670:	edd3 7a00 	vldr	s15, [r3]
 8014674:	ed97 7a03 	vldr	s14, [r7, #12]
 8014678:	ee77 7a27 	vadd.f32	s15, s14, s15
 801467c:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint8_t i = 0; i < size; i++) {
 8014680:	7afb      	ldrb	r3, [r7, #11]
 8014682:	3301      	adds	r3, #1
 8014684:	72fb      	strb	r3, [r7, #11]
 8014686:	7afa      	ldrb	r2, [r7, #11]
 8014688:	78fb      	ldrb	r3, [r7, #3]
 801468a:	429a      	cmp	r2, r3
 801468c:	d3ec      	bcc.n	8014668 <CalculateAverage+0x18>
    }
    return sum / size;
 801468e:	78fb      	ldrb	r3, [r7, #3]
 8014690:	ee07 3a90 	vmov	s15, r3
 8014694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014698:	ed97 7a03 	vldr	s14, [r7, #12]
 801469c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80146a0:	eef0 7a66 	vmov.f32	s15, s13
}
 80146a4:	eeb0 0a67 	vmov.f32	s0, s15
 80146a8:	3714      	adds	r7, #20
 80146aa:	46bd      	mov	sp, r7
 80146ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b0:	4770      	bx	lr
	...

080146b4 <DisplayPercentage>:

void DisplayPercentage(void) {
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b08e      	sub	sp, #56	@ 0x38
 80146b8:	af02      	add	r7, sp, #8

	// Update the display only if there is a significant change in percentage
	if (fabs(percentage - lastPercentage) >= UPDATE_THRESHOLD){
 80146ba:	4b42      	ldr	r3, [pc, #264]	@ (80147c4 <DisplayPercentage+0x110>)
 80146bc:	ed93 7a00 	vldr	s14, [r3]
 80146c0:	4b41      	ldr	r3, [pc, #260]	@ (80147c8 <DisplayPercentage+0x114>)
 80146c2:	edd3 7a00 	vldr	s15, [r3]
 80146c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146ca:	eef0 7ae7 	vabs.f32	s15, s15
 80146ce:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80146d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80146d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146da:	db2f      	blt.n	801473c <DisplayPercentage+0x88>
		char buffer1[20];
		snprintf(buffer1, sizeof(buffer1), "%.0f", percentage);
 80146dc:	4b39      	ldr	r3, [pc, #228]	@ (80147c4 <DisplayPercentage+0x110>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7eb ff41 	bl	8000568 <__aeabi_f2d>
 80146e6:	4602      	mov	r2, r0
 80146e8:	460b      	mov	r3, r1
 80146ea:	f107 0014 	add.w	r0, r7, #20
 80146ee:	e9cd 2300 	strd	r2, r3, [sp]
 80146f2:	4a36      	ldr	r2, [pc, #216]	@ (80147cc <DisplayPercentage+0x118>)
 80146f4:	2114      	movs	r1, #20
 80146f6:	f001 fc67 	bl	8015fc8 <sniprintf>
		ssd1306_SetCursor(107, 12);
 80146fa:	210c      	movs	r1, #12
 80146fc:	206b      	movs	r0, #107	@ 0x6b
 80146fe:	f7ee fc21 	bl	8002f44 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer1, Font_7x10, White);
 8014702:	4b33      	ldr	r3, [pc, #204]	@ (80147d0 <DisplayPercentage+0x11c>)
 8014704:	f107 0014 	add.w	r0, r7, #20
 8014708:	2201      	movs	r2, #1
 801470a:	9200      	str	r2, [sp, #0]
 801470c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801470e:	f7ee fbf3 	bl	8002ef8 <ssd1306_WriteString>
		//ssd1306_UpdateScreen();
		lastPercentage = percentage;           // Update the last percentage value
 8014712:	4b2c      	ldr	r3, [pc, #176]	@ (80147c4 <DisplayPercentage+0x110>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	4a2c      	ldr	r2, [pc, #176]	@ (80147c8 <DisplayPercentage+0x114>)
 8014718:	6013      	str	r3, [r2, #0]
		//***************** BATT ICON *******************************************//
		const uint8_t* batteryIcon = GetBatteryIcon(percentage);
 801471a:	4b2a      	ldr	r3, [pc, #168]	@ (80147c4 <DisplayPercentage+0x110>)
 801471c:	edd3 7a00 	vldr	s15, [r3]
 8014720:	eeb0 0a67 	vmov.f32	s0, s15
 8014724:	f000 f85a 	bl	80147dc <GetBatteryIcon>
 8014728:	62b8      	str	r0, [r7, #40]	@ 0x28
		OLED_DrawBitmap(122, 12, batteryIcon, 16, 8);
 801472a:	2308      	movs	r3, #8
 801472c:	9300      	str	r3, [sp, #0]
 801472e:	2310      	movs	r3, #16
 8014730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014732:	210c      	movs	r1, #12
 8014734:	207a      	movs	r0, #122	@ 0x7a
 8014736:	f7ee fcf7 	bl	8003128 <OLED_DrawBitmap>
 801473a:	e028      	b.n	801478e <DisplayPercentage+0xda>
	}
	else{
		char buffer1[20];
		snprintf(buffer1, sizeof(buffer1), "%.0f", lastPercentage);
 801473c:	4b22      	ldr	r3, [pc, #136]	@ (80147c8 <DisplayPercentage+0x114>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	4618      	mov	r0, r3
 8014742:	f7eb ff11 	bl	8000568 <__aeabi_f2d>
 8014746:	4602      	mov	r2, r0
 8014748:	460b      	mov	r3, r1
 801474a:	4638      	mov	r0, r7
 801474c:	e9cd 2300 	strd	r2, r3, [sp]
 8014750:	4a1e      	ldr	r2, [pc, #120]	@ (80147cc <DisplayPercentage+0x118>)
 8014752:	2114      	movs	r1, #20
 8014754:	f001 fc38 	bl	8015fc8 <sniprintf>
		ssd1306_SetCursor(107, 12);
 8014758:	210c      	movs	r1, #12
 801475a:	206b      	movs	r0, #107	@ 0x6b
 801475c:	f7ee fbf2 	bl	8002f44 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer1, Font_7x10, White);
 8014760:	4b1b      	ldr	r3, [pc, #108]	@ (80147d0 <DisplayPercentage+0x11c>)
 8014762:	4638      	mov	r0, r7
 8014764:	2201      	movs	r2, #1
 8014766:	9200      	str	r2, [sp, #0]
 8014768:	cb0e      	ldmia	r3, {r1, r2, r3}
 801476a:	f7ee fbc5 	bl	8002ef8 <ssd1306_WriteString>
		//***********************************************************************//
		const uint8_t* batteryIcon = GetBatteryIcon(lastPercentage);
 801476e:	4b16      	ldr	r3, [pc, #88]	@ (80147c8 <DisplayPercentage+0x114>)
 8014770:	edd3 7a00 	vldr	s15, [r3]
 8014774:	eeb0 0a67 	vmov.f32	s0, s15
 8014778:	f000 f830 	bl	80147dc <GetBatteryIcon>
 801477c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		OLED_DrawBitmap(122, 12, batteryIcon, 16, 8);
 801477e:	2308      	movs	r3, #8
 8014780:	9300      	str	r3, [sp, #0]
 8014782:	2310      	movs	r3, #16
 8014784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014786:	210c      	movs	r1, #12
 8014788:	207a      	movs	r0, #122	@ 0x7a
 801478a:	f7ee fccd 	bl	8003128 <OLED_DrawBitmap>
	}

	if(isCharging){
 801478e:	4b11      	ldr	r3, [pc, #68]	@ (80147d4 <DisplayPercentage+0x120>)
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d00a      	beq.n	80147ac <DisplayPercentage+0xf8>
		// Show charging symbol next to battery icon
		ssd1306_DrawBitmap(99, 12, charging_symbol, 8, 8, White);
 8014796:	2301      	movs	r3, #1
 8014798:	9301      	str	r3, [sp, #4]
 801479a:	2308      	movs	r3, #8
 801479c:	9300      	str	r3, [sp, #0]
 801479e:	2308      	movs	r3, #8
 80147a0:	4a0d      	ldr	r2, [pc, #52]	@ (80147d8 <DisplayPercentage+0x124>)
 80147a2:	210c      	movs	r1, #12
 80147a4:	2063      	movs	r0, #99	@ 0x63
 80147a6:	f7ee fc33 	bl	8003010 <ssd1306_DrawBitmap>
	else{
		// Clear the area where the charging symbol would be
		ssd1306_FillRectangle(99, 12, 106, 20, Black);                 //ssd1306_ClearArea
	}

}
 80147aa:	e007      	b.n	80147bc <DisplayPercentage+0x108>
		ssd1306_FillRectangle(99, 12, 106, 20, Black);                 //ssd1306_ClearArea
 80147ac:	2300      	movs	r3, #0
 80147ae:	9300      	str	r3, [sp, #0]
 80147b0:	2314      	movs	r3, #20
 80147b2:	226a      	movs	r2, #106	@ 0x6a
 80147b4:	210c      	movs	r1, #12
 80147b6:	2063      	movs	r0, #99	@ 0x63
 80147b8:	f7ee fbdc 	bl	8002f74 <ssd1306_FillRectangle>
}
 80147bc:	bf00      	nop
 80147be:	3730      	adds	r7, #48	@ 0x30
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	200026ec 	.word	0x200026ec
 80147c8:	20002738 	.word	0x20002738
 80147cc:	08018280 	.word	0x08018280
 80147d0:	08019d74 	.word	0x08019d74
 80147d4:	2000273c 	.word	0x2000273c
 80147d8:	0801a4f0 	.word	0x0801a4f0

080147dc <GetBatteryIcon>:


const uint8_t* GetBatteryIcon(float percentage) {
 80147dc:	b480      	push	{r7}
 80147de:	b083      	sub	sp, #12
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (percentage >= 75.0) {
 80147e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80147ea:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8014838 <GetBatteryIcon+0x5c>
 80147ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80147f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f6:	db01      	blt.n	80147fc <GetBatteryIcon+0x20>
        return battery_full;
 80147f8:	4b10      	ldr	r3, [pc, #64]	@ (801483c <GetBatteryIcon+0x60>)
 80147fa:	e016      	b.n	801482a <GetBatteryIcon+0x4e>
    } else if (percentage >= 50.0) {
 80147fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8014800:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8014840 <GetBatteryIcon+0x64>
 8014804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801480c:	db01      	blt.n	8014812 <GetBatteryIcon+0x36>
        return battery_half;
 801480e:	4b0d      	ldr	r3, [pc, #52]	@ (8014844 <GetBatteryIcon+0x68>)
 8014810:	e00b      	b.n	801482a <GetBatteryIcon+0x4e>
    } else if (percentage >= 25.0) {
 8014812:	edd7 7a01 	vldr	s15, [r7, #4]
 8014816:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 801481a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014822:	db01      	blt.n	8014828 <GetBatteryIcon+0x4c>
        return battery_low;
 8014824:	4b08      	ldr	r3, [pc, #32]	@ (8014848 <GetBatteryIcon+0x6c>)
 8014826:	e000      	b.n	801482a <GetBatteryIcon+0x4e>
    } else {
        return battery_empty;
 8014828:	4b08      	ldr	r3, [pc, #32]	@ (801484c <GetBatteryIcon+0x70>)
    }
}
 801482a:	4618      	mov	r0, r3
 801482c:	370c      	adds	r7, #12
 801482e:	46bd      	mov	sp, r7
 8014830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop
 8014838:	42960000 	.word	0x42960000
 801483c:	0801a4e0 	.word	0x0801a4e0
 8014840:	42480000 	.word	0x42480000
 8014844:	0801a4d0 	.word	0x0801a4d0
 8014848:	0801a4c0 	.word	0x0801a4c0
 801484c:	0801a4b0 	.word	0x0801a4b0

08014850 <TIM1_TRG_COM_TIM11_IRQHandler>:


void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8014850:	b580      	push	{r7, lr}
 8014852:	af00      	add	r7, sp, #0
	if (TIM11->SR & TIM_SR_UIF) { // Check interrupt flag
 8014854:	4b07      	ldr	r3, [pc, #28]	@ (8014874 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8014856:	691b      	ldr	r3, [r3, #16]
 8014858:	f003 0301 	and.w	r3, r3, #1
 801485c:	2b00      	cmp	r3, #0
 801485e:	d007      	beq.n	8014870 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>
		TIM11->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 8014860:	4b04      	ldr	r3, [pc, #16]	@ (8014874 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8014862:	691b      	ldr	r3, [r3, #16]
 8014864:	4a03      	ldr	r2, [pc, #12]	@ (8014874 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8014866:	f023 0301 	bic.w	r3, r3, #1
 801486a:	6113      	str	r3, [r2, #16]
		BatteryPercentage();      //calculate batt percentage , Every 2 second
 801486c:	f7ff fdfc 	bl	8014468 <BatteryPercentage>
	}
}
 8014870:	bf00      	nop
 8014872:	bd80      	pop	{r7, pc}
 8014874:	40014800 	.word	0x40014800

08014878 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void) {
 8014878:	b580      	push	{r7, lr}
 801487a:	af00      	add	r7, sp, #0
	if (TIM10->SR & TIM_SR_UIF) { // Check interrupt flag
 801487c:	4b0f      	ldr	r3, [pc, #60]	@ (80148bc <TIM1_UP_TIM10_IRQHandler+0x44>)
 801487e:	691b      	ldr	r3, [r3, #16]
 8014880:	f003 0301 	and.w	r3, r3, #1
 8014884:	2b00      	cmp	r3, #0
 8014886:	d017      	beq.n	80148b8 <TIM1_UP_TIM10_IRQHandler+0x40>
		TIM10->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 8014888:	4b0c      	ldr	r3, [pc, #48]	@ (80148bc <TIM1_UP_TIM10_IRQHandler+0x44>)
 801488a:	691b      	ldr	r3, [r3, #16]
 801488c:	4a0b      	ldr	r2, [pc, #44]	@ (80148bc <TIM1_UP_TIM10_IRQHandler+0x44>)
 801488e:	f023 0301 	bic.w	r3, r3, #1
 8014892:	6113      	str	r3, [r2, #16]
		dotCounter++;             // dot every 1 sec
 8014894:	4b0a      	ldr	r3, [pc, #40]	@ (80148c0 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	3301      	adds	r3, #1
 801489a:	4a09      	ldr	r2, [pc, #36]	@ (80148c0 <TIM1_UP_TIM10_IRQHandler+0x48>)
 801489c:	6013      	str	r3, [r2, #0]

		inactivityCounter++;      //StandBy Counter 1 sec
 801489e:	4b09      	ldr	r3, [pc, #36]	@ (80148c4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	3301      	adds	r3, #1
 80148a4:	4a07      	ldr	r2, [pc, #28]	@ (80148c4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 80148a6:	6013      	str	r3, [r2, #0]
		if (inactivityCounter >= TimeToStandBy){           // standBy after 120 sec
 80148a8:	4b06      	ldr	r3, [pc, #24]	@ (80148c4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	4a06      	ldr	r2, [pc, #24]	@ (80148c8 <TIM1_UP_TIM10_IRQHandler+0x50>)
 80148ae:	6812      	ldr	r2, [r2, #0]
 80148b0:	4293      	cmp	r3, r2
 80148b2:	d301      	bcc.n	80148b8 <TIM1_UP_TIM10_IRQHandler+0x40>
			Enter_Standby_Mode();
 80148b4:	f000 fcfe 	bl	80152b4 <Enter_Standby_Mode>
		}
	}
}
 80148b8:	bf00      	nop
 80148ba:	bd80      	pop	{r7, pc}
 80148bc:	40014400 	.word	0x40014400
 80148c0:	200026f4 	.word	0x200026f4
 80148c4:	200026fc 	.word	0x200026fc
 80148c8:	200000d8 	.word	0x200000d8

080148cc <LCD_UpdateMenu>:

//#######################################################################################################################

// Function to handle menu updates
void LCD_UpdateMenu(void) {
 80148cc:	b580      	push	{r7, lr}
 80148ce:	af00      	add	r7, sp, #0
    LCD_DisplayMenu();
 80148d0:	f7fe fda8 	bl	8013424 <LCD_DisplayMenu>
}
 80148d4:	bf00      	nop
 80148d6:	bd80      	pop	{r7, pc}

080148d8 <MeasureAverage>:

void MeasureAverage(void) {
 80148d8:	b480      	push	{r7}
 80148da:	b083      	sub	sp, #12
 80148dc:	af00      	add	r7, sp, #0
for (int var = 1; var <= avgValue+1; var++)
 80148de:	2301      	movs	r3, #1
 80148e0:	607b      	str	r3, [r7, #4]
 80148e2:	e010      	b.n	8014906 <MeasureAverage+0x2e>
{
	SumBil += BilArray[var];
 80148e4:	4a15      	ldr	r2, [pc, #84]	@ (801493c <MeasureAverage+0x64>)
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	009b      	lsls	r3, r3, #2
 80148ea:	4413      	add	r3, r2
 80148ec:	ed93 7a00 	vldr	s14, [r3]
 80148f0:	4b13      	ldr	r3, [pc, #76]	@ (8014940 <MeasureAverage+0x68>)
 80148f2:	edd3 7a00 	vldr	s15, [r3]
 80148f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148fa:	4b11      	ldr	r3, [pc, #68]	@ (8014940 <MeasureAverage+0x68>)
 80148fc:	edc3 7a00 	vstr	s15, [r3]
for (int var = 1; var <= avgValue+1; var++)
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	3301      	adds	r3, #1
 8014904:	607b      	str	r3, [r7, #4]
 8014906:	4b0f      	ldr	r3, [pc, #60]	@ (8014944 <MeasureAverage+0x6c>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	3301      	adds	r3, #1
 801490c:	687a      	ldr	r2, [r7, #4]
 801490e:	429a      	cmp	r2, r3
 8014910:	dde8      	ble.n	80148e4 <MeasureAverage+0xc>
}
AveragedBil = SumBil / avgValue;
 8014912:	4b0b      	ldr	r3, [pc, #44]	@ (8014940 <MeasureAverage+0x68>)
 8014914:	edd3 6a00 	vldr	s13, [r3]
 8014918:	4b0a      	ldr	r3, [pc, #40]	@ (8014944 <MeasureAverage+0x6c>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	ee07 3a90 	vmov	s15, r3
 8014920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014928:	4b07      	ldr	r3, [pc, #28]	@ (8014948 <MeasureAverage+0x70>)
 801492a:	edc3 7a00 	vstr	s15, [r3]
}
 801492e:	bf00      	nop
 8014930:	370c      	adds	r7, #12
 8014932:	46bd      	mov	sp, r7
 8014934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014938:	4770      	bx	lr
 801493a:	bf00      	nop
 801493c:	20002690 	.word	0x20002690
 8014940:	200026c4 	.word	0x200026c4
 8014944:	200000b4 	.word	0x200000b4
 8014948:	200026c0 	.word	0x200026c0

0801494c <LCD_Reset>:

// Function to reset the menu to the initial state
void LCD_Reset(void) {
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
    currentMenu = MENU_START_DEV;//MENU_SET_AVG;
 8014952:	4b1b      	ldr	r3, [pc, #108]	@ (80149c0 <LCD_Reset+0x74>)
 8014954:	2200      	movs	r2, #0
 8014956:	701a      	strb	r2, [r3, #0]
    currentCursor = CURSOR_ON_MENU;
 8014958:	4b1a      	ldr	r3, [pc, #104]	@ (80149c4 <LCD_Reset+0x78>)
 801495a:	2200      	movs	r2, #0
 801495c:	701a      	strb	r2, [r3, #0]
    avgValue = 1;
 801495e:	4b1a      	ldr	r3, [pc, #104]	@ (80149c8 <LCD_Reset+0x7c>)
 8014960:	2201      	movs	r2, #1
 8014962:	601a      	str	r2, [r3, #0]
    currentTest = 1;
 8014964:	4b19      	ldr	r3, [pc, #100]	@ (80149cc <LCD_Reset+0x80>)
 8014966:	2201      	movs	r2, #1
 8014968:	601a      	str	r2, [r3, #0]
    //************************************//
    for (int i = 0; i <= 12-1; i++) BilArray[i]=0;
 801496a:	2300      	movs	r3, #0
 801496c:	607b      	str	r3, [r7, #4]
 801496e:	e009      	b.n	8014984 <LCD_Reset+0x38>
 8014970:	4a17      	ldr	r2, [pc, #92]	@ (80149d0 <LCD_Reset+0x84>)
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	009b      	lsls	r3, r3, #2
 8014976:	4413      	add	r3, r2
 8014978:	f04f 0200 	mov.w	r2, #0
 801497c:	601a      	str	r2, [r3, #0]
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	3301      	adds	r3, #1
 8014982:	607b      	str	r3, [r7, #4]
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2b0b      	cmp	r3, #11
 8014988:	ddf2      	ble.n	8014970 <LCD_Reset+0x24>
    SumBil = 0;
 801498a:	4b12      	ldr	r3, [pc, #72]	@ (80149d4 <LCD_Reset+0x88>)
 801498c:	f04f 0200 	mov.w	r2, #0
 8014990:	601a      	str	r2, [r3, #0]
    AveragedBil = 0;
 8014992:	4b11      	ldr	r3, [pc, #68]	@ (80149d8 <LCD_Reset+0x8c>)
 8014994:	f04f 0200 	mov.w	r2, #0
 8014998:	601a      	str	r2, [r3, #0]
    BilResult=0;
 801499a:	4b10      	ldr	r3, [pc, #64]	@ (80149dc <LCD_Reset+0x90>)
 801499c:	f04f 0200 	mov.w	r2, #0
 80149a0:	601a      	str	r2, [r3, #0]
    testDone=0;
 80149a2:	4b0f      	ldr	r3, [pc, #60]	@ (80149e0 <LCD_Reset+0x94>)
 80149a4:	2200      	movs	r2, #0
 80149a6:	701a      	strb	r2, [r3, #0]
    //***********************************//
    HAL_GPIO_WritePin(READY_LED_GPIO_Port, READY_LED_Pin, GPIO_PIN_RESET); // Turn off the LED
 80149a8:	2200      	movs	r2, #0
 80149aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80149ae:	480d      	ldr	r0, [pc, #52]	@ (80149e4 <LCD_Reset+0x98>)
 80149b0:	f7f1 f9c8 	bl	8005d44 <HAL_GPIO_WritePin>
    LCD_UpdateMenu();
 80149b4:	f7ff ff8a 	bl	80148cc <LCD_UpdateMenu>
}
 80149b8:	bf00      	nop
 80149ba:	3708      	adds	r7, #8
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	2000268c 	.word	0x2000268c
 80149c4:	2000268d 	.word	0x2000268d
 80149c8:	200000b4 	.word	0x200000b4
 80149cc:	200000b8 	.word	0x200000b8
 80149d0:	20002690 	.word	0x20002690
 80149d4:	200026c4 	.word	0x200026c4
 80149d8:	200026c0 	.word	0x200026c0
 80149dc:	20002680 	.word	0x20002680
 80149e0:	20002672 	.word	0x20002672
 80149e4:	40021000 	.word	0x40021000

080149e8 <DoesTestComplete>:

// Call this function after each test
void DoesTestComplete(void) {
 80149e8:	b580      	push	{r7, lr}
 80149ea:	af00      	add	r7, sp, #0

	if (testDone)    				 // if test btn pressed
 80149ec:	4b17      	ldr	r3, [pc, #92]	@ (8014a4c <DoesTestComplete+0x64>)
 80149ee:	781b      	ldrb	r3, [r3, #0]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d029      	beq.n	8014a48 <DoesTestComplete+0x60>
	{
		testDone=0;
 80149f4:	4b15      	ldr	r3, [pc, #84]	@ (8014a4c <DoesTestComplete+0x64>)
 80149f6:	2200      	movs	r2, #0
 80149f8:	701a      	strb	r2, [r3, #0]
		BilArray[currentTest]=BilResult;
 80149fa:	4b15      	ldr	r3, [pc, #84]	@ (8014a50 <DoesTestComplete+0x68>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	4a15      	ldr	r2, [pc, #84]	@ (8014a54 <DoesTestComplete+0x6c>)
 8014a00:	6812      	ldr	r2, [r2, #0]
 8014a02:	4915      	ldr	r1, [pc, #84]	@ (8014a58 <DoesTestComplete+0x70>)
 8014a04:	009b      	lsls	r3, r3, #2
 8014a06:	440b      	add	r3, r1
 8014a08:	601a      	str	r2, [r3, #0]
		BilResult=0;
 8014a0a:	4b12      	ldr	r3, [pc, #72]	@ (8014a54 <DoesTestComplete+0x6c>)
 8014a0c:	f04f 0200 	mov.w	r2, #0
 8014a10:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(READY_LED_GPIO_Port, READY_LED_Pin, GPIO_PIN_RESET);
 8014a12:	2200      	movs	r2, #0
 8014a14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8014a18:	4810      	ldr	r0, [pc, #64]	@ (8014a5c <DoesTestComplete+0x74>)
 8014a1a:	f7f1 f993 	bl	8005d44 <HAL_GPIO_WritePin>
		HAL_Delay(Tests_Intratime);     // Time between Tests
 8014a1e:	4b10      	ldr	r3, [pc, #64]	@ (8014a60 <DoesTestComplete+0x78>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7ef faca 	bl	8003fbc <HAL_Delay>

		currentTest++;
 8014a28:	4b09      	ldr	r3, [pc, #36]	@ (8014a50 <DoesTestComplete+0x68>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	4a08      	ldr	r2, [pc, #32]	@ (8014a50 <DoesTestComplete+0x68>)
 8014a30:	6013      	str	r3, [r2, #0]
		if (currentTest > avgValue)  currentMenu = MENU_SHOW_RESULT;
 8014a32:	4b07      	ldr	r3, [pc, #28]	@ (8014a50 <DoesTestComplete+0x68>)
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	4b0b      	ldr	r3, [pc, #44]	@ (8014a64 <DoesTestComplete+0x7c>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	dd02      	ble.n	8014a44 <DoesTestComplete+0x5c>
 8014a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8014a68 <DoesTestComplete+0x80>)
 8014a40:	2204      	movs	r2, #4
 8014a42:	701a      	strb	r2, [r3, #0]
		LCD_UpdateMenu();
 8014a44:	f7ff ff42 	bl	80148cc <LCD_UpdateMenu>
	}
}
 8014a48:	bf00      	nop
 8014a4a:	bd80      	pop	{r7, pc}
 8014a4c:	20002672 	.word	0x20002672
 8014a50:	200000b8 	.word	0x200000b8
 8014a54:	20002680 	.word	0x20002680
 8014a58:	20002690 	.word	0x20002690
 8014a5c:	40021000 	.word	0x40021000
 8014a60:	200000c0 	.word	0x200000c0
 8014a64:	200000b4 	.word	0x200000b4
 8014a68:	2000268c 	.word	0x2000268c

08014a6c <UserAction_Detected>:

void UserAction_Detected(void)
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	af00      	add	r7, sp, #0
    // Reset inactivity counter to 0 when user performs an action
    inactivityCounter = 0;
 8014a70:	4b03      	ldr	r3, [pc, #12]	@ (8014a80 <UserAction_Detected+0x14>)
 8014a72:	2200      	movs	r2, #0
 8014a74:	601a      	str	r2, [r3, #0]
}
 8014a76:	bf00      	nop
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr
 8014a80:	200026fc 	.word	0x200026fc

08014a84 <decToBcd>:


#define DS1307_ADDRESS 0x68  // DS1307 I2C address

// BCD conversion helper functions
uint8_t decToBcd(int val) {
 8014a84:	b480      	push	{r7}
 8014a86:	b083      	sub	sp, #12
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
    return (uint8_t)((val / 10 * 16) + (val % 10));
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8014acc <decToBcd+0x48>)
 8014a90:	fb82 1203 	smull	r1, r2, r2, r3
 8014a94:	1092      	asrs	r2, r2, #2
 8014a96:	17db      	asrs	r3, r3, #31
 8014a98:	1ad3      	subs	r3, r2, r3
 8014a9a:	b2db      	uxtb	r3, r3
 8014a9c:	011b      	lsls	r3, r3, #4
 8014a9e:	b2d8      	uxtb	r0, r3
 8014aa0:	687a      	ldr	r2, [r7, #4]
 8014aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8014acc <decToBcd+0x48>)
 8014aa4:	fb83 1302 	smull	r1, r3, r3, r2
 8014aa8:	1099      	asrs	r1, r3, #2
 8014aaa:	17d3      	asrs	r3, r2, #31
 8014aac:	1ac9      	subs	r1, r1, r3
 8014aae:	460b      	mov	r3, r1
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	440b      	add	r3, r1
 8014ab4:	005b      	lsls	r3, r3, #1
 8014ab6:	1ad1      	subs	r1, r2, r3
 8014ab8:	b2cb      	uxtb	r3, r1
 8014aba:	4403      	add	r3, r0
 8014abc:	b2db      	uxtb	r3, r3
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	370c      	adds	r7, #12
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac8:	4770      	bx	lr
 8014aca:	bf00      	nop
 8014acc:	66666667 	.word	0x66666667

08014ad0 <bcdToDec>:

int bcdToDec(uint8_t val) {
 8014ad0:	b480      	push	{r7}
 8014ad2:	b083      	sub	sp, #12
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 8014ada:	79fb      	ldrb	r3, [r7, #7]
 8014adc:	091b      	lsrs	r3, r3, #4
 8014ade:	b2db      	uxtb	r3, r3
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	4613      	mov	r3, r2
 8014ae4:	009b      	lsls	r3, r3, #2
 8014ae6:	4413      	add	r3, r2
 8014ae8:	005b      	lsls	r3, r3, #1
 8014aea:	461a      	mov	r2, r3
 8014aec:	79fb      	ldrb	r3, [r7, #7]
 8014aee:	f003 030f 	and.w	r3, r3, #15
 8014af2:	4413      	add	r3, r2
}
 8014af4:	4618      	mov	r0, r3
 8014af6:	370c      	adds	r7, #12
 8014af8:	46bd      	mov	sp, r7
 8014afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afe:	4770      	bx	lr

08014b00 <DS1307_is_running>:

// Function to check if the DS1307 RTC is running (Clock Halt bit)
uint8_t DS1307_is_running() {
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b084      	sub	sp, #16
 8014b04:	af02      	add	r7, sp, #8
    uint8_t seconds;
    uint8_t startAddr = 0x00;
 8014b06:	2300      	movs	r3, #0
 8014b08:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, &startAddr, 1, HAL_MAX_DELAY);
 8014b0a:	1dba      	adds	r2, r7, #6
 8014b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b10:	9300      	str	r3, [sp, #0]
 8014b12:	2301      	movs	r3, #1
 8014b14:	21d0      	movs	r1, #208	@ 0xd0
 8014b16:	480b      	ldr	r0, [pc, #44]	@ (8014b44 <DS1307_is_running+0x44>)
 8014b18:	f7f3 fba4 	bl	8008264 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, DS1307_ADDRESS << 1, &seconds, 1, HAL_MAX_DELAY);
 8014b1c:	1dfa      	adds	r2, r7, #7
 8014b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b22:	9300      	str	r3, [sp, #0]
 8014b24:	2301      	movs	r3, #1
 8014b26:	21d0      	movs	r1, #208	@ 0xd0
 8014b28:	4806      	ldr	r0, [pc, #24]	@ (8014b44 <DS1307_is_running+0x44>)
 8014b2a:	f7f3 fc99 	bl	8008460 <HAL_I2C_Master_Receive>

    // Check if the Clock Halt (CH) bit is set (bit 7 of the seconds register)
    return (seconds & 0x80) == 0;
 8014b2e:	79fb      	ldrb	r3, [r7, #7]
 8014b30:	b25b      	sxtb	r3, r3
 8014b32:	43db      	mvns	r3, r3
 8014b34:	b2db      	uxtb	r3, r3
 8014b36:	09db      	lsrs	r3, r3, #7
 8014b38:	b2db      	uxtb	r3, r3
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3708      	adds	r7, #8
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	200005dc 	.word	0x200005dc

08014b48 <RTC_Init>:
// Function to initialize the DS1307 RTC
void RTC_Init(void) {
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b084      	sub	sp, #16
 8014b4c:	af04      	add	r7, sp, #16
    /*// Ensure the RTC is started by setting the CH (Clock Halt) bit to 0
    uint8_t initData[2] = {0x00, 0x00};
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, initData, 2, HAL_MAX_DELAY);*/
	if (!DS1307_is_running()) {
 8014b4e:	f7ff ffd7 	bl	8014b00 <DS1307_is_running>
 8014b52:	4603      	mov	r3, r0
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d10b      	bne.n	8014b70 <RTC_Init+0x28>
		// If the RTC is not running, set the initial time (e.g., 00:00:00)
		RTC_SetTime(0, 0, 0, 1, 1, 1, 24);  // Set time to 00:00:00, date to 01/01/2021
 8014b58:	2318      	movs	r3, #24
 8014b5a:	9302      	str	r3, [sp, #8]
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	9301      	str	r3, [sp, #4]
 8014b60:	2301      	movs	r3, #1
 8014b62:	9300      	str	r3, [sp, #0]
 8014b64:	2301      	movs	r3, #1
 8014b66:	2200      	movs	r2, #0
 8014b68:	2100      	movs	r1, #0
 8014b6a:	2000      	movs	r0, #0
 8014b6c:	f000 f804 	bl	8014b78 <RTC_SetTime>
	}
}
 8014b70:	bf00      	nop
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
	...

08014b78 <RTC_SetTime>:

// Function to set the time and date on the DS1307
void RTC_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t day, uint8_t date, uint8_t month, uint8_t year) {
 8014b78:	b590      	push	{r4, r7, lr}
 8014b7a:	b087      	sub	sp, #28
 8014b7c:	af02      	add	r7, sp, #8
 8014b7e:	4604      	mov	r4, r0
 8014b80:	4608      	mov	r0, r1
 8014b82:	4611      	mov	r1, r2
 8014b84:	461a      	mov	r2, r3
 8014b86:	4623      	mov	r3, r4
 8014b88:	71fb      	strb	r3, [r7, #7]
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	71bb      	strb	r3, [r7, #6]
 8014b8e:	460b      	mov	r3, r1
 8014b90:	717b      	strb	r3, [r7, #5]
 8014b92:	4613      	mov	r3, r2
 8014b94:	713b      	strb	r3, [r7, #4]
    uint8_t setData[8];
    setData[0] = 0x00;  // Register address to start with
 8014b96:	2300      	movs	r3, #0
 8014b98:	723b      	strb	r3, [r7, #8]
    setData[1] = decToBcd(seconds & 0x7F);
 8014b9a:	797b      	ldrb	r3, [r7, #5]
 8014b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7ff ff6f 	bl	8014a84 <decToBcd>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	727b      	strb	r3, [r7, #9]
    setData[2] = decToBcd(minutes);
 8014baa:	79bb      	ldrb	r3, [r7, #6]
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7ff ff69 	bl	8014a84 <decToBcd>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	72bb      	strb	r3, [r7, #10]
    setData[3] = decToBcd(hours);
 8014bb6:	79fb      	ldrb	r3, [r7, #7]
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7ff ff63 	bl	8014a84 <decToBcd>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	72fb      	strb	r3, [r7, #11]
    setData[4] = decToBcd(day);
 8014bc2:	793b      	ldrb	r3, [r7, #4]
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7ff ff5d 	bl	8014a84 <decToBcd>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	733b      	strb	r3, [r7, #12]
    setData[5] = decToBcd(date);
 8014bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f7ff ff56 	bl	8014a84 <decToBcd>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	737b      	strb	r3, [r7, #13]
    setData[6] = decToBcd(month);
 8014bdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7ff ff4f 	bl	8014a84 <decToBcd>
 8014be6:	4603      	mov	r3, r0
 8014be8:	73bb      	strb	r3, [r7, #14]
    setData[7] = decToBcd(year);
 8014bea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7ff ff48 	bl	8014a84 <decToBcd>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, setData, 8, HAL_MAX_DELAY);
 8014bf8:	f107 0208 	add.w	r2, r7, #8
 8014bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8014c00:	9300      	str	r3, [sp, #0]
 8014c02:	2308      	movs	r3, #8
 8014c04:	21d0      	movs	r1, #208	@ 0xd0
 8014c06:	4803      	ldr	r0, [pc, #12]	@ (8014c14 <RTC_SetTime+0x9c>)
 8014c08:	f7f3 fb2c 	bl	8008264 <HAL_I2C_Master_Transmit>
}
 8014c0c:	bf00      	nop
 8014c0e:	3714      	adds	r7, #20
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd90      	pop	{r4, r7, pc}
 8014c14:	200005dc 	.word	0x200005dc

08014c18 <RTC_GetTime>:

// Function to read the current time and date from the DS1307
void RTC_GetTime(uint8_t* hours, uint8_t* minutes, uint8_t* seconds, uint8_t* day, uint8_t* date, uint8_t* month, uint8_t* year) {
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b08a      	sub	sp, #40	@ 0x28
 8014c1c:	af02      	add	r7, sp, #8
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	60b9      	str	r1, [r7, #8]
 8014c22:	607a      	str	r2, [r7, #4]
 8014c24:	603b      	str	r3, [r7, #0]
    uint8_t readData[7];
    uint8_t startAddr = 0x00;
 8014c26:	2300      	movs	r3, #0
 8014c28:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, &startAddr, 1, HAL_MAX_DELAY);
 8014c2a:	f107 0217 	add.w	r2, r7, #23
 8014c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c32:	9300      	str	r3, [sp, #0]
 8014c34:	2301      	movs	r3, #1
 8014c36:	21d0      	movs	r1, #208	@ 0xd0
 8014c38:	4827      	ldr	r0, [pc, #156]	@ (8014cd8 <RTC_GetTime+0xc0>)
 8014c3a:	f7f3 fb13 	bl	8008264 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, DS1307_ADDRESS << 1, readData, 7, HAL_MAX_DELAY);
 8014c3e:	f107 0218 	add.w	r2, r7, #24
 8014c42:	f04f 33ff 	mov.w	r3, #4294967295
 8014c46:	9300      	str	r3, [sp, #0]
 8014c48:	2307      	movs	r3, #7
 8014c4a:	21d0      	movs	r1, #208	@ 0xd0
 8014c4c:	4822      	ldr	r0, [pc, #136]	@ (8014cd8 <RTC_GetTime+0xc0>)
 8014c4e:	f7f3 fc07 	bl	8008460 <HAL_I2C_Master_Receive>

    *seconds = bcdToDec(readData[0] & 0x7F);  // Mask to ignore CH bit
 8014c52:	7e3b      	ldrb	r3, [r7, #24]
 8014c54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014c58:	b2db      	uxtb	r3, r3
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7ff ff38 	bl	8014ad0 <bcdToDec>
 8014c60:	4603      	mov	r3, r0
 8014c62:	b2da      	uxtb	r2, r3
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	701a      	strb	r2, [r3, #0]
    *minutes = bcdToDec(readData[1]);
 8014c68:	7e7b      	ldrb	r3, [r7, #25]
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7ff ff30 	bl	8014ad0 <bcdToDec>
 8014c70:	4603      	mov	r3, r0
 8014c72:	b2da      	uxtb	r2, r3
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	701a      	strb	r2, [r3, #0]
    *hours = bcdToDec(readData[2] & 0x3F);  // 24-hour format
 8014c78:	7ebb      	ldrb	r3, [r7, #26]
 8014c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	4618      	mov	r0, r3
 8014c82:	f7ff ff25 	bl	8014ad0 <bcdToDec>
 8014c86:	4603      	mov	r3, r0
 8014c88:	b2da      	uxtb	r2, r3
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	701a      	strb	r2, [r3, #0]
    *day = bcdToDec(readData[3]);
 8014c8e:	7efb      	ldrb	r3, [r7, #27]
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7ff ff1d 	bl	8014ad0 <bcdToDec>
 8014c96:	4603      	mov	r3, r0
 8014c98:	b2da      	uxtb	r2, r3
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	701a      	strb	r2, [r3, #0]
    *date = bcdToDec(readData[4]);
 8014c9e:	7f3b      	ldrb	r3, [r7, #28]
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7ff ff15 	bl	8014ad0 <bcdToDec>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	b2da      	uxtb	r2, r3
 8014caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cac:	701a      	strb	r2, [r3, #0]
    *month = bcdToDec(readData[5]);
 8014cae:	7f7b      	ldrb	r3, [r7, #29]
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7ff ff0d 	bl	8014ad0 <bcdToDec>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	b2da      	uxtb	r2, r3
 8014cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cbc:	701a      	strb	r2, [r3, #0]
    *year = bcdToDec(readData[6]);
 8014cbe:	7fbb      	ldrb	r3, [r7, #30]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7ff ff05 	bl	8014ad0 <bcdToDec>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	b2da      	uxtb	r2, r3
 8014cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ccc:	701a      	strb	r2, [r3, #0]
}
 8014cce:	bf00      	nop
 8014cd0:	3720      	adds	r7, #32
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}
 8014cd6:	bf00      	nop
 8014cd8:	200005dc 	.word	0x200005dc

08014cdc <RTC_DisplayTime>:

// Function to display the time and date on the OLED
void RTC_DisplayTime(void) {
 8014cdc:	b590      	push	{r4, r7, lr}
 8014cde:	b08d      	sub	sp, #52	@ 0x34
 8014ce0:	af04      	add	r7, sp, #16
	static char prevBuffer[20] = {0};
    uint8_t hours, minutes, seconds, day, date, month, year;
    char buffer[20];

    RTC_GetTime(&hours, &minutes, &seconds, &day, &date, &month, &year);
 8014ce2:	f107 041c 	add.w	r4, r7, #28
 8014ce6:	f107 021d 	add.w	r2, r7, #29
 8014cea:	f107 011e 	add.w	r1, r7, #30
 8014cee:	f107 001f 	add.w	r0, r7, #31
 8014cf2:	f107 0319 	add.w	r3, r7, #25
 8014cf6:	9302      	str	r3, [sp, #8]
 8014cf8:	f107 031a 	add.w	r3, r7, #26
 8014cfc:	9301      	str	r3, [sp, #4]
 8014cfe:	f107 031b 	add.w	r3, r7, #27
 8014d02:	9300      	str	r3, [sp, #0]
 8014d04:	4623      	mov	r3, r4
 8014d06:	f7ff ff87 	bl	8014c18 <RTC_GetTime>

    //ssd1306_Fill(Black);

    // Format time
    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 8014d0a:	7ffb      	ldrb	r3, [r7, #31]
 8014d0c:	4619      	mov	r1, r3
 8014d0e:	7fbb      	ldrb	r3, [r7, #30]
 8014d10:	7f7a      	ldrb	r2, [r7, #29]
 8014d12:	1d38      	adds	r0, r7, #4
 8014d14:	9201      	str	r2, [sp, #4]
 8014d16:	9300      	str	r3, [sp, #0]
 8014d18:	460b      	mov	r3, r1
 8014d1a:	4a22      	ldr	r2, [pc, #136]	@ (8014da4 <RTC_DisplayTime+0xc8>)
 8014d1c:	2114      	movs	r1, #20
 8014d1e:	f001 f953 	bl	8015fc8 <sniprintf>
    if (strcmp(buffer, prevBuffer) != 0) {
 8014d22:	1d3b      	adds	r3, r7, #4
 8014d24:	4920      	ldr	r1, [pc, #128]	@ (8014da8 <RTC_DisplayTime+0xcc>)
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7eb fa52 	bl	80001d0 <strcmp>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d00f      	beq.n	8014d52 <RTC_DisplayTime+0x76>
		ssd1306_SetCursor(2, 0);
 8014d32:	2100      	movs	r1, #0
 8014d34:	2002      	movs	r0, #2
 8014d36:	f7ee f905 	bl	8002f44 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_6x8 ,White);
 8014d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8014dac <RTC_DisplayTime+0xd0>)
 8014d3c:	1d38      	adds	r0, r7, #4
 8014d3e:	2201      	movs	r2, #1
 8014d40:	9200      	str	r2, [sp, #0]
 8014d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014d44:	f7ee f8d8 	bl	8002ef8 <ssd1306_WriteString>
		strcpy(prevBuffer, buffer);
 8014d48:	1d3b      	adds	r3, r7, #4
 8014d4a:	4619      	mov	r1, r3
 8014d4c:	4816      	ldr	r0, [pc, #88]	@ (8014da8 <RTC_DisplayTime+0xcc>)
 8014d4e:	f001 fa7e 	bl	801624e <strcpy>
	}
    //ssd1306_SetCursor(2, 0);
    //ssd1306_WriteString(buffer, Font_6x8 ,White);

    // Format date
    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", date, month, year);
 8014d52:	7efb      	ldrb	r3, [r7, #27]
 8014d54:	4619      	mov	r1, r3
 8014d56:	7ebb      	ldrb	r3, [r7, #26]
 8014d58:	7e7a      	ldrb	r2, [r7, #25]
 8014d5a:	1d38      	adds	r0, r7, #4
 8014d5c:	9201      	str	r2, [sp, #4]
 8014d5e:	9300      	str	r3, [sp, #0]
 8014d60:	460b      	mov	r3, r1
 8014d62:	4a13      	ldr	r2, [pc, #76]	@ (8014db0 <RTC_DisplayTime+0xd4>)
 8014d64:	2114      	movs	r1, #20
 8014d66:	f001 f92f 	bl	8015fc8 <sniprintf>
    if (strcmp(buffer, prevBuffer) != 0) {
 8014d6a:	1d3b      	adds	r3, r7, #4
 8014d6c:	490e      	ldr	r1, [pc, #56]	@ (8014da8 <RTC_DisplayTime+0xcc>)
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f7eb fa2e 	bl	80001d0 <strcmp>
 8014d74:	4603      	mov	r3, r0
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d00f      	beq.n	8014d9a <RTC_DisplayTime+0xbe>
	   ssd1306_SetCursor(80, 0);
 8014d7a:	2100      	movs	r1, #0
 8014d7c:	2050      	movs	r0, #80	@ 0x50
 8014d7e:	f7ee f8e1 	bl	8002f44 <ssd1306_SetCursor>
	   ssd1306_WriteString(buffer, Font_6x8, White);
 8014d82:	4b0a      	ldr	r3, [pc, #40]	@ (8014dac <RTC_DisplayTime+0xd0>)
 8014d84:	1d38      	adds	r0, r7, #4
 8014d86:	2201      	movs	r2, #1
 8014d88:	9200      	str	r2, [sp, #0]
 8014d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014d8c:	f7ee f8b4 	bl	8002ef8 <ssd1306_WriteString>
	   strcpy(prevBuffer, buffer);
 8014d90:	1d3b      	adds	r3, r7, #4
 8014d92:	4619      	mov	r1, r3
 8014d94:	4804      	ldr	r0, [pc, #16]	@ (8014da8 <RTC_DisplayTime+0xcc>)
 8014d96:	f001 fa5a 	bl	801624e <strcpy>
   }
    //ssd1306_SetCursor(68, 0);
    //ssd1306_WriteString(buffer,Font_6x8, White);

    //ssd1306_UpdateScreen();
}
 8014d9a:	bf00      	nop
 8014d9c:	3724      	adds	r7, #36	@ 0x24
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd90      	pop	{r4, r7, pc}
 8014da2:	bf00      	nop
 8014da4:	08018288 	.word	0x08018288
 8014da8:	2000270c 	.word	0x2000270c
 8014dac:	08019d68 	.word	0x08019d68
 8014db0:	08018298 	.word	0x08018298

08014db4 <spectrometer>:
#include "../INC/generalHeaders.h"

  uint8_t eos_received = 0;  //volatile


void spectrometer(void){
 8014db4:	b580      	push	{r7, lr}
 8014db6:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOA, StartTest_BTN_Pin) == GPIO_PIN_RESET) ){
 8014db8:	2120      	movs	r1, #32
 8014dba:	4813      	ldr	r0, [pc, #76]	@ (8014e08 <spectrometer+0x54>)
 8014dbc:	f7f0 ffaa 	bl	8005d14 <HAL_GPIO_ReadPin>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d11e      	bne.n	8014e04 <spectrometer+0x50>
		UserAction_Detected();                    // Reset StandBy mode counter
 8014dc6:	f7ff fe51 	bl	8014a6c <UserAction_Detected>
		if(StartTestMenuFlag==1){
 8014dca:	4b10      	ldr	r3, [pc, #64]	@ (8014e0c <spectrometer+0x58>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	2b01      	cmp	r3, #1
 8014dd0:	d104      	bne.n	8014ddc <spectrometer+0x28>
			generate_spectrometer_signals();
 8014dd2:	f000 f81f 	bl	8014e14 <generate_spectrometer_signals>
			Send_SPEC_UART();                                            // Send SPEC to UART           //***//
 8014dd6:	f000 f857 	bl	8014e88 <Send_SPEC_UART>
			 HAL_GPIO_WritePin(ERR_BUZZER_GPIO_Port, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
			 HAL_Delay(500);
			 HAL_GPIO_WritePin(ERR_BUZZER_GPIO_Port, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
		}
	}
}
 8014dda:	e013      	b.n	8014e04 <spectrometer+0x50>
		}else if (StartTestMenuFlag==2) {                               // if current menu != StartTest
 8014ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8014e0c <spectrometer+0x58>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	2b02      	cmp	r3, #2
 8014de2:	d10f      	bne.n	8014e04 <spectrometer+0x50>
			 HAL_GPIO_WritePin(ERR_BUZZER_GPIO_Port, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 8014de4:	2201      	movs	r2, #1
 8014de6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8014dea:	4809      	ldr	r0, [pc, #36]	@ (8014e10 <spectrometer+0x5c>)
 8014dec:	f7f0 ffaa 	bl	8005d44 <HAL_GPIO_WritePin>
			 HAL_Delay(500);
 8014df0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8014df4:	f7ef f8e2 	bl	8003fbc <HAL_Delay>
			 HAL_GPIO_WritePin(ERR_BUZZER_GPIO_Port, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 8014df8:	2200      	movs	r2, #0
 8014dfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8014dfe:	4804      	ldr	r0, [pc, #16]	@ (8014e10 <spectrometer+0x5c>)
 8014e00:	f7f0 ffa0 	bl	8005d44 <HAL_GPIO_WritePin>
}
 8014e04:	bf00      	nop
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	40020000 	.word	0x40020000
 8014e0c:	200026c8 	.word	0x200026c8
 8014e10:	40021000 	.word	0x40021000

08014e14 <generate_spectrometer_signals>:

void generate_spectrometer_signals(void){
 8014e14:	b580      	push	{r7, lr}
 8014e16:	af00      	add	r7, sp, #0

	// Button is pressed
	HAL_GPIO_WritePin(SPEC_LED_GPIO_Port, SPEC_LED_Pin, GPIO_PIN_SET); 				// Turn on the LED
 8014e18:	2201      	movs	r2, #1
 8014e1a:	2180      	movs	r1, #128	@ 0x80
 8014e1c:	4817      	ldr	r0, [pc, #92]	@ (8014e7c <generate_spectrometer_signals+0x68>)
 8014e1e:	f7f0 ff91 	bl	8005d44 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Wait for stabilization
 8014e22:	2001      	movs	r0, #1
 8014e24:	f7ef f8ca 	bl	8003fbc <HAL_Delay>

	// Generate start signal for the spectrometer
	HAL_GPIO_WritePin(SPEC_START_GPIO_Port, SPEC_START_Pin, GPIO_PIN_RESET);
 8014e28:	2200      	movs	r2, #0
 8014e2a:	2120      	movs	r1, #32
 8014e2c:	4814      	ldr	r0, [pc, #80]	@ (8014e80 <generate_spectrometer_signals+0x6c>)
 8014e2e:	f7f0 ff89 	bl	8005d44 <HAL_GPIO_WritePin>
	//DWT_Delay(1);
	HAL_Delay(1);
 8014e32:	2001      	movs	r0, #1
 8014e34:	f7ef f8c2 	bl	8003fbc <HAL_Delay>
	HAL_GPIO_WritePin(SPEC_START_GPIO_Port, SPEC_START_Pin, GPIO_PIN_SET);
 8014e38:	2201      	movs	r2, #1
 8014e3a:	2120      	movs	r1, #32
 8014e3c:	4810      	ldr	r0, [pc, #64]	@ (8014e80 <generate_spectrometer_signals+0x6c>)
 8014e3e:	f7f0 ff81 	bl	8005d44 <HAL_GPIO_WritePin>
	HAL_Delay(20); //8//500 									// Higher integration time Higher Spectrum Amplitude
 8014e42:	2014      	movs	r0, #20
 8014e44:	f7ef f8ba 	bl	8003fbc <HAL_Delay>
	HAL_GPIO_WritePin(SPEC_START_GPIO_Port, SPEC_START_Pin, GPIO_PIN_RESET);
 8014e48:	2200      	movs	r2, #0
 8014e4a:	2120      	movs	r1, #32
 8014e4c:	480c      	ldr	r0, [pc, #48]	@ (8014e80 <generate_spectrometer_signals+0x6c>)
 8014e4e:	f7f0 ff79 	bl	8005d44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8014e52:	2001      	movs	r0, #1
 8014e54:	f7ef f8b2 	bl	8003fbc <HAL_Delay>
	HAL_GPIO_WritePin(SPEC_START_GPIO_Port, SPEC_START_Pin, GPIO_PIN_SET);
 8014e58:	2201      	movs	r2, #1
 8014e5a:	2120      	movs	r1, #32
 8014e5c:	4808      	ldr	r0, [pc, #32]	@ (8014e80 <generate_spectrometer_signals+0x6c>)
 8014e5e:	f7f0 ff71 	bl	8005d44 <HAL_GPIO_WritePin>

	// Wait for EOS signal
	//while (!eos_received) {}
	capture_and_send_data();
 8014e62:	f7fe f871 	bl	8012f48 <capture_and_send_data>
	HAL_GPIO_WritePin(SPEC_LED_GPIO_Port, SPEC_LED_Pin, GPIO_PIN_RESET); 			// Turn off the LED
 8014e66:	2200      	movs	r2, #0
 8014e68:	2180      	movs	r1, #128	@ 0x80
 8014e6a:	4804      	ldr	r0, [pc, #16]	@ (8014e7c <generate_spectrometer_signals+0x68>)
 8014e6c:	f7f0 ff6a 	bl	8005d44 <HAL_GPIO_WritePin>
	eos_received = 0;
 8014e70:	4b04      	ldr	r3, [pc, #16]	@ (8014e84 <generate_spectrometer_signals+0x70>)
 8014e72:	2200      	movs	r2, #0
 8014e74:	701a      	strb	r2, [r3, #0]

}
 8014e76:	bf00      	nop
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	40020000 	.word	0x40020000
 8014e80:	40020400 	.word	0x40020400
 8014e84:	20002720 	.word	0x20002720

08014e88 <Send_SPEC_UART>:


void Send_SPEC_UART(void){
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b084      	sub	sp, #16
 8014e8c:	af00      	add	r7, sp, #0
	// Format the concentration values as a string
	char message[12];            					//Spectrum to be sent to UART
	for (int j = 0; j < NUM_WAVELENGTHS*2; j++){
 8014e8e:	2300      	movs	r3, #0
 8014e90:	60fb      	str	r3, [r7, #12]
 8014e92:	e012      	b.n	8014eba <Send_SPEC_UART+0x32>
	  //printf("%lu\n", spectral_data_256[j]);
	  snprintf(message, sizeof(message), "%lu\n",spectral_data[j]);
 8014e94:	4a0d      	ldr	r2, [pc, #52]	@ (8014ecc <Send_SPEC_UART+0x44>)
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e9c:	4638      	mov	r0, r7
 8014e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8014ed0 <Send_SPEC_UART+0x48>)
 8014ea0:	210c      	movs	r1, #12
 8014ea2:	f001 f891 	bl	8015fc8 <sniprintf>
	  // Send the concentration values via UART
	  HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(spectral_data[j]), HAL_MAX_DELAY);    //to PC
 8014ea6:	4639      	mov	r1, r7
 8014ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8014eac:	2204      	movs	r2, #4
 8014eae:	4809      	ldr	r0, [pc, #36]	@ (8014ed4 <Send_SPEC_UART+0x4c>)
 8014eb0:	f7f6 fad6 	bl	800b460 <HAL_UART_Transmit>
	for (int j = 0; j < NUM_WAVELENGTHS*2; j++){
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	3301      	adds	r3, #1
 8014eb8:	60fb      	str	r3, [r7, #12]
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ec0:	dbe8      	blt.n	8014e94 <Send_SPEC_UART+0xc>
	}
	/*char Bil_message[12];
	snprintf(Bil_message, sizeof(Bil_message), "%.2f\n",BilResult);
	HAL_UART_Transmit(&huart3, (uint8_t *)Bil_message, sizeof(Bil_message), HAL_MAX_DELAY);    //BilResult to ESP
	*/
}
 8014ec2:	bf00      	nop
 8014ec4:	bf00      	nop
 8014ec6:	3710      	adds	r7, #16
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	20001e6c 	.word	0x20001e6c
 8014ed0:	080182a8 	.word	0x080182a8
 8014ed4:	20000808 	.word	0x20000808

08014ed8 <EXTI4_IRQHandler>:

/////////////////////////////////////// EOS Interrupt ///////////////////////////////////////////
/* EXTI4 IRQ Handler */
void EXTI4_IRQHandler(void){
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8014edc:	2010      	movs	r0, #16
 8014ede:	f7f0 ff4b 	bl	8005d78 <HAL_GPIO_EXTI_IRQHandler>
}
 8014ee2:	bf00      	nop
 8014ee4:	bd80      	pop	{r7, pc}
	...

08014ee8 <DWT_Init>:
        eos_received = 1;
    }
}*/
/////////////////////////////////////// us Delay Timer ///////////////////////////////////////////
// Function to initialize the DWT unit
void DWT_Init(void) {
 8014ee8:	b480      	push	{r7}
 8014eea:	af00      	add	r7, sp, #0
    // Enable TRC
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8014eec:	4b08      	ldr	r3, [pc, #32]	@ (8014f10 <DWT_Init+0x28>)
 8014eee:	68db      	ldr	r3, [r3, #12]
 8014ef0:	4a07      	ldr	r2, [pc, #28]	@ (8014f10 <DWT_Init+0x28>)
 8014ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014ef6:	60d3      	str	r3, [r2, #12]
    // Unlock DWT access
    //DWT->LAR = 0xC5ACCE55;
    // Enable the cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8014ef8:	4b06      	ldr	r3, [pc, #24]	@ (8014f14 <DWT_Init+0x2c>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	4a05      	ldr	r2, [pc, #20]	@ (8014f14 <DWT_Init+0x2c>)
 8014efe:	f043 0301 	orr.w	r3, r3, #1
 8014f02:	6013      	str	r3, [r2, #0]
}
 8014f04:	bf00      	nop
 8014f06:	46bd      	mov	sp, r7
 8014f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0c:	4770      	bx	lr
 8014f0e:	bf00      	nop
 8014f10:	e000edf0 	.word	0xe000edf0
 8014f14:	e0001000 	.word	0xe0001000

08014f18 <DWT_GetSysClockFreq>:
// Function to get the system clock frequency
uint32_t DWT_GetSysClockFreq(void) {
 8014f18:	b480      	push	{r7}
 8014f1a:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 8014f1c:	4b03      	ldr	r3, [pc, #12]	@ (8014f2c <DWT_GetSysClockFreq+0x14>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	46bd      	mov	sp, r7
 8014f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f28:	4770      	bx	lr
 8014f2a:	bf00      	nop
 8014f2c:	20000004 	.word	0x20000004

08014f30 <DWT_Delay>:

// Function to create a microsecond delay
void DWT_Delay(uint32_t us) {
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b084      	sub	sp, #16
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 8014f38:	4b0d      	ldr	r3, [pc, #52]	@ (8014f70 <DWT_Delay+0x40>)
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (DWT_GetSysClockFreq() / 1000000);
 8014f3e:	f7ff ffeb 	bl	8014f18 <DWT_GetSysClockFreq>
 8014f42:	4603      	mov	r3, r0
 8014f44:	4a0b      	ldr	r2, [pc, #44]	@ (8014f74 <DWT_Delay+0x44>)
 8014f46:	fba2 2303 	umull	r2, r3, r2, r3
 8014f4a:	0c9a      	lsrs	r2, r3, #18
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	fb02 f303 	mul.w	r3, r2, r3
 8014f52:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - startTick) < delayTicks);
 8014f54:	bf00      	nop
 8014f56:	4b06      	ldr	r3, [pc, #24]	@ (8014f70 <DWT_Delay+0x40>)
 8014f58:	685a      	ldr	r2, [r3, #4]
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	1ad3      	subs	r3, r2, r3
 8014f5e:	68ba      	ldr	r2, [r7, #8]
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d8f8      	bhi.n	8014f56 <DWT_Delay+0x26>
}
 8014f64:	bf00      	nop
 8014f66:	bf00      	nop
 8014f68:	3710      	adds	r7, #16
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	e0001000 	.word	0xe0001000
 8014f74:	431bde83 	.word	0x431bde83

08014f78 <__NVIC_EnableIRQ>:
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b083      	sub	sp, #12
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	4603      	mov	r3, r0
 8014f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	db0b      	blt.n	8014fa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014f8a:	79fb      	ldrb	r3, [r7, #7]
 8014f8c:	f003 021f 	and.w	r2, r3, #31
 8014f90:	4907      	ldr	r1, [pc, #28]	@ (8014fb0 <__NVIC_EnableIRQ+0x38>)
 8014f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f96:	095b      	lsrs	r3, r3, #5
 8014f98:	2001      	movs	r0, #1
 8014f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8014f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014fa2:	bf00      	nop
 8014fa4:	370c      	adds	r7, #12
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fac:	4770      	bx	lr
 8014fae:	bf00      	nop
 8014fb0:	e000e100 	.word	0xe000e100

08014fb4 <systemLoop>:
uint16_t service_handle;
uint16_t char_handle;
//static uint16_t connection_handle;

void systemLoop(void)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	af00      	add	r7, sp, #0
	  spectrometer();
 8014fb8:	f7ff fefc 	bl	8014db4 <spectrometer>
	  LCD();
 8014fbc:	f7fe fa2a 	bl	8013414 <LCD>
	  RTC_DisplayTime();
 8014fc0:	f7ff fe8c 	bl	8014cdc <RTC_DisplayTime>
}
 8014fc4:	bf00      	nop
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <systemSetup>:

void systemSetup(void)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	af00      	add	r7, sp, #0
	  SpectrometerSetup();
 8014fcc:	f000 f80e 	bl	8014fec <SpectrometerSetup>
	  LCD_Setup();
 8014fd0:	f000 f83c 	bl	801504c <LCD_Setup>
	  RTC_Init();
 8014fd4:	f7ff fdb8 	bl	8014b48 <RTC_Init>
	  USB_Setup();
 8014fd8:	f000 f864 	bl	80150a4 <USB_Setup>
	  FLASH_Setup();
 8014fdc:	f000 f86e 	bl	80150bc <FLASH_Setup>
	  BLE_Setup();
 8014fe0:	f000 f872 	bl	80150c8 <BLE_Setup>
	  Wakeup_Init();      // Check if the system woke up from Standby
 8014fe4:	f000 f986 	bl	80152f4 <Wakeup_Init>
}
 8014fe8:	bf00      	nop
 8014fea:	bd80      	pop	{r7, pc}

08014fec <SpectrometerSetup>:
//################################################################################################//



void SpectrometerSetup(void)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	af00      	add	r7, sp, #0
	  TIM1->CCR1=5;  //50   50% Duty Cycle ==> to generate 135khz
 8014ff0:	4b11      	ldr	r3, [pc, #68]	@ (8015038 <SpectrometerSetup+0x4c>)
 8014ff2:	2205      	movs	r2, #5
 8014ff4:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8014ff6:	2100      	movs	r1, #0
 8014ff8:	4810      	ldr	r0, [pc, #64]	@ (801503c <SpectrometerSetup+0x50>)
 8014ffa:	f7f5 fa13 	bl	800a424 <HAL_TIM_PWM_Start>

	  HAL_GPIO_WritePin(SPEC_START_GPIO_Port, SPEC_START_Pin, GPIO_PIN_SET);
 8014ffe:	2201      	movs	r2, #1
 8015000:	2120      	movs	r1, #32
 8015002:	480f      	ldr	r0, [pc, #60]	@ (8015040 <SpectrometerSetup+0x54>)
 8015004:	f7f0 fe9e 	bl	8005d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPEC_CLK_GPIO_Port, SPEC_CLK_Pin, GPIO_PIN_RESET);
 8015008:	2200      	movs	r2, #0
 801500a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801500e:	480d      	ldr	r0, [pc, #52]	@ (8015044 <SpectrometerSetup+0x58>)
 8015010:	f7f0 fe98 	bl	8005d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPEC_GAIN_GPIO_Port, SPEC_GAIN_Pin, GPIO_PIN_RESET);
 8015014:	2200      	movs	r2, #0
 8015016:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801501a:	4809      	ldr	r0, [pc, #36]	@ (8015040 <SpectrometerSetup+0x54>)
 801501c:	f7f0 fe92 	bl	8005d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPEC_EOS_GPIO_Port, SPEC_EOS_Pin, GPIO_PIN_RESET);
 8015020:	2200      	movs	r2, #0
 8015022:	2110      	movs	r1, #16
 8015024:	4808      	ldr	r0, [pc, #32]	@ (8015048 <SpectrometerSetup+0x5c>)
 8015026:	f7f0 fe8d 	bl	8005d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPEC_LED_GPIO_Port, SPEC_LED_Pin, GPIO_PIN_RESET); // Turn off the SPEC LED
 801502a:	2200      	movs	r2, #0
 801502c:	2180      	movs	r1, #128	@ 0x80
 801502e:	4806      	ldr	r0, [pc, #24]	@ (8015048 <SpectrometerSetup+0x5c>)
 8015030:	f7f0 fe88 	bl	8005d44 <HAL_GPIO_WritePin>
}
 8015034:	bf00      	nop
 8015036:	bd80      	pop	{r7, pc}
 8015038:	40010000 	.word	0x40010000
 801503c:	20000688 	.word	0x20000688
 8015040:	40020400 	.word	0x40020400
 8015044:	40021000 	.word	0x40021000
 8015048:	40020000 	.word	0x40020000

0801504c <LCD_Setup>:

void LCD_Setup(void)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(EN_5vReg_GPIO_Port, EN_5vReg_Pin, GPIO_PIN_RESET);                   // Turn off 5v REG
 8015052:	2200      	movs	r2, #0
 8015054:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8015058:	4810      	ldr	r0, [pc, #64]	@ (801509c <LCD_Setup+0x50>)
 801505a:	f7f0 fe73 	bl	8005d44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPEC_LED_GPIO_Port, SPEC_LED_Pin, GPIO_PIN_RESET); 					// Turn off the SPEC LED
 801505e:	2200      	movs	r2, #0
 8015060:	2180      	movs	r1, #128	@ 0x80
 8015062:	480f      	ldr	r0, [pc, #60]	@ (80150a0 <LCD_Setup+0x54>)
 8015064:	f7f0 fe6e 	bl	8005d44 <HAL_GPIO_WritePin>
	  ssd1306_Init();
 8015068:	f7ed fdb8 	bl	8002bdc <ssd1306_Init>

	  BatteryLevelFilterInit();
 801506c:	f000 f8a6 	bl	80151bc <BatteryLevelFilterInit>
	  TIM11_Init(); 			// Initialize the timer for interrupts ==> for batt level percentage calculation
 8015070:	f000 f8c8 	bl	8015204 <TIM11_Init>
	  TIM10_Init();
 8015074:	f000 f8f2 	bl	801525c <TIM10_Init>
	  for (int var = 0; var < 5; ++var)  BatteryPercentage();
 8015078:	2300      	movs	r3, #0
 801507a:	607b      	str	r3, [r7, #4]
 801507c:	e004      	b.n	8015088 <LCD_Setup+0x3c>
 801507e:	f7ff f9f3 	bl	8014468 <BatteryPercentage>
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	3301      	adds	r3, #1
 8015086:	607b      	str	r3, [r7, #4]
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	2b04      	cmp	r3, #4
 801508c:	ddf7      	ble.n	801507e <LCD_Setup+0x32>

	  //ChargerDetect_Init();

	  Aymed_Logo();
 801508e:	f000 f873 	bl	8015178 <Aymed_Logo>
	  //Aymed_Text();      //moved to LCD.c
}
 8015092:	bf00      	nop
 8015094:	3708      	adds	r7, #8
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}
 801509a:	bf00      	nop
 801509c:	40020c00 	.word	0x40020c00
 80150a0:	40020000 	.word	0x40020000

080150a4 <USB_Setup>:

void USB_Setup(void){
 80150a4:	b580      	push	{r7, lr}
 80150a6:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);          //to open 5 v from PA9
 80150a8:	2200      	movs	r2, #0
 80150aa:	2101      	movs	r1, #1
 80150ac:	4802      	ldr	r0, [pc, #8]	@ (80150b8 <USB_Setup+0x14>)
 80150ae:	f7f0 fe49 	bl	8005d44 <HAL_GPIO_WritePin>

}
 80150b2:	bf00      	nop
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	40020800 	.word	0x40020800

080150bc <FLASH_Setup>:

void FLASH_Setup(void){
 80150bc:	b580      	push	{r7, lr}
 80150be:	af00      	add	r7, sp, #0

	  //EraseAllBilFlashSectors();            // to reset flash

	  FindLastBilResultIndex();// On startup, find the last valid index in the flash memory
 80150c0:	f7fd fff6 	bl	80130b0 <FindLastBilResultIndex>

}
 80150c4:	bf00      	nop
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <BLE_Setup>:
//Handle_Packets_Pair_Entry_t xy;
void BLE_Setup(void){
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af02      	add	r7, sp, #8
	// Initialization of the BLE stack
	  	 //tBleStatus ret = BLE_STATUS_SUCCESS;
	  	// Initialize the BlueNRG hardware (assuming this is done elsewhere in your setup code)
	  	 //hci_init(UserEvtRx, transport_layer_init);
	    // Initialize GATT and GAP
	     ret = aci_gatt_init();
 80150ce:	f7f9 feba 	bl	800ee46 <aci_gatt_init>
 80150d2:	4603      	mov	r3, r0
 80150d4:	461a      	mov	r2, r3
 80150d6:	4b0a      	ldr	r3, [pc, #40]	@ (8015100 <BLE_Setup+0x38>)
 80150d8:	701a      	strb	r2, [r3, #0]
	     ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07, &service_handle, NULL, NULL);
 80150da:	2300      	movs	r3, #0
 80150dc:	9301      	str	r3, [sp, #4]
 80150de:	2300      	movs	r3, #0
 80150e0:	9300      	str	r3, [sp, #0]
 80150e2:	4b08      	ldr	r3, [pc, #32]	@ (8015104 <BLE_Setup+0x3c>)
 80150e4:	2207      	movs	r2, #7
 80150e6:	2100      	movs	r1, #0
 80150e8:	2001      	movs	r0, #1
 80150ea:	f7f9 fd5b 	bl	800eba4 <aci_gap_init>
 80150ee:	4603      	mov	r3, r0
 80150f0:	b2da      	uxtb	r2, r3
 80150f2:	4b03      	ldr	r3, [pc, #12]	@ (8015100 <BLE_Setup+0x38>)
 80150f4:	701a      	strb	r2, [r3, #0]
	     // Add custom service and characteristic
	     Add_Custom_Service();
 80150f6:	f000 f807 	bl	8015108 <Add_Custom_Service>
	     // Start the MTU exchange process to request a larger MTU size
	     //uint16_t desired_MTU_size = 64;  // Set desired MTU size (e.g., 64 bytes)
	     //aci_gatt_exchange_config(xy.Connection_Handle);
	     // Make the device discoverable (set as connectable)
	     //aci_gap_set_discoverable(ADV_IND, 0x20, 0x30, PUBLIC_ADDR, NO_WHITE_LIST_USE,0, NULL, 0, NULL, 0, 0);
}
 80150fa:	bf00      	nop
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}
 8015100:	2000273d 	.word	0x2000273d
 8015104:	2000273e 	.word	0x2000273e

08015108 <Add_Custom_Service>:

//=============================    BLE Init FNs      ===============================
// Function to add a custom service and characteristic
void Add_Custom_Service(void){
 8015108:	b580      	push	{r7, lr}
 801510a:	b08e      	sub	sp, #56	@ 0x38
 801510c:	af06      	add	r7, sp, #24
    //tBleStatus ret;
    Service_UUID_t service_uuid;
    Char_UUID_t char_uuid;

    // Example UUIDs for the service and characteristic (16-bit UUID)
    service_uuid.Service_UUID_16 = 0x1234;   // Example service UUID
 801510e:	f241 2334 	movw	r3, #4660	@ 0x1234
 8015112:	823b      	strh	r3, [r7, #16]
    char_uuid.Char_UUID_16 = 0x5678;         // Example characteristic UUID
 8015114:	f245 6378 	movw	r3, #22136	@ 0x5678
 8015118:	803b      	strh	r3, [r7, #0]

    // Add custom service
    ret = aci_gatt_add_service(UUID_TYPE_16, &service_uuid, PRIMARY_SERVICE, 7, &service_handle);
 801511a:	f107 0110 	add.w	r1, r7, #16
 801511e:	4b13      	ldr	r3, [pc, #76]	@ (801516c <Add_Custom_Service+0x64>)
 8015120:	9300      	str	r3, [sp, #0]
 8015122:	2307      	movs	r3, #7
 8015124:	2201      	movs	r2, #1
 8015126:	2001      	movs	r0, #1
 8015128:	f7f9 feb7 	bl	800ee9a <aci_gatt_add_service>
 801512c:	4603      	mov	r3, r0
 801512e:	461a      	mov	r2, r3
 8015130:	4b0f      	ldr	r3, [pc, #60]	@ (8015170 <Add_Custom_Service+0x68>)
 8015132:	701a      	strb	r2, [r3, #0]

    // Add custom characteristic (read/write, 20 bytes max size)
    ret = aci_gatt_add_char(service_handle, UUID_TYPE_16, &char_uuid, 20,
 8015134:	4b0d      	ldr	r3, [pc, #52]	@ (801516c <Add_Custom_Service+0x64>)
 8015136:	8818      	ldrh	r0, [r3, #0]
 8015138:	463a      	mov	r2, r7
 801513a:	4b0e      	ldr	r3, [pc, #56]	@ (8015174 <Add_Custom_Service+0x6c>)
 801513c:	9305      	str	r3, [sp, #20]
 801513e:	2301      	movs	r3, #1
 8015140:	9304      	str	r3, [sp, #16]
 8015142:	2310      	movs	r3, #16
 8015144:	9303      	str	r3, [sp, #12]
 8015146:	2301      	movs	r3, #1
 8015148:	9302      	str	r3, [sp, #8]
 801514a:	2300      	movs	r3, #0
 801514c:	9301      	str	r3, [sp, #4]
 801514e:	231a      	movs	r3, #26
 8015150:	9300      	str	r3, [sp, #0]
 8015152:	2314      	movs	r3, #20
 8015154:	2101      	movs	r1, #1
 8015156:	f7f9 ff76 	bl	800f046 <aci_gatt_add_char>
 801515a:	4603      	mov	r3, r0
 801515c:	461a      	mov	r2, r3
 801515e:	4b04      	ldr	r3, [pc, #16]	@ (8015170 <Add_Custom_Service+0x68>)
 8015160:	701a      	strb	r2, [r3, #0]
                            CHAR_PROP_READ | CHAR_PROP_WRITE | CHAR_PROP_NOTIFY,
                            ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
                            16, 1, &char_handle);
}
 8015162:	bf00      	nop
 8015164:	3720      	adds	r7, #32
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	2000273e 	.word	0x2000273e
 8015170:	2000273d 	.word	0x2000273d
 8015174:	20002740 	.word	0x20002740

08015178 <Aymed_Logo>:
//====================================================================================

//################################################################################################//

void Aymed_Logo(void)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af02      	add	r7, sp, #8
	 ssd1306_Fill(Black);
 801517e:	2000      	movs	r0, #0
 8015180:	f7ed fd96 	bl	8002cb0 <ssd1306_Fill>
	 ssd1306_SetCursor(0, 0);
 8015184:	2100      	movs	r1, #0
 8015186:	2000      	movs	r0, #0
 8015188:	f7ed fedc 	bl	8002f44 <ssd1306_SetCursor>
     ssd1306_DrawBitmap(0,0,image_data_ss,128,64, White );
 801518c:	2301      	movs	r3, #1
 801518e:	9301      	str	r3, [sp, #4]
 8015190:	2340      	movs	r3, #64	@ 0x40
 8015192:	9300      	str	r3, [sp, #0]
 8015194:	2380      	movs	r3, #128	@ 0x80
 8015196:	4a07      	ldr	r2, [pc, #28]	@ (80151b4 <Aymed_Logo+0x3c>)
 8015198:	2100      	movs	r1, #0
 801519a:	2000      	movs	r0, #0
 801519c:	f7ed ff38 	bl	8003010 <ssd1306_DrawBitmap>
     ssd1306_UpdateScreen();
 80151a0:	f7ed fd9e 	bl	8002ce0 <ssd1306_UpdateScreen>
     HAL_Delay(logo_time);
 80151a4:	4b04      	ldr	r3, [pc, #16]	@ (80151b8 <Aymed_Logo+0x40>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	4618      	mov	r0, r3
 80151aa:	f7ee ff07 	bl	8003fbc <HAL_Delay>
}
 80151ae:	bf00      	nop
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}
 80151b4:	0801a4f8 	.word	0x0801a4f8
 80151b8:	200000dc 	.word	0x200000dc

080151bc <BatteryLevelFilterInit>:

    HAL_Delay(text_time);
}

void BatteryLevelFilterInit(void)
{
 80151bc:	b480      	push	{r7}
 80151be:	b083      	sub	sp, #12
 80151c0:	af00      	add	r7, sp, #0
	 lastPercentage = -1.0; // Initialize last percentage to an invalid value
 80151c2:	4b0d      	ldr	r3, [pc, #52]	@ (80151f8 <BatteryLevelFilterInit+0x3c>)
 80151c4:	4a0d      	ldr	r2, [pc, #52]	@ (80151fc <BatteryLevelFilterInit+0x40>)
 80151c6:	601a      	str	r2, [r3, #0]
	  // Initialize the filter array with initial readings
	  for (int i = 0; i < FILTER_SIZE; i++) {
 80151c8:	2300      	movs	r3, #0
 80151ca:	607b      	str	r3, [r7, #4]
 80151cc:	e009      	b.n	80151e2 <BatteryLevelFilterInit+0x26>
		  adcReadings[i] = 0;
 80151ce:	4a0c      	ldr	r2, [pc, #48]	@ (8015200 <BatteryLevelFilterInit+0x44>)
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	009b      	lsls	r3, r3, #2
 80151d4:	4413      	add	r3, r2
 80151d6:	f04f 0200 	mov.w	r2, #0
 80151da:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < FILTER_SIZE; i++) {
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	3301      	adds	r3, #1
 80151e0:	607b      	str	r3, [r7, #4]
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2b04      	cmp	r3, #4
 80151e6:	ddf2      	ble.n	80151ce <BatteryLevelFilterInit+0x12>
	  }
}
 80151e8:	bf00      	nop
 80151ea:	bf00      	nop
 80151ec:	370c      	adds	r7, #12
 80151ee:	46bd      	mov	sp, r7
 80151f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f4:	4770      	bx	lr
 80151f6:	bf00      	nop
 80151f8:	20002738 	.word	0x20002738
 80151fc:	bf800000 	.word	0xbf800000
 8015200:	20002724 	.word	0x20002724

08015204 <TIM11_Init>:
// ################################################# TIMERS Configurations ######################################## //
// Timer Interrupt Initialization
void TIM11_Init(void) {                   // Battery calculation
 8015204:	b580      	push	{r7, lr}
 8015206:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim11);
 8015208:	4810      	ldr	r0, [pc, #64]	@ (801524c <TIM11_Init+0x48>)
 801520a:	f7f5 f9d3 	bl	800a5b4 <HAL_TIM_IRQHandler>
    // Enable clock for TIM2
    RCC->AHB2ENR |= RCC_APB2ENR_TIM11EN;
 801520e:	4b10      	ldr	r3, [pc, #64]	@ (8015250 <TIM11_Init+0x4c>)
 8015210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015212:	4a0f      	ldr	r2, [pc, #60]	@ (8015250 <TIM11_Init+0x4c>)
 8015214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8015218:	6353      	str	r3, [r2, #52]	@ 0x34

    // Configure TIM2: 1 tick per millisecond (assuming 16 MHz clock with APB1 prescaler 4)
    TIM11->PSC = 168000-1;    //168*5->10 sec //36000 - 1;  // Prescaler: 16 MHz / 16000 = 1 kHz (1 ms period)
 801521a:	4b0e      	ldr	r3, [pc, #56]	@ (8015254 <TIM11_Init+0x50>)
 801521c:	4a0e      	ldr	r2, [pc, #56]	@ (8015258 <TIM11_Init+0x54>)
 801521e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM11->ARR = 20000-1;    //14000 - 1;  //4000=2 sec //50000 = 5 sec
 8015220:	4b0c      	ldr	r3, [pc, #48]	@ (8015254 <TIM11_Init+0x50>)
 8015222:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8015226:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM11->CR1 |= TIM_CR1_CEN;   // Enable counter
 8015228:	4b0a      	ldr	r3, [pc, #40]	@ (8015254 <TIM11_Init+0x50>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	4a09      	ldr	r2, [pc, #36]	@ (8015254 <TIM11_Init+0x50>)
 801522e:	f043 0301 	orr.w	r3, r3, #1
 8015232:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt
    TIM11->DIER |= TIM_DIER_UIE;
 8015234:	4b07      	ldr	r3, [pc, #28]	@ (8015254 <TIM11_Init+0x50>)
 8015236:	68db      	ldr	r3, [r3, #12]
 8015238:	4a06      	ldr	r2, [pc, #24]	@ (8015254 <TIM11_Init+0x50>)
 801523a:	f043 0301 	orr.w	r3, r3, #1
 801523e:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8015240:	201a      	movs	r0, #26
 8015242:	f7ff fe99 	bl	8014f78 <__NVIC_EnableIRQ>
}
 8015246:	bf00      	nop
 8015248:	bd80      	pop	{r7, pc}
 801524a:	bf00      	nop
 801524c:	20000718 	.word	0x20000718
 8015250:	40023800 	.word	0x40023800
 8015254:	40014800 	.word	0x40014800
 8015258:	0002903f 	.word	0x0002903f

0801525c <TIM10_Init>:
// Timer Interrupt Initialization
void TIM10_Init(void) {                     //dotCounter++; && Standby_Mode ctr
 801525c:	b580      	push	{r7, lr}
 801525e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim10);
 8015260:	4810      	ldr	r0, [pc, #64]	@ (80152a4 <TIM10_Init+0x48>)
 8015262:	f7f5 f9a7 	bl	800a5b4 <HAL_TIM_IRQHandler>
    // Enable clock for TIM2
    RCC->AHB2ENR |= RCC_APB2ENR_TIM10EN;
 8015266:	4b10      	ldr	r3, [pc, #64]	@ (80152a8 <TIM10_Init+0x4c>)
 8015268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801526a:	4a0f      	ldr	r2, [pc, #60]	@ (80152a8 <TIM10_Init+0x4c>)
 801526c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015270:	6353      	str	r3, [r2, #52]	@ 0x34

    // Configure TIM2: 1 tick per millisecond (assuming 16 MHz clock with APB1 prescaler 4)
    TIM10->PSC = 84000 - 1;      // Prescaler: 16 MHz / 16000 = 1 kHz (1 ms period)
 8015272:	4b0e      	ldr	r3, [pc, #56]	@ (80152ac <TIM10_Init+0x50>)
 8015274:	4a0e      	ldr	r2, [pc, #56]	@ (80152b0 <TIM10_Init+0x54>)
 8015276:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM10->ARR = 10000 - 1;      //10000 = 1 sec
 8015278:	4b0c      	ldr	r3, [pc, #48]	@ (80152ac <TIM10_Init+0x50>)
 801527a:	f242 720f 	movw	r2, #9999	@ 0x270f
 801527e:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM10->CR1 |= TIM_CR1_CEN;   // Enable counter
 8015280:	4b0a      	ldr	r3, [pc, #40]	@ (80152ac <TIM10_Init+0x50>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	4a09      	ldr	r2, [pc, #36]	@ (80152ac <TIM10_Init+0x50>)
 8015286:	f043 0301 	orr.w	r3, r3, #1
 801528a:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt
    TIM10->DIER |= TIM_DIER_UIE;
 801528c:	4b07      	ldr	r3, [pc, #28]	@ (80152ac <TIM10_Init+0x50>)
 801528e:	68db      	ldr	r3, [r3, #12]
 8015290:	4a06      	ldr	r2, [pc, #24]	@ (80152ac <TIM10_Init+0x50>)
 8015292:	f043 0301 	orr.w	r3, r3, #1
 8015296:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8015298:	2019      	movs	r0, #25
 801529a:	f7ff fe6d 	bl	8014f78 <__NVIC_EnableIRQ>
}
 801529e:	bf00      	nop
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	bf00      	nop
 80152a4:	200006d0 	.word	0x200006d0
 80152a8:	40023800 	.word	0x40023800
 80152ac:	40014400 	.word	0x40014400
 80152b0:	0001481f 	.word	0x0001481f

080152b4 <Enter_Standby_Mode>:
// ################################################# Standby Mode ######################################## //
void Enter_Standby_Mode(void){
 80152b4:	b580      	push	{r7, lr}
 80152b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Bcode_INIT_GPIO_Port, Bcode_INIT_Pin, GPIO_PIN_RESET);
 80152b8:	2200      	movs	r2, #0
 80152ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80152be:	480b      	ldr	r0, [pc, #44]	@ (80152ec <Enter_Standby_Mode+0x38>)
 80152c0:	f7f0 fd40 	bl	8005d44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BT_INIT_GPIO_Port, BT_INIT_Pin, GPIO_PIN_RESET);
 80152c4:	2200      	movs	r2, #0
 80152c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80152ca:	4808      	ldr	r0, [pc, #32]	@ (80152ec <Enter_Standby_Mode+0x38>)
 80152cc:	f7f0 fd3a 	bl	8005d44 <HAL_GPIO_WritePin>

    // Enable wake-up sources (RTC or external pin)
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);  // Wake-up from PA0 (WKUP pin)
 80152d0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80152d4:	f7f3 fe7c 	bl	8008fd0 <HAL_PWR_EnableWakeUpPin>

    // Clear the Wake-up flag
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80152d8:	4b05      	ldr	r3, [pc, #20]	@ (80152f0 <Enter_Standby_Mode+0x3c>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	4a04      	ldr	r2, [pc, #16]	@ (80152f0 <Enter_Standby_Mode+0x3c>)
 80152de:	f043 0304 	orr.w	r3, r3, #4
 80152e2:	6013      	str	r3, [r2, #0]

    // Enter Standby Mode
    HAL_PWR_EnterSTANDBYMode();
 80152e4:	f7f3 fe86 	bl	8008ff4 <HAL_PWR_EnterSTANDBYMode>
}
 80152e8:	bf00      	nop
 80152ea:	bd80      	pop	{r7, pc}
 80152ec:	40020c00 	.word	0x40020c00
 80152f0:	40007000 	.word	0x40007000

080152f4 <Wakeup_Init>:

void Wakeup_Init(void){
 80152f4:	b480      	push	{r7}
 80152f6:	af00      	add	r7, sp, #0
    // Check if the system was reset due to Standby mode wake-up
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET){
 80152f8:	4b0b      	ldr	r3, [pc, #44]	@ (8015328 <Wakeup_Init+0x34>)
 80152fa:	685b      	ldr	r3, [r3, #4]
 80152fc:	f003 0302 	and.w	r3, r3, #2
 8015300:	2b02      	cmp	r3, #2
 8015302:	d10b      	bne.n	801531c <Wakeup_Init+0x28>
        // Clear the Standby flag
        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8015304:	4b08      	ldr	r3, [pc, #32]	@ (8015328 <Wakeup_Init+0x34>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	4a07      	ldr	r2, [pc, #28]	@ (8015328 <Wakeup_Init+0x34>)
 801530a:	f043 0308 	orr.w	r3, r3, #8
 801530e:	6013      	str	r3, [r2, #0]

        // Clear Wake-up flags
        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8015310:	4b05      	ldr	r3, [pc, #20]	@ (8015328 <Wakeup_Init+0x34>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	4a04      	ldr	r2, [pc, #16]	@ (8015328 <Wakeup_Init+0x34>)
 8015316:	f043 0304 	orr.w	r3, r3, #4
 801531a:	6013      	str	r3, [r2, #0]
    }
}
 801531c:	bf00      	nop
 801531e:	46bd      	mov	sp, r7
 8015320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015324:	4770      	bx	lr
 8015326:	bf00      	nop
 8015328:	40007000 	.word	0x40007000

0801532c <EXTI0_IRQHandler>:

// ################################################# INTERRUPTS ######################################## //
/* EXTI1 IRQ Handler */
void EXTI0_IRQHandler(void)                 // System Wake-UP
{
 801532c:	b580      	push	{r7, lr}
 801532e:	af00      	add	r7, sp, #0
    // Handle external interrupt (button press on PB1)
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8015330:	2001      	movs	r0, #1
 8015332:	f7f0 fd21 	bl	8005d78 <HAL_GPIO_EXTI_IRQHandler>
    // Clear interrupt and wake up the MCU
}
 8015336:	bf00      	nop
 8015338:	bd80      	pop	{r7, pc}

0801533a <EXTI9_5_IRQHandler>:

/* EXTI4 IRQ Handler */

void EXTI9_5_IRQHandler(void)
{
 801533a:	b580      	push	{r7, lr}
 801533c:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 801533e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8015342:	f7f0 fd19 	bl	8005d78 <HAL_GPIO_EXTI_IRQHandler>
}
 8015346:	bf00      	nop
 8015348:	bd80      	pop	{r7, pc}
	...

0801534c <HAL_GPIO_EXTI_Callback>:

// Callback for System interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 801534c:	b580      	push	{r7, lr}
 801534e:	b082      	sub	sp, #8
 8015350:	af00      	add	r7, sp, #0
 8015352:	4603      	mov	r3, r0
 8015354:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_8) {									// Callback for BattCharger interrupt
 8015356:	88fb      	ldrh	r3, [r7, #6]
 8015358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801535c:	d10e      	bne.n	801537c <HAL_GPIO_EXTI_Callback+0x30>
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET) {
 801535e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015362:	480b      	ldr	r0, [pc, #44]	@ (8015390 <HAL_GPIO_EXTI_Callback+0x44>)
 8015364:	f7f0 fcd6 	bl	8005d14 <HAL_GPIO_ReadPin>
 8015368:	4603      	mov	r3, r0
 801536a:	2b01      	cmp	r3, #1
 801536c:	d103      	bne.n	8015376 <HAL_GPIO_EXTI_Callback+0x2a>
			// Charger connected (e.g., voltage detected > threshold)
        	isCharging = true;
 801536e:	4b09      	ldr	r3, [pc, #36]	@ (8015394 <HAL_GPIO_EXTI_Callback+0x48>)
 8015370:	2201      	movs	r2, #1
 8015372:	701a      	strb	r2, [r3, #0]
 8015374:	e002      	b.n	801537c <HAL_GPIO_EXTI_Callback+0x30>
		} else {
			// Charger disconnected (e.g., voltage detected < threshold)
			isCharging = false;
 8015376:	4b07      	ldr	r3, [pc, #28]	@ (8015394 <HAL_GPIO_EXTI_Callback+0x48>)
 8015378:	2200      	movs	r2, #0
 801537a:	701a      	strb	r2, [r3, #0]
		}
    }

    if (GPIO_Pin == GPIO_PIN_4) {         							  // Callback for SPEC_EOS interrupt
 801537c:	88fb      	ldrh	r3, [r7, #6]
 801537e:	2b10      	cmp	r3, #16
 8015380:	d102      	bne.n	8015388 <HAL_GPIO_EXTI_Callback+0x3c>
        eos_received = 1;
 8015382:	4b05      	ldr	r3, [pc, #20]	@ (8015398 <HAL_GPIO_EXTI_Callback+0x4c>)
 8015384:	2201      	movs	r2, #1
 8015386:	701a      	strb	r2, [r3, #0]
    }
}
 8015388:	bf00      	nop
 801538a:	3708      	adds	r7, #8
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}
 8015390:	40020c00 	.word	0x40020c00
 8015394:	2000273c 	.word	0x2000273c
 8015398:	20002720 	.word	0x20002720

0801539c <malloc>:
 801539c:	4b02      	ldr	r3, [pc, #8]	@ (80153a8 <malloc+0xc>)
 801539e:	4601      	mov	r1, r0
 80153a0:	6818      	ldr	r0, [r3, #0]
 80153a2:	f000 b82d 	b.w	8015400 <_malloc_r>
 80153a6:	bf00      	nop
 80153a8:	200000ec 	.word	0x200000ec

080153ac <free>:
 80153ac:	4b02      	ldr	r3, [pc, #8]	@ (80153b8 <free+0xc>)
 80153ae:	4601      	mov	r1, r0
 80153b0:	6818      	ldr	r0, [r3, #0]
 80153b2:	f001 bdcd 	b.w	8016f50 <_free_r>
 80153b6:	bf00      	nop
 80153b8:	200000ec 	.word	0x200000ec

080153bc <sbrk_aligned>:
 80153bc:	b570      	push	{r4, r5, r6, lr}
 80153be:	4e0f      	ldr	r6, [pc, #60]	@ (80153fc <sbrk_aligned+0x40>)
 80153c0:	460c      	mov	r4, r1
 80153c2:	6831      	ldr	r1, [r6, #0]
 80153c4:	4605      	mov	r5, r0
 80153c6:	b911      	cbnz	r1, 80153ce <sbrk_aligned+0x12>
 80153c8:	f000 fef2 	bl	80161b0 <_sbrk_r>
 80153cc:	6030      	str	r0, [r6, #0]
 80153ce:	4621      	mov	r1, r4
 80153d0:	4628      	mov	r0, r5
 80153d2:	f000 feed 	bl	80161b0 <_sbrk_r>
 80153d6:	1c43      	adds	r3, r0, #1
 80153d8:	d103      	bne.n	80153e2 <sbrk_aligned+0x26>
 80153da:	f04f 34ff 	mov.w	r4, #4294967295
 80153de:	4620      	mov	r0, r4
 80153e0:	bd70      	pop	{r4, r5, r6, pc}
 80153e2:	1cc4      	adds	r4, r0, #3
 80153e4:	f024 0403 	bic.w	r4, r4, #3
 80153e8:	42a0      	cmp	r0, r4
 80153ea:	d0f8      	beq.n	80153de <sbrk_aligned+0x22>
 80153ec:	1a21      	subs	r1, r4, r0
 80153ee:	4628      	mov	r0, r5
 80153f0:	f000 fede 	bl	80161b0 <_sbrk_r>
 80153f4:	3001      	adds	r0, #1
 80153f6:	d1f2      	bne.n	80153de <sbrk_aligned+0x22>
 80153f8:	e7ef      	b.n	80153da <sbrk_aligned+0x1e>
 80153fa:	bf00      	nop
 80153fc:	20002744 	.word	0x20002744

08015400 <_malloc_r>:
 8015400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015404:	1ccd      	adds	r5, r1, #3
 8015406:	f025 0503 	bic.w	r5, r5, #3
 801540a:	3508      	adds	r5, #8
 801540c:	2d0c      	cmp	r5, #12
 801540e:	bf38      	it	cc
 8015410:	250c      	movcc	r5, #12
 8015412:	2d00      	cmp	r5, #0
 8015414:	4606      	mov	r6, r0
 8015416:	db01      	blt.n	801541c <_malloc_r+0x1c>
 8015418:	42a9      	cmp	r1, r5
 801541a:	d904      	bls.n	8015426 <_malloc_r+0x26>
 801541c:	230c      	movs	r3, #12
 801541e:	6033      	str	r3, [r6, #0]
 8015420:	2000      	movs	r0, #0
 8015422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015426:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80154fc <_malloc_r+0xfc>
 801542a:	f000 f869 	bl	8015500 <__malloc_lock>
 801542e:	f8d8 3000 	ldr.w	r3, [r8]
 8015432:	461c      	mov	r4, r3
 8015434:	bb44      	cbnz	r4, 8015488 <_malloc_r+0x88>
 8015436:	4629      	mov	r1, r5
 8015438:	4630      	mov	r0, r6
 801543a:	f7ff ffbf 	bl	80153bc <sbrk_aligned>
 801543e:	1c43      	adds	r3, r0, #1
 8015440:	4604      	mov	r4, r0
 8015442:	d158      	bne.n	80154f6 <_malloc_r+0xf6>
 8015444:	f8d8 4000 	ldr.w	r4, [r8]
 8015448:	4627      	mov	r7, r4
 801544a:	2f00      	cmp	r7, #0
 801544c:	d143      	bne.n	80154d6 <_malloc_r+0xd6>
 801544e:	2c00      	cmp	r4, #0
 8015450:	d04b      	beq.n	80154ea <_malloc_r+0xea>
 8015452:	6823      	ldr	r3, [r4, #0]
 8015454:	4639      	mov	r1, r7
 8015456:	4630      	mov	r0, r6
 8015458:	eb04 0903 	add.w	r9, r4, r3
 801545c:	f000 fea8 	bl	80161b0 <_sbrk_r>
 8015460:	4581      	cmp	r9, r0
 8015462:	d142      	bne.n	80154ea <_malloc_r+0xea>
 8015464:	6821      	ldr	r1, [r4, #0]
 8015466:	1a6d      	subs	r5, r5, r1
 8015468:	4629      	mov	r1, r5
 801546a:	4630      	mov	r0, r6
 801546c:	f7ff ffa6 	bl	80153bc <sbrk_aligned>
 8015470:	3001      	adds	r0, #1
 8015472:	d03a      	beq.n	80154ea <_malloc_r+0xea>
 8015474:	6823      	ldr	r3, [r4, #0]
 8015476:	442b      	add	r3, r5
 8015478:	6023      	str	r3, [r4, #0]
 801547a:	f8d8 3000 	ldr.w	r3, [r8]
 801547e:	685a      	ldr	r2, [r3, #4]
 8015480:	bb62      	cbnz	r2, 80154dc <_malloc_r+0xdc>
 8015482:	f8c8 7000 	str.w	r7, [r8]
 8015486:	e00f      	b.n	80154a8 <_malloc_r+0xa8>
 8015488:	6822      	ldr	r2, [r4, #0]
 801548a:	1b52      	subs	r2, r2, r5
 801548c:	d420      	bmi.n	80154d0 <_malloc_r+0xd0>
 801548e:	2a0b      	cmp	r2, #11
 8015490:	d917      	bls.n	80154c2 <_malloc_r+0xc2>
 8015492:	1961      	adds	r1, r4, r5
 8015494:	42a3      	cmp	r3, r4
 8015496:	6025      	str	r5, [r4, #0]
 8015498:	bf18      	it	ne
 801549a:	6059      	strne	r1, [r3, #4]
 801549c:	6863      	ldr	r3, [r4, #4]
 801549e:	bf08      	it	eq
 80154a0:	f8c8 1000 	streq.w	r1, [r8]
 80154a4:	5162      	str	r2, [r4, r5]
 80154a6:	604b      	str	r3, [r1, #4]
 80154a8:	4630      	mov	r0, r6
 80154aa:	f000 f82f 	bl	801550c <__malloc_unlock>
 80154ae:	f104 000b 	add.w	r0, r4, #11
 80154b2:	1d23      	adds	r3, r4, #4
 80154b4:	f020 0007 	bic.w	r0, r0, #7
 80154b8:	1ac2      	subs	r2, r0, r3
 80154ba:	bf1c      	itt	ne
 80154bc:	1a1b      	subne	r3, r3, r0
 80154be:	50a3      	strne	r3, [r4, r2]
 80154c0:	e7af      	b.n	8015422 <_malloc_r+0x22>
 80154c2:	6862      	ldr	r2, [r4, #4]
 80154c4:	42a3      	cmp	r3, r4
 80154c6:	bf0c      	ite	eq
 80154c8:	f8c8 2000 	streq.w	r2, [r8]
 80154cc:	605a      	strne	r2, [r3, #4]
 80154ce:	e7eb      	b.n	80154a8 <_malloc_r+0xa8>
 80154d0:	4623      	mov	r3, r4
 80154d2:	6864      	ldr	r4, [r4, #4]
 80154d4:	e7ae      	b.n	8015434 <_malloc_r+0x34>
 80154d6:	463c      	mov	r4, r7
 80154d8:	687f      	ldr	r7, [r7, #4]
 80154da:	e7b6      	b.n	801544a <_malloc_r+0x4a>
 80154dc:	461a      	mov	r2, r3
 80154de:	685b      	ldr	r3, [r3, #4]
 80154e0:	42a3      	cmp	r3, r4
 80154e2:	d1fb      	bne.n	80154dc <_malloc_r+0xdc>
 80154e4:	2300      	movs	r3, #0
 80154e6:	6053      	str	r3, [r2, #4]
 80154e8:	e7de      	b.n	80154a8 <_malloc_r+0xa8>
 80154ea:	230c      	movs	r3, #12
 80154ec:	6033      	str	r3, [r6, #0]
 80154ee:	4630      	mov	r0, r6
 80154f0:	f000 f80c 	bl	801550c <__malloc_unlock>
 80154f4:	e794      	b.n	8015420 <_malloc_r+0x20>
 80154f6:	6005      	str	r5, [r0, #0]
 80154f8:	e7d6      	b.n	80154a8 <_malloc_r+0xa8>
 80154fa:	bf00      	nop
 80154fc:	20002748 	.word	0x20002748

08015500 <__malloc_lock>:
 8015500:	4801      	ldr	r0, [pc, #4]	@ (8015508 <__malloc_lock+0x8>)
 8015502:	f000 bea2 	b.w	801624a <__retarget_lock_acquire_recursive>
 8015506:	bf00      	nop
 8015508:	2000288c 	.word	0x2000288c

0801550c <__malloc_unlock>:
 801550c:	4801      	ldr	r0, [pc, #4]	@ (8015514 <__malloc_unlock+0x8>)
 801550e:	f000 be9d 	b.w	801624c <__retarget_lock_release_recursive>
 8015512:	bf00      	nop
 8015514:	2000288c 	.word	0x2000288c

08015518 <rand>:
 8015518:	4b16      	ldr	r3, [pc, #88]	@ (8015574 <rand+0x5c>)
 801551a:	b510      	push	{r4, lr}
 801551c:	681c      	ldr	r4, [r3, #0]
 801551e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015520:	b9b3      	cbnz	r3, 8015550 <rand+0x38>
 8015522:	2018      	movs	r0, #24
 8015524:	f7ff ff3a 	bl	801539c <malloc>
 8015528:	4602      	mov	r2, r0
 801552a:	6320      	str	r0, [r4, #48]	@ 0x30
 801552c:	b920      	cbnz	r0, 8015538 <rand+0x20>
 801552e:	4b12      	ldr	r3, [pc, #72]	@ (8015578 <rand+0x60>)
 8015530:	4812      	ldr	r0, [pc, #72]	@ (801557c <rand+0x64>)
 8015532:	2152      	movs	r1, #82	@ 0x52
 8015534:	f000 fea2 	bl	801627c <__assert_func>
 8015538:	4911      	ldr	r1, [pc, #68]	@ (8015580 <rand+0x68>)
 801553a:	4b12      	ldr	r3, [pc, #72]	@ (8015584 <rand+0x6c>)
 801553c:	e9c0 1300 	strd	r1, r3, [r0]
 8015540:	4b11      	ldr	r3, [pc, #68]	@ (8015588 <rand+0x70>)
 8015542:	6083      	str	r3, [r0, #8]
 8015544:	230b      	movs	r3, #11
 8015546:	8183      	strh	r3, [r0, #12]
 8015548:	2100      	movs	r1, #0
 801554a:	2001      	movs	r0, #1
 801554c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015550:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015552:	480e      	ldr	r0, [pc, #56]	@ (801558c <rand+0x74>)
 8015554:	690b      	ldr	r3, [r1, #16]
 8015556:	694c      	ldr	r4, [r1, #20]
 8015558:	4a0d      	ldr	r2, [pc, #52]	@ (8015590 <rand+0x78>)
 801555a:	4358      	muls	r0, r3
 801555c:	fb02 0004 	mla	r0, r2, r4, r0
 8015560:	fba3 3202 	umull	r3, r2, r3, r2
 8015564:	3301      	adds	r3, #1
 8015566:	eb40 0002 	adc.w	r0, r0, r2
 801556a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801556e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015572:	bd10      	pop	{r4, pc}
 8015574:	200000ec 	.word	0x200000ec
 8015578:	0801a8f8 	.word	0x0801a8f8
 801557c:	0801a90f 	.word	0x0801a90f
 8015580:	abcd330e 	.word	0xabcd330e
 8015584:	e66d1234 	.word	0xe66d1234
 8015588:	0005deec 	.word	0x0005deec
 801558c:	5851f42d 	.word	0x5851f42d
 8015590:	4c957f2d 	.word	0x4c957f2d

08015594 <__cvt>:
 8015594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015598:	ec57 6b10 	vmov	r6, r7, d0
 801559c:	2f00      	cmp	r7, #0
 801559e:	460c      	mov	r4, r1
 80155a0:	4619      	mov	r1, r3
 80155a2:	463b      	mov	r3, r7
 80155a4:	bfbb      	ittet	lt
 80155a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80155aa:	461f      	movlt	r7, r3
 80155ac:	2300      	movge	r3, #0
 80155ae:	232d      	movlt	r3, #45	@ 0x2d
 80155b0:	700b      	strb	r3, [r1, #0]
 80155b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80155b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80155b8:	4691      	mov	r9, r2
 80155ba:	f023 0820 	bic.w	r8, r3, #32
 80155be:	bfbc      	itt	lt
 80155c0:	4632      	movlt	r2, r6
 80155c2:	4616      	movlt	r6, r2
 80155c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80155c8:	d005      	beq.n	80155d6 <__cvt+0x42>
 80155ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80155ce:	d100      	bne.n	80155d2 <__cvt+0x3e>
 80155d0:	3401      	adds	r4, #1
 80155d2:	2102      	movs	r1, #2
 80155d4:	e000      	b.n	80155d8 <__cvt+0x44>
 80155d6:	2103      	movs	r1, #3
 80155d8:	ab03      	add	r3, sp, #12
 80155da:	9301      	str	r3, [sp, #4]
 80155dc:	ab02      	add	r3, sp, #8
 80155de:	9300      	str	r3, [sp, #0]
 80155e0:	ec47 6b10 	vmov	d0, r6, r7
 80155e4:	4653      	mov	r3, sl
 80155e6:	4622      	mov	r2, r4
 80155e8:	f000 feee 	bl	80163c8 <_dtoa_r>
 80155ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80155f0:	4605      	mov	r5, r0
 80155f2:	d119      	bne.n	8015628 <__cvt+0x94>
 80155f4:	f019 0f01 	tst.w	r9, #1
 80155f8:	d00e      	beq.n	8015618 <__cvt+0x84>
 80155fa:	eb00 0904 	add.w	r9, r0, r4
 80155fe:	2200      	movs	r2, #0
 8015600:	2300      	movs	r3, #0
 8015602:	4630      	mov	r0, r6
 8015604:	4639      	mov	r1, r7
 8015606:	f7eb fa6f 	bl	8000ae8 <__aeabi_dcmpeq>
 801560a:	b108      	cbz	r0, 8015610 <__cvt+0x7c>
 801560c:	f8cd 900c 	str.w	r9, [sp, #12]
 8015610:	2230      	movs	r2, #48	@ 0x30
 8015612:	9b03      	ldr	r3, [sp, #12]
 8015614:	454b      	cmp	r3, r9
 8015616:	d31e      	bcc.n	8015656 <__cvt+0xc2>
 8015618:	9b03      	ldr	r3, [sp, #12]
 801561a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801561c:	1b5b      	subs	r3, r3, r5
 801561e:	4628      	mov	r0, r5
 8015620:	6013      	str	r3, [r2, #0]
 8015622:	b004      	add	sp, #16
 8015624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015628:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801562c:	eb00 0904 	add.w	r9, r0, r4
 8015630:	d1e5      	bne.n	80155fe <__cvt+0x6a>
 8015632:	7803      	ldrb	r3, [r0, #0]
 8015634:	2b30      	cmp	r3, #48	@ 0x30
 8015636:	d10a      	bne.n	801564e <__cvt+0xba>
 8015638:	2200      	movs	r2, #0
 801563a:	2300      	movs	r3, #0
 801563c:	4630      	mov	r0, r6
 801563e:	4639      	mov	r1, r7
 8015640:	f7eb fa52 	bl	8000ae8 <__aeabi_dcmpeq>
 8015644:	b918      	cbnz	r0, 801564e <__cvt+0xba>
 8015646:	f1c4 0401 	rsb	r4, r4, #1
 801564a:	f8ca 4000 	str.w	r4, [sl]
 801564e:	f8da 3000 	ldr.w	r3, [sl]
 8015652:	4499      	add	r9, r3
 8015654:	e7d3      	b.n	80155fe <__cvt+0x6a>
 8015656:	1c59      	adds	r1, r3, #1
 8015658:	9103      	str	r1, [sp, #12]
 801565a:	701a      	strb	r2, [r3, #0]
 801565c:	e7d9      	b.n	8015612 <__cvt+0x7e>

0801565e <__exponent>:
 801565e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015660:	2900      	cmp	r1, #0
 8015662:	bfba      	itte	lt
 8015664:	4249      	neglt	r1, r1
 8015666:	232d      	movlt	r3, #45	@ 0x2d
 8015668:	232b      	movge	r3, #43	@ 0x2b
 801566a:	2909      	cmp	r1, #9
 801566c:	7002      	strb	r2, [r0, #0]
 801566e:	7043      	strb	r3, [r0, #1]
 8015670:	dd29      	ble.n	80156c6 <__exponent+0x68>
 8015672:	f10d 0307 	add.w	r3, sp, #7
 8015676:	461d      	mov	r5, r3
 8015678:	270a      	movs	r7, #10
 801567a:	461a      	mov	r2, r3
 801567c:	fbb1 f6f7 	udiv	r6, r1, r7
 8015680:	fb07 1416 	mls	r4, r7, r6, r1
 8015684:	3430      	adds	r4, #48	@ 0x30
 8015686:	f802 4c01 	strb.w	r4, [r2, #-1]
 801568a:	460c      	mov	r4, r1
 801568c:	2c63      	cmp	r4, #99	@ 0x63
 801568e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015692:	4631      	mov	r1, r6
 8015694:	dcf1      	bgt.n	801567a <__exponent+0x1c>
 8015696:	3130      	adds	r1, #48	@ 0x30
 8015698:	1e94      	subs	r4, r2, #2
 801569a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801569e:	1c41      	adds	r1, r0, #1
 80156a0:	4623      	mov	r3, r4
 80156a2:	42ab      	cmp	r3, r5
 80156a4:	d30a      	bcc.n	80156bc <__exponent+0x5e>
 80156a6:	f10d 0309 	add.w	r3, sp, #9
 80156aa:	1a9b      	subs	r3, r3, r2
 80156ac:	42ac      	cmp	r4, r5
 80156ae:	bf88      	it	hi
 80156b0:	2300      	movhi	r3, #0
 80156b2:	3302      	adds	r3, #2
 80156b4:	4403      	add	r3, r0
 80156b6:	1a18      	subs	r0, r3, r0
 80156b8:	b003      	add	sp, #12
 80156ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80156c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80156c4:	e7ed      	b.n	80156a2 <__exponent+0x44>
 80156c6:	2330      	movs	r3, #48	@ 0x30
 80156c8:	3130      	adds	r1, #48	@ 0x30
 80156ca:	7083      	strb	r3, [r0, #2]
 80156cc:	70c1      	strb	r1, [r0, #3]
 80156ce:	1d03      	adds	r3, r0, #4
 80156d0:	e7f1      	b.n	80156b6 <__exponent+0x58>
	...

080156d4 <_printf_float>:
 80156d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d8:	b08d      	sub	sp, #52	@ 0x34
 80156da:	460c      	mov	r4, r1
 80156dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80156e0:	4616      	mov	r6, r2
 80156e2:	461f      	mov	r7, r3
 80156e4:	4605      	mov	r5, r0
 80156e6:	f000 fd2b 	bl	8016140 <_localeconv_r>
 80156ea:	6803      	ldr	r3, [r0, #0]
 80156ec:	9304      	str	r3, [sp, #16]
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7ea fdce 	bl	8000290 <strlen>
 80156f4:	2300      	movs	r3, #0
 80156f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80156f8:	f8d8 3000 	ldr.w	r3, [r8]
 80156fc:	9005      	str	r0, [sp, #20]
 80156fe:	3307      	adds	r3, #7
 8015700:	f023 0307 	bic.w	r3, r3, #7
 8015704:	f103 0208 	add.w	r2, r3, #8
 8015708:	f894 a018 	ldrb.w	sl, [r4, #24]
 801570c:	f8d4 b000 	ldr.w	fp, [r4]
 8015710:	f8c8 2000 	str.w	r2, [r8]
 8015714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015718:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801571c:	9307      	str	r3, [sp, #28]
 801571e:	f8cd 8018 	str.w	r8, [sp, #24]
 8015722:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8015726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801572a:	4b9c      	ldr	r3, [pc, #624]	@ (801599c <_printf_float+0x2c8>)
 801572c:	f04f 32ff 	mov.w	r2, #4294967295
 8015730:	f7eb fa0c 	bl	8000b4c <__aeabi_dcmpun>
 8015734:	bb70      	cbnz	r0, 8015794 <_printf_float+0xc0>
 8015736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801573a:	4b98      	ldr	r3, [pc, #608]	@ (801599c <_printf_float+0x2c8>)
 801573c:	f04f 32ff 	mov.w	r2, #4294967295
 8015740:	f7eb f9e6 	bl	8000b10 <__aeabi_dcmple>
 8015744:	bb30      	cbnz	r0, 8015794 <_printf_float+0xc0>
 8015746:	2200      	movs	r2, #0
 8015748:	2300      	movs	r3, #0
 801574a:	4640      	mov	r0, r8
 801574c:	4649      	mov	r1, r9
 801574e:	f7eb f9d5 	bl	8000afc <__aeabi_dcmplt>
 8015752:	b110      	cbz	r0, 801575a <_printf_float+0x86>
 8015754:	232d      	movs	r3, #45	@ 0x2d
 8015756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801575a:	4a91      	ldr	r2, [pc, #580]	@ (80159a0 <_printf_float+0x2cc>)
 801575c:	4b91      	ldr	r3, [pc, #580]	@ (80159a4 <_printf_float+0x2d0>)
 801575e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015762:	bf94      	ite	ls
 8015764:	4690      	movls	r8, r2
 8015766:	4698      	movhi	r8, r3
 8015768:	2303      	movs	r3, #3
 801576a:	6123      	str	r3, [r4, #16]
 801576c:	f02b 0304 	bic.w	r3, fp, #4
 8015770:	6023      	str	r3, [r4, #0]
 8015772:	f04f 0900 	mov.w	r9, #0
 8015776:	9700      	str	r7, [sp, #0]
 8015778:	4633      	mov	r3, r6
 801577a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801577c:	4621      	mov	r1, r4
 801577e:	4628      	mov	r0, r5
 8015780:	f000 f9d2 	bl	8015b28 <_printf_common>
 8015784:	3001      	adds	r0, #1
 8015786:	f040 808d 	bne.w	80158a4 <_printf_float+0x1d0>
 801578a:	f04f 30ff 	mov.w	r0, #4294967295
 801578e:	b00d      	add	sp, #52	@ 0x34
 8015790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015794:	4642      	mov	r2, r8
 8015796:	464b      	mov	r3, r9
 8015798:	4640      	mov	r0, r8
 801579a:	4649      	mov	r1, r9
 801579c:	f7eb f9d6 	bl	8000b4c <__aeabi_dcmpun>
 80157a0:	b140      	cbz	r0, 80157b4 <_printf_float+0xe0>
 80157a2:	464b      	mov	r3, r9
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	bfbc      	itt	lt
 80157a8:	232d      	movlt	r3, #45	@ 0x2d
 80157aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80157ae:	4a7e      	ldr	r2, [pc, #504]	@ (80159a8 <_printf_float+0x2d4>)
 80157b0:	4b7e      	ldr	r3, [pc, #504]	@ (80159ac <_printf_float+0x2d8>)
 80157b2:	e7d4      	b.n	801575e <_printf_float+0x8a>
 80157b4:	6863      	ldr	r3, [r4, #4]
 80157b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80157ba:	9206      	str	r2, [sp, #24]
 80157bc:	1c5a      	adds	r2, r3, #1
 80157be:	d13b      	bne.n	8015838 <_printf_float+0x164>
 80157c0:	2306      	movs	r3, #6
 80157c2:	6063      	str	r3, [r4, #4]
 80157c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80157c8:	2300      	movs	r3, #0
 80157ca:	6022      	str	r2, [r4, #0]
 80157cc:	9303      	str	r3, [sp, #12]
 80157ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80157d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80157d4:	ab09      	add	r3, sp, #36	@ 0x24
 80157d6:	9300      	str	r3, [sp, #0]
 80157d8:	6861      	ldr	r1, [r4, #4]
 80157da:	ec49 8b10 	vmov	d0, r8, r9
 80157de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80157e2:	4628      	mov	r0, r5
 80157e4:	f7ff fed6 	bl	8015594 <__cvt>
 80157e8:	9b06      	ldr	r3, [sp, #24]
 80157ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80157ec:	2b47      	cmp	r3, #71	@ 0x47
 80157ee:	4680      	mov	r8, r0
 80157f0:	d129      	bne.n	8015846 <_printf_float+0x172>
 80157f2:	1cc8      	adds	r0, r1, #3
 80157f4:	db02      	blt.n	80157fc <_printf_float+0x128>
 80157f6:	6863      	ldr	r3, [r4, #4]
 80157f8:	4299      	cmp	r1, r3
 80157fa:	dd41      	ble.n	8015880 <_printf_float+0x1ac>
 80157fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8015800:	fa5f fa8a 	uxtb.w	sl, sl
 8015804:	3901      	subs	r1, #1
 8015806:	4652      	mov	r2, sl
 8015808:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801580c:	9109      	str	r1, [sp, #36]	@ 0x24
 801580e:	f7ff ff26 	bl	801565e <__exponent>
 8015812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015814:	1813      	adds	r3, r2, r0
 8015816:	2a01      	cmp	r2, #1
 8015818:	4681      	mov	r9, r0
 801581a:	6123      	str	r3, [r4, #16]
 801581c:	dc02      	bgt.n	8015824 <_printf_float+0x150>
 801581e:	6822      	ldr	r2, [r4, #0]
 8015820:	07d2      	lsls	r2, r2, #31
 8015822:	d501      	bpl.n	8015828 <_printf_float+0x154>
 8015824:	3301      	adds	r3, #1
 8015826:	6123      	str	r3, [r4, #16]
 8015828:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801582c:	2b00      	cmp	r3, #0
 801582e:	d0a2      	beq.n	8015776 <_printf_float+0xa2>
 8015830:	232d      	movs	r3, #45	@ 0x2d
 8015832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015836:	e79e      	b.n	8015776 <_printf_float+0xa2>
 8015838:	9a06      	ldr	r2, [sp, #24]
 801583a:	2a47      	cmp	r2, #71	@ 0x47
 801583c:	d1c2      	bne.n	80157c4 <_printf_float+0xf0>
 801583e:	2b00      	cmp	r3, #0
 8015840:	d1c0      	bne.n	80157c4 <_printf_float+0xf0>
 8015842:	2301      	movs	r3, #1
 8015844:	e7bd      	b.n	80157c2 <_printf_float+0xee>
 8015846:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801584a:	d9db      	bls.n	8015804 <_printf_float+0x130>
 801584c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8015850:	d118      	bne.n	8015884 <_printf_float+0x1b0>
 8015852:	2900      	cmp	r1, #0
 8015854:	6863      	ldr	r3, [r4, #4]
 8015856:	dd0b      	ble.n	8015870 <_printf_float+0x19c>
 8015858:	6121      	str	r1, [r4, #16]
 801585a:	b913      	cbnz	r3, 8015862 <_printf_float+0x18e>
 801585c:	6822      	ldr	r2, [r4, #0]
 801585e:	07d0      	lsls	r0, r2, #31
 8015860:	d502      	bpl.n	8015868 <_printf_float+0x194>
 8015862:	3301      	adds	r3, #1
 8015864:	440b      	add	r3, r1
 8015866:	6123      	str	r3, [r4, #16]
 8015868:	65a1      	str	r1, [r4, #88]	@ 0x58
 801586a:	f04f 0900 	mov.w	r9, #0
 801586e:	e7db      	b.n	8015828 <_printf_float+0x154>
 8015870:	b913      	cbnz	r3, 8015878 <_printf_float+0x1a4>
 8015872:	6822      	ldr	r2, [r4, #0]
 8015874:	07d2      	lsls	r2, r2, #31
 8015876:	d501      	bpl.n	801587c <_printf_float+0x1a8>
 8015878:	3302      	adds	r3, #2
 801587a:	e7f4      	b.n	8015866 <_printf_float+0x192>
 801587c:	2301      	movs	r3, #1
 801587e:	e7f2      	b.n	8015866 <_printf_float+0x192>
 8015880:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8015884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015886:	4299      	cmp	r1, r3
 8015888:	db05      	blt.n	8015896 <_printf_float+0x1c2>
 801588a:	6823      	ldr	r3, [r4, #0]
 801588c:	6121      	str	r1, [r4, #16]
 801588e:	07d8      	lsls	r0, r3, #31
 8015890:	d5ea      	bpl.n	8015868 <_printf_float+0x194>
 8015892:	1c4b      	adds	r3, r1, #1
 8015894:	e7e7      	b.n	8015866 <_printf_float+0x192>
 8015896:	2900      	cmp	r1, #0
 8015898:	bfd4      	ite	le
 801589a:	f1c1 0202 	rsble	r2, r1, #2
 801589e:	2201      	movgt	r2, #1
 80158a0:	4413      	add	r3, r2
 80158a2:	e7e0      	b.n	8015866 <_printf_float+0x192>
 80158a4:	6823      	ldr	r3, [r4, #0]
 80158a6:	055a      	lsls	r2, r3, #21
 80158a8:	d407      	bmi.n	80158ba <_printf_float+0x1e6>
 80158aa:	6923      	ldr	r3, [r4, #16]
 80158ac:	4642      	mov	r2, r8
 80158ae:	4631      	mov	r1, r6
 80158b0:	4628      	mov	r0, r5
 80158b2:	47b8      	blx	r7
 80158b4:	3001      	adds	r0, #1
 80158b6:	d12b      	bne.n	8015910 <_printf_float+0x23c>
 80158b8:	e767      	b.n	801578a <_printf_float+0xb6>
 80158ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80158be:	f240 80dd 	bls.w	8015a7c <_printf_float+0x3a8>
 80158c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80158c6:	2200      	movs	r2, #0
 80158c8:	2300      	movs	r3, #0
 80158ca:	f7eb f90d 	bl	8000ae8 <__aeabi_dcmpeq>
 80158ce:	2800      	cmp	r0, #0
 80158d0:	d033      	beq.n	801593a <_printf_float+0x266>
 80158d2:	4a37      	ldr	r2, [pc, #220]	@ (80159b0 <_printf_float+0x2dc>)
 80158d4:	2301      	movs	r3, #1
 80158d6:	4631      	mov	r1, r6
 80158d8:	4628      	mov	r0, r5
 80158da:	47b8      	blx	r7
 80158dc:	3001      	adds	r0, #1
 80158de:	f43f af54 	beq.w	801578a <_printf_float+0xb6>
 80158e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80158e6:	4543      	cmp	r3, r8
 80158e8:	db02      	blt.n	80158f0 <_printf_float+0x21c>
 80158ea:	6823      	ldr	r3, [r4, #0]
 80158ec:	07d8      	lsls	r0, r3, #31
 80158ee:	d50f      	bpl.n	8015910 <_printf_float+0x23c>
 80158f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80158f4:	4631      	mov	r1, r6
 80158f6:	4628      	mov	r0, r5
 80158f8:	47b8      	blx	r7
 80158fa:	3001      	adds	r0, #1
 80158fc:	f43f af45 	beq.w	801578a <_printf_float+0xb6>
 8015900:	f04f 0900 	mov.w	r9, #0
 8015904:	f108 38ff 	add.w	r8, r8, #4294967295
 8015908:	f104 0a1a 	add.w	sl, r4, #26
 801590c:	45c8      	cmp	r8, r9
 801590e:	dc09      	bgt.n	8015924 <_printf_float+0x250>
 8015910:	6823      	ldr	r3, [r4, #0]
 8015912:	079b      	lsls	r3, r3, #30
 8015914:	f100 8103 	bmi.w	8015b1e <_printf_float+0x44a>
 8015918:	68e0      	ldr	r0, [r4, #12]
 801591a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801591c:	4298      	cmp	r0, r3
 801591e:	bfb8      	it	lt
 8015920:	4618      	movlt	r0, r3
 8015922:	e734      	b.n	801578e <_printf_float+0xba>
 8015924:	2301      	movs	r3, #1
 8015926:	4652      	mov	r2, sl
 8015928:	4631      	mov	r1, r6
 801592a:	4628      	mov	r0, r5
 801592c:	47b8      	blx	r7
 801592e:	3001      	adds	r0, #1
 8015930:	f43f af2b 	beq.w	801578a <_printf_float+0xb6>
 8015934:	f109 0901 	add.w	r9, r9, #1
 8015938:	e7e8      	b.n	801590c <_printf_float+0x238>
 801593a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801593c:	2b00      	cmp	r3, #0
 801593e:	dc39      	bgt.n	80159b4 <_printf_float+0x2e0>
 8015940:	4a1b      	ldr	r2, [pc, #108]	@ (80159b0 <_printf_float+0x2dc>)
 8015942:	2301      	movs	r3, #1
 8015944:	4631      	mov	r1, r6
 8015946:	4628      	mov	r0, r5
 8015948:	47b8      	blx	r7
 801594a:	3001      	adds	r0, #1
 801594c:	f43f af1d 	beq.w	801578a <_printf_float+0xb6>
 8015950:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015954:	ea59 0303 	orrs.w	r3, r9, r3
 8015958:	d102      	bne.n	8015960 <_printf_float+0x28c>
 801595a:	6823      	ldr	r3, [r4, #0]
 801595c:	07d9      	lsls	r1, r3, #31
 801595e:	d5d7      	bpl.n	8015910 <_printf_float+0x23c>
 8015960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015964:	4631      	mov	r1, r6
 8015966:	4628      	mov	r0, r5
 8015968:	47b8      	blx	r7
 801596a:	3001      	adds	r0, #1
 801596c:	f43f af0d 	beq.w	801578a <_printf_float+0xb6>
 8015970:	f04f 0a00 	mov.w	sl, #0
 8015974:	f104 0b1a 	add.w	fp, r4, #26
 8015978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801597a:	425b      	negs	r3, r3
 801597c:	4553      	cmp	r3, sl
 801597e:	dc01      	bgt.n	8015984 <_printf_float+0x2b0>
 8015980:	464b      	mov	r3, r9
 8015982:	e793      	b.n	80158ac <_printf_float+0x1d8>
 8015984:	2301      	movs	r3, #1
 8015986:	465a      	mov	r2, fp
 8015988:	4631      	mov	r1, r6
 801598a:	4628      	mov	r0, r5
 801598c:	47b8      	blx	r7
 801598e:	3001      	adds	r0, #1
 8015990:	f43f aefb 	beq.w	801578a <_printf_float+0xb6>
 8015994:	f10a 0a01 	add.w	sl, sl, #1
 8015998:	e7ee      	b.n	8015978 <_printf_float+0x2a4>
 801599a:	bf00      	nop
 801599c:	7fefffff 	.word	0x7fefffff
 80159a0:	0801a967 	.word	0x0801a967
 80159a4:	0801a96b 	.word	0x0801a96b
 80159a8:	0801a96f 	.word	0x0801a96f
 80159ac:	0801a973 	.word	0x0801a973
 80159b0:	0801a977 	.word	0x0801a977
 80159b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80159b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80159ba:	4553      	cmp	r3, sl
 80159bc:	bfa8      	it	ge
 80159be:	4653      	movge	r3, sl
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	4699      	mov	r9, r3
 80159c4:	dc36      	bgt.n	8015a34 <_printf_float+0x360>
 80159c6:	f04f 0b00 	mov.w	fp, #0
 80159ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80159ce:	f104 021a 	add.w	r2, r4, #26
 80159d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80159d4:	9306      	str	r3, [sp, #24]
 80159d6:	eba3 0309 	sub.w	r3, r3, r9
 80159da:	455b      	cmp	r3, fp
 80159dc:	dc31      	bgt.n	8015a42 <_printf_float+0x36e>
 80159de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159e0:	459a      	cmp	sl, r3
 80159e2:	dc3a      	bgt.n	8015a5a <_printf_float+0x386>
 80159e4:	6823      	ldr	r3, [r4, #0]
 80159e6:	07da      	lsls	r2, r3, #31
 80159e8:	d437      	bmi.n	8015a5a <_printf_float+0x386>
 80159ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159ec:	ebaa 0903 	sub.w	r9, sl, r3
 80159f0:	9b06      	ldr	r3, [sp, #24]
 80159f2:	ebaa 0303 	sub.w	r3, sl, r3
 80159f6:	4599      	cmp	r9, r3
 80159f8:	bfa8      	it	ge
 80159fa:	4699      	movge	r9, r3
 80159fc:	f1b9 0f00 	cmp.w	r9, #0
 8015a00:	dc33      	bgt.n	8015a6a <_printf_float+0x396>
 8015a02:	f04f 0800 	mov.w	r8, #0
 8015a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015a0a:	f104 0b1a 	add.w	fp, r4, #26
 8015a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a10:	ebaa 0303 	sub.w	r3, sl, r3
 8015a14:	eba3 0309 	sub.w	r3, r3, r9
 8015a18:	4543      	cmp	r3, r8
 8015a1a:	f77f af79 	ble.w	8015910 <_printf_float+0x23c>
 8015a1e:	2301      	movs	r3, #1
 8015a20:	465a      	mov	r2, fp
 8015a22:	4631      	mov	r1, r6
 8015a24:	4628      	mov	r0, r5
 8015a26:	47b8      	blx	r7
 8015a28:	3001      	adds	r0, #1
 8015a2a:	f43f aeae 	beq.w	801578a <_printf_float+0xb6>
 8015a2e:	f108 0801 	add.w	r8, r8, #1
 8015a32:	e7ec      	b.n	8015a0e <_printf_float+0x33a>
 8015a34:	4642      	mov	r2, r8
 8015a36:	4631      	mov	r1, r6
 8015a38:	4628      	mov	r0, r5
 8015a3a:	47b8      	blx	r7
 8015a3c:	3001      	adds	r0, #1
 8015a3e:	d1c2      	bne.n	80159c6 <_printf_float+0x2f2>
 8015a40:	e6a3      	b.n	801578a <_printf_float+0xb6>
 8015a42:	2301      	movs	r3, #1
 8015a44:	4631      	mov	r1, r6
 8015a46:	4628      	mov	r0, r5
 8015a48:	9206      	str	r2, [sp, #24]
 8015a4a:	47b8      	blx	r7
 8015a4c:	3001      	adds	r0, #1
 8015a4e:	f43f ae9c 	beq.w	801578a <_printf_float+0xb6>
 8015a52:	9a06      	ldr	r2, [sp, #24]
 8015a54:	f10b 0b01 	add.w	fp, fp, #1
 8015a58:	e7bb      	b.n	80159d2 <_printf_float+0x2fe>
 8015a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a5e:	4631      	mov	r1, r6
 8015a60:	4628      	mov	r0, r5
 8015a62:	47b8      	blx	r7
 8015a64:	3001      	adds	r0, #1
 8015a66:	d1c0      	bne.n	80159ea <_printf_float+0x316>
 8015a68:	e68f      	b.n	801578a <_printf_float+0xb6>
 8015a6a:	9a06      	ldr	r2, [sp, #24]
 8015a6c:	464b      	mov	r3, r9
 8015a6e:	4442      	add	r2, r8
 8015a70:	4631      	mov	r1, r6
 8015a72:	4628      	mov	r0, r5
 8015a74:	47b8      	blx	r7
 8015a76:	3001      	adds	r0, #1
 8015a78:	d1c3      	bne.n	8015a02 <_printf_float+0x32e>
 8015a7a:	e686      	b.n	801578a <_printf_float+0xb6>
 8015a7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015a80:	f1ba 0f01 	cmp.w	sl, #1
 8015a84:	dc01      	bgt.n	8015a8a <_printf_float+0x3b6>
 8015a86:	07db      	lsls	r3, r3, #31
 8015a88:	d536      	bpl.n	8015af8 <_printf_float+0x424>
 8015a8a:	2301      	movs	r3, #1
 8015a8c:	4642      	mov	r2, r8
 8015a8e:	4631      	mov	r1, r6
 8015a90:	4628      	mov	r0, r5
 8015a92:	47b8      	blx	r7
 8015a94:	3001      	adds	r0, #1
 8015a96:	f43f ae78 	beq.w	801578a <_printf_float+0xb6>
 8015a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a9e:	4631      	mov	r1, r6
 8015aa0:	4628      	mov	r0, r5
 8015aa2:	47b8      	blx	r7
 8015aa4:	3001      	adds	r0, #1
 8015aa6:	f43f ae70 	beq.w	801578a <_printf_float+0xb6>
 8015aaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8015aae:	2200      	movs	r2, #0
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015ab6:	f7eb f817 	bl	8000ae8 <__aeabi_dcmpeq>
 8015aba:	b9c0      	cbnz	r0, 8015aee <_printf_float+0x41a>
 8015abc:	4653      	mov	r3, sl
 8015abe:	f108 0201 	add.w	r2, r8, #1
 8015ac2:	4631      	mov	r1, r6
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	47b8      	blx	r7
 8015ac8:	3001      	adds	r0, #1
 8015aca:	d10c      	bne.n	8015ae6 <_printf_float+0x412>
 8015acc:	e65d      	b.n	801578a <_printf_float+0xb6>
 8015ace:	2301      	movs	r3, #1
 8015ad0:	465a      	mov	r2, fp
 8015ad2:	4631      	mov	r1, r6
 8015ad4:	4628      	mov	r0, r5
 8015ad6:	47b8      	blx	r7
 8015ad8:	3001      	adds	r0, #1
 8015ada:	f43f ae56 	beq.w	801578a <_printf_float+0xb6>
 8015ade:	f108 0801 	add.w	r8, r8, #1
 8015ae2:	45d0      	cmp	r8, sl
 8015ae4:	dbf3      	blt.n	8015ace <_printf_float+0x3fa>
 8015ae6:	464b      	mov	r3, r9
 8015ae8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015aec:	e6df      	b.n	80158ae <_printf_float+0x1da>
 8015aee:	f04f 0800 	mov.w	r8, #0
 8015af2:	f104 0b1a 	add.w	fp, r4, #26
 8015af6:	e7f4      	b.n	8015ae2 <_printf_float+0x40e>
 8015af8:	2301      	movs	r3, #1
 8015afa:	4642      	mov	r2, r8
 8015afc:	e7e1      	b.n	8015ac2 <_printf_float+0x3ee>
 8015afe:	2301      	movs	r3, #1
 8015b00:	464a      	mov	r2, r9
 8015b02:	4631      	mov	r1, r6
 8015b04:	4628      	mov	r0, r5
 8015b06:	47b8      	blx	r7
 8015b08:	3001      	adds	r0, #1
 8015b0a:	f43f ae3e 	beq.w	801578a <_printf_float+0xb6>
 8015b0e:	f108 0801 	add.w	r8, r8, #1
 8015b12:	68e3      	ldr	r3, [r4, #12]
 8015b14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015b16:	1a5b      	subs	r3, r3, r1
 8015b18:	4543      	cmp	r3, r8
 8015b1a:	dcf0      	bgt.n	8015afe <_printf_float+0x42a>
 8015b1c:	e6fc      	b.n	8015918 <_printf_float+0x244>
 8015b1e:	f04f 0800 	mov.w	r8, #0
 8015b22:	f104 0919 	add.w	r9, r4, #25
 8015b26:	e7f4      	b.n	8015b12 <_printf_float+0x43e>

08015b28 <_printf_common>:
 8015b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b2c:	4616      	mov	r6, r2
 8015b2e:	4698      	mov	r8, r3
 8015b30:	688a      	ldr	r2, [r1, #8]
 8015b32:	690b      	ldr	r3, [r1, #16]
 8015b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015b38:	4293      	cmp	r3, r2
 8015b3a:	bfb8      	it	lt
 8015b3c:	4613      	movlt	r3, r2
 8015b3e:	6033      	str	r3, [r6, #0]
 8015b40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015b44:	4607      	mov	r7, r0
 8015b46:	460c      	mov	r4, r1
 8015b48:	b10a      	cbz	r2, 8015b4e <_printf_common+0x26>
 8015b4a:	3301      	adds	r3, #1
 8015b4c:	6033      	str	r3, [r6, #0]
 8015b4e:	6823      	ldr	r3, [r4, #0]
 8015b50:	0699      	lsls	r1, r3, #26
 8015b52:	bf42      	ittt	mi
 8015b54:	6833      	ldrmi	r3, [r6, #0]
 8015b56:	3302      	addmi	r3, #2
 8015b58:	6033      	strmi	r3, [r6, #0]
 8015b5a:	6825      	ldr	r5, [r4, #0]
 8015b5c:	f015 0506 	ands.w	r5, r5, #6
 8015b60:	d106      	bne.n	8015b70 <_printf_common+0x48>
 8015b62:	f104 0a19 	add.w	sl, r4, #25
 8015b66:	68e3      	ldr	r3, [r4, #12]
 8015b68:	6832      	ldr	r2, [r6, #0]
 8015b6a:	1a9b      	subs	r3, r3, r2
 8015b6c:	42ab      	cmp	r3, r5
 8015b6e:	dc26      	bgt.n	8015bbe <_printf_common+0x96>
 8015b70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015b74:	6822      	ldr	r2, [r4, #0]
 8015b76:	3b00      	subs	r3, #0
 8015b78:	bf18      	it	ne
 8015b7a:	2301      	movne	r3, #1
 8015b7c:	0692      	lsls	r2, r2, #26
 8015b7e:	d42b      	bmi.n	8015bd8 <_printf_common+0xb0>
 8015b80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015b84:	4641      	mov	r1, r8
 8015b86:	4638      	mov	r0, r7
 8015b88:	47c8      	blx	r9
 8015b8a:	3001      	adds	r0, #1
 8015b8c:	d01e      	beq.n	8015bcc <_printf_common+0xa4>
 8015b8e:	6823      	ldr	r3, [r4, #0]
 8015b90:	6922      	ldr	r2, [r4, #16]
 8015b92:	f003 0306 	and.w	r3, r3, #6
 8015b96:	2b04      	cmp	r3, #4
 8015b98:	bf02      	ittt	eq
 8015b9a:	68e5      	ldreq	r5, [r4, #12]
 8015b9c:	6833      	ldreq	r3, [r6, #0]
 8015b9e:	1aed      	subeq	r5, r5, r3
 8015ba0:	68a3      	ldr	r3, [r4, #8]
 8015ba2:	bf0c      	ite	eq
 8015ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ba8:	2500      	movne	r5, #0
 8015baa:	4293      	cmp	r3, r2
 8015bac:	bfc4      	itt	gt
 8015bae:	1a9b      	subgt	r3, r3, r2
 8015bb0:	18ed      	addgt	r5, r5, r3
 8015bb2:	2600      	movs	r6, #0
 8015bb4:	341a      	adds	r4, #26
 8015bb6:	42b5      	cmp	r5, r6
 8015bb8:	d11a      	bne.n	8015bf0 <_printf_common+0xc8>
 8015bba:	2000      	movs	r0, #0
 8015bbc:	e008      	b.n	8015bd0 <_printf_common+0xa8>
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	4652      	mov	r2, sl
 8015bc2:	4641      	mov	r1, r8
 8015bc4:	4638      	mov	r0, r7
 8015bc6:	47c8      	blx	r9
 8015bc8:	3001      	adds	r0, #1
 8015bca:	d103      	bne.n	8015bd4 <_printf_common+0xac>
 8015bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8015bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bd4:	3501      	adds	r5, #1
 8015bd6:	e7c6      	b.n	8015b66 <_printf_common+0x3e>
 8015bd8:	18e1      	adds	r1, r4, r3
 8015bda:	1c5a      	adds	r2, r3, #1
 8015bdc:	2030      	movs	r0, #48	@ 0x30
 8015bde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015be2:	4422      	add	r2, r4
 8015be4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015be8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015bec:	3302      	adds	r3, #2
 8015bee:	e7c7      	b.n	8015b80 <_printf_common+0x58>
 8015bf0:	2301      	movs	r3, #1
 8015bf2:	4622      	mov	r2, r4
 8015bf4:	4641      	mov	r1, r8
 8015bf6:	4638      	mov	r0, r7
 8015bf8:	47c8      	blx	r9
 8015bfa:	3001      	adds	r0, #1
 8015bfc:	d0e6      	beq.n	8015bcc <_printf_common+0xa4>
 8015bfe:	3601      	adds	r6, #1
 8015c00:	e7d9      	b.n	8015bb6 <_printf_common+0x8e>
	...

08015c04 <_printf_i>:
 8015c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c08:	7e0f      	ldrb	r7, [r1, #24]
 8015c0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015c0c:	2f78      	cmp	r7, #120	@ 0x78
 8015c0e:	4691      	mov	r9, r2
 8015c10:	4680      	mov	r8, r0
 8015c12:	460c      	mov	r4, r1
 8015c14:	469a      	mov	sl, r3
 8015c16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015c1a:	d807      	bhi.n	8015c2c <_printf_i+0x28>
 8015c1c:	2f62      	cmp	r7, #98	@ 0x62
 8015c1e:	d80a      	bhi.n	8015c36 <_printf_i+0x32>
 8015c20:	2f00      	cmp	r7, #0
 8015c22:	f000 80d2 	beq.w	8015dca <_printf_i+0x1c6>
 8015c26:	2f58      	cmp	r7, #88	@ 0x58
 8015c28:	f000 80b9 	beq.w	8015d9e <_printf_i+0x19a>
 8015c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015c30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015c34:	e03a      	b.n	8015cac <_printf_i+0xa8>
 8015c36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015c3a:	2b15      	cmp	r3, #21
 8015c3c:	d8f6      	bhi.n	8015c2c <_printf_i+0x28>
 8015c3e:	a101      	add	r1, pc, #4	@ (adr r1, 8015c44 <_printf_i+0x40>)
 8015c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015c44:	08015c9d 	.word	0x08015c9d
 8015c48:	08015cb1 	.word	0x08015cb1
 8015c4c:	08015c2d 	.word	0x08015c2d
 8015c50:	08015c2d 	.word	0x08015c2d
 8015c54:	08015c2d 	.word	0x08015c2d
 8015c58:	08015c2d 	.word	0x08015c2d
 8015c5c:	08015cb1 	.word	0x08015cb1
 8015c60:	08015c2d 	.word	0x08015c2d
 8015c64:	08015c2d 	.word	0x08015c2d
 8015c68:	08015c2d 	.word	0x08015c2d
 8015c6c:	08015c2d 	.word	0x08015c2d
 8015c70:	08015db1 	.word	0x08015db1
 8015c74:	08015cdb 	.word	0x08015cdb
 8015c78:	08015d6b 	.word	0x08015d6b
 8015c7c:	08015c2d 	.word	0x08015c2d
 8015c80:	08015c2d 	.word	0x08015c2d
 8015c84:	08015dd3 	.word	0x08015dd3
 8015c88:	08015c2d 	.word	0x08015c2d
 8015c8c:	08015cdb 	.word	0x08015cdb
 8015c90:	08015c2d 	.word	0x08015c2d
 8015c94:	08015c2d 	.word	0x08015c2d
 8015c98:	08015d73 	.word	0x08015d73
 8015c9c:	6833      	ldr	r3, [r6, #0]
 8015c9e:	1d1a      	adds	r2, r3, #4
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	6032      	str	r2, [r6, #0]
 8015ca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015ca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015cac:	2301      	movs	r3, #1
 8015cae:	e09d      	b.n	8015dec <_printf_i+0x1e8>
 8015cb0:	6833      	ldr	r3, [r6, #0]
 8015cb2:	6820      	ldr	r0, [r4, #0]
 8015cb4:	1d19      	adds	r1, r3, #4
 8015cb6:	6031      	str	r1, [r6, #0]
 8015cb8:	0606      	lsls	r6, r0, #24
 8015cba:	d501      	bpl.n	8015cc0 <_printf_i+0xbc>
 8015cbc:	681d      	ldr	r5, [r3, #0]
 8015cbe:	e003      	b.n	8015cc8 <_printf_i+0xc4>
 8015cc0:	0645      	lsls	r5, r0, #25
 8015cc2:	d5fb      	bpl.n	8015cbc <_printf_i+0xb8>
 8015cc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015cc8:	2d00      	cmp	r5, #0
 8015cca:	da03      	bge.n	8015cd4 <_printf_i+0xd0>
 8015ccc:	232d      	movs	r3, #45	@ 0x2d
 8015cce:	426d      	negs	r5, r5
 8015cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015cd4:	4859      	ldr	r0, [pc, #356]	@ (8015e3c <_printf_i+0x238>)
 8015cd6:	230a      	movs	r3, #10
 8015cd8:	e011      	b.n	8015cfe <_printf_i+0xfa>
 8015cda:	6821      	ldr	r1, [r4, #0]
 8015cdc:	6833      	ldr	r3, [r6, #0]
 8015cde:	0608      	lsls	r0, r1, #24
 8015ce0:	f853 5b04 	ldr.w	r5, [r3], #4
 8015ce4:	d402      	bmi.n	8015cec <_printf_i+0xe8>
 8015ce6:	0649      	lsls	r1, r1, #25
 8015ce8:	bf48      	it	mi
 8015cea:	b2ad      	uxthmi	r5, r5
 8015cec:	2f6f      	cmp	r7, #111	@ 0x6f
 8015cee:	4853      	ldr	r0, [pc, #332]	@ (8015e3c <_printf_i+0x238>)
 8015cf0:	6033      	str	r3, [r6, #0]
 8015cf2:	bf14      	ite	ne
 8015cf4:	230a      	movne	r3, #10
 8015cf6:	2308      	moveq	r3, #8
 8015cf8:	2100      	movs	r1, #0
 8015cfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015cfe:	6866      	ldr	r6, [r4, #4]
 8015d00:	60a6      	str	r6, [r4, #8]
 8015d02:	2e00      	cmp	r6, #0
 8015d04:	bfa2      	ittt	ge
 8015d06:	6821      	ldrge	r1, [r4, #0]
 8015d08:	f021 0104 	bicge.w	r1, r1, #4
 8015d0c:	6021      	strge	r1, [r4, #0]
 8015d0e:	b90d      	cbnz	r5, 8015d14 <_printf_i+0x110>
 8015d10:	2e00      	cmp	r6, #0
 8015d12:	d04b      	beq.n	8015dac <_printf_i+0x1a8>
 8015d14:	4616      	mov	r6, r2
 8015d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8015d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8015d1e:	5dc7      	ldrb	r7, [r0, r7]
 8015d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d24:	462f      	mov	r7, r5
 8015d26:	42bb      	cmp	r3, r7
 8015d28:	460d      	mov	r5, r1
 8015d2a:	d9f4      	bls.n	8015d16 <_printf_i+0x112>
 8015d2c:	2b08      	cmp	r3, #8
 8015d2e:	d10b      	bne.n	8015d48 <_printf_i+0x144>
 8015d30:	6823      	ldr	r3, [r4, #0]
 8015d32:	07df      	lsls	r7, r3, #31
 8015d34:	d508      	bpl.n	8015d48 <_printf_i+0x144>
 8015d36:	6923      	ldr	r3, [r4, #16]
 8015d38:	6861      	ldr	r1, [r4, #4]
 8015d3a:	4299      	cmp	r1, r3
 8015d3c:	bfde      	ittt	le
 8015d3e:	2330      	movle	r3, #48	@ 0x30
 8015d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015d44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015d48:	1b92      	subs	r2, r2, r6
 8015d4a:	6122      	str	r2, [r4, #16]
 8015d4c:	f8cd a000 	str.w	sl, [sp]
 8015d50:	464b      	mov	r3, r9
 8015d52:	aa03      	add	r2, sp, #12
 8015d54:	4621      	mov	r1, r4
 8015d56:	4640      	mov	r0, r8
 8015d58:	f7ff fee6 	bl	8015b28 <_printf_common>
 8015d5c:	3001      	adds	r0, #1
 8015d5e:	d14a      	bne.n	8015df6 <_printf_i+0x1f2>
 8015d60:	f04f 30ff 	mov.w	r0, #4294967295
 8015d64:	b004      	add	sp, #16
 8015d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d6a:	6823      	ldr	r3, [r4, #0]
 8015d6c:	f043 0320 	orr.w	r3, r3, #32
 8015d70:	6023      	str	r3, [r4, #0]
 8015d72:	4833      	ldr	r0, [pc, #204]	@ (8015e40 <_printf_i+0x23c>)
 8015d74:	2778      	movs	r7, #120	@ 0x78
 8015d76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015d7a:	6823      	ldr	r3, [r4, #0]
 8015d7c:	6831      	ldr	r1, [r6, #0]
 8015d7e:	061f      	lsls	r7, r3, #24
 8015d80:	f851 5b04 	ldr.w	r5, [r1], #4
 8015d84:	d402      	bmi.n	8015d8c <_printf_i+0x188>
 8015d86:	065f      	lsls	r7, r3, #25
 8015d88:	bf48      	it	mi
 8015d8a:	b2ad      	uxthmi	r5, r5
 8015d8c:	6031      	str	r1, [r6, #0]
 8015d8e:	07d9      	lsls	r1, r3, #31
 8015d90:	bf44      	itt	mi
 8015d92:	f043 0320 	orrmi.w	r3, r3, #32
 8015d96:	6023      	strmi	r3, [r4, #0]
 8015d98:	b11d      	cbz	r5, 8015da2 <_printf_i+0x19e>
 8015d9a:	2310      	movs	r3, #16
 8015d9c:	e7ac      	b.n	8015cf8 <_printf_i+0xf4>
 8015d9e:	4827      	ldr	r0, [pc, #156]	@ (8015e3c <_printf_i+0x238>)
 8015da0:	e7e9      	b.n	8015d76 <_printf_i+0x172>
 8015da2:	6823      	ldr	r3, [r4, #0]
 8015da4:	f023 0320 	bic.w	r3, r3, #32
 8015da8:	6023      	str	r3, [r4, #0]
 8015daa:	e7f6      	b.n	8015d9a <_printf_i+0x196>
 8015dac:	4616      	mov	r6, r2
 8015dae:	e7bd      	b.n	8015d2c <_printf_i+0x128>
 8015db0:	6833      	ldr	r3, [r6, #0]
 8015db2:	6825      	ldr	r5, [r4, #0]
 8015db4:	6961      	ldr	r1, [r4, #20]
 8015db6:	1d18      	adds	r0, r3, #4
 8015db8:	6030      	str	r0, [r6, #0]
 8015dba:	062e      	lsls	r6, r5, #24
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	d501      	bpl.n	8015dc4 <_printf_i+0x1c0>
 8015dc0:	6019      	str	r1, [r3, #0]
 8015dc2:	e002      	b.n	8015dca <_printf_i+0x1c6>
 8015dc4:	0668      	lsls	r0, r5, #25
 8015dc6:	d5fb      	bpl.n	8015dc0 <_printf_i+0x1bc>
 8015dc8:	8019      	strh	r1, [r3, #0]
 8015dca:	2300      	movs	r3, #0
 8015dcc:	6123      	str	r3, [r4, #16]
 8015dce:	4616      	mov	r6, r2
 8015dd0:	e7bc      	b.n	8015d4c <_printf_i+0x148>
 8015dd2:	6833      	ldr	r3, [r6, #0]
 8015dd4:	1d1a      	adds	r2, r3, #4
 8015dd6:	6032      	str	r2, [r6, #0]
 8015dd8:	681e      	ldr	r6, [r3, #0]
 8015dda:	6862      	ldr	r2, [r4, #4]
 8015ddc:	2100      	movs	r1, #0
 8015dde:	4630      	mov	r0, r6
 8015de0:	f7ea fa06 	bl	80001f0 <memchr>
 8015de4:	b108      	cbz	r0, 8015dea <_printf_i+0x1e6>
 8015de6:	1b80      	subs	r0, r0, r6
 8015de8:	6060      	str	r0, [r4, #4]
 8015dea:	6863      	ldr	r3, [r4, #4]
 8015dec:	6123      	str	r3, [r4, #16]
 8015dee:	2300      	movs	r3, #0
 8015df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015df4:	e7aa      	b.n	8015d4c <_printf_i+0x148>
 8015df6:	6923      	ldr	r3, [r4, #16]
 8015df8:	4632      	mov	r2, r6
 8015dfa:	4649      	mov	r1, r9
 8015dfc:	4640      	mov	r0, r8
 8015dfe:	47d0      	blx	sl
 8015e00:	3001      	adds	r0, #1
 8015e02:	d0ad      	beq.n	8015d60 <_printf_i+0x15c>
 8015e04:	6823      	ldr	r3, [r4, #0]
 8015e06:	079b      	lsls	r3, r3, #30
 8015e08:	d413      	bmi.n	8015e32 <_printf_i+0x22e>
 8015e0a:	68e0      	ldr	r0, [r4, #12]
 8015e0c:	9b03      	ldr	r3, [sp, #12]
 8015e0e:	4298      	cmp	r0, r3
 8015e10:	bfb8      	it	lt
 8015e12:	4618      	movlt	r0, r3
 8015e14:	e7a6      	b.n	8015d64 <_printf_i+0x160>
 8015e16:	2301      	movs	r3, #1
 8015e18:	4632      	mov	r2, r6
 8015e1a:	4649      	mov	r1, r9
 8015e1c:	4640      	mov	r0, r8
 8015e1e:	47d0      	blx	sl
 8015e20:	3001      	adds	r0, #1
 8015e22:	d09d      	beq.n	8015d60 <_printf_i+0x15c>
 8015e24:	3501      	adds	r5, #1
 8015e26:	68e3      	ldr	r3, [r4, #12]
 8015e28:	9903      	ldr	r1, [sp, #12]
 8015e2a:	1a5b      	subs	r3, r3, r1
 8015e2c:	42ab      	cmp	r3, r5
 8015e2e:	dcf2      	bgt.n	8015e16 <_printf_i+0x212>
 8015e30:	e7eb      	b.n	8015e0a <_printf_i+0x206>
 8015e32:	2500      	movs	r5, #0
 8015e34:	f104 0619 	add.w	r6, r4, #25
 8015e38:	e7f5      	b.n	8015e26 <_printf_i+0x222>
 8015e3a:	bf00      	nop
 8015e3c:	0801a979 	.word	0x0801a979
 8015e40:	0801a98a 	.word	0x0801a98a

08015e44 <std>:
 8015e44:	2300      	movs	r3, #0
 8015e46:	b510      	push	{r4, lr}
 8015e48:	4604      	mov	r4, r0
 8015e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8015e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e52:	6083      	str	r3, [r0, #8]
 8015e54:	8181      	strh	r1, [r0, #12]
 8015e56:	6643      	str	r3, [r0, #100]	@ 0x64
 8015e58:	81c2      	strh	r2, [r0, #14]
 8015e5a:	6183      	str	r3, [r0, #24]
 8015e5c:	4619      	mov	r1, r3
 8015e5e:	2208      	movs	r2, #8
 8015e60:	305c      	adds	r0, #92	@ 0x5c
 8015e62:	f000 f942 	bl	80160ea <memset>
 8015e66:	4b0d      	ldr	r3, [pc, #52]	@ (8015e9c <std+0x58>)
 8015e68:	6263      	str	r3, [r4, #36]	@ 0x24
 8015e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8015ea0 <std+0x5c>)
 8015e6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8015ea4 <std+0x60>)
 8015e70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015e72:	4b0d      	ldr	r3, [pc, #52]	@ (8015ea8 <std+0x64>)
 8015e74:	6323      	str	r3, [r4, #48]	@ 0x30
 8015e76:	4b0d      	ldr	r3, [pc, #52]	@ (8015eac <std+0x68>)
 8015e78:	6224      	str	r4, [r4, #32]
 8015e7a:	429c      	cmp	r4, r3
 8015e7c:	d006      	beq.n	8015e8c <std+0x48>
 8015e7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015e82:	4294      	cmp	r4, r2
 8015e84:	d002      	beq.n	8015e8c <std+0x48>
 8015e86:	33d0      	adds	r3, #208	@ 0xd0
 8015e88:	429c      	cmp	r4, r3
 8015e8a:	d105      	bne.n	8015e98 <std+0x54>
 8015e8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e94:	f000 b9d8 	b.w	8016248 <__retarget_lock_init_recursive>
 8015e98:	bd10      	pop	{r4, pc}
 8015e9a:	bf00      	nop
 8015e9c:	08016031 	.word	0x08016031
 8015ea0:	08016053 	.word	0x08016053
 8015ea4:	0801608b 	.word	0x0801608b
 8015ea8:	080160af 	.word	0x080160af
 8015eac:	2000274c 	.word	0x2000274c

08015eb0 <stdio_exit_handler>:
 8015eb0:	4a02      	ldr	r2, [pc, #8]	@ (8015ebc <stdio_exit_handler+0xc>)
 8015eb2:	4903      	ldr	r1, [pc, #12]	@ (8015ec0 <stdio_exit_handler+0x10>)
 8015eb4:	4803      	ldr	r0, [pc, #12]	@ (8015ec4 <stdio_exit_handler+0x14>)
 8015eb6:	f000 b869 	b.w	8015f8c <_fwalk_sglue>
 8015eba:	bf00      	nop
 8015ebc:	200000e0 	.word	0x200000e0
 8015ec0:	08017aa1 	.word	0x08017aa1
 8015ec4:	200000f0 	.word	0x200000f0

08015ec8 <cleanup_stdio>:
 8015ec8:	6841      	ldr	r1, [r0, #4]
 8015eca:	4b0c      	ldr	r3, [pc, #48]	@ (8015efc <cleanup_stdio+0x34>)
 8015ecc:	4299      	cmp	r1, r3
 8015ece:	b510      	push	{r4, lr}
 8015ed0:	4604      	mov	r4, r0
 8015ed2:	d001      	beq.n	8015ed8 <cleanup_stdio+0x10>
 8015ed4:	f001 fde4 	bl	8017aa0 <_fflush_r>
 8015ed8:	68a1      	ldr	r1, [r4, #8]
 8015eda:	4b09      	ldr	r3, [pc, #36]	@ (8015f00 <cleanup_stdio+0x38>)
 8015edc:	4299      	cmp	r1, r3
 8015ede:	d002      	beq.n	8015ee6 <cleanup_stdio+0x1e>
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	f001 fddd 	bl	8017aa0 <_fflush_r>
 8015ee6:	68e1      	ldr	r1, [r4, #12]
 8015ee8:	4b06      	ldr	r3, [pc, #24]	@ (8015f04 <cleanup_stdio+0x3c>)
 8015eea:	4299      	cmp	r1, r3
 8015eec:	d004      	beq.n	8015ef8 <cleanup_stdio+0x30>
 8015eee:	4620      	mov	r0, r4
 8015ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ef4:	f001 bdd4 	b.w	8017aa0 <_fflush_r>
 8015ef8:	bd10      	pop	{r4, pc}
 8015efa:	bf00      	nop
 8015efc:	2000274c 	.word	0x2000274c
 8015f00:	200027b4 	.word	0x200027b4
 8015f04:	2000281c 	.word	0x2000281c

08015f08 <global_stdio_init.part.0>:
 8015f08:	b510      	push	{r4, lr}
 8015f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8015f38 <global_stdio_init.part.0+0x30>)
 8015f0c:	4c0b      	ldr	r4, [pc, #44]	@ (8015f3c <global_stdio_init.part.0+0x34>)
 8015f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8015f40 <global_stdio_init.part.0+0x38>)
 8015f10:	601a      	str	r2, [r3, #0]
 8015f12:	4620      	mov	r0, r4
 8015f14:	2200      	movs	r2, #0
 8015f16:	2104      	movs	r1, #4
 8015f18:	f7ff ff94 	bl	8015e44 <std>
 8015f1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015f20:	2201      	movs	r2, #1
 8015f22:	2109      	movs	r1, #9
 8015f24:	f7ff ff8e 	bl	8015e44 <std>
 8015f28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015f2c:	2202      	movs	r2, #2
 8015f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f32:	2112      	movs	r1, #18
 8015f34:	f7ff bf86 	b.w	8015e44 <std>
 8015f38:	20002884 	.word	0x20002884
 8015f3c:	2000274c 	.word	0x2000274c
 8015f40:	08015eb1 	.word	0x08015eb1

08015f44 <__sfp_lock_acquire>:
 8015f44:	4801      	ldr	r0, [pc, #4]	@ (8015f4c <__sfp_lock_acquire+0x8>)
 8015f46:	f000 b980 	b.w	801624a <__retarget_lock_acquire_recursive>
 8015f4a:	bf00      	nop
 8015f4c:	2000288d 	.word	0x2000288d

08015f50 <__sfp_lock_release>:
 8015f50:	4801      	ldr	r0, [pc, #4]	@ (8015f58 <__sfp_lock_release+0x8>)
 8015f52:	f000 b97b 	b.w	801624c <__retarget_lock_release_recursive>
 8015f56:	bf00      	nop
 8015f58:	2000288d 	.word	0x2000288d

08015f5c <__sinit>:
 8015f5c:	b510      	push	{r4, lr}
 8015f5e:	4604      	mov	r4, r0
 8015f60:	f7ff fff0 	bl	8015f44 <__sfp_lock_acquire>
 8015f64:	6a23      	ldr	r3, [r4, #32]
 8015f66:	b11b      	cbz	r3, 8015f70 <__sinit+0x14>
 8015f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f6c:	f7ff bff0 	b.w	8015f50 <__sfp_lock_release>
 8015f70:	4b04      	ldr	r3, [pc, #16]	@ (8015f84 <__sinit+0x28>)
 8015f72:	6223      	str	r3, [r4, #32]
 8015f74:	4b04      	ldr	r3, [pc, #16]	@ (8015f88 <__sinit+0x2c>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d1f5      	bne.n	8015f68 <__sinit+0xc>
 8015f7c:	f7ff ffc4 	bl	8015f08 <global_stdio_init.part.0>
 8015f80:	e7f2      	b.n	8015f68 <__sinit+0xc>
 8015f82:	bf00      	nop
 8015f84:	08015ec9 	.word	0x08015ec9
 8015f88:	20002884 	.word	0x20002884

08015f8c <_fwalk_sglue>:
 8015f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f90:	4607      	mov	r7, r0
 8015f92:	4688      	mov	r8, r1
 8015f94:	4614      	mov	r4, r2
 8015f96:	2600      	movs	r6, #0
 8015f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8015fa0:	d505      	bpl.n	8015fae <_fwalk_sglue+0x22>
 8015fa2:	6824      	ldr	r4, [r4, #0]
 8015fa4:	2c00      	cmp	r4, #0
 8015fa6:	d1f7      	bne.n	8015f98 <_fwalk_sglue+0xc>
 8015fa8:	4630      	mov	r0, r6
 8015faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fae:	89ab      	ldrh	r3, [r5, #12]
 8015fb0:	2b01      	cmp	r3, #1
 8015fb2:	d907      	bls.n	8015fc4 <_fwalk_sglue+0x38>
 8015fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015fb8:	3301      	adds	r3, #1
 8015fba:	d003      	beq.n	8015fc4 <_fwalk_sglue+0x38>
 8015fbc:	4629      	mov	r1, r5
 8015fbe:	4638      	mov	r0, r7
 8015fc0:	47c0      	blx	r8
 8015fc2:	4306      	orrs	r6, r0
 8015fc4:	3568      	adds	r5, #104	@ 0x68
 8015fc6:	e7e9      	b.n	8015f9c <_fwalk_sglue+0x10>

08015fc8 <sniprintf>:
 8015fc8:	b40c      	push	{r2, r3}
 8015fca:	b530      	push	{r4, r5, lr}
 8015fcc:	4b17      	ldr	r3, [pc, #92]	@ (801602c <sniprintf+0x64>)
 8015fce:	1e0c      	subs	r4, r1, #0
 8015fd0:	681d      	ldr	r5, [r3, #0]
 8015fd2:	b09d      	sub	sp, #116	@ 0x74
 8015fd4:	da08      	bge.n	8015fe8 <sniprintf+0x20>
 8015fd6:	238b      	movs	r3, #139	@ 0x8b
 8015fd8:	602b      	str	r3, [r5, #0]
 8015fda:	f04f 30ff 	mov.w	r0, #4294967295
 8015fde:	b01d      	add	sp, #116	@ 0x74
 8015fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fe4:	b002      	add	sp, #8
 8015fe6:	4770      	bx	lr
 8015fe8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015fec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015ff0:	bf14      	ite	ne
 8015ff2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015ff6:	4623      	moveq	r3, r4
 8015ff8:	9304      	str	r3, [sp, #16]
 8015ffa:	9307      	str	r3, [sp, #28]
 8015ffc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016000:	9002      	str	r0, [sp, #8]
 8016002:	9006      	str	r0, [sp, #24]
 8016004:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016008:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801600a:	ab21      	add	r3, sp, #132	@ 0x84
 801600c:	a902      	add	r1, sp, #8
 801600e:	4628      	mov	r0, r5
 8016010:	9301      	str	r3, [sp, #4]
 8016012:	f001 fbc5 	bl	80177a0 <_svfiprintf_r>
 8016016:	1c43      	adds	r3, r0, #1
 8016018:	bfbc      	itt	lt
 801601a:	238b      	movlt	r3, #139	@ 0x8b
 801601c:	602b      	strlt	r3, [r5, #0]
 801601e:	2c00      	cmp	r4, #0
 8016020:	d0dd      	beq.n	8015fde <sniprintf+0x16>
 8016022:	9b02      	ldr	r3, [sp, #8]
 8016024:	2200      	movs	r2, #0
 8016026:	701a      	strb	r2, [r3, #0]
 8016028:	e7d9      	b.n	8015fde <sniprintf+0x16>
 801602a:	bf00      	nop
 801602c:	200000ec 	.word	0x200000ec

08016030 <__sread>:
 8016030:	b510      	push	{r4, lr}
 8016032:	460c      	mov	r4, r1
 8016034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016038:	f000 f8a8 	bl	801618c <_read_r>
 801603c:	2800      	cmp	r0, #0
 801603e:	bfab      	itete	ge
 8016040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016042:	89a3      	ldrhlt	r3, [r4, #12]
 8016044:	181b      	addge	r3, r3, r0
 8016046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801604a:	bfac      	ite	ge
 801604c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801604e:	81a3      	strhlt	r3, [r4, #12]
 8016050:	bd10      	pop	{r4, pc}

08016052 <__swrite>:
 8016052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016056:	461f      	mov	r7, r3
 8016058:	898b      	ldrh	r3, [r1, #12]
 801605a:	05db      	lsls	r3, r3, #23
 801605c:	4605      	mov	r5, r0
 801605e:	460c      	mov	r4, r1
 8016060:	4616      	mov	r6, r2
 8016062:	d505      	bpl.n	8016070 <__swrite+0x1e>
 8016064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016068:	2302      	movs	r3, #2
 801606a:	2200      	movs	r2, #0
 801606c:	f000 f87c 	bl	8016168 <_lseek_r>
 8016070:	89a3      	ldrh	r3, [r4, #12]
 8016072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801607a:	81a3      	strh	r3, [r4, #12]
 801607c:	4632      	mov	r2, r6
 801607e:	463b      	mov	r3, r7
 8016080:	4628      	mov	r0, r5
 8016082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016086:	f000 b8a3 	b.w	80161d0 <_write_r>

0801608a <__sseek>:
 801608a:	b510      	push	{r4, lr}
 801608c:	460c      	mov	r4, r1
 801608e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016092:	f000 f869 	bl	8016168 <_lseek_r>
 8016096:	1c43      	adds	r3, r0, #1
 8016098:	89a3      	ldrh	r3, [r4, #12]
 801609a:	bf15      	itete	ne
 801609c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801609e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80160a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80160a6:	81a3      	strheq	r3, [r4, #12]
 80160a8:	bf18      	it	ne
 80160aa:	81a3      	strhne	r3, [r4, #12]
 80160ac:	bd10      	pop	{r4, pc}

080160ae <__sclose>:
 80160ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160b2:	f000 b849 	b.w	8016148 <_close_r>

080160b6 <memmove>:
 80160b6:	4288      	cmp	r0, r1
 80160b8:	b510      	push	{r4, lr}
 80160ba:	eb01 0402 	add.w	r4, r1, r2
 80160be:	d902      	bls.n	80160c6 <memmove+0x10>
 80160c0:	4284      	cmp	r4, r0
 80160c2:	4623      	mov	r3, r4
 80160c4:	d807      	bhi.n	80160d6 <memmove+0x20>
 80160c6:	1e43      	subs	r3, r0, #1
 80160c8:	42a1      	cmp	r1, r4
 80160ca:	d008      	beq.n	80160de <memmove+0x28>
 80160cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80160d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80160d4:	e7f8      	b.n	80160c8 <memmove+0x12>
 80160d6:	4402      	add	r2, r0
 80160d8:	4601      	mov	r1, r0
 80160da:	428a      	cmp	r2, r1
 80160dc:	d100      	bne.n	80160e0 <memmove+0x2a>
 80160de:	bd10      	pop	{r4, pc}
 80160e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80160e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80160e8:	e7f7      	b.n	80160da <memmove+0x24>

080160ea <memset>:
 80160ea:	4402      	add	r2, r0
 80160ec:	4603      	mov	r3, r0
 80160ee:	4293      	cmp	r3, r2
 80160f0:	d100      	bne.n	80160f4 <memset+0xa>
 80160f2:	4770      	bx	lr
 80160f4:	f803 1b01 	strb.w	r1, [r3], #1
 80160f8:	e7f9      	b.n	80160ee <memset+0x4>

080160fa <strcat>:
 80160fa:	b510      	push	{r4, lr}
 80160fc:	4602      	mov	r2, r0
 80160fe:	7814      	ldrb	r4, [r2, #0]
 8016100:	4613      	mov	r3, r2
 8016102:	3201      	adds	r2, #1
 8016104:	2c00      	cmp	r4, #0
 8016106:	d1fa      	bne.n	80160fe <strcat+0x4>
 8016108:	3b01      	subs	r3, #1
 801610a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801610e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016112:	2a00      	cmp	r2, #0
 8016114:	d1f9      	bne.n	801610a <strcat+0x10>
 8016116:	bd10      	pop	{r4, pc}

08016118 <strncpy>:
 8016118:	b510      	push	{r4, lr}
 801611a:	3901      	subs	r1, #1
 801611c:	4603      	mov	r3, r0
 801611e:	b132      	cbz	r2, 801612e <strncpy+0x16>
 8016120:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016124:	f803 4b01 	strb.w	r4, [r3], #1
 8016128:	3a01      	subs	r2, #1
 801612a:	2c00      	cmp	r4, #0
 801612c:	d1f7      	bne.n	801611e <strncpy+0x6>
 801612e:	441a      	add	r2, r3
 8016130:	2100      	movs	r1, #0
 8016132:	4293      	cmp	r3, r2
 8016134:	d100      	bne.n	8016138 <strncpy+0x20>
 8016136:	bd10      	pop	{r4, pc}
 8016138:	f803 1b01 	strb.w	r1, [r3], #1
 801613c:	e7f9      	b.n	8016132 <strncpy+0x1a>
	...

08016140 <_localeconv_r>:
 8016140:	4800      	ldr	r0, [pc, #0]	@ (8016144 <_localeconv_r+0x4>)
 8016142:	4770      	bx	lr
 8016144:	2000022c 	.word	0x2000022c

08016148 <_close_r>:
 8016148:	b538      	push	{r3, r4, r5, lr}
 801614a:	4d06      	ldr	r5, [pc, #24]	@ (8016164 <_close_r+0x1c>)
 801614c:	2300      	movs	r3, #0
 801614e:	4604      	mov	r4, r0
 8016150:	4608      	mov	r0, r1
 8016152:	602b      	str	r3, [r5, #0]
 8016154:	f7ed fc06 	bl	8003964 <_close>
 8016158:	1c43      	adds	r3, r0, #1
 801615a:	d102      	bne.n	8016162 <_close_r+0x1a>
 801615c:	682b      	ldr	r3, [r5, #0]
 801615e:	b103      	cbz	r3, 8016162 <_close_r+0x1a>
 8016160:	6023      	str	r3, [r4, #0]
 8016162:	bd38      	pop	{r3, r4, r5, pc}
 8016164:	20002888 	.word	0x20002888

08016168 <_lseek_r>:
 8016168:	b538      	push	{r3, r4, r5, lr}
 801616a:	4d07      	ldr	r5, [pc, #28]	@ (8016188 <_lseek_r+0x20>)
 801616c:	4604      	mov	r4, r0
 801616e:	4608      	mov	r0, r1
 8016170:	4611      	mov	r1, r2
 8016172:	2200      	movs	r2, #0
 8016174:	602a      	str	r2, [r5, #0]
 8016176:	461a      	mov	r2, r3
 8016178:	f7ed fc1b 	bl	80039b2 <_lseek>
 801617c:	1c43      	adds	r3, r0, #1
 801617e:	d102      	bne.n	8016186 <_lseek_r+0x1e>
 8016180:	682b      	ldr	r3, [r5, #0]
 8016182:	b103      	cbz	r3, 8016186 <_lseek_r+0x1e>
 8016184:	6023      	str	r3, [r4, #0]
 8016186:	bd38      	pop	{r3, r4, r5, pc}
 8016188:	20002888 	.word	0x20002888

0801618c <_read_r>:
 801618c:	b538      	push	{r3, r4, r5, lr}
 801618e:	4d07      	ldr	r5, [pc, #28]	@ (80161ac <_read_r+0x20>)
 8016190:	4604      	mov	r4, r0
 8016192:	4608      	mov	r0, r1
 8016194:	4611      	mov	r1, r2
 8016196:	2200      	movs	r2, #0
 8016198:	602a      	str	r2, [r5, #0]
 801619a:	461a      	mov	r2, r3
 801619c:	f7ed fba9 	bl	80038f2 <_read>
 80161a0:	1c43      	adds	r3, r0, #1
 80161a2:	d102      	bne.n	80161aa <_read_r+0x1e>
 80161a4:	682b      	ldr	r3, [r5, #0]
 80161a6:	b103      	cbz	r3, 80161aa <_read_r+0x1e>
 80161a8:	6023      	str	r3, [r4, #0]
 80161aa:	bd38      	pop	{r3, r4, r5, pc}
 80161ac:	20002888 	.word	0x20002888

080161b0 <_sbrk_r>:
 80161b0:	b538      	push	{r3, r4, r5, lr}
 80161b2:	4d06      	ldr	r5, [pc, #24]	@ (80161cc <_sbrk_r+0x1c>)
 80161b4:	2300      	movs	r3, #0
 80161b6:	4604      	mov	r4, r0
 80161b8:	4608      	mov	r0, r1
 80161ba:	602b      	str	r3, [r5, #0]
 80161bc:	f7ed fc06 	bl	80039cc <_sbrk>
 80161c0:	1c43      	adds	r3, r0, #1
 80161c2:	d102      	bne.n	80161ca <_sbrk_r+0x1a>
 80161c4:	682b      	ldr	r3, [r5, #0]
 80161c6:	b103      	cbz	r3, 80161ca <_sbrk_r+0x1a>
 80161c8:	6023      	str	r3, [r4, #0]
 80161ca:	bd38      	pop	{r3, r4, r5, pc}
 80161cc:	20002888 	.word	0x20002888

080161d0 <_write_r>:
 80161d0:	b538      	push	{r3, r4, r5, lr}
 80161d2:	4d07      	ldr	r5, [pc, #28]	@ (80161f0 <_write_r+0x20>)
 80161d4:	4604      	mov	r4, r0
 80161d6:	4608      	mov	r0, r1
 80161d8:	4611      	mov	r1, r2
 80161da:	2200      	movs	r2, #0
 80161dc:	602a      	str	r2, [r5, #0]
 80161de:	461a      	mov	r2, r3
 80161e0:	f7ed fba4 	bl	800392c <_write>
 80161e4:	1c43      	adds	r3, r0, #1
 80161e6:	d102      	bne.n	80161ee <_write_r+0x1e>
 80161e8:	682b      	ldr	r3, [r5, #0]
 80161ea:	b103      	cbz	r3, 80161ee <_write_r+0x1e>
 80161ec:	6023      	str	r3, [r4, #0]
 80161ee:	bd38      	pop	{r3, r4, r5, pc}
 80161f0:	20002888 	.word	0x20002888

080161f4 <__errno>:
 80161f4:	4b01      	ldr	r3, [pc, #4]	@ (80161fc <__errno+0x8>)
 80161f6:	6818      	ldr	r0, [r3, #0]
 80161f8:	4770      	bx	lr
 80161fa:	bf00      	nop
 80161fc:	200000ec 	.word	0x200000ec

08016200 <__libc_init_array>:
 8016200:	b570      	push	{r4, r5, r6, lr}
 8016202:	4d0d      	ldr	r5, [pc, #52]	@ (8016238 <__libc_init_array+0x38>)
 8016204:	4c0d      	ldr	r4, [pc, #52]	@ (801623c <__libc_init_array+0x3c>)
 8016206:	1b64      	subs	r4, r4, r5
 8016208:	10a4      	asrs	r4, r4, #2
 801620a:	2600      	movs	r6, #0
 801620c:	42a6      	cmp	r6, r4
 801620e:	d109      	bne.n	8016224 <__libc_init_array+0x24>
 8016210:	4d0b      	ldr	r5, [pc, #44]	@ (8016240 <__libc_init_array+0x40>)
 8016212:	4c0c      	ldr	r4, [pc, #48]	@ (8016244 <__libc_init_array+0x44>)
 8016214:	f001 ff8c 	bl	8018130 <_init>
 8016218:	1b64      	subs	r4, r4, r5
 801621a:	10a4      	asrs	r4, r4, #2
 801621c:	2600      	movs	r6, #0
 801621e:	42a6      	cmp	r6, r4
 8016220:	d105      	bne.n	801622e <__libc_init_array+0x2e>
 8016222:	bd70      	pop	{r4, r5, r6, pc}
 8016224:	f855 3b04 	ldr.w	r3, [r5], #4
 8016228:	4798      	blx	r3
 801622a:	3601      	adds	r6, #1
 801622c:	e7ee      	b.n	801620c <__libc_init_array+0xc>
 801622e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016232:	4798      	blx	r3
 8016234:	3601      	adds	r6, #1
 8016236:	e7f2      	b.n	801621e <__libc_init_array+0x1e>
 8016238:	0801accc 	.word	0x0801accc
 801623c:	0801accc 	.word	0x0801accc
 8016240:	0801accc 	.word	0x0801accc
 8016244:	0801acd0 	.word	0x0801acd0

08016248 <__retarget_lock_init_recursive>:
 8016248:	4770      	bx	lr

0801624a <__retarget_lock_acquire_recursive>:
 801624a:	4770      	bx	lr

0801624c <__retarget_lock_release_recursive>:
 801624c:	4770      	bx	lr

0801624e <strcpy>:
 801624e:	4603      	mov	r3, r0
 8016250:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016254:	f803 2b01 	strb.w	r2, [r3], #1
 8016258:	2a00      	cmp	r2, #0
 801625a:	d1f9      	bne.n	8016250 <strcpy+0x2>
 801625c:	4770      	bx	lr

0801625e <memcpy>:
 801625e:	440a      	add	r2, r1
 8016260:	4291      	cmp	r1, r2
 8016262:	f100 33ff 	add.w	r3, r0, #4294967295
 8016266:	d100      	bne.n	801626a <memcpy+0xc>
 8016268:	4770      	bx	lr
 801626a:	b510      	push	{r4, lr}
 801626c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016274:	4291      	cmp	r1, r2
 8016276:	d1f9      	bne.n	801626c <memcpy+0xe>
 8016278:	bd10      	pop	{r4, pc}
	...

0801627c <__assert_func>:
 801627c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801627e:	4614      	mov	r4, r2
 8016280:	461a      	mov	r2, r3
 8016282:	4b09      	ldr	r3, [pc, #36]	@ (80162a8 <__assert_func+0x2c>)
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	4605      	mov	r5, r0
 8016288:	68d8      	ldr	r0, [r3, #12]
 801628a:	b954      	cbnz	r4, 80162a2 <__assert_func+0x26>
 801628c:	4b07      	ldr	r3, [pc, #28]	@ (80162ac <__assert_func+0x30>)
 801628e:	461c      	mov	r4, r3
 8016290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016294:	9100      	str	r1, [sp, #0]
 8016296:	462b      	mov	r3, r5
 8016298:	4905      	ldr	r1, [pc, #20]	@ (80162b0 <__assert_func+0x34>)
 801629a:	f001 fc29 	bl	8017af0 <fiprintf>
 801629e:	f001 fc39 	bl	8017b14 <abort>
 80162a2:	4b04      	ldr	r3, [pc, #16]	@ (80162b4 <__assert_func+0x38>)
 80162a4:	e7f4      	b.n	8016290 <__assert_func+0x14>
 80162a6:	bf00      	nop
 80162a8:	200000ec 	.word	0x200000ec
 80162ac:	0801a9d6 	.word	0x0801a9d6
 80162b0:	0801a9a8 	.word	0x0801a9a8
 80162b4:	0801a99b 	.word	0x0801a99b

080162b8 <quorem>:
 80162b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162bc:	6903      	ldr	r3, [r0, #16]
 80162be:	690c      	ldr	r4, [r1, #16]
 80162c0:	42a3      	cmp	r3, r4
 80162c2:	4607      	mov	r7, r0
 80162c4:	db7e      	blt.n	80163c4 <quorem+0x10c>
 80162c6:	3c01      	subs	r4, #1
 80162c8:	f101 0814 	add.w	r8, r1, #20
 80162cc:	00a3      	lsls	r3, r4, #2
 80162ce:	f100 0514 	add.w	r5, r0, #20
 80162d2:	9300      	str	r3, [sp, #0]
 80162d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80162d8:	9301      	str	r3, [sp, #4]
 80162da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80162de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80162e2:	3301      	adds	r3, #1
 80162e4:	429a      	cmp	r2, r3
 80162e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80162ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80162ee:	d32e      	bcc.n	801634e <quorem+0x96>
 80162f0:	f04f 0a00 	mov.w	sl, #0
 80162f4:	46c4      	mov	ip, r8
 80162f6:	46ae      	mov	lr, r5
 80162f8:	46d3      	mov	fp, sl
 80162fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80162fe:	b298      	uxth	r0, r3
 8016300:	fb06 a000 	mla	r0, r6, r0, sl
 8016304:	0c02      	lsrs	r2, r0, #16
 8016306:	0c1b      	lsrs	r3, r3, #16
 8016308:	fb06 2303 	mla	r3, r6, r3, r2
 801630c:	f8de 2000 	ldr.w	r2, [lr]
 8016310:	b280      	uxth	r0, r0
 8016312:	b292      	uxth	r2, r2
 8016314:	1a12      	subs	r2, r2, r0
 8016316:	445a      	add	r2, fp
 8016318:	f8de 0000 	ldr.w	r0, [lr]
 801631c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016320:	b29b      	uxth	r3, r3
 8016322:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8016326:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801632a:	b292      	uxth	r2, r2
 801632c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016330:	45e1      	cmp	r9, ip
 8016332:	f84e 2b04 	str.w	r2, [lr], #4
 8016336:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801633a:	d2de      	bcs.n	80162fa <quorem+0x42>
 801633c:	9b00      	ldr	r3, [sp, #0]
 801633e:	58eb      	ldr	r3, [r5, r3]
 8016340:	b92b      	cbnz	r3, 801634e <quorem+0x96>
 8016342:	9b01      	ldr	r3, [sp, #4]
 8016344:	3b04      	subs	r3, #4
 8016346:	429d      	cmp	r5, r3
 8016348:	461a      	mov	r2, r3
 801634a:	d32f      	bcc.n	80163ac <quorem+0xf4>
 801634c:	613c      	str	r4, [r7, #16]
 801634e:	4638      	mov	r0, r7
 8016350:	f001 f8c2 	bl	80174d8 <__mcmp>
 8016354:	2800      	cmp	r0, #0
 8016356:	db25      	blt.n	80163a4 <quorem+0xec>
 8016358:	4629      	mov	r1, r5
 801635a:	2000      	movs	r0, #0
 801635c:	f858 2b04 	ldr.w	r2, [r8], #4
 8016360:	f8d1 c000 	ldr.w	ip, [r1]
 8016364:	fa1f fe82 	uxth.w	lr, r2
 8016368:	fa1f f38c 	uxth.w	r3, ip
 801636c:	eba3 030e 	sub.w	r3, r3, lr
 8016370:	4403      	add	r3, r0
 8016372:	0c12      	lsrs	r2, r2, #16
 8016374:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016378:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801637c:	b29b      	uxth	r3, r3
 801637e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016382:	45c1      	cmp	r9, r8
 8016384:	f841 3b04 	str.w	r3, [r1], #4
 8016388:	ea4f 4022 	mov.w	r0, r2, asr #16
 801638c:	d2e6      	bcs.n	801635c <quorem+0xa4>
 801638e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016396:	b922      	cbnz	r2, 80163a2 <quorem+0xea>
 8016398:	3b04      	subs	r3, #4
 801639a:	429d      	cmp	r5, r3
 801639c:	461a      	mov	r2, r3
 801639e:	d30b      	bcc.n	80163b8 <quorem+0x100>
 80163a0:	613c      	str	r4, [r7, #16]
 80163a2:	3601      	adds	r6, #1
 80163a4:	4630      	mov	r0, r6
 80163a6:	b003      	add	sp, #12
 80163a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ac:	6812      	ldr	r2, [r2, #0]
 80163ae:	3b04      	subs	r3, #4
 80163b0:	2a00      	cmp	r2, #0
 80163b2:	d1cb      	bne.n	801634c <quorem+0x94>
 80163b4:	3c01      	subs	r4, #1
 80163b6:	e7c6      	b.n	8016346 <quorem+0x8e>
 80163b8:	6812      	ldr	r2, [r2, #0]
 80163ba:	3b04      	subs	r3, #4
 80163bc:	2a00      	cmp	r2, #0
 80163be:	d1ef      	bne.n	80163a0 <quorem+0xe8>
 80163c0:	3c01      	subs	r4, #1
 80163c2:	e7ea      	b.n	801639a <quorem+0xe2>
 80163c4:	2000      	movs	r0, #0
 80163c6:	e7ee      	b.n	80163a6 <quorem+0xee>

080163c8 <_dtoa_r>:
 80163c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163cc:	69c7      	ldr	r7, [r0, #28]
 80163ce:	b099      	sub	sp, #100	@ 0x64
 80163d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80163d4:	ec55 4b10 	vmov	r4, r5, d0
 80163d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80163da:	9109      	str	r1, [sp, #36]	@ 0x24
 80163dc:	4683      	mov	fp, r0
 80163de:	920e      	str	r2, [sp, #56]	@ 0x38
 80163e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80163e2:	b97f      	cbnz	r7, 8016404 <_dtoa_r+0x3c>
 80163e4:	2010      	movs	r0, #16
 80163e6:	f7fe ffd9 	bl	801539c <malloc>
 80163ea:	4602      	mov	r2, r0
 80163ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80163f0:	b920      	cbnz	r0, 80163fc <_dtoa_r+0x34>
 80163f2:	4ba7      	ldr	r3, [pc, #668]	@ (8016690 <_dtoa_r+0x2c8>)
 80163f4:	21ef      	movs	r1, #239	@ 0xef
 80163f6:	48a7      	ldr	r0, [pc, #668]	@ (8016694 <_dtoa_r+0x2cc>)
 80163f8:	f7ff ff40 	bl	801627c <__assert_func>
 80163fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016400:	6007      	str	r7, [r0, #0]
 8016402:	60c7      	str	r7, [r0, #12]
 8016404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016408:	6819      	ldr	r1, [r3, #0]
 801640a:	b159      	cbz	r1, 8016424 <_dtoa_r+0x5c>
 801640c:	685a      	ldr	r2, [r3, #4]
 801640e:	604a      	str	r2, [r1, #4]
 8016410:	2301      	movs	r3, #1
 8016412:	4093      	lsls	r3, r2
 8016414:	608b      	str	r3, [r1, #8]
 8016416:	4658      	mov	r0, fp
 8016418:	f000 fe24 	bl	8017064 <_Bfree>
 801641c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016420:	2200      	movs	r2, #0
 8016422:	601a      	str	r2, [r3, #0]
 8016424:	1e2b      	subs	r3, r5, #0
 8016426:	bfb9      	ittee	lt
 8016428:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801642c:	9303      	strlt	r3, [sp, #12]
 801642e:	2300      	movge	r3, #0
 8016430:	6033      	strge	r3, [r6, #0]
 8016432:	9f03      	ldr	r7, [sp, #12]
 8016434:	4b98      	ldr	r3, [pc, #608]	@ (8016698 <_dtoa_r+0x2d0>)
 8016436:	bfbc      	itt	lt
 8016438:	2201      	movlt	r2, #1
 801643a:	6032      	strlt	r2, [r6, #0]
 801643c:	43bb      	bics	r3, r7
 801643e:	d112      	bne.n	8016466 <_dtoa_r+0x9e>
 8016440:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016442:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016446:	6013      	str	r3, [r2, #0]
 8016448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801644c:	4323      	orrs	r3, r4
 801644e:	f000 854d 	beq.w	8016eec <_dtoa_r+0xb24>
 8016452:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016454:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80166ac <_dtoa_r+0x2e4>
 8016458:	2b00      	cmp	r3, #0
 801645a:	f000 854f 	beq.w	8016efc <_dtoa_r+0xb34>
 801645e:	f10a 0303 	add.w	r3, sl, #3
 8016462:	f000 bd49 	b.w	8016ef8 <_dtoa_r+0xb30>
 8016466:	ed9d 7b02 	vldr	d7, [sp, #8]
 801646a:	2200      	movs	r2, #0
 801646c:	ec51 0b17 	vmov	r0, r1, d7
 8016470:	2300      	movs	r3, #0
 8016472:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8016476:	f7ea fb37 	bl	8000ae8 <__aeabi_dcmpeq>
 801647a:	4680      	mov	r8, r0
 801647c:	b158      	cbz	r0, 8016496 <_dtoa_r+0xce>
 801647e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016480:	2301      	movs	r3, #1
 8016482:	6013      	str	r3, [r2, #0]
 8016484:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016486:	b113      	cbz	r3, 801648e <_dtoa_r+0xc6>
 8016488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801648a:	4b84      	ldr	r3, [pc, #528]	@ (801669c <_dtoa_r+0x2d4>)
 801648c:	6013      	str	r3, [r2, #0]
 801648e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80166b0 <_dtoa_r+0x2e8>
 8016492:	f000 bd33 	b.w	8016efc <_dtoa_r+0xb34>
 8016496:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801649a:	aa16      	add	r2, sp, #88	@ 0x58
 801649c:	a917      	add	r1, sp, #92	@ 0x5c
 801649e:	4658      	mov	r0, fp
 80164a0:	f001 f8ca 	bl	8017638 <__d2b>
 80164a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80164a8:	4681      	mov	r9, r0
 80164aa:	2e00      	cmp	r6, #0
 80164ac:	d077      	beq.n	801659e <_dtoa_r+0x1d6>
 80164ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80164b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80164b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80164b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80164bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80164c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80164c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80164c8:	4619      	mov	r1, r3
 80164ca:	2200      	movs	r2, #0
 80164cc:	4b74      	ldr	r3, [pc, #464]	@ (80166a0 <_dtoa_r+0x2d8>)
 80164ce:	f7e9 feeb 	bl	80002a8 <__aeabi_dsub>
 80164d2:	a369      	add	r3, pc, #420	@ (adr r3, 8016678 <_dtoa_r+0x2b0>)
 80164d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d8:	f7ea f89e 	bl	8000618 <__aeabi_dmul>
 80164dc:	a368      	add	r3, pc, #416	@ (adr r3, 8016680 <_dtoa_r+0x2b8>)
 80164de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e2:	f7e9 fee3 	bl	80002ac <__adddf3>
 80164e6:	4604      	mov	r4, r0
 80164e8:	4630      	mov	r0, r6
 80164ea:	460d      	mov	r5, r1
 80164ec:	f7ea f82a 	bl	8000544 <__aeabi_i2d>
 80164f0:	a365      	add	r3, pc, #404	@ (adr r3, 8016688 <_dtoa_r+0x2c0>)
 80164f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f6:	f7ea f88f 	bl	8000618 <__aeabi_dmul>
 80164fa:	4602      	mov	r2, r0
 80164fc:	460b      	mov	r3, r1
 80164fe:	4620      	mov	r0, r4
 8016500:	4629      	mov	r1, r5
 8016502:	f7e9 fed3 	bl	80002ac <__adddf3>
 8016506:	4604      	mov	r4, r0
 8016508:	460d      	mov	r5, r1
 801650a:	f7ea fb35 	bl	8000b78 <__aeabi_d2iz>
 801650e:	2200      	movs	r2, #0
 8016510:	4607      	mov	r7, r0
 8016512:	2300      	movs	r3, #0
 8016514:	4620      	mov	r0, r4
 8016516:	4629      	mov	r1, r5
 8016518:	f7ea faf0 	bl	8000afc <__aeabi_dcmplt>
 801651c:	b140      	cbz	r0, 8016530 <_dtoa_r+0x168>
 801651e:	4638      	mov	r0, r7
 8016520:	f7ea f810 	bl	8000544 <__aeabi_i2d>
 8016524:	4622      	mov	r2, r4
 8016526:	462b      	mov	r3, r5
 8016528:	f7ea fade 	bl	8000ae8 <__aeabi_dcmpeq>
 801652c:	b900      	cbnz	r0, 8016530 <_dtoa_r+0x168>
 801652e:	3f01      	subs	r7, #1
 8016530:	2f16      	cmp	r7, #22
 8016532:	d851      	bhi.n	80165d8 <_dtoa_r+0x210>
 8016534:	4b5b      	ldr	r3, [pc, #364]	@ (80166a4 <_dtoa_r+0x2dc>)
 8016536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801653e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016542:	f7ea fadb 	bl	8000afc <__aeabi_dcmplt>
 8016546:	2800      	cmp	r0, #0
 8016548:	d048      	beq.n	80165dc <_dtoa_r+0x214>
 801654a:	3f01      	subs	r7, #1
 801654c:	2300      	movs	r3, #0
 801654e:	9312      	str	r3, [sp, #72]	@ 0x48
 8016550:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016552:	1b9b      	subs	r3, r3, r6
 8016554:	1e5a      	subs	r2, r3, #1
 8016556:	bf44      	itt	mi
 8016558:	f1c3 0801 	rsbmi	r8, r3, #1
 801655c:	2300      	movmi	r3, #0
 801655e:	9208      	str	r2, [sp, #32]
 8016560:	bf54      	ite	pl
 8016562:	f04f 0800 	movpl.w	r8, #0
 8016566:	9308      	strmi	r3, [sp, #32]
 8016568:	2f00      	cmp	r7, #0
 801656a:	db39      	blt.n	80165e0 <_dtoa_r+0x218>
 801656c:	9b08      	ldr	r3, [sp, #32]
 801656e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8016570:	443b      	add	r3, r7
 8016572:	9308      	str	r3, [sp, #32]
 8016574:	2300      	movs	r3, #0
 8016576:	930a      	str	r3, [sp, #40]	@ 0x28
 8016578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801657a:	2b09      	cmp	r3, #9
 801657c:	d864      	bhi.n	8016648 <_dtoa_r+0x280>
 801657e:	2b05      	cmp	r3, #5
 8016580:	bfc4      	itt	gt
 8016582:	3b04      	subgt	r3, #4
 8016584:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8016586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016588:	f1a3 0302 	sub.w	r3, r3, #2
 801658c:	bfcc      	ite	gt
 801658e:	2400      	movgt	r4, #0
 8016590:	2401      	movle	r4, #1
 8016592:	2b03      	cmp	r3, #3
 8016594:	d863      	bhi.n	801665e <_dtoa_r+0x296>
 8016596:	e8df f003 	tbb	[pc, r3]
 801659a:	372a      	.short	0x372a
 801659c:	5535      	.short	0x5535
 801659e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80165a2:	441e      	add	r6, r3
 80165a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80165a8:	2b20      	cmp	r3, #32
 80165aa:	bfc1      	itttt	gt
 80165ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80165b0:	409f      	lslgt	r7, r3
 80165b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80165b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80165ba:	bfd6      	itet	le
 80165bc:	f1c3 0320 	rsble	r3, r3, #32
 80165c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80165c4:	fa04 f003 	lslle.w	r0, r4, r3
 80165c8:	f7e9 ffac 	bl	8000524 <__aeabi_ui2d>
 80165cc:	2201      	movs	r2, #1
 80165ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80165d2:	3e01      	subs	r6, #1
 80165d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80165d6:	e777      	b.n	80164c8 <_dtoa_r+0x100>
 80165d8:	2301      	movs	r3, #1
 80165da:	e7b8      	b.n	801654e <_dtoa_r+0x186>
 80165dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80165de:	e7b7      	b.n	8016550 <_dtoa_r+0x188>
 80165e0:	427b      	negs	r3, r7
 80165e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80165e4:	2300      	movs	r3, #0
 80165e6:	eba8 0807 	sub.w	r8, r8, r7
 80165ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80165ec:	e7c4      	b.n	8016578 <_dtoa_r+0x1b0>
 80165ee:	2300      	movs	r3, #0
 80165f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80165f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	dc35      	bgt.n	8016664 <_dtoa_r+0x29c>
 80165f8:	2301      	movs	r3, #1
 80165fa:	9300      	str	r3, [sp, #0]
 80165fc:	9307      	str	r3, [sp, #28]
 80165fe:	461a      	mov	r2, r3
 8016600:	920e      	str	r2, [sp, #56]	@ 0x38
 8016602:	e00b      	b.n	801661c <_dtoa_r+0x254>
 8016604:	2301      	movs	r3, #1
 8016606:	e7f3      	b.n	80165f0 <_dtoa_r+0x228>
 8016608:	2300      	movs	r3, #0
 801660a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801660c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801660e:	18fb      	adds	r3, r7, r3
 8016610:	9300      	str	r3, [sp, #0]
 8016612:	3301      	adds	r3, #1
 8016614:	2b01      	cmp	r3, #1
 8016616:	9307      	str	r3, [sp, #28]
 8016618:	bfb8      	it	lt
 801661a:	2301      	movlt	r3, #1
 801661c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8016620:	2100      	movs	r1, #0
 8016622:	2204      	movs	r2, #4
 8016624:	f102 0514 	add.w	r5, r2, #20
 8016628:	429d      	cmp	r5, r3
 801662a:	d91f      	bls.n	801666c <_dtoa_r+0x2a4>
 801662c:	6041      	str	r1, [r0, #4]
 801662e:	4658      	mov	r0, fp
 8016630:	f000 fcd8 	bl	8016fe4 <_Balloc>
 8016634:	4682      	mov	sl, r0
 8016636:	2800      	cmp	r0, #0
 8016638:	d13c      	bne.n	80166b4 <_dtoa_r+0x2ec>
 801663a:	4b1b      	ldr	r3, [pc, #108]	@ (80166a8 <_dtoa_r+0x2e0>)
 801663c:	4602      	mov	r2, r0
 801663e:	f240 11af 	movw	r1, #431	@ 0x1af
 8016642:	e6d8      	b.n	80163f6 <_dtoa_r+0x2e>
 8016644:	2301      	movs	r3, #1
 8016646:	e7e0      	b.n	801660a <_dtoa_r+0x242>
 8016648:	2401      	movs	r4, #1
 801664a:	2300      	movs	r3, #0
 801664c:	9309      	str	r3, [sp, #36]	@ 0x24
 801664e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016650:	f04f 33ff 	mov.w	r3, #4294967295
 8016654:	9300      	str	r3, [sp, #0]
 8016656:	9307      	str	r3, [sp, #28]
 8016658:	2200      	movs	r2, #0
 801665a:	2312      	movs	r3, #18
 801665c:	e7d0      	b.n	8016600 <_dtoa_r+0x238>
 801665e:	2301      	movs	r3, #1
 8016660:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016662:	e7f5      	b.n	8016650 <_dtoa_r+0x288>
 8016664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016666:	9300      	str	r3, [sp, #0]
 8016668:	9307      	str	r3, [sp, #28]
 801666a:	e7d7      	b.n	801661c <_dtoa_r+0x254>
 801666c:	3101      	adds	r1, #1
 801666e:	0052      	lsls	r2, r2, #1
 8016670:	e7d8      	b.n	8016624 <_dtoa_r+0x25c>
 8016672:	bf00      	nop
 8016674:	f3af 8000 	nop.w
 8016678:	636f4361 	.word	0x636f4361
 801667c:	3fd287a7 	.word	0x3fd287a7
 8016680:	8b60c8b3 	.word	0x8b60c8b3
 8016684:	3fc68a28 	.word	0x3fc68a28
 8016688:	509f79fb 	.word	0x509f79fb
 801668c:	3fd34413 	.word	0x3fd34413
 8016690:	0801a8f8 	.word	0x0801a8f8
 8016694:	0801a9e4 	.word	0x0801a9e4
 8016698:	7ff00000 	.word	0x7ff00000
 801669c:	0801a978 	.word	0x0801a978
 80166a0:	3ff80000 	.word	0x3ff80000
 80166a4:	0801aae0 	.word	0x0801aae0
 80166a8:	0801aa3c 	.word	0x0801aa3c
 80166ac:	0801a9e0 	.word	0x0801a9e0
 80166b0:	0801a977 	.word	0x0801a977
 80166b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80166b8:	6018      	str	r0, [r3, #0]
 80166ba:	9b07      	ldr	r3, [sp, #28]
 80166bc:	2b0e      	cmp	r3, #14
 80166be:	f200 80a4 	bhi.w	801680a <_dtoa_r+0x442>
 80166c2:	2c00      	cmp	r4, #0
 80166c4:	f000 80a1 	beq.w	801680a <_dtoa_r+0x442>
 80166c8:	2f00      	cmp	r7, #0
 80166ca:	dd33      	ble.n	8016734 <_dtoa_r+0x36c>
 80166cc:	4bad      	ldr	r3, [pc, #692]	@ (8016984 <_dtoa_r+0x5bc>)
 80166ce:	f007 020f 	and.w	r2, r7, #15
 80166d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80166d6:	ed93 7b00 	vldr	d7, [r3]
 80166da:	05f8      	lsls	r0, r7, #23
 80166dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80166e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80166e4:	d516      	bpl.n	8016714 <_dtoa_r+0x34c>
 80166e6:	4ba8      	ldr	r3, [pc, #672]	@ (8016988 <_dtoa_r+0x5c0>)
 80166e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80166ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80166f0:	f7ea f8bc 	bl	800086c <__aeabi_ddiv>
 80166f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80166f8:	f004 040f 	and.w	r4, r4, #15
 80166fc:	2603      	movs	r6, #3
 80166fe:	4da2      	ldr	r5, [pc, #648]	@ (8016988 <_dtoa_r+0x5c0>)
 8016700:	b954      	cbnz	r4, 8016718 <_dtoa_r+0x350>
 8016702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801670a:	f7ea f8af 	bl	800086c <__aeabi_ddiv>
 801670e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016712:	e028      	b.n	8016766 <_dtoa_r+0x39e>
 8016714:	2602      	movs	r6, #2
 8016716:	e7f2      	b.n	80166fe <_dtoa_r+0x336>
 8016718:	07e1      	lsls	r1, r4, #31
 801671a:	d508      	bpl.n	801672e <_dtoa_r+0x366>
 801671c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016720:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016724:	f7e9 ff78 	bl	8000618 <__aeabi_dmul>
 8016728:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801672c:	3601      	adds	r6, #1
 801672e:	1064      	asrs	r4, r4, #1
 8016730:	3508      	adds	r5, #8
 8016732:	e7e5      	b.n	8016700 <_dtoa_r+0x338>
 8016734:	f000 80d2 	beq.w	80168dc <_dtoa_r+0x514>
 8016738:	427c      	negs	r4, r7
 801673a:	4b92      	ldr	r3, [pc, #584]	@ (8016984 <_dtoa_r+0x5bc>)
 801673c:	4d92      	ldr	r5, [pc, #584]	@ (8016988 <_dtoa_r+0x5c0>)
 801673e:	f004 020f 	and.w	r2, r4, #15
 8016742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801674a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801674e:	f7e9 ff63 	bl	8000618 <__aeabi_dmul>
 8016752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016756:	1124      	asrs	r4, r4, #4
 8016758:	2300      	movs	r3, #0
 801675a:	2602      	movs	r6, #2
 801675c:	2c00      	cmp	r4, #0
 801675e:	f040 80b2 	bne.w	80168c6 <_dtoa_r+0x4fe>
 8016762:	2b00      	cmp	r3, #0
 8016764:	d1d3      	bne.n	801670e <_dtoa_r+0x346>
 8016766:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016768:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801676c:	2b00      	cmp	r3, #0
 801676e:	f000 80b7 	beq.w	80168e0 <_dtoa_r+0x518>
 8016772:	4b86      	ldr	r3, [pc, #536]	@ (801698c <_dtoa_r+0x5c4>)
 8016774:	2200      	movs	r2, #0
 8016776:	4620      	mov	r0, r4
 8016778:	4629      	mov	r1, r5
 801677a:	f7ea f9bf 	bl	8000afc <__aeabi_dcmplt>
 801677e:	2800      	cmp	r0, #0
 8016780:	f000 80ae 	beq.w	80168e0 <_dtoa_r+0x518>
 8016784:	9b07      	ldr	r3, [sp, #28]
 8016786:	2b00      	cmp	r3, #0
 8016788:	f000 80aa 	beq.w	80168e0 <_dtoa_r+0x518>
 801678c:	9b00      	ldr	r3, [sp, #0]
 801678e:	2b00      	cmp	r3, #0
 8016790:	dd37      	ble.n	8016802 <_dtoa_r+0x43a>
 8016792:	1e7b      	subs	r3, r7, #1
 8016794:	9304      	str	r3, [sp, #16]
 8016796:	4620      	mov	r0, r4
 8016798:	4b7d      	ldr	r3, [pc, #500]	@ (8016990 <_dtoa_r+0x5c8>)
 801679a:	2200      	movs	r2, #0
 801679c:	4629      	mov	r1, r5
 801679e:	f7e9 ff3b 	bl	8000618 <__aeabi_dmul>
 80167a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80167a6:	9c00      	ldr	r4, [sp, #0]
 80167a8:	3601      	adds	r6, #1
 80167aa:	4630      	mov	r0, r6
 80167ac:	f7e9 feca 	bl	8000544 <__aeabi_i2d>
 80167b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80167b4:	f7e9 ff30 	bl	8000618 <__aeabi_dmul>
 80167b8:	4b76      	ldr	r3, [pc, #472]	@ (8016994 <_dtoa_r+0x5cc>)
 80167ba:	2200      	movs	r2, #0
 80167bc:	f7e9 fd76 	bl	80002ac <__adddf3>
 80167c0:	4605      	mov	r5, r0
 80167c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80167c6:	2c00      	cmp	r4, #0
 80167c8:	f040 808d 	bne.w	80168e6 <_dtoa_r+0x51e>
 80167cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80167d0:	4b71      	ldr	r3, [pc, #452]	@ (8016998 <_dtoa_r+0x5d0>)
 80167d2:	2200      	movs	r2, #0
 80167d4:	f7e9 fd68 	bl	80002a8 <__aeabi_dsub>
 80167d8:	4602      	mov	r2, r0
 80167da:	460b      	mov	r3, r1
 80167dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80167e0:	462a      	mov	r2, r5
 80167e2:	4633      	mov	r3, r6
 80167e4:	f7ea f9a8 	bl	8000b38 <__aeabi_dcmpgt>
 80167e8:	2800      	cmp	r0, #0
 80167ea:	f040 828b 	bne.w	8016d04 <_dtoa_r+0x93c>
 80167ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80167f2:	462a      	mov	r2, r5
 80167f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80167f8:	f7ea f980 	bl	8000afc <__aeabi_dcmplt>
 80167fc:	2800      	cmp	r0, #0
 80167fe:	f040 8128 	bne.w	8016a52 <_dtoa_r+0x68a>
 8016802:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8016806:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801680a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801680c:	2b00      	cmp	r3, #0
 801680e:	f2c0 815a 	blt.w	8016ac6 <_dtoa_r+0x6fe>
 8016812:	2f0e      	cmp	r7, #14
 8016814:	f300 8157 	bgt.w	8016ac6 <_dtoa_r+0x6fe>
 8016818:	4b5a      	ldr	r3, [pc, #360]	@ (8016984 <_dtoa_r+0x5bc>)
 801681a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801681e:	ed93 7b00 	vldr	d7, [r3]
 8016822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016824:	2b00      	cmp	r3, #0
 8016826:	ed8d 7b00 	vstr	d7, [sp]
 801682a:	da03      	bge.n	8016834 <_dtoa_r+0x46c>
 801682c:	9b07      	ldr	r3, [sp, #28]
 801682e:	2b00      	cmp	r3, #0
 8016830:	f340 8101 	ble.w	8016a36 <_dtoa_r+0x66e>
 8016834:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016838:	4656      	mov	r6, sl
 801683a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801683e:	4620      	mov	r0, r4
 8016840:	4629      	mov	r1, r5
 8016842:	f7ea f813 	bl	800086c <__aeabi_ddiv>
 8016846:	f7ea f997 	bl	8000b78 <__aeabi_d2iz>
 801684a:	4680      	mov	r8, r0
 801684c:	f7e9 fe7a 	bl	8000544 <__aeabi_i2d>
 8016850:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016854:	f7e9 fee0 	bl	8000618 <__aeabi_dmul>
 8016858:	4602      	mov	r2, r0
 801685a:	460b      	mov	r3, r1
 801685c:	4620      	mov	r0, r4
 801685e:	4629      	mov	r1, r5
 8016860:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8016864:	f7e9 fd20 	bl	80002a8 <__aeabi_dsub>
 8016868:	f806 4b01 	strb.w	r4, [r6], #1
 801686c:	9d07      	ldr	r5, [sp, #28]
 801686e:	eba6 040a 	sub.w	r4, r6, sl
 8016872:	42a5      	cmp	r5, r4
 8016874:	4602      	mov	r2, r0
 8016876:	460b      	mov	r3, r1
 8016878:	f040 8117 	bne.w	8016aaa <_dtoa_r+0x6e2>
 801687c:	f7e9 fd16 	bl	80002ac <__adddf3>
 8016880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016884:	4604      	mov	r4, r0
 8016886:	460d      	mov	r5, r1
 8016888:	f7ea f956 	bl	8000b38 <__aeabi_dcmpgt>
 801688c:	2800      	cmp	r0, #0
 801688e:	f040 80f9 	bne.w	8016a84 <_dtoa_r+0x6bc>
 8016892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016896:	4620      	mov	r0, r4
 8016898:	4629      	mov	r1, r5
 801689a:	f7ea f925 	bl	8000ae8 <__aeabi_dcmpeq>
 801689e:	b118      	cbz	r0, 80168a8 <_dtoa_r+0x4e0>
 80168a0:	f018 0f01 	tst.w	r8, #1
 80168a4:	f040 80ee 	bne.w	8016a84 <_dtoa_r+0x6bc>
 80168a8:	4649      	mov	r1, r9
 80168aa:	4658      	mov	r0, fp
 80168ac:	f000 fbda 	bl	8017064 <_Bfree>
 80168b0:	2300      	movs	r3, #0
 80168b2:	7033      	strb	r3, [r6, #0]
 80168b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80168b6:	3701      	adds	r7, #1
 80168b8:	601f      	str	r7, [r3, #0]
 80168ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80168bc:	2b00      	cmp	r3, #0
 80168be:	f000 831d 	beq.w	8016efc <_dtoa_r+0xb34>
 80168c2:	601e      	str	r6, [r3, #0]
 80168c4:	e31a      	b.n	8016efc <_dtoa_r+0xb34>
 80168c6:	07e2      	lsls	r2, r4, #31
 80168c8:	d505      	bpl.n	80168d6 <_dtoa_r+0x50e>
 80168ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80168ce:	f7e9 fea3 	bl	8000618 <__aeabi_dmul>
 80168d2:	3601      	adds	r6, #1
 80168d4:	2301      	movs	r3, #1
 80168d6:	1064      	asrs	r4, r4, #1
 80168d8:	3508      	adds	r5, #8
 80168da:	e73f      	b.n	801675c <_dtoa_r+0x394>
 80168dc:	2602      	movs	r6, #2
 80168de:	e742      	b.n	8016766 <_dtoa_r+0x39e>
 80168e0:	9c07      	ldr	r4, [sp, #28]
 80168e2:	9704      	str	r7, [sp, #16]
 80168e4:	e761      	b.n	80167aa <_dtoa_r+0x3e2>
 80168e6:	4b27      	ldr	r3, [pc, #156]	@ (8016984 <_dtoa_r+0x5bc>)
 80168e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80168ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80168ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80168f2:	4454      	add	r4, sl
 80168f4:	2900      	cmp	r1, #0
 80168f6:	d053      	beq.n	80169a0 <_dtoa_r+0x5d8>
 80168f8:	4928      	ldr	r1, [pc, #160]	@ (801699c <_dtoa_r+0x5d4>)
 80168fa:	2000      	movs	r0, #0
 80168fc:	f7e9 ffb6 	bl	800086c <__aeabi_ddiv>
 8016900:	4633      	mov	r3, r6
 8016902:	462a      	mov	r2, r5
 8016904:	f7e9 fcd0 	bl	80002a8 <__aeabi_dsub>
 8016908:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801690c:	4656      	mov	r6, sl
 801690e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016912:	f7ea f931 	bl	8000b78 <__aeabi_d2iz>
 8016916:	4605      	mov	r5, r0
 8016918:	f7e9 fe14 	bl	8000544 <__aeabi_i2d>
 801691c:	4602      	mov	r2, r0
 801691e:	460b      	mov	r3, r1
 8016920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016924:	f7e9 fcc0 	bl	80002a8 <__aeabi_dsub>
 8016928:	3530      	adds	r5, #48	@ 0x30
 801692a:	4602      	mov	r2, r0
 801692c:	460b      	mov	r3, r1
 801692e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016932:	f806 5b01 	strb.w	r5, [r6], #1
 8016936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801693a:	f7ea f8df 	bl	8000afc <__aeabi_dcmplt>
 801693e:	2800      	cmp	r0, #0
 8016940:	d171      	bne.n	8016a26 <_dtoa_r+0x65e>
 8016942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016946:	4911      	ldr	r1, [pc, #68]	@ (801698c <_dtoa_r+0x5c4>)
 8016948:	2000      	movs	r0, #0
 801694a:	f7e9 fcad 	bl	80002a8 <__aeabi_dsub>
 801694e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8016952:	f7ea f8d3 	bl	8000afc <__aeabi_dcmplt>
 8016956:	2800      	cmp	r0, #0
 8016958:	f040 8095 	bne.w	8016a86 <_dtoa_r+0x6be>
 801695c:	42a6      	cmp	r6, r4
 801695e:	f43f af50 	beq.w	8016802 <_dtoa_r+0x43a>
 8016962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8016966:	4b0a      	ldr	r3, [pc, #40]	@ (8016990 <_dtoa_r+0x5c8>)
 8016968:	2200      	movs	r2, #0
 801696a:	f7e9 fe55 	bl	8000618 <__aeabi_dmul>
 801696e:	4b08      	ldr	r3, [pc, #32]	@ (8016990 <_dtoa_r+0x5c8>)
 8016970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8016974:	2200      	movs	r2, #0
 8016976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801697a:	f7e9 fe4d 	bl	8000618 <__aeabi_dmul>
 801697e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016982:	e7c4      	b.n	801690e <_dtoa_r+0x546>
 8016984:	0801aae0 	.word	0x0801aae0
 8016988:	0801aab8 	.word	0x0801aab8
 801698c:	3ff00000 	.word	0x3ff00000
 8016990:	40240000 	.word	0x40240000
 8016994:	401c0000 	.word	0x401c0000
 8016998:	40140000 	.word	0x40140000
 801699c:	3fe00000 	.word	0x3fe00000
 80169a0:	4631      	mov	r1, r6
 80169a2:	4628      	mov	r0, r5
 80169a4:	f7e9 fe38 	bl	8000618 <__aeabi_dmul>
 80169a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80169ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80169ae:	4656      	mov	r6, sl
 80169b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80169b4:	f7ea f8e0 	bl	8000b78 <__aeabi_d2iz>
 80169b8:	4605      	mov	r5, r0
 80169ba:	f7e9 fdc3 	bl	8000544 <__aeabi_i2d>
 80169be:	4602      	mov	r2, r0
 80169c0:	460b      	mov	r3, r1
 80169c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80169c6:	f7e9 fc6f 	bl	80002a8 <__aeabi_dsub>
 80169ca:	3530      	adds	r5, #48	@ 0x30
 80169cc:	f806 5b01 	strb.w	r5, [r6], #1
 80169d0:	4602      	mov	r2, r0
 80169d2:	460b      	mov	r3, r1
 80169d4:	42a6      	cmp	r6, r4
 80169d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80169da:	f04f 0200 	mov.w	r2, #0
 80169de:	d124      	bne.n	8016a2a <_dtoa_r+0x662>
 80169e0:	4bac      	ldr	r3, [pc, #688]	@ (8016c94 <_dtoa_r+0x8cc>)
 80169e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80169e6:	f7e9 fc61 	bl	80002ac <__adddf3>
 80169ea:	4602      	mov	r2, r0
 80169ec:	460b      	mov	r3, r1
 80169ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80169f2:	f7ea f8a1 	bl	8000b38 <__aeabi_dcmpgt>
 80169f6:	2800      	cmp	r0, #0
 80169f8:	d145      	bne.n	8016a86 <_dtoa_r+0x6be>
 80169fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80169fe:	49a5      	ldr	r1, [pc, #660]	@ (8016c94 <_dtoa_r+0x8cc>)
 8016a00:	2000      	movs	r0, #0
 8016a02:	f7e9 fc51 	bl	80002a8 <__aeabi_dsub>
 8016a06:	4602      	mov	r2, r0
 8016a08:	460b      	mov	r3, r1
 8016a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016a0e:	f7ea f875 	bl	8000afc <__aeabi_dcmplt>
 8016a12:	2800      	cmp	r0, #0
 8016a14:	f43f aef5 	beq.w	8016802 <_dtoa_r+0x43a>
 8016a18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8016a1a:	1e73      	subs	r3, r6, #1
 8016a1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8016a1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016a22:	2b30      	cmp	r3, #48	@ 0x30
 8016a24:	d0f8      	beq.n	8016a18 <_dtoa_r+0x650>
 8016a26:	9f04      	ldr	r7, [sp, #16]
 8016a28:	e73e      	b.n	80168a8 <_dtoa_r+0x4e0>
 8016a2a:	4b9b      	ldr	r3, [pc, #620]	@ (8016c98 <_dtoa_r+0x8d0>)
 8016a2c:	f7e9 fdf4 	bl	8000618 <__aeabi_dmul>
 8016a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a34:	e7bc      	b.n	80169b0 <_dtoa_r+0x5e8>
 8016a36:	d10c      	bne.n	8016a52 <_dtoa_r+0x68a>
 8016a38:	4b98      	ldr	r3, [pc, #608]	@ (8016c9c <_dtoa_r+0x8d4>)
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a40:	f7e9 fdea 	bl	8000618 <__aeabi_dmul>
 8016a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a48:	f7ea f86c 	bl	8000b24 <__aeabi_dcmpge>
 8016a4c:	2800      	cmp	r0, #0
 8016a4e:	f000 8157 	beq.w	8016d00 <_dtoa_r+0x938>
 8016a52:	2400      	movs	r4, #0
 8016a54:	4625      	mov	r5, r4
 8016a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a58:	43db      	mvns	r3, r3
 8016a5a:	9304      	str	r3, [sp, #16]
 8016a5c:	4656      	mov	r6, sl
 8016a5e:	2700      	movs	r7, #0
 8016a60:	4621      	mov	r1, r4
 8016a62:	4658      	mov	r0, fp
 8016a64:	f000 fafe 	bl	8017064 <_Bfree>
 8016a68:	2d00      	cmp	r5, #0
 8016a6a:	d0dc      	beq.n	8016a26 <_dtoa_r+0x65e>
 8016a6c:	b12f      	cbz	r7, 8016a7a <_dtoa_r+0x6b2>
 8016a6e:	42af      	cmp	r7, r5
 8016a70:	d003      	beq.n	8016a7a <_dtoa_r+0x6b2>
 8016a72:	4639      	mov	r1, r7
 8016a74:	4658      	mov	r0, fp
 8016a76:	f000 faf5 	bl	8017064 <_Bfree>
 8016a7a:	4629      	mov	r1, r5
 8016a7c:	4658      	mov	r0, fp
 8016a7e:	f000 faf1 	bl	8017064 <_Bfree>
 8016a82:	e7d0      	b.n	8016a26 <_dtoa_r+0x65e>
 8016a84:	9704      	str	r7, [sp, #16]
 8016a86:	4633      	mov	r3, r6
 8016a88:	461e      	mov	r6, r3
 8016a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016a8e:	2a39      	cmp	r2, #57	@ 0x39
 8016a90:	d107      	bne.n	8016aa2 <_dtoa_r+0x6da>
 8016a92:	459a      	cmp	sl, r3
 8016a94:	d1f8      	bne.n	8016a88 <_dtoa_r+0x6c0>
 8016a96:	9a04      	ldr	r2, [sp, #16]
 8016a98:	3201      	adds	r2, #1
 8016a9a:	9204      	str	r2, [sp, #16]
 8016a9c:	2230      	movs	r2, #48	@ 0x30
 8016a9e:	f88a 2000 	strb.w	r2, [sl]
 8016aa2:	781a      	ldrb	r2, [r3, #0]
 8016aa4:	3201      	adds	r2, #1
 8016aa6:	701a      	strb	r2, [r3, #0]
 8016aa8:	e7bd      	b.n	8016a26 <_dtoa_r+0x65e>
 8016aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8016c98 <_dtoa_r+0x8d0>)
 8016aac:	2200      	movs	r2, #0
 8016aae:	f7e9 fdb3 	bl	8000618 <__aeabi_dmul>
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	4604      	mov	r4, r0
 8016ab8:	460d      	mov	r5, r1
 8016aba:	f7ea f815 	bl	8000ae8 <__aeabi_dcmpeq>
 8016abe:	2800      	cmp	r0, #0
 8016ac0:	f43f aebb 	beq.w	801683a <_dtoa_r+0x472>
 8016ac4:	e6f0      	b.n	80168a8 <_dtoa_r+0x4e0>
 8016ac6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016ac8:	2a00      	cmp	r2, #0
 8016aca:	f000 80db 	beq.w	8016c84 <_dtoa_r+0x8bc>
 8016ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ad0:	2a01      	cmp	r2, #1
 8016ad2:	f300 80bf 	bgt.w	8016c54 <_dtoa_r+0x88c>
 8016ad6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016ad8:	2a00      	cmp	r2, #0
 8016ada:	f000 80b7 	beq.w	8016c4c <_dtoa_r+0x884>
 8016ade:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8016ae2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016ae4:	4646      	mov	r6, r8
 8016ae6:	9a08      	ldr	r2, [sp, #32]
 8016ae8:	2101      	movs	r1, #1
 8016aea:	441a      	add	r2, r3
 8016aec:	4658      	mov	r0, fp
 8016aee:	4498      	add	r8, r3
 8016af0:	9208      	str	r2, [sp, #32]
 8016af2:	f000 fb6b 	bl	80171cc <__i2b>
 8016af6:	4605      	mov	r5, r0
 8016af8:	b15e      	cbz	r6, 8016b12 <_dtoa_r+0x74a>
 8016afa:	9b08      	ldr	r3, [sp, #32]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	dd08      	ble.n	8016b12 <_dtoa_r+0x74a>
 8016b00:	42b3      	cmp	r3, r6
 8016b02:	9a08      	ldr	r2, [sp, #32]
 8016b04:	bfa8      	it	ge
 8016b06:	4633      	movge	r3, r6
 8016b08:	eba8 0803 	sub.w	r8, r8, r3
 8016b0c:	1af6      	subs	r6, r6, r3
 8016b0e:	1ad3      	subs	r3, r2, r3
 8016b10:	9308      	str	r3, [sp, #32]
 8016b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016b14:	b1f3      	cbz	r3, 8016b54 <_dtoa_r+0x78c>
 8016b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	f000 80b7 	beq.w	8016c8c <_dtoa_r+0x8c4>
 8016b1e:	b18c      	cbz	r4, 8016b44 <_dtoa_r+0x77c>
 8016b20:	4629      	mov	r1, r5
 8016b22:	4622      	mov	r2, r4
 8016b24:	4658      	mov	r0, fp
 8016b26:	f000 fc11 	bl	801734c <__pow5mult>
 8016b2a:	464a      	mov	r2, r9
 8016b2c:	4601      	mov	r1, r0
 8016b2e:	4605      	mov	r5, r0
 8016b30:	4658      	mov	r0, fp
 8016b32:	f000 fb61 	bl	80171f8 <__multiply>
 8016b36:	4649      	mov	r1, r9
 8016b38:	9004      	str	r0, [sp, #16]
 8016b3a:	4658      	mov	r0, fp
 8016b3c:	f000 fa92 	bl	8017064 <_Bfree>
 8016b40:	9b04      	ldr	r3, [sp, #16]
 8016b42:	4699      	mov	r9, r3
 8016b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016b46:	1b1a      	subs	r2, r3, r4
 8016b48:	d004      	beq.n	8016b54 <_dtoa_r+0x78c>
 8016b4a:	4649      	mov	r1, r9
 8016b4c:	4658      	mov	r0, fp
 8016b4e:	f000 fbfd 	bl	801734c <__pow5mult>
 8016b52:	4681      	mov	r9, r0
 8016b54:	2101      	movs	r1, #1
 8016b56:	4658      	mov	r0, fp
 8016b58:	f000 fb38 	bl	80171cc <__i2b>
 8016b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016b5e:	4604      	mov	r4, r0
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	f000 81cf 	beq.w	8016f04 <_dtoa_r+0xb3c>
 8016b66:	461a      	mov	r2, r3
 8016b68:	4601      	mov	r1, r0
 8016b6a:	4658      	mov	r0, fp
 8016b6c:	f000 fbee 	bl	801734c <__pow5mult>
 8016b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b72:	2b01      	cmp	r3, #1
 8016b74:	4604      	mov	r4, r0
 8016b76:	f300 8095 	bgt.w	8016ca4 <_dtoa_r+0x8dc>
 8016b7a:	9b02      	ldr	r3, [sp, #8]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	f040 8087 	bne.w	8016c90 <_dtoa_r+0x8c8>
 8016b82:	9b03      	ldr	r3, [sp, #12]
 8016b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	f040 8089 	bne.w	8016ca0 <_dtoa_r+0x8d8>
 8016b8e:	9b03      	ldr	r3, [sp, #12]
 8016b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016b94:	0d1b      	lsrs	r3, r3, #20
 8016b96:	051b      	lsls	r3, r3, #20
 8016b98:	b12b      	cbz	r3, 8016ba6 <_dtoa_r+0x7de>
 8016b9a:	9b08      	ldr	r3, [sp, #32]
 8016b9c:	3301      	adds	r3, #1
 8016b9e:	9308      	str	r3, [sp, #32]
 8016ba0:	f108 0801 	add.w	r8, r8, #1
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8016ba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	f000 81b0 	beq.w	8016f10 <_dtoa_r+0xb48>
 8016bb0:	6923      	ldr	r3, [r4, #16]
 8016bb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016bb6:	6918      	ldr	r0, [r3, #16]
 8016bb8:	f000 fabc 	bl	8017134 <__hi0bits>
 8016bbc:	f1c0 0020 	rsb	r0, r0, #32
 8016bc0:	9b08      	ldr	r3, [sp, #32]
 8016bc2:	4418      	add	r0, r3
 8016bc4:	f010 001f 	ands.w	r0, r0, #31
 8016bc8:	d077      	beq.n	8016cba <_dtoa_r+0x8f2>
 8016bca:	f1c0 0320 	rsb	r3, r0, #32
 8016bce:	2b04      	cmp	r3, #4
 8016bd0:	dd6b      	ble.n	8016caa <_dtoa_r+0x8e2>
 8016bd2:	9b08      	ldr	r3, [sp, #32]
 8016bd4:	f1c0 001c 	rsb	r0, r0, #28
 8016bd8:	4403      	add	r3, r0
 8016bda:	4480      	add	r8, r0
 8016bdc:	4406      	add	r6, r0
 8016bde:	9308      	str	r3, [sp, #32]
 8016be0:	f1b8 0f00 	cmp.w	r8, #0
 8016be4:	dd05      	ble.n	8016bf2 <_dtoa_r+0x82a>
 8016be6:	4649      	mov	r1, r9
 8016be8:	4642      	mov	r2, r8
 8016bea:	4658      	mov	r0, fp
 8016bec:	f000 fc08 	bl	8017400 <__lshift>
 8016bf0:	4681      	mov	r9, r0
 8016bf2:	9b08      	ldr	r3, [sp, #32]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	dd05      	ble.n	8016c04 <_dtoa_r+0x83c>
 8016bf8:	4621      	mov	r1, r4
 8016bfa:	461a      	mov	r2, r3
 8016bfc:	4658      	mov	r0, fp
 8016bfe:	f000 fbff 	bl	8017400 <__lshift>
 8016c02:	4604      	mov	r4, r0
 8016c04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d059      	beq.n	8016cbe <_dtoa_r+0x8f6>
 8016c0a:	4621      	mov	r1, r4
 8016c0c:	4648      	mov	r0, r9
 8016c0e:	f000 fc63 	bl	80174d8 <__mcmp>
 8016c12:	2800      	cmp	r0, #0
 8016c14:	da53      	bge.n	8016cbe <_dtoa_r+0x8f6>
 8016c16:	1e7b      	subs	r3, r7, #1
 8016c18:	9304      	str	r3, [sp, #16]
 8016c1a:	4649      	mov	r1, r9
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	220a      	movs	r2, #10
 8016c20:	4658      	mov	r0, fp
 8016c22:	f000 fa41 	bl	80170a8 <__multadd>
 8016c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c28:	4681      	mov	r9, r0
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	f000 8172 	beq.w	8016f14 <_dtoa_r+0xb4c>
 8016c30:	2300      	movs	r3, #0
 8016c32:	4629      	mov	r1, r5
 8016c34:	220a      	movs	r2, #10
 8016c36:	4658      	mov	r0, fp
 8016c38:	f000 fa36 	bl	80170a8 <__multadd>
 8016c3c:	9b00      	ldr	r3, [sp, #0]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	4605      	mov	r5, r0
 8016c42:	dc67      	bgt.n	8016d14 <_dtoa_r+0x94c>
 8016c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c46:	2b02      	cmp	r3, #2
 8016c48:	dc41      	bgt.n	8016cce <_dtoa_r+0x906>
 8016c4a:	e063      	b.n	8016d14 <_dtoa_r+0x94c>
 8016c4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016c4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8016c52:	e746      	b.n	8016ae2 <_dtoa_r+0x71a>
 8016c54:	9b07      	ldr	r3, [sp, #28]
 8016c56:	1e5c      	subs	r4, r3, #1
 8016c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c5a:	42a3      	cmp	r3, r4
 8016c5c:	bfbf      	itttt	lt
 8016c5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016c60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8016c62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8016c64:	1ae3      	sublt	r3, r4, r3
 8016c66:	bfb4      	ite	lt
 8016c68:	18d2      	addlt	r2, r2, r3
 8016c6a:	1b1c      	subge	r4, r3, r4
 8016c6c:	9b07      	ldr	r3, [sp, #28]
 8016c6e:	bfbc      	itt	lt
 8016c70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8016c72:	2400      	movlt	r4, #0
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	bfb5      	itete	lt
 8016c78:	eba8 0603 	sublt.w	r6, r8, r3
 8016c7c:	9b07      	ldrge	r3, [sp, #28]
 8016c7e:	2300      	movlt	r3, #0
 8016c80:	4646      	movge	r6, r8
 8016c82:	e730      	b.n	8016ae6 <_dtoa_r+0x71e>
 8016c84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016c86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8016c88:	4646      	mov	r6, r8
 8016c8a:	e735      	b.n	8016af8 <_dtoa_r+0x730>
 8016c8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c8e:	e75c      	b.n	8016b4a <_dtoa_r+0x782>
 8016c90:	2300      	movs	r3, #0
 8016c92:	e788      	b.n	8016ba6 <_dtoa_r+0x7de>
 8016c94:	3fe00000 	.word	0x3fe00000
 8016c98:	40240000 	.word	0x40240000
 8016c9c:	40140000 	.word	0x40140000
 8016ca0:	9b02      	ldr	r3, [sp, #8]
 8016ca2:	e780      	b.n	8016ba6 <_dtoa_r+0x7de>
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8016ca8:	e782      	b.n	8016bb0 <_dtoa_r+0x7e8>
 8016caa:	d099      	beq.n	8016be0 <_dtoa_r+0x818>
 8016cac:	9a08      	ldr	r2, [sp, #32]
 8016cae:	331c      	adds	r3, #28
 8016cb0:	441a      	add	r2, r3
 8016cb2:	4498      	add	r8, r3
 8016cb4:	441e      	add	r6, r3
 8016cb6:	9208      	str	r2, [sp, #32]
 8016cb8:	e792      	b.n	8016be0 <_dtoa_r+0x818>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	e7f6      	b.n	8016cac <_dtoa_r+0x8e4>
 8016cbe:	9b07      	ldr	r3, [sp, #28]
 8016cc0:	9704      	str	r7, [sp, #16]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	dc20      	bgt.n	8016d08 <_dtoa_r+0x940>
 8016cc6:	9300      	str	r3, [sp, #0]
 8016cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	dd1e      	ble.n	8016d0c <_dtoa_r+0x944>
 8016cce:	9b00      	ldr	r3, [sp, #0]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	f47f aec0 	bne.w	8016a56 <_dtoa_r+0x68e>
 8016cd6:	4621      	mov	r1, r4
 8016cd8:	2205      	movs	r2, #5
 8016cda:	4658      	mov	r0, fp
 8016cdc:	f000 f9e4 	bl	80170a8 <__multadd>
 8016ce0:	4601      	mov	r1, r0
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	4648      	mov	r0, r9
 8016ce6:	f000 fbf7 	bl	80174d8 <__mcmp>
 8016cea:	2800      	cmp	r0, #0
 8016cec:	f77f aeb3 	ble.w	8016a56 <_dtoa_r+0x68e>
 8016cf0:	4656      	mov	r6, sl
 8016cf2:	2331      	movs	r3, #49	@ 0x31
 8016cf4:	f806 3b01 	strb.w	r3, [r6], #1
 8016cf8:	9b04      	ldr	r3, [sp, #16]
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	9304      	str	r3, [sp, #16]
 8016cfe:	e6ae      	b.n	8016a5e <_dtoa_r+0x696>
 8016d00:	9c07      	ldr	r4, [sp, #28]
 8016d02:	9704      	str	r7, [sp, #16]
 8016d04:	4625      	mov	r5, r4
 8016d06:	e7f3      	b.n	8016cf0 <_dtoa_r+0x928>
 8016d08:	9b07      	ldr	r3, [sp, #28]
 8016d0a:	9300      	str	r3, [sp, #0]
 8016d0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	f000 8104 	beq.w	8016f1c <_dtoa_r+0xb54>
 8016d14:	2e00      	cmp	r6, #0
 8016d16:	dd05      	ble.n	8016d24 <_dtoa_r+0x95c>
 8016d18:	4629      	mov	r1, r5
 8016d1a:	4632      	mov	r2, r6
 8016d1c:	4658      	mov	r0, fp
 8016d1e:	f000 fb6f 	bl	8017400 <__lshift>
 8016d22:	4605      	mov	r5, r0
 8016d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d05a      	beq.n	8016de0 <_dtoa_r+0xa18>
 8016d2a:	6869      	ldr	r1, [r5, #4]
 8016d2c:	4658      	mov	r0, fp
 8016d2e:	f000 f959 	bl	8016fe4 <_Balloc>
 8016d32:	4606      	mov	r6, r0
 8016d34:	b928      	cbnz	r0, 8016d42 <_dtoa_r+0x97a>
 8016d36:	4b84      	ldr	r3, [pc, #528]	@ (8016f48 <_dtoa_r+0xb80>)
 8016d38:	4602      	mov	r2, r0
 8016d3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016d3e:	f7ff bb5a 	b.w	80163f6 <_dtoa_r+0x2e>
 8016d42:	692a      	ldr	r2, [r5, #16]
 8016d44:	3202      	adds	r2, #2
 8016d46:	0092      	lsls	r2, r2, #2
 8016d48:	f105 010c 	add.w	r1, r5, #12
 8016d4c:	300c      	adds	r0, #12
 8016d4e:	f7ff fa86 	bl	801625e <memcpy>
 8016d52:	2201      	movs	r2, #1
 8016d54:	4631      	mov	r1, r6
 8016d56:	4658      	mov	r0, fp
 8016d58:	f000 fb52 	bl	8017400 <__lshift>
 8016d5c:	f10a 0301 	add.w	r3, sl, #1
 8016d60:	9307      	str	r3, [sp, #28]
 8016d62:	9b00      	ldr	r3, [sp, #0]
 8016d64:	4453      	add	r3, sl
 8016d66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016d68:	9b02      	ldr	r3, [sp, #8]
 8016d6a:	f003 0301 	and.w	r3, r3, #1
 8016d6e:	462f      	mov	r7, r5
 8016d70:	930a      	str	r3, [sp, #40]	@ 0x28
 8016d72:	4605      	mov	r5, r0
 8016d74:	9b07      	ldr	r3, [sp, #28]
 8016d76:	4621      	mov	r1, r4
 8016d78:	3b01      	subs	r3, #1
 8016d7a:	4648      	mov	r0, r9
 8016d7c:	9300      	str	r3, [sp, #0]
 8016d7e:	f7ff fa9b 	bl	80162b8 <quorem>
 8016d82:	4639      	mov	r1, r7
 8016d84:	9002      	str	r0, [sp, #8]
 8016d86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016d8a:	4648      	mov	r0, r9
 8016d8c:	f000 fba4 	bl	80174d8 <__mcmp>
 8016d90:	462a      	mov	r2, r5
 8016d92:	9008      	str	r0, [sp, #32]
 8016d94:	4621      	mov	r1, r4
 8016d96:	4658      	mov	r0, fp
 8016d98:	f000 fbba 	bl	8017510 <__mdiff>
 8016d9c:	68c2      	ldr	r2, [r0, #12]
 8016d9e:	4606      	mov	r6, r0
 8016da0:	bb02      	cbnz	r2, 8016de4 <_dtoa_r+0xa1c>
 8016da2:	4601      	mov	r1, r0
 8016da4:	4648      	mov	r0, r9
 8016da6:	f000 fb97 	bl	80174d8 <__mcmp>
 8016daa:	4602      	mov	r2, r0
 8016dac:	4631      	mov	r1, r6
 8016dae:	4658      	mov	r0, fp
 8016db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8016db2:	f000 f957 	bl	8017064 <_Bfree>
 8016db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016db8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016dba:	9e07      	ldr	r6, [sp, #28]
 8016dbc:	ea43 0102 	orr.w	r1, r3, r2
 8016dc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016dc2:	4319      	orrs	r1, r3
 8016dc4:	d110      	bne.n	8016de8 <_dtoa_r+0xa20>
 8016dc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016dca:	d029      	beq.n	8016e20 <_dtoa_r+0xa58>
 8016dcc:	9b08      	ldr	r3, [sp, #32]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	dd02      	ble.n	8016dd8 <_dtoa_r+0xa10>
 8016dd2:	9b02      	ldr	r3, [sp, #8]
 8016dd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8016dd8:	9b00      	ldr	r3, [sp, #0]
 8016dda:	f883 8000 	strb.w	r8, [r3]
 8016dde:	e63f      	b.n	8016a60 <_dtoa_r+0x698>
 8016de0:	4628      	mov	r0, r5
 8016de2:	e7bb      	b.n	8016d5c <_dtoa_r+0x994>
 8016de4:	2201      	movs	r2, #1
 8016de6:	e7e1      	b.n	8016dac <_dtoa_r+0x9e4>
 8016de8:	9b08      	ldr	r3, [sp, #32]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	db04      	blt.n	8016df8 <_dtoa_r+0xa30>
 8016dee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016df0:	430b      	orrs	r3, r1
 8016df2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016df4:	430b      	orrs	r3, r1
 8016df6:	d120      	bne.n	8016e3a <_dtoa_r+0xa72>
 8016df8:	2a00      	cmp	r2, #0
 8016dfa:	dded      	ble.n	8016dd8 <_dtoa_r+0xa10>
 8016dfc:	4649      	mov	r1, r9
 8016dfe:	2201      	movs	r2, #1
 8016e00:	4658      	mov	r0, fp
 8016e02:	f000 fafd 	bl	8017400 <__lshift>
 8016e06:	4621      	mov	r1, r4
 8016e08:	4681      	mov	r9, r0
 8016e0a:	f000 fb65 	bl	80174d8 <__mcmp>
 8016e0e:	2800      	cmp	r0, #0
 8016e10:	dc03      	bgt.n	8016e1a <_dtoa_r+0xa52>
 8016e12:	d1e1      	bne.n	8016dd8 <_dtoa_r+0xa10>
 8016e14:	f018 0f01 	tst.w	r8, #1
 8016e18:	d0de      	beq.n	8016dd8 <_dtoa_r+0xa10>
 8016e1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016e1e:	d1d8      	bne.n	8016dd2 <_dtoa_r+0xa0a>
 8016e20:	9a00      	ldr	r2, [sp, #0]
 8016e22:	2339      	movs	r3, #57	@ 0x39
 8016e24:	7013      	strb	r3, [r2, #0]
 8016e26:	4633      	mov	r3, r6
 8016e28:	461e      	mov	r6, r3
 8016e2a:	3b01      	subs	r3, #1
 8016e2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016e30:	2a39      	cmp	r2, #57	@ 0x39
 8016e32:	d052      	beq.n	8016eda <_dtoa_r+0xb12>
 8016e34:	3201      	adds	r2, #1
 8016e36:	701a      	strb	r2, [r3, #0]
 8016e38:	e612      	b.n	8016a60 <_dtoa_r+0x698>
 8016e3a:	2a00      	cmp	r2, #0
 8016e3c:	dd07      	ble.n	8016e4e <_dtoa_r+0xa86>
 8016e3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016e42:	d0ed      	beq.n	8016e20 <_dtoa_r+0xa58>
 8016e44:	9a00      	ldr	r2, [sp, #0]
 8016e46:	f108 0301 	add.w	r3, r8, #1
 8016e4a:	7013      	strb	r3, [r2, #0]
 8016e4c:	e608      	b.n	8016a60 <_dtoa_r+0x698>
 8016e4e:	9b07      	ldr	r3, [sp, #28]
 8016e50:	9a07      	ldr	r2, [sp, #28]
 8016e52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8016e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016e58:	4293      	cmp	r3, r2
 8016e5a:	d028      	beq.n	8016eae <_dtoa_r+0xae6>
 8016e5c:	4649      	mov	r1, r9
 8016e5e:	2300      	movs	r3, #0
 8016e60:	220a      	movs	r2, #10
 8016e62:	4658      	mov	r0, fp
 8016e64:	f000 f920 	bl	80170a8 <__multadd>
 8016e68:	42af      	cmp	r7, r5
 8016e6a:	4681      	mov	r9, r0
 8016e6c:	f04f 0300 	mov.w	r3, #0
 8016e70:	f04f 020a 	mov.w	r2, #10
 8016e74:	4639      	mov	r1, r7
 8016e76:	4658      	mov	r0, fp
 8016e78:	d107      	bne.n	8016e8a <_dtoa_r+0xac2>
 8016e7a:	f000 f915 	bl	80170a8 <__multadd>
 8016e7e:	4607      	mov	r7, r0
 8016e80:	4605      	mov	r5, r0
 8016e82:	9b07      	ldr	r3, [sp, #28]
 8016e84:	3301      	adds	r3, #1
 8016e86:	9307      	str	r3, [sp, #28]
 8016e88:	e774      	b.n	8016d74 <_dtoa_r+0x9ac>
 8016e8a:	f000 f90d 	bl	80170a8 <__multadd>
 8016e8e:	4629      	mov	r1, r5
 8016e90:	4607      	mov	r7, r0
 8016e92:	2300      	movs	r3, #0
 8016e94:	220a      	movs	r2, #10
 8016e96:	4658      	mov	r0, fp
 8016e98:	f000 f906 	bl	80170a8 <__multadd>
 8016e9c:	4605      	mov	r5, r0
 8016e9e:	e7f0      	b.n	8016e82 <_dtoa_r+0xaba>
 8016ea0:	9b00      	ldr	r3, [sp, #0]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	bfcc      	ite	gt
 8016ea6:	461e      	movgt	r6, r3
 8016ea8:	2601      	movle	r6, #1
 8016eaa:	4456      	add	r6, sl
 8016eac:	2700      	movs	r7, #0
 8016eae:	4649      	mov	r1, r9
 8016eb0:	2201      	movs	r2, #1
 8016eb2:	4658      	mov	r0, fp
 8016eb4:	f000 faa4 	bl	8017400 <__lshift>
 8016eb8:	4621      	mov	r1, r4
 8016eba:	4681      	mov	r9, r0
 8016ebc:	f000 fb0c 	bl	80174d8 <__mcmp>
 8016ec0:	2800      	cmp	r0, #0
 8016ec2:	dcb0      	bgt.n	8016e26 <_dtoa_r+0xa5e>
 8016ec4:	d102      	bne.n	8016ecc <_dtoa_r+0xb04>
 8016ec6:	f018 0f01 	tst.w	r8, #1
 8016eca:	d1ac      	bne.n	8016e26 <_dtoa_r+0xa5e>
 8016ecc:	4633      	mov	r3, r6
 8016ece:	461e      	mov	r6, r3
 8016ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016ed4:	2a30      	cmp	r2, #48	@ 0x30
 8016ed6:	d0fa      	beq.n	8016ece <_dtoa_r+0xb06>
 8016ed8:	e5c2      	b.n	8016a60 <_dtoa_r+0x698>
 8016eda:	459a      	cmp	sl, r3
 8016edc:	d1a4      	bne.n	8016e28 <_dtoa_r+0xa60>
 8016ede:	9b04      	ldr	r3, [sp, #16]
 8016ee0:	3301      	adds	r3, #1
 8016ee2:	9304      	str	r3, [sp, #16]
 8016ee4:	2331      	movs	r3, #49	@ 0x31
 8016ee6:	f88a 3000 	strb.w	r3, [sl]
 8016eea:	e5b9      	b.n	8016a60 <_dtoa_r+0x698>
 8016eec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016eee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8016f4c <_dtoa_r+0xb84>
 8016ef2:	b11b      	cbz	r3, 8016efc <_dtoa_r+0xb34>
 8016ef4:	f10a 0308 	add.w	r3, sl, #8
 8016ef8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016efa:	6013      	str	r3, [r2, #0]
 8016efc:	4650      	mov	r0, sl
 8016efe:	b019      	add	sp, #100	@ 0x64
 8016f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f06:	2b01      	cmp	r3, #1
 8016f08:	f77f ae37 	ble.w	8016b7a <_dtoa_r+0x7b2>
 8016f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016f10:	2001      	movs	r0, #1
 8016f12:	e655      	b.n	8016bc0 <_dtoa_r+0x7f8>
 8016f14:	9b00      	ldr	r3, [sp, #0]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	f77f aed6 	ble.w	8016cc8 <_dtoa_r+0x900>
 8016f1c:	4656      	mov	r6, sl
 8016f1e:	4621      	mov	r1, r4
 8016f20:	4648      	mov	r0, r9
 8016f22:	f7ff f9c9 	bl	80162b8 <quorem>
 8016f26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016f2a:	f806 8b01 	strb.w	r8, [r6], #1
 8016f2e:	9b00      	ldr	r3, [sp, #0]
 8016f30:	eba6 020a 	sub.w	r2, r6, sl
 8016f34:	4293      	cmp	r3, r2
 8016f36:	ddb3      	ble.n	8016ea0 <_dtoa_r+0xad8>
 8016f38:	4649      	mov	r1, r9
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	220a      	movs	r2, #10
 8016f3e:	4658      	mov	r0, fp
 8016f40:	f000 f8b2 	bl	80170a8 <__multadd>
 8016f44:	4681      	mov	r9, r0
 8016f46:	e7ea      	b.n	8016f1e <_dtoa_r+0xb56>
 8016f48:	0801aa3c 	.word	0x0801aa3c
 8016f4c:	0801a9d7 	.word	0x0801a9d7

08016f50 <_free_r>:
 8016f50:	b538      	push	{r3, r4, r5, lr}
 8016f52:	4605      	mov	r5, r0
 8016f54:	2900      	cmp	r1, #0
 8016f56:	d041      	beq.n	8016fdc <_free_r+0x8c>
 8016f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f5c:	1f0c      	subs	r4, r1, #4
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	bfb8      	it	lt
 8016f62:	18e4      	addlt	r4, r4, r3
 8016f64:	f7fe facc 	bl	8015500 <__malloc_lock>
 8016f68:	4a1d      	ldr	r2, [pc, #116]	@ (8016fe0 <_free_r+0x90>)
 8016f6a:	6813      	ldr	r3, [r2, #0]
 8016f6c:	b933      	cbnz	r3, 8016f7c <_free_r+0x2c>
 8016f6e:	6063      	str	r3, [r4, #4]
 8016f70:	6014      	str	r4, [r2, #0]
 8016f72:	4628      	mov	r0, r5
 8016f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f78:	f7fe bac8 	b.w	801550c <__malloc_unlock>
 8016f7c:	42a3      	cmp	r3, r4
 8016f7e:	d908      	bls.n	8016f92 <_free_r+0x42>
 8016f80:	6820      	ldr	r0, [r4, #0]
 8016f82:	1821      	adds	r1, r4, r0
 8016f84:	428b      	cmp	r3, r1
 8016f86:	bf01      	itttt	eq
 8016f88:	6819      	ldreq	r1, [r3, #0]
 8016f8a:	685b      	ldreq	r3, [r3, #4]
 8016f8c:	1809      	addeq	r1, r1, r0
 8016f8e:	6021      	streq	r1, [r4, #0]
 8016f90:	e7ed      	b.n	8016f6e <_free_r+0x1e>
 8016f92:	461a      	mov	r2, r3
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	b10b      	cbz	r3, 8016f9c <_free_r+0x4c>
 8016f98:	42a3      	cmp	r3, r4
 8016f9a:	d9fa      	bls.n	8016f92 <_free_r+0x42>
 8016f9c:	6811      	ldr	r1, [r2, #0]
 8016f9e:	1850      	adds	r0, r2, r1
 8016fa0:	42a0      	cmp	r0, r4
 8016fa2:	d10b      	bne.n	8016fbc <_free_r+0x6c>
 8016fa4:	6820      	ldr	r0, [r4, #0]
 8016fa6:	4401      	add	r1, r0
 8016fa8:	1850      	adds	r0, r2, r1
 8016faa:	4283      	cmp	r3, r0
 8016fac:	6011      	str	r1, [r2, #0]
 8016fae:	d1e0      	bne.n	8016f72 <_free_r+0x22>
 8016fb0:	6818      	ldr	r0, [r3, #0]
 8016fb2:	685b      	ldr	r3, [r3, #4]
 8016fb4:	6053      	str	r3, [r2, #4]
 8016fb6:	4408      	add	r0, r1
 8016fb8:	6010      	str	r0, [r2, #0]
 8016fba:	e7da      	b.n	8016f72 <_free_r+0x22>
 8016fbc:	d902      	bls.n	8016fc4 <_free_r+0x74>
 8016fbe:	230c      	movs	r3, #12
 8016fc0:	602b      	str	r3, [r5, #0]
 8016fc2:	e7d6      	b.n	8016f72 <_free_r+0x22>
 8016fc4:	6820      	ldr	r0, [r4, #0]
 8016fc6:	1821      	adds	r1, r4, r0
 8016fc8:	428b      	cmp	r3, r1
 8016fca:	bf04      	itt	eq
 8016fcc:	6819      	ldreq	r1, [r3, #0]
 8016fce:	685b      	ldreq	r3, [r3, #4]
 8016fd0:	6063      	str	r3, [r4, #4]
 8016fd2:	bf04      	itt	eq
 8016fd4:	1809      	addeq	r1, r1, r0
 8016fd6:	6021      	streq	r1, [r4, #0]
 8016fd8:	6054      	str	r4, [r2, #4]
 8016fda:	e7ca      	b.n	8016f72 <_free_r+0x22>
 8016fdc:	bd38      	pop	{r3, r4, r5, pc}
 8016fde:	bf00      	nop
 8016fe0:	20002748 	.word	0x20002748

08016fe4 <_Balloc>:
 8016fe4:	b570      	push	{r4, r5, r6, lr}
 8016fe6:	69c6      	ldr	r6, [r0, #28]
 8016fe8:	4604      	mov	r4, r0
 8016fea:	460d      	mov	r5, r1
 8016fec:	b976      	cbnz	r6, 801700c <_Balloc+0x28>
 8016fee:	2010      	movs	r0, #16
 8016ff0:	f7fe f9d4 	bl	801539c <malloc>
 8016ff4:	4602      	mov	r2, r0
 8016ff6:	61e0      	str	r0, [r4, #28]
 8016ff8:	b920      	cbnz	r0, 8017004 <_Balloc+0x20>
 8016ffa:	4b18      	ldr	r3, [pc, #96]	@ (801705c <_Balloc+0x78>)
 8016ffc:	4818      	ldr	r0, [pc, #96]	@ (8017060 <_Balloc+0x7c>)
 8016ffe:	216b      	movs	r1, #107	@ 0x6b
 8017000:	f7ff f93c 	bl	801627c <__assert_func>
 8017004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017008:	6006      	str	r6, [r0, #0]
 801700a:	60c6      	str	r6, [r0, #12]
 801700c:	69e6      	ldr	r6, [r4, #28]
 801700e:	68f3      	ldr	r3, [r6, #12]
 8017010:	b183      	cbz	r3, 8017034 <_Balloc+0x50>
 8017012:	69e3      	ldr	r3, [r4, #28]
 8017014:	68db      	ldr	r3, [r3, #12]
 8017016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801701a:	b9b8      	cbnz	r0, 801704c <_Balloc+0x68>
 801701c:	2101      	movs	r1, #1
 801701e:	fa01 f605 	lsl.w	r6, r1, r5
 8017022:	1d72      	adds	r2, r6, #5
 8017024:	0092      	lsls	r2, r2, #2
 8017026:	4620      	mov	r0, r4
 8017028:	f000 fd7b 	bl	8017b22 <_calloc_r>
 801702c:	b160      	cbz	r0, 8017048 <_Balloc+0x64>
 801702e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017032:	e00e      	b.n	8017052 <_Balloc+0x6e>
 8017034:	2221      	movs	r2, #33	@ 0x21
 8017036:	2104      	movs	r1, #4
 8017038:	4620      	mov	r0, r4
 801703a:	f000 fd72 	bl	8017b22 <_calloc_r>
 801703e:	69e3      	ldr	r3, [r4, #28]
 8017040:	60f0      	str	r0, [r6, #12]
 8017042:	68db      	ldr	r3, [r3, #12]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d1e4      	bne.n	8017012 <_Balloc+0x2e>
 8017048:	2000      	movs	r0, #0
 801704a:	bd70      	pop	{r4, r5, r6, pc}
 801704c:	6802      	ldr	r2, [r0, #0]
 801704e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017052:	2300      	movs	r3, #0
 8017054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017058:	e7f7      	b.n	801704a <_Balloc+0x66>
 801705a:	bf00      	nop
 801705c:	0801a8f8 	.word	0x0801a8f8
 8017060:	0801aa4d 	.word	0x0801aa4d

08017064 <_Bfree>:
 8017064:	b570      	push	{r4, r5, r6, lr}
 8017066:	69c6      	ldr	r6, [r0, #28]
 8017068:	4605      	mov	r5, r0
 801706a:	460c      	mov	r4, r1
 801706c:	b976      	cbnz	r6, 801708c <_Bfree+0x28>
 801706e:	2010      	movs	r0, #16
 8017070:	f7fe f994 	bl	801539c <malloc>
 8017074:	4602      	mov	r2, r0
 8017076:	61e8      	str	r0, [r5, #28]
 8017078:	b920      	cbnz	r0, 8017084 <_Bfree+0x20>
 801707a:	4b09      	ldr	r3, [pc, #36]	@ (80170a0 <_Bfree+0x3c>)
 801707c:	4809      	ldr	r0, [pc, #36]	@ (80170a4 <_Bfree+0x40>)
 801707e:	218f      	movs	r1, #143	@ 0x8f
 8017080:	f7ff f8fc 	bl	801627c <__assert_func>
 8017084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017088:	6006      	str	r6, [r0, #0]
 801708a:	60c6      	str	r6, [r0, #12]
 801708c:	b13c      	cbz	r4, 801709e <_Bfree+0x3a>
 801708e:	69eb      	ldr	r3, [r5, #28]
 8017090:	6862      	ldr	r2, [r4, #4]
 8017092:	68db      	ldr	r3, [r3, #12]
 8017094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017098:	6021      	str	r1, [r4, #0]
 801709a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801709e:	bd70      	pop	{r4, r5, r6, pc}
 80170a0:	0801a8f8 	.word	0x0801a8f8
 80170a4:	0801aa4d 	.word	0x0801aa4d

080170a8 <__multadd>:
 80170a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170ac:	690d      	ldr	r5, [r1, #16]
 80170ae:	4607      	mov	r7, r0
 80170b0:	460c      	mov	r4, r1
 80170b2:	461e      	mov	r6, r3
 80170b4:	f101 0c14 	add.w	ip, r1, #20
 80170b8:	2000      	movs	r0, #0
 80170ba:	f8dc 3000 	ldr.w	r3, [ip]
 80170be:	b299      	uxth	r1, r3
 80170c0:	fb02 6101 	mla	r1, r2, r1, r6
 80170c4:	0c1e      	lsrs	r6, r3, #16
 80170c6:	0c0b      	lsrs	r3, r1, #16
 80170c8:	fb02 3306 	mla	r3, r2, r6, r3
 80170cc:	b289      	uxth	r1, r1
 80170ce:	3001      	adds	r0, #1
 80170d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80170d4:	4285      	cmp	r5, r0
 80170d6:	f84c 1b04 	str.w	r1, [ip], #4
 80170da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80170de:	dcec      	bgt.n	80170ba <__multadd+0x12>
 80170e0:	b30e      	cbz	r6, 8017126 <__multadd+0x7e>
 80170e2:	68a3      	ldr	r3, [r4, #8]
 80170e4:	42ab      	cmp	r3, r5
 80170e6:	dc19      	bgt.n	801711c <__multadd+0x74>
 80170e8:	6861      	ldr	r1, [r4, #4]
 80170ea:	4638      	mov	r0, r7
 80170ec:	3101      	adds	r1, #1
 80170ee:	f7ff ff79 	bl	8016fe4 <_Balloc>
 80170f2:	4680      	mov	r8, r0
 80170f4:	b928      	cbnz	r0, 8017102 <__multadd+0x5a>
 80170f6:	4602      	mov	r2, r0
 80170f8:	4b0c      	ldr	r3, [pc, #48]	@ (801712c <__multadd+0x84>)
 80170fa:	480d      	ldr	r0, [pc, #52]	@ (8017130 <__multadd+0x88>)
 80170fc:	21ba      	movs	r1, #186	@ 0xba
 80170fe:	f7ff f8bd 	bl	801627c <__assert_func>
 8017102:	6922      	ldr	r2, [r4, #16]
 8017104:	3202      	adds	r2, #2
 8017106:	f104 010c 	add.w	r1, r4, #12
 801710a:	0092      	lsls	r2, r2, #2
 801710c:	300c      	adds	r0, #12
 801710e:	f7ff f8a6 	bl	801625e <memcpy>
 8017112:	4621      	mov	r1, r4
 8017114:	4638      	mov	r0, r7
 8017116:	f7ff ffa5 	bl	8017064 <_Bfree>
 801711a:	4644      	mov	r4, r8
 801711c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017120:	3501      	adds	r5, #1
 8017122:	615e      	str	r6, [r3, #20]
 8017124:	6125      	str	r5, [r4, #16]
 8017126:	4620      	mov	r0, r4
 8017128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801712c:	0801aa3c 	.word	0x0801aa3c
 8017130:	0801aa4d 	.word	0x0801aa4d

08017134 <__hi0bits>:
 8017134:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017138:	4603      	mov	r3, r0
 801713a:	bf36      	itet	cc
 801713c:	0403      	lslcc	r3, r0, #16
 801713e:	2000      	movcs	r0, #0
 8017140:	2010      	movcc	r0, #16
 8017142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017146:	bf3c      	itt	cc
 8017148:	021b      	lslcc	r3, r3, #8
 801714a:	3008      	addcc	r0, #8
 801714c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017150:	bf3c      	itt	cc
 8017152:	011b      	lslcc	r3, r3, #4
 8017154:	3004      	addcc	r0, #4
 8017156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801715a:	bf3c      	itt	cc
 801715c:	009b      	lslcc	r3, r3, #2
 801715e:	3002      	addcc	r0, #2
 8017160:	2b00      	cmp	r3, #0
 8017162:	db05      	blt.n	8017170 <__hi0bits+0x3c>
 8017164:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017168:	f100 0001 	add.w	r0, r0, #1
 801716c:	bf08      	it	eq
 801716e:	2020      	moveq	r0, #32
 8017170:	4770      	bx	lr

08017172 <__lo0bits>:
 8017172:	6803      	ldr	r3, [r0, #0]
 8017174:	4602      	mov	r2, r0
 8017176:	f013 0007 	ands.w	r0, r3, #7
 801717a:	d00b      	beq.n	8017194 <__lo0bits+0x22>
 801717c:	07d9      	lsls	r1, r3, #31
 801717e:	d421      	bmi.n	80171c4 <__lo0bits+0x52>
 8017180:	0798      	lsls	r0, r3, #30
 8017182:	bf49      	itett	mi
 8017184:	085b      	lsrmi	r3, r3, #1
 8017186:	089b      	lsrpl	r3, r3, #2
 8017188:	2001      	movmi	r0, #1
 801718a:	6013      	strmi	r3, [r2, #0]
 801718c:	bf5c      	itt	pl
 801718e:	6013      	strpl	r3, [r2, #0]
 8017190:	2002      	movpl	r0, #2
 8017192:	4770      	bx	lr
 8017194:	b299      	uxth	r1, r3
 8017196:	b909      	cbnz	r1, 801719c <__lo0bits+0x2a>
 8017198:	0c1b      	lsrs	r3, r3, #16
 801719a:	2010      	movs	r0, #16
 801719c:	b2d9      	uxtb	r1, r3
 801719e:	b909      	cbnz	r1, 80171a4 <__lo0bits+0x32>
 80171a0:	3008      	adds	r0, #8
 80171a2:	0a1b      	lsrs	r3, r3, #8
 80171a4:	0719      	lsls	r1, r3, #28
 80171a6:	bf04      	itt	eq
 80171a8:	091b      	lsreq	r3, r3, #4
 80171aa:	3004      	addeq	r0, #4
 80171ac:	0799      	lsls	r1, r3, #30
 80171ae:	bf04      	itt	eq
 80171b0:	089b      	lsreq	r3, r3, #2
 80171b2:	3002      	addeq	r0, #2
 80171b4:	07d9      	lsls	r1, r3, #31
 80171b6:	d403      	bmi.n	80171c0 <__lo0bits+0x4e>
 80171b8:	085b      	lsrs	r3, r3, #1
 80171ba:	f100 0001 	add.w	r0, r0, #1
 80171be:	d003      	beq.n	80171c8 <__lo0bits+0x56>
 80171c0:	6013      	str	r3, [r2, #0]
 80171c2:	4770      	bx	lr
 80171c4:	2000      	movs	r0, #0
 80171c6:	4770      	bx	lr
 80171c8:	2020      	movs	r0, #32
 80171ca:	4770      	bx	lr

080171cc <__i2b>:
 80171cc:	b510      	push	{r4, lr}
 80171ce:	460c      	mov	r4, r1
 80171d0:	2101      	movs	r1, #1
 80171d2:	f7ff ff07 	bl	8016fe4 <_Balloc>
 80171d6:	4602      	mov	r2, r0
 80171d8:	b928      	cbnz	r0, 80171e6 <__i2b+0x1a>
 80171da:	4b05      	ldr	r3, [pc, #20]	@ (80171f0 <__i2b+0x24>)
 80171dc:	4805      	ldr	r0, [pc, #20]	@ (80171f4 <__i2b+0x28>)
 80171de:	f240 1145 	movw	r1, #325	@ 0x145
 80171e2:	f7ff f84b 	bl	801627c <__assert_func>
 80171e6:	2301      	movs	r3, #1
 80171e8:	6144      	str	r4, [r0, #20]
 80171ea:	6103      	str	r3, [r0, #16]
 80171ec:	bd10      	pop	{r4, pc}
 80171ee:	bf00      	nop
 80171f0:	0801aa3c 	.word	0x0801aa3c
 80171f4:	0801aa4d 	.word	0x0801aa4d

080171f8 <__multiply>:
 80171f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171fc:	4614      	mov	r4, r2
 80171fe:	690a      	ldr	r2, [r1, #16]
 8017200:	6923      	ldr	r3, [r4, #16]
 8017202:	429a      	cmp	r2, r3
 8017204:	bfa8      	it	ge
 8017206:	4623      	movge	r3, r4
 8017208:	460f      	mov	r7, r1
 801720a:	bfa4      	itt	ge
 801720c:	460c      	movge	r4, r1
 801720e:	461f      	movge	r7, r3
 8017210:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017214:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017218:	68a3      	ldr	r3, [r4, #8]
 801721a:	6861      	ldr	r1, [r4, #4]
 801721c:	eb0a 0609 	add.w	r6, sl, r9
 8017220:	42b3      	cmp	r3, r6
 8017222:	b085      	sub	sp, #20
 8017224:	bfb8      	it	lt
 8017226:	3101      	addlt	r1, #1
 8017228:	f7ff fedc 	bl	8016fe4 <_Balloc>
 801722c:	b930      	cbnz	r0, 801723c <__multiply+0x44>
 801722e:	4602      	mov	r2, r0
 8017230:	4b44      	ldr	r3, [pc, #272]	@ (8017344 <__multiply+0x14c>)
 8017232:	4845      	ldr	r0, [pc, #276]	@ (8017348 <__multiply+0x150>)
 8017234:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017238:	f7ff f820 	bl	801627c <__assert_func>
 801723c:	f100 0514 	add.w	r5, r0, #20
 8017240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017244:	462b      	mov	r3, r5
 8017246:	2200      	movs	r2, #0
 8017248:	4543      	cmp	r3, r8
 801724a:	d321      	bcc.n	8017290 <__multiply+0x98>
 801724c:	f107 0114 	add.w	r1, r7, #20
 8017250:	f104 0214 	add.w	r2, r4, #20
 8017254:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017258:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801725c:	9302      	str	r3, [sp, #8]
 801725e:	1b13      	subs	r3, r2, r4
 8017260:	3b15      	subs	r3, #21
 8017262:	f023 0303 	bic.w	r3, r3, #3
 8017266:	3304      	adds	r3, #4
 8017268:	f104 0715 	add.w	r7, r4, #21
 801726c:	42ba      	cmp	r2, r7
 801726e:	bf38      	it	cc
 8017270:	2304      	movcc	r3, #4
 8017272:	9301      	str	r3, [sp, #4]
 8017274:	9b02      	ldr	r3, [sp, #8]
 8017276:	9103      	str	r1, [sp, #12]
 8017278:	428b      	cmp	r3, r1
 801727a:	d80c      	bhi.n	8017296 <__multiply+0x9e>
 801727c:	2e00      	cmp	r6, #0
 801727e:	dd03      	ble.n	8017288 <__multiply+0x90>
 8017280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017284:	2b00      	cmp	r3, #0
 8017286:	d05b      	beq.n	8017340 <__multiply+0x148>
 8017288:	6106      	str	r6, [r0, #16]
 801728a:	b005      	add	sp, #20
 801728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017290:	f843 2b04 	str.w	r2, [r3], #4
 8017294:	e7d8      	b.n	8017248 <__multiply+0x50>
 8017296:	f8b1 a000 	ldrh.w	sl, [r1]
 801729a:	f1ba 0f00 	cmp.w	sl, #0
 801729e:	d024      	beq.n	80172ea <__multiply+0xf2>
 80172a0:	f104 0e14 	add.w	lr, r4, #20
 80172a4:	46a9      	mov	r9, r5
 80172a6:	f04f 0c00 	mov.w	ip, #0
 80172aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80172ae:	f8d9 3000 	ldr.w	r3, [r9]
 80172b2:	fa1f fb87 	uxth.w	fp, r7
 80172b6:	b29b      	uxth	r3, r3
 80172b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80172bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80172c0:	f8d9 7000 	ldr.w	r7, [r9]
 80172c4:	4463      	add	r3, ip
 80172c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80172ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80172ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80172d2:	b29b      	uxth	r3, r3
 80172d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80172d8:	4572      	cmp	r2, lr
 80172da:	f849 3b04 	str.w	r3, [r9], #4
 80172de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80172e2:	d8e2      	bhi.n	80172aa <__multiply+0xb2>
 80172e4:	9b01      	ldr	r3, [sp, #4]
 80172e6:	f845 c003 	str.w	ip, [r5, r3]
 80172ea:	9b03      	ldr	r3, [sp, #12]
 80172ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80172f0:	3104      	adds	r1, #4
 80172f2:	f1b9 0f00 	cmp.w	r9, #0
 80172f6:	d021      	beq.n	801733c <__multiply+0x144>
 80172f8:	682b      	ldr	r3, [r5, #0]
 80172fa:	f104 0c14 	add.w	ip, r4, #20
 80172fe:	46ae      	mov	lr, r5
 8017300:	f04f 0a00 	mov.w	sl, #0
 8017304:	f8bc b000 	ldrh.w	fp, [ip]
 8017308:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801730c:	fb09 770b 	mla	r7, r9, fp, r7
 8017310:	4457      	add	r7, sl
 8017312:	b29b      	uxth	r3, r3
 8017314:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017318:	f84e 3b04 	str.w	r3, [lr], #4
 801731c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017324:	f8be 3000 	ldrh.w	r3, [lr]
 8017328:	fb09 330a 	mla	r3, r9, sl, r3
 801732c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017330:	4562      	cmp	r2, ip
 8017332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017336:	d8e5      	bhi.n	8017304 <__multiply+0x10c>
 8017338:	9f01      	ldr	r7, [sp, #4]
 801733a:	51eb      	str	r3, [r5, r7]
 801733c:	3504      	adds	r5, #4
 801733e:	e799      	b.n	8017274 <__multiply+0x7c>
 8017340:	3e01      	subs	r6, #1
 8017342:	e79b      	b.n	801727c <__multiply+0x84>
 8017344:	0801aa3c 	.word	0x0801aa3c
 8017348:	0801aa4d 	.word	0x0801aa4d

0801734c <__pow5mult>:
 801734c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017350:	4615      	mov	r5, r2
 8017352:	f012 0203 	ands.w	r2, r2, #3
 8017356:	4607      	mov	r7, r0
 8017358:	460e      	mov	r6, r1
 801735a:	d007      	beq.n	801736c <__pow5mult+0x20>
 801735c:	4c25      	ldr	r4, [pc, #148]	@ (80173f4 <__pow5mult+0xa8>)
 801735e:	3a01      	subs	r2, #1
 8017360:	2300      	movs	r3, #0
 8017362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017366:	f7ff fe9f 	bl	80170a8 <__multadd>
 801736a:	4606      	mov	r6, r0
 801736c:	10ad      	asrs	r5, r5, #2
 801736e:	d03d      	beq.n	80173ec <__pow5mult+0xa0>
 8017370:	69fc      	ldr	r4, [r7, #28]
 8017372:	b97c      	cbnz	r4, 8017394 <__pow5mult+0x48>
 8017374:	2010      	movs	r0, #16
 8017376:	f7fe f811 	bl	801539c <malloc>
 801737a:	4602      	mov	r2, r0
 801737c:	61f8      	str	r0, [r7, #28]
 801737e:	b928      	cbnz	r0, 801738c <__pow5mult+0x40>
 8017380:	4b1d      	ldr	r3, [pc, #116]	@ (80173f8 <__pow5mult+0xac>)
 8017382:	481e      	ldr	r0, [pc, #120]	@ (80173fc <__pow5mult+0xb0>)
 8017384:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017388:	f7fe ff78 	bl	801627c <__assert_func>
 801738c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017390:	6004      	str	r4, [r0, #0]
 8017392:	60c4      	str	r4, [r0, #12]
 8017394:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801739c:	b94c      	cbnz	r4, 80173b2 <__pow5mult+0x66>
 801739e:	f240 2171 	movw	r1, #625	@ 0x271
 80173a2:	4638      	mov	r0, r7
 80173a4:	f7ff ff12 	bl	80171cc <__i2b>
 80173a8:	2300      	movs	r3, #0
 80173aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80173ae:	4604      	mov	r4, r0
 80173b0:	6003      	str	r3, [r0, #0]
 80173b2:	f04f 0900 	mov.w	r9, #0
 80173b6:	07eb      	lsls	r3, r5, #31
 80173b8:	d50a      	bpl.n	80173d0 <__pow5mult+0x84>
 80173ba:	4631      	mov	r1, r6
 80173bc:	4622      	mov	r2, r4
 80173be:	4638      	mov	r0, r7
 80173c0:	f7ff ff1a 	bl	80171f8 <__multiply>
 80173c4:	4631      	mov	r1, r6
 80173c6:	4680      	mov	r8, r0
 80173c8:	4638      	mov	r0, r7
 80173ca:	f7ff fe4b 	bl	8017064 <_Bfree>
 80173ce:	4646      	mov	r6, r8
 80173d0:	106d      	asrs	r5, r5, #1
 80173d2:	d00b      	beq.n	80173ec <__pow5mult+0xa0>
 80173d4:	6820      	ldr	r0, [r4, #0]
 80173d6:	b938      	cbnz	r0, 80173e8 <__pow5mult+0x9c>
 80173d8:	4622      	mov	r2, r4
 80173da:	4621      	mov	r1, r4
 80173dc:	4638      	mov	r0, r7
 80173de:	f7ff ff0b 	bl	80171f8 <__multiply>
 80173e2:	6020      	str	r0, [r4, #0]
 80173e4:	f8c0 9000 	str.w	r9, [r0]
 80173e8:	4604      	mov	r4, r0
 80173ea:	e7e4      	b.n	80173b6 <__pow5mult+0x6a>
 80173ec:	4630      	mov	r0, r6
 80173ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173f2:	bf00      	nop
 80173f4:	0801aaa8 	.word	0x0801aaa8
 80173f8:	0801a8f8 	.word	0x0801a8f8
 80173fc:	0801aa4d 	.word	0x0801aa4d

08017400 <__lshift>:
 8017400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017404:	460c      	mov	r4, r1
 8017406:	6849      	ldr	r1, [r1, #4]
 8017408:	6923      	ldr	r3, [r4, #16]
 801740a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801740e:	68a3      	ldr	r3, [r4, #8]
 8017410:	4607      	mov	r7, r0
 8017412:	4691      	mov	r9, r2
 8017414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017418:	f108 0601 	add.w	r6, r8, #1
 801741c:	42b3      	cmp	r3, r6
 801741e:	db0b      	blt.n	8017438 <__lshift+0x38>
 8017420:	4638      	mov	r0, r7
 8017422:	f7ff fddf 	bl	8016fe4 <_Balloc>
 8017426:	4605      	mov	r5, r0
 8017428:	b948      	cbnz	r0, 801743e <__lshift+0x3e>
 801742a:	4602      	mov	r2, r0
 801742c:	4b28      	ldr	r3, [pc, #160]	@ (80174d0 <__lshift+0xd0>)
 801742e:	4829      	ldr	r0, [pc, #164]	@ (80174d4 <__lshift+0xd4>)
 8017430:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017434:	f7fe ff22 	bl	801627c <__assert_func>
 8017438:	3101      	adds	r1, #1
 801743a:	005b      	lsls	r3, r3, #1
 801743c:	e7ee      	b.n	801741c <__lshift+0x1c>
 801743e:	2300      	movs	r3, #0
 8017440:	f100 0114 	add.w	r1, r0, #20
 8017444:	f100 0210 	add.w	r2, r0, #16
 8017448:	4618      	mov	r0, r3
 801744a:	4553      	cmp	r3, sl
 801744c:	db33      	blt.n	80174b6 <__lshift+0xb6>
 801744e:	6920      	ldr	r0, [r4, #16]
 8017450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017454:	f104 0314 	add.w	r3, r4, #20
 8017458:	f019 091f 	ands.w	r9, r9, #31
 801745c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017464:	d02b      	beq.n	80174be <__lshift+0xbe>
 8017466:	f1c9 0e20 	rsb	lr, r9, #32
 801746a:	468a      	mov	sl, r1
 801746c:	2200      	movs	r2, #0
 801746e:	6818      	ldr	r0, [r3, #0]
 8017470:	fa00 f009 	lsl.w	r0, r0, r9
 8017474:	4310      	orrs	r0, r2
 8017476:	f84a 0b04 	str.w	r0, [sl], #4
 801747a:	f853 2b04 	ldr.w	r2, [r3], #4
 801747e:	459c      	cmp	ip, r3
 8017480:	fa22 f20e 	lsr.w	r2, r2, lr
 8017484:	d8f3      	bhi.n	801746e <__lshift+0x6e>
 8017486:	ebac 0304 	sub.w	r3, ip, r4
 801748a:	3b15      	subs	r3, #21
 801748c:	f023 0303 	bic.w	r3, r3, #3
 8017490:	3304      	adds	r3, #4
 8017492:	f104 0015 	add.w	r0, r4, #21
 8017496:	4584      	cmp	ip, r0
 8017498:	bf38      	it	cc
 801749a:	2304      	movcc	r3, #4
 801749c:	50ca      	str	r2, [r1, r3]
 801749e:	b10a      	cbz	r2, 80174a4 <__lshift+0xa4>
 80174a0:	f108 0602 	add.w	r6, r8, #2
 80174a4:	3e01      	subs	r6, #1
 80174a6:	4638      	mov	r0, r7
 80174a8:	612e      	str	r6, [r5, #16]
 80174aa:	4621      	mov	r1, r4
 80174ac:	f7ff fdda 	bl	8017064 <_Bfree>
 80174b0:	4628      	mov	r0, r5
 80174b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80174ba:	3301      	adds	r3, #1
 80174bc:	e7c5      	b.n	801744a <__lshift+0x4a>
 80174be:	3904      	subs	r1, #4
 80174c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80174c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80174c8:	459c      	cmp	ip, r3
 80174ca:	d8f9      	bhi.n	80174c0 <__lshift+0xc0>
 80174cc:	e7ea      	b.n	80174a4 <__lshift+0xa4>
 80174ce:	bf00      	nop
 80174d0:	0801aa3c 	.word	0x0801aa3c
 80174d4:	0801aa4d 	.word	0x0801aa4d

080174d8 <__mcmp>:
 80174d8:	690a      	ldr	r2, [r1, #16]
 80174da:	4603      	mov	r3, r0
 80174dc:	6900      	ldr	r0, [r0, #16]
 80174de:	1a80      	subs	r0, r0, r2
 80174e0:	b530      	push	{r4, r5, lr}
 80174e2:	d10e      	bne.n	8017502 <__mcmp+0x2a>
 80174e4:	3314      	adds	r3, #20
 80174e6:	3114      	adds	r1, #20
 80174e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80174ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80174f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80174f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80174f8:	4295      	cmp	r5, r2
 80174fa:	d003      	beq.n	8017504 <__mcmp+0x2c>
 80174fc:	d205      	bcs.n	801750a <__mcmp+0x32>
 80174fe:	f04f 30ff 	mov.w	r0, #4294967295
 8017502:	bd30      	pop	{r4, r5, pc}
 8017504:	42a3      	cmp	r3, r4
 8017506:	d3f3      	bcc.n	80174f0 <__mcmp+0x18>
 8017508:	e7fb      	b.n	8017502 <__mcmp+0x2a>
 801750a:	2001      	movs	r0, #1
 801750c:	e7f9      	b.n	8017502 <__mcmp+0x2a>
	...

08017510 <__mdiff>:
 8017510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017514:	4689      	mov	r9, r1
 8017516:	4606      	mov	r6, r0
 8017518:	4611      	mov	r1, r2
 801751a:	4648      	mov	r0, r9
 801751c:	4614      	mov	r4, r2
 801751e:	f7ff ffdb 	bl	80174d8 <__mcmp>
 8017522:	1e05      	subs	r5, r0, #0
 8017524:	d112      	bne.n	801754c <__mdiff+0x3c>
 8017526:	4629      	mov	r1, r5
 8017528:	4630      	mov	r0, r6
 801752a:	f7ff fd5b 	bl	8016fe4 <_Balloc>
 801752e:	4602      	mov	r2, r0
 8017530:	b928      	cbnz	r0, 801753e <__mdiff+0x2e>
 8017532:	4b3f      	ldr	r3, [pc, #252]	@ (8017630 <__mdiff+0x120>)
 8017534:	f240 2137 	movw	r1, #567	@ 0x237
 8017538:	483e      	ldr	r0, [pc, #248]	@ (8017634 <__mdiff+0x124>)
 801753a:	f7fe fe9f 	bl	801627c <__assert_func>
 801753e:	2301      	movs	r3, #1
 8017540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017544:	4610      	mov	r0, r2
 8017546:	b003      	add	sp, #12
 8017548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801754c:	bfbc      	itt	lt
 801754e:	464b      	movlt	r3, r9
 8017550:	46a1      	movlt	r9, r4
 8017552:	4630      	mov	r0, r6
 8017554:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017558:	bfba      	itte	lt
 801755a:	461c      	movlt	r4, r3
 801755c:	2501      	movlt	r5, #1
 801755e:	2500      	movge	r5, #0
 8017560:	f7ff fd40 	bl	8016fe4 <_Balloc>
 8017564:	4602      	mov	r2, r0
 8017566:	b918      	cbnz	r0, 8017570 <__mdiff+0x60>
 8017568:	4b31      	ldr	r3, [pc, #196]	@ (8017630 <__mdiff+0x120>)
 801756a:	f240 2145 	movw	r1, #581	@ 0x245
 801756e:	e7e3      	b.n	8017538 <__mdiff+0x28>
 8017570:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017574:	6926      	ldr	r6, [r4, #16]
 8017576:	60c5      	str	r5, [r0, #12]
 8017578:	f109 0310 	add.w	r3, r9, #16
 801757c:	f109 0514 	add.w	r5, r9, #20
 8017580:	f104 0e14 	add.w	lr, r4, #20
 8017584:	f100 0b14 	add.w	fp, r0, #20
 8017588:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801758c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017590:	9301      	str	r3, [sp, #4]
 8017592:	46d9      	mov	r9, fp
 8017594:	f04f 0c00 	mov.w	ip, #0
 8017598:	9b01      	ldr	r3, [sp, #4]
 801759a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801759e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80175a2:	9301      	str	r3, [sp, #4]
 80175a4:	fa1f f38a 	uxth.w	r3, sl
 80175a8:	4619      	mov	r1, r3
 80175aa:	b283      	uxth	r3, r0
 80175ac:	1acb      	subs	r3, r1, r3
 80175ae:	0c00      	lsrs	r0, r0, #16
 80175b0:	4463      	add	r3, ip
 80175b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80175b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80175c0:	4576      	cmp	r6, lr
 80175c2:	f849 3b04 	str.w	r3, [r9], #4
 80175c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80175ca:	d8e5      	bhi.n	8017598 <__mdiff+0x88>
 80175cc:	1b33      	subs	r3, r6, r4
 80175ce:	3b15      	subs	r3, #21
 80175d0:	f023 0303 	bic.w	r3, r3, #3
 80175d4:	3415      	adds	r4, #21
 80175d6:	3304      	adds	r3, #4
 80175d8:	42a6      	cmp	r6, r4
 80175da:	bf38      	it	cc
 80175dc:	2304      	movcc	r3, #4
 80175de:	441d      	add	r5, r3
 80175e0:	445b      	add	r3, fp
 80175e2:	461e      	mov	r6, r3
 80175e4:	462c      	mov	r4, r5
 80175e6:	4544      	cmp	r4, r8
 80175e8:	d30e      	bcc.n	8017608 <__mdiff+0xf8>
 80175ea:	f108 0103 	add.w	r1, r8, #3
 80175ee:	1b49      	subs	r1, r1, r5
 80175f0:	f021 0103 	bic.w	r1, r1, #3
 80175f4:	3d03      	subs	r5, #3
 80175f6:	45a8      	cmp	r8, r5
 80175f8:	bf38      	it	cc
 80175fa:	2100      	movcc	r1, #0
 80175fc:	440b      	add	r3, r1
 80175fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017602:	b191      	cbz	r1, 801762a <__mdiff+0x11a>
 8017604:	6117      	str	r7, [r2, #16]
 8017606:	e79d      	b.n	8017544 <__mdiff+0x34>
 8017608:	f854 1b04 	ldr.w	r1, [r4], #4
 801760c:	46e6      	mov	lr, ip
 801760e:	0c08      	lsrs	r0, r1, #16
 8017610:	fa1c fc81 	uxtah	ip, ip, r1
 8017614:	4471      	add	r1, lr
 8017616:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801761a:	b289      	uxth	r1, r1
 801761c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017620:	f846 1b04 	str.w	r1, [r6], #4
 8017624:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017628:	e7dd      	b.n	80175e6 <__mdiff+0xd6>
 801762a:	3f01      	subs	r7, #1
 801762c:	e7e7      	b.n	80175fe <__mdiff+0xee>
 801762e:	bf00      	nop
 8017630:	0801aa3c 	.word	0x0801aa3c
 8017634:	0801aa4d 	.word	0x0801aa4d

08017638 <__d2b>:
 8017638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801763c:	460f      	mov	r7, r1
 801763e:	2101      	movs	r1, #1
 8017640:	ec59 8b10 	vmov	r8, r9, d0
 8017644:	4616      	mov	r6, r2
 8017646:	f7ff fccd 	bl	8016fe4 <_Balloc>
 801764a:	4604      	mov	r4, r0
 801764c:	b930      	cbnz	r0, 801765c <__d2b+0x24>
 801764e:	4602      	mov	r2, r0
 8017650:	4b23      	ldr	r3, [pc, #140]	@ (80176e0 <__d2b+0xa8>)
 8017652:	4824      	ldr	r0, [pc, #144]	@ (80176e4 <__d2b+0xac>)
 8017654:	f240 310f 	movw	r1, #783	@ 0x30f
 8017658:	f7fe fe10 	bl	801627c <__assert_func>
 801765c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017664:	b10d      	cbz	r5, 801766a <__d2b+0x32>
 8017666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801766a:	9301      	str	r3, [sp, #4]
 801766c:	f1b8 0300 	subs.w	r3, r8, #0
 8017670:	d023      	beq.n	80176ba <__d2b+0x82>
 8017672:	4668      	mov	r0, sp
 8017674:	9300      	str	r3, [sp, #0]
 8017676:	f7ff fd7c 	bl	8017172 <__lo0bits>
 801767a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801767e:	b1d0      	cbz	r0, 80176b6 <__d2b+0x7e>
 8017680:	f1c0 0320 	rsb	r3, r0, #32
 8017684:	fa02 f303 	lsl.w	r3, r2, r3
 8017688:	430b      	orrs	r3, r1
 801768a:	40c2      	lsrs	r2, r0
 801768c:	6163      	str	r3, [r4, #20]
 801768e:	9201      	str	r2, [sp, #4]
 8017690:	9b01      	ldr	r3, [sp, #4]
 8017692:	61a3      	str	r3, [r4, #24]
 8017694:	2b00      	cmp	r3, #0
 8017696:	bf0c      	ite	eq
 8017698:	2201      	moveq	r2, #1
 801769a:	2202      	movne	r2, #2
 801769c:	6122      	str	r2, [r4, #16]
 801769e:	b1a5      	cbz	r5, 80176ca <__d2b+0x92>
 80176a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80176a4:	4405      	add	r5, r0
 80176a6:	603d      	str	r5, [r7, #0]
 80176a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80176ac:	6030      	str	r0, [r6, #0]
 80176ae:	4620      	mov	r0, r4
 80176b0:	b003      	add	sp, #12
 80176b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176b6:	6161      	str	r1, [r4, #20]
 80176b8:	e7ea      	b.n	8017690 <__d2b+0x58>
 80176ba:	a801      	add	r0, sp, #4
 80176bc:	f7ff fd59 	bl	8017172 <__lo0bits>
 80176c0:	9b01      	ldr	r3, [sp, #4]
 80176c2:	6163      	str	r3, [r4, #20]
 80176c4:	3020      	adds	r0, #32
 80176c6:	2201      	movs	r2, #1
 80176c8:	e7e8      	b.n	801769c <__d2b+0x64>
 80176ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80176ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80176d2:	6038      	str	r0, [r7, #0]
 80176d4:	6918      	ldr	r0, [r3, #16]
 80176d6:	f7ff fd2d 	bl	8017134 <__hi0bits>
 80176da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80176de:	e7e5      	b.n	80176ac <__d2b+0x74>
 80176e0:	0801aa3c 	.word	0x0801aa3c
 80176e4:	0801aa4d 	.word	0x0801aa4d

080176e8 <__ssputs_r>:
 80176e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176ec:	688e      	ldr	r6, [r1, #8]
 80176ee:	461f      	mov	r7, r3
 80176f0:	42be      	cmp	r6, r7
 80176f2:	680b      	ldr	r3, [r1, #0]
 80176f4:	4682      	mov	sl, r0
 80176f6:	460c      	mov	r4, r1
 80176f8:	4690      	mov	r8, r2
 80176fa:	d82d      	bhi.n	8017758 <__ssputs_r+0x70>
 80176fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017700:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017704:	d026      	beq.n	8017754 <__ssputs_r+0x6c>
 8017706:	6965      	ldr	r5, [r4, #20]
 8017708:	6909      	ldr	r1, [r1, #16]
 801770a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801770e:	eba3 0901 	sub.w	r9, r3, r1
 8017712:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017716:	1c7b      	adds	r3, r7, #1
 8017718:	444b      	add	r3, r9
 801771a:	106d      	asrs	r5, r5, #1
 801771c:	429d      	cmp	r5, r3
 801771e:	bf38      	it	cc
 8017720:	461d      	movcc	r5, r3
 8017722:	0553      	lsls	r3, r2, #21
 8017724:	d527      	bpl.n	8017776 <__ssputs_r+0x8e>
 8017726:	4629      	mov	r1, r5
 8017728:	f7fd fe6a 	bl	8015400 <_malloc_r>
 801772c:	4606      	mov	r6, r0
 801772e:	b360      	cbz	r0, 801778a <__ssputs_r+0xa2>
 8017730:	6921      	ldr	r1, [r4, #16]
 8017732:	464a      	mov	r2, r9
 8017734:	f7fe fd93 	bl	801625e <memcpy>
 8017738:	89a3      	ldrh	r3, [r4, #12]
 801773a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801773e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017742:	81a3      	strh	r3, [r4, #12]
 8017744:	6126      	str	r6, [r4, #16]
 8017746:	6165      	str	r5, [r4, #20]
 8017748:	444e      	add	r6, r9
 801774a:	eba5 0509 	sub.w	r5, r5, r9
 801774e:	6026      	str	r6, [r4, #0]
 8017750:	60a5      	str	r5, [r4, #8]
 8017752:	463e      	mov	r6, r7
 8017754:	42be      	cmp	r6, r7
 8017756:	d900      	bls.n	801775a <__ssputs_r+0x72>
 8017758:	463e      	mov	r6, r7
 801775a:	6820      	ldr	r0, [r4, #0]
 801775c:	4632      	mov	r2, r6
 801775e:	4641      	mov	r1, r8
 8017760:	f7fe fca9 	bl	80160b6 <memmove>
 8017764:	68a3      	ldr	r3, [r4, #8]
 8017766:	1b9b      	subs	r3, r3, r6
 8017768:	60a3      	str	r3, [r4, #8]
 801776a:	6823      	ldr	r3, [r4, #0]
 801776c:	4433      	add	r3, r6
 801776e:	6023      	str	r3, [r4, #0]
 8017770:	2000      	movs	r0, #0
 8017772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017776:	462a      	mov	r2, r5
 8017778:	f000 f9f9 	bl	8017b6e <_realloc_r>
 801777c:	4606      	mov	r6, r0
 801777e:	2800      	cmp	r0, #0
 8017780:	d1e0      	bne.n	8017744 <__ssputs_r+0x5c>
 8017782:	6921      	ldr	r1, [r4, #16]
 8017784:	4650      	mov	r0, sl
 8017786:	f7ff fbe3 	bl	8016f50 <_free_r>
 801778a:	230c      	movs	r3, #12
 801778c:	f8ca 3000 	str.w	r3, [sl]
 8017790:	89a3      	ldrh	r3, [r4, #12]
 8017792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017796:	81a3      	strh	r3, [r4, #12]
 8017798:	f04f 30ff 	mov.w	r0, #4294967295
 801779c:	e7e9      	b.n	8017772 <__ssputs_r+0x8a>
	...

080177a0 <_svfiprintf_r>:
 80177a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a4:	4698      	mov	r8, r3
 80177a6:	898b      	ldrh	r3, [r1, #12]
 80177a8:	061b      	lsls	r3, r3, #24
 80177aa:	b09d      	sub	sp, #116	@ 0x74
 80177ac:	4607      	mov	r7, r0
 80177ae:	460d      	mov	r5, r1
 80177b0:	4614      	mov	r4, r2
 80177b2:	d510      	bpl.n	80177d6 <_svfiprintf_r+0x36>
 80177b4:	690b      	ldr	r3, [r1, #16]
 80177b6:	b973      	cbnz	r3, 80177d6 <_svfiprintf_r+0x36>
 80177b8:	2140      	movs	r1, #64	@ 0x40
 80177ba:	f7fd fe21 	bl	8015400 <_malloc_r>
 80177be:	6028      	str	r0, [r5, #0]
 80177c0:	6128      	str	r0, [r5, #16]
 80177c2:	b930      	cbnz	r0, 80177d2 <_svfiprintf_r+0x32>
 80177c4:	230c      	movs	r3, #12
 80177c6:	603b      	str	r3, [r7, #0]
 80177c8:	f04f 30ff 	mov.w	r0, #4294967295
 80177cc:	b01d      	add	sp, #116	@ 0x74
 80177ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177d2:	2340      	movs	r3, #64	@ 0x40
 80177d4:	616b      	str	r3, [r5, #20]
 80177d6:	2300      	movs	r3, #0
 80177d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80177da:	2320      	movs	r3, #32
 80177dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80177e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80177e4:	2330      	movs	r3, #48	@ 0x30
 80177e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017984 <_svfiprintf_r+0x1e4>
 80177ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80177ee:	f04f 0901 	mov.w	r9, #1
 80177f2:	4623      	mov	r3, r4
 80177f4:	469a      	mov	sl, r3
 80177f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177fa:	b10a      	cbz	r2, 8017800 <_svfiprintf_r+0x60>
 80177fc:	2a25      	cmp	r2, #37	@ 0x25
 80177fe:	d1f9      	bne.n	80177f4 <_svfiprintf_r+0x54>
 8017800:	ebba 0b04 	subs.w	fp, sl, r4
 8017804:	d00b      	beq.n	801781e <_svfiprintf_r+0x7e>
 8017806:	465b      	mov	r3, fp
 8017808:	4622      	mov	r2, r4
 801780a:	4629      	mov	r1, r5
 801780c:	4638      	mov	r0, r7
 801780e:	f7ff ff6b 	bl	80176e8 <__ssputs_r>
 8017812:	3001      	adds	r0, #1
 8017814:	f000 80a7 	beq.w	8017966 <_svfiprintf_r+0x1c6>
 8017818:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801781a:	445a      	add	r2, fp
 801781c:	9209      	str	r2, [sp, #36]	@ 0x24
 801781e:	f89a 3000 	ldrb.w	r3, [sl]
 8017822:	2b00      	cmp	r3, #0
 8017824:	f000 809f 	beq.w	8017966 <_svfiprintf_r+0x1c6>
 8017828:	2300      	movs	r3, #0
 801782a:	f04f 32ff 	mov.w	r2, #4294967295
 801782e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017832:	f10a 0a01 	add.w	sl, sl, #1
 8017836:	9304      	str	r3, [sp, #16]
 8017838:	9307      	str	r3, [sp, #28]
 801783a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801783e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017840:	4654      	mov	r4, sl
 8017842:	2205      	movs	r2, #5
 8017844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017848:	484e      	ldr	r0, [pc, #312]	@ (8017984 <_svfiprintf_r+0x1e4>)
 801784a:	f7e8 fcd1 	bl	80001f0 <memchr>
 801784e:	9a04      	ldr	r2, [sp, #16]
 8017850:	b9d8      	cbnz	r0, 801788a <_svfiprintf_r+0xea>
 8017852:	06d0      	lsls	r0, r2, #27
 8017854:	bf44      	itt	mi
 8017856:	2320      	movmi	r3, #32
 8017858:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801785c:	0711      	lsls	r1, r2, #28
 801785e:	bf44      	itt	mi
 8017860:	232b      	movmi	r3, #43	@ 0x2b
 8017862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017866:	f89a 3000 	ldrb.w	r3, [sl]
 801786a:	2b2a      	cmp	r3, #42	@ 0x2a
 801786c:	d015      	beq.n	801789a <_svfiprintf_r+0xfa>
 801786e:	9a07      	ldr	r2, [sp, #28]
 8017870:	4654      	mov	r4, sl
 8017872:	2000      	movs	r0, #0
 8017874:	f04f 0c0a 	mov.w	ip, #10
 8017878:	4621      	mov	r1, r4
 801787a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801787e:	3b30      	subs	r3, #48	@ 0x30
 8017880:	2b09      	cmp	r3, #9
 8017882:	d94b      	bls.n	801791c <_svfiprintf_r+0x17c>
 8017884:	b1b0      	cbz	r0, 80178b4 <_svfiprintf_r+0x114>
 8017886:	9207      	str	r2, [sp, #28]
 8017888:	e014      	b.n	80178b4 <_svfiprintf_r+0x114>
 801788a:	eba0 0308 	sub.w	r3, r0, r8
 801788e:	fa09 f303 	lsl.w	r3, r9, r3
 8017892:	4313      	orrs	r3, r2
 8017894:	9304      	str	r3, [sp, #16]
 8017896:	46a2      	mov	sl, r4
 8017898:	e7d2      	b.n	8017840 <_svfiprintf_r+0xa0>
 801789a:	9b03      	ldr	r3, [sp, #12]
 801789c:	1d19      	adds	r1, r3, #4
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	9103      	str	r1, [sp, #12]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	bfbb      	ittet	lt
 80178a6:	425b      	neglt	r3, r3
 80178a8:	f042 0202 	orrlt.w	r2, r2, #2
 80178ac:	9307      	strge	r3, [sp, #28]
 80178ae:	9307      	strlt	r3, [sp, #28]
 80178b0:	bfb8      	it	lt
 80178b2:	9204      	strlt	r2, [sp, #16]
 80178b4:	7823      	ldrb	r3, [r4, #0]
 80178b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80178b8:	d10a      	bne.n	80178d0 <_svfiprintf_r+0x130>
 80178ba:	7863      	ldrb	r3, [r4, #1]
 80178bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80178be:	d132      	bne.n	8017926 <_svfiprintf_r+0x186>
 80178c0:	9b03      	ldr	r3, [sp, #12]
 80178c2:	1d1a      	adds	r2, r3, #4
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	9203      	str	r2, [sp, #12]
 80178c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80178cc:	3402      	adds	r4, #2
 80178ce:	9305      	str	r3, [sp, #20]
 80178d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017994 <_svfiprintf_r+0x1f4>
 80178d4:	7821      	ldrb	r1, [r4, #0]
 80178d6:	2203      	movs	r2, #3
 80178d8:	4650      	mov	r0, sl
 80178da:	f7e8 fc89 	bl	80001f0 <memchr>
 80178de:	b138      	cbz	r0, 80178f0 <_svfiprintf_r+0x150>
 80178e0:	9b04      	ldr	r3, [sp, #16]
 80178e2:	eba0 000a 	sub.w	r0, r0, sl
 80178e6:	2240      	movs	r2, #64	@ 0x40
 80178e8:	4082      	lsls	r2, r0
 80178ea:	4313      	orrs	r3, r2
 80178ec:	3401      	adds	r4, #1
 80178ee:	9304      	str	r3, [sp, #16]
 80178f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178f4:	4824      	ldr	r0, [pc, #144]	@ (8017988 <_svfiprintf_r+0x1e8>)
 80178f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80178fa:	2206      	movs	r2, #6
 80178fc:	f7e8 fc78 	bl	80001f0 <memchr>
 8017900:	2800      	cmp	r0, #0
 8017902:	d036      	beq.n	8017972 <_svfiprintf_r+0x1d2>
 8017904:	4b21      	ldr	r3, [pc, #132]	@ (801798c <_svfiprintf_r+0x1ec>)
 8017906:	bb1b      	cbnz	r3, 8017950 <_svfiprintf_r+0x1b0>
 8017908:	9b03      	ldr	r3, [sp, #12]
 801790a:	3307      	adds	r3, #7
 801790c:	f023 0307 	bic.w	r3, r3, #7
 8017910:	3308      	adds	r3, #8
 8017912:	9303      	str	r3, [sp, #12]
 8017914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017916:	4433      	add	r3, r6
 8017918:	9309      	str	r3, [sp, #36]	@ 0x24
 801791a:	e76a      	b.n	80177f2 <_svfiprintf_r+0x52>
 801791c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017920:	460c      	mov	r4, r1
 8017922:	2001      	movs	r0, #1
 8017924:	e7a8      	b.n	8017878 <_svfiprintf_r+0xd8>
 8017926:	2300      	movs	r3, #0
 8017928:	3401      	adds	r4, #1
 801792a:	9305      	str	r3, [sp, #20]
 801792c:	4619      	mov	r1, r3
 801792e:	f04f 0c0a 	mov.w	ip, #10
 8017932:	4620      	mov	r0, r4
 8017934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017938:	3a30      	subs	r2, #48	@ 0x30
 801793a:	2a09      	cmp	r2, #9
 801793c:	d903      	bls.n	8017946 <_svfiprintf_r+0x1a6>
 801793e:	2b00      	cmp	r3, #0
 8017940:	d0c6      	beq.n	80178d0 <_svfiprintf_r+0x130>
 8017942:	9105      	str	r1, [sp, #20]
 8017944:	e7c4      	b.n	80178d0 <_svfiprintf_r+0x130>
 8017946:	fb0c 2101 	mla	r1, ip, r1, r2
 801794a:	4604      	mov	r4, r0
 801794c:	2301      	movs	r3, #1
 801794e:	e7f0      	b.n	8017932 <_svfiprintf_r+0x192>
 8017950:	ab03      	add	r3, sp, #12
 8017952:	9300      	str	r3, [sp, #0]
 8017954:	462a      	mov	r2, r5
 8017956:	4b0e      	ldr	r3, [pc, #56]	@ (8017990 <_svfiprintf_r+0x1f0>)
 8017958:	a904      	add	r1, sp, #16
 801795a:	4638      	mov	r0, r7
 801795c:	f7fd feba 	bl	80156d4 <_printf_float>
 8017960:	1c42      	adds	r2, r0, #1
 8017962:	4606      	mov	r6, r0
 8017964:	d1d6      	bne.n	8017914 <_svfiprintf_r+0x174>
 8017966:	89ab      	ldrh	r3, [r5, #12]
 8017968:	065b      	lsls	r3, r3, #25
 801796a:	f53f af2d 	bmi.w	80177c8 <_svfiprintf_r+0x28>
 801796e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017970:	e72c      	b.n	80177cc <_svfiprintf_r+0x2c>
 8017972:	ab03      	add	r3, sp, #12
 8017974:	9300      	str	r3, [sp, #0]
 8017976:	462a      	mov	r2, r5
 8017978:	4b05      	ldr	r3, [pc, #20]	@ (8017990 <_svfiprintf_r+0x1f0>)
 801797a:	a904      	add	r1, sp, #16
 801797c:	4638      	mov	r0, r7
 801797e:	f7fe f941 	bl	8015c04 <_printf_i>
 8017982:	e7ed      	b.n	8017960 <_svfiprintf_r+0x1c0>
 8017984:	0801aba8 	.word	0x0801aba8
 8017988:	0801abb2 	.word	0x0801abb2
 801798c:	080156d5 	.word	0x080156d5
 8017990:	080176e9 	.word	0x080176e9
 8017994:	0801abae 	.word	0x0801abae

08017998 <__sflush_r>:
 8017998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179a0:	0716      	lsls	r6, r2, #28
 80179a2:	4605      	mov	r5, r0
 80179a4:	460c      	mov	r4, r1
 80179a6:	d454      	bmi.n	8017a52 <__sflush_r+0xba>
 80179a8:	684b      	ldr	r3, [r1, #4]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	dc02      	bgt.n	80179b4 <__sflush_r+0x1c>
 80179ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	dd48      	ble.n	8017a46 <__sflush_r+0xae>
 80179b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179b6:	2e00      	cmp	r6, #0
 80179b8:	d045      	beq.n	8017a46 <__sflush_r+0xae>
 80179ba:	2300      	movs	r3, #0
 80179bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80179c0:	682f      	ldr	r7, [r5, #0]
 80179c2:	6a21      	ldr	r1, [r4, #32]
 80179c4:	602b      	str	r3, [r5, #0]
 80179c6:	d030      	beq.n	8017a2a <__sflush_r+0x92>
 80179c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80179ca:	89a3      	ldrh	r3, [r4, #12]
 80179cc:	0759      	lsls	r1, r3, #29
 80179ce:	d505      	bpl.n	80179dc <__sflush_r+0x44>
 80179d0:	6863      	ldr	r3, [r4, #4]
 80179d2:	1ad2      	subs	r2, r2, r3
 80179d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80179d6:	b10b      	cbz	r3, 80179dc <__sflush_r+0x44>
 80179d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80179da:	1ad2      	subs	r2, r2, r3
 80179dc:	2300      	movs	r3, #0
 80179de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179e0:	6a21      	ldr	r1, [r4, #32]
 80179e2:	4628      	mov	r0, r5
 80179e4:	47b0      	blx	r6
 80179e6:	1c43      	adds	r3, r0, #1
 80179e8:	89a3      	ldrh	r3, [r4, #12]
 80179ea:	d106      	bne.n	80179fa <__sflush_r+0x62>
 80179ec:	6829      	ldr	r1, [r5, #0]
 80179ee:	291d      	cmp	r1, #29
 80179f0:	d82b      	bhi.n	8017a4a <__sflush_r+0xb2>
 80179f2:	4a2a      	ldr	r2, [pc, #168]	@ (8017a9c <__sflush_r+0x104>)
 80179f4:	410a      	asrs	r2, r1
 80179f6:	07d6      	lsls	r6, r2, #31
 80179f8:	d427      	bmi.n	8017a4a <__sflush_r+0xb2>
 80179fa:	2200      	movs	r2, #0
 80179fc:	6062      	str	r2, [r4, #4]
 80179fe:	04d9      	lsls	r1, r3, #19
 8017a00:	6922      	ldr	r2, [r4, #16]
 8017a02:	6022      	str	r2, [r4, #0]
 8017a04:	d504      	bpl.n	8017a10 <__sflush_r+0x78>
 8017a06:	1c42      	adds	r2, r0, #1
 8017a08:	d101      	bne.n	8017a0e <__sflush_r+0x76>
 8017a0a:	682b      	ldr	r3, [r5, #0]
 8017a0c:	b903      	cbnz	r3, 8017a10 <__sflush_r+0x78>
 8017a0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017a10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017a12:	602f      	str	r7, [r5, #0]
 8017a14:	b1b9      	cbz	r1, 8017a46 <__sflush_r+0xae>
 8017a16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a1a:	4299      	cmp	r1, r3
 8017a1c:	d002      	beq.n	8017a24 <__sflush_r+0x8c>
 8017a1e:	4628      	mov	r0, r5
 8017a20:	f7ff fa96 	bl	8016f50 <_free_r>
 8017a24:	2300      	movs	r3, #0
 8017a26:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a28:	e00d      	b.n	8017a46 <__sflush_r+0xae>
 8017a2a:	2301      	movs	r3, #1
 8017a2c:	4628      	mov	r0, r5
 8017a2e:	47b0      	blx	r6
 8017a30:	4602      	mov	r2, r0
 8017a32:	1c50      	adds	r0, r2, #1
 8017a34:	d1c9      	bne.n	80179ca <__sflush_r+0x32>
 8017a36:	682b      	ldr	r3, [r5, #0]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d0c6      	beq.n	80179ca <__sflush_r+0x32>
 8017a3c:	2b1d      	cmp	r3, #29
 8017a3e:	d001      	beq.n	8017a44 <__sflush_r+0xac>
 8017a40:	2b16      	cmp	r3, #22
 8017a42:	d11e      	bne.n	8017a82 <__sflush_r+0xea>
 8017a44:	602f      	str	r7, [r5, #0]
 8017a46:	2000      	movs	r0, #0
 8017a48:	e022      	b.n	8017a90 <__sflush_r+0xf8>
 8017a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a4e:	b21b      	sxth	r3, r3
 8017a50:	e01b      	b.n	8017a8a <__sflush_r+0xf2>
 8017a52:	690f      	ldr	r7, [r1, #16]
 8017a54:	2f00      	cmp	r7, #0
 8017a56:	d0f6      	beq.n	8017a46 <__sflush_r+0xae>
 8017a58:	0793      	lsls	r3, r2, #30
 8017a5a:	680e      	ldr	r6, [r1, #0]
 8017a5c:	bf08      	it	eq
 8017a5e:	694b      	ldreq	r3, [r1, #20]
 8017a60:	600f      	str	r7, [r1, #0]
 8017a62:	bf18      	it	ne
 8017a64:	2300      	movne	r3, #0
 8017a66:	eba6 0807 	sub.w	r8, r6, r7
 8017a6a:	608b      	str	r3, [r1, #8]
 8017a6c:	f1b8 0f00 	cmp.w	r8, #0
 8017a70:	dde9      	ble.n	8017a46 <__sflush_r+0xae>
 8017a72:	6a21      	ldr	r1, [r4, #32]
 8017a74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017a76:	4643      	mov	r3, r8
 8017a78:	463a      	mov	r2, r7
 8017a7a:	4628      	mov	r0, r5
 8017a7c:	47b0      	blx	r6
 8017a7e:	2800      	cmp	r0, #0
 8017a80:	dc08      	bgt.n	8017a94 <__sflush_r+0xfc>
 8017a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a8a:	81a3      	strh	r3, [r4, #12]
 8017a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8017a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a94:	4407      	add	r7, r0
 8017a96:	eba8 0800 	sub.w	r8, r8, r0
 8017a9a:	e7e7      	b.n	8017a6c <__sflush_r+0xd4>
 8017a9c:	dfbffffe 	.word	0xdfbffffe

08017aa0 <_fflush_r>:
 8017aa0:	b538      	push	{r3, r4, r5, lr}
 8017aa2:	690b      	ldr	r3, [r1, #16]
 8017aa4:	4605      	mov	r5, r0
 8017aa6:	460c      	mov	r4, r1
 8017aa8:	b913      	cbnz	r3, 8017ab0 <_fflush_r+0x10>
 8017aaa:	2500      	movs	r5, #0
 8017aac:	4628      	mov	r0, r5
 8017aae:	bd38      	pop	{r3, r4, r5, pc}
 8017ab0:	b118      	cbz	r0, 8017aba <_fflush_r+0x1a>
 8017ab2:	6a03      	ldr	r3, [r0, #32]
 8017ab4:	b90b      	cbnz	r3, 8017aba <_fflush_r+0x1a>
 8017ab6:	f7fe fa51 	bl	8015f5c <__sinit>
 8017aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d0f3      	beq.n	8017aaa <_fflush_r+0xa>
 8017ac2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017ac4:	07d0      	lsls	r0, r2, #31
 8017ac6:	d404      	bmi.n	8017ad2 <_fflush_r+0x32>
 8017ac8:	0599      	lsls	r1, r3, #22
 8017aca:	d402      	bmi.n	8017ad2 <_fflush_r+0x32>
 8017acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ace:	f7fe fbbc 	bl	801624a <__retarget_lock_acquire_recursive>
 8017ad2:	4628      	mov	r0, r5
 8017ad4:	4621      	mov	r1, r4
 8017ad6:	f7ff ff5f 	bl	8017998 <__sflush_r>
 8017ada:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017adc:	07da      	lsls	r2, r3, #31
 8017ade:	4605      	mov	r5, r0
 8017ae0:	d4e4      	bmi.n	8017aac <_fflush_r+0xc>
 8017ae2:	89a3      	ldrh	r3, [r4, #12]
 8017ae4:	059b      	lsls	r3, r3, #22
 8017ae6:	d4e1      	bmi.n	8017aac <_fflush_r+0xc>
 8017ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017aea:	f7fe fbaf 	bl	801624c <__retarget_lock_release_recursive>
 8017aee:	e7dd      	b.n	8017aac <_fflush_r+0xc>

08017af0 <fiprintf>:
 8017af0:	b40e      	push	{r1, r2, r3}
 8017af2:	b503      	push	{r0, r1, lr}
 8017af4:	4601      	mov	r1, r0
 8017af6:	ab03      	add	r3, sp, #12
 8017af8:	4805      	ldr	r0, [pc, #20]	@ (8017b10 <fiprintf+0x20>)
 8017afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8017afe:	6800      	ldr	r0, [r0, #0]
 8017b00:	9301      	str	r3, [sp, #4]
 8017b02:	f000 f899 	bl	8017c38 <_vfiprintf_r>
 8017b06:	b002      	add	sp, #8
 8017b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b0c:	b003      	add	sp, #12
 8017b0e:	4770      	bx	lr
 8017b10:	200000ec 	.word	0x200000ec

08017b14 <abort>:
 8017b14:	b508      	push	{r3, lr}
 8017b16:	2006      	movs	r0, #6
 8017b18:	f000 fa62 	bl	8017fe0 <raise>
 8017b1c:	2001      	movs	r0, #1
 8017b1e:	f7eb fedd 	bl	80038dc <_exit>

08017b22 <_calloc_r>:
 8017b22:	b570      	push	{r4, r5, r6, lr}
 8017b24:	fba1 5402 	umull	r5, r4, r1, r2
 8017b28:	b93c      	cbnz	r4, 8017b3a <_calloc_r+0x18>
 8017b2a:	4629      	mov	r1, r5
 8017b2c:	f7fd fc68 	bl	8015400 <_malloc_r>
 8017b30:	4606      	mov	r6, r0
 8017b32:	b928      	cbnz	r0, 8017b40 <_calloc_r+0x1e>
 8017b34:	2600      	movs	r6, #0
 8017b36:	4630      	mov	r0, r6
 8017b38:	bd70      	pop	{r4, r5, r6, pc}
 8017b3a:	220c      	movs	r2, #12
 8017b3c:	6002      	str	r2, [r0, #0]
 8017b3e:	e7f9      	b.n	8017b34 <_calloc_r+0x12>
 8017b40:	462a      	mov	r2, r5
 8017b42:	4621      	mov	r1, r4
 8017b44:	f7fe fad1 	bl	80160ea <memset>
 8017b48:	e7f5      	b.n	8017b36 <_calloc_r+0x14>

08017b4a <__ascii_mbtowc>:
 8017b4a:	b082      	sub	sp, #8
 8017b4c:	b901      	cbnz	r1, 8017b50 <__ascii_mbtowc+0x6>
 8017b4e:	a901      	add	r1, sp, #4
 8017b50:	b142      	cbz	r2, 8017b64 <__ascii_mbtowc+0x1a>
 8017b52:	b14b      	cbz	r3, 8017b68 <__ascii_mbtowc+0x1e>
 8017b54:	7813      	ldrb	r3, [r2, #0]
 8017b56:	600b      	str	r3, [r1, #0]
 8017b58:	7812      	ldrb	r2, [r2, #0]
 8017b5a:	1e10      	subs	r0, r2, #0
 8017b5c:	bf18      	it	ne
 8017b5e:	2001      	movne	r0, #1
 8017b60:	b002      	add	sp, #8
 8017b62:	4770      	bx	lr
 8017b64:	4610      	mov	r0, r2
 8017b66:	e7fb      	b.n	8017b60 <__ascii_mbtowc+0x16>
 8017b68:	f06f 0001 	mvn.w	r0, #1
 8017b6c:	e7f8      	b.n	8017b60 <__ascii_mbtowc+0x16>

08017b6e <_realloc_r>:
 8017b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b72:	4680      	mov	r8, r0
 8017b74:	4615      	mov	r5, r2
 8017b76:	460c      	mov	r4, r1
 8017b78:	b921      	cbnz	r1, 8017b84 <_realloc_r+0x16>
 8017b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b7e:	4611      	mov	r1, r2
 8017b80:	f7fd bc3e 	b.w	8015400 <_malloc_r>
 8017b84:	b92a      	cbnz	r2, 8017b92 <_realloc_r+0x24>
 8017b86:	f7ff f9e3 	bl	8016f50 <_free_r>
 8017b8a:	2400      	movs	r4, #0
 8017b8c:	4620      	mov	r0, r4
 8017b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b92:	f000 fa41 	bl	8018018 <_malloc_usable_size_r>
 8017b96:	4285      	cmp	r5, r0
 8017b98:	4606      	mov	r6, r0
 8017b9a:	d802      	bhi.n	8017ba2 <_realloc_r+0x34>
 8017b9c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017ba0:	d8f4      	bhi.n	8017b8c <_realloc_r+0x1e>
 8017ba2:	4629      	mov	r1, r5
 8017ba4:	4640      	mov	r0, r8
 8017ba6:	f7fd fc2b 	bl	8015400 <_malloc_r>
 8017baa:	4607      	mov	r7, r0
 8017bac:	2800      	cmp	r0, #0
 8017bae:	d0ec      	beq.n	8017b8a <_realloc_r+0x1c>
 8017bb0:	42b5      	cmp	r5, r6
 8017bb2:	462a      	mov	r2, r5
 8017bb4:	4621      	mov	r1, r4
 8017bb6:	bf28      	it	cs
 8017bb8:	4632      	movcs	r2, r6
 8017bba:	f7fe fb50 	bl	801625e <memcpy>
 8017bbe:	4621      	mov	r1, r4
 8017bc0:	4640      	mov	r0, r8
 8017bc2:	f7ff f9c5 	bl	8016f50 <_free_r>
 8017bc6:	463c      	mov	r4, r7
 8017bc8:	e7e0      	b.n	8017b8c <_realloc_r+0x1e>

08017bca <__ascii_wctomb>:
 8017bca:	4603      	mov	r3, r0
 8017bcc:	4608      	mov	r0, r1
 8017bce:	b141      	cbz	r1, 8017be2 <__ascii_wctomb+0x18>
 8017bd0:	2aff      	cmp	r2, #255	@ 0xff
 8017bd2:	d904      	bls.n	8017bde <__ascii_wctomb+0x14>
 8017bd4:	228a      	movs	r2, #138	@ 0x8a
 8017bd6:	601a      	str	r2, [r3, #0]
 8017bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8017bdc:	4770      	bx	lr
 8017bde:	700a      	strb	r2, [r1, #0]
 8017be0:	2001      	movs	r0, #1
 8017be2:	4770      	bx	lr

08017be4 <__sfputc_r>:
 8017be4:	6893      	ldr	r3, [r2, #8]
 8017be6:	3b01      	subs	r3, #1
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	b410      	push	{r4}
 8017bec:	6093      	str	r3, [r2, #8]
 8017bee:	da08      	bge.n	8017c02 <__sfputc_r+0x1e>
 8017bf0:	6994      	ldr	r4, [r2, #24]
 8017bf2:	42a3      	cmp	r3, r4
 8017bf4:	db01      	blt.n	8017bfa <__sfputc_r+0x16>
 8017bf6:	290a      	cmp	r1, #10
 8017bf8:	d103      	bne.n	8017c02 <__sfputc_r+0x1e>
 8017bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bfe:	f000 b933 	b.w	8017e68 <__swbuf_r>
 8017c02:	6813      	ldr	r3, [r2, #0]
 8017c04:	1c58      	adds	r0, r3, #1
 8017c06:	6010      	str	r0, [r2, #0]
 8017c08:	7019      	strb	r1, [r3, #0]
 8017c0a:	4608      	mov	r0, r1
 8017c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c10:	4770      	bx	lr

08017c12 <__sfputs_r>:
 8017c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c14:	4606      	mov	r6, r0
 8017c16:	460f      	mov	r7, r1
 8017c18:	4614      	mov	r4, r2
 8017c1a:	18d5      	adds	r5, r2, r3
 8017c1c:	42ac      	cmp	r4, r5
 8017c1e:	d101      	bne.n	8017c24 <__sfputs_r+0x12>
 8017c20:	2000      	movs	r0, #0
 8017c22:	e007      	b.n	8017c34 <__sfputs_r+0x22>
 8017c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c28:	463a      	mov	r2, r7
 8017c2a:	4630      	mov	r0, r6
 8017c2c:	f7ff ffda 	bl	8017be4 <__sfputc_r>
 8017c30:	1c43      	adds	r3, r0, #1
 8017c32:	d1f3      	bne.n	8017c1c <__sfputs_r+0xa>
 8017c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c38 <_vfiprintf_r>:
 8017c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c3c:	460d      	mov	r5, r1
 8017c3e:	b09d      	sub	sp, #116	@ 0x74
 8017c40:	4614      	mov	r4, r2
 8017c42:	4698      	mov	r8, r3
 8017c44:	4606      	mov	r6, r0
 8017c46:	b118      	cbz	r0, 8017c50 <_vfiprintf_r+0x18>
 8017c48:	6a03      	ldr	r3, [r0, #32]
 8017c4a:	b90b      	cbnz	r3, 8017c50 <_vfiprintf_r+0x18>
 8017c4c:	f7fe f986 	bl	8015f5c <__sinit>
 8017c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c52:	07d9      	lsls	r1, r3, #31
 8017c54:	d405      	bmi.n	8017c62 <_vfiprintf_r+0x2a>
 8017c56:	89ab      	ldrh	r3, [r5, #12]
 8017c58:	059a      	lsls	r2, r3, #22
 8017c5a:	d402      	bmi.n	8017c62 <_vfiprintf_r+0x2a>
 8017c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c5e:	f7fe faf4 	bl	801624a <__retarget_lock_acquire_recursive>
 8017c62:	89ab      	ldrh	r3, [r5, #12]
 8017c64:	071b      	lsls	r3, r3, #28
 8017c66:	d501      	bpl.n	8017c6c <_vfiprintf_r+0x34>
 8017c68:	692b      	ldr	r3, [r5, #16]
 8017c6a:	b99b      	cbnz	r3, 8017c94 <_vfiprintf_r+0x5c>
 8017c6c:	4629      	mov	r1, r5
 8017c6e:	4630      	mov	r0, r6
 8017c70:	f000 f938 	bl	8017ee4 <__swsetup_r>
 8017c74:	b170      	cbz	r0, 8017c94 <_vfiprintf_r+0x5c>
 8017c76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c78:	07dc      	lsls	r4, r3, #31
 8017c7a:	d504      	bpl.n	8017c86 <_vfiprintf_r+0x4e>
 8017c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c80:	b01d      	add	sp, #116	@ 0x74
 8017c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c86:	89ab      	ldrh	r3, [r5, #12]
 8017c88:	0598      	lsls	r0, r3, #22
 8017c8a:	d4f7      	bmi.n	8017c7c <_vfiprintf_r+0x44>
 8017c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c8e:	f7fe fadd 	bl	801624c <__retarget_lock_release_recursive>
 8017c92:	e7f3      	b.n	8017c7c <_vfiprintf_r+0x44>
 8017c94:	2300      	movs	r3, #0
 8017c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c98:	2320      	movs	r3, #32
 8017c9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ca2:	2330      	movs	r3, #48	@ 0x30
 8017ca4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017e54 <_vfiprintf_r+0x21c>
 8017ca8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017cac:	f04f 0901 	mov.w	r9, #1
 8017cb0:	4623      	mov	r3, r4
 8017cb2:	469a      	mov	sl, r3
 8017cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cb8:	b10a      	cbz	r2, 8017cbe <_vfiprintf_r+0x86>
 8017cba:	2a25      	cmp	r2, #37	@ 0x25
 8017cbc:	d1f9      	bne.n	8017cb2 <_vfiprintf_r+0x7a>
 8017cbe:	ebba 0b04 	subs.w	fp, sl, r4
 8017cc2:	d00b      	beq.n	8017cdc <_vfiprintf_r+0xa4>
 8017cc4:	465b      	mov	r3, fp
 8017cc6:	4622      	mov	r2, r4
 8017cc8:	4629      	mov	r1, r5
 8017cca:	4630      	mov	r0, r6
 8017ccc:	f7ff ffa1 	bl	8017c12 <__sfputs_r>
 8017cd0:	3001      	adds	r0, #1
 8017cd2:	f000 80a7 	beq.w	8017e24 <_vfiprintf_r+0x1ec>
 8017cd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017cd8:	445a      	add	r2, fp
 8017cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8017cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	f000 809f 	beq.w	8017e24 <_vfiprintf_r+0x1ec>
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8017cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cf0:	f10a 0a01 	add.w	sl, sl, #1
 8017cf4:	9304      	str	r3, [sp, #16]
 8017cf6:	9307      	str	r3, [sp, #28]
 8017cf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017cfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8017cfe:	4654      	mov	r4, sl
 8017d00:	2205      	movs	r2, #5
 8017d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d06:	4853      	ldr	r0, [pc, #332]	@ (8017e54 <_vfiprintf_r+0x21c>)
 8017d08:	f7e8 fa72 	bl	80001f0 <memchr>
 8017d0c:	9a04      	ldr	r2, [sp, #16]
 8017d0e:	b9d8      	cbnz	r0, 8017d48 <_vfiprintf_r+0x110>
 8017d10:	06d1      	lsls	r1, r2, #27
 8017d12:	bf44      	itt	mi
 8017d14:	2320      	movmi	r3, #32
 8017d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d1a:	0713      	lsls	r3, r2, #28
 8017d1c:	bf44      	itt	mi
 8017d1e:	232b      	movmi	r3, #43	@ 0x2b
 8017d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d24:	f89a 3000 	ldrb.w	r3, [sl]
 8017d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d2a:	d015      	beq.n	8017d58 <_vfiprintf_r+0x120>
 8017d2c:	9a07      	ldr	r2, [sp, #28]
 8017d2e:	4654      	mov	r4, sl
 8017d30:	2000      	movs	r0, #0
 8017d32:	f04f 0c0a 	mov.w	ip, #10
 8017d36:	4621      	mov	r1, r4
 8017d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d3c:	3b30      	subs	r3, #48	@ 0x30
 8017d3e:	2b09      	cmp	r3, #9
 8017d40:	d94b      	bls.n	8017dda <_vfiprintf_r+0x1a2>
 8017d42:	b1b0      	cbz	r0, 8017d72 <_vfiprintf_r+0x13a>
 8017d44:	9207      	str	r2, [sp, #28]
 8017d46:	e014      	b.n	8017d72 <_vfiprintf_r+0x13a>
 8017d48:	eba0 0308 	sub.w	r3, r0, r8
 8017d4c:	fa09 f303 	lsl.w	r3, r9, r3
 8017d50:	4313      	orrs	r3, r2
 8017d52:	9304      	str	r3, [sp, #16]
 8017d54:	46a2      	mov	sl, r4
 8017d56:	e7d2      	b.n	8017cfe <_vfiprintf_r+0xc6>
 8017d58:	9b03      	ldr	r3, [sp, #12]
 8017d5a:	1d19      	adds	r1, r3, #4
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	9103      	str	r1, [sp, #12]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	bfbb      	ittet	lt
 8017d64:	425b      	neglt	r3, r3
 8017d66:	f042 0202 	orrlt.w	r2, r2, #2
 8017d6a:	9307      	strge	r3, [sp, #28]
 8017d6c:	9307      	strlt	r3, [sp, #28]
 8017d6e:	bfb8      	it	lt
 8017d70:	9204      	strlt	r2, [sp, #16]
 8017d72:	7823      	ldrb	r3, [r4, #0]
 8017d74:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d76:	d10a      	bne.n	8017d8e <_vfiprintf_r+0x156>
 8017d78:	7863      	ldrb	r3, [r4, #1]
 8017d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d7c:	d132      	bne.n	8017de4 <_vfiprintf_r+0x1ac>
 8017d7e:	9b03      	ldr	r3, [sp, #12]
 8017d80:	1d1a      	adds	r2, r3, #4
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	9203      	str	r2, [sp, #12]
 8017d86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017d8a:	3402      	adds	r4, #2
 8017d8c:	9305      	str	r3, [sp, #20]
 8017d8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017e64 <_vfiprintf_r+0x22c>
 8017d92:	7821      	ldrb	r1, [r4, #0]
 8017d94:	2203      	movs	r2, #3
 8017d96:	4650      	mov	r0, sl
 8017d98:	f7e8 fa2a 	bl	80001f0 <memchr>
 8017d9c:	b138      	cbz	r0, 8017dae <_vfiprintf_r+0x176>
 8017d9e:	9b04      	ldr	r3, [sp, #16]
 8017da0:	eba0 000a 	sub.w	r0, r0, sl
 8017da4:	2240      	movs	r2, #64	@ 0x40
 8017da6:	4082      	lsls	r2, r0
 8017da8:	4313      	orrs	r3, r2
 8017daa:	3401      	adds	r4, #1
 8017dac:	9304      	str	r3, [sp, #16]
 8017dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017db2:	4829      	ldr	r0, [pc, #164]	@ (8017e58 <_vfiprintf_r+0x220>)
 8017db4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017db8:	2206      	movs	r2, #6
 8017dba:	f7e8 fa19 	bl	80001f0 <memchr>
 8017dbe:	2800      	cmp	r0, #0
 8017dc0:	d03f      	beq.n	8017e42 <_vfiprintf_r+0x20a>
 8017dc2:	4b26      	ldr	r3, [pc, #152]	@ (8017e5c <_vfiprintf_r+0x224>)
 8017dc4:	bb1b      	cbnz	r3, 8017e0e <_vfiprintf_r+0x1d6>
 8017dc6:	9b03      	ldr	r3, [sp, #12]
 8017dc8:	3307      	adds	r3, #7
 8017dca:	f023 0307 	bic.w	r3, r3, #7
 8017dce:	3308      	adds	r3, #8
 8017dd0:	9303      	str	r3, [sp, #12]
 8017dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017dd4:	443b      	add	r3, r7
 8017dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017dd8:	e76a      	b.n	8017cb0 <_vfiprintf_r+0x78>
 8017dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8017dde:	460c      	mov	r4, r1
 8017de0:	2001      	movs	r0, #1
 8017de2:	e7a8      	b.n	8017d36 <_vfiprintf_r+0xfe>
 8017de4:	2300      	movs	r3, #0
 8017de6:	3401      	adds	r4, #1
 8017de8:	9305      	str	r3, [sp, #20]
 8017dea:	4619      	mov	r1, r3
 8017dec:	f04f 0c0a 	mov.w	ip, #10
 8017df0:	4620      	mov	r0, r4
 8017df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017df6:	3a30      	subs	r2, #48	@ 0x30
 8017df8:	2a09      	cmp	r2, #9
 8017dfa:	d903      	bls.n	8017e04 <_vfiprintf_r+0x1cc>
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d0c6      	beq.n	8017d8e <_vfiprintf_r+0x156>
 8017e00:	9105      	str	r1, [sp, #20]
 8017e02:	e7c4      	b.n	8017d8e <_vfiprintf_r+0x156>
 8017e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e08:	4604      	mov	r4, r0
 8017e0a:	2301      	movs	r3, #1
 8017e0c:	e7f0      	b.n	8017df0 <_vfiprintf_r+0x1b8>
 8017e0e:	ab03      	add	r3, sp, #12
 8017e10:	9300      	str	r3, [sp, #0]
 8017e12:	462a      	mov	r2, r5
 8017e14:	4b12      	ldr	r3, [pc, #72]	@ (8017e60 <_vfiprintf_r+0x228>)
 8017e16:	a904      	add	r1, sp, #16
 8017e18:	4630      	mov	r0, r6
 8017e1a:	f7fd fc5b 	bl	80156d4 <_printf_float>
 8017e1e:	4607      	mov	r7, r0
 8017e20:	1c78      	adds	r0, r7, #1
 8017e22:	d1d6      	bne.n	8017dd2 <_vfiprintf_r+0x19a>
 8017e24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e26:	07d9      	lsls	r1, r3, #31
 8017e28:	d405      	bmi.n	8017e36 <_vfiprintf_r+0x1fe>
 8017e2a:	89ab      	ldrh	r3, [r5, #12]
 8017e2c:	059a      	lsls	r2, r3, #22
 8017e2e:	d402      	bmi.n	8017e36 <_vfiprintf_r+0x1fe>
 8017e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e32:	f7fe fa0b 	bl	801624c <__retarget_lock_release_recursive>
 8017e36:	89ab      	ldrh	r3, [r5, #12]
 8017e38:	065b      	lsls	r3, r3, #25
 8017e3a:	f53f af1f 	bmi.w	8017c7c <_vfiprintf_r+0x44>
 8017e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e40:	e71e      	b.n	8017c80 <_vfiprintf_r+0x48>
 8017e42:	ab03      	add	r3, sp, #12
 8017e44:	9300      	str	r3, [sp, #0]
 8017e46:	462a      	mov	r2, r5
 8017e48:	4b05      	ldr	r3, [pc, #20]	@ (8017e60 <_vfiprintf_r+0x228>)
 8017e4a:	a904      	add	r1, sp, #16
 8017e4c:	4630      	mov	r0, r6
 8017e4e:	f7fd fed9 	bl	8015c04 <_printf_i>
 8017e52:	e7e4      	b.n	8017e1e <_vfiprintf_r+0x1e6>
 8017e54:	0801aba8 	.word	0x0801aba8
 8017e58:	0801abb2 	.word	0x0801abb2
 8017e5c:	080156d5 	.word	0x080156d5
 8017e60:	08017c13 	.word	0x08017c13
 8017e64:	0801abae 	.word	0x0801abae

08017e68 <__swbuf_r>:
 8017e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e6a:	460e      	mov	r6, r1
 8017e6c:	4614      	mov	r4, r2
 8017e6e:	4605      	mov	r5, r0
 8017e70:	b118      	cbz	r0, 8017e7a <__swbuf_r+0x12>
 8017e72:	6a03      	ldr	r3, [r0, #32]
 8017e74:	b90b      	cbnz	r3, 8017e7a <__swbuf_r+0x12>
 8017e76:	f7fe f871 	bl	8015f5c <__sinit>
 8017e7a:	69a3      	ldr	r3, [r4, #24]
 8017e7c:	60a3      	str	r3, [r4, #8]
 8017e7e:	89a3      	ldrh	r3, [r4, #12]
 8017e80:	071a      	lsls	r2, r3, #28
 8017e82:	d501      	bpl.n	8017e88 <__swbuf_r+0x20>
 8017e84:	6923      	ldr	r3, [r4, #16]
 8017e86:	b943      	cbnz	r3, 8017e9a <__swbuf_r+0x32>
 8017e88:	4621      	mov	r1, r4
 8017e8a:	4628      	mov	r0, r5
 8017e8c:	f000 f82a 	bl	8017ee4 <__swsetup_r>
 8017e90:	b118      	cbz	r0, 8017e9a <__swbuf_r+0x32>
 8017e92:	f04f 37ff 	mov.w	r7, #4294967295
 8017e96:	4638      	mov	r0, r7
 8017e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e9a:	6823      	ldr	r3, [r4, #0]
 8017e9c:	6922      	ldr	r2, [r4, #16]
 8017e9e:	1a98      	subs	r0, r3, r2
 8017ea0:	6963      	ldr	r3, [r4, #20]
 8017ea2:	b2f6      	uxtb	r6, r6
 8017ea4:	4283      	cmp	r3, r0
 8017ea6:	4637      	mov	r7, r6
 8017ea8:	dc05      	bgt.n	8017eb6 <__swbuf_r+0x4e>
 8017eaa:	4621      	mov	r1, r4
 8017eac:	4628      	mov	r0, r5
 8017eae:	f7ff fdf7 	bl	8017aa0 <_fflush_r>
 8017eb2:	2800      	cmp	r0, #0
 8017eb4:	d1ed      	bne.n	8017e92 <__swbuf_r+0x2a>
 8017eb6:	68a3      	ldr	r3, [r4, #8]
 8017eb8:	3b01      	subs	r3, #1
 8017eba:	60a3      	str	r3, [r4, #8]
 8017ebc:	6823      	ldr	r3, [r4, #0]
 8017ebe:	1c5a      	adds	r2, r3, #1
 8017ec0:	6022      	str	r2, [r4, #0]
 8017ec2:	701e      	strb	r6, [r3, #0]
 8017ec4:	6962      	ldr	r2, [r4, #20]
 8017ec6:	1c43      	adds	r3, r0, #1
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d004      	beq.n	8017ed6 <__swbuf_r+0x6e>
 8017ecc:	89a3      	ldrh	r3, [r4, #12]
 8017ece:	07db      	lsls	r3, r3, #31
 8017ed0:	d5e1      	bpl.n	8017e96 <__swbuf_r+0x2e>
 8017ed2:	2e0a      	cmp	r6, #10
 8017ed4:	d1df      	bne.n	8017e96 <__swbuf_r+0x2e>
 8017ed6:	4621      	mov	r1, r4
 8017ed8:	4628      	mov	r0, r5
 8017eda:	f7ff fde1 	bl	8017aa0 <_fflush_r>
 8017ede:	2800      	cmp	r0, #0
 8017ee0:	d0d9      	beq.n	8017e96 <__swbuf_r+0x2e>
 8017ee2:	e7d6      	b.n	8017e92 <__swbuf_r+0x2a>

08017ee4 <__swsetup_r>:
 8017ee4:	b538      	push	{r3, r4, r5, lr}
 8017ee6:	4b29      	ldr	r3, [pc, #164]	@ (8017f8c <__swsetup_r+0xa8>)
 8017ee8:	4605      	mov	r5, r0
 8017eea:	6818      	ldr	r0, [r3, #0]
 8017eec:	460c      	mov	r4, r1
 8017eee:	b118      	cbz	r0, 8017ef8 <__swsetup_r+0x14>
 8017ef0:	6a03      	ldr	r3, [r0, #32]
 8017ef2:	b90b      	cbnz	r3, 8017ef8 <__swsetup_r+0x14>
 8017ef4:	f7fe f832 	bl	8015f5c <__sinit>
 8017ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017efc:	0719      	lsls	r1, r3, #28
 8017efe:	d422      	bmi.n	8017f46 <__swsetup_r+0x62>
 8017f00:	06da      	lsls	r2, r3, #27
 8017f02:	d407      	bmi.n	8017f14 <__swsetup_r+0x30>
 8017f04:	2209      	movs	r2, #9
 8017f06:	602a      	str	r2, [r5, #0]
 8017f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f0c:	81a3      	strh	r3, [r4, #12]
 8017f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8017f12:	e033      	b.n	8017f7c <__swsetup_r+0x98>
 8017f14:	0758      	lsls	r0, r3, #29
 8017f16:	d512      	bpl.n	8017f3e <__swsetup_r+0x5a>
 8017f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017f1a:	b141      	cbz	r1, 8017f2e <__swsetup_r+0x4a>
 8017f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017f20:	4299      	cmp	r1, r3
 8017f22:	d002      	beq.n	8017f2a <__swsetup_r+0x46>
 8017f24:	4628      	mov	r0, r5
 8017f26:	f7ff f813 	bl	8016f50 <_free_r>
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8017f2e:	89a3      	ldrh	r3, [r4, #12]
 8017f30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017f34:	81a3      	strh	r3, [r4, #12]
 8017f36:	2300      	movs	r3, #0
 8017f38:	6063      	str	r3, [r4, #4]
 8017f3a:	6923      	ldr	r3, [r4, #16]
 8017f3c:	6023      	str	r3, [r4, #0]
 8017f3e:	89a3      	ldrh	r3, [r4, #12]
 8017f40:	f043 0308 	orr.w	r3, r3, #8
 8017f44:	81a3      	strh	r3, [r4, #12]
 8017f46:	6923      	ldr	r3, [r4, #16]
 8017f48:	b94b      	cbnz	r3, 8017f5e <__swsetup_r+0x7a>
 8017f4a:	89a3      	ldrh	r3, [r4, #12]
 8017f4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017f54:	d003      	beq.n	8017f5e <__swsetup_r+0x7a>
 8017f56:	4621      	mov	r1, r4
 8017f58:	4628      	mov	r0, r5
 8017f5a:	f000 f88b 	bl	8018074 <__smakebuf_r>
 8017f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f62:	f013 0201 	ands.w	r2, r3, #1
 8017f66:	d00a      	beq.n	8017f7e <__swsetup_r+0x9a>
 8017f68:	2200      	movs	r2, #0
 8017f6a:	60a2      	str	r2, [r4, #8]
 8017f6c:	6962      	ldr	r2, [r4, #20]
 8017f6e:	4252      	negs	r2, r2
 8017f70:	61a2      	str	r2, [r4, #24]
 8017f72:	6922      	ldr	r2, [r4, #16]
 8017f74:	b942      	cbnz	r2, 8017f88 <__swsetup_r+0xa4>
 8017f76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017f7a:	d1c5      	bne.n	8017f08 <__swsetup_r+0x24>
 8017f7c:	bd38      	pop	{r3, r4, r5, pc}
 8017f7e:	0799      	lsls	r1, r3, #30
 8017f80:	bf58      	it	pl
 8017f82:	6962      	ldrpl	r2, [r4, #20]
 8017f84:	60a2      	str	r2, [r4, #8]
 8017f86:	e7f4      	b.n	8017f72 <__swsetup_r+0x8e>
 8017f88:	2000      	movs	r0, #0
 8017f8a:	e7f7      	b.n	8017f7c <__swsetup_r+0x98>
 8017f8c:	200000ec 	.word	0x200000ec

08017f90 <_raise_r>:
 8017f90:	291f      	cmp	r1, #31
 8017f92:	b538      	push	{r3, r4, r5, lr}
 8017f94:	4605      	mov	r5, r0
 8017f96:	460c      	mov	r4, r1
 8017f98:	d904      	bls.n	8017fa4 <_raise_r+0x14>
 8017f9a:	2316      	movs	r3, #22
 8017f9c:	6003      	str	r3, [r0, #0]
 8017f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8017fa2:	bd38      	pop	{r3, r4, r5, pc}
 8017fa4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017fa6:	b112      	cbz	r2, 8017fae <_raise_r+0x1e>
 8017fa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017fac:	b94b      	cbnz	r3, 8017fc2 <_raise_r+0x32>
 8017fae:	4628      	mov	r0, r5
 8017fb0:	f000 f830 	bl	8018014 <_getpid_r>
 8017fb4:	4622      	mov	r2, r4
 8017fb6:	4601      	mov	r1, r0
 8017fb8:	4628      	mov	r0, r5
 8017fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fbe:	f000 b817 	b.w	8017ff0 <_kill_r>
 8017fc2:	2b01      	cmp	r3, #1
 8017fc4:	d00a      	beq.n	8017fdc <_raise_r+0x4c>
 8017fc6:	1c59      	adds	r1, r3, #1
 8017fc8:	d103      	bne.n	8017fd2 <_raise_r+0x42>
 8017fca:	2316      	movs	r3, #22
 8017fcc:	6003      	str	r3, [r0, #0]
 8017fce:	2001      	movs	r0, #1
 8017fd0:	e7e7      	b.n	8017fa2 <_raise_r+0x12>
 8017fd2:	2100      	movs	r1, #0
 8017fd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017fd8:	4620      	mov	r0, r4
 8017fda:	4798      	blx	r3
 8017fdc:	2000      	movs	r0, #0
 8017fde:	e7e0      	b.n	8017fa2 <_raise_r+0x12>

08017fe0 <raise>:
 8017fe0:	4b02      	ldr	r3, [pc, #8]	@ (8017fec <raise+0xc>)
 8017fe2:	4601      	mov	r1, r0
 8017fe4:	6818      	ldr	r0, [r3, #0]
 8017fe6:	f7ff bfd3 	b.w	8017f90 <_raise_r>
 8017fea:	bf00      	nop
 8017fec:	200000ec 	.word	0x200000ec

08017ff0 <_kill_r>:
 8017ff0:	b538      	push	{r3, r4, r5, lr}
 8017ff2:	4d07      	ldr	r5, [pc, #28]	@ (8018010 <_kill_r+0x20>)
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	4604      	mov	r4, r0
 8017ff8:	4608      	mov	r0, r1
 8017ffa:	4611      	mov	r1, r2
 8017ffc:	602b      	str	r3, [r5, #0]
 8017ffe:	f7eb fc5d 	bl	80038bc <_kill>
 8018002:	1c43      	adds	r3, r0, #1
 8018004:	d102      	bne.n	801800c <_kill_r+0x1c>
 8018006:	682b      	ldr	r3, [r5, #0]
 8018008:	b103      	cbz	r3, 801800c <_kill_r+0x1c>
 801800a:	6023      	str	r3, [r4, #0]
 801800c:	bd38      	pop	{r3, r4, r5, pc}
 801800e:	bf00      	nop
 8018010:	20002888 	.word	0x20002888

08018014 <_getpid_r>:
 8018014:	f7eb bc4a 	b.w	80038ac <_getpid>

08018018 <_malloc_usable_size_r>:
 8018018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801801c:	1f18      	subs	r0, r3, #4
 801801e:	2b00      	cmp	r3, #0
 8018020:	bfbc      	itt	lt
 8018022:	580b      	ldrlt	r3, [r1, r0]
 8018024:	18c0      	addlt	r0, r0, r3
 8018026:	4770      	bx	lr

08018028 <__swhatbuf_r>:
 8018028:	b570      	push	{r4, r5, r6, lr}
 801802a:	460c      	mov	r4, r1
 801802c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018030:	2900      	cmp	r1, #0
 8018032:	b096      	sub	sp, #88	@ 0x58
 8018034:	4615      	mov	r5, r2
 8018036:	461e      	mov	r6, r3
 8018038:	da0d      	bge.n	8018056 <__swhatbuf_r+0x2e>
 801803a:	89a3      	ldrh	r3, [r4, #12]
 801803c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018040:	f04f 0100 	mov.w	r1, #0
 8018044:	bf14      	ite	ne
 8018046:	2340      	movne	r3, #64	@ 0x40
 8018048:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801804c:	2000      	movs	r0, #0
 801804e:	6031      	str	r1, [r6, #0]
 8018050:	602b      	str	r3, [r5, #0]
 8018052:	b016      	add	sp, #88	@ 0x58
 8018054:	bd70      	pop	{r4, r5, r6, pc}
 8018056:	466a      	mov	r2, sp
 8018058:	f000 f848 	bl	80180ec <_fstat_r>
 801805c:	2800      	cmp	r0, #0
 801805e:	dbec      	blt.n	801803a <__swhatbuf_r+0x12>
 8018060:	9901      	ldr	r1, [sp, #4]
 8018062:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018066:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801806a:	4259      	negs	r1, r3
 801806c:	4159      	adcs	r1, r3
 801806e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018072:	e7eb      	b.n	801804c <__swhatbuf_r+0x24>

08018074 <__smakebuf_r>:
 8018074:	898b      	ldrh	r3, [r1, #12]
 8018076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018078:	079d      	lsls	r5, r3, #30
 801807a:	4606      	mov	r6, r0
 801807c:	460c      	mov	r4, r1
 801807e:	d507      	bpl.n	8018090 <__smakebuf_r+0x1c>
 8018080:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018084:	6023      	str	r3, [r4, #0]
 8018086:	6123      	str	r3, [r4, #16]
 8018088:	2301      	movs	r3, #1
 801808a:	6163      	str	r3, [r4, #20]
 801808c:	b003      	add	sp, #12
 801808e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018090:	ab01      	add	r3, sp, #4
 8018092:	466a      	mov	r2, sp
 8018094:	f7ff ffc8 	bl	8018028 <__swhatbuf_r>
 8018098:	9f00      	ldr	r7, [sp, #0]
 801809a:	4605      	mov	r5, r0
 801809c:	4639      	mov	r1, r7
 801809e:	4630      	mov	r0, r6
 80180a0:	f7fd f9ae 	bl	8015400 <_malloc_r>
 80180a4:	b948      	cbnz	r0, 80180ba <__smakebuf_r+0x46>
 80180a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180aa:	059a      	lsls	r2, r3, #22
 80180ac:	d4ee      	bmi.n	801808c <__smakebuf_r+0x18>
 80180ae:	f023 0303 	bic.w	r3, r3, #3
 80180b2:	f043 0302 	orr.w	r3, r3, #2
 80180b6:	81a3      	strh	r3, [r4, #12]
 80180b8:	e7e2      	b.n	8018080 <__smakebuf_r+0xc>
 80180ba:	89a3      	ldrh	r3, [r4, #12]
 80180bc:	6020      	str	r0, [r4, #0]
 80180be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80180c2:	81a3      	strh	r3, [r4, #12]
 80180c4:	9b01      	ldr	r3, [sp, #4]
 80180c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80180ca:	b15b      	cbz	r3, 80180e4 <__smakebuf_r+0x70>
 80180cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180d0:	4630      	mov	r0, r6
 80180d2:	f000 f81d 	bl	8018110 <_isatty_r>
 80180d6:	b128      	cbz	r0, 80180e4 <__smakebuf_r+0x70>
 80180d8:	89a3      	ldrh	r3, [r4, #12]
 80180da:	f023 0303 	bic.w	r3, r3, #3
 80180de:	f043 0301 	orr.w	r3, r3, #1
 80180e2:	81a3      	strh	r3, [r4, #12]
 80180e4:	89a3      	ldrh	r3, [r4, #12]
 80180e6:	431d      	orrs	r5, r3
 80180e8:	81a5      	strh	r5, [r4, #12]
 80180ea:	e7cf      	b.n	801808c <__smakebuf_r+0x18>

080180ec <_fstat_r>:
 80180ec:	b538      	push	{r3, r4, r5, lr}
 80180ee:	4d07      	ldr	r5, [pc, #28]	@ (801810c <_fstat_r+0x20>)
 80180f0:	2300      	movs	r3, #0
 80180f2:	4604      	mov	r4, r0
 80180f4:	4608      	mov	r0, r1
 80180f6:	4611      	mov	r1, r2
 80180f8:	602b      	str	r3, [r5, #0]
 80180fa:	f7eb fc3f 	bl	800397c <_fstat>
 80180fe:	1c43      	adds	r3, r0, #1
 8018100:	d102      	bne.n	8018108 <_fstat_r+0x1c>
 8018102:	682b      	ldr	r3, [r5, #0]
 8018104:	b103      	cbz	r3, 8018108 <_fstat_r+0x1c>
 8018106:	6023      	str	r3, [r4, #0]
 8018108:	bd38      	pop	{r3, r4, r5, pc}
 801810a:	bf00      	nop
 801810c:	20002888 	.word	0x20002888

08018110 <_isatty_r>:
 8018110:	b538      	push	{r3, r4, r5, lr}
 8018112:	4d06      	ldr	r5, [pc, #24]	@ (801812c <_isatty_r+0x1c>)
 8018114:	2300      	movs	r3, #0
 8018116:	4604      	mov	r4, r0
 8018118:	4608      	mov	r0, r1
 801811a:	602b      	str	r3, [r5, #0]
 801811c:	f7eb fc3e 	bl	800399c <_isatty>
 8018120:	1c43      	adds	r3, r0, #1
 8018122:	d102      	bne.n	801812a <_isatty_r+0x1a>
 8018124:	682b      	ldr	r3, [r5, #0]
 8018126:	b103      	cbz	r3, 801812a <_isatty_r+0x1a>
 8018128:	6023      	str	r3, [r4, #0]
 801812a:	bd38      	pop	{r3, r4, r5, pc}
 801812c:	20002888 	.word	0x20002888

08018130 <_init>:
 8018130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018132:	bf00      	nop
 8018134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018136:	bc08      	pop	{r3}
 8018138:	469e      	mov	lr, r3
 801813a:	4770      	bx	lr

0801813c <_fini>:
 801813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801813e:	bf00      	nop
 8018140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018142:	bc08      	pop	{r3}
 8018144:	469e      	mov	lr, r3
 8018146:	4770      	bx	lr
