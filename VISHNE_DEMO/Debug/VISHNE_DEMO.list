
VISHNE_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002908  08013130  08013130  00014130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a38  08015a38  0001728c  2**0
                  CONTENTS
  4 .ARM          00000008  08015a38  08015a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a40  08015a40  0001728c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a40  08015a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015a44  08015a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  08015a48  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001728c  2**0
                  CONTENTS
 10 .bss          00001e84  2000028c  2000028c  0001728c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002110  20002110  0001728c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001728c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026eba  00000000  00000000  000172bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063dd  00000000  00000000  0003e176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e88  00000000  00000000  00044558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001793  00000000  00000000  000463e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b6f4  00000000  00000000  00047b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d5c5  00000000  00000000  00073267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6c5b  00000000  00000000  000a082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00187487  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009040  00000000  00000000  001874cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0019050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000028c 	.word	0x2000028c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013114 	.word	0x08013114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000290 	.word	0x20000290
 80001cc:	08013114 	.word	0x08013114

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f001 fcae 	bl	80028bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f822 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 fb6c 	bl	8001640 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f68:	f000 fb1c 	bl	80015a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 fac6 	bl	80014fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f70:	f000 f98c 	bl	800128c <MX_TIM1_Init>
  MX_ADC3_Init();
 8000f74:	f000 f8d4 	bl	8001120 <MX_ADC3_Init>
  MX_SPI3_Init();
 8000f78:	f000 f952 	bl	8001220 <MX_SPI3_Init>
  MX_I2C3_Init();
 8000f7c:	f000 f922 	bl	80011c4 <MX_I2C3_Init>
  MX_ADC1_Init();
 8000f80:	f000 f87c 	bl	800107c <MX_ADC1_Init>
  MX_TIM11_Init();
 8000f84:	f000 fa6e 	bl	8001464 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8000f88:	f000 fae2 	bl	8001550 <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 8000f8c:	f00c fcba 	bl	800d904 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 8000f90:	f000 fa1c 	bl	80013cc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8000f94:	f00f f8a0 	bl	80100d8 <DWT_Init>

  systemSetup();
 8000f98:	f00f f90e 	bl	80101b8 <systemSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f9c:	f00c fcd8 	bl	800d950 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	 systemLoop();
 8000fa0:	f00f f900 	bl	80101a4 <systemLoop>
  {
 8000fa4:	bf00      	nop
 8000fa6:	e7f9      	b.n	8000f9c <main+0x44>

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	@ 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	@ 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f010 f899 	bl	80110ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	4a27      	ldr	r2, [pc, #156]	@ (8001074 <SystemClock_Config+0xcc>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fdc:	4b25      	ldr	r3, [pc, #148]	@ (8001074 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	@ (8001078 <SystemClock_Config+0xd0>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001018:	2304      	movs	r3, #4
 800101a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800101c:	23a8      	movs	r3, #168	@ 0xa8
 800101e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001024:	2307      	movs	r3, #7
 8001026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4618      	mov	r0, r3
 800102e:	f006 fb41 	bl	80076b4 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001038:	f000 fc26 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001048:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800104c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800104e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2105      	movs	r1, #5
 800105a:	4618      	mov	r0, r3
 800105c:	f006 fda2 	bl	8007ba4 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001066:	f000 fc0f 	bl	8001888 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	@ 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <MX_ADC1_Init+0x98>)
 8001090:	4a21      	ldr	r2, [pc, #132]	@ (8001118 <MX_ADC1_Init+0x9c>)
 8001092:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <MX_ADC1_Init+0x98>)
 8001096:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800109a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109c:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <MX_ADC1_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010be:	4a17      	ldr	r2, [pc, #92]	@ (800111c <MX_ADC1_Init+0xa0>)
 80010c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010d8:	2201      	movs	r2, #1
 80010da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010de:	f001 fc83 	bl	80029e8 <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010e8:	f000 fbce 	bl	8001888 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_ADC1_Init+0x98>)
 80010fe:	f001 fde5 	bl	8002ccc <HAL_ADC_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001108:	f000 fbbe 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200002a8 	.word	0x200002a8
 8001118:	40012000 	.word	0x40012000
 800111c:	0f000001 	.word	0x0f000001

08001120 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_ADC3_Init+0x98>)
 8001134:	4a21      	ldr	r2, [pc, #132]	@ (80011bc <MX_ADC3_Init+0x9c>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_ADC3_Init+0x98>)
 800113a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800113e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <MX_ADC3_Init+0x98>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_ADC3_Init+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_ADC3_Init+0x98>)
 800114e:	2201      	movs	r2, #1
 8001150:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <MX_ADC3_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_ADC3_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_ADC3_Init+0x98>)
 8001162:	4a17      	ldr	r2, [pc, #92]	@ (80011c0 <MX_ADC3_Init+0xa0>)
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_ADC3_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_ADC3_Init+0x98>)
 800116e:	2201      	movs	r2, #1
 8001170:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_ADC3_Init+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_ADC3_Init+0x98>)
 800117c:	2201      	movs	r2, #1
 800117e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_ADC3_Init+0x98>)
 8001182:	f001 fc31 	bl	80029e8 <HAL_ADC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800118c:	f000 fb7c 	bl	8001888 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001190:	2301      	movs	r3, #1
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_ADC3_Init+0x98>)
 80011a2:	f001 fd93 	bl	8002ccc <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80011ac:	f000 fb6c 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200002f0 	.word	0x200002f0
 80011bc:	40012200 	.word	0x40012200
 80011c0:	0f000001 	.word	0x0f000001

080011c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <MX_I2C3_Init+0x50>)
 80011ca:	4a13      	ldr	r2, [pc, #76]	@ (8001218 <MX_I2C3_Init+0x54>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_I2C3_Init+0x50>)
 80011d0:	4a12      	ldr	r2, [pc, #72]	@ (800121c <MX_I2C3_Init+0x58>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <MX_I2C3_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_I2C3_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_I2C3_Init+0x50>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <MX_I2C3_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_I2C3_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <MX_I2C3_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_I2C3_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	@ (8001214 <MX_I2C3_Init+0x50>)
 8001202:	f005 fa5d 	bl	80066c0 <HAL_I2C_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800120c:	f000 fb3c 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200003f8 	.word	0x200003f8
 8001218:	40005c00 	.word	0x40005c00
 800121c:	000186a0 	.word	0x000186a0

08001220 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_SPI3_Init+0x64>)
 8001226:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <MX_SPI3_Init+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_SPI3_Init+0x64>)
 800122c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001230:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_SPI3_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_SPI3_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_SPI3_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_SPI3_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_SPI3_Init+0x64>)
 800124c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001250:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_SPI3_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <MX_SPI3_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_SPI3_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <MX_SPI3_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_SPI3_Init+0x64>)
 800126c:	220a      	movs	r2, #10
 800126e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <MX_SPI3_Init+0x64>)
 8001272:	f006 feb7 	bl	8007fe4 <HAL_SPI_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800127c:	f000 fb04 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000044c 	.word	0x2000044c
 8001288:	40003c00 	.word	0x40003c00

0800128c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b096      	sub	sp, #88	@ 0x58
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
 80012ba:	615a      	str	r2, [r3, #20]
 80012bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2220      	movs	r2, #32
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00f ff12 	bl	80110ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ca:	4b3e      	ldr	r3, [pc, #248]	@ (80013c4 <MX_TIM1_Init+0x138>)
 80012cc:	4a3e      	ldr	r2, [pc, #248]	@ (80013c8 <MX_TIM1_Init+0x13c>)
 80012ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 124-1;
 80012d0:	4b3c      	ldr	r3, [pc, #240]	@ (80013c4 <MX_TIM1_Init+0x138>)
 80012d2:	227b      	movs	r2, #123	@ 0x7b
 80012d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b3b      	ldr	r3, [pc, #236]	@ (80013c4 <MX_TIM1_Init+0x138>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80012dc:	4b39      	ldr	r3, [pc, #228]	@ (80013c4 <MX_TIM1_Init+0x138>)
 80012de:	2209      	movs	r2, #9
 80012e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b38      	ldr	r3, [pc, #224]	@ (80013c4 <MX_TIM1_Init+0x138>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e8:	4b36      	ldr	r3, [pc, #216]	@ (80013c4 <MX_TIM1_Init+0x138>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b35      	ldr	r3, [pc, #212]	@ (80013c4 <MX_TIM1_Init+0x138>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f4:	4833      	ldr	r0, [pc, #204]	@ (80013c4 <MX_TIM1_Init+0x138>)
 80012f6:	f007 f91d 	bl	8008534 <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001300:	f000 fac2 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001308:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800130a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800130e:	4619      	mov	r1, r3
 8001310:	482c      	ldr	r0, [pc, #176]	@ (80013c4 <MX_TIM1_Init+0x138>)
 8001312:	f007 fce7 	bl	8008ce4 <HAL_TIM_ConfigClockSource>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800131c:	f000 fab4 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001320:	4828      	ldr	r0, [pc, #160]	@ (80013c4 <MX_TIM1_Init+0x138>)
 8001322:	f007 f9af 	bl	8008684 <HAL_TIM_PWM_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800132c:	f000 faac 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001338:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800133c:	4619      	mov	r1, r3
 800133e:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <MX_TIM1_Init+0x138>)
 8001340:	f008 f8e6 	bl	8009510 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800134a:	f000 fa9d 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134e:	2360      	movs	r3, #96	@ 0x60
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	4814      	ldr	r0, [pc, #80]	@ (80013c4 <MX_TIM1_Init+0x138>)
 8001374:	f007 fbf4 	bl	8008b60 <HAL_TIM_PWM_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800137e:	f000 fa83 	bl	8001888 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001396:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <MX_TIM1_Init+0x138>)
 80013a6:	f008 f92f 	bl	8009608 <HAL_TIMEx_ConfigBreakDeadTime>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013b0:	f000 fa6a 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b4:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <MX_TIM1_Init+0x138>)
 80013b6:	f000 fff7 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 80013ba:	bf00      	nop
 80013bc:	3758      	adds	r7, #88	@ 0x58
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200004a4 	.word	0x200004a4
 80013c8:	40010000 	.word	0x40010000

080013cc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	615a      	str	r2, [r3, #20]
 80013e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <MX_TIM10_Init+0x90>)
 80013e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001460 <MX_TIM10_Init+0x94>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 36000-1;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <MX_TIM10_Init+0x90>)
 80013ec:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80013f0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_TIM10_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 30000-1;
 80013f8:	4b18      	ldr	r3, [pc, #96]	@ (800145c <MX_TIM10_Init+0x90>)
 80013fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80013fe:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <MX_TIM10_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <MX_TIM10_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800140c:	4813      	ldr	r0, [pc, #76]	@ (800145c <MX_TIM10_Init+0x90>)
 800140e:	f007 f891 	bl	8008534 <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8001418:	f000 fa36 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 800141c:	480f      	ldr	r0, [pc, #60]	@ (800145c <MX_TIM10_Init+0x90>)
 800141e:	f007 f8d8 	bl	80085d2 <HAL_TIM_OC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8001428:	f000 fa2e 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	@ (800145c <MX_TIM10_Init+0x90>)
 8001444:	f007 fb30 	bl	8008aa8 <HAL_TIM_OC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800144e:	f000 fa1b 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200004ec 	.word	0x200004ec
 8001460:	40014400 	.word	0x40014400

08001464 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800147c:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <MX_TIM11_Init+0x90>)
 800147e:	4a1e      	ldr	r2, [pc, #120]	@ (80014f8 <MX_TIM11_Init+0x94>)
 8001480:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 36000-1;
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <MX_TIM11_Init+0x90>)
 8001484:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001488:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <MX_TIM11_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 30000-1;
 8001490:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <MX_TIM11_Init+0x90>)
 8001492:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001496:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_TIM11_Init+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <MX_TIM11_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014a4:	4813      	ldr	r0, [pc, #76]	@ (80014f4 <MX_TIM11_Init+0x90>)
 80014a6:	f007 f845 	bl	8008534 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 80014b0:	f000 f9ea 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80014b4:	480f      	ldr	r0, [pc, #60]	@ (80014f4 <MX_TIM11_Init+0x90>)
 80014b6:	f007 f88c 	bl	80085d2 <HAL_TIM_OC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 80014c0:	f000 f9e2 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	@ (80014f4 <MX_TIM11_Init+0x90>)
 80014dc:	f007 fae4 	bl	8008aa8 <HAL_TIM_OC_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 80014e6:	f000 f9cf 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000534 	.word	0x20000534
 80014f8:	40014800 	.word	0x40014800

080014fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001502:	4a12      	ldr	r2, [pc, #72]	@ (800154c <MX_USART2_UART_Init+0x50>)
 8001504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001508:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800150c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001534:	f008 f8ce 	bl	80096d4 <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800153e:	f000 f9a3 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200005dc 	.word	0x200005dc
 800154c:	40004400 	.word	0x40004400

08001550 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_USART3_UART_Init+0x4c>)
 8001556:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <MX_USART3_UART_Init+0x50>)
 8001558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <MX_USART3_UART_Init+0x4c>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_USART3_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_USART3_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <MX_USART3_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_USART3_UART_Init+0x4c>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <MX_USART3_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_USART3_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <MX_USART3_UART_Init+0x4c>)
 8001588:	f008 f8a4 	bl	80096d4 <HAL_UART_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001592:	f000 f979 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000624 	.word	0x20000624
 80015a0:	40004800 	.word	0x40004800

080015a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b23      	ldr	r3, [pc, #140]	@ (800163c <MX_DMA_Init+0x98>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a22      	ldr	r2, [pc, #136]	@ (800163c <MX_DMA_Init+0x98>)
 80015b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <MX_DMA_Init+0x98>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <MX_DMA_Init+0x98>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a1b      	ldr	r2, [pc, #108]	@ (800163c <MX_DMA_Init+0x98>)
 80015d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <MX_DMA_Init+0x98>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	200e      	movs	r0, #14
 80015e8:	f001 feeb 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015ec:	200e      	movs	r0, #14
 80015ee:	f001 ff04 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2011      	movs	r0, #17
 80015f8:	f001 fee3 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015fc:	2011      	movs	r0, #17
 80015fe:	f001 fefc 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2038      	movs	r0, #56	@ 0x38
 8001608:	f001 fedb 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800160c:	2038      	movs	r0, #56	@ 0x38
 800160e:	f001 fef4 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2039      	movs	r0, #57	@ 0x39
 8001618:	f001 fed3 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800161c:	2039      	movs	r0, #57	@ 0x39
 800161e:	f001 feec 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	203c      	movs	r0, #60	@ 0x3c
 8001628:	f001 fecb 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800162c:	203c      	movs	r0, #60	@ 0x3c
 800162e:	f001 fee4 	bl	80033fa <HAL_NVIC_EnableIRQ>

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	@ 0x30
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	4b85      	ldr	r3, [pc, #532]	@ (8001870 <MX_GPIO_Init+0x230>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a84      	ldr	r2, [pc, #528]	@ (8001870 <MX_GPIO_Init+0x230>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b82      	ldr	r3, [pc, #520]	@ (8001870 <MX_GPIO_Init+0x230>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	4b7e      	ldr	r3, [pc, #504]	@ (8001870 <MX_GPIO_Init+0x230>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a7d      	ldr	r2, [pc, #500]	@ (8001870 <MX_GPIO_Init+0x230>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b7b      	ldr	r3, [pc, #492]	@ (8001870 <MX_GPIO_Init+0x230>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b77      	ldr	r3, [pc, #476]	@ (8001870 <MX_GPIO_Init+0x230>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a76      	ldr	r2, [pc, #472]	@ (8001870 <MX_GPIO_Init+0x230>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b74      	ldr	r3, [pc, #464]	@ (8001870 <MX_GPIO_Init+0x230>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b70      	ldr	r3, [pc, #448]	@ (8001870 <MX_GPIO_Init+0x230>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001870 <MX_GPIO_Init+0x230>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001870 <MX_GPIO_Init+0x230>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b69      	ldr	r3, [pc, #420]	@ (8001870 <MX_GPIO_Init+0x230>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a68      	ldr	r2, [pc, #416]	@ (8001870 <MX_GPIO_Init+0x230>)
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b66      	ldr	r3, [pc, #408]	@ (8001870 <MX_GPIO_Init+0x230>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b62      	ldr	r3, [pc, #392]	@ (8001870 <MX_GPIO_Init+0x230>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a61      	ldr	r2, [pc, #388]	@ (8001870 <MX_GPIO_Init+0x230>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001870 <MX_GPIO_Init+0x230>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2101      	movs	r1, #1
 8001702:	485c      	ldr	r0, [pc, #368]	@ (8001874 <MX_GPIO_Init+0x234>)
 8001704:	f002 fe90 	bl	8004428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPEC_LED_GPIO_Port, SPEC_LED_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2180      	movs	r1, #128	@ 0x80
 800170c:	485a      	ldr	r0, [pc, #360]	@ (8001878 <MX_GPIO_Init+0x238>)
 800170e:	f002 fe8b 	bl	8004428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin|READY_LED_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001718:	4858      	ldr	r0, [pc, #352]	@ (800187c <MX_GPIO_Init+0x23c>)
 800171a:	f002 fe85 	bl	8004428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Bcode_INIT_Pin|BT_INIT_Pin|LCD_CE_Pin|LCD_DC_Pin
 800171e:	2200      	movs	r2, #0
 8001720:	f641 0107 	movw	r1, #6151	@ 0x1807
 8001724:	4856      	ldr	r0, [pc, #344]	@ (8001880 <MX_GPIO_Init+0x240>)
 8001726:	f002 fe7f 	bl	8004428 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001730:	4854      	ldr	r0, [pc, #336]	@ (8001884 <MX_GPIO_Init+0x244>)
 8001732:	f002 fe79 	bl	8004428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001736:	2301      	movs	r3, #1
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	4619      	mov	r1, r3
 800174c:	4849      	ldr	r0, [pc, #292]	@ (8001874 <MX_GPIO_Init+0x234>)
 800174e:	f002 fcb7 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_EOS_Pin */
  GPIO_InitStruct.Pin = SPEC_EOS_Pin;
 8001752:	2310      	movs	r3, #16
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001756:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPEC_EOS_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	4844      	ldr	r0, [pc, #272]	@ (8001878 <MX_GPIO_Init+0x238>)
 8001768:	f002 fcaa 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : StartTest_BTN_Pin */
  GPIO_InitStruct.Pin = StartTest_BTN_Pin;
 800176c:	2320      	movs	r3, #32
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(StartTest_BTN_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	483e      	ldr	r0, [pc, #248]	@ (8001878 <MX_GPIO_Init+0x238>)
 8001780:	f002 fc9e 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_LED_Pin */
  GPIO_InitStruct.Pin = SPEC_LED_Pin;
 8001784:	2380      	movs	r3, #128	@ 0x80
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPEC_LED_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	4837      	ldr	r0, [pc, #220]	@ (8001878 <MX_GPIO_Init+0x238>)
 800179c:	f002 fc90 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NAVIGATE_BTN_Pin */
  GPIO_InitStruct.Pin = NAVIGATE_BTN_Pin;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NAVIGATE_BTN_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4619      	mov	r1, r3
 80017b2:	4834      	ldr	r0, [pc, #208]	@ (8001884 <MX_GPIO_Init+0x244>)
 80017b4:	f002 fc84 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERR_BUZZER_Pin READY_LED_Pin */
  GPIO_InitStruct.Pin = ERR_BUZZER_Pin|READY_LED_Pin;
 80017b8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	482a      	ldr	r0, [pc, #168]	@ (800187c <MX_GPIO_Init+0x23c>)
 80017d2:	f002 fc75 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NEXT_BTN_Pin PREV_BTN_Pin */
  GPIO_InitStruct.Pin = NEXT_BTN_Pin|PREV_BTN_Pin;
 80017d6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80017da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4824      	ldr	r0, [pc, #144]	@ (800187c <MX_GPIO_Init+0x23c>)
 80017ec:	f002 fc68 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IsCharging_EXTI_Pin */
  GPIO_InitStruct.Pin = IsCharging_EXTI_Pin;
 80017f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017f6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80017fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017fc:	2302      	movs	r3, #2
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IsCharging_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	4619      	mov	r1, r3
 8001806:	481e      	ldr	r0, [pc, #120]	@ (8001880 <MX_GPIO_Init+0x240>)
 8001808:	f002 fc5a 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Bcode_INIT_Pin BT_INIT_Pin LCD_CE_Pin LCD_DC_Pin
                           LCD_RST_Pin */
  GPIO_InitStruct.Pin = Bcode_INIT_Pin|BT_INIT_Pin|LCD_CE_Pin|LCD_DC_Pin
 800180c:	f641 0307 	movw	r3, #6151	@ 0x1807
 8001810:	61fb      	str	r3, [r7, #28]
                          |LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4816      	ldr	r0, [pc, #88]	@ (8001880 <MX_GPIO_Init+0x240>)
 8001826:	f002 fc4b 	bl	80040c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEC_START_Pin SPEC_GAIN_Pin */
  GPIO_InitStruct.Pin = SPEC_START_Pin|SPEC_GAIN_Pin;
 800182a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	4810      	ldr	r0, [pc, #64]	@ (8001884 <MX_GPIO_Init+0x244>)
 8001844:	f002 fc3c 	bl	80040c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* EXTI interrupt init */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2102      	movs	r1, #2
 800184c:	2017      	movs	r0, #23
 800184e:	f001 fdb8 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001852:	2017      	movs	r0, #23
 8001854:	f001 fdd1 	bl	80033fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2102      	movs	r1, #2
 800185c:	200a      	movs	r0, #10
 800185e:	f001 fdb0 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001862:	200a      	movs	r0, #10
 8001864:	f001 fdc9 	bl	80033fa <HAL_NVIC_EnableIRQ>

     // HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin, GPIO_PIN_SET);
/* USER CODE END MX_GPIO_Init_2 */
}
 8001868:	bf00      	nop
 800186a:	3730      	adds	r7, #48	@ 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	40020800 	.word	0x40020800
 8001878:	40020000 	.word	0x40020000
 800187c:	40021000 	.word	0x40021000
 8001880:	40020c00 	.word	0x40020c00
 8001884:	40020400 	.word	0x40020400

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <Error_Handler+0x8>

08001894 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	2101      	movs	r1, #1
 800189c:	480a      	ldr	r0, [pc, #40]	@ (80018c8 <ssd1306_Reset+0x34>)
 800189e:	f002 fdc3 	bl	8004428 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2104      	movs	r1, #4
 80018a6:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <ssd1306_Reset+0x34>)
 80018a8:	f002 fdbe 	bl	8004428 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018ac:	200a      	movs	r0, #10
 80018ae:	f001 f877 	bl	80029a0 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2104      	movs	r1, #4
 80018b6:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <ssd1306_Reset+0x34>)
 80018b8:	f002 fdb6 	bl	8004428 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018bc:	200a      	movs	r0, #10
 80018be:	f001 f86f 	bl	80029a0 <HAL_Delay>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40020c00 	.word	0x40020c00

080018cc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80018d6:	2200      	movs	r2, #0
 80018d8:	2101      	movs	r1, #1
 80018da:	480c      	ldr	r0, [pc, #48]	@ (800190c <ssd1306_WriteCommand+0x40>)
 80018dc:	f002 fda4 	bl	8004428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80018e0:	2200      	movs	r2, #0
 80018e2:	2102      	movs	r1, #2
 80018e4:	4809      	ldr	r0, [pc, #36]	@ (800190c <ssd1306_WriteCommand+0x40>)
 80018e6:	f002 fd9f 	bl	8004428 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80018ea:	1df9      	adds	r1, r7, #7
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	2201      	movs	r2, #1
 80018f2:	4807      	ldr	r0, [pc, #28]	@ (8001910 <ssd1306_WriteCommand+0x44>)
 80018f4:	f006 fbff 	bl	80080f6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80018f8:	2201      	movs	r2, #1
 80018fa:	2101      	movs	r1, #1
 80018fc:	4803      	ldr	r0, [pc, #12]	@ (800190c <ssd1306_WriteCommand+0x40>)
 80018fe:	f002 fd93 	bl	8004428 <HAL_GPIO_WritePin>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020c00 	.word	0x40020c00
 8001910:	2000044c 	.word	0x2000044c

08001914 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800191e:	2200      	movs	r2, #0
 8001920:	2101      	movs	r1, #1
 8001922:	480c      	ldr	r0, [pc, #48]	@ (8001954 <ssd1306_WriteData+0x40>)
 8001924:	f002 fd80 	bl	8004428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001928:	2201      	movs	r2, #1
 800192a:	2102      	movs	r1, #2
 800192c:	4809      	ldr	r0, [pc, #36]	@ (8001954 <ssd1306_WriteData+0x40>)
 800192e:	f002 fd7b 	bl	8004428 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b29a      	uxth	r2, r3
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4806      	ldr	r0, [pc, #24]	@ (8001958 <ssd1306_WriteData+0x44>)
 800193e:	f006 fbda 	bl	80080f6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001942:	2201      	movs	r2, #1
 8001944:	2101      	movs	r1, #1
 8001946:	4803      	ldr	r0, [pc, #12]	@ (8001954 <ssd1306_WriteData+0x40>)
 8001948:	f002 fd6e 	bl	8004428 <HAL_GPIO_WritePin>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40020c00 	.word	0x40020c00
 8001958:	2000044c 	.word	0x2000044c

0800195c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001960:	f7ff ff98 	bl	8001894 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(10);  //10
 8001964:	200a      	movs	r0, #10
 8001966:	f001 f81b 	bl	80029a0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800196a:	2000      	movs	r0, #0
 800196c:	f000 fa7e 	bl	8001e6c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001970:	2020      	movs	r0, #32
 8001972:	f7ff ffab 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ffa8 	bl	80018cc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800197c:	20b0      	movs	r0, #176	@ 0xb0
 800197e:	f7ff ffa5 	bl	80018cc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001982:	20c8      	movs	r0, #200	@ 0xc8
 8001984:	f7ff ffa2 	bl	80018cc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff ff9f 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800198e:	2010      	movs	r0, #16
 8001990:	f7ff ff9c 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001994:	2040      	movs	r0, #64	@ 0x40
 8001996:	f7ff ff99 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800199a:	20ff      	movs	r0, #255	@ 0xff
 800199c:	f000 fa53 	bl	8001e46 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80019a0:	20a1      	movs	r0, #161	@ 0xa1
 80019a2:	f7ff ff93 	bl	80018cc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80019a6:	20a6      	movs	r0, #166	@ 0xa6
 80019a8:	f7ff ff90 	bl	80018cc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80019ac:	20a8      	movs	r0, #168	@ 0xa8
 80019ae:	f7ff ff8d 	bl	80018cc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80019b2:	203f      	movs	r0, #63	@ 0x3f
 80019b4:	f7ff ff8a 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019b8:	20a4      	movs	r0, #164	@ 0xa4
 80019ba:	f7ff ff87 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80019be:	20d3      	movs	r0, #211	@ 0xd3
 80019c0:	f7ff ff84 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff ff81 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80019ca:	20d5      	movs	r0, #213	@ 0xd5
 80019cc:	f7ff ff7e 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019d0:	20f0      	movs	r0, #240	@ 0xf0
 80019d2:	f7ff ff7b 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019d6:	20d9      	movs	r0, #217	@ 0xd9
 80019d8:	f7ff ff78 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019dc:	2022      	movs	r0, #34	@ 0x22
 80019de:	f7ff ff75 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019e2:	20da      	movs	r0, #218	@ 0xda
 80019e4:	f7ff ff72 	bl	80018cc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80019e8:	2012      	movs	r0, #18
 80019ea:	f7ff ff6f 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80019ee:	20db      	movs	r0, #219	@ 0xdb
 80019f0:	f7ff ff6c 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80019f4:	2020      	movs	r0, #32
 80019f6:	f7ff ff69 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80019fa:	208d      	movs	r0, #141	@ 0x8d
 80019fc:	f7ff ff66 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a00:	2014      	movs	r0, #20
 8001a02:	f7ff ff63 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 fa30 	bl	8001e6c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f80f 	bl	8001a30 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001a12:	f000 f825 	bl	8001a60 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001a16:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <ssd1306_Init+0xd0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <ssd1306_Init+0xd0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a22:	4b02      	ldr	r3, [pc, #8]	@ (8001a2c <ssd1306_Init+0xd0>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	711a      	strb	r2, [r3, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000b2c 	.word	0x20000b2c

08001a30 <ssd1306_Fill>:

	/* Return OK */
	return 1;
}
/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <ssd1306_Fill+0x14>
 8001a40:	2300      	movs	r3, #0
 8001a42:	e000      	b.n	8001a46 <ssd1306_Fill+0x16>
 8001a44:	23ff      	movs	r3, #255	@ 0xff
 8001a46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <ssd1306_Fill+0x2c>)
 8001a4e:	f00f fb4e 	bl	80110ee <memset>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000072c 	.word	0x2000072c

08001a60 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	e016      	b.n	8001a9a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	3b50      	subs	r3, #80	@ 0x50
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff2a 	bl	80018cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff ff27 	bl	80018cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a7e:	2010      	movs	r0, #16
 8001a80:	f7ff ff24 	bl	80018cc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	01db      	lsls	r3, r3, #7
 8001a88:	4a08      	ldr	r2, [pc, #32]	@ (8001aac <ssd1306_UpdateScreen+0x4c>)
 8001a8a:	4413      	add	r3, r2
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff40 	bl	8001914 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	3301      	adds	r3, #1
 8001a98:	71fb      	strb	r3, [r7, #7]
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2b07      	cmp	r3, #7
 8001a9e:	d9e5      	bls.n	8001a6c <ssd1306_UpdateScreen+0xc>
    }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000072c 	.word	0x2000072c

08001ab0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	460b      	mov	r3, r1
 8001abc:	71bb      	strb	r3, [r7, #6]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db3d      	blt.n	8001b46 <ssd1306_DrawPixel+0x96>
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ace:	d83a      	bhi.n	8001b46 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001ad0:	797b      	ldrb	r3, [r7, #5]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d11a      	bne.n	8001b0c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ad6:	79fa      	ldrb	r2, [r7, #7]
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	08db      	lsrs	r3, r3, #3
 8001adc:	b2d8      	uxtb	r0, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	01db      	lsls	r3, r3, #7
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <ssd1306_DrawPixel+0xa4>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	b25a      	sxtb	r2, r3
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b259      	sxtb	r1, r3
 8001afc:	79fa      	ldrb	r2, [r7, #7]
 8001afe:	4603      	mov	r3, r0
 8001b00:	01db      	lsls	r3, r3, #7
 8001b02:	4413      	add	r3, r2
 8001b04:	b2c9      	uxtb	r1, r1
 8001b06:	4a13      	ldr	r2, [pc, #76]	@ (8001b54 <ssd1306_DrawPixel+0xa4>)
 8001b08:	54d1      	strb	r1, [r2, r3]
 8001b0a:	e01d      	b.n	8001b48 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b0c:	79fa      	ldrb	r2, [r7, #7]
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	08db      	lsrs	r3, r3, #3
 8001b12:	b2d8      	uxtb	r0, r3
 8001b14:	4603      	mov	r3, r0
 8001b16:	01db      	lsls	r3, r3, #7
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b54 <ssd1306_DrawPixel+0xa4>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	79bb      	ldrb	r3, [r7, #6]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	2101      	movs	r1, #1
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	4013      	ands	r3, r2
 8001b34:	b259      	sxtb	r1, r3
 8001b36:	79fa      	ldrb	r2, [r7, #7]
 8001b38:	4603      	mov	r3, r0
 8001b3a:	01db      	lsls	r3, r3, #7
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b2c9      	uxtb	r1, r1
 8001b40:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <ssd1306_DrawPixel+0xa4>)
 8001b42:	54d1      	strb	r1, [r2, r3]
 8001b44:	e000      	b.n	8001b48 <ssd1306_DrawPixel+0x98>
        return;
 8001b46:	bf00      	nop
    }
}
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	2000072c 	.word	0x2000072c

08001b58 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4604      	mov	r4, r0
 8001b60:	4638      	mov	r0, r7
 8001b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001b66:	4623      	mov	r3, r4
 8001b68:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b1f      	cmp	r3, #31
 8001b6e:	d902      	bls.n	8001b76 <ssd1306_WriteChar+0x1e>
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b74:	d901      	bls.n	8001b7a <ssd1306_WriteChar+0x22>
        return 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e077      	b.n	8001c6a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c74 <ssd1306_WriteChar+0x11c>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	783b      	ldrb	r3, [r7, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	2b80      	cmp	r3, #128	@ 0x80
 8001b86:	dc06      	bgt.n	8001b96 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001b88:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <ssd1306_WriteChar+0x11c>)
 8001b8a:	885b      	ldrh	r3, [r3, #2]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	787b      	ldrb	r3, [r7, #1]
 8001b90:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001b92:	2b40      	cmp	r3, #64	@ 0x40
 8001b94:	dd01      	ble.n	8001b9a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e067      	b.n	8001c6a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e04e      	b.n	8001c3e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	3b20      	subs	r3, #32
 8001ba6:	7879      	ldrb	r1, [r7, #1]
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4619      	mov	r1, r3
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	440b      	add	r3, r1
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	e036      	b.n	8001c2e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bd0:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <ssd1306_WriteChar+0x11c>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	b2d8      	uxtb	r0, r3
 8001bde:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <ssd1306_WriteChar+0x11c>)
 8001be0:	885b      	ldrh	r3, [r3, #2]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <ssd1306_DrawPixel>
 8001bf6:	e017      	b.n	8001c28 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <ssd1306_WriteChar+0x11c>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	b2d8      	uxtb	r0, r3
 8001c06:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <ssd1306_WriteChar+0x11c>)
 8001c08:	885b      	ldrh	r3, [r3, #2]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b2d9      	uxtb	r1, r3
 8001c14:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	f7ff ff44 	bl	8001ab0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	783b      	ldrb	r3, [r7, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d3c3      	bcc.n	8001bc0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	787b      	ldrb	r3, [r7, #1]
 8001c40:	461a      	mov	r2, r3
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d3ab      	bcc.n	8001ba0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <ssd1306_WriteChar+0x11c>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d005      	beq.n	8001c5e <ssd1306_WriteChar+0x106>
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	3a20      	subs	r2, #32
 8001c58:	440a      	add	r2, r1
 8001c5a:	7812      	ldrb	r2, [r2, #0]
 8001c5c:	e000      	b.n	8001c60 <ssd1306_WriteChar+0x108>
 8001c5e:	783a      	ldrb	r2, [r7, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <ssd1306_WriteChar+0x11c>)
 8001c66:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	@ 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd90      	pop	{r4, r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000b2c 	.word	0x20000b2c

08001c78 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	4638      	mov	r0, r7
 8001c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001c86:	e013      	b.n	8001cb0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	7818      	ldrb	r0, [r3, #0]
 8001c8c:	7e3b      	ldrb	r3, [r7, #24]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	463b      	mov	r3, r7
 8001c92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c94:	f7ff ff60 	bl	8001b58 <ssd1306_WriteChar>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d002      	beq.n	8001caa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	e008      	b.n	8001cbc <ssd1306_WriteString+0x44>
        }
        str++;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3301      	adds	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e7      	bne.n	8001c88 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	781b      	ldrb	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460a      	mov	r2, r1
 8001cce:	71fb      	strb	r3, [r7, #7]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <ssd1306_SetCursor+0x2c>)
 8001cda:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001cdc:	79bb      	ldrb	r3, [r7, #6]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <ssd1306_SetCursor+0x2c>)
 8001ce2:	805a      	strh	r2, [r3, #2]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	20000b2c 	.word	0x20000b2c

08001cf4 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4611      	mov	r1, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	71fb      	strb	r3, [r7, #7]
 8001d06:	4603      	mov	r3, r0
 8001d08:	71bb      	strb	r3, [r7, #6]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	717b      	strb	r3, [r7, #5]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001d12:	79fa      	ldrb	r2, [r7, #7]
 8001d14:	797b      	ldrb	r3, [r7, #5]
 8001d16:	4293      	cmp	r3, r2
 8001d18:	bf28      	it	cs
 8001d1a:	4613      	movcs	r3, r2
 8001d1c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001d1e:	797a      	ldrb	r2, [r7, #5]
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4293      	cmp	r3, r2
 8001d24:	bf38      	it	cc
 8001d26:	4613      	movcc	r3, r2
 8001d28:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001d2a:	79ba      	ldrb	r2, [r7, #6]
 8001d2c:	793b      	ldrb	r3, [r7, #4]
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	bf28      	it	cs
 8001d32:	4613      	movcs	r3, r2
 8001d34:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001d36:	793a      	ldrb	r2, [r7, #4]
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	bf38      	it	cc
 8001d3e:	4613      	movcc	r3, r2
 8001d40:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001d42:	7afb      	ldrb	r3, [r7, #11]
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	e017      	b.n	8001d78 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001d48:	7b7b      	ldrb	r3, [r7, #13]
 8001d4a:	73bb      	strb	r3, [r7, #14]
 8001d4c:	e009      	b.n	8001d62 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001d4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d52:	7bf9      	ldrb	r1, [r7, #15]
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff feaa 	bl	8001ab0 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001d5c:	7bbb      	ldrb	r3, [r7, #14]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	73bb      	strb	r3, [r7, #14]
 8001d62:	7bba      	ldrb	r2, [r7, #14]
 8001d64:	7b3b      	ldrb	r3, [r7, #12]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d803      	bhi.n	8001d72 <ssd1306_FillRectangle+0x7e>
 8001d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	daed      	bge.n	8001d4e <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	3301      	adds	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	7abb      	ldrb	r3, [r7, #10]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d803      	bhi.n	8001d88 <ssd1306_FillRectangle+0x94>
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d84:	d9e0      	bls.n	8001d48 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001d86:	bf00      	nop
 8001d88:	bf00      	nop
}
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}

08001d90 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	603a      	str	r2, [r7, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	4613      	mov	r3, r2
 8001da4:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001da6:	797b      	ldrb	r3, [r7, #5]
 8001da8:	3307      	adds	r3, #7
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da00      	bge.n	8001db0 <ssd1306_DrawBitmap+0x20>
 8001dae:	3307      	adds	r3, #7
 8001db0:	10db      	asrs	r3, r3, #3
 8001db2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db3e      	blt.n	8001e3e <ssd1306_DrawBitmap+0xae>
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dc4:	d83b      	bhi.n	8001e3e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73bb      	strb	r3, [r7, #14]
 8001dca:	e033      	b.n	8001e34 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	737b      	strb	r3, [r7, #13]
 8001dd0:	e026      	b.n	8001e20 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001dd2:	7b7b      	ldrb	r3, [r7, #13]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	e00d      	b.n	8001e00 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001de4:	7bbb      	ldrb	r3, [r7, #14]
 8001de6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	7b7a      	ldrb	r2, [r7, #13]
 8001df0:	08d2      	lsrs	r2, r2, #3
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	4413      	add	r3, r2
 8001df6:	461a      	mov	r2, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da08      	bge.n	8001e1a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001e08:	79fa      	ldrb	r2, [r7, #7]
 8001e0a:	7b7b      	ldrb	r3, [r7, #13]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	7f3a      	ldrb	r2, [r7, #28]
 8001e12:	79b9      	ldrb	r1, [r7, #6]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fe4b 	bl	8001ab0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001e1a:	7b7b      	ldrb	r3, [r7, #13]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	737b      	strb	r3, [r7, #13]
 8001e20:	7b7a      	ldrb	r2, [r7, #13]
 8001e22:	797b      	ldrb	r3, [r7, #5]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d3d4      	bcc.n	8001dd2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001e28:	7bbb      	ldrb	r3, [r7, #14]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	73bb      	strb	r3, [r7, #14]
 8001e2e:	79bb      	ldrb	r3, [r7, #6]
 8001e30:	3301      	adds	r3, #1
 8001e32:	71bb      	strb	r3, [r7, #6]
 8001e34:	7bba      	ldrb	r2, [r7, #14]
 8001e36:	7e3b      	ldrb	r3, [r7, #24]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d3c7      	bcc.n	8001dcc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001e3c:	e000      	b.n	8001e40 <ssd1306_DrawBitmap+0xb0>
        return;
 8001e3e:	bf00      	nop
}
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e50:	2381      	movs	r3, #129	@ 0x81
 8001e52:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fd38 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fd34 	bl	80018cc <ssd1306_WriteCommand>
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e7c:	23af      	movs	r3, #175	@ 0xaf
 8001e7e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e80:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <ssd1306_SetDisplayOn+0x38>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	715a      	strb	r2, [r3, #5]
 8001e86:	e004      	b.n	8001e92 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001e88:	23ae      	movs	r3, #174	@ 0xae
 8001e8a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <ssd1306_SetDisplayOn+0x38>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fd19 	bl	80018cc <ssd1306_WriteCommand>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000b2c 	.word	0x20000b2c

08001ea8 <OLED_DrawBitmap>:
    return SSD1306.DisplayOn;
}

//*********************************************************************************************//
// For 16*8
void OLED_DrawBitmap(uint8_t x, uint8_t y, const uint8_t* bitmap, uint8_t width, uint8_t height) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	603a      	str	r2, [r7, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	71bb      	strb	r3, [r7, #6]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	717b      	strb	r3, [r7, #5]
    for (uint8_t i = 0; i < height; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e031      	b.n	8001f28 <OLED_DrawBitmap+0x80>
        for (uint8_t j = 0; j < width; j++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73bb      	strb	r3, [r7, #14]
 8001ec8:	e027      	b.n	8001f1a <OLED_DrawBitmap+0x72>
            if (bitmap[i] & (1 << j)) {
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	7bbb      	ldrb	r3, [r7, #14]
 8001ed6:	fa42 f303 	asr.w	r3, r2, r3
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00c      	beq.n	8001efc <OLED_DrawBitmap+0x54>
            	ssd1306_DrawPixel(x + j, y + i, White);  // Draw pixel if bit is set
 8001ee2:	79fa      	ldrb	r2, [r7, #7]
 8001ee4:	7bbb      	ldrb	r3, [r7, #14]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b2d8      	uxtb	r0, r3
 8001eea:	79ba      	ldrb	r2, [r7, #6]
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	4413      	add	r3, r2
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7ff fddb 	bl	8001ab0 <ssd1306_DrawPixel>
 8001efa:	e00b      	b.n	8001f14 <OLED_DrawBitmap+0x6c>
            } else {
            	ssd1306_DrawPixel(x + j, y + i, Black);  // Clear pixel if bit is not set
 8001efc:	79fa      	ldrb	r2, [r7, #7]
 8001efe:	7bbb      	ldrb	r3, [r7, #14]
 8001f00:	4413      	add	r3, r2
 8001f02:	b2d8      	uxtb	r0, r3
 8001f04:	79ba      	ldrb	r2, [r7, #6]
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f7ff fdce 	bl	8001ab0 <ssd1306_DrawPixel>
        for (uint8_t j = 0; j < width; j++) {
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	3301      	adds	r3, #1
 8001f18:	73bb      	strb	r3, [r7, #14]
 8001f1a:	7bba      	ldrb	r2, [r7, #14]
 8001f1c:	797b      	ldrb	r3, [r7, #5]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3d3      	bcc.n	8001eca <OLED_DrawBitmap+0x22>
    for (uint8_t i = 0; i < height; i++) {
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	3301      	adds	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	7e3b      	ldrb	r3, [r7, #24]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3c9      	bcc.n	8001ec4 <OLED_DrawBitmap+0x1c>
            }
        }
    }
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <HAL_MspInit+0x4c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f88 <HAL_MspInit+0x4c>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <HAL_MspInit+0x4c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <HAL_MspInit+0x4c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	4a08      	ldr	r2, [pc, #32]	@ (8001f88 <HAL_MspInit+0x4c>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_MspInit+0x4c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	@ 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a5e      	ldr	r2, [pc, #376]	@ (8002124 <HAL_ADC_MspInit+0x198>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d157      	bne.n	800205e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fbe:	4b5a      	ldr	r3, [pc, #360]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	4b56      	ldr	r3, [pc, #344]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a55      	ldr	r2, [pc, #340]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b53      	ldr	r3, [pc, #332]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fea:	2303      	movs	r3, #3
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	484c      	ldr	r0, [pc, #304]	@ (800212c <HAL_ADC_MspInit+0x1a0>)
 8001ffa:	f002 f861 	bl	80040c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002000:	4a4c      	ldr	r2, [pc, #304]	@ (8002134 <HAL_ADC_MspInit+0x1a8>)
 8002002:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002004:	4b4a      	ldr	r3, [pc, #296]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800200a:	4b49      	ldr	r3, [pc, #292]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002010:	4b47      	ldr	r3, [pc, #284]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002016:	4b46      	ldr	r3, [pc, #280]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002018:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800201c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800201e:	4b44      	ldr	r3, [pc, #272]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002020:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002024:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002026:	4b42      	ldr	r3, [pc, #264]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002028:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800202c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800202e:	4b40      	ldr	r3, [pc, #256]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002034:	4b3e      	ldr	r3, [pc, #248]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800203a:	4b3d      	ldr	r3, [pc, #244]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002040:	483b      	ldr	r0, [pc, #236]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002042:	f001 f9f5 	bl	8003430 <HAL_DMA_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800204c:	f7ff fc1c 	bl	8001888 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a37      	ldr	r2, [pc, #220]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002054:	639a      	str	r2, [r3, #56]	@ 0x38
 8002056:	4a36      	ldr	r2, [pc, #216]	@ (8002130 <HAL_ADC_MspInit+0x1a4>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800205c:	e05d      	b.n	800211a <HAL_ADC_MspInit+0x18e>
  else if(hadc->Instance==ADC3)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a35      	ldr	r2, [pc, #212]	@ (8002138 <HAL_ADC_MspInit+0x1ac>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d158      	bne.n	800211a <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	4b2e      	ldr	r3, [pc, #184]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 800206e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002070:	4a2d      	ldr	r2, [pc, #180]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 8002072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002076:	6453      	str	r3, [r2, #68]	@ 0x44
 8002078:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 800207a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	4a26      	ldr	r2, [pc, #152]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6313      	str	r3, [r2, #48]	@ 0x30
 8002094:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <HAL_ADC_MspInit+0x19c>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPEC_VIDEO_Pin;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a4:	2303      	movs	r3, #3
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPEC_VIDEO_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	481e      	ldr	r0, [pc, #120]	@ (800212c <HAL_ADC_MspInit+0x1a0>)
 80020b4:	f002 f804 	bl	80040c0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 80020b8:	4b20      	ldr	r3, [pc, #128]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 80020ba:	4a21      	ldr	r2, [pc, #132]	@ (8002140 <HAL_ADC_MspInit+0x1b4>)
 80020bc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80020be:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 80020c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020c4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c6:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80020d2:	4b1a      	ldr	r3, [pc, #104]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 80020d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020d8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020da:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 80020dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020e0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020e2:	4b16      	ldr	r3, [pc, #88]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 80020e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80020ea:	4b14      	ldr	r3, [pc, #80]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 80020ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020f0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80020f2:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80020fe:	480f      	ldr	r0, [pc, #60]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 8002100:	f001 f996 	bl	8003430 <HAL_DMA_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_ADC_MspInit+0x182>
      Error_Handler();
 800210a:	f7ff fbbd 	bl	8001888 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 8002112:	639a      	str	r2, [r3, #56]	@ 0x38
 8002114:	4a09      	ldr	r2, [pc, #36]	@ (800213c <HAL_ADC_MspInit+0x1b0>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800211a:	bf00      	nop
 800211c:	3730      	adds	r7, #48	@ 0x30
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40012000 	.word	0x40012000
 8002128:	40023800 	.word	0x40023800
 800212c:	40020000 	.word	0x40020000
 8002130:	20000338 	.word	0x20000338
 8002134:	40026470 	.word	0x40026470
 8002138:	40012200 	.word	0x40012200
 800213c:	20000398 	.word	0x20000398
 8002140:	40026410 	.word	0x40026410

08002144 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a29      	ldr	r2, [pc, #164]	@ (8002208 <HAL_I2C_MspInit+0xc4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d14b      	bne.n	80021fe <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	4b28      	ldr	r3, [pc, #160]	@ (800220c <HAL_I2C_MspInit+0xc8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a27      	ldr	r2, [pc, #156]	@ (800220c <HAL_I2C_MspInit+0xc8>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b25      	ldr	r3, [pc, #148]	@ (800220c <HAL_I2C_MspInit+0xc8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_I2C_MspInit+0xc8>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a20      	ldr	r2, [pc, #128]	@ (800220c <HAL_I2C_MspInit+0xc8>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b1e      	ldr	r3, [pc, #120]	@ (800220c <HAL_I2C_MspInit+0xc8>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = RTC_SDA_Pin;
 800219e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a4:	2312      	movs	r3, #18
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021b0:	2304      	movs	r3, #4
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RTC_SDA_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4815      	ldr	r0, [pc, #84]	@ (8002210 <HAL_I2C_MspInit+0xcc>)
 80021bc:	f001 ff80 	bl	80040c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RTC_SCL_Pin;
 80021c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c6:	2312      	movs	r3, #18
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021d2:	2304      	movs	r3, #4
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RTC_SCL_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	480d      	ldr	r0, [pc, #52]	@ (8002214 <HAL_I2C_MspInit+0xd0>)
 80021de:	f001 ff6f 	bl	80040c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_I2C_MspInit+0xc8>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	4a08      	ldr	r2, [pc, #32]	@ (800220c <HAL_I2C_MspInit+0xc8>)
 80021ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_I2C_MspInit+0xc8>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	@ 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40005c00 	.word	0x40005c00
 800220c:	40023800 	.word	0x40023800
 8002210:	40020800 	.word	0x40020800
 8002214:	40020000 	.word	0x40020000

08002218 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	@ 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a19      	ldr	r2, [pc, #100]	@ (800229c <HAL_SPI_MspInit+0x84>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d12c      	bne.n	8002294 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 8002244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
 800224a:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a10      	ldr	r2, [pc, #64]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002272:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002284:	2306      	movs	r3, #6
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <HAL_SPI_MspInit+0x8c>)
 8002290:	f001 ff16 	bl	80040c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002294:	bf00      	nop
 8002296:	3728      	adds	r7, #40	@ 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40003c00 	.word	0x40003c00
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020800 	.word	0x40020800

080022a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a36      	ldr	r2, [pc, #216]	@ (8002390 <HAL_TIM_Base_MspInit+0xe8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d13e      	bne.n	8002338 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	4b35      	ldr	r3, [pc, #212]	@ (8002394 <HAL_TIM_Base_MspInit+0xec>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	4a34      	ldr	r2, [pc, #208]	@ (8002394 <HAL_TIM_Base_MspInit+0xec>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ca:	4b32      	ldr	r3, [pc, #200]	@ (8002394 <HAL_TIM_Base_MspInit+0xec>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80022d6:	4b30      	ldr	r3, [pc, #192]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 80022d8:	4a30      	ldr	r2, [pc, #192]	@ (800239c <HAL_TIM_Base_MspInit+0xf4>)
 80022da:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80022dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 80022de:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80022e2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 80022e6:	2240      	movs	r2, #64	@ 0x40
 80022e8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022f0:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 80022f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022f6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022f8:	4b27      	ldr	r3, [pc, #156]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 80022fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022fe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 8002302:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002306:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002308:	4b23      	ldr	r3, [pc, #140]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800230e:	4b22      	ldr	r3, [pc, #136]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 8002310:	2200      	movs	r2, #0
 8002312:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002314:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800231a:	481f      	ldr	r0, [pc, #124]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 800231c:	f001 f888 	bl	8003430 <HAL_DMA_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002326:	f7ff faaf 	bl	8001888 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1a      	ldr	r2, [pc, #104]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 800232e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002330:	4a19      	ldr	r2, [pc, #100]	@ (8002398 <HAL_TIM_Base_MspInit+0xf0>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002336:	e026      	b.n	8002386 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM10)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a18      	ldr	r2, [pc, #96]	@ (80023a0 <HAL_TIM_Base_MspInit+0xf8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10e      	bne.n	8002360 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <HAL_TIM_Base_MspInit+0xec>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	4a12      	ldr	r2, [pc, #72]	@ (8002394 <HAL_TIM_Base_MspInit+0xec>)
 800234c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002350:	6453      	str	r3, [r2, #68]	@ 0x44
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_TIM_Base_MspInit+0xec>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
}
 800235e:	e012      	b.n	8002386 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM11)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0f      	ldr	r2, [pc, #60]	@ (80023a4 <HAL_TIM_Base_MspInit+0xfc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10d      	bne.n	8002386 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_TIM_Base_MspInit+0xec>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	4a08      	ldr	r2, [pc, #32]	@ (8002394 <HAL_TIM_Base_MspInit+0xec>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002378:	6453      	str	r3, [r2, #68]	@ 0x44
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_TIM_Base_MspInit+0xec>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40010000 	.word	0x40010000
 8002394:	40023800 	.word	0x40023800
 8002398:	2000057c 	.word	0x2000057c
 800239c:	40026428 	.word	0x40026428
 80023a0:	40014400 	.word	0x40014400
 80023a4:	40014800 	.word	0x40014800

080023a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a12      	ldr	r2, [pc, #72]	@ (8002410 <HAL_TIM_MspPostInit+0x68>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d11e      	bne.n	8002408 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_TIM_MspPostInit+0x6c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a10      	ldr	r2, [pc, #64]	@ (8002414 <HAL_TIM_MspPostInit+0x6c>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_TIM_MspPostInit+0x6c>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SPEC_CLK_Pin;
 80023e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPEC_CLK_GPIO_Port, &GPIO_InitStruct);
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	4619      	mov	r1, r3
 8002402:	4805      	ldr	r0, [pc, #20]	@ (8002418 <HAL_TIM_MspPostInit+0x70>)
 8002404:	f001 fe5c 	bl	80040c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002408:	bf00      	nop
 800240a:	3720      	adds	r7, #32
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40010000 	.word	0x40010000
 8002414:	40023800 	.word	0x40023800
 8002418:	40021000 	.word	0x40021000

0800241c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	@ 0x30
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a60      	ldr	r2, [pc, #384]	@ (80025bc <HAL_UART_MspInit+0x1a0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d15a      	bne.n	80024f4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	4b5f      	ldr	r3, [pc, #380]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	4a5e      	ldr	r2, [pc, #376]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 8002448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800244c:	6413      	str	r3, [r2, #64]	@ 0x40
 800244e:	4b5c      	ldr	r3, [pc, #368]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	4b58      	ldr	r3, [pc, #352]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a57      	ldr	r2, [pc, #348]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b55      	ldr	r3, [pc, #340]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002476:	230c      	movs	r3, #12
 8002478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002482:	2303      	movs	r3, #3
 8002484:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002486:	2307      	movs	r3, #7
 8002488:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 031c 	add.w	r3, r7, #28
 800248e:	4619      	mov	r1, r3
 8002490:	484c      	ldr	r0, [pc, #304]	@ (80025c4 <HAL_UART_MspInit+0x1a8>)
 8002492:	f001 fe15 	bl	80040c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002496:	4b4c      	ldr	r3, [pc, #304]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 8002498:	4a4c      	ldr	r2, [pc, #304]	@ (80025cc <HAL_UART_MspInit+0x1b0>)
 800249a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800249c:	4b4a      	ldr	r3, [pc, #296]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 800249e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a4:	4b48      	ldr	r3, [pc, #288]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024a6:	2240      	movs	r2, #64	@ 0x40
 80024a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024aa:	4b47      	ldr	r3, [pc, #284]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024b0:	4b45      	ldr	r3, [pc, #276]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b8:	4b43      	ldr	r3, [pc, #268]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024be:	4b42      	ldr	r3, [pc, #264]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024c4:	4b40      	ldr	r3, [pc, #256]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024ca:	4b3f      	ldr	r3, [pc, #252]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d0:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024d6:	483c      	ldr	r0, [pc, #240]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024d8:	f000 ffaa 	bl	8003430 <HAL_DMA_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80024e2:	f7ff f9d1 	bl	8001888 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a37      	ldr	r2, [pc, #220]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80024ec:	4a36      	ldr	r2, [pc, #216]	@ (80025c8 <HAL_UART_MspInit+0x1ac>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024f2:	e05f      	b.n	80025b4 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART3)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a35      	ldr	r2, [pc, #212]	@ (80025d0 <HAL_UART_MspInit+0x1b4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d15a      	bne.n	80025b4 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	4a2e      	ldr	r2, [pc, #184]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800250c:	6413      	str	r3, [r2, #64]	@ 0x40
 800250e:	4b2c      	ldr	r3, [pc, #176]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b28      	ldr	r3, [pc, #160]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a27      	ldr	r2, [pc, #156]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b25      	ldr	r3, [pc, #148]	@ (80025c0 <HAL_UART_MspInit+0x1a4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002536:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002548:	2307      	movs	r3, #7
 800254a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	4619      	mov	r1, r3
 8002552:	4820      	ldr	r0, [pc, #128]	@ (80025d4 <HAL_UART_MspInit+0x1b8>)
 8002554:	f001 fdb4 	bl	80040c0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002558:	4b1f      	ldr	r3, [pc, #124]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 800255a:	4a20      	ldr	r2, [pc, #128]	@ (80025dc <HAL_UART_MspInit+0x1c0>)
 800255c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800255e:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 8002560:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002564:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002566:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 8002568:	2240      	movs	r2, #64	@ 0x40
 800256a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800256c:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 8002574:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002578:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 800257c:	2200      	movs	r2, #0
 800257e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002580:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002586:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 8002588:	2200      	movs	r2, #0
 800258a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800258c:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 800258e:	2200      	movs	r2, #0
 8002590:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002592:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 8002594:	2200      	movs	r2, #0
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002598:	480f      	ldr	r0, [pc, #60]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 800259a:	f000 ff49 	bl	8003430 <HAL_DMA_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80025a4:	f7ff f970 	bl	8001888 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a0b      	ldr	r2, [pc, #44]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 80025ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <HAL_UART_MspInit+0x1bc>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80025b4:	bf00      	nop
 80025b6:	3730      	adds	r7, #48	@ 0x30
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40004400 	.word	0x40004400
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020000 	.word	0x40020000
 80025c8:	2000066c 	.word	0x2000066c
 80025cc:	400260a0 	.word	0x400260a0
 80025d0:	40004800 	.word	0x40004800
 80025d4:	40020400 	.word	0x40020400
 80025d8:	200006cc 	.word	0x200006cc
 80025dc:	40026058 	.word	0x40026058

080025e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <NMI_Handler+0x4>

080025e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <MemManage_Handler+0x4>

080025f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <UsageFault_Handler+0x4>

08002608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002636:	f000 f993 	bl	8002960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002644:	4802      	ldr	r0, [pc, #8]	@ (8002650 <DMA1_Stream3_IRQHandler+0x10>)
 8002646:	f000 fff9 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200006cc 	.word	0x200006cc

08002654 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002658:	4802      	ldr	r0, [pc, #8]	@ (8002664 <DMA1_Stream6_IRQHandler+0x10>)
 800265a:	f000 ffef 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000066c 	.word	0x2000066c

08002668 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800266c:	4802      	ldr	r0, [pc, #8]	@ (8002678 <DMA2_Stream0_IRQHandler+0x10>)
 800266e:	f000 ffe5 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000398 	.word	0x20000398

0800267c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002680:	4802      	ldr	r0, [pc, #8]	@ (800268c <DMA2_Stream1_IRQHandler+0x10>)
 8002682:	f000 ffdb 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	2000057c 	.word	0x2000057c

08002690 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002694:	4802      	ldr	r0, [pc, #8]	@ (80026a0 <DMA2_Stream4_IRQHandler+0x10>)
 8002696:	f000 ffd1 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000338 	.word	0x20000338

080026a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80026a8:	4802      	ldr	r0, [pc, #8]	@ (80026b4 <OTG_FS_IRQHandler+0x10>)
 80026aa:	f002 f9cf 	bl	8004a4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000f70 	.word	0x20000f70

080026b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return 1;
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_kill>:

int _kill(int pid, int sig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026d2:	f00e fd81 	bl	80111d8 <__errno>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2216      	movs	r2, #22
 80026da:	601a      	str	r2, [r3, #0]
  return -1;
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_exit>:

void _exit (int status)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ffe7 	bl	80026c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026fa:	bf00      	nop
 80026fc:	e7fd      	b.n	80026fa <_exit+0x12>

080026fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e00a      	b.n	8002726 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002710:	f3af 8000 	nop.w
 8002714:	4601      	mov	r1, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	60ba      	str	r2, [r7, #8]
 800271c:	b2ca      	uxtb	r2, r1
 800271e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	dbf0      	blt.n	8002710 <_read+0x12>
  }

  return len;
 800272e:	687b      	ldr	r3, [r7, #4]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	e009      	b.n	800275e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	60ba      	str	r2, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3301      	adds	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	dbf1      	blt.n	800274a <_write+0x12>
  }
  return len;
 8002766:	687b      	ldr	r3, [r7, #4]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_close>:

int _close(int file)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002798:	605a      	str	r2, [r3, #4]
  return 0;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <_isatty>:

int _isatty(int file)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027b0:	2301      	movs	r3, #1
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e0:	4a14      	ldr	r2, [pc, #80]	@ (8002834 <_sbrk+0x5c>)
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <_sbrk+0x60>)
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ec:	4b13      	ldr	r3, [pc, #76]	@ (800283c <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f4:	4b11      	ldr	r3, [pc, #68]	@ (800283c <_sbrk+0x64>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	@ (8002840 <_sbrk+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d207      	bcs.n	8002818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002808:	f00e fce6 	bl	80111d8 <__errno>
 800280c:	4603      	mov	r3, r0
 800280e:	220c      	movs	r2, #12
 8002810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e009      	b.n	800282c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281e:	4b07      	ldr	r3, [pc, #28]	@ (800283c <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <_sbrk+0x64>)
 8002828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282a:	68fb      	ldr	r3, [r7, #12]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20020000 	.word	0x20020000
 8002838:	00000400 	.word	0x00000400
 800283c:	20000b34 	.word	0x20000b34
 8002840:	20002110 	.word	0x20002110

08002844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002848:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <SystemInit+0x20>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	4a05      	ldr	r2, [pc, #20]	@ (8002864 <SystemInit+0x20>)
 8002850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800286c:	f7ff ffea 	bl	8002844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002870:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002872:	490d      	ldr	r1, [pc, #52]	@ (80028a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002874:	4a0d      	ldr	r2, [pc, #52]	@ (80028ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002878:	e002      	b.n	8002880 <LoopCopyDataInit>

0800287a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800287c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287e:	3304      	adds	r3, #4

08002880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002884:	d3f9      	bcc.n	800287a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002886:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002888:	4c0a      	ldr	r4, [pc, #40]	@ (80028b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800288c:	e001      	b.n	8002892 <LoopFillZerobss>

0800288e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002890:	3204      	adds	r2, #4

08002892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002894:	d3fb      	bcc.n	800288e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002896:	f00e fca5 	bl	80111e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800289a:	f7fe fb5d 	bl	8000f58 <main>
  bx  lr    
 800289e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a8:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 80028ac:	08015a48 	.word	0x08015a48
  ldr r2, =_sbss
 80028b0:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 80028b4:	20002110 	.word	0x20002110

080028b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b8:	e7fe      	b.n	80028b8 <ADC_IRQHandler>
	...

080028bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c0:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	@ (80028fc <HAL_Init+0x40>)
 80028c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <HAL_Init+0x40>)
 80028d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d8:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <HAL_Init+0x40>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a07      	ldr	r2, [pc, #28]	@ (80028fc <HAL_Init+0x40>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f000 fd61 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ea:	200f      	movs	r0, #15
 80028ec:	f000 f808 	bl	8002900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f0:	f7ff fb24 	bl	8001f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00

08002900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002908:	4b12      	ldr	r3, [pc, #72]	@ (8002954 <HAL_InitTick+0x54>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <HAL_InitTick+0x58>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002916:	fbb3 f3f1 	udiv	r3, r3, r1
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fd79 	bl	8003416 <HAL_SYSTICK_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e00e      	b.n	800294c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b0f      	cmp	r3, #15
 8002932:	d80a      	bhi.n	800294a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002934:	2200      	movs	r2, #0
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	f000 fd41 	bl	80033c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002940:	4a06      	ldr	r2, [pc, #24]	@ (800295c <HAL_InitTick+0x5c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000000 	.word	0x20000000
 8002958:	20000008 	.word	0x20000008
 800295c:	20000004 	.word	0x20000004

08002960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_IncTick+0x20>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_IncTick+0x24>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4413      	add	r3, r2
 8002970:	4a04      	ldr	r2, [pc, #16]	@ (8002984 <HAL_IncTick+0x24>)
 8002972:	6013      	str	r3, [r2, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000008 	.word	0x20000008
 8002984:	20000b38 	.word	0x20000b38

08002988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return uwTick;
 800298c:	4b03      	ldr	r3, [pc, #12]	@ (800299c <HAL_GetTick+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000b38 	.word	0x20000b38

080029a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff ffee 	bl	8002988 <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d005      	beq.n	80029c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ba:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <HAL_Delay+0x44>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029c6:	bf00      	nop
 80029c8:	f7ff ffde 	bl	8002988 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d8f7      	bhi.n	80029c8 <HAL_Delay+0x28>
  {
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000008 	.word	0x20000008

080029e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e033      	b.n	8002a66 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fac0 	bl	8001f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a2e:	f023 0302 	bic.w	r3, r3, #2
 8002a32:	f043 0202 	orr.w	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fa68 	bl	8002f10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a56:	e001      	b.n	8002a5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_Start_DMA+0x1e>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e0e9      	b.n	8002c62 <HAL_ADC_Start_DMA+0x1f2>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d018      	beq.n	8002ad6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab4:	4b6d      	ldr	r3, [pc, #436]	@ (8002c6c <HAL_ADC_Start_DMA+0x1fc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6d      	ldr	r2, [pc, #436]	@ (8002c70 <HAL_ADC_Start_DMA+0x200>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0c9a      	lsrs	r2, r3, #18
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ac8:	e002      	b.n	8002ad0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f9      	bne.n	8002aca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ae4:	d107      	bne.n	8002af6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002af4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	f040 80a1 	bne.w	8002c48 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b44:	d106      	bne.n	8002b54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f023 0206 	bic.w	r2, r3, #6
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b52:	e002      	b.n	8002b5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b62:	4b44      	ldr	r3, [pc, #272]	@ (8002c74 <HAL_ADC_Start_DMA+0x204>)
 8002b64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6a:	4a43      	ldr	r2, [pc, #268]	@ (8002c78 <HAL_ADC_Start_DMA+0x208>)
 8002b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b72:	4a42      	ldr	r2, [pc, #264]	@ (8002c7c <HAL_ADC_Start_DMA+0x20c>)
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7a:	4a41      	ldr	r2, [pc, #260]	@ (8002c80 <HAL_ADC_Start_DMA+0x210>)
 8002b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b96:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ba6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	334c      	adds	r3, #76	@ 0x4c
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f000 fce8 	bl	800358c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d12a      	bne.n	8002c1e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002c84 <HAL_ADC_Start_DMA+0x214>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d015      	beq.n	8002bfe <HAL_ADC_Start_DMA+0x18e>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8002c88 <HAL_ADC_Start_DMA+0x218>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d105      	bne.n	8002be8 <HAL_ADC_Start_DMA+0x178>
 8002bdc:	4b25      	ldr	r3, [pc, #148]	@ (8002c74 <HAL_ADC_Start_DMA+0x204>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a27      	ldr	r2, [pc, #156]	@ (8002c8c <HAL_ADC_Start_DMA+0x21c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d136      	bne.n	8002c60 <HAL_ADC_Start_DMA+0x1f0>
 8002bf2:	4b20      	ldr	r3, [pc, #128]	@ (8002c74 <HAL_ADC_Start_DMA+0x204>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d130      	bne.n	8002c60 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d129      	bne.n	8002c60 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e020      	b.n	8002c60 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a18      	ldr	r2, [pc, #96]	@ (8002c84 <HAL_ADC_Start_DMA+0x214>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d11b      	bne.n	8002c60 <HAL_ADC_Start_DMA+0x1f0>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d114      	bne.n	8002c60 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	e00b      	b.n	8002c60 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	f043 0210 	orr.w	r2, r3, #16
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	431bde83 	.word	0x431bde83
 8002c74:	40012300 	.word	0x40012300
 8002c78:	08003109 	.word	0x08003109
 8002c7c:	080031c3 	.word	0x080031c3
 8002c80:	080031df 	.word	0x080031df
 8002c84:	40012000 	.word	0x40012000
 8002c88:	40012100 	.word	0x40012100
 8002c8c:	40012200 	.word	0x40012200

08002c90 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x1c>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e105      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x228>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b09      	cmp	r3, #9
 8002cf6:	d925      	bls.n	8002d44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68d9      	ldr	r1, [r3, #12]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b1e      	subs	r3, #30
 8002d0e:	2207      	movs	r2, #7
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43da      	mvns	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68d9      	ldr	r1, [r3, #12]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4603      	mov	r3, r0
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4403      	add	r3, r0
 8002d36:	3b1e      	subs	r3, #30
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e022      	b.n	8002d8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6919      	ldr	r1, [r3, #16]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	2207      	movs	r2, #7
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	400a      	ands	r2, r1
 8002d66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6919      	ldr	r1, [r3, #16]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4403      	add	r3, r0
 8002d80:	409a      	lsls	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d824      	bhi.n	8002ddc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	3b05      	subs	r3, #5
 8002da4:	221f      	movs	r2, #31
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	400a      	ands	r2, r1
 8002db2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	3b05      	subs	r3, #5
 8002dce:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dda:	e04c      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b0c      	cmp	r3, #12
 8002de2:	d824      	bhi.n	8002e2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	3b23      	subs	r3, #35	@ 0x23
 8002df6:	221f      	movs	r2, #31
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	400a      	ands	r2, r1
 8002e04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3b23      	subs	r3, #35	@ 0x23
 8002e20:	fa00 f203 	lsl.w	r2, r0, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e2c:	e023      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b41      	subs	r3, #65	@ 0x41
 8002e40:	221f      	movs	r2, #31
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	3b41      	subs	r3, #65	@ 0x41
 8002e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e76:	4b22      	ldr	r3, [pc, #136]	@ (8002f00 <HAL_ADC_ConfigChannel+0x234>)
 8002e78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a21      	ldr	r2, [pc, #132]	@ (8002f04 <HAL_ADC_ConfigChannel+0x238>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d109      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1cc>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b12      	cmp	r3, #18
 8002e8a:	d105      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a19      	ldr	r2, [pc, #100]	@ (8002f04 <HAL_ADC_ConfigChannel+0x238>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d123      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x21e>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d003      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x1e6>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b11      	cmp	r3, #17
 8002eb0:	d11b      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d111      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ec6:	4b10      	ldr	r3, [pc, #64]	@ (8002f08 <HAL_ADC_ConfigChannel+0x23c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a10      	ldr	r2, [pc, #64]	@ (8002f0c <HAL_ADC_ConfigChannel+0x240>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	0c9a      	lsrs	r2, r3, #18
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002edc:	e002      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f9      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40012300 	.word	0x40012300
 8002f04:	40012000 	.word	0x40012000
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	431bde83 	.word	0x431bde83

08002f10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f18:	4b79      	ldr	r3, [pc, #484]	@ (8003100 <ADC_Init+0x1f0>)
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	021a      	lsls	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6899      	ldr	r1, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa2:	4a58      	ldr	r2, [pc, #352]	@ (8003104 <ADC_Init+0x1f4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	e00f      	b.n	800300e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ffc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800300c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0202 	bic.w	r2, r2, #2
 800301c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6899      	ldr	r1, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7e1b      	ldrb	r3, [r3, #24]
 8003028:	005a      	lsls	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01b      	beq.n	8003074 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800304a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800305a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	3b01      	subs	r3, #1
 8003068:	035a      	lsls	r2, r3, #13
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	e007      	b.n	8003084 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003082:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003092:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	3b01      	subs	r3, #1
 80030a0:	051a      	lsls	r2, r3, #20
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6899      	ldr	r1, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030c6:	025a      	lsls	r2, r3, #9
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	029a      	lsls	r2, r3, #10
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012300 	.word	0x40012300
 8003104:	0f000001 	.word	0x0f000001

08003108 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003114:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800311e:	2b00      	cmp	r3, #0
 8003120:	d13c      	bne.n	800319c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d12b      	bne.n	8003194 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d127      	bne.n	8003194 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800315c:	2b00      	cmp	r3, #0
 800315e:	d119      	bne.n	8003194 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0220 	bic.w	r2, r2, #32
 800316e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fd7b 	bl	8002c90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800319a:	e00e      	b.n	80031ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff fd85 	bl	8002cb8 <HAL_ADC_ErrorCallback>
}
 80031ae:	e004      	b.n	80031ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff fd67 	bl	8002ca4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2240      	movs	r2, #64	@ 0x40
 80031f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	f043 0204 	orr.w	r2, r3, #4
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff fd5a 	bl	8002cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003234:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800323c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323e:	4a04      	ldr	r2, [pc, #16]	@ (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	60d3      	str	r3, [r2, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003258:	4b04      	ldr	r3, [pc, #16]	@ (800326c <__NVIC_GetPriorityGrouping+0x18>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	f003 0307 	and.w	r3, r3, #7
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	db0b      	blt.n	800329a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	4907      	ldr	r1, [pc, #28]	@ (80032a8 <__NVIC_EnableIRQ+0x38>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2001      	movs	r0, #1
 8003292:	fa00 f202 	lsl.w	r2, r0, r2
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000e100 	.word	0xe000e100

080032ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	db0a      	blt.n	80032d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	490c      	ldr	r1, [pc, #48]	@ (80032f8 <__NVIC_SetPriority+0x4c>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	440b      	add	r3, r1
 80032d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d4:	e00a      	b.n	80032ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4908      	ldr	r1, [pc, #32]	@ (80032fc <__NVIC_SetPriority+0x50>)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	3b04      	subs	r3, #4
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	440b      	add	r3, r1
 80032ea:	761a      	strb	r2, [r3, #24]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	@ 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f1c3 0307 	rsb	r3, r3, #7
 800331a:	2b04      	cmp	r3, #4
 800331c:	bf28      	it	cs
 800331e:	2304      	movcs	r3, #4
 8003320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3304      	adds	r3, #4
 8003326:	2b06      	cmp	r3, #6
 8003328:	d902      	bls.n	8003330 <NVIC_EncodePriority+0x30>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3b03      	subs	r3, #3
 800332e:	e000      	b.n	8003332 <NVIC_EncodePriority+0x32>
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	401a      	ands	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003348:	f04f 31ff 	mov.w	r1, #4294967295
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	43d9      	mvns	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	4313      	orrs	r3, r2
         );
}
 800335a:	4618      	mov	r0, r3
 800335c:	3724      	adds	r7, #36	@ 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003378:	d301      	bcc.n	800337e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337a:	2301      	movs	r3, #1
 800337c:	e00f      	b.n	800339e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337e:	4a0a      	ldr	r2, [pc, #40]	@ (80033a8 <SysTick_Config+0x40>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003386:	210f      	movs	r1, #15
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f7ff ff8e 	bl	80032ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <SysTick_Config+0x40>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003396:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <SysTick_Config+0x40>)
 8003398:	2207      	movs	r2, #7
 800339a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000e010 	.word	0xe000e010

080033ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff29 	bl	800320c <__NVIC_SetPriorityGrouping>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d4:	f7ff ff3e 	bl	8003254 <__NVIC_GetPriorityGrouping>
 80033d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff ff8e 	bl	8003300 <NVIC_EncodePriority>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff5d 	bl	80032ac <__NVIC_SetPriority>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff31 	bl	8003270 <__NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffa2 	bl	8003368 <SysTick_Config>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7ff faa4 	bl	8002988 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e099      	b.n	8003580 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346c:	e00f      	b.n	800348e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800346e:	f7ff fa8b 	bl	8002988 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b05      	cmp	r3, #5
 800347a:	d908      	bls.n	800348e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e078      	b.n	8003580 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e8      	bne.n	800346e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4b38      	ldr	r3, [pc, #224]	@ (8003588 <HAL_DMA_Init+0x158>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d107      	bne.n	80034f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	4313      	orrs	r3, r2
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 0307 	bic.w	r3, r3, #7
 800350e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	2b04      	cmp	r3, #4
 8003520:	d117      	bne.n	8003552 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fa6f 	bl	8003a18 <DMA_CheckFifoParam>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2240      	movs	r2, #64	@ 0x40
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800354e:	2301      	movs	r3, #1
 8003550:	e016      	b.n	8003580 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa26 	bl	80039ac <DMA_CalcBaseAndBitshift>
 8003560:	4603      	mov	r3, r0
 8003562:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003568:	223f      	movs	r2, #63	@ 0x3f
 800356a:	409a      	lsls	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	f010803f 	.word	0xf010803f

0800358c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_DMA_Start_IT+0x26>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e040      	b.n	8003634 <HAL_DMA_Start_IT+0xa8>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d12f      	bne.n	8003626 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f9b8 	bl	8003950 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e4:	223f      	movs	r2, #63	@ 0x3f
 80035e6:	409a      	lsls	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0216 	orr.w	r2, r2, #22
 80035fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0208 	orr.w	r2, r2, #8
 8003612:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e005      	b.n	8003632 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800362e:	2302      	movs	r3, #2
 8003630:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003648:	4b8e      	ldr	r3, [pc, #568]	@ (8003884 <HAL_DMA_IRQHandler+0x248>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a8e      	ldr	r2, [pc, #568]	@ (8003888 <HAL_DMA_IRQHandler+0x24c>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	0a9b      	lsrs	r3, r3, #10
 8003654:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003666:	2208      	movs	r2, #8
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01a      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d013      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0204 	bic.w	r2, r2, #4
 800368e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003694:	2208      	movs	r2, #8
 8003696:	409a      	lsls	r2, r3
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ac:	2201      	movs	r2, #1
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d012      	beq.n	80036de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	2201      	movs	r2, #1
 80036cc:	409a      	lsls	r2, r3
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d6:	f043 0202 	orr.w	r2, r3, #2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e2:	2204      	movs	r2, #4
 80036e4:	409a      	lsls	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d012      	beq.n	8003714 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003700:	2204      	movs	r2, #4
 8003702:	409a      	lsls	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370c:	f043 0204 	orr.w	r2, r3, #4
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003718:	2210      	movs	r2, #16
 800371a:	409a      	lsls	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4013      	ands	r3, r2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d043      	beq.n	80037ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d03c      	beq.n	80037ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003736:	2210      	movs	r2, #16
 8003738:	409a      	lsls	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d018      	beq.n	800377e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d108      	bne.n	800376c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d024      	beq.n	80037ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
 800376a:	e01f      	b.n	80037ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01b      	beq.n	80037ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
 800377c:	e016      	b.n	80037ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d107      	bne.n	800379c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0208 	bic.w	r2, r2, #8
 800379a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b0:	2220      	movs	r2, #32
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 808f 	beq.w	80038dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8087 	beq.w	80038dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d2:	2220      	movs	r2, #32
 80037d4:	409a      	lsls	r2, r3
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d136      	bne.n	8003854 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0216 	bic.w	r2, r2, #22
 80037f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003804:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_DMA_IRQHandler+0x1da>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0208 	bic.w	r2, r2, #8
 8003824:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382a:	223f      	movs	r2, #63	@ 0x3f
 800382c:	409a      	lsls	r2, r3
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003846:	2b00      	cmp	r3, #0
 8003848:	d07e      	beq.n	8003948 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
        }
        return;
 8003852:	e079      	b.n	8003948 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01d      	beq.n	800389e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003874:	2b00      	cmp	r3, #0
 8003876:	d031      	beq.n	80038dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
 8003880:	e02c      	b.n	80038dc <HAL_DMA_IRQHandler+0x2a0>
 8003882:	bf00      	nop
 8003884:	20000000 	.word	0x20000000
 8003888:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d023      	beq.n	80038dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
 800389c:	e01e      	b.n	80038dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10f      	bne.n	80038cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0210 	bic.w	r2, r2, #16
 80038ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d032      	beq.n	800394a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d022      	beq.n	8003936 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2205      	movs	r2, #5
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3301      	adds	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	429a      	cmp	r2, r3
 8003912:	d307      	bcc.n	8003924 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f2      	bne.n	8003908 <HAL_DMA_IRQHandler+0x2cc>
 8003922:	e000      	b.n	8003926 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003924:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
 8003946:	e000      	b.n	800394a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003948:	bf00      	nop
    }
  }
}
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800396c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b40      	cmp	r3, #64	@ 0x40
 800397c:	d108      	bne.n	8003990 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800398e:	e007      	b.n	80039a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	3b10      	subs	r3, #16
 80039bc:	4a14      	ldr	r2, [pc, #80]	@ (8003a10 <DMA_CalcBaseAndBitshift+0x64>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039c6:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <DMA_CalcBaseAndBitshift+0x68>)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d909      	bls.n	80039ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039e2:	f023 0303 	bic.w	r3, r3, #3
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80039ec:	e007      	b.n	80039fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	aaaaaaab 	.word	0xaaaaaaab
 8003a14:	08014d64 	.word	0x08014d64

08003a18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d11f      	bne.n	8003a72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d856      	bhi.n	8003ae6 <DMA_CheckFifoParam+0xce>
 8003a38:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <DMA_CheckFifoParam+0x28>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a63 	.word	0x08003a63
 8003a48:	08003a51 	.word	0x08003a51
 8003a4c:	08003ae7 	.word	0x08003ae7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d046      	beq.n	8003aea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e043      	b.n	8003aea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a6a:	d140      	bne.n	8003aee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a70:	e03d      	b.n	8003aee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7a:	d121      	bne.n	8003ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d837      	bhi.n	8003af2 <DMA_CheckFifoParam+0xda>
 8003a82:	a201      	add	r2, pc, #4	@ (adr r2, 8003a88 <DMA_CheckFifoParam+0x70>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003a9f 	.word	0x08003a9f
 8003a90:	08003a99 	.word	0x08003a99
 8003a94:	08003ab1 	.word	0x08003ab1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9c:	e030      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d025      	beq.n	8003af6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aae:	e022      	b.n	8003af6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ab8:	d11f      	bne.n	8003afa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003abe:	e01c      	b.n	8003afa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d903      	bls.n	8003ace <DMA_CheckFifoParam+0xb6>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d003      	beq.n	8003ad4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003acc:	e018      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad2:	e015      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae4:	e00b      	b.n	8003afe <DMA_CheckFifoParam+0xe6>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e00a      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003aea:	bf00      	nop
 8003aec:	e008      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003aee:	bf00      	nop
 8003af0:	e006      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003af2:	bf00      	nop
 8003af4:	e004      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;   
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
    }
  } 
  
  return status; 
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b22:	4b23      	ldr	r3, [pc, #140]	@ (8003bb0 <HAL_FLASH_Program+0xa0>)
 8003b24:	7e1b      	ldrb	r3, [r3, #24]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_FLASH_Program+0x1e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e03b      	b.n	8003ba6 <HAL_FLASH_Program+0x96>
 8003b2e:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <HAL_FLASH_Program+0xa0>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003b38:	f000 f870 	bl	8003c1c <FLASH_WaitForLastOperation>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d12b      	bne.n	8003b9e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003b4c:	783b      	ldrb	r3, [r7, #0]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	68b8      	ldr	r0, [r7, #8]
 8003b52:	f000 f91b 	bl	8003d8c <FLASH_Program_Byte>
 8003b56:	e016      	b.n	8003b86 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d105      	bne.n	8003b6a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003b5e:	883b      	ldrh	r3, [r7, #0]
 8003b60:	4619      	mov	r1, r3
 8003b62:	68b8      	ldr	r0, [r7, #8]
 8003b64:	f000 f8ee 	bl	8003d44 <FLASH_Program_HalfWord>
 8003b68:	e00d      	b.n	8003b86 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d105      	bne.n	8003b7c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4619      	mov	r1, r3
 8003b74:	68b8      	ldr	r0, [r7, #8]
 8003b76:	f000 f8c3 	bl	8003d00 <FLASH_Program_Word>
 8003b7a:	e004      	b.n	8003b86 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b80:	68b8      	ldr	r0, [r7, #8]
 8003b82:	f000 f88b 	bl	8003c9c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b86:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003b8a:	f000 f847 	bl	8003c1c <FLASH_WaitForLastOperation>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003b92:	4b08      	ldr	r3, [pc, #32]	@ (8003bb4 <HAL_FLASH_Program+0xa4>)
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	4a07      	ldr	r2, [pc, #28]	@ (8003bb4 <HAL_FLASH_Program+0xa4>)
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b9e:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <HAL_FLASH_Program+0xa0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000b3c 	.word	0x20000b3c
 8003bb4:	40023c00 	.word	0x40023c00

08003bb8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <HAL_FLASH_Unlock+0x38>)
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	da0b      	bge.n	8003be2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003bca:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <HAL_FLASH_Unlock+0x38>)
 8003bcc:	4a09      	ldr	r2, [pc, #36]	@ (8003bf4 <HAL_FLASH_Unlock+0x3c>)
 8003bce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <HAL_FLASH_Unlock+0x38>)
 8003bd2:	4a09      	ldr	r2, [pc, #36]	@ (8003bf8 <HAL_FLASH_Unlock+0x40>)
 8003bd4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <HAL_FLASH_Unlock+0x38>)
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	da01      	bge.n	8003be2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003be2:	79fb      	ldrb	r3, [r7, #7]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	40023c00 	.word	0x40023c00
 8003bf4:	45670123 	.word	0x45670123
 8003bf8:	cdef89ab 	.word	0xcdef89ab

08003bfc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_FLASH_Lock+0x1c>)
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	4a04      	ldr	r2, [pc, #16]	@ (8003c18 <HAL_FLASH_Lock+0x1c>)
 8003c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c0a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	40023c00 	.word	0x40023c00

08003c1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c28:	4b1a      	ldr	r3, [pc, #104]	@ (8003c94 <FLASH_WaitForLastOperation+0x78>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003c2e:	f7fe feab 	bl	8002988 <HAL_GetTick>
 8003c32:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003c34:	e010      	b.n	8003c58 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d00c      	beq.n	8003c58 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <FLASH_WaitForLastOperation+0x38>
 8003c44:	f7fe fea0 	bl	8002988 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d201      	bcs.n	8003c58 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e019      	b.n	8003c8c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003c58:	4b0f      	ldr	r3, [pc, #60]	@ (8003c98 <FLASH_WaitForLastOperation+0x7c>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e8      	bne.n	8003c36 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003c64:	4b0c      	ldr	r3, [pc, #48]	@ (8003c98 <FLASH_WaitForLastOperation+0x7c>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c70:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <FLASH_WaitForLastOperation+0x7c>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003c76:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <FLASH_WaitForLastOperation+0x7c>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003c82:	f000 f8a5 	bl	8003dd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
  
}  
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000b3c 	.word	0x20000b3c
 8003c98:	40023c00 	.word	0x40023c00

08003c9c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ca8:	4b14      	ldr	r3, [pc, #80]	@ (8003cfc <FLASH_Program_DoubleWord+0x60>)
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	4a13      	ldr	r2, [pc, #76]	@ (8003cfc <FLASH_Program_DoubleWord+0x60>)
 8003cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003cb4:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <FLASH_Program_DoubleWord+0x60>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4a10      	ldr	r2, [pc, #64]	@ (8003cfc <FLASH_Program_DoubleWord+0x60>)
 8003cba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003cbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003cfc <FLASH_Program_DoubleWord+0x60>)
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003cfc <FLASH_Program_DoubleWord+0x60>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003cd2:	f3bf 8f6f 	isb	sy
}
 8003cd6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	000a      	movs	r2, r1
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	3104      	adds	r1, #4
 8003cec:	4613      	mov	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40023c00 	.word	0x40023c00

08003d00 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <FLASH_Program_Word+0x40>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d40 <FLASH_Program_Word+0x40>)
 8003d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003d16:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <FLASH_Program_Word+0x40>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	4a09      	ldr	r2, [pc, #36]	@ (8003d40 <FLASH_Program_Word+0x40>)
 8003d1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d22:	4b07      	ldr	r3, [pc, #28]	@ (8003d40 <FLASH_Program_Word+0x40>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	4a06      	ldr	r2, [pc, #24]	@ (8003d40 <FLASH_Program_Word+0x40>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	601a      	str	r2, [r3, #0]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	40023c00 	.word	0x40023c00

08003d44 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d50:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <FLASH_Program_HalfWord+0x44>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	4a0c      	ldr	r2, [pc, #48]	@ (8003d88 <FLASH_Program_HalfWord+0x44>)
 8003d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <FLASH_Program_HalfWord+0x44>)
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	4a09      	ldr	r2, [pc, #36]	@ (8003d88 <FLASH_Program_HalfWord+0x44>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d68:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <FLASH_Program_HalfWord+0x44>)
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	4a06      	ldr	r2, [pc, #24]	@ (8003d88 <FLASH_Program_HalfWord+0x44>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	801a      	strh	r2, [r3, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40023c00 	.word	0x40023c00

08003d8c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d98:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <FLASH_Program_Byte+0x40>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003dcc <FLASH_Program_Byte+0x40>)
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003da4:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <FLASH_Program_Byte+0x40>)
 8003da6:	4a09      	ldr	r2, [pc, #36]	@ (8003dcc <FLASH_Program_Byte+0x40>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <FLASH_Program_Byte+0x40>)
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	4a06      	ldr	r2, [pc, #24]	@ (8003dcc <FLASH_Program_Byte+0x40>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	701a      	strb	r2, [r3, #0]
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40023c00 	.word	0x40023c00

08003dd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003dd4:	4b27      	ldr	r3, [pc, #156]	@ (8003e74 <FLASH_SetErrorCode+0xa4>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003de0:	4b25      	ldr	r3, [pc, #148]	@ (8003e78 <FLASH_SetErrorCode+0xa8>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f043 0310 	orr.w	r3, r3, #16
 8003de8:	4a23      	ldr	r2, [pc, #140]	@ (8003e78 <FLASH_SetErrorCode+0xa8>)
 8003dea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003dec:	4b21      	ldr	r3, [pc, #132]	@ (8003e74 <FLASH_SetErrorCode+0xa4>)
 8003dee:	2210      	movs	r2, #16
 8003df0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003df2:	4b20      	ldr	r3, [pc, #128]	@ (8003e74 <FLASH_SetErrorCode+0xa4>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d008      	beq.n	8003e10 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003e78 <FLASH_SetErrorCode+0xa8>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f043 0308 	orr.w	r3, r3, #8
 8003e06:	4a1c      	ldr	r2, [pc, #112]	@ (8003e78 <FLASH_SetErrorCode+0xa8>)
 8003e08:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e74 <FLASH_SetErrorCode+0xa4>)
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003e10:	4b18      	ldr	r3, [pc, #96]	@ (8003e74 <FLASH_SetErrorCode+0xa4>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003e1c:	4b16      	ldr	r3, [pc, #88]	@ (8003e78 <FLASH_SetErrorCode+0xa8>)
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	4a14      	ldr	r2, [pc, #80]	@ (8003e78 <FLASH_SetErrorCode+0xa8>)
 8003e26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003e28:	4b12      	ldr	r3, [pc, #72]	@ (8003e74 <FLASH_SetErrorCode+0xa4>)
 8003e2a:	2240      	movs	r2, #64	@ 0x40
 8003e2c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <FLASH_SetErrorCode+0xa4>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e78 <FLASH_SetErrorCode+0xa8>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f043 0302 	orr.w	r3, r3, #2
 8003e42:	4a0d      	ldr	r2, [pc, #52]	@ (8003e78 <FLASH_SetErrorCode+0xa8>)
 8003e44:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003e46:	4b0b      	ldr	r3, [pc, #44]	@ (8003e74 <FLASH_SetErrorCode+0xa4>)
 8003e48:	2280      	movs	r2, #128	@ 0x80
 8003e4a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003e4c:	4b09      	ldr	r3, [pc, #36]	@ (8003e74 <FLASH_SetErrorCode+0xa4>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003e58:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <FLASH_SetErrorCode+0xa8>)
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f043 0320 	orr.w	r3, r3, #32
 8003e60:	4a05      	ldr	r2, [pc, #20]	@ (8003e78 <FLASH_SetErrorCode+0xa8>)
 8003e62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003e64:	4b03      	ldr	r3, [pc, #12]	@ (8003e74 <FLASH_SetErrorCode+0xa4>)
 8003e66:	2202      	movs	r2, #2
 8003e68:	60da      	str	r2, [r3, #12]
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40023c00 	.word	0x40023c00
 8003e78:	20000b3c 	.word	0x20000b3c

08003e7c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e8e:	4b31      	ldr	r3, [pc, #196]	@ (8003f54 <HAL_FLASHEx_Erase+0xd8>)
 8003e90:	7e1b      	ldrb	r3, [r3, #24]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_FLASHEx_Erase+0x1e>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e058      	b.n	8003f4c <HAL_FLASHEx_Erase+0xd0>
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f54 <HAL_FLASHEx_Erase+0xd8>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ea0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ea4:	f7ff feba 	bl	8003c1c <FLASH_WaitForLastOperation>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d148      	bne.n	8003f44 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d115      	bne.n	8003eee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f000 f844 	bl	8003f5c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ed4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ed8:	f7ff fea0 	bl	8003c1c <FLASH_WaitForLastOperation>
 8003edc:	4603      	mov	r3, r0
 8003ede:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f58 <HAL_FLASHEx_Erase+0xdc>)
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f58 <HAL_FLASHEx_Erase+0xdc>)
 8003ee6:	f023 0304 	bic.w	r3, r3, #4
 8003eea:	6113      	str	r3, [r2, #16]
 8003eec:	e028      	b.n	8003f40 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	e01c      	b.n	8003f30 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4619      	mov	r1, r3
 8003efe:	68b8      	ldr	r0, [r7, #8]
 8003f00:	f000 f850 	bl	8003fa4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f08:	f7ff fe88 	bl	8003c1c <FLASH_WaitForLastOperation>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003f10:	4b11      	ldr	r3, [pc, #68]	@ (8003f58 <HAL_FLASHEx_Erase+0xdc>)
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	4a10      	ldr	r2, [pc, #64]	@ (8003f58 <HAL_FLASHEx_Erase+0xdc>)
 8003f16:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8003f1a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	601a      	str	r2, [r3, #0]
          break;
 8003f28:	e00a      	b.n	8003f40 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4413      	add	r3, r2
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d3da      	bcc.n	8003ef6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003f40:	f000 f878 	bl	8004034 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f44:	4b03      	ldr	r3, [pc, #12]	@ (8003f54 <HAL_FLASHEx_Erase+0xd8>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	761a      	strb	r2, [r3, #24]

  return status;
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000b3c 	.word	0x20000b3c
 8003f58:	40023c00 	.word	0x40023c00

08003f5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f68:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <FLASH_MassErase+0x44>)
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa0 <FLASH_MassErase+0x44>)
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <FLASH_MassErase+0x44>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <FLASH_MassErase+0x44>)
 8003f7a:	f043 0304 	orr.w	r3, r3, #4
 8003f7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003f80:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <FLASH_MassErase+0x44>)
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	4a05      	ldr	r2, [pc, #20]	@ (8003fa0 <FLASH_MassErase+0x44>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f90:	6113      	str	r3, [r2, #16]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40023c00 	.word	0x40023c00

08003fa4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	e010      	b.n	8003fe2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d103      	bne.n	8003fce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003fc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e009      	b.n	8003fe2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d103      	bne.n	8003fdc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e002      	b.n	8003fe2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003fdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fe2:	4b13      	ldr	r3, [pc, #76]	@ (8004030 <FLASH_Erase_Sector+0x8c>)
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	4a12      	ldr	r2, [pc, #72]	@ (8004030 <FLASH_Erase_Sector+0x8c>)
 8003fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003fee:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <FLASH_Erase_Sector+0x8c>)
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	490f      	ldr	r1, [pc, #60]	@ (8004030 <FLASH_Erase_Sector+0x8c>)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <FLASH_Erase_Sector+0x8c>)
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8004030 <FLASH_Erase_Sector+0x8c>)
 8004000:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004004:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004006:	4b0a      	ldr	r3, [pc, #40]	@ (8004030 <FLASH_Erase_Sector+0x8c>)
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4313      	orrs	r3, r2
 8004010:	4a07      	ldr	r2, [pc, #28]	@ (8004030 <FLASH_Erase_Sector+0x8c>)
 8004012:	f043 0302 	orr.w	r3, r3, #2
 8004016:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004018:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <FLASH_Erase_Sector+0x8c>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	4a04      	ldr	r2, [pc, #16]	@ (8004030 <FLASH_Erase_Sector+0x8c>)
 800401e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004022:	6113      	str	r3, [r2, #16]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40023c00 	.word	0x40023c00

08004034 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004038:	4b20      	ldr	r3, [pc, #128]	@ (80040bc <FLASH_FlushCaches+0x88>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004040:	2b00      	cmp	r3, #0
 8004042:	d017      	beq.n	8004074 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004044:	4b1d      	ldr	r3, [pc, #116]	@ (80040bc <FLASH_FlushCaches+0x88>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1c      	ldr	r2, [pc, #112]	@ (80040bc <FLASH_FlushCaches+0x88>)
 800404a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800404e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004050:	4b1a      	ldr	r3, [pc, #104]	@ (80040bc <FLASH_FlushCaches+0x88>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a19      	ldr	r2, [pc, #100]	@ (80040bc <FLASH_FlushCaches+0x88>)
 8004056:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4b17      	ldr	r3, [pc, #92]	@ (80040bc <FLASH_FlushCaches+0x88>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <FLASH_FlushCaches+0x88>)
 8004062:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004066:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004068:	4b14      	ldr	r3, [pc, #80]	@ (80040bc <FLASH_FlushCaches+0x88>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a13      	ldr	r2, [pc, #76]	@ (80040bc <FLASH_FlushCaches+0x88>)
 800406e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004072:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004074:	4b11      	ldr	r3, [pc, #68]	@ (80040bc <FLASH_FlushCaches+0x88>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004080:	4b0e      	ldr	r3, [pc, #56]	@ (80040bc <FLASH_FlushCaches+0x88>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <FLASH_FlushCaches+0x88>)
 8004086:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800408a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800408c:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <FLASH_FlushCaches+0x88>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <FLASH_FlushCaches+0x88>)
 8004092:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4b08      	ldr	r3, [pc, #32]	@ (80040bc <FLASH_FlushCaches+0x88>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a07      	ldr	r2, [pc, #28]	@ (80040bc <FLASH_FlushCaches+0x88>)
 800409e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <FLASH_FlushCaches+0x88>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a04      	ldr	r2, [pc, #16]	@ (80040bc <FLASH_FlushCaches+0x88>)
 80040aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ae:	6013      	str	r3, [r2, #0]
  }
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40023c00 	.word	0x40023c00

080040c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	@ 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	e16b      	b.n	80043b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040dc:	2201      	movs	r2, #1
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	f040 815a 	bne.w	80043ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d005      	beq.n	8004112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800410e:	2b02      	cmp	r3, #2
 8004110:	d130      	bne.n	8004174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	2203      	movs	r2, #3
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004148:	2201      	movs	r2, #1
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 0201 	and.w	r2, r3, #1
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b03      	cmp	r3, #3
 800417e:	d017      	beq.n	80041b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2203      	movs	r2, #3
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d123      	bne.n	8004204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	08da      	lsrs	r2, r3, #3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3208      	adds	r2, #8
 80041c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	220f      	movs	r2, #15
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	08da      	lsrs	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3208      	adds	r2, #8
 80041fe:	69b9      	ldr	r1, [r7, #24]
 8004200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	2203      	movs	r2, #3
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 0203 	and.w	r2, r3, #3
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80b4 	beq.w	80043ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	4b60      	ldr	r3, [pc, #384]	@ (80043cc <HAL_GPIO_Init+0x30c>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	4a5f      	ldr	r2, [pc, #380]	@ (80043cc <HAL_GPIO_Init+0x30c>)
 8004250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004254:	6453      	str	r3, [r2, #68]	@ 0x44
 8004256:	4b5d      	ldr	r3, [pc, #372]	@ (80043cc <HAL_GPIO_Init+0x30c>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004262:	4a5b      	ldr	r2, [pc, #364]	@ (80043d0 <HAL_GPIO_Init+0x310>)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	3302      	adds	r3, #2
 800426a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a52      	ldr	r2, [pc, #328]	@ (80043d4 <HAL_GPIO_Init+0x314>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d02b      	beq.n	80042e6 <HAL_GPIO_Init+0x226>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a51      	ldr	r2, [pc, #324]	@ (80043d8 <HAL_GPIO_Init+0x318>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d025      	beq.n	80042e2 <HAL_GPIO_Init+0x222>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a50      	ldr	r2, [pc, #320]	@ (80043dc <HAL_GPIO_Init+0x31c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01f      	beq.n	80042de <HAL_GPIO_Init+0x21e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a4f      	ldr	r2, [pc, #316]	@ (80043e0 <HAL_GPIO_Init+0x320>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d019      	beq.n	80042da <HAL_GPIO_Init+0x21a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a4e      	ldr	r2, [pc, #312]	@ (80043e4 <HAL_GPIO_Init+0x324>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_GPIO_Init+0x216>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4d      	ldr	r2, [pc, #308]	@ (80043e8 <HAL_GPIO_Init+0x328>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00d      	beq.n	80042d2 <HAL_GPIO_Init+0x212>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a4c      	ldr	r2, [pc, #304]	@ (80043ec <HAL_GPIO_Init+0x32c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <HAL_GPIO_Init+0x20e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4b      	ldr	r2, [pc, #300]	@ (80043f0 <HAL_GPIO_Init+0x330>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_GPIO_Init+0x20a>
 80042c6:	2307      	movs	r3, #7
 80042c8:	e00e      	b.n	80042e8 <HAL_GPIO_Init+0x228>
 80042ca:	2308      	movs	r3, #8
 80042cc:	e00c      	b.n	80042e8 <HAL_GPIO_Init+0x228>
 80042ce:	2306      	movs	r3, #6
 80042d0:	e00a      	b.n	80042e8 <HAL_GPIO_Init+0x228>
 80042d2:	2305      	movs	r3, #5
 80042d4:	e008      	b.n	80042e8 <HAL_GPIO_Init+0x228>
 80042d6:	2304      	movs	r3, #4
 80042d8:	e006      	b.n	80042e8 <HAL_GPIO_Init+0x228>
 80042da:	2303      	movs	r3, #3
 80042dc:	e004      	b.n	80042e8 <HAL_GPIO_Init+0x228>
 80042de:	2302      	movs	r3, #2
 80042e0:	e002      	b.n	80042e8 <HAL_GPIO_Init+0x228>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_GPIO_Init+0x228>
 80042e6:	2300      	movs	r3, #0
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	f002 0203 	and.w	r2, r2, #3
 80042ee:	0092      	lsls	r2, r2, #2
 80042f0:	4093      	lsls	r3, r2
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042f8:	4935      	ldr	r1, [pc, #212]	@ (80043d0 <HAL_GPIO_Init+0x310>)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	3302      	adds	r3, #2
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004306:	4b3b      	ldr	r3, [pc, #236]	@ (80043f4 <HAL_GPIO_Init+0x334>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800432a:	4a32      	ldr	r2, [pc, #200]	@ (80043f4 <HAL_GPIO_Init+0x334>)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004330:	4b30      	ldr	r3, [pc, #192]	@ (80043f4 <HAL_GPIO_Init+0x334>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004354:	4a27      	ldr	r2, [pc, #156]	@ (80043f4 <HAL_GPIO_Init+0x334>)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800435a:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <HAL_GPIO_Init+0x334>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800437e:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <HAL_GPIO_Init+0x334>)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004384:	4b1b      	ldr	r3, [pc, #108]	@ (80043f4 <HAL_GPIO_Init+0x334>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043a8:	4a12      	ldr	r2, [pc, #72]	@ (80043f4 <HAL_GPIO_Init+0x334>)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3301      	adds	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b0f      	cmp	r3, #15
 80043b8:	f67f ae90 	bls.w	80040dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	3724      	adds	r7, #36	@ 0x24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40013800 	.word	0x40013800
 80043d4:	40020000 	.word	0x40020000
 80043d8:	40020400 	.word	0x40020400
 80043dc:	40020800 	.word	0x40020800
 80043e0:	40020c00 	.word	0x40020c00
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40021400 	.word	0x40021400
 80043ec:	40021800 	.word	0x40021800
 80043f0:	40021c00 	.word	0x40021c00
 80043f4:	40013c00 	.word	0x40013c00

080043f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	887b      	ldrh	r3, [r7, #2]
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
 8004414:	e001      	b.n	800441a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]
 8004434:	4613      	mov	r3, r2
 8004436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004438:	787b      	ldrb	r3, [r7, #1]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800443e:	887a      	ldrh	r2, [r7, #2]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004444:	e003      	b.n	800444e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004446:	887b      	ldrh	r3, [r7, #2]
 8004448:	041a      	lsls	r2, r3, #16
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	619a      	str	r2, [r3, #24]
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004466:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	4013      	ands	r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d006      	beq.n	8004480 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004472:	4a05      	ldr	r2, [pc, #20]	@ (8004488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	4618      	mov	r0, r3
 800447c:	f00b ffa6 	bl	80103cc <HAL_GPIO_EXTI_Callback>
  }
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40013c00 	.word	0x40013c00

0800448c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af02      	add	r7, sp, #8
 8004492:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e059      	b.n	8004552 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f009 fa81 	bl	800d9c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2203      	movs	r2, #3
 80044c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044cc:	d102      	bne.n	80044d4 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f005 fd7c 	bl	8009fd6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	7c1a      	ldrb	r2, [r3, #16]
 80044e6:	f88d 2000 	strb.w	r2, [sp]
 80044ea:	3304      	adds	r3, #4
 80044ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ee:	f005 fcfd 	bl	8009eec <USB_CoreInit>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e026      	b.n	8004552 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2101      	movs	r1, #1
 800450a:	4618      	mov	r0, r3
 800450c:	f005 fd74 	bl	8009ff8 <USB_SetCurrentMode>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e017      	b.n	8004552 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	7c1a      	ldrb	r2, [r3, #16]
 800452a:	f88d 2000 	strb.w	r2, [sp]
 800452e:	3304      	adds	r3, #4
 8004530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004532:	f005 ff17 	bl	800a364 <USB_HostInit>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e004      	b.n	8004552 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800455a:	b590      	push	{r4, r7, lr}
 800455c:	b08b      	sub	sp, #44	@ 0x2c
 800455e:	af04      	add	r7, sp, #16
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	4608      	mov	r0, r1
 8004564:	4611      	mov	r1, r2
 8004566:	461a      	mov	r2, r3
 8004568:	4603      	mov	r3, r0
 800456a:	70fb      	strb	r3, [r7, #3]
 800456c:	460b      	mov	r3, r1
 800456e:	70bb      	strb	r3, [r7, #2]
 8004570:	4613      	mov	r3, r2
 8004572:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004574:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004576:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_HCD_HC_Init+0x2c>
 8004582:	2302      	movs	r3, #2
 8004584:	e09d      	b.n	80046c2 <HAL_HCD_HC_Init+0x168>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	3319      	adds	r3, #25
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	3314      	adds	r3, #20
 80045b2:	787a      	ldrb	r2, [r7, #1]
 80045b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	3315      	adds	r3, #21
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3326      	adds	r3, #38	@ 0x26
 80045da:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80045de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	78bb      	ldrb	r3, [r7, #2]
 80045e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045e8:	b2d8      	uxtb	r0, r3
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3316      	adds	r3, #22
 80045f8:	4602      	mov	r2, r0
 80045fa:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	4619      	mov	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fbc7 	bl	8004d94 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004606:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800460a:	2b00      	cmp	r3, #0
 800460c:	da0a      	bge.n	8004624 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	3317      	adds	r3, #23
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e009      	b.n	8004638 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	3317      	adds	r3, #23
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f005 fff5 	bl	800a62c <USB_GetHostSpeed>
 8004642:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004644:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10b      	bne.n	8004664 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800464c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_HCD_HC_Init+0x10a>
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2bbc      	cmp	r3, #188	@ 0xbc
 800465e:	d901      	bls.n	8004664 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004660:	23bc      	movs	r3, #188	@ 0xbc
 8004662:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	3318      	adds	r3, #24
 8004674:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004678:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	b298      	uxth	r0, r3
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	3328      	adds	r3, #40	@ 0x28
 800468e:	4602      	mov	r2, r0
 8004690:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	b29b      	uxth	r3, r3
 800469a:	787c      	ldrb	r4, [r7, #1]
 800469c:	78ba      	ldrb	r2, [r7, #2]
 800469e:	78f9      	ldrb	r1, [r7, #3]
 80046a0:	9302      	str	r3, [sp, #8]
 80046a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	4623      	mov	r3, r4
 80046b0:	f005 ffe4 	bl	800a67c <USB_HC_Init>
 80046b4:	4603      	mov	r3, r0
 80046b6:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd90      	pop	{r4, r7, pc}

080046ca <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	460b      	mov	r3, r1
 80046d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_HCD_HC_Halt+0x1e>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e00f      	b.n	8004708 <HAL_HCD_HC_Halt+0x3e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f006 fb76 	bl	800adea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	4608      	mov	r0, r1
 800471a:	4611      	mov	r1, r2
 800471c:	461a      	mov	r2, r3
 800471e:	4603      	mov	r3, r0
 8004720:	70fb      	strb	r3, [r7, #3]
 8004722:	460b      	mov	r3, r1
 8004724:	70bb      	strb	r3, [r7, #2]
 8004726:	4613      	mov	r3, r2
 8004728:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	3317      	adds	r3, #23
 800473a:	78ba      	ldrb	r2, [r7, #2]
 800473c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	3326      	adds	r3, #38	@ 0x26
 800474e:	787a      	ldrb	r2, [r7, #1]
 8004750:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004752:	7c3b      	ldrb	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d114      	bne.n	8004782 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	332a      	adds	r3, #42	@ 0x2a
 8004768:	2203      	movs	r2, #3
 800476a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	3319      	adds	r3, #25
 800477c:	7f3a      	ldrb	r2, [r7, #28]
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	e009      	b.n	8004796 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	332a      	adds	r3, #42	@ 0x2a
 8004792:	2202      	movs	r2, #2
 8004794:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004796:	787b      	ldrb	r3, [r7, #1]
 8004798:	2b03      	cmp	r3, #3
 800479a:	f200 8102 	bhi.w	80049a2 <HAL_HCD_HC_SubmitRequest+0x292>
 800479e:	a201      	add	r2, pc, #4	@ (adr r2, 80047a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	0800498d 	.word	0x0800498d
 80047ac:	08004879 	.word	0x08004879
 80047b0:	08004903 	.word	0x08004903
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80047b4:	7c3b      	ldrb	r3, [r7, #16]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	f040 80f5 	bne.w	80049a6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80047bc:	78bb      	ldrb	r3, [r7, #2]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d12d      	bne.n	800481e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80047c2:	8b3b      	ldrh	r3, [r7, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	333d      	adds	r3, #61	@ 0x3d
 80047d8:	2201      	movs	r2, #1
 80047da:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	333d      	adds	r3, #61	@ 0x3d
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	332a      	adds	r3, #42	@ 0x2a
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004806:	e0ce      	b.n	80049a6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	332a      	adds	r3, #42	@ 0x2a
 8004818:	2202      	movs	r2, #2
 800481a:	701a      	strb	r2, [r3, #0]
      break;
 800481c:	e0c3      	b.n	80049a6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800481e:	78fa      	ldrb	r2, [r7, #3]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	331a      	adds	r3, #26
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	f040 80b8 	bne.w	80049a6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	333c      	adds	r3, #60	@ 0x3c
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	332a      	adds	r3, #42	@ 0x2a
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
      break;
 8004860:	e0a1      	b.n	80049a6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	332a      	adds	r3, #42	@ 0x2a
 8004872:	2202      	movs	r2, #2
 8004874:	701a      	strb	r2, [r3, #0]
      break;
 8004876:	e096      	b.n	80049a6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004878:	78bb      	ldrb	r3, [r7, #2]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d120      	bne.n	80048c0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800487e:	78fa      	ldrb	r2, [r7, #3]
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	333d      	adds	r3, #61	@ 0x3d
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	332a      	adds	r3, #42	@ 0x2a
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80048a8:	e07e      	b.n	80049a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	332a      	adds	r3, #42	@ 0x2a
 80048ba:	2202      	movs	r2, #2
 80048bc:	701a      	strb	r2, [r3, #0]
      break;
 80048be:	e073      	b.n	80049a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80048c0:	78fa      	ldrb	r2, [r7, #3]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	333c      	adds	r3, #60	@ 0x3c
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	332a      	adds	r3, #42	@ 0x2a
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
      break;
 80048ea:	e05d      	b.n	80049a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	332a      	adds	r3, #42	@ 0x2a
 80048fc:	2202      	movs	r2, #2
 80048fe:	701a      	strb	r2, [r3, #0]
      break;
 8004900:	e052      	b.n	80049a8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004902:	78bb      	ldrb	r3, [r7, #2]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d120      	bne.n	800494a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004908:	78fa      	ldrb	r2, [r7, #3]
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	4613      	mov	r3, r2
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	333d      	adds	r3, #61	@ 0x3d
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	332a      	adds	r3, #42	@ 0x2a
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004932:	e039      	b.n	80049a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	332a      	adds	r3, #42	@ 0x2a
 8004944:	2202      	movs	r2, #2
 8004946:	701a      	strb	r2, [r3, #0]
      break;
 8004948:	e02e      	b.n	80049a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	333c      	adds	r3, #60	@ 0x3c
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	332a      	adds	r3, #42	@ 0x2a
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]
      break;
 8004974:	e018      	b.n	80049a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	332a      	adds	r3, #42	@ 0x2a
 8004986:	2202      	movs	r2, #2
 8004988:	701a      	strb	r2, [r3, #0]
      break;
 800498a:	e00d      	b.n	80049a8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	332a      	adds	r3, #42	@ 0x2a
 800499c:	2200      	movs	r2, #0
 800499e:	701a      	strb	r2, [r3, #0]
      break;
 80049a0:	e002      	b.n	80049a8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80049a2:	bf00      	nop
 80049a4:	e000      	b.n	80049a8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80049a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	332c      	adds	r3, #44	@ 0x2c
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	8b39      	ldrh	r1, [r7, #24]
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4403      	add	r3, r0
 80049cc:	3334      	adds	r3, #52	@ 0x34
 80049ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	334c      	adds	r3, #76	@ 0x4c
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80049e4:	78fa      	ldrb	r2, [r7, #3]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	3338      	adds	r3, #56	@ 0x38
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80049f8:	78fa      	ldrb	r2, [r7, #3]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	3315      	adds	r3, #21
 8004a08:	78fa      	ldrb	r2, [r7, #3]
 8004a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004a0c:	78fa      	ldrb	r2, [r7, #3]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	334d      	adds	r3, #77	@ 0x4d
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	4613      	mov	r3, r2
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	3310      	adds	r3, #16
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4413      	add	r3, r2
 8004a34:	1d19      	adds	r1, r3, #4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	799b      	ldrb	r3, [r3, #6]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f005 ff4a 	bl	800a8d4 <USB_HC_StartXfer>
 8004a40:	4603      	mov	r3, r0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop

08004a4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f005 fc3e 	bl	800a2e4 <USB_GetMode>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	f040 80fb 	bne.w	8004c66 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f005 fc01 	bl	800a27c <USB_ReadInterrupts>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80f1 	beq.w	8004c64 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f005 fbf8 	bl	800a27c <USB_ReadInterrupts>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a96:	d104      	bne.n	8004aa2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f005 fbe8 	bl	800a27c <USB_ReadInterrupts>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ab6:	d104      	bne.n	8004ac2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f005 fbd8 	bl	800a27c <USB_ReadInterrupts>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ad2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ad6:	d104      	bne.n	8004ae2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004ae0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f005 fbc8 	bl	800a27c <USB_ReadInterrupts>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d103      	bne.n	8004afe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2202      	movs	r2, #2
 8004afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f005 fbba 	bl	800a27c <USB_ReadInterrupts>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b12:	d120      	bne.n	8004b56 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004b1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d113      	bne.n	8004b56 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004b2e:	2110      	movs	r1, #16
 8004b30:	6938      	ldr	r0, [r7, #16]
 8004b32:	f005 faad 	bl	800a090 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004b36:	6938      	ldr	r0, [r7, #16]
 8004b38:	f005 fadc 	bl	800a0f4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	7a5b      	ldrb	r3, [r3, #9]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d105      	bne.n	8004b50 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f005 fcce 	bl	800a4ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f008 ffb3 	bl	800dabc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f005 fb8e 	bl	800a27c <USB_ReadInterrupts>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b6a:	d102      	bne.n	8004b72 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f001 fd33 	bl	80065d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f005 fb80 	bl	800a27c <USB_ReadInterrupts>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d106      	bne.n	8004b94 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f008 ff7c 	bl	800da84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2208      	movs	r2, #8
 8004b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f005 fb6f 	bl	800a27c <USB_ReadInterrupts>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ba8:	d139      	bne.n	8004c1e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f006 f90a 	bl	800adc8 <USB_HC_ReadInterrupt>
 8004bb4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	e025      	b.n	8004c08 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d018      	beq.n	8004c02 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be6:	d106      	bne.n	8004bf6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f905 	bl	8004dfe <HCD_HC_IN_IRQHandler>
 8004bf4:	e005      	b.n	8004c02 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 ff67 	bl	8005ad0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	3301      	adds	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	795b      	ldrb	r3, [r3, #5]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d3d3      	bcc.n	8004bbc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f005 fb2a 	bl	800a27c <USB_ReadInterrupts>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d101      	bne.n	8004c36 <HAL_HCD_IRQHandler+0x1ea>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <HAL_HCD_IRQHandler+0x1ec>
 8004c36:	2300      	movs	r3, #0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d014      	beq.n	8004c66 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0210 	bic.w	r2, r2, #16
 8004c4a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f001 fbe4 	bl	800641a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699a      	ldr	r2, [r3, #24]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0210 	orr.w	r2, r2, #16
 8004c60:	619a      	str	r2, [r3, #24]
 8004c62:	e000      	b.n	8004c66 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004c64:	bf00      	nop
    }
  }
}
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_HCD_Start+0x16>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e013      	b.n	8004caa <HAL_HCD_Start+0x3e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2101      	movs	r1, #1
 8004c90:	4618      	mov	r0, r3
 8004c92:	f005 fc92 	bl	800a5ba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f005 f98a 	bl	8009fb4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_HCD_Stop+0x16>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e00d      	b.n	8004ce4 <HAL_HCD_Stop+0x32>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f006 f9e5 	bl	800b0a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f005 fc34 	bl	800a566 <USB_ResetPort>
 8004cfe:	4603      	mov	r3, r0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	334c      	adds	r3, #76	@ 0x4c
 8004d24:	781b      	ldrb	r3, [r3, #0]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3338      	adds	r3, #56	@ 0x38
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f005 fc76 	bl	800a65a <USB_GetCurrentFrame>
 8004d6e:	4603      	mov	r3, r0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f005 fc51 	bl	800a62c <USB_GetHostSpeed>
 8004d8a:	4603      	mov	r3, r0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	331a      	adds	r3, #26
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	331b      	adds	r3, #27
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3325      	adds	r3, #37	@ 0x25
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	3324      	adds	r3, #36	@ 0x24
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b086      	sub	sp, #24
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f005 fa40 	bl	800a2a2 <USB_ReadChInterrupts>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d11a      	bne.n	8004e62 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2304      	movs	r3, #4
 8004e3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	334d      	adds	r3, #77	@ 0x4d
 8004e4e:	2207      	movs	r2, #7
 8004e50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	78fa      	ldrb	r2, [r7, #3]
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f005 ffc5 	bl	800adea <USB_HC_Halt>
 8004e60:	e09e      	b.n	8004fa0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	4611      	mov	r1, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f005 fa19 	bl	800a2a2 <USB_ReadChInterrupts>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7a:	d11b      	bne.n	8004eb4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	334d      	adds	r3, #77	@ 0x4d
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	4611      	mov	r1, r2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f005 ff9c 	bl	800adea <USB_HC_Halt>
 8004eb2:	e075      	b.n	8004fa0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	78fa      	ldrb	r2, [r7, #3]
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f005 f9f0 	bl	800a2a2 <USB_ReadChInterrupts>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d11a      	bne.n	8004f02 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2308      	movs	r3, #8
 8004edc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	334d      	adds	r3, #77	@ 0x4d
 8004eee:	2206      	movs	r2, #6
 8004ef0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	78fa      	ldrb	r2, [r7, #3]
 8004ef8:	4611      	mov	r1, r2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f005 ff75 	bl	800adea <USB_HC_Halt>
 8004f00:	e04e      	b.n	8004fa0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	4611      	mov	r1, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f005 f9c9 	bl	800a2a2 <USB_ReadChInterrupts>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f1a:	d11b      	bne.n	8004f54 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	334d      	adds	r3, #77	@ 0x4d
 8004f40:	2209      	movs	r2, #9
 8004f42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f005 ff4c 	bl	800adea <USB_HC_Halt>
 8004f52:	e025      	b.n	8004fa0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f005 f9a0 	bl	800a2a2 <USB_ReadChInterrupts>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f68:	2b80      	cmp	r3, #128	@ 0x80
 8004f6a:	d119      	bne.n	8004fa0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f78:	461a      	mov	r2, r3
 8004f7a:	2380      	movs	r3, #128	@ 0x80
 8004f7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	334d      	adds	r3, #77	@ 0x4d
 8004f8e:	2207      	movs	r2, #7
 8004f90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f005 ff25 	bl	800adea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f005 f97a 	bl	800a2a2 <USB_ReadChInterrupts>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb8:	d112      	bne.n	8004fe0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	78fa      	ldrb	r2, [r7, #3]
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f005 ff11 	bl	800adea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fda:	6093      	str	r3, [r2, #8]
 8004fdc:	f000 bd75 	b.w	8005aca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f005 f95a 	bl	800a2a2 <USB_ReadChInterrupts>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	f040 8128 	bne.w	800524a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005006:	461a      	mov	r2, r3
 8005008:	2320      	movs	r3, #32
 800500a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	331b      	adds	r3, #27
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d119      	bne.n	8005056 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	331b      	adds	r3, #27
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	440a      	add	r2, r1
 800504c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005054:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	799b      	ldrb	r3, [r3, #6]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d01b      	beq.n	8005096 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3330      	adds	r3, #48	@ 0x30
 800506e:	6819      	ldr	r1, [r3, #0]
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005082:	78fa      	ldrb	r2, [r7, #3]
 8005084:	1ac9      	subs	r1, r1, r3
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4403      	add	r3, r0
 8005092:	3338      	adds	r3, #56	@ 0x38
 8005094:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	334d      	adds	r3, #77	@ 0x4d
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3344      	adds	r3, #68	@ 0x44
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ca:	461a      	mov	r2, r3
 80050cc:	2301      	movs	r3, #1
 80050ce:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050d0:	78fa      	ldrb	r2, [r7, #3]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	3326      	adds	r3, #38	@ 0x26
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80050e6:	78fa      	ldrb	r2, [r7, #3]
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	3326      	adds	r3, #38	@ 0x26
 80050f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d110      	bne.n	800511e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f005 fe70 	bl	800adea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005116:	461a      	mov	r2, r3
 8005118:	2310      	movs	r3, #16
 800511a:	6093      	str	r3, [r2, #8]
 800511c:	e03d      	b.n	800519a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800511e:	78fa      	ldrb	r2, [r7, #3]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	3326      	adds	r3, #38	@ 0x26
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d00a      	beq.n	800514a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005134:	78fa      	ldrb	r2, [r7, #3]
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4613      	mov	r3, r2
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	3326      	adds	r3, #38	@ 0x26
 8005144:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005146:	2b01      	cmp	r3, #1
 8005148:	d127      	bne.n	800519a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4413      	add	r3, r2
 8005152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	78fa      	ldrb	r2, [r7, #3]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	440a      	add	r2, r1
 8005160:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005164:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005168:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	334c      	adds	r3, #76	@ 0x4c
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	334c      	adds	r3, #76	@ 0x4c
 800518e:	781a      	ldrb	r2, [r3, #0]
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f008 fc9f 	bl	800dad8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	799b      	ldrb	r3, [r3, #6]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d13b      	bne.n	800521a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80051a2:	78fa      	ldrb	r2, [r7, #3]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	3338      	adds	r3, #56	@ 0x38
 80051b2:	6819      	ldr	r1, [r3, #0]
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4403      	add	r3, r0
 80051c2:	3328      	adds	r3, #40	@ 0x28
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	440b      	add	r3, r1
 80051c8:	1e59      	subs	r1, r3, #1
 80051ca:	78fa      	ldrb	r2, [r7, #3]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4403      	add	r3, r0
 80051d8:	3328      	adds	r3, #40	@ 0x28
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8470 	beq.w	8005aca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	333c      	adds	r3, #60	@ 0x3c
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	f083 0301 	eor.w	r3, r3, #1
 8005202:	b2d8      	uxtb	r0, r3
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	333c      	adds	r3, #60	@ 0x3c
 8005212:	4602      	mov	r2, r0
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	f000 bc58 	b.w	8005aca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	333c      	adds	r3, #60	@ 0x3c
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	f083 0301 	eor.w	r3, r3, #1
 8005232:	b2d8      	uxtb	r0, r3
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	333c      	adds	r3, #60	@ 0x3c
 8005242:	4602      	mov	r2, r0
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	f000 bc40 	b.w	8005aca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f005 f825 	bl	800a2a2 <USB_ReadChInterrupts>
 8005258:	4603      	mov	r3, r0
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b20      	cmp	r3, #32
 8005260:	d131      	bne.n	80052c6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4413      	add	r3, r2
 800526a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800526e:	461a      	mov	r2, r3
 8005270:	2320      	movs	r3, #32
 8005272:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005274:	78fa      	ldrb	r2, [r7, #3]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	331a      	adds	r3, #26
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b01      	cmp	r3, #1
 8005288:	f040 841f 	bne.w	8005aca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	331b      	adds	r3, #27
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80052a0:	78fa      	ldrb	r2, [r7, #3]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	334d      	adds	r3, #77	@ 0x4d
 80052b0:	2203      	movs	r2, #3
 80052b2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	78fa      	ldrb	r2, [r7, #3]
 80052ba:	4611      	mov	r1, r2
 80052bc:	4618      	mov	r0, r3
 80052be:	f005 fd94 	bl	800adea <USB_HC_Halt>
 80052c2:	f000 bc02 	b.w	8005aca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f004 ffe7 	bl	800a2a2 <USB_ReadChInterrupts>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b02      	cmp	r3, #2
 80052dc:	f040 8305 	bne.w	80058ea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ec:	461a      	mov	r2, r3
 80052ee:	2302      	movs	r3, #2
 80052f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	334d      	adds	r3, #77	@ 0x4d
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d114      	bne.n	8005332 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	334d      	adds	r3, #77	@ 0x4d
 8005318:	2202      	movs	r2, #2
 800531a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800531c:	78fa      	ldrb	r2, [r7, #3]
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4613      	mov	r3, r2
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	334c      	adds	r3, #76	@ 0x4c
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e2cc      	b.n	80058cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	334d      	adds	r3, #77	@ 0x4d
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b06      	cmp	r3, #6
 8005346:	d114      	bne.n	8005372 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	334d      	adds	r3, #77	@ 0x4d
 8005358:	2202      	movs	r2, #2
 800535a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	334c      	adds	r3, #76	@ 0x4c
 800536c:	2205      	movs	r2, #5
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	e2ac      	b.n	80058cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005372:	78fa      	ldrb	r2, [r7, #3]
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	334d      	adds	r3, #77	@ 0x4d
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b07      	cmp	r3, #7
 8005386:	d00b      	beq.n	80053a0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	334d      	adds	r3, #77	@ 0x4d
 8005398:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800539a:	2b09      	cmp	r3, #9
 800539c:	f040 80a6 	bne.w	80054ec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	334d      	adds	r3, #77	@ 0x4d
 80053b0:	2202      	movs	r2, #2
 80053b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	3344      	adds	r3, #68	@ 0x44
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	1c59      	adds	r1, r3, #1
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4403      	add	r3, r0
 80053d4:	3344      	adds	r3, #68	@ 0x44
 80053d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3344      	adds	r3, #68	@ 0x44
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d943      	bls.n	8005476 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	1a9b      	subs	r3, r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	3344      	adds	r3, #68	@ 0x44
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005402:	78fa      	ldrb	r2, [r7, #3]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	331a      	adds	r3, #26
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d123      	bne.n	8005460 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	331b      	adds	r3, #27
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800542c:	78fa      	ldrb	r2, [r7, #3]
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	331c      	adds	r3, #28
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4413      	add	r3, r2
 8005448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	440a      	add	r2, r1
 8005456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800545a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800545e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005460:	78fa      	ldrb	r2, [r7, #3]
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	334c      	adds	r3, #76	@ 0x4c
 8005470:	2204      	movs	r2, #4
 8005472:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005474:	e229      	b.n	80058ca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005476:	78fa      	ldrb	r2, [r7, #3]
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	334c      	adds	r3, #76	@ 0x4c
 8005486:	2202      	movs	r2, #2
 8005488:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800548a:	78fa      	ldrb	r2, [r7, #3]
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	3326      	adds	r3, #38	@ 0x26
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80054a0:	78fa      	ldrb	r2, [r7, #3]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	3326      	adds	r3, #38	@ 0x26
 80054b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	f040 8209 	bne.w	80058ca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e4:	461a      	mov	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80054ea:	e1ee      	b.n	80058ca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80054ec:	78fa      	ldrb	r2, [r7, #3]
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	4613      	mov	r3, r2
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	334d      	adds	r3, #77	@ 0x4d
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b05      	cmp	r3, #5
 8005500:	f040 80c8 	bne.w	8005694 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	4613      	mov	r3, r2
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	1a9b      	subs	r3, r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	334d      	adds	r3, #77	@ 0x4d
 8005514:	2202      	movs	r2, #2
 8005516:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005518:	78fa      	ldrb	r2, [r7, #3]
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	331b      	adds	r3, #27
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b01      	cmp	r3, #1
 800552c:	f040 81ce 	bne.w	80058cc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	3326      	adds	r3, #38	@ 0x26
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d16b      	bne.n	800561e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005546:	78fa      	ldrb	r2, [r7, #3]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	3348      	adds	r3, #72	@ 0x48
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4403      	add	r3, r0
 8005566:	3348      	adds	r3, #72	@ 0x48
 8005568:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	3348      	adds	r3, #72	@ 0x48
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d943      	bls.n	8005608 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	3348      	adds	r3, #72	@ 0x48
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	331b      	adds	r3, #27
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80055a8:	78fa      	ldrb	r2, [r7, #3]
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	3344      	adds	r3, #68	@ 0x44
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d809      	bhi.n	80055d2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	331c      	adds	r3, #28
 80055ce:	2201      	movs	r2, #1
 80055d0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055f0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	334c      	adds	r3, #76	@ 0x4c
 8005602:	2204      	movs	r2, #4
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e014      	b.n	8005632 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	334c      	adds	r3, #76	@ 0x4c
 8005618:	2202      	movs	r2, #2
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	e009      	b.n	8005632 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	334c      	adds	r3, #76	@ 0x4c
 800562e:	2202      	movs	r2, #2
 8005630:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005632:	78fa      	ldrb	r2, [r7, #3]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	3326      	adds	r3, #38	@ 0x26
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	3326      	adds	r3, #38	@ 0x26
 8005658:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800565a:	2b02      	cmp	r3, #2
 800565c:	f040 8136 	bne.w	80058cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005676:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800567e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800568c:	461a      	mov	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	e11b      	b.n	80058cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005694:	78fa      	ldrb	r2, [r7, #3]
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	4613      	mov	r3, r2
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	334d      	adds	r3, #77	@ 0x4d
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	f040 8081 	bne.w	80057ae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056ac:	78fa      	ldrb	r2, [r7, #3]
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	334d      	adds	r3, #77	@ 0x4d
 80056bc:	2202      	movs	r2, #2
 80056be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	331b      	adds	r3, #27
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	f040 80fa 	bne.w	80058cc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	334c      	adds	r3, #76	@ 0x4c
 80056e8:	2202      	movs	r2, #2
 80056ea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	440a      	add	r2, r1
 8005702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800570a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	78fa      	ldrb	r2, [r7, #3]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	440a      	add	r2, r1
 8005722:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800572a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4413      	add	r3, r2
 8005734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	78fa      	ldrb	r2, [r7, #3]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	440a      	add	r2, r1
 8005742:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005746:	f023 0320 	bic.w	r3, r3, #32
 800574a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	3326      	adds	r3, #38	@ 0x26
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005762:	78fa      	ldrb	r2, [r7, #3]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	3326      	adds	r3, #38	@ 0x26
 8005772:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005774:	2b02      	cmp	r3, #2
 8005776:	f040 80a9 	bne.w	80058cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4413      	add	r3, r2
 8005782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005790:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005798:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a6:	461a      	mov	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e08e      	b.n	80058cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80057ae:	78fa      	ldrb	r2, [r7, #3]
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	1a9b      	subs	r3, r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	334d      	adds	r3, #77	@ 0x4d
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d143      	bne.n	800584c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	334d      	adds	r3, #77	@ 0x4d
 80057d4:	2202      	movs	r2, #2
 80057d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	4613      	mov	r3, r2
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	1a9b      	subs	r3, r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	440b      	add	r3, r1
 80057e6:	334c      	adds	r3, #76	@ 0x4c
 80057e8:	2202      	movs	r2, #2
 80057ea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057ec:	78fa      	ldrb	r2, [r7, #3]
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	3326      	adds	r3, #38	@ 0x26
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	3326      	adds	r3, #38	@ 0x26
 8005812:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005814:	2b02      	cmp	r3, #2
 8005816:	d159      	bne.n	80058cc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4413      	add	r3, r2
 8005820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800582e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005836:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005844:	461a      	mov	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e03f      	b.n	80058cc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800584c:	78fa      	ldrb	r2, [r7, #3]
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	334d      	adds	r3, #77	@ 0x4d
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b08      	cmp	r3, #8
 8005860:	d126      	bne.n	80058b0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005862:	78fa      	ldrb	r2, [r7, #3]
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	440b      	add	r3, r1
 8005870:	334d      	adds	r3, #77	@ 0x4d
 8005872:	2202      	movs	r2, #2
 8005874:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005876:	78fa      	ldrb	r2, [r7, #3]
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	3344      	adds	r3, #68	@ 0x44
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	1c59      	adds	r1, r3, #1
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4403      	add	r3, r0
 8005896:	3344      	adds	r3, #68	@ 0x44
 8005898:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	334c      	adds	r3, #76	@ 0x4c
 80058aa:	2204      	movs	r2, #4
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	e00d      	b.n	80058cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	334d      	adds	r3, #77	@ 0x4d
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	f000 8100 	beq.w	8005ac8 <HCD_HC_IN_IRQHandler+0xcca>
 80058c8:	e000      	b.n	80058cc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058ca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80058cc:	78fa      	ldrb	r2, [r7, #3]
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	4613      	mov	r3, r2
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	334c      	adds	r3, #76	@ 0x4c
 80058dc:	781a      	ldrb	r2, [r3, #0]
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f008 f8f8 	bl	800dad8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80058e8:	e0ef      	b.n	8005aca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	4611      	mov	r1, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f004 fcd5 	bl	800a2a2 <USB_ReadChInterrupts>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fe:	2b40      	cmp	r3, #64	@ 0x40
 8005900:	d12f      	bne.n	8005962 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590e:	461a      	mov	r2, r3
 8005910:	2340      	movs	r3, #64	@ 0x40
 8005912:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005914:	78fa      	ldrb	r2, [r7, #3]
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	334d      	adds	r3, #77	@ 0x4d
 8005924:	2205      	movs	r2, #5
 8005926:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	1a9b      	subs	r3, r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	331a      	adds	r3, #26
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	3344      	adds	r3, #68	@ 0x44
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	78fa      	ldrb	r2, [r7, #3]
 8005958:	4611      	mov	r1, r2
 800595a:	4618      	mov	r0, r3
 800595c:	f005 fa45 	bl	800adea <USB_HC_Halt>
 8005960:	e0b3      	b.n	8005aca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	78fa      	ldrb	r2, [r7, #3]
 8005968:	4611      	mov	r1, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f004 fc99 	bl	800a2a2 <USB_ReadChInterrupts>
 8005970:	4603      	mov	r3, r0
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b10      	cmp	r3, #16
 8005978:	f040 80a7 	bne.w	8005aca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800597c:	78fa      	ldrb	r2, [r7, #3]
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4613      	mov	r3, r2
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	3326      	adds	r3, #38	@ 0x26
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b03      	cmp	r3, #3
 8005990:	d11b      	bne.n	80059ca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005992:	78fa      	ldrb	r2, [r7, #3]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	3344      	adds	r3, #68	@ 0x44
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80059a6:	78fa      	ldrb	r2, [r7, #3]
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	1a9b      	subs	r3, r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	334d      	adds	r3, #77	@ 0x4d
 80059b6:	2204      	movs	r2, #4
 80059b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	78fa      	ldrb	r2, [r7, #3]
 80059c0:	4611      	mov	r1, r2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f005 fa11 	bl	800adea <USB_HC_Halt>
 80059c8:	e03f      	b.n	8005a4a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	3326      	adds	r3, #38	@ 0x26
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	3326      	adds	r3, #38	@ 0x26
 80059f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d129      	bne.n	8005a4a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80059f6:	78fa      	ldrb	r2, [r7, #3]
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	4613      	mov	r3, r2
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	440b      	add	r3, r1
 8005a04:	3344      	adds	r3, #68	@ 0x44
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	799b      	ldrb	r3, [r3, #6]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HCD_HC_IN_IRQHandler+0xc2a>
 8005a12:	78fa      	ldrb	r2, [r7, #3]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	331b      	adds	r3, #27
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d110      	bne.n	8005a4a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005a28:	78fa      	ldrb	r2, [r7, #3]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	334d      	adds	r3, #77	@ 0x4d
 8005a38:	2204      	movs	r2, #4
 8005a3a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	78fa      	ldrb	r2, [r7, #3]
 8005a42:	4611      	mov	r1, r2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f005 f9d0 	bl	800adea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	331b      	adds	r3, #27
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d129      	bne.n	8005ab4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005a60:	78fa      	ldrb	r2, [r7, #3]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	331b      	adds	r3, #27
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	78fa      	ldrb	r2, [r7, #3]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a92:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aae:	f043 0320 	orr.w	r3, r3, #32
 8005ab2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2310      	movs	r3, #16
 8005ac4:	6093      	str	r3, [r2, #8]
 8005ac6:	e000      	b.n	8005aca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005ac8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	4611      	mov	r1, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f004 fbd7 	bl	800a2a2 <USB_ReadChInterrupts>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d11b      	bne.n	8005b36 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	1a9b      	subs	r3, r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	334d      	adds	r3, #77	@ 0x4d
 8005b20:	2207      	movs	r2, #7
 8005b22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	78fa      	ldrb	r2, [r7, #3]
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f005 f95c 	bl	800adea <USB_HC_Halt>
 8005b32:	f000 bc6f 	b.w	8006414 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	78fa      	ldrb	r2, [r7, #3]
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f004 fbaf 	bl	800a2a2 <USB_ReadChInterrupts>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	f040 8082 	bne.w	8005c54 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2320      	movs	r3, #32
 8005b60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	3319      	adds	r3, #25
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d124      	bne.n	8005bc2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005b78:	78fa      	ldrb	r2, [r7, #3]
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	3319      	adds	r3, #25
 8005b88:	2200      	movs	r2, #0
 8005b8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b8c:	78fa      	ldrb	r2, [r7, #3]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	334c      	adds	r3, #76	@ 0x4c
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005ba0:	78fa      	ldrb	r2, [r7, #3]
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	334d      	adds	r3, #77	@ 0x4d
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	78fa      	ldrb	r2, [r7, #3]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f005 f914 	bl	800adea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005bc2:	78fa      	ldrb	r2, [r7, #3]
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	331a      	adds	r3, #26
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f040 841d 	bne.w	8006414 <HCD_HC_OUT_IRQHandler+0x944>
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	331b      	adds	r3, #27
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f040 8411 	bne.w	8006414 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	3326      	adds	r3, #38	@ 0x26
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d009      	beq.n	8005c1c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005c08:	78fa      	ldrb	r2, [r7, #3]
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	1a9b      	subs	r3, r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	331b      	adds	r3, #27
 8005c18:	2201      	movs	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	334d      	adds	r3, #77	@ 0x4d
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	78fa      	ldrb	r2, [r7, #3]
 8005c36:	4611      	mov	r1, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f005 f8d6 	bl	800adea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	3344      	adds	r3, #68	@ 0x44
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e3df      	b.n	8006414 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f004 fb20 	bl	800a2a2 <USB_ReadChInterrupts>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c6c:	d111      	bne.n	8005c92 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f005 f8ad 	bl	800adea <USB_HC_Halt>
 8005c90:	e3c0      	b.n	8006414 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f004 fb01 	bl	800a2a2 <USB_ReadChInterrupts>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d168      	bne.n	8005d7c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	3344      	adds	r3, #68	@ 0x44
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	78fa      	ldrb	r2, [r7, #3]
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f004 faeb 	bl	800a2a2 <USB_ReadChInterrupts>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd2:	2b40      	cmp	r3, #64	@ 0x40
 8005cd4:	d112      	bne.n	8005cfc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	3319      	adds	r3, #25
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2340      	movs	r3, #64	@ 0x40
 8005cfa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005cfc:	78fa      	ldrb	r2, [r7, #3]
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	4613      	mov	r3, r2
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	331b      	adds	r3, #27
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d019      	beq.n	8005d46 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	1a9b      	subs	r3, r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	331b      	adds	r3, #27
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d44:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005d46:	78fb      	ldrb	r3, [r7, #3]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d52:	461a      	mov	r2, r3
 8005d54:	2301      	movs	r3, #1
 8005d56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005d58:	78fa      	ldrb	r2, [r7, #3]
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	334d      	adds	r3, #77	@ 0x4d
 8005d68:	2201      	movs	r2, #1
 8005d6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	78fa      	ldrb	r2, [r7, #3]
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f005 f838 	bl	800adea <USB_HC_Halt>
 8005d7a:	e34b      	b.n	8006414 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	78fa      	ldrb	r2, [r7, #3]
 8005d82:	4611      	mov	r1, r2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f004 fa8c 	bl	800a2a2 <USB_ReadChInterrupts>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d90:	2b40      	cmp	r3, #64	@ 0x40
 8005d92:	d139      	bne.n	8005e08 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005d94:	78fa      	ldrb	r2, [r7, #3]
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	1a9b      	subs	r3, r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	334d      	adds	r3, #77	@ 0x4d
 8005da4:	2205      	movs	r2, #5
 8005da6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	331a      	adds	r3, #26
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	3319      	adds	r3, #25
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	3344      	adds	r3, #68	@ 0x44
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	78fa      	ldrb	r2, [r7, #3]
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f004 fffb 	bl	800adea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e00:	461a      	mov	r2, r3
 8005e02:	2340      	movs	r3, #64	@ 0x40
 8005e04:	6093      	str	r3, [r2, #8]
 8005e06:	e305      	b.n	8006414 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	78fa      	ldrb	r2, [r7, #3]
 8005e0e:	4611      	mov	r1, r2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f004 fa46 	bl	800a2a2 <USB_ReadChInterrupts>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d11a      	bne.n	8005e56 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	2308      	movs	r3, #8
 8005e30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005e32:	78fa      	ldrb	r2, [r7, #3]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	334d      	adds	r3, #77	@ 0x4d
 8005e42:	2206      	movs	r2, #6
 8005e44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	78fa      	ldrb	r2, [r7, #3]
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f004 ffcb 	bl	800adea <USB_HC_Halt>
 8005e54:	e2de      	b.n	8006414 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f004 fa1f 	bl	800a2a2 <USB_ReadChInterrupts>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b10      	cmp	r3, #16
 8005e6c:	d144      	bne.n	8005ef8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005e6e:	78fa      	ldrb	r2, [r7, #3]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	3344      	adds	r3, #68	@ 0x44
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	334d      	adds	r3, #77	@ 0x4d
 8005e92:	2204      	movs	r2, #4
 8005e94:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3319      	adds	r3, #25
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d114      	bne.n	8005ed6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005eac:	78fa      	ldrb	r2, [r7, #3]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	3318      	adds	r3, #24
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005ec2:	78fa      	ldrb	r2, [r7, #3]
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	3319      	adds	r3, #25
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f004 ff83 	bl	800adea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2310      	movs	r3, #16
 8005ef4:	6093      	str	r3, [r2, #8]
 8005ef6:	e28d      	b.n	8006414 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	4611      	mov	r1, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f004 f9ce 	bl	800a2a2 <USB_ReadChInterrupts>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0c:	2b80      	cmp	r3, #128	@ 0x80
 8005f0e:	d169      	bne.n	8005fe4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	799b      	ldrb	r3, [r3, #6]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d111      	bne.n	8005f3c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	334d      	adds	r3, #77	@ 0x4d
 8005f28:	2207      	movs	r2, #7
 8005f2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	78fa      	ldrb	r2, [r7, #3]
 8005f32:	4611      	mov	r1, r2
 8005f34:	4618      	mov	r0, r3
 8005f36:	f004 ff58 	bl	800adea <USB_HC_Halt>
 8005f3a:	e049      	b.n	8005fd0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	3344      	adds	r3, #68	@ 0x44
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	1c59      	adds	r1, r3, #1
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	1a9b      	subs	r3, r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4403      	add	r3, r0
 8005f5c:	3344      	adds	r3, #68	@ 0x44
 8005f5e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	3344      	adds	r3, #68	@ 0x44
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d922      	bls.n	8005fbc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005f76:	78fa      	ldrb	r2, [r7, #3]
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	3344      	adds	r3, #68	@ 0x44
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	334c      	adds	r3, #76	@ 0x4c
 8005f9a:	2204      	movs	r2, #4
 8005f9c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	334c      	adds	r3, #76	@ 0x4c
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f007 fd8f 	bl	800dad8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005fba:	e009      	b.n	8005fd0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005fbc:	78fa      	ldrb	r2, [r7, #3]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	334c      	adds	r3, #76	@ 0x4c
 8005fcc:	2202      	movs	r2, #2
 8005fce:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fdc:	461a      	mov	r2, r3
 8005fde:	2380      	movs	r3, #128	@ 0x80
 8005fe0:	6093      	str	r3, [r2, #8]
 8005fe2:	e217      	b.n	8006414 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	4611      	mov	r1, r2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f004 f958 	bl	800a2a2 <USB_ReadChInterrupts>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffc:	d11b      	bne.n	8006036 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005ffe:	78fa      	ldrb	r2, [r7, #3]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	334d      	adds	r3, #77	@ 0x4d
 800600e:	2209      	movs	r2, #9
 8006010:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	4611      	mov	r1, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f004 fee5 	bl	800adea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800602c:	461a      	mov	r2, r3
 800602e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006032:	6093      	str	r3, [r2, #8]
 8006034:	e1ee      	b.n	8006414 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f004 f92f 	bl	800a2a2 <USB_ReadChInterrupts>
 8006044:	4603      	mov	r3, r0
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b02      	cmp	r3, #2
 800604c:	f040 81df 	bne.w	800640e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605c:	461a      	mov	r2, r3
 800605e:	2302      	movs	r3, #2
 8006060:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	334d      	adds	r3, #77	@ 0x4d
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	f040 8093 	bne.w	80061a0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800607a:	78fa      	ldrb	r2, [r7, #3]
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	334d      	adds	r3, #77	@ 0x4d
 800608a:	2202      	movs	r2, #2
 800608c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800608e:	78fa      	ldrb	r2, [r7, #3]
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	334c      	adds	r3, #76	@ 0x4c
 800609e:	2201      	movs	r2, #1
 80060a0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80060a2:	78fa      	ldrb	r2, [r7, #3]
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	3326      	adds	r3, #38	@ 0x26
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d00b      	beq.n	80060d0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	3326      	adds	r3, #38	@ 0x26
 80060c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	f040 8190 	bne.w	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	799b      	ldrb	r3, [r3, #6]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d115      	bne.n	8006104 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80060d8:	78fa      	ldrb	r2, [r7, #3]
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4613      	mov	r3, r2
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	333d      	adds	r3, #61	@ 0x3d
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	f083 0301 	eor.w	r3, r3, #1
 80060f0:	b2d8      	uxtb	r0, r3
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	4613      	mov	r3, r2
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	1a9b      	subs	r3, r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	333d      	adds	r3, #61	@ 0x3d
 8006100:	4602      	mov	r2, r0
 8006102:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	799b      	ldrb	r3, [r3, #6]
 8006108:	2b01      	cmp	r3, #1
 800610a:	f040 8171 	bne.w	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	3334      	adds	r3, #52	@ 0x34
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8165 	beq.w	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006126:	78fa      	ldrb	r2, [r7, #3]
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	1a9b      	subs	r3, r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	3334      	adds	r3, #52	@ 0x34
 8006136:	6819      	ldr	r1, [r3, #0]
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4403      	add	r3, r0
 8006146:	3328      	adds	r3, #40	@ 0x28
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	440b      	add	r3, r1
 800614c:	1e59      	subs	r1, r3, #1
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4403      	add	r3, r0
 800615c:	3328      	adds	r3, #40	@ 0x28
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	fbb1 f3f3 	udiv	r3, r1, r3
 8006164:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 813f 	beq.w	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	1a9b      	subs	r3, r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	333d      	adds	r3, #61	@ 0x3d
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	f083 0301 	eor.w	r3, r3, #1
 800618a:	b2d8      	uxtb	r0, r3
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	333d      	adds	r3, #61	@ 0x3d
 800619a:	4602      	mov	r2, r0
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e127      	b.n	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80061a0:	78fa      	ldrb	r2, [r7, #3]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	334d      	adds	r3, #77	@ 0x4d
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d120      	bne.n	80061f8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80061b6:	78fa      	ldrb	r2, [r7, #3]
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	1a9b      	subs	r3, r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	440b      	add	r3, r1
 80061c4:	334d      	adds	r3, #77	@ 0x4d
 80061c6:	2202      	movs	r2, #2
 80061c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	1a9b      	subs	r3, r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	331b      	adds	r3, #27
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	f040 8107 	bne.w	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80061e2:	78fa      	ldrb	r2, [r7, #3]
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	334c      	adds	r3, #76	@ 0x4c
 80061f2:	2202      	movs	r2, #2
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e0fb      	b.n	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80061f8:	78fa      	ldrb	r2, [r7, #3]
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	1a9b      	subs	r3, r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	334d      	adds	r3, #77	@ 0x4d
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b04      	cmp	r3, #4
 800620c:	d13a      	bne.n	8006284 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800620e:	78fa      	ldrb	r2, [r7, #3]
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	334d      	adds	r3, #77	@ 0x4d
 800621e:	2202      	movs	r2, #2
 8006220:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	334c      	adds	r3, #76	@ 0x4c
 8006232:	2202      	movs	r2, #2
 8006234:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006236:	78fa      	ldrb	r2, [r7, #3]
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	4613      	mov	r3, r2
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	440b      	add	r3, r1
 8006244:	331b      	adds	r3, #27
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	f040 80d1 	bne.w	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	331b      	adds	r3, #27
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	78fa      	ldrb	r2, [r7, #3]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	440a      	add	r2, r1
 8006278:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800627c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006280:	6053      	str	r3, [r2, #4]
 8006282:	e0b5      	b.n	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	4613      	mov	r3, r2
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	334d      	adds	r3, #77	@ 0x4d
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b05      	cmp	r3, #5
 8006298:	d114      	bne.n	80062c4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800629a:	78fa      	ldrb	r2, [r7, #3]
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	334d      	adds	r3, #77	@ 0x4d
 80062aa:	2202      	movs	r2, #2
 80062ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80062ae:	78fa      	ldrb	r2, [r7, #3]
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	1a9b      	subs	r3, r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	440b      	add	r3, r1
 80062bc:	334c      	adds	r3, #76	@ 0x4c
 80062be:	2202      	movs	r2, #2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	e095      	b.n	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80062c4:	78fa      	ldrb	r2, [r7, #3]
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	4613      	mov	r3, r2
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	334d      	adds	r3, #77	@ 0x4d
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b06      	cmp	r3, #6
 80062d8:	d114      	bne.n	8006304 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062da:	78fa      	ldrb	r2, [r7, #3]
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	334d      	adds	r3, #77	@ 0x4d
 80062ea:	2202      	movs	r2, #2
 80062ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80062ee:	78fa      	ldrb	r2, [r7, #3]
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	334c      	adds	r3, #76	@ 0x4c
 80062fe:	2205      	movs	r2, #5
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	e075      	b.n	80063f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006304:	78fa      	ldrb	r2, [r7, #3]
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	334d      	adds	r3, #77	@ 0x4d
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b07      	cmp	r3, #7
 8006318:	d00a      	beq.n	8006330 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	1a9b      	subs	r3, r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	440b      	add	r3, r1
 8006328:	334d      	adds	r3, #77	@ 0x4d
 800632a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800632c:	2b09      	cmp	r3, #9
 800632e:	d170      	bne.n	8006412 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006330:	78fa      	ldrb	r2, [r7, #3]
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	334d      	adds	r3, #77	@ 0x4d
 8006340:	2202      	movs	r2, #2
 8006342:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	3344      	adds	r3, #68	@ 0x44
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4613      	mov	r3, r2
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	1a9b      	subs	r3, r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4403      	add	r3, r0
 8006364:	3344      	adds	r3, #68	@ 0x44
 8006366:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006368:	78fa      	ldrb	r2, [r7, #3]
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	4613      	mov	r3, r2
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	1a9b      	subs	r3, r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	3344      	adds	r3, #68	@ 0x44
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d914      	bls.n	80063a8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800637e:	78fa      	ldrb	r2, [r7, #3]
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	1a9b      	subs	r3, r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	440b      	add	r3, r1
 800638c:	3344      	adds	r3, #68	@ 0x44
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006392:	78fa      	ldrb	r2, [r7, #3]
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	440b      	add	r3, r1
 80063a0:	334c      	adds	r3, #76	@ 0x4c
 80063a2:	2204      	movs	r2, #4
 80063a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80063a6:	e022      	b.n	80063ee <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	4613      	mov	r3, r2
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	334c      	adds	r3, #76	@ 0x4c
 80063b8:	2202      	movs	r2, #2
 80063ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e8:	461a      	mov	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80063ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	334c      	adds	r3, #76	@ 0x4c
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f007 fb66 	bl	800dad8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800640c:	e002      	b.n	8006414 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8006412:	bf00      	nop
  }
}
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b08a      	sub	sp, #40	@ 0x28
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	0c5b      	lsrs	r3, r3, #17
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	091b      	lsrs	r3, r3, #4
 800644a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800644e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d004      	beq.n	8006460 <HCD_RXQLVL_IRQHandler+0x46>
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b05      	cmp	r3, #5
 800645a:	f000 80b6 	beq.w	80065ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800645e:	e0b7      	b.n	80065d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 80b3 	beq.w	80065ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	4613      	mov	r3, r2
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	1a9b      	subs	r3, r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	332c      	adds	r3, #44	@ 0x2c
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80a7 	beq.w	80065ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	4613      	mov	r3, r2
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	3338      	adds	r3, #56	@ 0x38
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	18d1      	adds	r1, r2, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	4613      	mov	r3, r2
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4403      	add	r3, r0
 80064a4:	3334      	adds	r3, #52	@ 0x34
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4299      	cmp	r1, r3
 80064aa:	f200 8083 	bhi.w	80065b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	4613      	mov	r3, r2
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	1a9b      	subs	r3, r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	332c      	adds	r3, #44	@ 0x2c
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	b292      	uxth	r2, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	f003 fe7f 	bl	800a1cc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	4613      	mov	r3, r2
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	1a9b      	subs	r3, r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	332c      	adds	r3, #44	@ 0x2c
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	18d1      	adds	r1, r2, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4613      	mov	r3, r2
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	1a9b      	subs	r3, r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4403      	add	r3, r0
 80064f2:	332c      	adds	r3, #44	@ 0x2c
 80064f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	4613      	mov	r3, r2
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	1a9b      	subs	r3, r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	3338      	adds	r3, #56	@ 0x38
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	18d1      	adds	r1, r2, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	4613      	mov	r3, r2
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4403      	add	r3, r0
 800651a:	3338      	adds	r3, #56	@ 0x38
 800651c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	0cdb      	lsrs	r3, r3, #19
 800652e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006532:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	4613      	mov	r3, r2
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	3328      	adds	r3, #40	@ 0x28
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4293      	cmp	r3, r2
 800654c:	d13f      	bne.n	80065ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d03c      	beq.n	80065ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	4413      	add	r3, r2
 800655c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800656a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006572:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	4413      	add	r3, r2
 800657c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006580:	461a      	mov	r2, r3
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	4613      	mov	r3, r2
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	333c      	adds	r3, #60	@ 0x3c
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	f083 0301 	eor.w	r3, r3, #1
 800659c:	b2d8      	uxtb	r0, r3
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	4613      	mov	r3, r2
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	333c      	adds	r3, #60	@ 0x3c
 80065ae:	4602      	mov	r2, r0
 80065b0:	701a      	strb	r2, [r3, #0]
      break;
 80065b2:	e00c      	b.n	80065ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	4613      	mov	r3, r2
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	334c      	adds	r3, #76	@ 0x4c
 80065c4:	2204      	movs	r2, #4
 80065c6:	701a      	strb	r2, [r3, #0]
      break;
 80065c8:	e001      	b.n	80065ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80065ca:	bf00      	nop
 80065cc:	e000      	b.n	80065d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80065ce:	bf00      	nop
  }
}
 80065d0:	bf00      	nop
 80065d2:	3728      	adds	r7, #40	@ 0x28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006604:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b02      	cmp	r3, #2
 800660e:	d10b      	bne.n	8006628 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b01      	cmp	r3, #1
 8006618:	d102      	bne.n	8006620 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f007 fa40 	bl	800daa0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f043 0302 	orr.w	r3, r3, #2
 8006626:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b08      	cmp	r3, #8
 8006630:	d132      	bne.n	8006698 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f043 0308 	orr.w	r3, r3, #8
 8006638:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b04      	cmp	r3, #4
 8006642:	d126      	bne.n	8006692 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7a5b      	ldrb	r3, [r3, #9]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d113      	bne.n	8006674 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006652:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006656:	d106      	bne.n	8006666 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2102      	movs	r1, #2
 800665e:	4618      	mov	r0, r3
 8006660:	f003 ff44 	bl	800a4ec <USB_InitFSLSPClkSel>
 8006664:	e011      	b.n	800668a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2101      	movs	r1, #1
 800666c:	4618      	mov	r0, r3
 800666e:	f003 ff3d 	bl	800a4ec <USB_InitFSLSPClkSel>
 8006672:	e00a      	b.n	800668a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	79db      	ldrb	r3, [r3, #7]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d106      	bne.n	800668a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006682:	461a      	mov	r2, r3
 8006684:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006688:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f007 fa32 	bl	800daf4 <HAL_HCD_PortEnabled_Callback>
 8006690:	e002      	b.n	8006698 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f007 fa3c 	bl	800db10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d103      	bne.n	80066aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f043 0320 	orr.w	r3, r3, #32
 80066a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066b0:	461a      	mov	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	6013      	str	r3, [r2, #0]
}
 80066b6:	bf00      	nop
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e12b      	b.n	800692a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fb fd2c 	bl	8002144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2224      	movs	r2, #36	@ 0x24
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0201 	bic.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006724:	f001 fc36 	bl	8007f94 <HAL_RCC_GetPCLK1Freq>
 8006728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	4a81      	ldr	r2, [pc, #516]	@ (8006934 <HAL_I2C_Init+0x274>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d807      	bhi.n	8006744 <HAL_I2C_Init+0x84>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4a80      	ldr	r2, [pc, #512]	@ (8006938 <HAL_I2C_Init+0x278>)
 8006738:	4293      	cmp	r3, r2
 800673a:	bf94      	ite	ls
 800673c:	2301      	movls	r3, #1
 800673e:	2300      	movhi	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	e006      	b.n	8006752 <HAL_I2C_Init+0x92>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4a7d      	ldr	r2, [pc, #500]	@ (800693c <HAL_I2C_Init+0x27c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	bf94      	ite	ls
 800674c:	2301      	movls	r3, #1
 800674e:	2300      	movhi	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e0e7      	b.n	800692a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4a78      	ldr	r2, [pc, #480]	@ (8006940 <HAL_I2C_Init+0x280>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0c9b      	lsrs	r3, r3, #18
 8006764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	4a6a      	ldr	r2, [pc, #424]	@ (8006934 <HAL_I2C_Init+0x274>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d802      	bhi.n	8006794 <HAL_I2C_Init+0xd4>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	3301      	adds	r3, #1
 8006792:	e009      	b.n	80067a8 <HAL_I2C_Init+0xe8>
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800679a:	fb02 f303 	mul.w	r3, r2, r3
 800679e:	4a69      	ldr	r2, [pc, #420]	@ (8006944 <HAL_I2C_Init+0x284>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	099b      	lsrs	r3, r3, #6
 80067a6:	3301      	adds	r3, #1
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	430b      	orrs	r3, r1
 80067ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80067ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	495c      	ldr	r1, [pc, #368]	@ (8006934 <HAL_I2C_Init+0x274>)
 80067c4:	428b      	cmp	r3, r1
 80067c6:	d819      	bhi.n	80067fc <HAL_I2C_Init+0x13c>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	1e59      	subs	r1, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80067d6:	1c59      	adds	r1, r3, #1
 80067d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80067dc:	400b      	ands	r3, r1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <HAL_I2C_Init+0x138>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1e59      	subs	r1, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80067f0:	3301      	adds	r3, #1
 80067f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f6:	e051      	b.n	800689c <HAL_I2C_Init+0x1dc>
 80067f8:	2304      	movs	r3, #4
 80067fa:	e04f      	b.n	800689c <HAL_I2C_Init+0x1dc>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d111      	bne.n	8006828 <HAL_I2C_Init+0x168>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	1e58      	subs	r0, r3, #1
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6859      	ldr	r1, [r3, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	440b      	add	r3, r1
 8006812:	fbb0 f3f3 	udiv	r3, r0, r3
 8006816:	3301      	adds	r3, #1
 8006818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf0c      	ite	eq
 8006820:	2301      	moveq	r3, #1
 8006822:	2300      	movne	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	e012      	b.n	800684e <HAL_I2C_Init+0x18e>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1e58      	subs	r0, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6859      	ldr	r1, [r3, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	0099      	lsls	r1, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	fbb0 f3f3 	udiv	r3, r0, r3
 800683e:	3301      	adds	r3, #1
 8006840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006844:	2b00      	cmp	r3, #0
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <HAL_I2C_Init+0x196>
 8006852:	2301      	movs	r3, #1
 8006854:	e022      	b.n	800689c <HAL_I2C_Init+0x1dc>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10e      	bne.n	800687c <HAL_I2C_Init+0x1bc>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1e58      	subs	r0, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6859      	ldr	r1, [r3, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	440b      	add	r3, r1
 800686c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006870:	3301      	adds	r3, #1
 8006872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800687a:	e00f      	b.n	800689c <HAL_I2C_Init+0x1dc>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1e58      	subs	r0, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6859      	ldr	r1, [r3, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	0099      	lsls	r1, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006892:	3301      	adds	r3, #1
 8006894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006898:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	6809      	ldr	r1, [r1, #0]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69da      	ldr	r2, [r3, #28]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80068ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6911      	ldr	r1, [r2, #16]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	68d2      	ldr	r2, [r2, #12]
 80068d6:	4311      	orrs	r1, r2
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	430b      	orrs	r3, r1
 80068de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	695a      	ldr	r2, [r3, #20]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0201 	orr.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	000186a0 	.word	0x000186a0
 8006938:	001e847f 	.word	0x001e847f
 800693c:	003d08ff 	.word	0x003d08ff
 8006940:	431bde83 	.word	0x431bde83
 8006944:	10624dd3 	.word	0x10624dd3

08006948 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af02      	add	r7, sp, #8
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	607a      	str	r2, [r7, #4]
 8006952:	461a      	mov	r2, r3
 8006954:	460b      	mov	r3, r1
 8006956:	817b      	strh	r3, [r7, #10]
 8006958:	4613      	mov	r3, r2
 800695a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800695c:	f7fc f814 	bl	8002988 <HAL_GetTick>
 8006960:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b20      	cmp	r3, #32
 800696c:	f040 80e0 	bne.w	8006b30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	2319      	movs	r3, #25
 8006976:	2201      	movs	r2, #1
 8006978:	4970      	ldr	r1, [pc, #448]	@ (8006b3c <HAL_I2C_Master_Transmit+0x1f4>)
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 fc64 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006986:	2302      	movs	r3, #2
 8006988:	e0d3      	b.n	8006b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_I2C_Master_Transmit+0x50>
 8006994:	2302      	movs	r3, #2
 8006996:	e0cc      	b.n	8006b32 <HAL_I2C_Master_Transmit+0x1ea>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d007      	beq.n	80069be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0201 	orr.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2221      	movs	r2, #33	@ 0x21
 80069d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2210      	movs	r2, #16
 80069da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	893a      	ldrh	r2, [r7, #8]
 80069ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4a50      	ldr	r2, [pc, #320]	@ (8006b40 <HAL_I2C_Master_Transmit+0x1f8>)
 80069fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a00:	8979      	ldrh	r1, [r7, #10]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	6a3a      	ldr	r2, [r7, #32]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 face 	bl	8006fa8 <I2C_MasterRequestWrite>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e08d      	b.n	8006b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	613b      	str	r3, [r7, #16]
 8006a2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a2c:	e066      	b.n	8006afc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	6a39      	ldr	r1, [r7, #32]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fd22 	bl	800747c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00d      	beq.n	8006a5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d107      	bne.n	8006a56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e06b      	b.n	8006b32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5e:	781a      	ldrb	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d11b      	bne.n	8006ad0 <HAL_I2C_Master_Transmit+0x188>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d017      	beq.n	8006ad0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa4:	781a      	ldrb	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	6a39      	ldr	r1, [r7, #32]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 fd19 	bl	800750c <I2C_WaitOnBTFFlagUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00d      	beq.n	8006afc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d107      	bne.n	8006af8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006af6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e01a      	b.n	8006b32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d194      	bne.n	8006a2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e000      	b.n	8006b32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b30:	2302      	movs	r3, #2
  }
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	00100002 	.word	0x00100002
 8006b40:	ffff0000 	.word	0xffff0000

08006b44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08c      	sub	sp, #48	@ 0x30
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	460b      	mov	r3, r1
 8006b52:	817b      	strh	r3, [r7, #10]
 8006b54:	4613      	mov	r3, r2
 8006b56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b58:	f7fb ff16 	bl	8002988 <HAL_GetTick>
 8006b5c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	f040 8217 	bne.w	8006f9a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	2319      	movs	r3, #25
 8006b72:	2201      	movs	r2, #1
 8006b74:	497c      	ldr	r1, [pc, #496]	@ (8006d68 <HAL_I2C_Master_Receive+0x224>)
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fb66 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006b82:	2302      	movs	r3, #2
 8006b84:	e20a      	b.n	8006f9c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_I2C_Master_Receive+0x50>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e203      	b.n	8006f9c <HAL_I2C_Master_Receive+0x458>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d007      	beq.n	8006bba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0201 	orr.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2222      	movs	r2, #34	@ 0x22
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	893a      	ldrh	r2, [r7, #8]
 8006bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4a5c      	ldr	r2, [pc, #368]	@ (8006d6c <HAL_I2C_Master_Receive+0x228>)
 8006bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006bfc:	8979      	ldrh	r1, [r7, #10]
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fa52 	bl	80070ac <I2C_MasterRequestRead>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e1c4      	b.n	8006f9c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d113      	bne.n	8006c42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	623b      	str	r3, [r7, #32]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	623b      	str	r3, [r7, #32]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	623b      	str	r3, [r7, #32]
 8006c2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	e198      	b.n	8006f74 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d11b      	bne.n	8006c82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	61fb      	str	r3, [r7, #28]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	e178      	b.n	8006f74 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d11b      	bne.n	8006cc2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006caa:	2300      	movs	r3, #0
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	e158      	b.n	8006f74 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ce8:	e144      	b.n	8006f74 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	f200 80f1 	bhi.w	8006ed6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d123      	bne.n	8006d44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 fc4b 	bl	800759c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e145      	b.n	8006f9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d42:	e117      	b.n	8006f74 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d14e      	bne.n	8006dea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	2200      	movs	r2, #0
 8006d54:	4906      	ldr	r1, [pc, #24]	@ (8006d70 <HAL_I2C_Master_Receive+0x22c>)
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 fa76 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d008      	beq.n	8006d74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e11a      	b.n	8006f9c <HAL_I2C_Master_Receive+0x458>
 8006d66:	bf00      	nop
 8006d68:	00100002 	.word	0x00100002
 8006d6c:	ffff0000 	.word	0xffff0000
 8006d70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006de8:	e0c4      	b.n	8006f74 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	2200      	movs	r2, #0
 8006df2:	496c      	ldr	r1, [pc, #432]	@ (8006fa4 <HAL_I2C_Master_Receive+0x460>)
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fa27 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e0cb      	b.n	8006f9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4955      	ldr	r1, [pc, #340]	@ (8006fa4 <HAL_I2C_Master_Receive+0x460>)
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f9f9 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e09d      	b.n	8006f9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691a      	ldr	r2, [r3, #16]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ed4:	e04e      	b.n	8006f74 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fb5e 	bl	800759c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e058      	b.n	8006f9c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f06:	3b01      	subs	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d124      	bne.n	8006f74 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d107      	bne.n	8006f42 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f40:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691a      	ldr	r2, [r3, #16]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f47f aeb6 	bne.w	8006cea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2220      	movs	r2, #32
 8006f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e000      	b.n	8006f9c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006f9a:	2302      	movs	r3, #2
  }
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3728      	adds	r7, #40	@ 0x28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	00010004 	.word	0x00010004

08006fa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d006      	beq.n	8006fd2 <I2C_MasterRequestWrite+0x2a>
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d003      	beq.n	8006fd2 <I2C_MasterRequestWrite+0x2a>
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fd0:	d108      	bne.n	8006fe4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e00b      	b.n	8006ffc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe8:	2b12      	cmp	r3, #18
 8006fea:	d107      	bne.n	8006ffc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ffa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 f91d 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00d      	beq.n	8007030 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800701e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007022:	d103      	bne.n	800702c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800702a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e035      	b.n	800709c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007038:	d108      	bne.n	800704c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800703a:	897b      	ldrh	r3, [r7, #10]
 800703c:	b2db      	uxtb	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007048:	611a      	str	r2, [r3, #16]
 800704a:	e01b      	b.n	8007084 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800704c:	897b      	ldrh	r3, [r7, #10]
 800704e:	11db      	asrs	r3, r3, #7
 8007050:	b2db      	uxtb	r3, r3
 8007052:	f003 0306 	and.w	r3, r3, #6
 8007056:	b2db      	uxtb	r3, r3
 8007058:	f063 030f 	orn	r3, r3, #15
 800705c:	b2da      	uxtb	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	490e      	ldr	r1, [pc, #56]	@ (80070a4 <I2C_MasterRequestWrite+0xfc>)
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 f966 	bl	800733c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e010      	b.n	800709c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800707a:	897b      	ldrh	r3, [r7, #10]
 800707c:	b2da      	uxtb	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	4907      	ldr	r1, [pc, #28]	@ (80070a8 <I2C_MasterRequestWrite+0x100>)
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 f956 	bl	800733c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	00010008 	.word	0x00010008
 80070a8:	00010002 	.word	0x00010002

080070ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	607a      	str	r2, [r7, #4]
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	460b      	mov	r3, r1
 80070ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d006      	beq.n	80070e6 <I2C_MasterRequestRead+0x3a>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d003      	beq.n	80070e6 <I2C_MasterRequestRead+0x3a>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80070e4:	d108      	bne.n	80070f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e00b      	b.n	8007110 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fc:	2b11      	cmp	r3, #17
 80070fe:	d107      	bne.n	8007110 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800710e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f893 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00d      	beq.n	8007144 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007136:	d103      	bne.n	8007140 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800713e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e079      	b.n	8007238 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800714c:	d108      	bne.n	8007160 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800714e:	897b      	ldrh	r3, [r7, #10]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	f043 0301 	orr.w	r3, r3, #1
 8007156:	b2da      	uxtb	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	611a      	str	r2, [r3, #16]
 800715e:	e05f      	b.n	8007220 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007160:	897b      	ldrh	r3, [r7, #10]
 8007162:	11db      	asrs	r3, r3, #7
 8007164:	b2db      	uxtb	r3, r3
 8007166:	f003 0306 	and.w	r3, r3, #6
 800716a:	b2db      	uxtb	r3, r3
 800716c:	f063 030f 	orn	r3, r3, #15
 8007170:	b2da      	uxtb	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	4930      	ldr	r1, [pc, #192]	@ (8007240 <I2C_MasterRequestRead+0x194>)
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f8dc 	bl	800733c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e054      	b.n	8007238 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800718e:	897b      	ldrh	r3, [r7, #10]
 8007190:	b2da      	uxtb	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	4929      	ldr	r1, [pc, #164]	@ (8007244 <I2C_MasterRequestRead+0x198>)
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f8cc 	bl	800733c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e044      	b.n	8007238 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f831 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00d      	beq.n	8007208 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071fa:	d103      	bne.n	8007204 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007202:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e017      	b.n	8007238 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007208:	897b      	ldrh	r3, [r7, #10]
 800720a:	11db      	asrs	r3, r3, #7
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f003 0306 	and.w	r3, r3, #6
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f063 030e 	orn	r3, r3, #14
 8007218:	b2da      	uxtb	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4907      	ldr	r1, [pc, #28]	@ (8007244 <I2C_MasterRequestRead+0x198>)
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 f888 	bl	800733c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	00010008 	.word	0x00010008
 8007244:	00010002 	.word	0x00010002

08007248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	4613      	mov	r3, r2
 8007256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007258:	e048      	b.n	80072ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d044      	beq.n	80072ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007262:	f7fb fb91 	bl	8002988 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	429a      	cmp	r2, r3
 8007270:	d302      	bcc.n	8007278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d139      	bne.n	80072ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	0c1b      	lsrs	r3, r3, #16
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	d10d      	bne.n	800729e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	43da      	mvns	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4013      	ands	r3, r2
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	bf0c      	ite	eq
 8007294:	2301      	moveq	r3, #1
 8007296:	2300      	movne	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	e00c      	b.n	80072b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	43da      	mvns	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4013      	ands	r3, r2
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bf0c      	ite	eq
 80072b0:	2301      	moveq	r3, #1
 80072b2:	2300      	movne	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d116      	bne.n	80072ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	f043 0220 	orr.w	r2, r3, #32
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e023      	b.n	8007334 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d10d      	bne.n	8007312 <I2C_WaitOnFlagUntilTimeout+0xca>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	43da      	mvns	r2, r3
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	4013      	ands	r3, r2
 8007302:	b29b      	uxth	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	e00c      	b.n	800732c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	43da      	mvns	r2, r3
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4013      	ands	r3, r2
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	bf0c      	ite	eq
 8007324:	2301      	moveq	r3, #1
 8007326:	2300      	movne	r3, #0
 8007328:	b2db      	uxtb	r3, r3
 800732a:	461a      	mov	r2, r3
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	429a      	cmp	r2, r3
 8007330:	d093      	beq.n	800725a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800734a:	e071      	b.n	8007430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800735a:	d123      	bne.n	80073a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800736a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007390:	f043 0204 	orr.w	r2, r3, #4
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e067      	b.n	8007474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073aa:	d041      	beq.n	8007430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ac:	f7fb faec 	bl	8002988 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d302      	bcc.n	80073c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d136      	bne.n	8007430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d10c      	bne.n	80073e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	43da      	mvns	r2, r3
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4013      	ands	r3, r2
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bf14      	ite	ne
 80073de:	2301      	movne	r3, #1
 80073e0:	2300      	moveq	r3, #0
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	e00b      	b.n	80073fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	43da      	mvns	r2, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4013      	ands	r3, r2
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	bf14      	ite	ne
 80073f8:	2301      	movne	r3, #1
 80073fa:	2300      	moveq	r3, #0
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d016      	beq.n	8007430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741c:	f043 0220 	orr.w	r2, r3, #32
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e021      	b.n	8007474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	0c1b      	lsrs	r3, r3, #16
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b01      	cmp	r3, #1
 8007438:	d10c      	bne.n	8007454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	43da      	mvns	r2, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	4013      	ands	r3, r2
 8007446:	b29b      	uxth	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	bf14      	ite	ne
 800744c:	2301      	movne	r3, #1
 800744e:	2300      	moveq	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	e00b      	b.n	800746c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	43da      	mvns	r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4013      	ands	r3, r2
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	bf14      	ite	ne
 8007466:	2301      	movne	r3, #1
 8007468:	2300      	moveq	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	f47f af6d 	bne.w	800734c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007488:	e034      	b.n	80074f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 f8e3 	bl	8007656 <I2C_IsAcknowledgeFailed>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e034      	b.n	8007504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a0:	d028      	beq.n	80074f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a2:	f7fb fa71 	bl	8002988 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d302      	bcc.n	80074b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d11d      	bne.n	80074f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c2:	2b80      	cmp	r3, #128	@ 0x80
 80074c4:	d016      	beq.n	80074f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e0:	f043 0220 	orr.w	r2, r3, #32
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e007      	b.n	8007504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074fe:	2b80      	cmp	r3, #128	@ 0x80
 8007500:	d1c3      	bne.n	800748a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007518:	e034      	b.n	8007584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 f89b 	bl	8007656 <I2C_IsAcknowledgeFailed>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e034      	b.n	8007594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d028      	beq.n	8007584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007532:	f7fb fa29 	bl	8002988 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	429a      	cmp	r2, r3
 8007540:	d302      	bcc.n	8007548 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d11d      	bne.n	8007584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b04      	cmp	r3, #4
 8007554:	d016      	beq.n	8007584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2220      	movs	r2, #32
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007570:	f043 0220 	orr.w	r2, r3, #32
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e007      	b.n	8007594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b04      	cmp	r3, #4
 8007590:	d1c3      	bne.n	800751a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075a8:	e049      	b.n	800763e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b10      	cmp	r3, #16
 80075b6:	d119      	bne.n	80075ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f06f 0210 	mvn.w	r2, #16
 80075c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e030      	b.n	800764e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ec:	f7fb f9cc 	bl	8002988 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d302      	bcc.n	8007602 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d11d      	bne.n	800763e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760c:	2b40      	cmp	r3, #64	@ 0x40
 800760e:	d016      	beq.n	800763e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2220      	movs	r2, #32
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762a:	f043 0220 	orr.w	r2, r3, #32
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e007      	b.n	800764e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007648:	2b40      	cmp	r3, #64	@ 0x40
 800764a:	d1ae      	bne.n	80075aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800766c:	d11b      	bne.n	80076a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007676:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007692:	f043 0204 	orr.w	r2, r3, #4
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e000      	b.n	80076a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e267      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d075      	beq.n	80077be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076d2:	4b88      	ldr	r3, [pc, #544]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 030c 	and.w	r3, r3, #12
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d00c      	beq.n	80076f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076de:	4b85      	ldr	r3, [pc, #532]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	d112      	bne.n	8007710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076ea:	4b82      	ldr	r3, [pc, #520]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076f6:	d10b      	bne.n	8007710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076f8:	4b7e      	ldr	r3, [pc, #504]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d05b      	beq.n	80077bc <HAL_RCC_OscConfig+0x108>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d157      	bne.n	80077bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e242      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007718:	d106      	bne.n	8007728 <HAL_RCC_OscConfig+0x74>
 800771a:	4b76      	ldr	r3, [pc, #472]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a75      	ldr	r2, [pc, #468]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	e01d      	b.n	8007764 <HAL_RCC_OscConfig+0xb0>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007730:	d10c      	bne.n	800774c <HAL_RCC_OscConfig+0x98>
 8007732:	4b70      	ldr	r3, [pc, #448]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a6f      	ldr	r2, [pc, #444]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	4b6d      	ldr	r3, [pc, #436]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a6c      	ldr	r2, [pc, #432]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	e00b      	b.n	8007764 <HAL_RCC_OscConfig+0xb0>
 800774c:	4b69      	ldr	r3, [pc, #420]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a68      	ldr	r2, [pc, #416]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	4b66      	ldr	r3, [pc, #408]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a65      	ldr	r2, [pc, #404]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 800775e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d013      	beq.n	8007794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800776c:	f7fb f90c 	bl	8002988 <HAL_GetTick>
 8007770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007772:	e008      	b.n	8007786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007774:	f7fb f908 	bl	8002988 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b64      	cmp	r3, #100	@ 0x64
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e207      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007786:	4b5b      	ldr	r3, [pc, #364]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0f0      	beq.n	8007774 <HAL_RCC_OscConfig+0xc0>
 8007792:	e014      	b.n	80077be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007794:	f7fb f8f8 	bl	8002988 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800779a:	e008      	b.n	80077ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800779c:	f7fb f8f4 	bl	8002988 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b64      	cmp	r3, #100	@ 0x64
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e1f3      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ae:	4b51      	ldr	r3, [pc, #324]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1f0      	bne.n	800779c <HAL_RCC_OscConfig+0xe8>
 80077ba:	e000      	b.n	80077be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d063      	beq.n	8007892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077ca:	4b4a      	ldr	r3, [pc, #296]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 030c 	and.w	r3, r3, #12
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077d6:	4b47      	ldr	r3, [pc, #284]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077de:	2b08      	cmp	r3, #8
 80077e0:	d11c      	bne.n	800781c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077e2:	4b44      	ldr	r3, [pc, #272]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d116      	bne.n	800781c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ee:	4b41      	ldr	r3, [pc, #260]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <HAL_RCC_OscConfig+0x152>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d001      	beq.n	8007806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e1c7      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007806:	4b3b      	ldr	r3, [pc, #236]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	4937      	ldr	r1, [pc, #220]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007816:	4313      	orrs	r3, r2
 8007818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800781a:	e03a      	b.n	8007892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d020      	beq.n	8007866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007824:	4b34      	ldr	r3, [pc, #208]	@ (80078f8 <HAL_RCC_OscConfig+0x244>)
 8007826:	2201      	movs	r2, #1
 8007828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782a:	f7fb f8ad 	bl	8002988 <HAL_GetTick>
 800782e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007830:	e008      	b.n	8007844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007832:	f7fb f8a9 	bl	8002988 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d901      	bls.n	8007844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e1a8      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007844:	4b2b      	ldr	r3, [pc, #172]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0f0      	beq.n	8007832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007850:	4b28      	ldr	r3, [pc, #160]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4925      	ldr	r1, [pc, #148]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007860:	4313      	orrs	r3, r2
 8007862:	600b      	str	r3, [r1, #0]
 8007864:	e015      	b.n	8007892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007866:	4b24      	ldr	r3, [pc, #144]	@ (80078f8 <HAL_RCC_OscConfig+0x244>)
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786c:	f7fb f88c 	bl	8002988 <HAL_GetTick>
 8007870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007872:	e008      	b.n	8007886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007874:	f7fb f888 	bl	8002988 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d901      	bls.n	8007886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e187      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007886:	4b1b      	ldr	r3, [pc, #108]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1f0      	bne.n	8007874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d036      	beq.n	800790c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d016      	beq.n	80078d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078a6:	4b15      	ldr	r3, [pc, #84]	@ (80078fc <HAL_RCC_OscConfig+0x248>)
 80078a8:	2201      	movs	r2, #1
 80078aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ac:	f7fb f86c 	bl	8002988 <HAL_GetTick>
 80078b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078b2:	e008      	b.n	80078c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078b4:	f7fb f868 	bl	8002988 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e167      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078c6:	4b0b      	ldr	r3, [pc, #44]	@ (80078f4 <HAL_RCC_OscConfig+0x240>)
 80078c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0f0      	beq.n	80078b4 <HAL_RCC_OscConfig+0x200>
 80078d2:	e01b      	b.n	800790c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078d4:	4b09      	ldr	r3, [pc, #36]	@ (80078fc <HAL_RCC_OscConfig+0x248>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078da:	f7fb f855 	bl	8002988 <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078e0:	e00e      	b.n	8007900 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078e2:	f7fb f851 	bl	8002988 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d907      	bls.n	8007900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e150      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
 80078f4:	40023800 	.word	0x40023800
 80078f8:	42470000 	.word	0x42470000
 80078fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007900:	4b88      	ldr	r3, [pc, #544]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1ea      	bne.n	80078e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 8097 	beq.w	8007a48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800791a:	2300      	movs	r3, #0
 800791c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800791e:	4b81      	ldr	r3, [pc, #516]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10f      	bne.n	800794a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800792a:	2300      	movs	r3, #0
 800792c:	60bb      	str	r3, [r7, #8]
 800792e:	4b7d      	ldr	r3, [pc, #500]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007932:	4a7c      	ldr	r2, [pc, #496]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007938:	6413      	str	r3, [r2, #64]	@ 0x40
 800793a:	4b7a      	ldr	r3, [pc, #488]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 800793c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007942:	60bb      	str	r3, [r7, #8]
 8007944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800794a:	4b77      	ldr	r3, [pc, #476]	@ (8007b28 <HAL_RCC_OscConfig+0x474>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007952:	2b00      	cmp	r3, #0
 8007954:	d118      	bne.n	8007988 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007956:	4b74      	ldr	r3, [pc, #464]	@ (8007b28 <HAL_RCC_OscConfig+0x474>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a73      	ldr	r2, [pc, #460]	@ (8007b28 <HAL_RCC_OscConfig+0x474>)
 800795c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007962:	f7fb f811 	bl	8002988 <HAL_GetTick>
 8007966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007968:	e008      	b.n	800797c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800796a:	f7fb f80d 	bl	8002988 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e10c      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800797c:	4b6a      	ldr	r3, [pc, #424]	@ (8007b28 <HAL_RCC_OscConfig+0x474>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0f0      	beq.n	800796a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d106      	bne.n	800799e <HAL_RCC_OscConfig+0x2ea>
 8007990:	4b64      	ldr	r3, [pc, #400]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007994:	4a63      	ldr	r2, [pc, #396]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007996:	f043 0301 	orr.w	r3, r3, #1
 800799a:	6713      	str	r3, [r2, #112]	@ 0x70
 800799c:	e01c      	b.n	80079d8 <HAL_RCC_OscConfig+0x324>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b05      	cmp	r3, #5
 80079a4:	d10c      	bne.n	80079c0 <HAL_RCC_OscConfig+0x30c>
 80079a6:	4b5f      	ldr	r3, [pc, #380]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 80079a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079aa:	4a5e      	ldr	r2, [pc, #376]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 80079ac:	f043 0304 	orr.w	r3, r3, #4
 80079b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80079b2:	4b5c      	ldr	r3, [pc, #368]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 80079b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b6:	4a5b      	ldr	r2, [pc, #364]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80079be:	e00b      	b.n	80079d8 <HAL_RCC_OscConfig+0x324>
 80079c0:	4b58      	ldr	r3, [pc, #352]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 80079c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c4:	4a57      	ldr	r2, [pc, #348]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80079cc:	4b55      	ldr	r3, [pc, #340]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 80079ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d0:	4a54      	ldr	r2, [pc, #336]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 80079d2:	f023 0304 	bic.w	r3, r3, #4
 80079d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d015      	beq.n	8007a0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e0:	f7fa ffd2 	bl	8002988 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079e6:	e00a      	b.n	80079fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079e8:	f7fa ffce 	bl	8002988 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e0cb      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079fe:	4b49      	ldr	r3, [pc, #292]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0ee      	beq.n	80079e8 <HAL_RCC_OscConfig+0x334>
 8007a0a:	e014      	b.n	8007a36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a0c:	f7fa ffbc 	bl	8002988 <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a12:	e00a      	b.n	8007a2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a14:	f7fa ffb8 	bl	8002988 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e0b5      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1ee      	bne.n	8007a14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d105      	bne.n	8007a48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a3c:	4b39      	ldr	r3, [pc, #228]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a40:	4a38      	ldr	r2, [pc, #224]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 80a1 	beq.w	8007b94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a52:	4b34      	ldr	r3, [pc, #208]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 030c 	and.w	r3, r3, #12
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d05c      	beq.n	8007b18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d141      	bne.n	8007aea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a66:	4b31      	ldr	r3, [pc, #196]	@ (8007b2c <HAL_RCC_OscConfig+0x478>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a6c:	f7fa ff8c 	bl	8002988 <HAL_GetTick>
 8007a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a72:	e008      	b.n	8007a86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a74:	f7fa ff88 	bl	8002988 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d901      	bls.n	8007a86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e087      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a86:	4b27      	ldr	r3, [pc, #156]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1f0      	bne.n	8007a74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69da      	ldr	r2, [r3, #28]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa0:	019b      	lsls	r3, r3, #6
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa8:	085b      	lsrs	r3, r3, #1
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	041b      	lsls	r3, r3, #16
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	061b      	lsls	r3, r3, #24
 8007ab6:	491b      	ldr	r1, [pc, #108]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007abc:	4b1b      	ldr	r3, [pc, #108]	@ (8007b2c <HAL_RCC_OscConfig+0x478>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac2:	f7fa ff61 	bl	8002988 <HAL_GetTick>
 8007ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ac8:	e008      	b.n	8007adc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aca:	f7fa ff5d 	bl	8002988 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e05c      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007adc:	4b11      	ldr	r3, [pc, #68]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0f0      	beq.n	8007aca <HAL_RCC_OscConfig+0x416>
 8007ae8:	e054      	b.n	8007b94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aea:	4b10      	ldr	r3, [pc, #64]	@ (8007b2c <HAL_RCC_OscConfig+0x478>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af0:	f7fa ff4a 	bl	8002988 <HAL_GetTick>
 8007af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007af6:	e008      	b.n	8007b0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007af8:	f7fa ff46 	bl	8002988 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e045      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b0a:	4b06      	ldr	r3, [pc, #24]	@ (8007b24 <HAL_RCC_OscConfig+0x470>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f0      	bne.n	8007af8 <HAL_RCC_OscConfig+0x444>
 8007b16:	e03d      	b.n	8007b94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d107      	bne.n	8007b30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e038      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
 8007b24:	40023800 	.word	0x40023800
 8007b28:	40007000 	.word	0x40007000
 8007b2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b30:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba0 <HAL_RCC_OscConfig+0x4ec>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d028      	beq.n	8007b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d121      	bne.n	8007b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d11a      	bne.n	8007b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b60:	4013      	ands	r3, r2
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d111      	bne.n	8007b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b76:	085b      	lsrs	r3, r3, #1
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d107      	bne.n	8007b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d001      	beq.n	8007b94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e000      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40023800 	.word	0x40023800

08007ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e0cc      	b.n	8007d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bb8:	4b68      	ldr	r3, [pc, #416]	@ (8007d5c <HAL_RCC_ClockConfig+0x1b8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d90c      	bls.n	8007be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bc6:	4b65      	ldr	r3, [pc, #404]	@ (8007d5c <HAL_RCC_ClockConfig+0x1b8>)
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bce:	4b63      	ldr	r3, [pc, #396]	@ (8007d5c <HAL_RCC_ClockConfig+0x1b8>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d001      	beq.n	8007be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e0b8      	b.n	8007d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d020      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0304 	and.w	r3, r3, #4
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d005      	beq.n	8007c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bf8:	4b59      	ldr	r3, [pc, #356]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	4a58      	ldr	r2, [pc, #352]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d005      	beq.n	8007c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c10:	4b53      	ldr	r3, [pc, #332]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	4a52      	ldr	r2, [pc, #328]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007c16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c1c:	4b50      	ldr	r3, [pc, #320]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	494d      	ldr	r1, [pc, #308]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d044      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d107      	bne.n	8007c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c42:	4b47      	ldr	r3, [pc, #284]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d119      	bne.n	8007c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e07f      	b.n	8007d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d003      	beq.n	8007c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d107      	bne.n	8007c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c62:	4b3f      	ldr	r3, [pc, #252]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d109      	bne.n	8007c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e06f      	b.n	8007d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c72:	4b3b      	ldr	r3, [pc, #236]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e067      	b.n	8007d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c82:	4b37      	ldr	r3, [pc, #220]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f023 0203 	bic.w	r2, r3, #3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	4934      	ldr	r1, [pc, #208]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c94:	f7fa fe78 	bl	8002988 <HAL_GetTick>
 8007c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c9a:	e00a      	b.n	8007cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c9c:	f7fa fe74 	bl	8002988 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e04f      	b.n	8007d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 020c 	and.w	r2, r3, #12
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d1eb      	bne.n	8007c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cc4:	4b25      	ldr	r3, [pc, #148]	@ (8007d5c <HAL_RCC_ClockConfig+0x1b8>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d20c      	bcs.n	8007cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cd2:	4b22      	ldr	r3, [pc, #136]	@ (8007d5c <HAL_RCC_ClockConfig+0x1b8>)
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cda:	4b20      	ldr	r3, [pc, #128]	@ (8007d5c <HAL_RCC_ClockConfig+0x1b8>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d001      	beq.n	8007cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e032      	b.n	8007d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d008      	beq.n	8007d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cf8:	4b19      	ldr	r3, [pc, #100]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	4916      	ldr	r1, [pc, #88]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d16:	4b12      	ldr	r3, [pc, #72]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	490e      	ldr	r1, [pc, #56]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d2a:	f000 f821 	bl	8007d70 <HAL_RCC_GetSysClockFreq>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	4b0b      	ldr	r3, [pc, #44]	@ (8007d60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	091b      	lsrs	r3, r3, #4
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	490a      	ldr	r1, [pc, #40]	@ (8007d64 <HAL_RCC_ClockConfig+0x1c0>)
 8007d3c:	5ccb      	ldrb	r3, [r1, r3]
 8007d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d42:	4a09      	ldr	r2, [pc, #36]	@ (8007d68 <HAL_RCC_ClockConfig+0x1c4>)
 8007d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d46:	4b09      	ldr	r3, [pc, #36]	@ (8007d6c <HAL_RCC_ClockConfig+0x1c8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fa fdd8 	bl	8002900 <HAL_InitTick>

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	40023c00 	.word	0x40023c00
 8007d60:	40023800 	.word	0x40023800
 8007d64:	08014d4c 	.word	0x08014d4c
 8007d68:	20000000 	.word	0x20000000
 8007d6c:	20000004 	.word	0x20000004

08007d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d74:	b094      	sub	sp, #80	@ 0x50
 8007d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d80:	2300      	movs	r3, #0
 8007d82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d88:	4b79      	ldr	r3, [pc, #484]	@ (8007f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f003 030c 	and.w	r3, r3, #12
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d00d      	beq.n	8007db0 <HAL_RCC_GetSysClockFreq+0x40>
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	f200 80e1 	bhi.w	8007f5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <HAL_RCC_GetSysClockFreq+0x34>
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d003      	beq.n	8007daa <HAL_RCC_GetSysClockFreq+0x3a>
 8007da2:	e0db      	b.n	8007f5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007da4:	4b73      	ldr	r3, [pc, #460]	@ (8007f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8007da6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007da8:	e0db      	b.n	8007f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007daa:	4b73      	ldr	r3, [pc, #460]	@ (8007f78 <HAL_RCC_GetSysClockFreq+0x208>)
 8007dac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007dae:	e0d8      	b.n	8007f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007db0:	4b6f      	ldr	r3, [pc, #444]	@ (8007f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007db8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dba:	4b6d      	ldr	r3, [pc, #436]	@ (8007f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d063      	beq.n	8007e8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8007f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	099b      	lsrs	r3, r3, #6
 8007dcc:	2200      	movs	r2, #0
 8007dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007dd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dda:	2300      	movs	r3, #0
 8007ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007de2:	4622      	mov	r2, r4
 8007de4:	462b      	mov	r3, r5
 8007de6:	f04f 0000 	mov.w	r0, #0
 8007dea:	f04f 0100 	mov.w	r1, #0
 8007dee:	0159      	lsls	r1, r3, #5
 8007df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007df4:	0150      	lsls	r0, r2, #5
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	1a51      	subs	r1, r2, r1
 8007dfe:	6139      	str	r1, [r7, #16]
 8007e00:	4629      	mov	r1, r5
 8007e02:	eb63 0301 	sbc.w	r3, r3, r1
 8007e06:	617b      	str	r3, [r7, #20]
 8007e08:	f04f 0200 	mov.w	r2, #0
 8007e0c:	f04f 0300 	mov.w	r3, #0
 8007e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e14:	4659      	mov	r1, fp
 8007e16:	018b      	lsls	r3, r1, #6
 8007e18:	4651      	mov	r1, sl
 8007e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e1e:	4651      	mov	r1, sl
 8007e20:	018a      	lsls	r2, r1, #6
 8007e22:	4651      	mov	r1, sl
 8007e24:	ebb2 0801 	subs.w	r8, r2, r1
 8007e28:	4659      	mov	r1, fp
 8007e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	f04f 0300 	mov.w	r3, #0
 8007e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e42:	4690      	mov	r8, r2
 8007e44:	4699      	mov	r9, r3
 8007e46:	4623      	mov	r3, r4
 8007e48:	eb18 0303 	adds.w	r3, r8, r3
 8007e4c:	60bb      	str	r3, [r7, #8]
 8007e4e:	462b      	mov	r3, r5
 8007e50:	eb49 0303 	adc.w	r3, r9, r3
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	f04f 0200 	mov.w	r2, #0
 8007e5a:	f04f 0300 	mov.w	r3, #0
 8007e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e62:	4629      	mov	r1, r5
 8007e64:	024b      	lsls	r3, r1, #9
 8007e66:	4621      	mov	r1, r4
 8007e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	024a      	lsls	r2, r1, #9
 8007e70:	4610      	mov	r0, r2
 8007e72:	4619      	mov	r1, r3
 8007e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e76:	2200      	movs	r2, #0
 8007e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e80:	f7f8 fef2 	bl	8000c68 <__aeabi_uldivmod>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4613      	mov	r3, r2
 8007e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e8c:	e058      	b.n	8007f40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e8e:	4b38      	ldr	r3, [pc, #224]	@ (8007f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	099b      	lsrs	r3, r3, #6
 8007e94:	2200      	movs	r2, #0
 8007e96:	4618      	mov	r0, r3
 8007e98:	4611      	mov	r1, r2
 8007e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e9e:	623b      	str	r3, [r7, #32]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	464b      	mov	r3, r9
 8007eac:	f04f 0000 	mov.w	r0, #0
 8007eb0:	f04f 0100 	mov.w	r1, #0
 8007eb4:	0159      	lsls	r1, r3, #5
 8007eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007eba:	0150      	lsls	r0, r2, #5
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4641      	mov	r1, r8
 8007ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8007ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	00eb      	lsls	r3, r5, #3
 8007ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ef6:	00e2      	lsls	r2, r4, #3
 8007ef8:	4614      	mov	r4, r2
 8007efa:	461d      	mov	r5, r3
 8007efc:	4643      	mov	r3, r8
 8007efe:	18e3      	adds	r3, r4, r3
 8007f00:	603b      	str	r3, [r7, #0]
 8007f02:	464b      	mov	r3, r9
 8007f04:	eb45 0303 	adc.w	r3, r5, r3
 8007f08:	607b      	str	r3, [r7, #4]
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	f04f 0300 	mov.w	r3, #0
 8007f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f16:	4629      	mov	r1, r5
 8007f18:	028b      	lsls	r3, r1, #10
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f20:	4621      	mov	r1, r4
 8007f22:	028a      	lsls	r2, r1, #10
 8007f24:	4610      	mov	r0, r2
 8007f26:	4619      	mov	r1, r3
 8007f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	61bb      	str	r3, [r7, #24]
 8007f2e:	61fa      	str	r2, [r7, #28]
 8007f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f34:	f7f8 fe98 	bl	8000c68 <__aeabi_uldivmod>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f40:	4b0b      	ldr	r3, [pc, #44]	@ (8007f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	0c1b      	lsrs	r3, r3, #16
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007f50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f5a:	e002      	b.n	8007f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f5c:	4b05      	ldr	r3, [pc, #20]	@ (8007f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3750      	adds	r7, #80	@ 0x50
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f6e:	bf00      	nop
 8007f70:	40023800 	.word	0x40023800
 8007f74:	00f42400 	.word	0x00f42400
 8007f78:	007a1200 	.word	0x007a1200

08007f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f80:	4b03      	ldr	r3, [pc, #12]	@ (8007f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f82:	681b      	ldr	r3, [r3, #0]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	20000000 	.word	0x20000000

08007f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f98:	f7ff fff0 	bl	8007f7c <HAL_RCC_GetHCLKFreq>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	4b05      	ldr	r3, [pc, #20]	@ (8007fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	0a9b      	lsrs	r3, r3, #10
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	4903      	ldr	r1, [pc, #12]	@ (8007fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007faa:	5ccb      	ldrb	r3, [r1, r3]
 8007fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	40023800 	.word	0x40023800
 8007fb8:	08014d5c 	.word	0x08014d5c

08007fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007fc0:	f7ff ffdc 	bl	8007f7c <HAL_RCC_GetHCLKFreq>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	4b05      	ldr	r3, [pc, #20]	@ (8007fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	0b5b      	lsrs	r3, r3, #13
 8007fcc:	f003 0307 	and.w	r3, r3, #7
 8007fd0:	4903      	ldr	r1, [pc, #12]	@ (8007fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fd2:	5ccb      	ldrb	r3, [r1, r3]
 8007fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40023800 	.word	0x40023800
 8007fe0:	08014d5c 	.word	0x08014d5c

08007fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e07b      	b.n	80080ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d108      	bne.n	8008010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008006:	d009      	beq.n	800801c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	61da      	str	r2, [r3, #28]
 800800e:	e005      	b.n	800801c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7fa f8ee 	bl	8002218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	431a      	orrs	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a0:	ea42 0103 	orr.w	r1, r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	0c1b      	lsrs	r3, r3, #16
 80080ba:	f003 0104 	and.w	r1, r3, #4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	f003 0210 	and.w	r2, r3, #16
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69da      	ldr	r2, [r3, #28]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b088      	sub	sp, #32
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	603b      	str	r3, [r7, #0]
 8008102:	4613      	mov	r3, r2
 8008104:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_SPI_Transmit+0x22>
 8008114:	2302      	movs	r3, #2
 8008116:	e12d      	b.n	8008374 <HAL_SPI_Transmit+0x27e>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008120:	f7fa fc32 	bl	8002988 <HAL_GetTick>
 8008124:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b01      	cmp	r3, #1
 8008134:	d002      	beq.n	800813c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008136:	2302      	movs	r3, #2
 8008138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800813a:	e116      	b.n	800836a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_SPI_Transmit+0x52>
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800814c:	e10d      	b.n	800836a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2203      	movs	r2, #3
 8008152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	88fa      	ldrh	r2, [r7, #6]
 8008166:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	88fa      	ldrh	r2, [r7, #6]
 800816c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008194:	d10f      	bne.n	80081b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c0:	2b40      	cmp	r3, #64	@ 0x40
 80081c2:	d007      	beq.n	80081d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081dc:	d14f      	bne.n	800827e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <HAL_SPI_Transmit+0xf6>
 80081e6:	8afb      	ldrh	r3, [r7, #22]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d142      	bne.n	8008272 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f0:	881a      	ldrh	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fc:	1c9a      	adds	r2, r3, #2
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008206:	b29b      	uxth	r3, r3
 8008208:	3b01      	subs	r3, #1
 800820a:	b29a      	uxth	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008210:	e02f      	b.n	8008272 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b02      	cmp	r3, #2
 800821e:	d112      	bne.n	8008246 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008224:	881a      	ldrh	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008230:	1c9a      	adds	r2, r3, #2
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800823a:	b29b      	uxth	r3, r3
 800823c:	3b01      	subs	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008244:	e015      	b.n	8008272 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008246:	f7fa fb9f 	bl	8002988 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d803      	bhi.n	800825e <HAL_SPI_Transmit+0x168>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825c:	d102      	bne.n	8008264 <HAL_SPI_Transmit+0x16e>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d106      	bne.n	8008272 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008270:	e07b      	b.n	800836a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1ca      	bne.n	8008212 <HAL_SPI_Transmit+0x11c>
 800827c:	e050      	b.n	8008320 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <HAL_SPI_Transmit+0x196>
 8008286:	8afb      	ldrh	r3, [r7, #22]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d144      	bne.n	8008316 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	330c      	adds	r3, #12
 8008296:	7812      	ldrb	r2, [r2, #0]
 8008298:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80082b2:	e030      	b.n	8008316 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d113      	bne.n	80082ea <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	330c      	adds	r3, #12
 80082cc:	7812      	ldrb	r2, [r2, #0]
 80082ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80082e8:	e015      	b.n	8008316 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082ea:	f7fa fb4d 	bl	8002988 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d803      	bhi.n	8008302 <HAL_SPI_Transmit+0x20c>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008300:	d102      	bne.n	8008308 <HAL_SPI_Transmit+0x212>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008314:	e029      	b.n	800836a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800831a:	b29b      	uxth	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1c9      	bne.n	80082b4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f8b1 	bl	800848c <SPI_EndRxTxTransaction>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2220      	movs	r2, #32
 8008334:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10a      	bne.n	8008354 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800833e:	2300      	movs	r3, #0
 8008340:	613b      	str	r3, [r7, #16]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	613b      	str	r3, [r7, #16]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	613b      	str	r3, [r7, #16]
 8008352:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e003      	b.n	800836a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008372:	7ffb      	ldrb	r3, [r7, #31]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	4613      	mov	r3, r2
 800838a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800838c:	f7fa fafc 	bl	8002988 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	4413      	add	r3, r2
 800839a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800839c:	f7fa faf4 	bl	8002988 <HAL_GetTick>
 80083a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083a2:	4b39      	ldr	r3, [pc, #228]	@ (8008488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	015b      	lsls	r3, r3, #5
 80083a8:	0d1b      	lsrs	r3, r3, #20
 80083aa:	69fa      	ldr	r2, [r7, #28]
 80083ac:	fb02 f303 	mul.w	r3, r2, r3
 80083b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083b2:	e054      	b.n	800845e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ba:	d050      	beq.n	800845e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083bc:	f7fa fae4 	bl	8002988 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d902      	bls.n	80083d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d13d      	bne.n	800844e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083ea:	d111      	bne.n	8008410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083f4:	d004      	beq.n	8008400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083fe:	d107      	bne.n	8008410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800840e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008418:	d10f      	bne.n	800843a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e017      	b.n	800847e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	3b01      	subs	r3, #1
 800845c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4013      	ands	r3, r2
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	429a      	cmp	r2, r3
 800846c:	bf0c      	ite	eq
 800846e:	2301      	moveq	r3, #1
 8008470:	2300      	movne	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	461a      	mov	r2, r3
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	429a      	cmp	r2, r3
 800847a:	d19b      	bne.n	80083b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3720      	adds	r7, #32
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000000 	.word	0x20000000

0800848c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af02      	add	r7, sp, #8
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2201      	movs	r2, #1
 80084a0:	2102      	movs	r1, #2
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7ff ff6a 	bl	800837c <SPI_WaitFlagStateUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d007      	beq.n	80084be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b2:	f043 0220 	orr.w	r2, r3, #32
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e032      	b.n	8008524 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80084be:	4b1b      	ldr	r3, [pc, #108]	@ (800852c <SPI_EndRxTxTransaction+0xa0>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008530 <SPI_EndRxTxTransaction+0xa4>)
 80084c4:	fba2 2303 	umull	r2, r3, r2, r3
 80084c8:	0d5b      	lsrs	r3, r3, #21
 80084ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
 80084d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084dc:	d112      	bne.n	8008504 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2200      	movs	r2, #0
 80084e6:	2180      	movs	r1, #128	@ 0x80
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7ff ff47 	bl	800837c <SPI_WaitFlagStateUntilTimeout>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d016      	beq.n	8008522 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f8:	f043 0220 	orr.w	r2, r3, #32
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e00f      	b.n	8008524 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	3b01      	subs	r3, #1
 800850e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800851a:	2b80      	cmp	r3, #128	@ 0x80
 800851c:	d0f2      	beq.n	8008504 <SPI_EndRxTxTransaction+0x78>
 800851e:	e000      	b.n	8008522 <SPI_EndRxTxTransaction+0x96>
        break;
 8008520:	bf00      	nop
  }

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20000000 	.word	0x20000000
 8008530:	165e9f81 	.word	0x165e9f81

08008534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e041      	b.n	80085ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d106      	bne.n	8008560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7f9 fea4 	bl	80022a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3304      	adds	r3, #4
 8008570:	4619      	mov	r1, r3
 8008572:	4610      	mov	r0, r2
 8008574:	f000 fcb0 	bl	8008ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e041      	b.n	8008668 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d106      	bne.n	80085fe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f839 	bl	8008670 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2202      	movs	r2, #2
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3304      	adds	r3, #4
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f000 fc61 	bl	8008ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e041      	b.n	800871a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d106      	bne.n	80086b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f839 	bl	8008722 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3304      	adds	r3, #4
 80086c0:	4619      	mov	r1, r3
 80086c2:	4610      	mov	r0, r2
 80086c4:	f000 fc08 	bl	8008ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d109      	bne.n	800875c <HAL_TIM_PWM_Start+0x24>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b01      	cmp	r3, #1
 8008752:	bf14      	ite	ne
 8008754:	2301      	movne	r3, #1
 8008756:	2300      	moveq	r3, #0
 8008758:	b2db      	uxtb	r3, r3
 800875a:	e022      	b.n	80087a2 <HAL_TIM_PWM_Start+0x6a>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b04      	cmp	r3, #4
 8008760:	d109      	bne.n	8008776 <HAL_TIM_PWM_Start+0x3e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b01      	cmp	r3, #1
 800876c:	bf14      	ite	ne
 800876e:	2301      	movne	r3, #1
 8008770:	2300      	moveq	r3, #0
 8008772:	b2db      	uxtb	r3, r3
 8008774:	e015      	b.n	80087a2 <HAL_TIM_PWM_Start+0x6a>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b08      	cmp	r3, #8
 800877a:	d109      	bne.n	8008790 <HAL_TIM_PWM_Start+0x58>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b01      	cmp	r3, #1
 8008786:	bf14      	ite	ne
 8008788:	2301      	movne	r3, #1
 800878a:	2300      	moveq	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	e008      	b.n	80087a2 <HAL_TIM_PWM_Start+0x6a>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b01      	cmp	r3, #1
 800879a:	bf14      	ite	ne
 800879c:	2301      	movne	r3, #1
 800879e:	2300      	moveq	r3, #0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e07c      	b.n	80088a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d104      	bne.n	80087ba <HAL_TIM_PWM_Start+0x82>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087b8:	e013      	b.n	80087e2 <HAL_TIM_PWM_Start+0xaa>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d104      	bne.n	80087ca <HAL_TIM_PWM_Start+0x92>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087c8:	e00b      	b.n	80087e2 <HAL_TIM_PWM_Start+0xaa>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d104      	bne.n	80087da <HAL_TIM_PWM_Start+0xa2>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087d8:	e003      	b.n	80087e2 <HAL_TIM_PWM_Start+0xaa>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2202      	movs	r2, #2
 80087de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2201      	movs	r2, #1
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 fe6a 	bl	80094c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a2d      	ldr	r2, [pc, #180]	@ (80088ac <HAL_TIM_PWM_Start+0x174>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d004      	beq.n	8008804 <HAL_TIM_PWM_Start+0xcc>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a2c      	ldr	r2, [pc, #176]	@ (80088b0 <HAL_TIM_PWM_Start+0x178>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d101      	bne.n	8008808 <HAL_TIM_PWM_Start+0xd0>
 8008804:	2301      	movs	r3, #1
 8008806:	e000      	b.n	800880a <HAL_TIM_PWM_Start+0xd2>
 8008808:	2300      	movs	r3, #0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d007      	beq.n	800881e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800881c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a22      	ldr	r2, [pc, #136]	@ (80088ac <HAL_TIM_PWM_Start+0x174>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d022      	beq.n	800886e <HAL_TIM_PWM_Start+0x136>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008830:	d01d      	beq.n	800886e <HAL_TIM_PWM_Start+0x136>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a1f      	ldr	r2, [pc, #124]	@ (80088b4 <HAL_TIM_PWM_Start+0x17c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d018      	beq.n	800886e <HAL_TIM_PWM_Start+0x136>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a1d      	ldr	r2, [pc, #116]	@ (80088b8 <HAL_TIM_PWM_Start+0x180>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <HAL_TIM_PWM_Start+0x136>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a1c      	ldr	r2, [pc, #112]	@ (80088bc <HAL_TIM_PWM_Start+0x184>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d00e      	beq.n	800886e <HAL_TIM_PWM_Start+0x136>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a16      	ldr	r2, [pc, #88]	@ (80088b0 <HAL_TIM_PWM_Start+0x178>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d009      	beq.n	800886e <HAL_TIM_PWM_Start+0x136>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a18      	ldr	r2, [pc, #96]	@ (80088c0 <HAL_TIM_PWM_Start+0x188>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d004      	beq.n	800886e <HAL_TIM_PWM_Start+0x136>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a16      	ldr	r2, [pc, #88]	@ (80088c4 <HAL_TIM_PWM_Start+0x18c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d111      	bne.n	8008892 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 0307 	and.w	r3, r3, #7
 8008878:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b06      	cmp	r3, #6
 800887e:	d010      	beq.n	80088a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0201 	orr.w	r2, r2, #1
 800888e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008890:	e007      	b.n	80088a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f042 0201 	orr.w	r2, r2, #1
 80088a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	40010000 	.word	0x40010000
 80088b0:	40010400 	.word	0x40010400
 80088b4:	40000400 	.word	0x40000400
 80088b8:	40000800 	.word	0x40000800
 80088bc:	40000c00 	.word	0x40000c00
 80088c0:	40014000 	.word	0x40014000
 80088c4:	40001800 	.word	0x40001800

080088c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d020      	beq.n	800892c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d01b      	beq.n	800892c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0202 	mvn.w	r2, #2
 80088fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fac1 	bl	8008e9a <HAL_TIM_IC_CaptureCallback>
 8008918:	e005      	b.n	8008926 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fab3 	bl	8008e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fac4 	bl	8008eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	d020      	beq.n	8008978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b00      	cmp	r3, #0
 800893e:	d01b      	beq.n	8008978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f06f 0204 	mvn.w	r2, #4
 8008948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2202      	movs	r2, #2
 800894e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa9b 	bl	8008e9a <HAL_TIM_IC_CaptureCallback>
 8008964:	e005      	b.n	8008972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fa8d 	bl	8008e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fa9e 	bl	8008eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d020      	beq.n	80089c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f003 0308 	and.w	r3, r3, #8
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01b      	beq.n	80089c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f06f 0208 	mvn.w	r2, #8
 8008994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2204      	movs	r2, #4
 800899a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa75 	bl	8008e9a <HAL_TIM_IC_CaptureCallback>
 80089b0:	e005      	b.n	80089be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa67 	bl	8008e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fa78 	bl	8008eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f003 0310 	and.w	r3, r3, #16
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d020      	beq.n	8008a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f003 0310 	and.w	r3, r3, #16
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01b      	beq.n	8008a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f06f 0210 	mvn.w	r2, #16
 80089e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2208      	movs	r2, #8
 80089e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa4f 	bl	8008e9a <HAL_TIM_IC_CaptureCallback>
 80089fc:	e005      	b.n	8008a0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa41 	bl	8008e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fa52 	bl	8008eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00c      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d007      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0201 	mvn.w	r2, #1
 8008a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa1f 	bl	8008e72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fe34 	bl	80096c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00c      	beq.n	8008a7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa23 	bl	8008ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00c      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f06f 0220 	mvn.w	r2, #32
 8008a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fe06 	bl	80096ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008aa0:	bf00      	nop
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e048      	b.n	8008b58 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b0c      	cmp	r3, #12
 8008ad2:	d839      	bhi.n	8008b48 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8008adc <HAL_TIM_OC_ConfigChannel+0x34>)
 8008ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ada:	bf00      	nop
 8008adc:	08008b11 	.word	0x08008b11
 8008ae0:	08008b49 	.word	0x08008b49
 8008ae4:	08008b49 	.word	0x08008b49
 8008ae8:	08008b49 	.word	0x08008b49
 8008aec:	08008b1f 	.word	0x08008b1f
 8008af0:	08008b49 	.word	0x08008b49
 8008af4:	08008b49 	.word	0x08008b49
 8008af8:	08008b49 	.word	0x08008b49
 8008afc:	08008b2d 	.word	0x08008b2d
 8008b00:	08008b49 	.word	0x08008b49
 8008b04:	08008b49 	.word	0x08008b49
 8008b08:	08008b49 	.word	0x08008b49
 8008b0c:	08008b3b 	.word	0x08008b3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fa8a 	bl	8009030 <TIM_OC1_SetConfig>
      break;
 8008b1c:	e017      	b.n	8008b4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68b9      	ldr	r1, [r7, #8]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 faf3 	bl	8009110 <TIM_OC2_SetConfig>
      break;
 8008b2a:	e010      	b.n	8008b4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68b9      	ldr	r1, [r7, #8]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fb62 	bl	80091fc <TIM_OC3_SetConfig>
      break;
 8008b38:	e009      	b.n	8008b4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 fbcf 	bl	80092e4 <TIM_OC4_SetConfig>
      break;
 8008b46:	e002      	b.n	8008b4e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e0ae      	b.n	8008cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b0c      	cmp	r3, #12
 8008b8a:	f200 809f 	bhi.w	8008ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008bc9 	.word	0x08008bc9
 8008b98:	08008ccd 	.word	0x08008ccd
 8008b9c:	08008ccd 	.word	0x08008ccd
 8008ba0:	08008ccd 	.word	0x08008ccd
 8008ba4:	08008c09 	.word	0x08008c09
 8008ba8:	08008ccd 	.word	0x08008ccd
 8008bac:	08008ccd 	.word	0x08008ccd
 8008bb0:	08008ccd 	.word	0x08008ccd
 8008bb4:	08008c4b 	.word	0x08008c4b
 8008bb8:	08008ccd 	.word	0x08008ccd
 8008bbc:	08008ccd 	.word	0x08008ccd
 8008bc0:	08008ccd 	.word	0x08008ccd
 8008bc4:	08008c8b 	.word	0x08008c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fa2e 	bl	8009030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	699a      	ldr	r2, [r3, #24]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f042 0208 	orr.w	r2, r2, #8
 8008be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699a      	ldr	r2, [r3, #24]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0204 	bic.w	r2, r2, #4
 8008bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6999      	ldr	r1, [r3, #24]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	691a      	ldr	r2, [r3, #16]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	619a      	str	r2, [r3, #24]
      break;
 8008c06:	e064      	b.n	8008cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68b9      	ldr	r1, [r7, #8]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fa7e 	bl	8009110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	699a      	ldr	r2, [r3, #24]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6999      	ldr	r1, [r3, #24]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	021a      	lsls	r2, r3, #8
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	619a      	str	r2, [r3, #24]
      break;
 8008c48:	e043      	b.n	8008cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68b9      	ldr	r1, [r7, #8]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 fad3 	bl	80091fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	69da      	ldr	r2, [r3, #28]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f042 0208 	orr.w	r2, r2, #8
 8008c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69da      	ldr	r2, [r3, #28]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0204 	bic.w	r2, r2, #4
 8008c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69d9      	ldr	r1, [r3, #28]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	691a      	ldr	r2, [r3, #16]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	430a      	orrs	r2, r1
 8008c86:	61da      	str	r2, [r3, #28]
      break;
 8008c88:	e023      	b.n	8008cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fb27 	bl	80092e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	69da      	ldr	r2, [r3, #28]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69da      	ldr	r2, [r3, #28]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69d9      	ldr	r1, [r3, #28]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	021a      	lsls	r2, r3, #8
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	61da      	str	r2, [r3, #28]
      break;
 8008cca:	e002      	b.n	8008cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
      break;
 8008cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d101      	bne.n	8008d00 <HAL_TIM_ConfigClockSource+0x1c>
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e0b4      	b.n	8008e6a <HAL_TIM_ConfigClockSource+0x186>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d38:	d03e      	beq.n	8008db8 <HAL_TIM_ConfigClockSource+0xd4>
 8008d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d3e:	f200 8087 	bhi.w	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d46:	f000 8086 	beq.w	8008e56 <HAL_TIM_ConfigClockSource+0x172>
 8008d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d4e:	d87f      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d50:	2b70      	cmp	r3, #112	@ 0x70
 8008d52:	d01a      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0xa6>
 8008d54:	2b70      	cmp	r3, #112	@ 0x70
 8008d56:	d87b      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d58:	2b60      	cmp	r3, #96	@ 0x60
 8008d5a:	d050      	beq.n	8008dfe <HAL_TIM_ConfigClockSource+0x11a>
 8008d5c:	2b60      	cmp	r3, #96	@ 0x60
 8008d5e:	d877      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d60:	2b50      	cmp	r3, #80	@ 0x50
 8008d62:	d03c      	beq.n	8008dde <HAL_TIM_ConfigClockSource+0xfa>
 8008d64:	2b50      	cmp	r3, #80	@ 0x50
 8008d66:	d873      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d68:	2b40      	cmp	r3, #64	@ 0x40
 8008d6a:	d058      	beq.n	8008e1e <HAL_TIM_ConfigClockSource+0x13a>
 8008d6c:	2b40      	cmp	r3, #64	@ 0x40
 8008d6e:	d86f      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d70:	2b30      	cmp	r3, #48	@ 0x30
 8008d72:	d064      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x15a>
 8008d74:	2b30      	cmp	r3, #48	@ 0x30
 8008d76:	d86b      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d060      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x15a>
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	d867      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d05c      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x15a>
 8008d84:	2b10      	cmp	r3, #16
 8008d86:	d05a      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x15a>
 8008d88:	e062      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d9a:	f000 fb73 	bl	8009484 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	609a      	str	r2, [r3, #8]
      break;
 8008db6:	e04f      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008dc8:	f000 fb5c 	bl	8009484 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dda:	609a      	str	r2, [r3, #8]
      break;
 8008ddc:	e03c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dea:	461a      	mov	r2, r3
 8008dec:	f000 fad0 	bl	8009390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2150      	movs	r1, #80	@ 0x50
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fb29 	bl	800944e <TIM_ITRx_SetConfig>
      break;
 8008dfc:	e02c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f000 faef 	bl	80093ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2160      	movs	r1, #96	@ 0x60
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fb19 	bl	800944e <TIM_ITRx_SetConfig>
      break;
 8008e1c:	e01c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f000 fab0 	bl	8009390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2140      	movs	r1, #64	@ 0x40
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fb09 	bl	800944e <TIM_ITRx_SetConfig>
      break;
 8008e3c:	e00c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4619      	mov	r1, r3
 8008e48:	4610      	mov	r0, r2
 8008e4a:	f000 fb00 	bl	800944e <TIM_ITRx_SetConfig>
      break;
 8008e4e:	e003      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	73fb      	strb	r3, [r7, #15]
      break;
 8008e54:	e000      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
	...

08008ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a46      	ldr	r2, [pc, #280]	@ (8009004 <TIM_Base_SetConfig+0x12c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d013      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ef6:	d00f      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a43      	ldr	r2, [pc, #268]	@ (8009008 <TIM_Base_SetConfig+0x130>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00b      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a42      	ldr	r2, [pc, #264]	@ (800900c <TIM_Base_SetConfig+0x134>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d007      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a41      	ldr	r2, [pc, #260]	@ (8009010 <TIM_Base_SetConfig+0x138>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a40      	ldr	r2, [pc, #256]	@ (8009014 <TIM_Base_SetConfig+0x13c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d108      	bne.n	8008f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a35      	ldr	r2, [pc, #212]	@ (8009004 <TIM_Base_SetConfig+0x12c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d02b      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f38:	d027      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a32      	ldr	r2, [pc, #200]	@ (8009008 <TIM_Base_SetConfig+0x130>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d023      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a31      	ldr	r2, [pc, #196]	@ (800900c <TIM_Base_SetConfig+0x134>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d01f      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a30      	ldr	r2, [pc, #192]	@ (8009010 <TIM_Base_SetConfig+0x138>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d01b      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a2f      	ldr	r2, [pc, #188]	@ (8009014 <TIM_Base_SetConfig+0x13c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d017      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8009018 <TIM_Base_SetConfig+0x140>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d013      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a2d      	ldr	r2, [pc, #180]	@ (800901c <TIM_Base_SetConfig+0x144>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00f      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8009020 <TIM_Base_SetConfig+0x148>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d00b      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a2b      	ldr	r2, [pc, #172]	@ (8009024 <TIM_Base_SetConfig+0x14c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d007      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8009028 <TIM_Base_SetConfig+0x150>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d003      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a29      	ldr	r2, [pc, #164]	@ (800902c <TIM_Base_SetConfig+0x154>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d108      	bne.n	8008f9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a10      	ldr	r2, [pc, #64]	@ (8009004 <TIM_Base_SetConfig+0x12c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d003      	beq.n	8008fd0 <TIM_Base_SetConfig+0xf8>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a12      	ldr	r2, [pc, #72]	@ (8009014 <TIM_Base_SetConfig+0x13c>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d103      	bne.n	8008fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	691a      	ldr	r2, [r3, #16]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d105      	bne.n	8008ff6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f023 0201 	bic.w	r2, r3, #1
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	611a      	str	r2, [r3, #16]
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40010000 	.word	0x40010000
 8009008:	40000400 	.word	0x40000400
 800900c:	40000800 	.word	0x40000800
 8009010:	40000c00 	.word	0x40000c00
 8009014:	40010400 	.word	0x40010400
 8009018:	40014000 	.word	0x40014000
 800901c:	40014400 	.word	0x40014400
 8009020:	40014800 	.word	0x40014800
 8009024:	40001800 	.word	0x40001800
 8009028:	40001c00 	.word	0x40001c00
 800902c:	40002000 	.word	0x40002000

08009030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	f023 0201 	bic.w	r2, r3, #1
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800905e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 0303 	bic.w	r3, r3, #3
 8009066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f023 0302 	bic.w	r3, r3, #2
 8009078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	4313      	orrs	r3, r2
 8009082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a20      	ldr	r2, [pc, #128]	@ (8009108 <TIM_OC1_SetConfig+0xd8>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d003      	beq.n	8009094 <TIM_OC1_SetConfig+0x64>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a1f      	ldr	r2, [pc, #124]	@ (800910c <TIM_OC1_SetConfig+0xdc>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d10c      	bne.n	80090ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f023 0308 	bic.w	r3, r3, #8
 800909a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f023 0304 	bic.w	r3, r3, #4
 80090ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a15      	ldr	r2, [pc, #84]	@ (8009108 <TIM_OC1_SetConfig+0xd8>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d003      	beq.n	80090be <TIM_OC1_SetConfig+0x8e>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a14      	ldr	r2, [pc, #80]	@ (800910c <TIM_OC1_SetConfig+0xdc>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d111      	bne.n	80090e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4313      	orrs	r3, r2
 80090e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	621a      	str	r2, [r3, #32]
}
 80090fc:	bf00      	nop
 80090fe:	371c      	adds	r7, #28
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	40010000 	.word	0x40010000
 800910c:	40010400 	.word	0x40010400

08009110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	f023 0210 	bic.w	r2, r3, #16
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800913e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	4313      	orrs	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f023 0320 	bic.w	r3, r3, #32
 800915a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a22      	ldr	r2, [pc, #136]	@ (80091f4 <TIM_OC2_SetConfig+0xe4>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d003      	beq.n	8009178 <TIM_OC2_SetConfig+0x68>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a21      	ldr	r2, [pc, #132]	@ (80091f8 <TIM_OC2_SetConfig+0xe8>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d10d      	bne.n	8009194 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800917e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	011b      	lsls	r3, r3, #4
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009192:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a17      	ldr	r2, [pc, #92]	@ (80091f4 <TIM_OC2_SetConfig+0xe4>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d003      	beq.n	80091a4 <TIM_OC2_SetConfig+0x94>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a16      	ldr	r2, [pc, #88]	@ (80091f8 <TIM_OC2_SetConfig+0xe8>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d113      	bne.n	80091cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	4313      	orrs	r3, r2
 80091be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	621a      	str	r2, [r3, #32]
}
 80091e6:	bf00      	nop
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	40010000 	.word	0x40010000
 80091f8:	40010400 	.word	0x40010400

080091fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b087      	sub	sp, #28
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800922a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f023 0303 	bic.w	r3, r3, #3
 8009232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	4313      	orrs	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	021b      	lsls	r3, r3, #8
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a21      	ldr	r2, [pc, #132]	@ (80092dc <TIM_OC3_SetConfig+0xe0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d003      	beq.n	8009262 <TIM_OC3_SetConfig+0x66>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a20      	ldr	r2, [pc, #128]	@ (80092e0 <TIM_OC3_SetConfig+0xe4>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d10d      	bne.n	800927e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	021b      	lsls	r3, r3, #8
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	4313      	orrs	r3, r2
 8009274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800927c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a16      	ldr	r2, [pc, #88]	@ (80092dc <TIM_OC3_SetConfig+0xe0>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d003      	beq.n	800928e <TIM_OC3_SetConfig+0x92>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a15      	ldr	r2, [pc, #84]	@ (80092e0 <TIM_OC3_SetConfig+0xe4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d113      	bne.n	80092b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800929c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	621a      	str	r2, [r3, #32]
}
 80092d0:	bf00      	nop
 80092d2:	371c      	adds	r7, #28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	40010000 	.word	0x40010000
 80092e0:	40010400 	.word	0x40010400

080092e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800931a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	4313      	orrs	r3, r2
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800932e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	031b      	lsls	r3, r3, #12
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	4313      	orrs	r3, r2
 800933a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a12      	ldr	r2, [pc, #72]	@ (8009388 <TIM_OC4_SetConfig+0xa4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_OC4_SetConfig+0x68>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a11      	ldr	r2, [pc, #68]	@ (800938c <TIM_OC4_SetConfig+0xa8>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d109      	bne.n	8009360 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	019b      	lsls	r3, r3, #6
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4313      	orrs	r3, r2
 800935e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	621a      	str	r2, [r3, #32]
}
 800937a:	bf00      	nop
 800937c:	371c      	adds	r7, #28
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	40010000 	.word	0x40010000
 800938c:	40010400 	.word	0x40010400

08009390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	f023 0201 	bic.w	r2, r3, #1
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80093ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	011b      	lsls	r3, r3, #4
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f023 030a 	bic.w	r3, r3, #10
 80093cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	621a      	str	r2, [r3, #32]
}
 80093e2:	bf00      	nop
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b087      	sub	sp, #28
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	f023 0210 	bic.w	r2, r3, #16
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	031b      	lsls	r3, r3, #12
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	4313      	orrs	r3, r2
 8009422:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800942a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	4313      	orrs	r3, r2
 8009434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	621a      	str	r2, [r3, #32]
}
 8009442:	bf00      	nop
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4313      	orrs	r3, r2
 800946c:	f043 0307 	orr.w	r3, r3, #7
 8009470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	609a      	str	r2, [r3, #8]
}
 8009478:	bf00      	nop
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800949e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	021a      	lsls	r2, r3, #8
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	431a      	orrs	r2, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	609a      	str	r2, [r3, #8]
}
 80094b8:	bf00      	nop
 80094ba:	371c      	adds	r7, #28
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f003 031f 	and.w	r3, r3, #31
 80094d6:	2201      	movs	r2, #1
 80094d8:	fa02 f303 	lsl.w	r3, r2, r3
 80094dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a1a      	ldr	r2, [r3, #32]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	43db      	mvns	r3, r3
 80094e6:	401a      	ands	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a1a      	ldr	r2, [r3, #32]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f003 031f 	and.w	r3, r3, #31
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	fa01 f303 	lsl.w	r3, r1, r3
 80094fc:	431a      	orrs	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	621a      	str	r2, [r3, #32]
}
 8009502:	bf00      	nop
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
	...

08009510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009524:	2302      	movs	r3, #2
 8009526:	e05a      	b.n	80095de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2202      	movs	r2, #2
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800954e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a21      	ldr	r2, [pc, #132]	@ (80095ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d022      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009574:	d01d      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a1d      	ldr	r2, [pc, #116]	@ (80095f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d018      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a1b      	ldr	r2, [pc, #108]	@ (80095f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d013      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a1a      	ldr	r2, [pc, #104]	@ (80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00e      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a18      	ldr	r2, [pc, #96]	@ (80095fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d009      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a17      	ldr	r2, [pc, #92]	@ (8009600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d004      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a15      	ldr	r2, [pc, #84]	@ (8009604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d10c      	bne.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	40010000 	.word	0x40010000
 80095f0:	40000400 	.word	0x40000400
 80095f4:	40000800 	.word	0x40000800
 80095f8:	40000c00 	.word	0x40000c00
 80095fc:	40010400 	.word	0x40010400
 8009600:	40014000 	.word	0x40014000
 8009604:	40001800 	.word	0x40001800

08009608 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009620:	2302      	movs	r3, #2
 8009622:	e03d      	b.n	80096a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	4313      	orrs	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	4313      	orrs	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4313      	orrs	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	4313      	orrs	r3, r2
 8009670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	4313      	orrs	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	4313      	orrs	r3, r2
 800968c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e042      	b.n	800976c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7f8 fe8e 	bl	800241c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2224      	movs	r2, #36	@ 0x24
 8009704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f973 	bl	8009a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691a      	ldr	r2, [r3, #16]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800972c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695a      	ldr	r2, [r3, #20]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800973c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68da      	ldr	r2, [r3, #12]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800974c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2220      	movs	r2, #32
 8009758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2220      	movs	r2, #32
 8009760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08a      	sub	sp, #40	@ 0x28
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	4613      	mov	r3, r2
 8009782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009784:	2300      	movs	r3, #0
 8009786:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b20      	cmp	r3, #32
 8009792:	d175      	bne.n	8009880 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <HAL_UART_Transmit+0x2c>
 800979a:	88fb      	ldrh	r3, [r7, #6]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e06e      	b.n	8009882 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2221      	movs	r2, #33	@ 0x21
 80097ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097b2:	f7f9 f8e9 	bl	8002988 <HAL_GetTick>
 80097b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	88fa      	ldrh	r2, [r7, #6]
 80097bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	88fa      	ldrh	r2, [r7, #6]
 80097c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097cc:	d108      	bne.n	80097e0 <HAL_UART_Transmit+0x6c>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	e003      	b.n	80097e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097e4:	2300      	movs	r3, #0
 80097e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097e8:	e02e      	b.n	8009848 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2200      	movs	r2, #0
 80097f2:	2180      	movs	r1, #128	@ 0x80
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f848 	bl	800988a <UART_WaitOnFlagUntilTimeout>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d005      	beq.n	800980c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2220      	movs	r2, #32
 8009804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e03a      	b.n	8009882 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	3302      	adds	r3, #2
 8009826:	61bb      	str	r3, [r7, #24]
 8009828:	e007      	b.n	800983a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	3301      	adds	r3, #1
 8009838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800983e:	b29b      	uxth	r3, r3
 8009840:	3b01      	subs	r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800984c:	b29b      	uxth	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1cb      	bne.n	80097ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2200      	movs	r2, #0
 800985a:	2140      	movs	r1, #64	@ 0x40
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f814 	bl	800988a <UART_WaitOnFlagUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2220      	movs	r2, #32
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e006      	b.n	8009882 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	e000      	b.n	8009882 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009880:	2302      	movs	r3, #2
  }
}
 8009882:	4618      	mov	r0, r3
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b086      	sub	sp, #24
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	603b      	str	r3, [r7, #0]
 8009896:	4613      	mov	r3, r2
 8009898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800989a:	e03b      	b.n	8009914 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a2:	d037      	beq.n	8009914 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098a4:	f7f9 f870 	bl	8002988 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	6a3a      	ldr	r2, [r7, #32]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d302      	bcc.n	80098ba <UART_WaitOnFlagUntilTimeout+0x30>
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e03a      	b.n	8009934 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f003 0304 	and.w	r3, r3, #4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d023      	beq.n	8009914 <UART_WaitOnFlagUntilTimeout+0x8a>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2b80      	cmp	r3, #128	@ 0x80
 80098d0:	d020      	beq.n	8009914 <UART_WaitOnFlagUntilTimeout+0x8a>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b40      	cmp	r3, #64	@ 0x40
 80098d6:	d01d      	beq.n	8009914 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0308 	and.w	r3, r3, #8
 80098e2:	2b08      	cmp	r3, #8
 80098e4:	d116      	bne.n	8009914 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	617b      	str	r3, [r7, #20]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	617b      	str	r3, [r7, #20]
 80098fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f81d 	bl	800993c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2208      	movs	r2, #8
 8009906:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e00f      	b.n	8009934 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	4013      	ands	r3, r2
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	429a      	cmp	r2, r3
 8009922:	bf0c      	ite	eq
 8009924:	2301      	moveq	r3, #1
 8009926:	2300      	movne	r3, #0
 8009928:	b2db      	uxtb	r3, r3
 800992a:	461a      	mov	r2, r3
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	429a      	cmp	r2, r3
 8009930:	d0b4      	beq.n	800989c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800993c:	b480      	push	{r7}
 800993e:	b095      	sub	sp, #84	@ 0x54
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800995a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	330c      	adds	r3, #12
 8009962:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009964:	643a      	str	r2, [r7, #64]	@ 0x40
 8009966:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800996a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e5      	bne.n	8009944 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3314      	adds	r3, #20
 800997e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	61fb      	str	r3, [r7, #28]
   return(result);
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3314      	adds	r3, #20
 8009996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009998:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800999a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800999e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e5      	bne.n	8009978 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d119      	bne.n	80099e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	330c      	adds	r3, #12
 80099ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f023 0310 	bic.w	r3, r3, #16
 80099ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	330c      	adds	r3, #12
 80099d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099d4:	61ba      	str	r2, [r7, #24]
 80099d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6979      	ldr	r1, [r7, #20]
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	613b      	str	r3, [r7, #16]
   return(result);
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e5      	bne.n	80099b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80099f6:	bf00      	nop
 80099f8:	3754      	adds	r7, #84	@ 0x54
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
	...

08009a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a08:	b0c0      	sub	sp, #256	@ 0x100
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a20:	68d9      	ldr	r1, [r3, #12]
 8009a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	ea40 0301 	orr.w	r3, r0, r1
 8009a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a32:	689a      	ldr	r2, [r3, #8]
 8009a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	431a      	orrs	r2, r3
 8009a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009a5c:	f021 010c 	bic.w	r1, r1, #12
 8009a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a6a:	430b      	orrs	r3, r1
 8009a6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a7e:	6999      	ldr	r1, [r3, #24]
 8009a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	ea40 0301 	orr.w	r3, r0, r1
 8009a8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	4b8f      	ldr	r3, [pc, #572]	@ (8009cd0 <UART_SetConfig+0x2cc>)
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d005      	beq.n	8009aa4 <UART_SetConfig+0xa0>
 8009a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8009cd4 <UART_SetConfig+0x2d0>)
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d104      	bne.n	8009aae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009aa4:	f7fe fa8a 	bl	8007fbc <HAL_RCC_GetPCLK2Freq>
 8009aa8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009aac:	e003      	b.n	8009ab6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009aae:	f7fe fa71 	bl	8007f94 <HAL_RCC_GetPCLK1Freq>
 8009ab2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ac0:	f040 810c 	bne.w	8009cdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ace:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009ad2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009ad6:	4622      	mov	r2, r4
 8009ad8:	462b      	mov	r3, r5
 8009ada:	1891      	adds	r1, r2, r2
 8009adc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009ade:	415b      	adcs	r3, r3
 8009ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ae2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	eb12 0801 	adds.w	r8, r2, r1
 8009aec:	4629      	mov	r1, r5
 8009aee:	eb43 0901 	adc.w	r9, r3, r1
 8009af2:	f04f 0200 	mov.w	r2, #0
 8009af6:	f04f 0300 	mov.w	r3, #0
 8009afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b06:	4690      	mov	r8, r2
 8009b08:	4699      	mov	r9, r3
 8009b0a:	4623      	mov	r3, r4
 8009b0c:	eb18 0303 	adds.w	r3, r8, r3
 8009b10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b14:	462b      	mov	r3, r5
 8009b16:	eb49 0303 	adc.w	r3, r9, r3
 8009b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b32:	460b      	mov	r3, r1
 8009b34:	18db      	adds	r3, r3, r3
 8009b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b38:	4613      	mov	r3, r2
 8009b3a:	eb42 0303 	adc.w	r3, r2, r3
 8009b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009b44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009b48:	f7f7 f88e 	bl	8000c68 <__aeabi_uldivmod>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4b61      	ldr	r3, [pc, #388]	@ (8009cd8 <UART_SetConfig+0x2d4>)
 8009b52:	fba3 2302 	umull	r2, r3, r3, r2
 8009b56:	095b      	lsrs	r3, r3, #5
 8009b58:	011c      	lsls	r4, r3, #4
 8009b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009b68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009b6c:	4642      	mov	r2, r8
 8009b6e:	464b      	mov	r3, r9
 8009b70:	1891      	adds	r1, r2, r2
 8009b72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009b74:	415b      	adcs	r3, r3
 8009b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009b7c:	4641      	mov	r1, r8
 8009b7e:	eb12 0a01 	adds.w	sl, r2, r1
 8009b82:	4649      	mov	r1, r9
 8009b84:	eb43 0b01 	adc.w	fp, r3, r1
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	f04f 0300 	mov.w	r3, #0
 8009b90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b9c:	4692      	mov	sl, r2
 8009b9e:	469b      	mov	fp, r3
 8009ba0:	4643      	mov	r3, r8
 8009ba2:	eb1a 0303 	adds.w	r3, sl, r3
 8009ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009baa:	464b      	mov	r3, r9
 8009bac:	eb4b 0303 	adc.w	r3, fp, r3
 8009bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009bc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	18db      	adds	r3, r3, r3
 8009bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bce:	4613      	mov	r3, r2
 8009bd0:	eb42 0303 	adc.w	r3, r2, r3
 8009bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009bda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009bde:	f7f7 f843 	bl	8000c68 <__aeabi_uldivmod>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4611      	mov	r1, r2
 8009be8:	4b3b      	ldr	r3, [pc, #236]	@ (8009cd8 <UART_SetConfig+0x2d4>)
 8009bea:	fba3 2301 	umull	r2, r3, r3, r1
 8009bee:	095b      	lsrs	r3, r3, #5
 8009bf0:	2264      	movs	r2, #100	@ 0x64
 8009bf2:	fb02 f303 	mul.w	r3, r2, r3
 8009bf6:	1acb      	subs	r3, r1, r3
 8009bf8:	00db      	lsls	r3, r3, #3
 8009bfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009bfe:	4b36      	ldr	r3, [pc, #216]	@ (8009cd8 <UART_SetConfig+0x2d4>)
 8009c00:	fba3 2302 	umull	r2, r3, r3, r2
 8009c04:	095b      	lsrs	r3, r3, #5
 8009c06:	005b      	lsls	r3, r3, #1
 8009c08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009c0c:	441c      	add	r4, r3
 8009c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c12:	2200      	movs	r2, #0
 8009c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009c1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009c20:	4642      	mov	r2, r8
 8009c22:	464b      	mov	r3, r9
 8009c24:	1891      	adds	r1, r2, r2
 8009c26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009c28:	415b      	adcs	r3, r3
 8009c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009c30:	4641      	mov	r1, r8
 8009c32:	1851      	adds	r1, r2, r1
 8009c34:	6339      	str	r1, [r7, #48]	@ 0x30
 8009c36:	4649      	mov	r1, r9
 8009c38:	414b      	adcs	r3, r1
 8009c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c3c:	f04f 0200 	mov.w	r2, #0
 8009c40:	f04f 0300 	mov.w	r3, #0
 8009c44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009c48:	4659      	mov	r1, fp
 8009c4a:	00cb      	lsls	r3, r1, #3
 8009c4c:	4651      	mov	r1, sl
 8009c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c52:	4651      	mov	r1, sl
 8009c54:	00ca      	lsls	r2, r1, #3
 8009c56:	4610      	mov	r0, r2
 8009c58:	4619      	mov	r1, r3
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	4642      	mov	r2, r8
 8009c5e:	189b      	adds	r3, r3, r2
 8009c60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c64:	464b      	mov	r3, r9
 8009c66:	460a      	mov	r2, r1
 8009c68:	eb42 0303 	adc.w	r3, r2, r3
 8009c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c84:	460b      	mov	r3, r1
 8009c86:	18db      	adds	r3, r3, r3
 8009c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	eb42 0303 	adc.w	r3, r2, r3
 8009c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009c9a:	f7f6 ffe5 	bl	8000c68 <__aeabi_uldivmod>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd8 <UART_SetConfig+0x2d4>)
 8009ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ca8:	095b      	lsrs	r3, r3, #5
 8009caa:	2164      	movs	r1, #100	@ 0x64
 8009cac:	fb01 f303 	mul.w	r3, r1, r3
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	3332      	adds	r3, #50	@ 0x32
 8009cb6:	4a08      	ldr	r2, [pc, #32]	@ (8009cd8 <UART_SetConfig+0x2d4>)
 8009cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cbc:	095b      	lsrs	r3, r3, #5
 8009cbe:	f003 0207 	and.w	r2, r3, #7
 8009cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4422      	add	r2, r4
 8009cca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ccc:	e106      	b.n	8009edc <UART_SetConfig+0x4d8>
 8009cce:	bf00      	nop
 8009cd0:	40011000 	.word	0x40011000
 8009cd4:	40011400 	.word	0x40011400
 8009cd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ce6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009cea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009cee:	4642      	mov	r2, r8
 8009cf0:	464b      	mov	r3, r9
 8009cf2:	1891      	adds	r1, r2, r2
 8009cf4:	6239      	str	r1, [r7, #32]
 8009cf6:	415b      	adcs	r3, r3
 8009cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009cfe:	4641      	mov	r1, r8
 8009d00:	1854      	adds	r4, r2, r1
 8009d02:	4649      	mov	r1, r9
 8009d04:	eb43 0501 	adc.w	r5, r3, r1
 8009d08:	f04f 0200 	mov.w	r2, #0
 8009d0c:	f04f 0300 	mov.w	r3, #0
 8009d10:	00eb      	lsls	r3, r5, #3
 8009d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d16:	00e2      	lsls	r2, r4, #3
 8009d18:	4614      	mov	r4, r2
 8009d1a:	461d      	mov	r5, r3
 8009d1c:	4643      	mov	r3, r8
 8009d1e:	18e3      	adds	r3, r4, r3
 8009d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d24:	464b      	mov	r3, r9
 8009d26:	eb45 0303 	adc.w	r3, r5, r3
 8009d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009d3e:	f04f 0200 	mov.w	r2, #0
 8009d42:	f04f 0300 	mov.w	r3, #0
 8009d46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	008b      	lsls	r3, r1, #2
 8009d4e:	4621      	mov	r1, r4
 8009d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d54:	4621      	mov	r1, r4
 8009d56:	008a      	lsls	r2, r1, #2
 8009d58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009d5c:	f7f6 ff84 	bl	8000c68 <__aeabi_uldivmod>
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4b60      	ldr	r3, [pc, #384]	@ (8009ee8 <UART_SetConfig+0x4e4>)
 8009d66:	fba3 2302 	umull	r2, r3, r3, r2
 8009d6a:	095b      	lsrs	r3, r3, #5
 8009d6c:	011c      	lsls	r4, r3, #4
 8009d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009d80:	4642      	mov	r2, r8
 8009d82:	464b      	mov	r3, r9
 8009d84:	1891      	adds	r1, r2, r2
 8009d86:	61b9      	str	r1, [r7, #24]
 8009d88:	415b      	adcs	r3, r3
 8009d8a:	61fb      	str	r3, [r7, #28]
 8009d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d90:	4641      	mov	r1, r8
 8009d92:	1851      	adds	r1, r2, r1
 8009d94:	6139      	str	r1, [r7, #16]
 8009d96:	4649      	mov	r1, r9
 8009d98:	414b      	adcs	r3, r1
 8009d9a:	617b      	str	r3, [r7, #20]
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	f04f 0300 	mov.w	r3, #0
 8009da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009da8:	4659      	mov	r1, fp
 8009daa:	00cb      	lsls	r3, r1, #3
 8009dac:	4651      	mov	r1, sl
 8009dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009db2:	4651      	mov	r1, sl
 8009db4:	00ca      	lsls	r2, r1, #3
 8009db6:	4610      	mov	r0, r2
 8009db8:	4619      	mov	r1, r3
 8009dba:	4603      	mov	r3, r0
 8009dbc:	4642      	mov	r2, r8
 8009dbe:	189b      	adds	r3, r3, r2
 8009dc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009dc4:	464b      	mov	r3, r9
 8009dc6:	460a      	mov	r2, r1
 8009dc8:	eb42 0303 	adc.w	r3, r2, r3
 8009dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009de8:	4649      	mov	r1, r9
 8009dea:	008b      	lsls	r3, r1, #2
 8009dec:	4641      	mov	r1, r8
 8009dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009df2:	4641      	mov	r1, r8
 8009df4:	008a      	lsls	r2, r1, #2
 8009df6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009dfa:	f7f6 ff35 	bl	8000c68 <__aeabi_uldivmod>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4611      	mov	r1, r2
 8009e04:	4b38      	ldr	r3, [pc, #224]	@ (8009ee8 <UART_SetConfig+0x4e4>)
 8009e06:	fba3 2301 	umull	r2, r3, r3, r1
 8009e0a:	095b      	lsrs	r3, r3, #5
 8009e0c:	2264      	movs	r2, #100	@ 0x64
 8009e0e:	fb02 f303 	mul.w	r3, r2, r3
 8009e12:	1acb      	subs	r3, r1, r3
 8009e14:	011b      	lsls	r3, r3, #4
 8009e16:	3332      	adds	r3, #50	@ 0x32
 8009e18:	4a33      	ldr	r2, [pc, #204]	@ (8009ee8 <UART_SetConfig+0x4e4>)
 8009e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1e:	095b      	lsrs	r3, r3, #5
 8009e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e24:	441c      	add	r4, r3
 8009e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009e30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009e34:	4642      	mov	r2, r8
 8009e36:	464b      	mov	r3, r9
 8009e38:	1891      	adds	r1, r2, r2
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	415b      	adcs	r3, r3
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e44:	4641      	mov	r1, r8
 8009e46:	1851      	adds	r1, r2, r1
 8009e48:	6039      	str	r1, [r7, #0]
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	414b      	adcs	r3, r1
 8009e4e:	607b      	str	r3, [r7, #4]
 8009e50:	f04f 0200 	mov.w	r2, #0
 8009e54:	f04f 0300 	mov.w	r3, #0
 8009e58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e5c:	4659      	mov	r1, fp
 8009e5e:	00cb      	lsls	r3, r1, #3
 8009e60:	4651      	mov	r1, sl
 8009e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e66:	4651      	mov	r1, sl
 8009e68:	00ca      	lsls	r2, r1, #3
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4603      	mov	r3, r0
 8009e70:	4642      	mov	r2, r8
 8009e72:	189b      	adds	r3, r3, r2
 8009e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e76:	464b      	mov	r3, r9
 8009e78:	460a      	mov	r2, r1
 8009e7a:	eb42 0303 	adc.w	r3, r2, r3
 8009e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	f04f 0300 	mov.w	r3, #0
 8009e94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009e98:	4649      	mov	r1, r9
 8009e9a:	008b      	lsls	r3, r1, #2
 8009e9c:	4641      	mov	r1, r8
 8009e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ea2:	4641      	mov	r1, r8
 8009ea4:	008a      	lsls	r2, r1, #2
 8009ea6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009eaa:	f7f6 fedd 	bl	8000c68 <__aeabi_uldivmod>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee8 <UART_SetConfig+0x4e4>)
 8009eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8009eb8:	095b      	lsrs	r3, r3, #5
 8009eba:	2164      	movs	r1, #100	@ 0x64
 8009ebc:	fb01 f303 	mul.w	r3, r1, r3
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	3332      	adds	r3, #50	@ 0x32
 8009ec6:	4a08      	ldr	r2, [pc, #32]	@ (8009ee8 <UART_SetConfig+0x4e4>)
 8009ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ecc:	095b      	lsrs	r3, r3, #5
 8009ece:	f003 020f 	and.w	r2, r3, #15
 8009ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4422      	add	r2, r4
 8009eda:	609a      	str	r2, [r3, #8]
}
 8009edc:	bf00      	nop
 8009ede:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ee8:	51eb851f 	.word	0x51eb851f

08009eec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009eec:	b084      	sub	sp, #16
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	f107 001c 	add.w	r0, r7, #28
 8009efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009efe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d123      	bne.n	8009f4e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d105      	bne.n	8009f42 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f9dc 	bl	800a300 <USB_CoreReset>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]
 8009f4c:	e01b      	b.n	8009f86 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f9d0 	bl	800a300 <USB_CoreReset>
 8009f60:	4603      	mov	r3, r0
 8009f62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009f64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d106      	bne.n	8009f7a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f78:	e005      	b.n	8009f86 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009f86:	7fbb      	ldrb	r3, [r7, #30]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d10b      	bne.n	8009fa4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f043 0206 	orr.w	r2, r3, #6
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f043 0220 	orr.w	r2, r3, #32
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fb0:	b004      	add	sp, #16
 8009fb2:	4770      	bx	lr

08009fb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	f043 0201 	orr.w	r2, r3, #1
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f023 0201 	bic.w	r2, r3, #1
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d115      	bne.n	800a046 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a026:	200a      	movs	r0, #10
 800a028:	f7f8 fcba 	bl	80029a0 <HAL_Delay>
      ms += 10U;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	330a      	adds	r3, #10
 800a030:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f956 	bl	800a2e4 <USB_GetMode>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d01e      	beq.n	800a07c <USB_SetCurrentMode+0x84>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2bc7      	cmp	r3, #199	@ 0xc7
 800a042:	d9f0      	bls.n	800a026 <USB_SetCurrentMode+0x2e>
 800a044:	e01a      	b.n	800a07c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a046:	78fb      	ldrb	r3, [r7, #3]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d115      	bne.n	800a078 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a058:	200a      	movs	r0, #10
 800a05a:	f7f8 fca1 	bl	80029a0 <HAL_Delay>
      ms += 10U;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	330a      	adds	r3, #10
 800a062:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f93d 	bl	800a2e4 <USB_GetMode>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d005      	beq.n	800a07c <USB_SetCurrentMode+0x84>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2bc7      	cmp	r3, #199	@ 0xc7
 800a074:	d9f0      	bls.n	800a058 <USB_SetCurrentMode+0x60>
 800a076:	e001      	b.n	800a07c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e005      	b.n	800a088 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2bc8      	cmp	r3, #200	@ 0xc8
 800a080:	d101      	bne.n	800a086 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e000      	b.n	800a088 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0aa:	d901      	bls.n	800a0b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e01b      	b.n	800a0e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	daf2      	bge.n	800a09e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	019b      	lsls	r3, r3, #6
 800a0c0:	f043 0220 	orr.w	r2, r3, #32
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0d4:	d901      	bls.n	800a0da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e006      	b.n	800a0e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	f003 0320 	and.w	r3, r3, #32
 800a0e2:	2b20      	cmp	r3, #32
 800a0e4:	d0f0      	beq.n	800a0c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3301      	adds	r3, #1
 800a104:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a10c:	d901      	bls.n	800a112 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e018      	b.n	800a144 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	daf2      	bge.n	800a100 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2210      	movs	r2, #16
 800a122:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3301      	adds	r3, #1
 800a128:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a130:	d901      	bls.n	800a136 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e006      	b.n	800a144 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f003 0310 	and.w	r3, r3, #16
 800a13e:	2b10      	cmp	r3, #16
 800a140:	d0f0      	beq.n	800a124 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a150:	b480      	push	{r7}
 800a152:	b089      	sub	sp, #36	@ 0x24
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	4611      	mov	r1, r2
 800a15c:	461a      	mov	r2, r3
 800a15e:	460b      	mov	r3, r1
 800a160:	71fb      	strb	r3, [r7, #7]
 800a162:	4613      	mov	r3, r2
 800a164:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a16e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a172:	2b00      	cmp	r3, #0
 800a174:	d123      	bne.n	800a1be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a176:	88bb      	ldrh	r3, [r7, #4]
 800a178:	3303      	adds	r3, #3
 800a17a:	089b      	lsrs	r3, r3, #2
 800a17c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a17e:	2300      	movs	r3, #0
 800a180:	61bb      	str	r3, [r7, #24]
 800a182:	e018      	b.n	800a1b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	031a      	lsls	r2, r3, #12
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	4413      	add	r3, r2
 800a18c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a190:	461a      	mov	r2, r3
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	3301      	adds	r3, #1
 800a19c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	61bb      	str	r3, [r7, #24]
 800a1b6:	69ba      	ldr	r2, [r7, #24]
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d3e2      	bcc.n	800a184 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3724      	adds	r7, #36	@ 0x24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b08b      	sub	sp, #44	@ 0x2c
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a1e2:	88fb      	ldrh	r3, [r7, #6]
 800a1e4:	089b      	lsrs	r3, r3, #2
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a1ea:	88fb      	ldrh	r3, [r7, #6]
 800a1ec:	f003 0303 	and.w	r3, r3, #3
 800a1f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	623b      	str	r3, [r7, #32]
 800a1f6:	e014      	b.n	800a222 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a202:	601a      	str	r2, [r3, #0]
    pDest++;
 800a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a206:	3301      	adds	r3, #1
 800a208:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20c:	3301      	adds	r3, #1
 800a20e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a212:	3301      	adds	r3, #1
 800a214:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a218:	3301      	adds	r3, #1
 800a21a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	3301      	adds	r3, #1
 800a220:	623b      	str	r3, [r7, #32]
 800a222:	6a3a      	ldr	r2, [r7, #32]
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	429a      	cmp	r2, r3
 800a228:	d3e6      	bcc.n	800a1f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a22a:	8bfb      	ldrh	r3, [r7, #30]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d01e      	beq.n	800a26e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a230:	2300      	movs	r3, #0
 800a232:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a23a:	461a      	mov	r2, r3
 800a23c:	f107 0310 	add.w	r3, r7, #16
 800a240:	6812      	ldr	r2, [r2, #0]
 800a242:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	00db      	lsls	r3, r3, #3
 800a24c:	fa22 f303 	lsr.w	r3, r2, r3
 800a250:	b2da      	uxtb	r2, r3
 800a252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a254:	701a      	strb	r2, [r3, #0]
      i++;
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	3301      	adds	r3, #1
 800a25a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25e:	3301      	adds	r3, #1
 800a260:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a262:	8bfb      	ldrh	r3, [r7, #30]
 800a264:	3b01      	subs	r3, #1
 800a266:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a268:	8bfb      	ldrh	r3, [r7, #30]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1ea      	bne.n	800a244 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a270:	4618      	mov	r0, r3
 800a272:	372c      	adds	r7, #44	@ 0x2c
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	4013      	ands	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a294:	68fb      	ldr	r3, [r7, #12]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b085      	sub	sp, #20
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a2b2:	78fb      	ldrb	r3, [r7, #3]
 800a2b4:	015a      	lsls	r2, r3, #5
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a2c2:	78fb      	ldrb	r3, [r7, #3]
 800a2c4:	015a      	lsls	r2, r3, #5
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2d6:	68bb      	ldr	r3, [r7, #8]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3714      	adds	r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	f003 0301 	and.w	r3, r3, #1
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a308:	2300      	movs	r3, #0
 800a30a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	3301      	adds	r3, #1
 800a310:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a318:	d901      	bls.n	800a31e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e01b      	b.n	800a356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	daf2      	bge.n	800a30c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	f043 0201 	orr.w	r2, r3, #1
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3301      	adds	r3, #1
 800a33a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a342:	d901      	bls.n	800a348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a344:	2303      	movs	r3, #3
 800a346:	e006      	b.n	800a356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	f003 0301 	and.w	r3, r3, #1
 800a350:	2b01      	cmp	r3, #1
 800a352:	d0f0      	beq.n	800a336 <USB_CoreReset+0x36>

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
	...

0800a364 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a364:	b084      	sub	sp, #16
 800a366:	b580      	push	{r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a384:	461a      	mov	r2, r3
 800a386:	2300      	movs	r3, #0
 800a388:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a38e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d119      	bne.n	800a3ee <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a3ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d10a      	bne.n	800a3d8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3d0:	f043 0304 	orr.w	r3, r3, #4
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	e014      	b.n	800a402 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3e6:	f023 0304 	bic.w	r3, r3, #4
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	e009      	b.n	800a402 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3fc:	f023 0304 	bic.w	r3, r3, #4
 800a400:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a402:	2110      	movs	r1, #16
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff fe43 	bl	800a090 <USB_FlushTxFifo>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff fe6d 	bl	800a0f4 <USB_FlushRxFifo>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a424:	2300      	movs	r3, #0
 800a426:	613b      	str	r3, [r7, #16]
 800a428:	e015      	b.n	800a456 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	015a      	lsls	r2, r3, #5
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4413      	add	r3, r2
 800a432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a436:	461a      	mov	r2, r3
 800a438:	f04f 33ff 	mov.w	r3, #4294967295
 800a43c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	015a      	lsls	r2, r3, #5
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4413      	add	r3, r2
 800a446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a44a:	461a      	mov	r2, r3
 800a44c:	2300      	movs	r3, #0
 800a44e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	3301      	adds	r3, #1
 800a454:	613b      	str	r3, [r7, #16]
 800a456:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a45a:	461a      	mov	r2, r3
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	4293      	cmp	r3, r2
 800a460:	d3e3      	bcc.n	800a42a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f04f 32ff 	mov.w	r2, #4294967295
 800a46e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a18      	ldr	r2, [pc, #96]	@ (800a4d4 <USB_HostInit+0x170>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d10b      	bne.n	800a490 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a47e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a15      	ldr	r2, [pc, #84]	@ (800a4d8 <USB_HostInit+0x174>)
 800a484:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a14      	ldr	r2, [pc, #80]	@ (800a4dc <USB_HostInit+0x178>)
 800a48a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800a48e:	e009      	b.n	800a4a4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2280      	movs	r2, #128	@ 0x80
 800a494:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a11      	ldr	r2, [pc, #68]	@ (800a4e0 <USB_HostInit+0x17c>)
 800a49a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a11      	ldr	r2, [pc, #68]	@ (800a4e4 <USB_HostInit+0x180>)
 800a4a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a4a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d105      	bne.n	800a4b8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	f043 0210 	orr.w	r2, r3, #16
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	699a      	ldr	r2, [r3, #24]
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e8 <USB_HostInit+0x184>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3718      	adds	r7, #24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4d0:	b004      	add	sp, #16
 800a4d2:	4770      	bx	lr
 800a4d4:	40040000 	.word	0x40040000
 800a4d8:	01000200 	.word	0x01000200
 800a4dc:	00e00300 	.word	0x00e00300
 800a4e0:	00600080 	.word	0x00600080
 800a4e4:	004000e0 	.word	0x004000e0
 800a4e8:	a3200008 	.word	0xa3200008

0800a4ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a50a:	f023 0303 	bic.w	r3, r3, #3
 800a50e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	68f9      	ldr	r1, [r7, #12]
 800a520:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a524:	4313      	orrs	r3, r2
 800a526:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d107      	bne.n	800a53e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a534:	461a      	mov	r2, r3
 800a536:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a53a:	6053      	str	r3, [r2, #4]
 800a53c:	e00c      	b.n	800a558 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a53e:	78fb      	ldrb	r3, [r7, #3]
 800a540:	2b02      	cmp	r3, #2
 800a542:	d107      	bne.n	800a554 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a54a:	461a      	mov	r2, r3
 800a54c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a550:	6053      	str	r3, [r2, #4]
 800a552:	e001      	b.n	800a558 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e000      	b.n	800a55a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a572:	2300      	movs	r3, #0
 800a574:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a586:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a594:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a596:	2064      	movs	r0, #100	@ 0x64
 800a598:	f7f8 fa02 	bl	80029a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a5a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5a8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a5aa:	200a      	movs	r0, #10
 800a5ac:	f7f8 f9f8 	bl	80029a0 <HAL_Delay>

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b085      	sub	sp, #20
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a5de:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d109      	bne.n	800a5fe <USB_DriveVbus+0x44>
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d106      	bne.n	800a5fe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a5f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a5fc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a608:	d109      	bne.n	800a61e <USB_DriveVbus+0x64>
 800a60a:	78fb      	ldrb	r3, [r7, #3]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d106      	bne.n	800a61e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a618:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a61c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	0c5b      	lsrs	r3, r3, #17
 800a64a:	f003 0303 	and.w	r3, r3, #3
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b085      	sub	sp, #20
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	b29b      	uxth	r3, r3
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	4608      	mov	r0, r1
 800a686:	4611      	mov	r1, r2
 800a688:	461a      	mov	r2, r3
 800a68a:	4603      	mov	r3, r0
 800a68c:	70fb      	strb	r3, [r7, #3]
 800a68e:	460b      	mov	r3, r1
 800a690:	70bb      	strb	r3, [r7, #2]
 800a692:	4613      	mov	r3, r2
 800a694:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a696:	2300      	movs	r3, #0
 800a698:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a6b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d87c      	bhi.n	800a7b4 <USB_HC_Init+0x138>
 800a6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c0 <USB_HC_Init+0x44>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a6d1 	.word	0x0800a6d1
 800a6c4:	0800a777 	.word	0x0800a777
 800a6c8:	0800a6d1 	.word	0x0800a6d1
 800a6cc:	0800a739 	.word	0x0800a739
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a6d0:	78fb      	ldrb	r3, [r7, #3]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6dc:	461a      	mov	r2, r3
 800a6de:	f240 439d 	movw	r3, #1181	@ 0x49d
 800a6e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a6e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	da10      	bge.n	800a70e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	015a      	lsls	r2, r3, #5
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	78fa      	ldrb	r2, [r7, #3]
 800a6fc:	0151      	lsls	r1, r2, #5
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	440a      	add	r2, r1
 800a702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a70a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a70c:	e055      	b.n	800a7ba <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a6f      	ldr	r2, [pc, #444]	@ (800a8d0 <USB_HC_Init+0x254>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d151      	bne.n	800a7ba <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a716:	78fb      	ldrb	r3, [r7, #3]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	78fa      	ldrb	r2, [r7, #3]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a730:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a734:	60d3      	str	r3, [r2, #12]
      break;
 800a736:	e040      	b.n	800a7ba <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a738:	78fb      	ldrb	r3, [r7, #3]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a744:	461a      	mov	r2, r3
 800a746:	f240 639d 	movw	r3, #1693	@ 0x69d
 800a74a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a74c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a750:	2b00      	cmp	r3, #0
 800a752:	da34      	bge.n	800a7be <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	78fa      	ldrb	r2, [r7, #3]
 800a764:	0151      	lsls	r1, r2, #5
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	440a      	add	r2, r1
 800a76a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a76e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a772:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a774:	e023      	b.n	800a7be <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a776:	78fb      	ldrb	r3, [r7, #3]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a782:	461a      	mov	r2, r3
 800a784:	f240 2325 	movw	r3, #549	@ 0x225
 800a788:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a78a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	da17      	bge.n	800a7c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a792:	78fb      	ldrb	r3, [r7, #3]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	78fa      	ldrb	r2, [r7, #3]
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a7ac:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800a7b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a7b2:	e006      	b.n	800a7c2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	77fb      	strb	r3, [r7, #31]
      break;
 800a7b8:	e004      	b.n	800a7c4 <USB_HC_Init+0x148>
      break;
 800a7ba:	bf00      	nop
 800a7bc:	e002      	b.n	800a7c4 <USB_HC_Init+0x148>
      break;
 800a7be:	bf00      	nop
 800a7c0:	e000      	b.n	800a7c4 <USB_HC_Init+0x148>
      break;
 800a7c2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a7d6:	78fb      	ldrb	r3, [r7, #3]
 800a7d8:	015a      	lsls	r2, r3, #5
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	4413      	add	r3, r2
 800a7de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	78fa      	ldrb	r2, [r7, #3]
 800a7e6:	0151      	lsls	r1, r2, #5
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	440a      	add	r2, r1
 800a7ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a7f0:	f043 0302 	orr.w	r3, r3, #2
 800a7f4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a7fc:	699a      	ldr	r2, [r3, #24]
 800a7fe:	78fb      	ldrb	r3, [r7, #3]
 800a800:	f003 030f 	and.w	r3, r3, #15
 800a804:	2101      	movs	r1, #1
 800a806:	fa01 f303 	lsl.w	r3, r1, r3
 800a80a:	6939      	ldr	r1, [r7, #16]
 800a80c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a810:	4313      	orrs	r3, r2
 800a812:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a820:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a824:	2b00      	cmp	r3, #0
 800a826:	da03      	bge.n	800a830 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a828:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a82c:	61bb      	str	r3, [r7, #24]
 800a82e:	e001      	b.n	800a834 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a830:	2300      	movs	r3, #0
 800a832:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7ff fef9 	bl	800a62c <USB_GetHostSpeed>
 800a83a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a83c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a840:	2b02      	cmp	r3, #2
 800a842:	d106      	bne.n	800a852 <USB_HC_Init+0x1d6>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b02      	cmp	r3, #2
 800a848:	d003      	beq.n	800a852 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a84a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a84e:	617b      	str	r3, [r7, #20]
 800a850:	e001      	b.n	800a856 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a856:	787b      	ldrb	r3, [r7, #1]
 800a858:	059b      	lsls	r3, r3, #22
 800a85a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a85e:	78bb      	ldrb	r3, [r7, #2]
 800a860:	02db      	lsls	r3, r3, #11
 800a862:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a866:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a868:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a86c:	049b      	lsls	r3, r3, #18
 800a86e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a872:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a874:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a876:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a87a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	431a      	orrs	r2, r3
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a884:	78fa      	ldrb	r2, [r7, #3]
 800a886:	0151      	lsls	r1, r2, #5
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	440a      	add	r2, r1
 800a88c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a890:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a894:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a896:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d003      	beq.n	800a8a6 <USB_HC_Init+0x22a>
 800a89e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d10f      	bne.n	800a8c6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a8a6:	78fb      	ldrb	r3, [r7, #3]
 800a8a8:	015a      	lsls	r2, r3, #5
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	78fa      	ldrb	r2, [r7, #3]
 800a8b6:	0151      	lsls	r1, r2, #5
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a8c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a8c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a8c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3720      	adds	r7, #32
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	40040000 	.word	0x40040000

0800a8d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08c      	sub	sp, #48	@ 0x30
 800a8d8:	af02      	add	r7, sp, #8
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	785b      	ldrb	r3, [r3, #1]
 800a8ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a8ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8f0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4a5d      	ldr	r2, [pc, #372]	@ (800aa6c <USB_HC_StartXfer+0x198>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d12f      	bne.n	800a95a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a8fa:	79fb      	ldrb	r3, [r7, #7]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d11c      	bne.n	800a93a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	7c9b      	ldrb	r3, [r3, #18]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <USB_HC_StartXfer+0x3c>
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	7c9b      	ldrb	r3, [r3, #18]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d124      	bne.n	800a95a <USB_HC_StartXfer+0x86>
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	799b      	ldrb	r3, [r3, #6]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d120      	bne.n	800a95a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	015a      	lsls	r2, r3, #5
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	4413      	add	r3, r2
 800a920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	69fa      	ldr	r2, [r7, #28]
 800a928:	0151      	lsls	r1, r2, #5
 800a92a:	6a3a      	ldr	r2, [r7, #32]
 800a92c:	440a      	add	r2, r1
 800a92e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a936:	60d3      	str	r3, [r2, #12]
 800a938:	e00f      	b.n	800a95a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	791b      	ldrb	r3, [r3, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10b      	bne.n	800a95a <USB_HC_StartXfer+0x86>
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	795b      	ldrb	r3, [r3, #5]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d107      	bne.n	800a95a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	785b      	ldrb	r3, [r3, #1]
 800a94e:	4619      	mov	r1, r3
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fb6b 	bl	800b02c <USB_DoPing>
        return HAL_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	e232      	b.n	800adc0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	799b      	ldrb	r3, [r3, #6]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d158      	bne.n	800aa14 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a962:	2301      	movs	r3, #1
 800a964:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	78db      	ldrb	r3, [r3, #3]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d007      	beq.n	800a97e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a96e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	8a92      	ldrh	r2, [r2, #20]
 800a974:	fb03 f202 	mul.w	r2, r3, r2
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	61da      	str	r2, [r3, #28]
 800a97c:	e07c      	b.n	800aa78 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	7c9b      	ldrb	r3, [r3, #18]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d130      	bne.n	800a9e8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	2bbc      	cmp	r3, #188	@ 0xbc
 800a98c:	d918      	bls.n	800a9c0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	8a9b      	ldrh	r3, [r3, #20]
 800a992:	461a      	mov	r2, r3
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	69da      	ldr	r2, [r3, #28]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d003      	beq.n	800a9b0 <USB_HC_StartXfer+0xdc>
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d103      	bne.n	800a9b8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	60da      	str	r2, [r3, #12]
 800a9b6:	e05f      	b.n	800aa78 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	60da      	str	r2, [r3, #12]
 800a9be:	e05b      	b.n	800aa78 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	6a1a      	ldr	r2, [r3, #32]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d007      	beq.n	800a9e0 <USB_HC_StartXfer+0x10c>
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d003      	beq.n	800a9e0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2204      	movs	r2, #4
 800a9dc:	60da      	str	r2, [r3, #12]
 800a9de:	e04b      	b.n	800aa78 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2203      	movs	r2, #3
 800a9e4:	60da      	str	r2, [r3, #12]
 800a9e6:	e047      	b.n	800aa78 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d10d      	bne.n	800aa0a <USB_HC_StartXfer+0x136>
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	8a92      	ldrh	r2, [r2, #20]
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d907      	bls.n	800aa0a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a9fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	8a92      	ldrh	r2, [r2, #20]
 800aa00:	fb03 f202 	mul.w	r2, r3, r2
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	61da      	str	r2, [r3, #28]
 800aa08:	e036      	b.n	800aa78 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	6a1a      	ldr	r2, [r3, #32]
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	61da      	str	r2, [r3, #28]
 800aa12:	e031      	b.n	800aa78 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d018      	beq.n	800aa4e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	8a92      	ldrh	r2, [r2, #20]
 800aa24:	4413      	add	r3, r2
 800aa26:	3b01      	subs	r3, #1
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	8a92      	ldrh	r2, [r2, #20]
 800aa2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa30:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800aa32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800aa34:	8b7b      	ldrh	r3, [r7, #26]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d90b      	bls.n	800aa52 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800aa3a:	8b7b      	ldrh	r3, [r7, #26]
 800aa3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aa3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	8a92      	ldrh	r2, [r2, #20]
 800aa44:	fb03 f202 	mul.w	r2, r3, r2
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	61da      	str	r2, [r3, #28]
 800aa4c:	e001      	b.n	800aa52 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	78db      	ldrb	r3, [r3, #3]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00a      	beq.n	800aa70 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aa5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	8a92      	ldrh	r2, [r2, #20]
 800aa60:	fb03 f202 	mul.w	r2, r3, r2
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	61da      	str	r2, [r3, #28]
 800aa68:	e006      	b.n	800aa78 <USB_HC_StartXfer+0x1a4>
 800aa6a:	bf00      	nop
 800aa6c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	6a1a      	ldr	r2, [r3, #32]
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aa80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aa82:	04d9      	lsls	r1, r3, #19
 800aa84:	4ba3      	ldr	r3, [pc, #652]	@ (800ad14 <USB_HC_StartXfer+0x440>)
 800aa86:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa88:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	7d9b      	ldrb	r3, [r3, #22]
 800aa8e:	075b      	lsls	r3, r3, #29
 800aa90:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa94:	69f9      	ldr	r1, [r7, #28]
 800aa96:	0148      	lsls	r0, r1, #5
 800aa98:	6a39      	ldr	r1, [r7, #32]
 800aa9a:	4401      	add	r1, r0
 800aa9c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aaa0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aaa2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800aaa4:	79fb      	ldrb	r3, [r7, #7]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d009      	beq.n	800aabe <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	6999      	ldr	r1, [r3, #24]
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	015a      	lsls	r2, r3, #5
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	4413      	add	r3, r2
 800aab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aaba:	460a      	mov	r2, r1
 800aabc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	bf0c      	ite	eq
 800aace:	2301      	moveq	r3, #1
 800aad0:	2300      	movne	r3, #0
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	015a      	lsls	r2, r3, #5
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	4413      	add	r3, r2
 800aade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	69fa      	ldr	r2, [r7, #28]
 800aae6:	0151      	lsls	r1, r2, #5
 800aae8:	6a3a      	ldr	r2, [r7, #32]
 800aaea:	440a      	add	r2, r1
 800aaec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aaf0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aaf4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	6a3b      	ldr	r3, [r7, #32]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	7e7b      	ldrb	r3, [r7, #25]
 800ab06:	075b      	lsls	r3, r3, #29
 800ab08:	69f9      	ldr	r1, [r7, #28]
 800ab0a:	0148      	lsls	r0, r1, #5
 800ab0c:	6a39      	ldr	r1, [r7, #32]
 800ab0e:	4401      	add	r1, r0
 800ab10:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800ab14:	4313      	orrs	r3, r2
 800ab16:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	799b      	ldrb	r3, [r3, #6]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	f040 80c3 	bne.w	800aca8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	7c5b      	ldrb	r3, [r3, #17]
 800ab26:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	69fa      	ldr	r2, [r7, #28]
 800ab30:	0151      	lsls	r1, r2, #5
 800ab32:	6a3a      	ldr	r2, [r7, #32]
 800ab34:	440a      	add	r2, r1
 800ab36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ab3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ab3e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	69fa      	ldr	r2, [r7, #28]
 800ab50:	0151      	lsls	r1, r2, #5
 800ab52:	6a3a      	ldr	r2, [r7, #32]
 800ab54:	440a      	add	r2, r1
 800ab56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ab5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	79db      	ldrb	r3, [r3, #7]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d123      	bne.n	800abb0 <USB_HC_StartXfer+0x2dc>
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	78db      	ldrb	r3, [r3, #3]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d11f      	bne.n	800abb0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	0151      	lsls	r1, r2, #5
 800ab82:	6a3a      	ldr	r2, [r7, #32]
 800ab84:	440a      	add	r2, r1
 800ab86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab8e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	69fa      	ldr	r2, [r7, #28]
 800aba0:	0151      	lsls	r1, r2, #5
 800aba2:	6a3a      	ldr	r2, [r7, #32]
 800aba4:	440a      	add	r2, r1
 800aba6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800abaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abae:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	7c9b      	ldrb	r3, [r3, #18]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d003      	beq.n	800abc0 <USB_HC_StartXfer+0x2ec>
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	7c9b      	ldrb	r3, [r3, #18]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d117      	bne.n	800abf0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d113      	bne.n	800abf0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	78db      	ldrb	r3, [r3, #3]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d10f      	bne.n	800abf0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	015a      	lsls	r2, r3, #5
 800abd4:	6a3b      	ldr	r3, [r7, #32]
 800abd6:	4413      	add	r3, r2
 800abd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	69fa      	ldr	r2, [r7, #28]
 800abe0:	0151      	lsls	r1, r2, #5
 800abe2:	6a3a      	ldr	r2, [r7, #32]
 800abe4:	440a      	add	r2, r1
 800abe6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800abea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800abee:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	7c9b      	ldrb	r3, [r3, #18]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d162      	bne.n	800acbe <USB_HC_StartXfer+0x3ea>
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	78db      	ldrb	r3, [r3, #3]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d15e      	bne.n	800acbe <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	3b01      	subs	r3, #1
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d858      	bhi.n	800acbc <USB_HC_StartXfer+0x3e8>
 800ac0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac10 <USB_HC_StartXfer+0x33c>)
 800ac0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac10:	0800ac21 	.word	0x0800ac21
 800ac14:	0800ac43 	.word	0x0800ac43
 800ac18:	0800ac65 	.word	0x0800ac65
 800ac1c:	0800ac87 	.word	0x0800ac87
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	015a      	lsls	r2, r3, #5
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	4413      	add	r3, r2
 800ac28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	69fa      	ldr	r2, [r7, #28]
 800ac30:	0151      	lsls	r1, r2, #5
 800ac32:	6a3a      	ldr	r2, [r7, #32]
 800ac34:	440a      	add	r2, r1
 800ac36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ac3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac3e:	6053      	str	r3, [r2, #4]
          break;
 800ac40:	e03d      	b.n	800acbe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	015a      	lsls	r2, r3, #5
 800ac46:	6a3b      	ldr	r3, [r7, #32]
 800ac48:	4413      	add	r3, r2
 800ac4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	69fa      	ldr	r2, [r7, #28]
 800ac52:	0151      	lsls	r1, r2, #5
 800ac54:	6a3a      	ldr	r2, [r7, #32]
 800ac56:	440a      	add	r2, r1
 800ac58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ac5c:	f043 030e 	orr.w	r3, r3, #14
 800ac60:	6053      	str	r3, [r2, #4]
          break;
 800ac62:	e02c      	b.n	800acbe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	015a      	lsls	r2, r3, #5
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	69fa      	ldr	r2, [r7, #28]
 800ac74:	0151      	lsls	r1, r2, #5
 800ac76:	6a3a      	ldr	r2, [r7, #32]
 800ac78:	440a      	add	r2, r1
 800ac7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ac7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ac82:	6053      	str	r3, [r2, #4]
          break;
 800ac84:	e01b      	b.n	800acbe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	69fa      	ldr	r2, [r7, #28]
 800ac96:	0151      	lsls	r1, r2, #5
 800ac98:	6a3a      	ldr	r2, [r7, #32]
 800ac9a:	440a      	add	r2, r1
 800ac9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aca0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aca4:	6053      	str	r3, [r2, #4]
          break;
 800aca6:	e00a      	b.n	800acbe <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	015a      	lsls	r2, r3, #5
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	4413      	add	r3, r2
 800acb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acb4:	461a      	mov	r2, r3
 800acb6:	2300      	movs	r3, #0
 800acb8:	6053      	str	r3, [r2, #4]
 800acba:	e000      	b.n	800acbe <USB_HC_StartXfer+0x3ea>
          break;
 800acbc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	015a      	lsls	r2, r3, #5
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	4413      	add	r3, r2
 800acc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800acd4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	78db      	ldrb	r3, [r3, #3]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d004      	beq.n	800ace8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ace4:	613b      	str	r3, [r7, #16]
 800ace6:	e003      	b.n	800acf0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800acee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800acf6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad04:	461a      	mov	r2, r3
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ad10:	2300      	movs	r3, #0
 800ad12:	e055      	b.n	800adc0 <USB_HC_StartXfer+0x4ec>
 800ad14:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	78db      	ldrb	r3, [r3, #3]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d14e      	bne.n	800adbe <USB_HC_StartXfer+0x4ea>
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d04a      	beq.n	800adbe <USB_HC_StartXfer+0x4ea>
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	79db      	ldrb	r3, [r3, #7]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d146      	bne.n	800adbe <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	7c9b      	ldrb	r3, [r3, #18]
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	d831      	bhi.n	800ad9c <USB_HC_StartXfer+0x4c8>
 800ad38:	a201      	add	r2, pc, #4	@ (adr r2, 800ad40 <USB_HC_StartXfer+0x46c>)
 800ad3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3e:	bf00      	nop
 800ad40:	0800ad51 	.word	0x0800ad51
 800ad44:	0800ad75 	.word	0x0800ad75
 800ad48:	0800ad51 	.word	0x0800ad51
 800ad4c:	0800ad75 	.word	0x0800ad75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	3303      	adds	r3, #3
 800ad56:	089b      	lsrs	r3, r3, #2
 800ad58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ad5a:	8afa      	ldrh	r2, [r7, #22]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d91c      	bls.n	800ada0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	f043 0220 	orr.w	r2, r3, #32
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	619a      	str	r2, [r3, #24]
        }
        break;
 800ad72:	e015      	b.n	800ada0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	6a1b      	ldr	r3, [r3, #32]
 800ad78:	3303      	adds	r3, #3
 800ad7a:	089b      	lsrs	r3, r3, #2
 800ad7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ad7e:	8afa      	ldrh	r2, [r7, #22]
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d90a      	bls.n	800ada4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	619a      	str	r2, [r3, #24]
        }
        break;
 800ad9a:	e003      	b.n	800ada4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800ad9c:	bf00      	nop
 800ad9e:	e002      	b.n	800ada6 <USB_HC_StartXfer+0x4d2>
        break;
 800ada0:	bf00      	nop
 800ada2:	e000      	b.n	800ada6 <USB_HC_StartXfer+0x4d2>
        break;
 800ada4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	6999      	ldr	r1, [r3, #24]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	785a      	ldrb	r2, [r3, #1]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	2000      	movs	r0, #0
 800adb6:	9000      	str	r0, [sp, #0]
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f7ff f9c9 	bl	800a150 <USB_WritePacket>
  }

  return HAL_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3728      	adds	r7, #40	@ 0x28
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	b29b      	uxth	r3, r3
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800adea:	b480      	push	{r7}
 800adec:	b089      	sub	sp, #36	@ 0x24
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	460b      	mov	r3, r1
 800adf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800adfa:	78fb      	ldrb	r3, [r7, #3]
 800adfc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	0c9b      	lsrs	r3, r3, #18
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	015a      	lsls	r2, r3, #5
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	4413      	add	r3, r2
 800ae20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	0fdb      	lsrs	r3, r3, #31
 800ae28:	f003 0301 	and.w	r3, r3, #1
 800ae2c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	015a      	lsls	r2, r3, #5
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	4413      	add	r3, r2
 800ae36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	0fdb      	lsrs	r3, r3, #31
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	f003 0320 	and.w	r3, r3, #32
 800ae4c:	2b20      	cmp	r3, #32
 800ae4e:	d10d      	bne.n	800ae6c <USB_HC_Halt+0x82>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <USB_HC_Halt+0x82>
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d005      	beq.n	800ae68 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d002      	beq.n	800ae68 <USB_HC_Halt+0x7e>
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d101      	bne.n	800ae6c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e0d8      	b.n	800b01e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <USB_HC_Halt+0x8e>
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d173      	bne.n	800af60 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	015a      	lsls	r2, r3, #5
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	4413      	add	r3, r2
 800ae80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	69ba      	ldr	r2, [r7, #24]
 800ae88:	0151      	lsls	r1, r2, #5
 800ae8a:	69fa      	ldr	r2, [r7, #28]
 800ae8c:	440a      	add	r2, r1
 800ae8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	f003 0320 	and.w	r3, r3, #32
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d14a      	bne.n	800af3a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d133      	bne.n	800af18 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	0151      	lsls	r1, r2, #5
 800aec2:	69fa      	ldr	r2, [r7, #28]
 800aec4:	440a      	add	r2, r1
 800aec6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aeca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aece:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	69ba      	ldr	r2, [r7, #24]
 800aee0:	0151      	lsls	r1, r2, #5
 800aee2:	69fa      	ldr	r2, [r7, #28]
 800aee4:	440a      	add	r2, r1
 800aee6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aeea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aeee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	3301      	adds	r3, #1
 800aef4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aefc:	d82e      	bhi.n	800af5c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	015a      	lsls	r2, r3, #5
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	4413      	add	r3, r2
 800af06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af14:	d0ec      	beq.n	800aef0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800af16:	e081      	b.n	800b01c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	69ba      	ldr	r2, [r7, #24]
 800af28:	0151      	lsls	r1, r2, #5
 800af2a:	69fa      	ldr	r2, [r7, #28]
 800af2c:	440a      	add	r2, r1
 800af2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af36:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800af38:	e070      	b.n	800b01c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	015a      	lsls	r2, r3, #5
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	4413      	add	r3, r2
 800af42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	69ba      	ldr	r2, [r7, #24]
 800af4a:	0151      	lsls	r1, r2, #5
 800af4c:	69fa      	ldr	r2, [r7, #28]
 800af4e:	440a      	add	r2, r1
 800af50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800af5a:	e05f      	b.n	800b01c <USB_HC_Halt+0x232>
            break;
 800af5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800af5e:	e05d      	b.n	800b01c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	4413      	add	r3, r2
 800af68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	69ba      	ldr	r2, [r7, #24]
 800af70:	0151      	lsls	r1, r2, #5
 800af72:	69fa      	ldr	r2, [r7, #28]
 800af74:	440a      	add	r2, r1
 800af76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d133      	bne.n	800aff8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	4413      	add	r3, r2
 800af98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	0151      	lsls	r1, r2, #5
 800afa2:	69fa      	ldr	r2, [r7, #28]
 800afa4:	440a      	add	r2, r1
 800afa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800afaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	015a      	lsls	r2, r3, #5
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	69ba      	ldr	r2, [r7, #24]
 800afc0:	0151      	lsls	r1, r2, #5
 800afc2:	69fa      	ldr	r2, [r7, #28]
 800afc4:	440a      	add	r2, r1
 800afc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800afca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800afce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	3301      	adds	r3, #1
 800afd4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800afdc:	d81d      	bhi.n	800b01a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	015a      	lsls	r2, r3, #5
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	4413      	add	r3, r2
 800afe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aff0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aff4:	d0ec      	beq.n	800afd0 <USB_HC_Halt+0x1e6>
 800aff6:	e011      	b.n	800b01c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	015a      	lsls	r2, r3, #5
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	4413      	add	r3, r2
 800b000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69ba      	ldr	r2, [r7, #24]
 800b008:	0151      	lsls	r1, r2, #5
 800b00a:	69fa      	ldr	r2, [r7, #28]
 800b00c:	440a      	add	r2, r1
 800b00e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b012:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	e000      	b.n	800b01c <USB_HC_Halt+0x232>
          break;
 800b01a:	bf00      	nop
    }
  }

  return HAL_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3724      	adds	r7, #36	@ 0x24
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
	...

0800b02c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b087      	sub	sp, #28
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b03c:	78fb      	ldrb	r3, [r7, #3]
 800b03e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b040:	2301      	movs	r3, #1
 800b042:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	04da      	lsls	r2, r3, #19
 800b048:	4b15      	ldr	r3, [pc, #84]	@ (800b0a0 <USB_DoPing+0x74>)
 800b04a:	4013      	ands	r3, r2
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	0151      	lsls	r1, r2, #5
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	440a      	add	r2, r1
 800b054:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b058:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b05c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	015a      	lsls	r2, r3, #5
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	4413      	add	r3, r2
 800b066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b074:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b07c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	015a      	lsls	r2, r3, #5
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	4413      	add	r3, r2
 800b086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b08a:	461a      	mov	r2, r3
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	371c      	adds	r7, #28
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	1ff80000 	.word	0x1ff80000

0800b0a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b088      	sub	sp, #32
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7fe ff8c 	bl	8009fd6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b0be:	2110      	movs	r1, #16
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7fe ffe5 	bl	800a090 <USB_FlushTxFifo>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff f80f 	bl	800a0f4 <USB_FlushRxFifo>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	61bb      	str	r3, [r7, #24]
 800b0e4:	e01f      	b.n	800b126 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b0fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b104:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b10c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	015a      	lsls	r2, r3, #5
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	4413      	add	r3, r2
 800b116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b11a:	461a      	mov	r2, r3
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	3301      	adds	r3, #1
 800b124:	61bb      	str	r3, [r7, #24]
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	2b0f      	cmp	r3, #15
 800b12a:	d9dc      	bls.n	800b0e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b12c:	2300      	movs	r3, #0
 800b12e:	61bb      	str	r3, [r7, #24]
 800b130:	e034      	b.n	800b19c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	015a      	lsls	r2, r3, #5
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	4413      	add	r3, r2
 800b13a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b148:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b150:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b158:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	015a      	lsls	r2, r3, #5
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	4413      	add	r3, r2
 800b162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b166:	461a      	mov	r2, r3
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3301      	adds	r3, #1
 800b170:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b178:	d80c      	bhi.n	800b194 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	4413      	add	r3, r2
 800b182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b18c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b190:	d0ec      	beq.n	800b16c <USB_StopHost+0xc8>
 800b192:	e000      	b.n	800b196 <USB_StopHost+0xf2>
        break;
 800b194:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	3301      	adds	r3, #1
 800b19a:	61bb      	str	r3, [r7, #24]
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	2b0f      	cmp	r3, #15
 800b1a0:	d9c7      	bls.n	800b132 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f7fe fefb 	bl	8009fb4 <USB_EnableGlobalInt>

  return ret;
 800b1be:	7ffb      	ldrb	r3, [r7, #31]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3720      	adds	r7, #32
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b1c8:	b590      	push	{r4, r7, lr}
 800b1ca:	b08b      	sub	sp, #44	@ 0x2c
 800b1cc:	af04      	add	r7, sp, #16
 800b1ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1da:	7919      	ldrb	r1, [r3, #4]
 800b1dc:	23ff      	movs	r3, #255	@ 0xff
 800b1de:	2201      	movs	r2, #1
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 ffc2 	bl	800c16a <USBH_FindInterface>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b1ea:	7dbb      	ldrb	r3, [r7, #22]
 800b1ec:	2bff      	cmp	r3, #255	@ 0xff
 800b1ee:	d002      	beq.n	800b1f6 <USBH_HID_InterfaceInit+0x2e>
 800b1f0:	7dbb      	ldrb	r3, [r7, #22]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d901      	bls.n	800b1fa <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b1f6:	2302      	movs	r3, #2
 800b1f8:	e122      	b.n	800b440 <USBH_HID_InterfaceInit+0x278>
  }

  status = USBH_SelectInterface(phost, interface);
 800b1fa:	7dbb      	ldrb	r3, [r7, #22]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 ff97 	bl	800c132 <USBH_SelectInterface>
 800b204:	4603      	mov	r3, r0
 800b206:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800b208:	7d7b      	ldrb	r3, [r7, #21]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 800b20e:	2302      	movs	r3, #2
 800b210:	e116      	b.n	800b440 <USBH_HID_InterfaceInit+0x278>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800b218:	2034      	movs	r0, #52	@ 0x34
 800b21a:	f005 f8ff 	bl	801041c <malloc>
 800b21e:	4603      	mov	r3, r0
 800b220:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d101      	bne.n	800b236 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 800b232:	2302      	movs	r3, #2
 800b234:	e104      	b.n	800b440 <USBH_HID_InterfaceInit+0x278>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800b236:	2234      	movs	r2, #52	@ 0x34
 800b238:	2100      	movs	r1, #0
 800b23a:	6938      	ldr	r0, [r7, #16]
 800b23c:	f005 ff57 	bl	80110ee <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	2207      	movs	r2, #7
 800b244:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800b246:	7dbb      	ldrb	r3, [r7, #22]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	211a      	movs	r1, #26
 800b24c:	fb01 f303 	mul.w	r3, r1, r3
 800b250:	4413      	add	r3, r2
 800b252:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d103      	bne.n	800b264 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	4a7a      	ldr	r2, [pc, #488]	@ (800b448 <USBH_HID_InterfaceInit+0x280>)
 800b260:	631a      	str	r2, [r3, #48]	@ 0x30
 800b262:	e010      	b.n	800b286 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800b264:	7dbb      	ldrb	r3, [r7, #22]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	211a      	movs	r1, #26
 800b26a:	fb01 f303 	mul.w	r3, r1, r3
 800b26e:	4413      	add	r3, r2
 800b270:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	2b02      	cmp	r3, #2
 800b278:	d103      	bne.n	800b282 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	4a73      	ldr	r2, [pc, #460]	@ (800b44c <USBH_HID_InterfaceInit+0x284>)
 800b27e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b280:	e001      	b.n	800b286 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 800b282:	2302      	movs	r3, #2
 800b284:	e0dc      	b.n	800b440 <USBH_HID_InterfaceInit+0x278>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2200      	movs	r2, #0
 800b28a:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	2200      	movs	r2, #0
 800b290:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b292:	7dbb      	ldrb	r3, [r7, #22]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	211a      	movs	r1, #26
 800b298:	fb01 f303 	mul.w	r3, r1, r3
 800b29c:	4413      	add	r3, r2
 800b29e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b2a2:	781a      	ldrb	r2, [r3, #0]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b2a8:	7dbb      	ldrb	r3, [r7, #22]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	211a      	movs	r1, #26
 800b2ae:	fb01 f303 	mul.w	r3, r1, r3
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b2b8:	881a      	ldrh	r2, [r3, #0]
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800b2be:	7dbb      	ldrb	r3, [r7, #22]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	211a      	movs	r1, #26
 800b2c4:	fb01 f303 	mul.w	r3, r1, r3
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f203 3352 	addw	r3, r3, #850	@ 0x352
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	8b9b      	ldrh	r3, [r3, #28]
 800b2da:	2b09      	cmp	r3, #9
 800b2dc:	d802      	bhi.n	800b2e4 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	220a      	movs	r2, #10
 800b2e2:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800b2e4:	7dbb      	ldrb	r3, [r7, #22]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	211a      	movs	r1, #26
 800b2ea:	fb01 f303 	mul.w	r3, r1, r3
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	bf28      	it	cs
 800b2fa:	2302      	movcs	r3, #2
 800b2fc:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800b2fe:	2300      	movs	r3, #0
 800b300:	75fb      	strb	r3, [r7, #23]
 800b302:	e097      	b.n	800b434 <USBH_HID_InterfaceInit+0x26c>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800b304:	7dbb      	ldrb	r3, [r7, #22]
 800b306:	7df9      	ldrb	r1, [r7, #23]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	3101      	adds	r1, #1
 800b30c:	00c9      	lsls	r1, r1, #3
 800b30e:	201a      	movs	r0, #26
 800b310:	fb00 f303 	mul.w	r3, r0, r3
 800b314:	440b      	add	r3, r1
 800b316:	4413      	add	r3, r2
 800b318:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	b25b      	sxtb	r3, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	da42      	bge.n	800b3aa <USBH_HID_InterfaceInit+0x1e2>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800b324:	7dbb      	ldrb	r3, [r7, #22]
 800b326:	7df9      	ldrb	r1, [r7, #23]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	3101      	adds	r1, #1
 800b32c:	00c9      	lsls	r1, r1, #3
 800b32e:	201a      	movs	r0, #26
 800b330:	fb00 f303 	mul.w	r3, r0, r3
 800b334:	440b      	add	r3, r1
 800b336:	4413      	add	r3, r2
 800b338:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b33c:	781a      	ldrb	r2, [r3, #0]
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	791b      	ldrb	r3, [r3, #4]
 800b346:	4619      	mov	r1, r3
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f002 fa78 	bl	800d83e <USBH_AllocPipe>
 800b34e:	4603      	mov	r3, r0
 800b350:	461a      	mov	r2, r3
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800b356:	7dbb      	ldrb	r3, [r7, #22]
 800b358:	7df9      	ldrb	r1, [r7, #23]
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	3101      	adds	r1, #1
 800b35e:	00c9      	lsls	r1, r1, #3
 800b360:	201a      	movs	r0, #26
 800b362:	fb00 f303 	mul.w	r3, r0, r3
 800b366:	440b      	add	r3, r1
 800b368:	4413      	add	r3, r2
 800b36a:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	7859      	ldrb	r1, [r3, #1]
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	7918      	ldrb	r0, [r3, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b386:	89ba      	ldrh	r2, [r7, #12]
 800b388:	9202      	str	r2, [sp, #8]
 800b38a:	2203      	movs	r2, #3
 800b38c:	9201      	str	r2, [sp, #4]
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	4623      	mov	r3, r4
 800b392:	4602      	mov	r2, r0
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f002 fa23 	bl	800d7e0 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	785b      	ldrb	r3, [r3, #1]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f002 fd32 	bl	800de0c <USBH_LL_SetToggle>
 800b3a8:	e041      	b.n	800b42e <USBH_HID_InterfaceInit+0x266>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800b3aa:	7dbb      	ldrb	r3, [r7, #22]
 800b3ac:	7df9      	ldrb	r1, [r7, #23]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	3101      	adds	r1, #1
 800b3b2:	00c9      	lsls	r1, r1, #3
 800b3b4:	201a      	movs	r0, #26
 800b3b6:	fb00 f303 	mul.w	r3, r0, r3
 800b3ba:	440b      	add	r3, r1
 800b3bc:	4413      	add	r3, r2
 800b3be:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b3c2:	781a      	ldrb	r2, [r3, #0]
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	78db      	ldrb	r3, [r3, #3]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f002 fa35 	bl	800d83e <USBH_AllocPipe>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800b3dc:	7dbb      	ldrb	r3, [r7, #22]
 800b3de:	7df9      	ldrb	r1, [r7, #23]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	3101      	adds	r1, #1
 800b3e4:	00c9      	lsls	r1, r1, #3
 800b3e6:	201a      	movs	r0, #26
 800b3e8:	fb00 f303 	mul.w	r3, r0, r3
 800b3ec:	440b      	add	r3, r1
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800b3f4:	881b      	ldrh	r3, [r3, #0]
 800b3f6:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	7819      	ldrb	r1, [r3, #0]
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	78d8      	ldrb	r0, [r3, #3]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b40c:	89ba      	ldrh	r2, [r7, #12]
 800b40e:	9202      	str	r2, [sp, #8]
 800b410:	2203      	movs	r2, #3
 800b412:	9201      	str	r2, [sp, #4]
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	4623      	mov	r3, r4
 800b418:	4602      	mov	r2, r0
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f002 f9e0 	bl	800d7e0 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2200      	movs	r2, #0
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f002 fcef 	bl	800de0c <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
 800b430:	3301      	adds	r3, #1
 800b432:	75fb      	strb	r3, [r7, #23]
 800b434:	7dfa      	ldrb	r2, [r7, #23]
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	429a      	cmp	r2, r3
 800b43a:	f4ff af63 	bcc.w	800b304 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	371c      	adds	r7, #28
 800b444:	46bd      	mov	sp, r7
 800b446:	bd90      	pop	{r4, r7, pc}
 800b448:	0800bb6d 	.word	0x0800bb6d
 800b44c:	0800bdbd 	.word	0x0800bdbd

0800b450 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b45e:	69db      	ldr	r3, [r3, #28]
 800b460:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	785b      	ldrb	r3, [r3, #1]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00e      	beq.n	800b488 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	785b      	ldrb	r3, [r3, #1]
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f002 f9d4 	bl	800d81e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	785b      	ldrb	r3, [r3, #1]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f002 f9ff 	bl	800d880 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00e      	beq.n	800b4ae <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f002 f9c1 	bl	800d81e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f002 f9ec 	bl	800d880 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00b      	beq.n	800b4d2 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f004 ffb2 	bl	801042c <free>
    phost->pActiveClass->pData = 0U;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	795b      	ldrb	r3, [r3, #5]
 800b4fa:	2b05      	cmp	r3, #5
 800b4fc:	d860      	bhi.n	800b5c0 <USBH_HID_ClassRequest+0xe4>
 800b4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b504 <USBH_HID_ClassRequest+0x28>)
 800b500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b504:	0800b51d 	.word	0x0800b51d
 800b508:	0800b5c1 	.word	0x0800b5c1
 800b50c:	0800b537 	.word	0x0800b537
 800b510:	0800b51d 	.word	0x0800b51d
 800b514:	0800b561 	.word	0x0800b561
 800b518:	0800b58b 	.word	0x0800b58b
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	331c      	adds	r3, #28
 800b526:	4619      	mov	r1, r3
 800b528:	4610      	mov	r0, r2
 800b52a:	f000 f9e1 	bl	800b8f0 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2202      	movs	r2, #2
 800b532:	715a      	strb	r2, [r3, #5]

      break;
 800b534:	e04b      	b.n	800b5ce <USBH_HID_ClassRequest+0xf2>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 f93e 	bl	800b7be <USBH_HID_GetHIDReportDescriptor>
 800b542:	4603      	mov	r3, r0
 800b544:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800b546:	7bbb      	ldrb	r3, [r7, #14]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d103      	bne.n	800b554 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	2204      	movs	r2, #4
 800b550:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800b552:	e037      	b.n	800b5c4 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800b554:	7bbb      	ldrb	r3, [r7, #14]
 800b556:	2b03      	cmp	r3, #3
 800b558:	d134      	bne.n	800b5c4 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 800b55a:	2302      	movs	r3, #2
 800b55c:	73fb      	strb	r3, [r7, #15]
      break;
 800b55e:	e031      	b.n	800b5c4 <USBH_HID_ClassRequest+0xe8>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800b560:	2200      	movs	r2, #0
 800b562:	2100      	movs	r1, #0
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f949 	bl	800b7fc <USBH_HID_SetIdle>
 800b56a:	4603      	mov	r3, r0
 800b56c:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d103      	bne.n	800b57c <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2205      	movs	r2, #5
 800b578:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800b57a:	e025      	b.n	800b5c8 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800b57c:	7bbb      	ldrb	r3, [r7, #14]
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d122      	bne.n	800b5c8 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2205      	movs	r2, #5
 800b586:	715a      	strb	r2, [r3, #5]
      break;
 800b588:	e01e      	b.n	800b5c8 <USBH_HID_ClassRequest+0xec>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800b58a:	2100      	movs	r1, #0
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f989 	bl	800b8a4 <USBH_HID_SetProtocol>
 800b592:	4603      	mov	r3, r0
 800b594:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10b      	bne.n	800b5b4 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b5a8:	2102      	movs	r1, #2
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	4798      	blx	r3
        status = USBH_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800b5b2:	e00b      	b.n	800b5cc <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800b5b4:	7bbb      	ldrb	r3, [r7, #14]
 800b5b6:	2b03      	cmp	r3, #3
 800b5b8:	d108      	bne.n	800b5cc <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 800b5ba:	2302      	movs	r3, #2
 800b5bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b5be:	e005      	b.n	800b5cc <USBH_HID_ClassRequest+0xf0>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800b5c0:	bf00      	nop
 800b5c2:	e004      	b.n	800b5ce <USBH_HID_ClassRequest+0xf2>
      break;
 800b5c4:	bf00      	nop
 800b5c6:	e002      	b.n	800b5ce <USBH_HID_ClassRequest+0xf2>
      break;
 800b5c8:	bf00      	nop
 800b5ca:	e000      	b.n	800b5ce <USBH_HID_ClassRequest+0xf2>
      break;
 800b5cc:	bf00      	nop
  }

  return status;
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b5ea:	69db      	ldr	r3, [r3, #28]
 800b5ec:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	789b      	ldrb	r3, [r3, #2]
 800b5f2:	2b06      	cmp	r3, #6
 800b5f4:	f200 80b8 	bhi.w	800b768 <USBH_HID_Process+0x190>
 800b5f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b600 <USBH_HID_Process+0x28>)
 800b5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fe:	bf00      	nop
 800b600:	0800b61d 	.word	0x0800b61d
 800b604:	0800b643 	.word	0x0800b643
 800b608:	0800b769 	.word	0x0800b769
 800b60c:	0800b769 	.word	0x0800b769
 800b610:	0800b6b3 	.word	0x0800b6b3
 800b614:	0800b69d 	.word	0x0800b69d
 800b618:	0800b6e1 	.word	0x0800b6e1
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	4798      	blx	r3
 800b624:	4603      	mov	r3, r0
 800b626:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d103      	bne.n	800b636 <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	2201      	movs	r2, #1
 800b632:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b634:	e09d      	b.n	800b772 <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	2207      	movs	r2, #7
 800b63a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800b63c:	2302      	movs	r3, #2
 800b63e:	75fb      	strb	r3, [r7, #23]
      break;
 800b640:	e097      	b.n	800b772 <USBH_HID_Process+0x19a>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	695a      	ldr	r2, [r3, #20]
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	8b1b      	ldrh	r3, [r3, #24]
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	4613      	mov	r3, r2
 800b650:	2200      	movs	r2, #0
 800b652:	2101      	movs	r1, #1
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f8f9 	bl	800b84c <USBH_HID_GetReport>
 800b65a:	4603      	mov	r3, r0
 800b65c:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800b65e:	7dfb      	ldrb	r3, [r7, #23]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d103      	bne.n	800b66c <USBH_HID_Process+0x94>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	2205      	movs	r2, #5
 800b668:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b66a:	e082      	b.n	800b772 <USBH_HID_Process+0x19a>
      else if (status == USBH_BUSY)
 800b66c:	7dfb      	ldrb	r3, [r7, #23]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d105      	bne.n	800b67e <USBH_HID_Process+0xa6>
        HID_Handle->state = USBH_HID_IDLE;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	2201      	movs	r2, #1
 800b676:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	75fb      	strb	r3, [r7, #23]
      break;
 800b67c:	e079      	b.n	800b772 <USBH_HID_Process+0x19a>
      else if (status == USBH_NOT_SUPPORTED)
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	2b03      	cmp	r3, #3
 800b682:	d105      	bne.n	800b690 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_SYNC;
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	2205      	movs	r2, #5
 800b688:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800b68a:	2300      	movs	r3, #0
 800b68c:	75fb      	strb	r3, [r7, #23]
      break;
 800b68e:	e070      	b.n	800b772 <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2207      	movs	r2, #7
 800b694:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800b696:	2302      	movs	r3, #2
 800b698:	75fb      	strb	r3, [r7, #23]
      break;
 800b69a:	e06a      	b.n	800b772 <USBH_HID_Process+0x19a>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d060      	beq.n	800b76c <USBH_HID_Process+0x194>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	2204      	movs	r2, #4
 800b6ae:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b6b0:	e05c      	b.n	800b76c <USBH_HID_Process+0x194>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	785b      	ldrb	r3, [r3, #1]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f002 f86e 	bl	800d7a2 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	2206      	movs	r2, #6
 800b6ca:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800b6de:	e048      	b.n	800b772 <USBH_HID_Process+0x19a>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	785b      	ldrb	r3, [r3, #1]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f002 fb66 	bl	800ddb8 <USBH_LL_GetURBState>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d124      	bne.n	800b73c <USBH_HID_Process+0x164>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	785b      	ldrb	r3, [r3, #1]
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f002 facb 	bl	800dc94 <USBH_LL_GetLastXferSize>
 800b6fe:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b706:	2b00      	cmp	r3, #0
 800b708:	d132      	bne.n	800b770 <USBH_HID_Process+0x198>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d02f      	beq.n	800b770 <USBH_HID_Process+0x198>
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d02b      	beq.n	800b770 <USBH_HID_Process+0x198>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	f103 0008 	add.w	r0, r3, #8
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	6959      	ldr	r1, [r3, #20]
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	8b1b      	ldrh	r3, [r3, #24]
 800b726:	461a      	mov	r2, r3
 800b728:	f000 f9cc 	bl	800bac4 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f002 fd39 	bl	800e1ac <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800b73a:	e019      	b.n	800b770 <USBH_HID_Process+0x198>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	785b      	ldrb	r3, [r3, #1]
 800b740:	4619      	mov	r1, r3
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f002 fb38 	bl	800ddb8 <USBH_LL_GetURBState>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b05      	cmp	r3, #5
 800b74c:	d110      	bne.n	800b770 <USBH_HID_Process+0x198>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	7e9b      	ldrb	r3, [r3, #26]
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f001 fae1 	bl	800cd1c <USBH_ClrFeature>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d107      	bne.n	800b770 <USBH_HID_Process+0x198>
            HID_Handle->state = USBH_HID_GET_DATA;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	2204      	movs	r2, #4
 800b764:	709a      	strb	r2, [r3, #2]
      break;
 800b766:	e003      	b.n	800b770 <USBH_HID_Process+0x198>

    default:
      break;
 800b768:	bf00      	nop
 800b76a:	e002      	b.n	800b772 <USBH_HID_Process+0x19a>
      break;
 800b76c:	bf00      	nop
 800b76e:	e000      	b.n	800b772 <USBH_HID_Process+0x19a>
      break;
 800b770:	bf00      	nop
  }

  return status;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b78a:	69db      	ldr	r3, [r3, #28]
 800b78c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	789b      	ldrb	r3, [r3, #2]
 800b792:	2b06      	cmp	r3, #6
 800b794:	d10c      	bne.n	800b7b0 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6a1b      	ldr	r3, [r3, #32]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	8b92      	ldrh	r2, [r2, #28]
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d302      	bcc.n	800b7b0 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2204      	movs	r2, #4
 800b7ae:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b086      	sub	sp, #24
 800b7c2:	af02      	add	r7, sp, #8
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b7ca:	887b      	ldrh	r3, [r7, #2]
 800b7cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7d0:	d901      	bls.n	800b7d6 <USBH_HID_GetHIDReportDescriptor+0x18>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e00e      	b.n	800b7f4 <USBH_HID_GetHIDReportDescriptor+0x36>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b7dc:	887b      	ldrh	r3, [r7, #2]
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800b7e6:	2101      	movs	r1, #1
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f001 f9f7 	bl	800cbdc <USBH_GetDescriptor>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	70fb      	strb	r3, [r7, #3]
 800b808:	4613      	mov	r3, r2
 800b80a:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2221      	movs	r2, #33	@ 0x21
 800b810:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	220a      	movs	r2, #10
 800b816:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800b818:	78fb      	ldrb	r3, [r7, #3]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	021b      	lsls	r3, r3, #8
 800b81e:	b29a      	uxth	r2, r3
 800b820:	78bb      	ldrb	r3, [r7, #2]
 800b822:	b29b      	uxth	r3, r3
 800b824:	4313      	orrs	r3, r2
 800b826:	b29a      	uxth	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b838:	2200      	movs	r2, #0
 800b83a:	2100      	movs	r1, #0
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f001 fda2 	bl	800d386 <USBH_CtlReq>
 800b842:	4603      	mov	r3, r0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	607b      	str	r3, [r7, #4]
 800b856:	460b      	mov	r3, r1
 800b858:	72fb      	strb	r3, [r7, #11]
 800b85a:	4613      	mov	r3, r2
 800b85c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	22a1      	movs	r2, #161	@ 0xa1
 800b862:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2201      	movs	r2, #1
 800b868:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800b86a:	7afb      	ldrb	r3, [r7, #11]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	021b      	lsls	r3, r3, #8
 800b870:	b29a      	uxth	r2, r3
 800b872:	7abb      	ldrb	r3, [r7, #10]
 800b874:	b29b      	uxth	r3, r3
 800b876:	4313      	orrs	r3, r2
 800b878:	b29a      	uxth	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2200      	movs	r2, #0
 800b882:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800b884:	7e3b      	ldrb	r3, [r7, #24]
 800b886:	b29a      	uxth	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800b88c:	7e3b      	ldrb	r3, [r7, #24]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	461a      	mov	r2, r3
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f001 fd76 	bl	800d386 <USBH_CtlReq>
 800b89a:	4603      	mov	r3, r0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2221      	movs	r2, #33	@ 0x21
 800b8b4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	220b      	movs	r2, #11
 800b8ba:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800b8bc:	78fb      	ldrb	r3, [r7, #3]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	825a      	strh	r2, [r3, #18]
 800b8c8:	e002      	b.n	800b8d0 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b8dc:	2200      	movs	r2, #0
 800b8de:	2100      	movs	r1, #0
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 fd50 	bl	800d386 <USBH_CtlReq>
 800b8e6:	4603      	mov	r3, r0

}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	3302      	adds	r3, #2
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	3303      	adds	r3, #3
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	021b      	lsls	r3, r3, #8
 800b90e:	b29b      	uxth	r3, r3
 800b910:	4313      	orrs	r3, r2
 800b912:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800b914:	897b      	ldrh	r3, [r7, #10]
 800b916:	2b09      	cmp	r3, #9
 800b918:	d941      	bls.n	800b99e <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800b91a:	2309      	movs	r3, #9
 800b91c:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800b91e:	e03a      	b.n	800b996 <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b920:	f107 0308 	add.w	r3, r7, #8
 800b924:	4619      	mov	r1, r3
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f001 fd13 	bl	800d352 <USBH_GetNextDesc>
 800b92c:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	785b      	ldrb	r3, [r3, #1]
 800b932:	2b21      	cmp	r3, #33	@ 0x21
 800b934:	d12f      	bne.n	800b996 <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	781a      	ldrb	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	785a      	ldrb	r2, [r3, #1]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3302      	adds	r3, #2
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	461a      	mov	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3303      	adds	r3, #3
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	021b      	lsls	r3, r3, #8
 800b956:	b29b      	uxth	r3, r3
 800b958:	4313      	orrs	r3, r2
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	791a      	ldrb	r2, [r3, #4]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	795a      	ldrb	r2, [r3, #5]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	799a      	ldrb	r2, [r3, #6]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	3307      	adds	r3, #7
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	3308      	adds	r3, #8
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	021b      	lsls	r3, r3, #8
 800b988:	b29b      	uxth	r3, r3
 800b98a:	4313      	orrs	r3, r2
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	811a      	strh	r2, [r3, #8]
        break;
 800b992:	bf00      	nop
      }
    }
  }
}
 800b994:	e003      	b.n	800b99e <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800b996:	893b      	ldrh	r3, [r7, #8]
 800b998:	897a      	ldrh	r2, [r7, #10]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d8c0      	bhi.n	800b920 <USBH_HID_ParseHIDDesc+0x30>
}
 800b99e:	bf00      	nop
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800b9ae:	23ff      	movs	r3, #255	@ 0xff
 800b9b0:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b0b      	cmp	r3, #11
 800b9ba:	d117      	bne.n	800b9ec <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	231a      	movs	r3, #26
 800b9c8:	fb01 f303 	mul.w	r3, r1, r3
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800b9d6:	7bbb      	ldrb	r3, [r7, #14]
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d102      	bne.n	800b9e2 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800b9dc:	2302      	movs	r3, #2
 800b9de:	73fb      	strb	r3, [r7, #15]
 800b9e0:	e004      	b.n	800b9ec <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800b9e2:	7bbb      	ldrb	r3, [r7, #14]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d101      	bne.n	800b9ec <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3714      	adds	r7, #20
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b085      	sub	sp, #20
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	4613      	mov	r3, r2
 800ba06:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	88fa      	ldrh	r2, [r7, #6]
 800ba1e:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	601a      	str	r2, [r3, #0]
}
 800ba26:	bf00      	nop
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b087      	sub	sp, #28
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	7a9b      	ldrb	r3, [r3, #10]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d131      	bne.n	800bab0 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800ba52:	2300      	movs	r3, #0
 800ba54:	82fb      	strh	r3, [r7, #22]
 800ba56:	e027      	b.n	800baa8 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	88da      	ldrh	r2, [r3, #6]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	889b      	ldrh	r3, [r3, #4]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d019      	beq.n	800ba98 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	88d2      	ldrh	r2, [r2, #6]
 800ba6c:	441a      	add	r2, r3
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	1c59      	adds	r1, r3, #1
 800ba72:	6139      	str	r1, [r7, #16]
 800ba74:	7812      	ldrb	r2, [r2, #0]
 800ba76:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	88db      	ldrh	r3, [r3, #6]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	88da      	ldrh	r2, [r3, #6]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	891b      	ldrh	r3, [r3, #8]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d108      	bne.n	800baa2 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	80da      	strh	r2, [r3, #6]
 800ba96:	e004      	b.n	800baa2 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	729a      	strb	r2, [r3, #10]
        return i;
 800ba9e:	8afb      	ldrh	r3, [r7, #22]
 800baa0:	e00a      	b.n	800bab8 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800baa2:	8afb      	ldrh	r3, [r7, #22]
 800baa4:	3301      	adds	r3, #1
 800baa6:	82fb      	strh	r3, [r7, #22]
 800baa8:	8afa      	ldrh	r2, [r7, #22]
 800baaa:	88fb      	ldrh	r3, [r7, #6]
 800baac:	429a      	cmp	r2, r3
 800baae:	d3d3      	bcc.n	800ba58 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800bab6:	88fb      	ldrh	r3, [r7, #6]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	4613      	mov	r3, r2
 800bad0:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	7a9b      	ldrb	r3, [r3, #10]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d13c      	bne.n	800bb58 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2201      	movs	r2, #1
 800bae2:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800bae4:	2300      	movs	r3, #0
 800bae6:	82fb      	strh	r3, [r7, #22]
 800bae8:	e032      	b.n	800bb50 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	889b      	ldrh	r3, [r3, #4]
 800baee:	3301      	adds	r3, #1
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	88d2      	ldrh	r2, [r2, #6]
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d00a      	beq.n	800bb0e <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	889b      	ldrh	r3, [r3, #4]
 800bafc:	3301      	adds	r3, #1
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d108      	bne.n	800bb18 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	88db      	ldrh	r3, [r3, #6]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d104      	bne.n	800bb18 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	729a      	strb	r2, [r3, #10]
        return i;
 800bb14:	8afb      	ldrh	r3, [r7, #22]
 800bb16:	e023      	b.n	800bb60 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	1c5a      	adds	r2, r3, #1
 800bb1c:	613a      	str	r2, [r7, #16]
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	6812      	ldr	r2, [r2, #0]
 800bb22:	68f9      	ldr	r1, [r7, #12]
 800bb24:	8889      	ldrh	r1, [r1, #4]
 800bb26:	440a      	add	r2, r1
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	7013      	strb	r3, [r2, #0]
        f->head++;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	889b      	ldrh	r3, [r3, #4]
 800bb30:	3301      	adds	r3, #1
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	889a      	ldrh	r2, [r3, #4]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	891b      	ldrh	r3, [r3, #8]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d102      	bne.n	800bb4a <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800bb4a:	8afb      	ldrh	r3, [r7, #22]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	82fb      	strh	r3, [r7, #22]
 800bb50:	8afa      	ldrh	r2, [r7, #22]
 800bb52:	88fb      	ldrh	r3, [r7, #6]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d3c8      	bcc.n	800baea <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800bb5e:	88fb      	ldrh	r3, [r7, #6]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	371c      	adds	r7, #28
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800bb7e:	4b22      	ldr	r3, [pc, #136]	@ (800bc08 <USBH_HID_KeybdInit+0x9c>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800bb84:	4b20      	ldr	r3, [pc, #128]	@ (800bc08 <USBH_HID_KeybdInit+0x9c>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800bb8a:	4b1f      	ldr	r3, [pc, #124]	@ (800bc08 <USBH_HID_KeybdInit+0x9c>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800bb90:	4b1d      	ldr	r3, [pc, #116]	@ (800bc08 <USBH_HID_KeybdInit+0x9c>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800bb96:	4b1c      	ldr	r3, [pc, #112]	@ (800bc08 <USBH_HID_KeybdInit+0x9c>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800bb9c:	4b1a      	ldr	r3, [pc, #104]	@ (800bc08 <USBH_HID_KeybdInit+0x9c>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800bba2:	4b19      	ldr	r3, [pc, #100]	@ (800bc08 <USBH_HID_KeybdInit+0x9c>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800bba8:	4b17      	ldr	r3, [pc, #92]	@ (800bc08 <USBH_HID_KeybdInit+0x9c>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800bbae:	2300      	movs	r3, #0
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	e00c      	b.n	800bbce <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800bbb4:	4a15      	ldr	r2, [pc, #84]	@ (800bc0c <USBH_HID_KeybdInit+0xa0>)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	4413      	add	r3, r2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800bbbe:	4a14      	ldr	r2, [pc, #80]	@ (800bc10 <USBH_HID_KeybdInit+0xa4>)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	60fb      	str	r3, [r7, #12]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b07      	cmp	r3, #7
 800bbd2:	d9ef      	bls.n	800bbb4 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	8b1b      	ldrh	r3, [r3, #24]
 800bbd8:	2b08      	cmp	r3, #8
 800bbda:	d902      	bls.n	800bbe2 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2208      	movs	r2, #8
 800bbe0:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	4a0a      	ldr	r2, [pc, #40]	@ (800bc10 <USBH_HID_KeybdInit+0xa4>)
 800bbe6:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	f103 0008 	add.w	r0, r3, #8
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bbf4:	2250      	movs	r2, #80	@ 0x50
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	f7ff feff 	bl	800b9fa <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20000b5c 	.word	0x20000b5c
 800bc0c:	20000b74 	.word	0x20000b74
 800bc10:	20000b6c 	.word	0x20000b6c

0800bc14 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f80d 	bl	800bc3c <USBH_HID_KeybdDecode>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800bc28:	4b03      	ldr	r3, [pc, #12]	@ (800bc38 <USBH_HID_GetKeybdInfo+0x24>)
 800bc2a:	e000      	b.n	800bc2e <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800bc2c:	2300      	movs	r3, #0
  }
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20000b5c 	.word	0x20000b5c

0800bc3c <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc4a:	69db      	ldr	r3, [r3, #28]
 800bc4c:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	8b1b      	ldrh	r3, [r3, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d003      	beq.n	800bc5e <USBH_HID_KeybdDecode+0x22>
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800bc5e:	2302      	movs	r3, #2
 800bc60:	e066      	b.n	800bd30 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f103 0008 	add.w	r0, r3, #8
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	8b1b      	ldrh	r3, [r3, #24]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	4932      	ldr	r1, [pc, #200]	@ (800bd38 <USBH_HID_KeybdDecode+0xfc>)
 800bc70:	f7ff fedf 	bl	800ba32 <USBH_HID_FifoRead>
 800bc74:	4603      	mov	r3, r0
 800bc76:	461a      	mov	r2, r3
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	8b1b      	ldrh	r3, [r3, #24]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d156      	bne.n	800bd2e <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800bc80:	2100      	movs	r1, #0
 800bc82:	482e      	ldr	r0, [pc, #184]	@ (800bd3c <USBH_HID_KeybdDecode+0x100>)
 800bc84:	f000 f8e4 	bl	800be50 <HID_ReadItem>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	4b2c      	ldr	r3, [pc, #176]	@ (800bd40 <USBH_HID_KeybdDecode+0x104>)
 800bc8e:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800bc90:	2100      	movs	r1, #0
 800bc92:	482c      	ldr	r0, [pc, #176]	@ (800bd44 <USBH_HID_KeybdDecode+0x108>)
 800bc94:	f000 f8dc 	bl	800be50 <HID_ReadItem>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	b2da      	uxtb	r2, r3
 800bc9c:	4b28      	ldr	r3, [pc, #160]	@ (800bd40 <USBH_HID_KeybdDecode+0x104>)
 800bc9e:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800bca0:	2100      	movs	r1, #0
 800bca2:	4829      	ldr	r0, [pc, #164]	@ (800bd48 <USBH_HID_KeybdDecode+0x10c>)
 800bca4:	f000 f8d4 	bl	800be50 <HID_ReadItem>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	4b24      	ldr	r3, [pc, #144]	@ (800bd40 <USBH_HID_KeybdDecode+0x104>)
 800bcae:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	4826      	ldr	r0, [pc, #152]	@ (800bd4c <USBH_HID_KeybdDecode+0x110>)
 800bcb4:	f000 f8cc 	bl	800be50 <HID_ReadItem>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	4b20      	ldr	r3, [pc, #128]	@ (800bd40 <USBH_HID_KeybdDecode+0x104>)
 800bcbe:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	4823      	ldr	r0, [pc, #140]	@ (800bd50 <USBH_HID_KeybdDecode+0x114>)
 800bcc4:	f000 f8c4 	bl	800be50 <HID_ReadItem>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	4b1c      	ldr	r3, [pc, #112]	@ (800bd40 <USBH_HID_KeybdDecode+0x104>)
 800bcce:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	4820      	ldr	r0, [pc, #128]	@ (800bd54 <USBH_HID_KeybdDecode+0x118>)
 800bcd4:	f000 f8bc 	bl	800be50 <HID_ReadItem>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	4b18      	ldr	r3, [pc, #96]	@ (800bd40 <USBH_HID_KeybdDecode+0x104>)
 800bcde:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800bce0:	2100      	movs	r1, #0
 800bce2:	481d      	ldr	r0, [pc, #116]	@ (800bd58 <USBH_HID_KeybdDecode+0x11c>)
 800bce4:	f000 f8b4 	bl	800be50 <HID_ReadItem>
 800bce8:	4603      	mov	r3, r0
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	4b14      	ldr	r3, [pc, #80]	@ (800bd40 <USBH_HID_KeybdDecode+0x104>)
 800bcee:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	481a      	ldr	r0, [pc, #104]	@ (800bd5c <USBH_HID_KeybdDecode+0x120>)
 800bcf4:	f000 f8ac 	bl	800be50 <HID_ReadItem>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	4b10      	ldr	r3, [pc, #64]	@ (800bd40 <USBH_HID_KeybdDecode+0x104>)
 800bcfe:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800bd00:	2300      	movs	r3, #0
 800bd02:	73fb      	strb	r3, [r7, #15]
 800bd04:	e00e      	b.n	800bd24 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	4815      	ldr	r0, [pc, #84]	@ (800bd60 <USBH_HID_KeybdDecode+0x124>)
 800bd0c:	f000 f8a0 	bl	800be50 <HID_ReadItem>
 800bd10:	4602      	mov	r2, r0
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
 800bd14:	b2d1      	uxtb	r1, r2
 800bd16:	4a0a      	ldr	r2, [pc, #40]	@ (800bd40 <USBH_HID_KeybdDecode+0x104>)
 800bd18:	4413      	add	r3, r2
 800bd1a:	460a      	mov	r2, r1
 800bd1c:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	3301      	adds	r3, #1
 800bd22:	73fb      	strb	r3, [r7, #15]
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
 800bd26:	2b05      	cmp	r3, #5
 800bd28:	d9ed      	bls.n	800bd06 <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e000      	b.n	800bd30 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800bd2e:	2302      	movs	r3, #2
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20000b74 	.word	0x20000b74
 800bd3c:	08014d6c 	.word	0x08014d6c
 800bd40:	20000b5c 	.word	0x20000b5c
 800bd44:	08014d8c 	.word	0x08014d8c
 800bd48:	08014dac 	.word	0x08014dac
 800bd4c:	08014dcc 	.word	0x08014dcc
 800bd50:	08014dec 	.word	0x08014dec
 800bd54:	08014e0c 	.word	0x08014e0c
 800bd58:	08014e2c 	.word	0x08014e2c
 800bd5c:	08014e4c 	.word	0x08014e4c
 800bd60:	08014e6c 	.word	0x08014e6c

0800bd64 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	789b      	ldrb	r3, [r3, #2]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d103      	bne.n	800bd7c <USBH_HID_GetASCIICode+0x18>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	799b      	ldrb	r3, [r3, #6]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d009      	beq.n	800bd90 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	7a5b      	ldrb	r3, [r3, #9]
 800bd80:	461a      	mov	r2, r3
 800bd82:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb0 <USBH_HID_GetASCIICode+0x4c>)
 800bd84:	5c9b      	ldrb	r3, [r3, r2]
 800bd86:	461a      	mov	r2, r3
 800bd88:	4b0a      	ldr	r3, [pc, #40]	@ (800bdb4 <USBH_HID_GetASCIICode+0x50>)
 800bd8a:	5c9b      	ldrb	r3, [r3, r2]
 800bd8c:	73fb      	strb	r3, [r7, #15]
 800bd8e:	e008      	b.n	800bda2 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	7a5b      	ldrb	r3, [r3, #9]
 800bd94:	461a      	mov	r2, r3
 800bd96:	4b06      	ldr	r3, [pc, #24]	@ (800bdb0 <USBH_HID_GetASCIICode+0x4c>)
 800bd98:	5c9b      	ldrb	r3, [r3, r2]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	4b06      	ldr	r3, [pc, #24]	@ (800bdb8 <USBH_HID_GetASCIICode+0x54>)
 800bd9e:	5c9b      	ldrb	r3, [r3, r2]
 800bda0:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800bda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	08014f94 	.word	0x08014f94
 800bdb4:	08014f10 	.word	0x08014f10
 800bdb8:	08014e8c 	.word	0x08014e8c

0800bdbc <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bdca:	69db      	ldr	r3, [r3, #28]
 800bdcc:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800bdce:	4b1d      	ldr	r3, [pc, #116]	@ (800be44 <USBH_HID_MouseInit+0x88>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800bdd4:	4b1b      	ldr	r3, [pc, #108]	@ (800be44 <USBH_HID_MouseInit+0x88>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800bdda:	4b1a      	ldr	r3, [pc, #104]	@ (800be44 <USBH_HID_MouseInit+0x88>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800bde0:	4b18      	ldr	r3, [pc, #96]	@ (800be44 <USBH_HID_MouseInit+0x88>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800bde6:	4b17      	ldr	r3, [pc, #92]	@ (800be44 <USBH_HID_MouseInit+0x88>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800bdec:	2300      	movs	r3, #0
 800bdee:	60fb      	str	r3, [r7, #12]
 800bdf0:	e00c      	b.n	800be0c <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800bdf2:	4a15      	ldr	r2, [pc, #84]	@ (800be48 <USBH_HID_MouseInit+0x8c>)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800bdfc:	4a13      	ldr	r2, [pc, #76]	@ (800be4c <USBH_HID_MouseInit+0x90>)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	4413      	add	r3, r2
 800be02:	2200      	movs	r2, #0
 800be04:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b07      	cmp	r3, #7
 800be10:	d9ef      	bls.n	800bdf2 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	8b1b      	ldrh	r3, [r3, #24]
 800be16:	2b08      	cmp	r3, #8
 800be18:	d902      	bls.n	800be20 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2208      	movs	r2, #8
 800be1e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4a0a      	ldr	r2, [pc, #40]	@ (800be4c <USBH_HID_MouseInit+0x90>)
 800be24:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	f103 0008 	add.w	r0, r3, #8
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800be32:	2250      	movs	r2, #80	@ 0x50
 800be34:	4619      	mov	r1, r3
 800be36:	f7ff fde0 	bl	800b9fa <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	20000b7c 	.word	0x20000b7c
 800be48:	20000b84 	.word	0x20000b84
 800be4c:	20000b8c 	.word	0x20000b8c

0800be50 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800be50:	b480      	push	{r7}
 800be52:	b089      	sub	sp, #36	@ 0x24
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	460b      	mov	r3, r1
 800be5a:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800be60:	2300      	movs	r3, #0
 800be62:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	7a1b      	ldrb	r3, [r3, #8]
 800be6e:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	7a5b      	ldrb	r3, [r3, #9]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d01a      	beq.n	800beae <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	7a5b      	ldrb	r3, [r3, #9]
 800be7c:	78fa      	ldrb	r2, [r7, #3]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d301      	bcc.n	800be86 <HID_ReadItem+0x36>
    {
      return (0U);
 800be82:	2300      	movs	r3, #0
 800be84:	e078      	b.n	800bf78 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800be86:	78fb      	ldrb	r3, [r7, #3]
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	6852      	ldr	r2, [r2, #4]
 800be8c:	fb02 f303 	mul.w	r3, r2, r3
 800be90:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800be92:	7cfb      	ldrb	r3, [r7, #19]
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	4413      	add	r3, r2
 800be98:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	08db      	lsrs	r3, r3, #3
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	4413      	add	r3, r2
 800bea2:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	f003 0307 	and.w	r3, r3, #7
 800beac:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800beae:	2300      	movs	r3, #0
 800beb0:	61bb      	str	r3, [r7, #24]
 800beb2:	e00a      	b.n	800beca <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	461a      	mov	r2, r3
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	00db      	lsls	r3, r3, #3
 800bebe:	fa02 f303 	lsl.w	r3, r2, r3
 800bec2:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	3301      	adds	r3, #1
 800bec8:	61bb      	str	r3, [r7, #24]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	f003 0307 	and.w	r3, r3, #7
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d004      	beq.n	800bee0 <HID_ReadItem+0x90>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	08db      	lsrs	r3, r3, #3
 800bedc:	3301      	adds	r3, #1
 800bede:	e002      	b.n	800bee6 <HID_ReadItem+0x96>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	08db      	lsrs	r3, r3, #3
 800bee6:	69ba      	ldr	r2, [r7, #24]
 800bee8:	4293      	cmp	r3, r2
 800beea:	d8e3      	bhi.n	800beb4 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800beec:	7cfb      	ldrb	r3, [r7, #19]
 800beee:	69fa      	ldr	r2, [r7, #28]
 800bef0:	40da      	lsrs	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	f04f 31ff 	mov.w	r1, #4294967295
 800befa:	fa01 f303 	lsl.w	r3, r1, r3
 800befe:	43db      	mvns	r3, r3
 800bf00:	4013      	ands	r3, r2
 800bf02:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	69fa      	ldr	r2, [r7, #28]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d304      	bcc.n	800bf18 <HID_ReadItem+0xc8>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	69fa      	ldr	r2, [r7, #28]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d901      	bls.n	800bf1c <HID_ReadItem+0xcc>
  {
    return (0U);
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e02d      	b.n	800bf78 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	7a9b      	ldrb	r3, [r3, #10]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d01e      	beq.n	800bf62 <HID_ReadItem+0x112>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	69fa      	ldr	r2, [r7, #28]
 800bf2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d014      	beq.n	800bf62 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf42:	425b      	negs	r3, r3
 800bf44:	69fa      	ldr	r2, [r7, #28]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	69db      	ldr	r3, [r3, #28]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d101      	bne.n	800bf56 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	e010      	b.n	800bf78 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	69db      	ldr	r3, [r3, #28]
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	fb02 f303 	mul.w	r3, r2, r3
 800bf60:	e00a      	b.n	800bf78 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	69db      	ldr	r3, [r3, #28]
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d101      	bne.n	800bf6e <HID_ReadItem+0x11e>
    {
      return (val);
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	e004      	b.n	800bf78 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	69db      	ldr	r3, [r3, #28]
 800bf72:	69fa      	ldr	r2, [r7, #28]
 800bf74:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3724      	adds	r7, #36	@ 0x24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d101      	bne.n	800bf9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bf98:	2302      	movs	r3, #2
 800bf9a:	e029      	b.n	800bff0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	79fa      	ldrb	r2, [r7, #7]
 800bfa0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f000 f81f 	bl	800bff8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d003      	beq.n	800bfe8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f001 fd9f 	bl	800db2c <USBH_LL_Init>

  return USBH_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c000:	2300      	movs	r3, #0
 800c002:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c004:	2300      	movs	r3, #0
 800c006:	60fb      	str	r3, [r7, #12]
 800c008:	e009      	b.n	800c01e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	33e0      	adds	r3, #224	@ 0xe0
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4413      	add	r3, r2
 800c014:	2200      	movs	r2, #0
 800c016:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	3301      	adds	r3, #1
 800c01c:	60fb      	str	r3, [r7, #12]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2b0f      	cmp	r3, #15
 800c022:	d9f2      	bls.n	800c00a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c024:	2300      	movs	r3, #0
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	e009      	b.n	800c03e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	4413      	add	r3, r2
 800c030:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c034:	2200      	movs	r2, #0
 800c036:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3301      	adds	r3, #1
 800c03c:	60fb      	str	r3, [r7, #12]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c044:	d3f1      	bcc.n	800c02a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2240      	movs	r2, #64	@ 0x40
 800c06a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	331c      	adds	r3, #28
 800c096:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c09a:	2100      	movs	r1, #0
 800c09c:	4618      	mov	r0, r3
 800c09e:	f005 f826 	bl	80110ee <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c0a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f005 f81d 	bl	80110ee <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c0ba:	2212      	movs	r2, #18
 800c0bc:	2100      	movs	r1, #0
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f005 f815 	bl	80110ee <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c0ca:	223e      	movs	r2, #62	@ 0x3e
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f005 f80d 	bl	80110ee <memset>

  return USBH_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c0de:	b480      	push	{r7}
 800c0e0:	b085      	sub	sp, #20
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d016      	beq.n	800c120 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10e      	bne.n	800c11a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c102:	1c59      	adds	r1, r3, #1
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	33de      	adds	r3, #222	@ 0xde
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	73fb      	strb	r3, [r7, #15]
 800c118:	e004      	b.n	800c124 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c11a:	2302      	movs	r3, #2
 800c11c:	73fb      	strb	r3, [r7, #15]
 800c11e:	e001      	b.n	800c124 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c120:	2302      	movs	r3, #2
 800c122:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c124:	7bfb      	ldrb	r3, [r7, #15]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c132:	b480      	push	{r7}
 800c134:	b085      	sub	sp, #20
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	460b      	mov	r3, r1
 800c13c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c148:	78fa      	ldrb	r2, [r7, #3]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d204      	bcs.n	800c158 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	78fa      	ldrb	r2, [r7, #3]
 800c152:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c156:	e001      	b.n	800c15c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c158:	2302      	movs	r3, #2
 800c15a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3714      	adds	r7, #20
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr

0800c16a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c16a:	b480      	push	{r7}
 800c16c:	b087      	sub	sp, #28
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	4608      	mov	r0, r1
 800c174:	4611      	mov	r1, r2
 800c176:	461a      	mov	r2, r3
 800c178:	4603      	mov	r3, r0
 800c17a:	70fb      	strb	r3, [r7, #3]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70bb      	strb	r3, [r7, #2]
 800c180:	4613      	mov	r3, r2
 800c182:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c184:	2300      	movs	r3, #0
 800c186:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c188:	2300      	movs	r3, #0
 800c18a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c192:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c194:	e025      	b.n	800c1e2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c196:	7dfb      	ldrb	r3, [r7, #23]
 800c198:	221a      	movs	r2, #26
 800c19a:	fb02 f303 	mul.w	r3, r2, r3
 800c19e:	3308      	adds	r3, #8
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	3302      	adds	r3, #2
 800c1a6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	795b      	ldrb	r3, [r3, #5]
 800c1ac:	78fa      	ldrb	r2, [r7, #3]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d002      	beq.n	800c1b8 <USBH_FindInterface+0x4e>
 800c1b2:	78fb      	ldrb	r3, [r7, #3]
 800c1b4:	2bff      	cmp	r3, #255	@ 0xff
 800c1b6:	d111      	bne.n	800c1dc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c1bc:	78ba      	ldrb	r2, [r7, #2]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d002      	beq.n	800c1c8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c1c2:	78bb      	ldrb	r3, [r7, #2]
 800c1c4:	2bff      	cmp	r3, #255	@ 0xff
 800c1c6:	d109      	bne.n	800c1dc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c1cc:	787a      	ldrb	r2, [r7, #1]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d002      	beq.n	800c1d8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c1d2:	787b      	ldrb	r3, [r7, #1]
 800c1d4:	2bff      	cmp	r3, #255	@ 0xff
 800c1d6:	d101      	bne.n	800c1dc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
 800c1da:	e006      	b.n	800c1ea <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c1dc:	7dfb      	ldrb	r3, [r7, #23]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c1e2:	7dfb      	ldrb	r3, [r7, #23]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d9d6      	bls.n	800c196 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c1e8:	23ff      	movs	r3, #255	@ 0xff
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	371c      	adds	r7, #28
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b082      	sub	sp, #8
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f001 fcd0 	bl	800dba4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c204:	2101      	movs	r1, #1
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f001 fde9 	bl	800ddde <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3708      	adds	r7, #8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b088      	sub	sp, #32
 800c21c:	af04      	add	r7, sp, #16
 800c21e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c220:	2302      	movs	r3, #2
 800c222:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c224:	2300      	movs	r3, #0
 800c226:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	2b01      	cmp	r3, #1
 800c232:	d102      	bne.n	800c23a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2203      	movs	r2, #3
 800c238:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b0b      	cmp	r3, #11
 800c242:	f200 81bb 	bhi.w	800c5bc <USBH_Process+0x3a4>
 800c246:	a201      	add	r2, pc, #4	@ (adr r2, 800c24c <USBH_Process+0x34>)
 800c248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24c:	0800c27d 	.word	0x0800c27d
 800c250:	0800c2af 	.word	0x0800c2af
 800c254:	0800c317 	.word	0x0800c317
 800c258:	0800c557 	.word	0x0800c557
 800c25c:	0800c5bd 	.word	0x0800c5bd
 800c260:	0800c3b7 	.word	0x0800c3b7
 800c264:	0800c4fd 	.word	0x0800c4fd
 800c268:	0800c3ed 	.word	0x0800c3ed
 800c26c:	0800c40d 	.word	0x0800c40d
 800c270:	0800c42b 	.word	0x0800c42b
 800c274:	0800c46f 	.word	0x0800c46f
 800c278:	0800c53f 	.word	0x0800c53f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c282:	b2db      	uxtb	r3, r3
 800c284:	2b00      	cmp	r3, #0
 800c286:	f000 819b 	beq.w	800c5c0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c290:	20c8      	movs	r0, #200	@ 0xc8
 800c292:	f001 fdee 	bl	800de72 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f001 fce1 	bl	800dc5e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c2ac:	e188      	b.n	800c5c0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d107      	bne.n	800c2c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2202      	movs	r2, #2
 800c2c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c2c6:	e18a      	b.n	800c5de <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c2ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c2d2:	d914      	bls.n	800c2fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c2da:	3301      	adds	r3, #1
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d903      	bls.n	800c2f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	220d      	movs	r2, #13
 800c2f2:	701a      	strb	r2, [r3, #0]
      break;
 800c2f4:	e173      	b.n	800c5de <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	701a      	strb	r2, [r3, #0]
      break;
 800c2fc:	e16f      	b.n	800c5de <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c304:	f103 020a 	add.w	r2, r3, #10
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c30e:	200a      	movs	r0, #10
 800c310:	f001 fdaf 	bl	800de72 <USBH_Delay>
      break;
 800c314:	e163      	b.n	800c5de <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d005      	beq.n	800c32c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c326:	2104      	movs	r1, #4
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c32c:	2064      	movs	r0, #100	@ 0x64
 800c32e:	f001 fda0 	bl	800de72 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f001 fc6c 	bl	800dc10 <USBH_LL_GetSpeed>
 800c338:	4603      	mov	r3, r0
 800c33a:	461a      	mov	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2205      	movs	r2, #5
 800c346:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c348:	2100      	movs	r1, #0
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f001 fa77 	bl	800d83e <USBH_AllocPipe>
 800c350:	4603      	mov	r3, r0
 800c352:	461a      	mov	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c358:	2180      	movs	r1, #128	@ 0x80
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f001 fa6f 	bl	800d83e <USBH_AllocPipe>
 800c360:	4603      	mov	r3, r0
 800c362:	461a      	mov	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	7919      	ldrb	r1, [r3, #4]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c37c:	9202      	str	r2, [sp, #8]
 800c37e:	2200      	movs	r2, #0
 800c380:	9201      	str	r2, [sp, #4]
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	4603      	mov	r3, r0
 800c386:	2280      	movs	r2, #128	@ 0x80
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f001 fa29 	bl	800d7e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	7959      	ldrb	r1, [r3, #5]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c3a2:	9202      	str	r2, [sp, #8]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	9201      	str	r2, [sp, #4]
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f001 fa16 	bl	800d7e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c3b4:	e113      	b.n	800c5de <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f916 	bl	800c5e8 <USBH_HandleEnum>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c3c0:	7bbb      	ldrb	r3, [r7, #14]
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f040 80fd 	bne.w	800c5c4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d103      	bne.n	800c3e4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2208      	movs	r2, #8
 800c3e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c3e2:	e0ef      	b.n	800c5c4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2207      	movs	r2, #7
 800c3e8:	701a      	strb	r2, [r3, #0]
      break;
 800c3ea:	e0eb      	b.n	800c5c4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 80e8 	beq.w	800c5c8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c3fe:	2101      	movs	r1, #1
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2208      	movs	r2, #8
 800c408:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c40a:	e0dd      	b.n	800c5c8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800c412:	4619      	mov	r1, r3
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fc3a 	bl	800cc8e <USBH_SetCfg>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f040 80d5 	bne.w	800c5cc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2209      	movs	r2, #9
 800c426:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c428:	e0d0      	b.n	800c5cc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800c430:	f003 0320 	and.w	r3, r3, #32
 800c434:	2b00      	cmp	r3, #0
 800c436:	d016      	beq.n	800c466 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c438:	2101      	movs	r1, #1
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fc4a 	bl	800ccd4 <USBH_SetFeature>
 800c440:	4603      	mov	r3, r0
 800c442:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c444:	7bbb      	ldrb	r3, [r7, #14]
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d103      	bne.n	800c454 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	220a      	movs	r2, #10
 800c450:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c452:	e0bd      	b.n	800c5d0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800c454:	7bbb      	ldrb	r3, [r7, #14]
 800c456:	b2db      	uxtb	r3, r3
 800c458:	2b03      	cmp	r3, #3
 800c45a:	f040 80b9 	bne.w	800c5d0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	220a      	movs	r2, #10
 800c462:	701a      	strb	r2, [r3, #0]
      break;
 800c464:	e0b4      	b.n	800c5d0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	220a      	movs	r2, #10
 800c46a:	701a      	strb	r2, [r3, #0]
      break;
 800c46c:	e0b0      	b.n	800c5d0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 80ad 	beq.w	800c5d4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c482:	2300      	movs	r3, #0
 800c484:	73fb      	strb	r3, [r7, #15]
 800c486:	e016      	b.n	800c4b6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c488:	7bfa      	ldrb	r2, [r7, #15]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	32de      	adds	r2, #222	@ 0xde
 800c48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c492:	791a      	ldrb	r2, [r3, #4]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d108      	bne.n	800c4b0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c49e:	7bfa      	ldrb	r2, [r7, #15]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	32de      	adds	r2, #222	@ 0xde
 800c4a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800c4ae:	e005      	b.n	800c4bc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	73fb      	strb	r3, [r7, #15]
 800c4b6:	7bfb      	ldrb	r3, [r7, #15]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d0e5      	beq.n	800c488 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d016      	beq.n	800c4f4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	4798      	blx	r3
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d109      	bne.n	800c4ec <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2206      	movs	r2, #6
 800c4dc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c4e4:	2103      	movs	r1, #3
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c4ea:	e073      	b.n	800c5d4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	220d      	movs	r2, #13
 800c4f0:	701a      	strb	r2, [r3, #0]
      break;
 800c4f2:	e06f      	b.n	800c5d4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	220d      	movs	r2, #13
 800c4f8:	701a      	strb	r2, [r3, #0]
      break;
 800c4fa:	e06b      	b.n	800c5d4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c502:	2b00      	cmp	r3, #0
 800c504:	d017      	beq.n	800c536 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	4798      	blx	r3
 800c512:	4603      	mov	r3, r0
 800c514:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d103      	bne.n	800c526 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	220b      	movs	r2, #11
 800c522:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c524:	e058      	b.n	800c5d8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d154      	bne.n	800c5d8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	220d      	movs	r2, #13
 800c532:	701a      	strb	r2, [r3, #0]
      break;
 800c534:	e050      	b.n	800c5d8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	220d      	movs	r2, #13
 800c53a:	701a      	strb	r2, [r3, #0]
      break;
 800c53c:	e04c      	b.n	800c5d8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c544:	2b00      	cmp	r3, #0
 800c546:	d049      	beq.n	800c5dc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	4798      	blx	r3
      }
      break;
 800c554:	e042      	b.n	800c5dc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff fd4a 	bl	800bff8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d009      	beq.n	800c582 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d005      	beq.n	800c598 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c592:	2105      	movs	r1, #5
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d107      	bne.n	800c5b4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7ff fe22 	bl	800c1f6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c5b2:	e014      	b.n	800c5de <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f001 faf5 	bl	800dba4 <USBH_LL_Start>
      break;
 800c5ba:	e010      	b.n	800c5de <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c5bc:	bf00      	nop
 800c5be:	e00e      	b.n	800c5de <USBH_Process+0x3c6>
      break;
 800c5c0:	bf00      	nop
 800c5c2:	e00c      	b.n	800c5de <USBH_Process+0x3c6>
      break;
 800c5c4:	bf00      	nop
 800c5c6:	e00a      	b.n	800c5de <USBH_Process+0x3c6>
    break;
 800c5c8:	bf00      	nop
 800c5ca:	e008      	b.n	800c5de <USBH_Process+0x3c6>
      break;
 800c5cc:	bf00      	nop
 800c5ce:	e006      	b.n	800c5de <USBH_Process+0x3c6>
      break;
 800c5d0:	bf00      	nop
 800c5d2:	e004      	b.n	800c5de <USBH_Process+0x3c6>
      break;
 800c5d4:	bf00      	nop
 800c5d6:	e002      	b.n	800c5de <USBH_Process+0x3c6>
      break;
 800c5d8:	bf00      	nop
 800c5da:	e000      	b.n	800c5de <USBH_Process+0x3c6>
      break;
 800c5dc:	bf00      	nop
  }
  return USBH_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af04      	add	r7, sp, #16
 800c5ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	2b07      	cmp	r3, #7
 800c5fe:	f200 81bd 	bhi.w	800c97c <USBH_HandleEnum+0x394>
 800c602:	a201      	add	r2, pc, #4	@ (adr r2, 800c608 <USBH_HandleEnum+0x20>)
 800c604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c608:	0800c629 	.word	0x0800c629
 800c60c:	0800c6e3 	.word	0x0800c6e3
 800c610:	0800c74d 	.word	0x0800c74d
 800c614:	0800c7d7 	.word	0x0800c7d7
 800c618:	0800c841 	.word	0x0800c841
 800c61c:	0800c8b1 	.word	0x0800c8b1
 800c620:	0800c8f7 	.word	0x0800c8f7
 800c624:	0800c93d 	.word	0x0800c93d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c628:	2108      	movs	r1, #8
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fa4c 	bl	800cac8 <USBH_Get_DevDesc>
 800c630:	4603      	mov	r3, r0
 800c632:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c634:	7bbb      	ldrb	r3, [r7, #14]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d12e      	bne.n	800c698 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	7919      	ldrb	r1, [r3, #4]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c65e:	9202      	str	r2, [sp, #8]
 800c660:	2200      	movs	r2, #0
 800c662:	9201      	str	r2, [sp, #4]
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	4603      	mov	r3, r0
 800c668:	2280      	movs	r2, #128	@ 0x80
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f001 f8b8 	bl	800d7e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	7959      	ldrb	r1, [r3, #5]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c684:	9202      	str	r2, [sp, #8]
 800c686:	2200      	movs	r2, #0
 800c688:	9201      	str	r2, [sp, #4]
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	4603      	mov	r3, r0
 800c68e:	2200      	movs	r2, #0
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f001 f8a5 	bl	800d7e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c696:	e173      	b.n	800c980 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	f040 8170 	bne.w	800c980 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	b2da      	uxtb	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	d903      	bls.n	800c6c2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	220d      	movs	r2, #13
 800c6be:	701a      	strb	r2, [r3, #0]
      break;
 800c6c0:	e15e      	b.n	800c980 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	795b      	ldrb	r3, [r3, #5]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f001 f8d9 	bl	800d880 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	791b      	ldrb	r3, [r3, #4]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f001 f8d3 	bl	800d880 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	701a      	strb	r2, [r3, #0]
      break;
 800c6e0:	e14e      	b.n	800c980 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c6e2:	2112      	movs	r1, #18
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f9ef 	bl	800cac8 <USBH_Get_DevDesc>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c6ee:	7bbb      	ldrb	r3, [r7, #14]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d103      	bne.n	800c6fc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2202      	movs	r2, #2
 800c6f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c6fa:	e143      	b.n	800c984 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6fc:	7bbb      	ldrb	r3, [r7, #14]
 800c6fe:	2b03      	cmp	r3, #3
 800c700:	f040 8140 	bne.w	800c984 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c70a:	3301      	adds	r3, #1
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	d903      	bls.n	800c726 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	220d      	movs	r2, #13
 800c722:	701a      	strb	r2, [r3, #0]
      break;
 800c724:	e12e      	b.n	800c984 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	795b      	ldrb	r3, [r3, #5]
 800c72a:	4619      	mov	r1, r3
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f001 f8a7 	bl	800d880 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	791b      	ldrb	r3, [r3, #4]
 800c736:	4619      	mov	r1, r3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f001 f8a1 	bl	800d880 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	701a      	strb	r2, [r3, #0]
      break;
 800c74a:	e11b      	b.n	800c984 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c74c:	2101      	movs	r1, #1
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 fa79 	bl	800cc46 <USBH_SetAddress>
 800c754:	4603      	mov	r3, r0
 800c756:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c758:	7bbb      	ldrb	r3, [r7, #14]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d130      	bne.n	800c7c0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800c75e:	2002      	movs	r0, #2
 800c760:	f001 fb87 	bl	800de72 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2203      	movs	r2, #3
 800c770:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	7919      	ldrb	r1, [r3, #4]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c786:	9202      	str	r2, [sp, #8]
 800c788:	2200      	movs	r2, #0
 800c78a:	9201      	str	r2, [sp, #4]
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	4603      	mov	r3, r0
 800c790:	2280      	movs	r2, #128	@ 0x80
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f001 f824 	bl	800d7e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7959      	ldrb	r1, [r3, #5]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c7ac:	9202      	str	r2, [sp, #8]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	9201      	str	r2, [sp, #4]
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 f811 	bl	800d7e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c7be:	e0e3      	b.n	800c988 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7c0:	7bbb      	ldrb	r3, [r7, #14]
 800c7c2:	2b03      	cmp	r3, #3
 800c7c4:	f040 80e0 	bne.w	800c988 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	220d      	movs	r2, #13
 800c7cc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	705a      	strb	r2, [r3, #1]
      break;
 800c7d4:	e0d8      	b.n	800c988 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c7d6:	2109      	movs	r1, #9
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f9a1 	bl	800cb20 <USBH_Get_CfgDesc>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7e2:	7bbb      	ldrb	r3, [r7, #14]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d103      	bne.n	800c7f0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2204      	movs	r2, #4
 800c7ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c7ee:	e0cd      	b.n	800c98c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	2b03      	cmp	r3, #3
 800c7f4:	f040 80ca 	bne.w	800c98c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c7fe:	3301      	adds	r3, #1
 800c800:	b2da      	uxtb	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c80e:	2b03      	cmp	r3, #3
 800c810:	d903      	bls.n	800c81a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	220d      	movs	r2, #13
 800c816:	701a      	strb	r2, [r3, #0]
      break;
 800c818:	e0b8      	b.n	800c98c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	795b      	ldrb	r3, [r3, #5]
 800c81e:	4619      	mov	r1, r3
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f001 f82d 	bl	800d880 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	791b      	ldrb	r3, [r3, #4]
 800c82a:	4619      	mov	r1, r3
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f001 f827 	bl	800d880 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	701a      	strb	r2, [r3, #0]
      break;
 800c83e:	e0a5      	b.n	800c98c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 f969 	bl	800cb20 <USBH_Get_CfgDesc>
 800c84e:	4603      	mov	r3, r0
 800c850:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c852:	7bbb      	ldrb	r3, [r7, #14]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d103      	bne.n	800c860 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2205      	movs	r2, #5
 800c85c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c85e:	e097      	b.n	800c990 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c860:	7bbb      	ldrb	r3, [r7, #14]
 800c862:	2b03      	cmp	r3, #3
 800c864:	f040 8094 	bne.w	800c990 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c86e:	3301      	adds	r3, #1
 800c870:	b2da      	uxtb	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c87e:	2b03      	cmp	r3, #3
 800c880:	d903      	bls.n	800c88a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	220d      	movs	r2, #13
 800c886:	701a      	strb	r2, [r3, #0]
      break;
 800c888:	e082      	b.n	800c990 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	795b      	ldrb	r3, [r3, #5]
 800c88e:	4619      	mov	r1, r3
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 fff5 	bl	800d880 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	791b      	ldrb	r3, [r3, #4]
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 ffef 	bl	800d880 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	701a      	strb	r2, [r3, #0]
      break;
 800c8ae:	e06f      	b.n	800c990 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d019      	beq.n	800c8ee <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c8c6:	23ff      	movs	r3, #255	@ 0xff
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 f953 	bl	800cb74 <USBH_Get_StringDesc>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c8d2:	7bbb      	ldrb	r3, [r7, #14]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d103      	bne.n	800c8e0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2206      	movs	r2, #6
 800c8dc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c8de:	e059      	b.n	800c994 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8e0:	7bbb      	ldrb	r3, [r7, #14]
 800c8e2:	2b03      	cmp	r3, #3
 800c8e4:	d156      	bne.n	800c994 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2206      	movs	r2, #6
 800c8ea:	705a      	strb	r2, [r3, #1]
      break;
 800c8ec:	e052      	b.n	800c994 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2206      	movs	r2, #6
 800c8f2:	705a      	strb	r2, [r3, #1]
      break;
 800c8f4:	e04e      	b.n	800c994 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d019      	beq.n	800c934 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c90c:	23ff      	movs	r3, #255	@ 0xff
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f930 	bl	800cb74 <USBH_Get_StringDesc>
 800c914:	4603      	mov	r3, r0
 800c916:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d103      	bne.n	800c926 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2207      	movs	r2, #7
 800c922:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c924:	e038      	b.n	800c998 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c926:	7bbb      	ldrb	r3, [r7, #14]
 800c928:	2b03      	cmp	r3, #3
 800c92a:	d135      	bne.n	800c998 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2207      	movs	r2, #7
 800c930:	705a      	strb	r2, [r3, #1]
      break;
 800c932:	e031      	b.n	800c998 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2207      	movs	r2, #7
 800c938:	705a      	strb	r2, [r3, #1]
      break;
 800c93a:	e02d      	b.n	800c998 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800c942:	2b00      	cmp	r3, #0
 800c944:	d017      	beq.n	800c976 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c952:	23ff      	movs	r3, #255	@ 0xff
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f90d 	bl	800cb74 <USBH_Get_StringDesc>
 800c95a:	4603      	mov	r3, r0
 800c95c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c95e:	7bbb      	ldrb	r3, [r7, #14]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d102      	bne.n	800c96a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c968:	e018      	b.n	800c99c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c96a:	7bbb      	ldrb	r3, [r7, #14]
 800c96c:	2b03      	cmp	r3, #3
 800c96e:	d115      	bne.n	800c99c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	73fb      	strb	r3, [r7, #15]
      break;
 800c974:	e012      	b.n	800c99c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	73fb      	strb	r3, [r7, #15]
      break;
 800c97a:	e00f      	b.n	800c99c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800c97c:	bf00      	nop
 800c97e:	e00e      	b.n	800c99e <USBH_HandleEnum+0x3b6>
      break;
 800c980:	bf00      	nop
 800c982:	e00c      	b.n	800c99e <USBH_HandleEnum+0x3b6>
      break;
 800c984:	bf00      	nop
 800c986:	e00a      	b.n	800c99e <USBH_HandleEnum+0x3b6>
      break;
 800c988:	bf00      	nop
 800c98a:	e008      	b.n	800c99e <USBH_HandleEnum+0x3b6>
      break;
 800c98c:	bf00      	nop
 800c98e:	e006      	b.n	800c99e <USBH_HandleEnum+0x3b6>
      break;
 800c990:	bf00      	nop
 800c992:	e004      	b.n	800c99e <USBH_HandleEnum+0x3b6>
      break;
 800c994:	bf00      	nop
 800c996:	e002      	b.n	800c99e <USBH_HandleEnum+0x3b6>
      break;
 800c998:	bf00      	nop
 800c99a:	e000      	b.n	800c99e <USBH_HandleEnum+0x3b6>
      break;
 800c99c:	bf00      	nop
  }
  return Status;
 800c99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800c9ba:	bf00      	nop
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr

0800c9c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c9d4:	1c5a      	adds	r2, r3, #1
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 f804 	bl	800c9ea <USBH_HandleSof>
}
 800c9e2:	bf00      	nop
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b082      	sub	sp, #8
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b0b      	cmp	r3, #11
 800c9fa:	d10a      	bne.n	800ca12 <USBH_HandleSof+0x28>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d005      	beq.n	800ca12 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca0c:	699b      	ldr	r3, [r3, #24]
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	4798      	blx	r3
  }
}
 800ca12:	bf00      	nop
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ca1a:	b480      	push	{r7}
 800ca1c:	b083      	sub	sp, #12
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ca2a:	bf00      	nop
}
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ca36:	b480      	push	{r7}
 800ca38:	b083      	sub	sp, #12
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800ca46:	bf00      	nop
}
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ca52:	b480      	push	{r7}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f001 f89a 	bl	800dbda <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	791b      	ldrb	r3, [r3, #4]
 800caaa:	4619      	mov	r1, r3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fee7 	bl	800d880 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	795b      	ldrb	r3, [r3, #5]
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fee1 	bl	800d880 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af02      	add	r7, sp, #8
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	460b      	mov	r3, r1
 800cad2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800cad4:	887b      	ldrh	r3, [r7, #2]
 800cad6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cada:	d901      	bls.n	800cae0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cadc:	2303      	movs	r3, #3
 800cade:	e01b      	b.n	800cb18 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cae6:	887b      	ldrh	r3, [r7, #2]
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	4613      	mov	r3, r2
 800caec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800caf0:	2100      	movs	r1, #0
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f872 	bl	800cbdc <USBH_GetDescriptor>
 800caf8:	4603      	mov	r3, r0
 800cafa:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800cafc:	7bfb      	ldrb	r3, [r7, #15]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d109      	bne.n	800cb16 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cb08:	887a      	ldrh	r2, [r7, #2]
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f929 	bl	800cd64 <USBH_ParseDevDesc>
 800cb12:	4603      	mov	r3, r0
 800cb14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af02      	add	r7, sp, #8
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	460b      	mov	r3, r1
 800cb2a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	331c      	adds	r3, #28
 800cb30:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800cb32:	887b      	ldrh	r3, [r7, #2]
 800cb34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb38:	d901      	bls.n	800cb3e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e016      	b.n	800cb6c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cb3e:	887b      	ldrh	r3, [r7, #2]
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb48:	2100      	movs	r1, #0
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f846 	bl	800cbdc <USBH_GetDescriptor>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d107      	bne.n	800cb6a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800cb5a:	887b      	ldrh	r3, [r7, #2]
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	68b9      	ldr	r1, [r7, #8]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f9af 	bl	800cec4 <USBH_ParseCfgDesc>
 800cb66:	4603      	mov	r3, r0
 800cb68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3710      	adds	r7, #16
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b088      	sub	sp, #32
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	607a      	str	r2, [r7, #4]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	460b      	mov	r3, r1
 800cb82:	72fb      	strb	r3, [r7, #11]
 800cb84:	4613      	mov	r3, r2
 800cb86:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800cb88:	893b      	ldrh	r3, [r7, #8]
 800cb8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb8e:	d802      	bhi.n	800cb96 <USBH_Get_StringDesc+0x22>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e01c      	b.n	800cbd4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800cb9a:	7afb      	ldrb	r3, [r7, #11]
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800cba2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cbaa:	893b      	ldrh	r3, [r7, #8]
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f000 f812 	bl	800cbdc <USBH_GetDescriptor>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800cbbc:	7dfb      	ldrb	r3, [r7, #23]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d107      	bne.n	800cbd2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cbc8:	893a      	ldrh	r2, [r7, #8]
 800cbca:	6879      	ldr	r1, [r7, #4]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 fb8d 	bl	800d2ec <USBH_ParseStringDesc>
  }

  return status;
 800cbd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3718      	adds	r7, #24
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	607b      	str	r3, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	72fb      	strb	r3, [r7, #11]
 800cbea:	4613      	mov	r3, r2
 800cbec:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	789b      	ldrb	r3, [r3, #2]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d11c      	bne.n	800cc30 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cbf6:	7afb      	ldrb	r3, [r7, #11]
 800cbf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cbfc:	b2da      	uxtb	r2, r3
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2206      	movs	r2, #6
 800cc06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	893a      	ldrh	r2, [r7, #8]
 800cc0c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cc0e:	893b      	ldrh	r3, [r7, #8]
 800cc10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cc14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc18:	d104      	bne.n	800cc24 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f240 4209 	movw	r2, #1033	@ 0x409
 800cc20:	829a      	strh	r2, [r3, #20]
 800cc22:	e002      	b.n	800cc2a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	8b3a      	ldrh	r2, [r7, #24]
 800cc2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cc30:	8b3b      	ldrh	r3, [r7, #24]
 800cc32:	461a      	mov	r2, r3
 800cc34:	6879      	ldr	r1, [r7, #4]
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f000 fba5 	bl	800d386 <USBH_CtlReq>
 800cc3c:	4603      	mov	r3, r0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b082      	sub	sp, #8
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	460b      	mov	r3, r1
 800cc50:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	789b      	ldrb	r3, [r3, #2]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d10f      	bne.n	800cc7a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2205      	movs	r2, #5
 800cc64:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cc66:	78fb      	ldrb	r3, [r7, #3]
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fb81 	bl	800d386 <USBH_CtlReq>
 800cc84:	4603      	mov	r3, r0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b082      	sub	sp, #8
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	460b      	mov	r3, r1
 800cc98:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	789b      	ldrb	r3, [r3, #2]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d10e      	bne.n	800ccc0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2209      	movs	r2, #9
 800ccac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	887a      	ldrh	r2, [r7, #2]
 800ccb2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fb5e 	bl	800d386 <USBH_CtlReq>
 800ccca:	4603      	mov	r3, r0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	789b      	ldrb	r3, [r3, #2]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d10f      	bne.n	800cd08 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2203      	movs	r2, #3
 800ccf2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ccf4:	78fb      	ldrb	r3, [r7, #3]
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cd08:	2200      	movs	r2, #0
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 fb3a 	bl	800d386 <USBH_CtlReq>
 800cd12:	4603      	mov	r3, r0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	460b      	mov	r3, r1
 800cd26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	789b      	ldrb	r3, [r3, #2]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d10f      	bne.n	800cd50 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2202      	movs	r2, #2
 800cd34:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cd42:	78fb      	ldrb	r3, [r7, #3]
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cd50:	2200      	movs	r2, #0
 800cd52:	2100      	movs	r1, #0
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fb16 	bl	800d386 <USBH_CtlReq>
 800cd5a:	4603      	mov	r3, r0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b087      	sub	sp, #28
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cd78:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800cd84:	2302      	movs	r3, #2
 800cd86:	e094      	b.n	800ceb2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	781a      	ldrb	r2, [r3, #0]
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	785a      	ldrb	r2, [r3, #1]
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	3302      	adds	r3, #2
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	3303      	adds	r3, #3
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	021b      	lsls	r3, r3, #8
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	791a      	ldrb	r2, [r3, #4]
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	795a      	ldrb	r2, [r3, #5]
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	799a      	ldrb	r2, [r3, #6]
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	79da      	ldrb	r2, [r3, #7]
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d004      	beq.n	800cde6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d11b      	bne.n	800ce1e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	79db      	ldrb	r3, [r3, #7]
 800cdea:	2b20      	cmp	r3, #32
 800cdec:	dc0f      	bgt.n	800ce0e <USBH_ParseDevDesc+0xaa>
 800cdee:	2b08      	cmp	r3, #8
 800cdf0:	db0f      	blt.n	800ce12 <USBH_ParseDevDesc+0xae>
 800cdf2:	3b08      	subs	r3, #8
 800cdf4:	4a32      	ldr	r2, [pc, #200]	@ (800cec0 <USBH_ParseDevDesc+0x15c>)
 800cdf6:	fa22 f303 	lsr.w	r3, r2, r3
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	bf14      	ite	ne
 800ce02:	2301      	movne	r3, #1
 800ce04:	2300      	moveq	r3, #0
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d106      	bne.n	800ce1a <USBH_ParseDevDesc+0xb6>
 800ce0c:	e001      	b.n	800ce12 <USBH_ParseDevDesc+0xae>
 800ce0e:	2b40      	cmp	r3, #64	@ 0x40
 800ce10:	d003      	beq.n	800ce1a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	2208      	movs	r2, #8
 800ce16:	71da      	strb	r2, [r3, #7]
        break;
 800ce18:	e000      	b.n	800ce1c <USBH_ParseDevDesc+0xb8>
        break;
 800ce1a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ce1c:	e00e      	b.n	800ce3c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d107      	bne.n	800ce38 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	79db      	ldrb	r3, [r3, #7]
 800ce2c:	2b08      	cmp	r3, #8
 800ce2e:	d005      	beq.n	800ce3c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	2208      	movs	r2, #8
 800ce34:	71da      	strb	r2, [r3, #7]
 800ce36:	e001      	b.n	800ce3c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ce3c:	88fb      	ldrh	r3, [r7, #6]
 800ce3e:	2b08      	cmp	r3, #8
 800ce40:	d936      	bls.n	800ceb0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	3308      	adds	r3, #8
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	3309      	adds	r3, #9
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	021b      	lsls	r3, r3, #8
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	4313      	orrs	r3, r2
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	330a      	adds	r3, #10
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	330b      	adds	r3, #11
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	021b      	lsls	r3, r3, #8
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	330c      	adds	r3, #12
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	330d      	adds	r3, #13
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	021b      	lsls	r3, r3, #8
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	7b9a      	ldrb	r2, [r3, #14]
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	7bda      	ldrb	r2, [r3, #15]
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	7c1a      	ldrb	r2, [r3, #16]
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	7c5a      	ldrb	r2, [r3, #17]
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	371c      	adds	r7, #28
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	01000101 	.word	0x01000101

0800cec4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b08c      	sub	sp, #48	@ 0x30
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	4613      	mov	r3, r2
 800ced0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ced8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cee0:	2300      	movs	r3, #0
 800cee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800cee6:	2300      	movs	r3, #0
 800cee8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d101      	bne.n	800cef6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800cef2:	2302      	movs	r3, #2
 800cef4:	e0da      	b.n	800d0ac <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	781a      	ldrb	r2, [r3, #0]
 800cefe:	6a3b      	ldr	r3, [r7, #32]
 800cf00:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	785a      	ldrb	r2, [r3, #1]
 800cf06:	6a3b      	ldr	r3, [r7, #32]
 800cf08:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	3302      	adds	r3, #2
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	461a      	mov	r2, r3
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	3303      	adds	r3, #3
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	021b      	lsls	r3, r3, #8
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf24:	bf28      	it	cs
 800cf26:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	791a      	ldrb	r2, [r3, #4]
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	795a      	ldrb	r2, [r3, #5]
 800cf3c:	6a3b      	ldr	r3, [r7, #32]
 800cf3e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	799a      	ldrb	r2, [r3, #6]
 800cf44:	6a3b      	ldr	r3, [r7, #32]
 800cf46:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	79da      	ldrb	r2, [r3, #7]
 800cf4c:	6a3b      	ldr	r3, [r7, #32]
 800cf4e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	7a1a      	ldrb	r2, [r3, #8]
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800cf58:	6a3b      	ldr	r3, [r7, #32]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	2b09      	cmp	r3, #9
 800cf5e:	d002      	beq.n	800cf66 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800cf60:	6a3b      	ldr	r3, [r7, #32]
 800cf62:	2209      	movs	r2, #9
 800cf64:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cf66:	88fb      	ldrh	r3, [r7, #6]
 800cf68:	2b09      	cmp	r3, #9
 800cf6a:	f240 809d 	bls.w	800d0a8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800cf6e:	2309      	movs	r3, #9
 800cf70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cf76:	e081      	b.n	800d07c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cf78:	f107 0316 	add.w	r3, r7, #22
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf80:	f000 f9e7 	bl	800d352 <USBH_GetNextDesc>
 800cf84:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800cf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf88:	785b      	ldrb	r3, [r3, #1]
 800cf8a:	2b04      	cmp	r3, #4
 800cf8c:	d176      	bne.n	800d07c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800cf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b09      	cmp	r3, #9
 800cf94:	d002      	beq.n	800cf9c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800cf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf98:	2209      	movs	r2, #9
 800cf9a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800cf9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfa0:	221a      	movs	r2, #26
 800cfa2:	fb02 f303 	mul.w	r3, r2, r3
 800cfa6:	3308      	adds	r3, #8
 800cfa8:	6a3a      	ldr	r2, [r7, #32]
 800cfaa:	4413      	add	r3, r2
 800cfac:	3302      	adds	r3, #2
 800cfae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cfb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfb2:	69f8      	ldr	r0, [r7, #28]
 800cfb4:	f000 f87e 	bl	800d0b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cfc2:	e043      	b.n	800d04c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cfc4:	f107 0316 	add.w	r3, r7, #22
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfcc:	f000 f9c1 	bl	800d352 <USBH_GetNextDesc>
 800cfd0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd4:	785b      	ldrb	r3, [r3, #1]
 800cfd6:	2b05      	cmp	r3, #5
 800cfd8:	d138      	bne.n	800d04c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	795b      	ldrb	r3, [r3, #5]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d113      	bne.n	800d00a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800cfe6:	2b02      	cmp	r3, #2
 800cfe8:	d003      	beq.n	800cff2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	799b      	ldrb	r3, [r3, #6]
 800cfee:	2b03      	cmp	r3, #3
 800cff0:	d10b      	bne.n	800d00a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	79db      	ldrb	r3, [r3, #7]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10b      	bne.n	800d012 <USBH_ParseCfgDesc+0x14e>
 800cffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	2b09      	cmp	r3, #9
 800d000:	d007      	beq.n	800d012 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d004:	2209      	movs	r2, #9
 800d006:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d008:	e003      	b.n	800d012 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d00c:	2207      	movs	r2, #7
 800d00e:	701a      	strb	r2, [r3, #0]
 800d010:	e000      	b.n	800d014 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d012:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d018:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d01c:	3201      	adds	r2, #1
 800d01e:	00d2      	lsls	r2, r2, #3
 800d020:	211a      	movs	r1, #26
 800d022:	fb01 f303 	mul.w	r3, r1, r3
 800d026:	4413      	add	r3, r2
 800d028:	3308      	adds	r3, #8
 800d02a:	6a3a      	ldr	r2, [r7, #32]
 800d02c:	4413      	add	r3, r2
 800d02e:	3304      	adds	r3, #4
 800d030:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d034:	69b9      	ldr	r1, [r7, #24]
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f000 f870 	bl	800d11c <USBH_ParseEPDesc>
 800d03c:	4603      	mov	r3, r0
 800d03e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d042:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d046:	3301      	adds	r3, #1
 800d048:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	791b      	ldrb	r3, [r3, #4]
 800d050:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d054:	429a      	cmp	r2, r3
 800d056:	d204      	bcs.n	800d062 <USBH_ParseCfgDesc+0x19e>
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	885a      	ldrh	r2, [r3, #2]
 800d05c:	8afb      	ldrh	r3, [r7, #22]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d8b0      	bhi.n	800cfc4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	791b      	ldrb	r3, [r3, #4]
 800d066:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d201      	bcs.n	800d072 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d06e:	2303      	movs	r3, #3
 800d070:	e01c      	b.n	800d0ac <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d072:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d076:	3301      	adds	r3, #1
 800d078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d07c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d080:	2b01      	cmp	r3, #1
 800d082:	d805      	bhi.n	800d090 <USBH_ParseCfgDesc+0x1cc>
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	885a      	ldrh	r2, [r3, #2]
 800d088:	8afb      	ldrh	r3, [r7, #22]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	f63f af74 	bhi.w	800cf78 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	791b      	ldrb	r3, [r3, #4]
 800d094:	2b02      	cmp	r3, #2
 800d096:	bf28      	it	cs
 800d098:	2302      	movcs	r3, #2
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d201      	bcs.n	800d0a8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	e001      	b.n	800d0ac <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d0a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3730      	adds	r7, #48	@ 0x30
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	781a      	ldrb	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	785a      	ldrb	r2, [r3, #1]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	789a      	ldrb	r2, [r3, #2]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	78da      	ldrb	r2, [r3, #3]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	3304      	adds	r3, #4
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b02      	cmp	r3, #2
 800d0e6:	bf28      	it	cs
 800d0e8:	2302      	movcs	r3, #2
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	795a      	ldrb	r2, [r3, #5]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	799a      	ldrb	r2, [r3, #6]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	79da      	ldrb	r2, [r3, #7]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	7a1a      	ldrb	r2, [r3, #8]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	721a      	strb	r2, [r3, #8]
}
 800d110:	bf00      	nop
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b087      	sub	sp, #28
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	781a      	ldrb	r2, [r3, #0]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	785a      	ldrb	r2, [r3, #1]
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	789a      	ldrb	r2, [r3, #2]
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	78da      	ldrb	r2, [r3, #3]
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	3304      	adds	r3, #4
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	3305      	adds	r3, #5
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	021b      	lsls	r3, r3, #8
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	4313      	orrs	r3, r2
 800d160:	b29a      	uxth	r2, r3
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	799a      	ldrb	r2, [r3, #6]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	889b      	ldrh	r3, [r3, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d009      	beq.n	800d18a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d17a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d17e:	d804      	bhi.n	800d18a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d188:	d901      	bls.n	800d18e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d18a:	2303      	movs	r3, #3
 800d18c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d194:	2b00      	cmp	r3, #0
 800d196:	d136      	bne.n	800d206 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	78db      	ldrb	r3, [r3, #3]
 800d19c:	f003 0303 	and.w	r3, r3, #3
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d108      	bne.n	800d1b6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	889b      	ldrh	r3, [r3, #4]
 800d1a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1ac:	f240 8097 	bls.w	800d2de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d1b0:	2303      	movs	r3, #3
 800d1b2:	75fb      	strb	r3, [r7, #23]
 800d1b4:	e093      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	78db      	ldrb	r3, [r3, #3]
 800d1ba:	f003 0303 	and.w	r3, r3, #3
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d107      	bne.n	800d1d2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	889b      	ldrh	r3, [r3, #4]
 800d1c6:	2b40      	cmp	r3, #64	@ 0x40
 800d1c8:	f240 8089 	bls.w	800d2de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	75fb      	strb	r3, [r7, #23]
 800d1d0:	e085      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	78db      	ldrb	r3, [r3, #3]
 800d1d6:	f003 0303 	and.w	r3, r3, #3
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d005      	beq.n	800d1ea <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	78db      	ldrb	r3, [r3, #3]
 800d1e2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	d10a      	bne.n	800d200 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	799b      	ldrb	r3, [r3, #6]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d003      	beq.n	800d1fa <USBH_ParseEPDesc+0xde>
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	799b      	ldrb	r3, [r3, #6]
 800d1f6:	2b10      	cmp	r3, #16
 800d1f8:	d970      	bls.n	800d2dc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d1fe:	e06d      	b.n	800d2dc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d200:	2303      	movs	r3, #3
 800d202:	75fb      	strb	r3, [r7, #23]
 800d204:	e06b      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d13c      	bne.n	800d28a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	78db      	ldrb	r3, [r3, #3]
 800d214:	f003 0303 	and.w	r3, r3, #3
 800d218:	2b02      	cmp	r3, #2
 800d21a:	d005      	beq.n	800d228 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	78db      	ldrb	r3, [r3, #3]
 800d220:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d224:	2b00      	cmp	r3, #0
 800d226:	d106      	bne.n	800d236 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	889b      	ldrh	r3, [r3, #4]
 800d22c:	2b40      	cmp	r3, #64	@ 0x40
 800d22e:	d956      	bls.n	800d2de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d230:	2303      	movs	r3, #3
 800d232:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d234:	e053      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	78db      	ldrb	r3, [r3, #3]
 800d23a:	f003 0303 	and.w	r3, r3, #3
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d10e      	bne.n	800d260 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	799b      	ldrb	r3, [r3, #6]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d007      	beq.n	800d25a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d24e:	2b10      	cmp	r3, #16
 800d250:	d803      	bhi.n	800d25a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d256:	2b40      	cmp	r3, #64	@ 0x40
 800d258:	d941      	bls.n	800d2de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d25a:	2303      	movs	r3, #3
 800d25c:	75fb      	strb	r3, [r7, #23]
 800d25e:	e03e      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	78db      	ldrb	r3, [r3, #3]
 800d264:	f003 0303 	and.w	r3, r3, #3
 800d268:	2b03      	cmp	r3, #3
 800d26a:	d10b      	bne.n	800d284 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	799b      	ldrb	r3, [r3, #6]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d004      	beq.n	800d27e <USBH_ParseEPDesc+0x162>
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	889b      	ldrh	r3, [r3, #4]
 800d278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d27c:	d32f      	bcc.n	800d2de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d27e:	2303      	movs	r3, #3
 800d280:	75fb      	strb	r3, [r7, #23]
 800d282:	e02c      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d284:	2303      	movs	r3, #3
 800d286:	75fb      	strb	r3, [r7, #23]
 800d288:	e029      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d290:	2b02      	cmp	r3, #2
 800d292:	d120      	bne.n	800d2d6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	78db      	ldrb	r3, [r3, #3]
 800d298:	f003 0303 	and.w	r3, r3, #3
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d106      	bne.n	800d2ae <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	889b      	ldrh	r3, [r3, #4]
 800d2a4:	2b08      	cmp	r3, #8
 800d2a6:	d01a      	beq.n	800d2de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	75fb      	strb	r3, [r7, #23]
 800d2ac:	e017      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	78db      	ldrb	r3, [r3, #3]
 800d2b2:	f003 0303 	and.w	r3, r3, #3
 800d2b6:	2b03      	cmp	r3, #3
 800d2b8:	d10a      	bne.n	800d2d0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	799b      	ldrb	r3, [r3, #6]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d003      	beq.n	800d2ca <USBH_ParseEPDesc+0x1ae>
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	889b      	ldrh	r3, [r3, #4]
 800d2c6:	2b08      	cmp	r3, #8
 800d2c8:	d909      	bls.n	800d2de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	75fb      	strb	r3, [r7, #23]
 800d2ce:	e006      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	75fb      	strb	r3, [r7, #23]
 800d2d4:	e003      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d2d6:	2303      	movs	r3, #3
 800d2d8:	75fb      	strb	r3, [r7, #23]
 800d2da:	e000      	b.n	800d2de <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d2dc:	bf00      	nop
  }

  return status;
 800d2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	371c      	adds	r7, #28
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b087      	sub	sp, #28
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b03      	cmp	r3, #3
 800d302:	d120      	bne.n	800d346 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	1e9a      	subs	r2, r3, #2
 800d30a:	88fb      	ldrh	r3, [r7, #6]
 800d30c:	4293      	cmp	r3, r2
 800d30e:	bf28      	it	cs
 800d310:	4613      	movcs	r3, r2
 800d312:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	3302      	adds	r3, #2
 800d318:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d31a:	2300      	movs	r3, #0
 800d31c:	82fb      	strh	r3, [r7, #22]
 800d31e:	e00b      	b.n	800d338 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d320:	8afb      	ldrh	r3, [r7, #22]
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	4413      	add	r3, r2
 800d326:	781a      	ldrb	r2, [r3, #0]
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	3301      	adds	r3, #1
 800d330:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d332:	8afb      	ldrh	r3, [r7, #22]
 800d334:	3302      	adds	r3, #2
 800d336:	82fb      	strh	r3, [r7, #22]
 800d338:	8afa      	ldrh	r2, [r7, #22]
 800d33a:	8abb      	ldrh	r3, [r7, #20]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d3ef      	bcc.n	800d320 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	2200      	movs	r2, #0
 800d344:	701a      	strb	r2, [r3, #0]
  }
}
 800d346:	bf00      	nop
 800d348:	371c      	adds	r7, #28
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr

0800d352 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d352:	b480      	push	{r7}
 800d354:	b085      	sub	sp, #20
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	881b      	ldrh	r3, [r3, #0]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	7812      	ldrb	r2, [r2, #0]
 800d364:	4413      	add	r3, r2
 800d366:	b29a      	uxth	r2, r3
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4413      	add	r3, r2
 800d376:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d378:	68fb      	ldr	r3, [r7, #12]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b086      	sub	sp, #24
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	60f8      	str	r0, [r7, #12]
 800d38e:	60b9      	str	r1, [r7, #8]
 800d390:	4613      	mov	r3, r2
 800d392:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d394:	2301      	movs	r3, #1
 800d396:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	789b      	ldrb	r3, [r3, #2]
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d002      	beq.n	800d3a6 <USBH_CtlReq+0x20>
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d00f      	beq.n	800d3c4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d3a4:	e027      	b.n	800d3f6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	88fa      	ldrh	r2, [r7, #6]
 800d3b0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800d3c2:	e018      	b.n	800d3f6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f000 f81b 	bl	800d400 <USBH_HandleControl>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d3ce:	7dfb      	ldrb	r3, [r7, #23]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d002      	beq.n	800d3da <USBH_CtlReq+0x54>
 800d3d4:	7dfb      	ldrb	r3, [r7, #23]
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	d106      	bne.n	800d3e8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	761a      	strb	r2, [r3, #24]
      break;
 800d3e6:	e005      	b.n	800d3f4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d3e8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	d102      	bne.n	800d3f4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	709a      	strb	r2, [r3, #2]
      break;
 800d3f4:	bf00      	nop
  }
  return status;
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3718      	adds	r7, #24
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af02      	add	r7, sp, #8
 800d406:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d408:	2301      	movs	r3, #1
 800d40a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d40c:	2300      	movs	r3, #0
 800d40e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	7e1b      	ldrb	r3, [r3, #24]
 800d414:	3b01      	subs	r3, #1
 800d416:	2b0a      	cmp	r3, #10
 800d418:	f200 8156 	bhi.w	800d6c8 <USBH_HandleControl+0x2c8>
 800d41c:	a201      	add	r2, pc, #4	@ (adr r2, 800d424 <USBH_HandleControl+0x24>)
 800d41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d422:	bf00      	nop
 800d424:	0800d451 	.word	0x0800d451
 800d428:	0800d46b 	.word	0x0800d46b
 800d42c:	0800d4d5 	.word	0x0800d4d5
 800d430:	0800d4fb 	.word	0x0800d4fb
 800d434:	0800d533 	.word	0x0800d533
 800d438:	0800d55d 	.word	0x0800d55d
 800d43c:	0800d5af 	.word	0x0800d5af
 800d440:	0800d5d1 	.word	0x0800d5d1
 800d444:	0800d60d 	.word	0x0800d60d
 800d448:	0800d633 	.word	0x0800d633
 800d44c:	0800d671 	.word	0x0800d671
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f103 0110 	add.w	r1, r3, #16
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	795b      	ldrb	r3, [r3, #5]
 800d45a:	461a      	mov	r2, r3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 f943 	bl	800d6e8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2202      	movs	r2, #2
 800d466:	761a      	strb	r2, [r3, #24]
      break;
 800d468:	e139      	b.n	800d6de <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	795b      	ldrb	r3, [r3, #5]
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fca1 	bl	800ddb8 <USBH_LL_GetURBState>
 800d476:	4603      	mov	r3, r0
 800d478:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d47a:	7bbb      	ldrb	r3, [r7, #14]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d11e      	bne.n	800d4be <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	7c1b      	ldrb	r3, [r3, #16]
 800d484:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d488:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	8adb      	ldrh	r3, [r3, #22]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00a      	beq.n	800d4a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d492:	7b7b      	ldrb	r3, [r7, #13]
 800d494:	2b80      	cmp	r3, #128	@ 0x80
 800d496:	d103      	bne.n	800d4a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2203      	movs	r2, #3
 800d49c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d49e:	e115      	b.n	800d6cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2205      	movs	r2, #5
 800d4a4:	761a      	strb	r2, [r3, #24]
      break;
 800d4a6:	e111      	b.n	800d6cc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d4a8:	7b7b      	ldrb	r3, [r7, #13]
 800d4aa:	2b80      	cmp	r3, #128	@ 0x80
 800d4ac:	d103      	bne.n	800d4b6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2209      	movs	r2, #9
 800d4b2:	761a      	strb	r2, [r3, #24]
      break;
 800d4b4:	e10a      	b.n	800d6cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2207      	movs	r2, #7
 800d4ba:	761a      	strb	r2, [r3, #24]
      break;
 800d4bc:	e106      	b.n	800d6cc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d4be:	7bbb      	ldrb	r3, [r7, #14]
 800d4c0:	2b04      	cmp	r3, #4
 800d4c2:	d003      	beq.n	800d4cc <USBH_HandleControl+0xcc>
 800d4c4:	7bbb      	ldrb	r3, [r7, #14]
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	f040 8100 	bne.w	800d6cc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	220b      	movs	r2, #11
 800d4d0:	761a      	strb	r2, [r3, #24]
      break;
 800d4d2:	e0fb      	b.n	800d6cc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6899      	ldr	r1, [r3, #8]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	899a      	ldrh	r2, [r3, #12]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	791b      	ldrb	r3, [r3, #4]
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f93a 	bl	800d766 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2204      	movs	r2, #4
 800d4f6:	761a      	strb	r2, [r3, #24]
      break;
 800d4f8:	e0f1      	b.n	800d6de <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	791b      	ldrb	r3, [r3, #4]
 800d4fe:	4619      	mov	r1, r3
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 fc59 	bl	800ddb8 <USBH_LL_GetURBState>
 800d506:	4603      	mov	r3, r0
 800d508:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d50a:	7bbb      	ldrb	r3, [r7, #14]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d102      	bne.n	800d516 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2209      	movs	r2, #9
 800d514:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d516:	7bbb      	ldrb	r3, [r7, #14]
 800d518:	2b05      	cmp	r3, #5
 800d51a:	d102      	bne.n	800d522 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d51c:	2303      	movs	r3, #3
 800d51e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d520:	e0d6      	b.n	800d6d0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d522:	7bbb      	ldrb	r3, [r7, #14]
 800d524:	2b04      	cmp	r3, #4
 800d526:	f040 80d3 	bne.w	800d6d0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	220b      	movs	r2, #11
 800d52e:	761a      	strb	r2, [r3, #24]
      break;
 800d530:	e0ce      	b.n	800d6d0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6899      	ldr	r1, [r3, #8]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	899a      	ldrh	r2, [r3, #12]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	795b      	ldrb	r3, [r3, #5]
 800d53e:	2001      	movs	r0, #1
 800d540:	9000      	str	r0, [sp, #0]
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f8ea 	bl	800d71c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d54e:	b29a      	uxth	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2206      	movs	r2, #6
 800d558:	761a      	strb	r2, [r3, #24]
      break;
 800d55a:	e0c0      	b.n	800d6de <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	795b      	ldrb	r3, [r3, #5]
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fc28 	bl	800ddb8 <USBH_LL_GetURBState>
 800d568:	4603      	mov	r3, r0
 800d56a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d56c:	7bbb      	ldrb	r3, [r7, #14]
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d103      	bne.n	800d57a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2207      	movs	r2, #7
 800d576:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d578:	e0ac      	b.n	800d6d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d57a:	7bbb      	ldrb	r3, [r7, #14]
 800d57c:	2b05      	cmp	r3, #5
 800d57e:	d105      	bne.n	800d58c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	220c      	movs	r2, #12
 800d584:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d586:	2303      	movs	r3, #3
 800d588:	73fb      	strb	r3, [r7, #15]
      break;
 800d58a:	e0a3      	b.n	800d6d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d58c:	7bbb      	ldrb	r3, [r7, #14]
 800d58e:	2b02      	cmp	r3, #2
 800d590:	d103      	bne.n	800d59a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2205      	movs	r2, #5
 800d596:	761a      	strb	r2, [r3, #24]
      break;
 800d598:	e09c      	b.n	800d6d4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d59a:	7bbb      	ldrb	r3, [r7, #14]
 800d59c:	2b04      	cmp	r3, #4
 800d59e:	f040 8099 	bne.w	800d6d4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	220b      	movs	r2, #11
 800d5a6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d5ac:	e092      	b.n	800d6d4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	791b      	ldrb	r3, [r3, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f8d5 	bl	800d766 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2208      	movs	r2, #8
 800d5cc:	761a      	strb	r2, [r3, #24]

      break;
 800d5ce:	e086      	b.n	800d6de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	791b      	ldrb	r3, [r3, #4]
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 fbee 	bl	800ddb8 <USBH_LL_GetURBState>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d5e0:	7bbb      	ldrb	r3, [r7, #14]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d105      	bne.n	800d5f2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	220d      	movs	r2, #13
 800d5ea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d5f0:	e072      	b.n	800d6d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d5f2:	7bbb      	ldrb	r3, [r7, #14]
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d103      	bne.n	800d600 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	220b      	movs	r2, #11
 800d5fc:	761a      	strb	r2, [r3, #24]
      break;
 800d5fe:	e06b      	b.n	800d6d8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d600:	7bbb      	ldrb	r3, [r7, #14]
 800d602:	2b05      	cmp	r3, #5
 800d604:	d168      	bne.n	800d6d8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d606:	2303      	movs	r3, #3
 800d608:	73fb      	strb	r3, [r7, #15]
      break;
 800d60a:	e065      	b.n	800d6d8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	795b      	ldrb	r3, [r3, #5]
 800d610:	2201      	movs	r2, #1
 800d612:	9200      	str	r2, [sp, #0]
 800d614:	2200      	movs	r2, #0
 800d616:	2100      	movs	r1, #0
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 f87f 	bl	800d71c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d624:	b29a      	uxth	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	220a      	movs	r2, #10
 800d62e:	761a      	strb	r2, [r3, #24]
      break;
 800d630:	e055      	b.n	800d6de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	795b      	ldrb	r3, [r3, #5]
 800d636:	4619      	mov	r1, r3
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 fbbd 	bl	800ddb8 <USBH_LL_GetURBState>
 800d63e:	4603      	mov	r3, r0
 800d640:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d642:	7bbb      	ldrb	r3, [r7, #14]
 800d644:	2b01      	cmp	r3, #1
 800d646:	d105      	bne.n	800d654 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	220d      	movs	r2, #13
 800d650:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d652:	e043      	b.n	800d6dc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d654:	7bbb      	ldrb	r3, [r7, #14]
 800d656:	2b02      	cmp	r3, #2
 800d658:	d103      	bne.n	800d662 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2209      	movs	r2, #9
 800d65e:	761a      	strb	r2, [r3, #24]
      break;
 800d660:	e03c      	b.n	800d6dc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d662:	7bbb      	ldrb	r3, [r7, #14]
 800d664:	2b04      	cmp	r3, #4
 800d666:	d139      	bne.n	800d6dc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	220b      	movs	r2, #11
 800d66c:	761a      	strb	r2, [r3, #24]
      break;
 800d66e:	e035      	b.n	800d6dc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	7e5b      	ldrb	r3, [r3, #25]
 800d674:	3301      	adds	r3, #1
 800d676:	b2da      	uxtb	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	765a      	strb	r2, [r3, #25]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	7e5b      	ldrb	r3, [r3, #25]
 800d680:	2b02      	cmp	r3, #2
 800d682:	d806      	bhi.n	800d692 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2201      	movs	r2, #1
 800d688:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d690:	e025      	b.n	800d6de <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d698:	2106      	movs	r1, #6
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	795b      	ldrb	r3, [r3, #5]
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f8e8 	bl	800d880 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	791b      	ldrb	r3, [r3, #4]
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 f8e2 	bl	800d880 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d6c2:	2302      	movs	r3, #2
 800d6c4:	73fb      	strb	r3, [r7, #15]
      break;
 800d6c6:	e00a      	b.n	800d6de <USBH_HandleControl+0x2de>

    default:
      break;
 800d6c8:	bf00      	nop
 800d6ca:	e008      	b.n	800d6de <USBH_HandleControl+0x2de>
      break;
 800d6cc:	bf00      	nop
 800d6ce:	e006      	b.n	800d6de <USBH_HandleControl+0x2de>
      break;
 800d6d0:	bf00      	nop
 800d6d2:	e004      	b.n	800d6de <USBH_HandleControl+0x2de>
      break;
 800d6d4:	bf00      	nop
 800d6d6:	e002      	b.n	800d6de <USBH_HandleControl+0x2de>
      break;
 800d6d8:	bf00      	nop
 800d6da:	e000      	b.n	800d6de <USBH_HandleControl+0x2de>
      break;
 800d6dc:	bf00      	nop
  }

  return status;
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af04      	add	r7, sp, #16
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d6f6:	79f9      	ldrb	r1, [r7, #7]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	9303      	str	r3, [sp, #12]
 800d6fc:	2308      	movs	r3, #8
 800d6fe:	9302      	str	r3, [sp, #8]
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	9301      	str	r3, [sp, #4]
 800d704:	2300      	movs	r3, #0
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	2300      	movs	r3, #0
 800d70a:	2200      	movs	r2, #0
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f000 fb22 	bl	800dd56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b088      	sub	sp, #32
 800d720:	af04      	add	r7, sp, #16
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	4611      	mov	r1, r2
 800d728:	461a      	mov	r2, r3
 800d72a:	460b      	mov	r3, r1
 800d72c:	80fb      	strh	r3, [r7, #6]
 800d72e:	4613      	mov	r3, r2
 800d730:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d001      	beq.n	800d740 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d73c:	2300      	movs	r3, #0
 800d73e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d740:	7979      	ldrb	r1, [r7, #5]
 800d742:	7e3b      	ldrb	r3, [r7, #24]
 800d744:	9303      	str	r3, [sp, #12]
 800d746:	88fb      	ldrh	r3, [r7, #6]
 800d748:	9302      	str	r3, [sp, #8]
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	9301      	str	r3, [sp, #4]
 800d74e:	2301      	movs	r3, #1
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	2300      	movs	r3, #0
 800d754:	2200      	movs	r2, #0
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f000 fafd 	bl	800dd56 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b088      	sub	sp, #32
 800d76a:	af04      	add	r7, sp, #16
 800d76c:	60f8      	str	r0, [r7, #12]
 800d76e:	60b9      	str	r1, [r7, #8]
 800d770:	4611      	mov	r1, r2
 800d772:	461a      	mov	r2, r3
 800d774:	460b      	mov	r3, r1
 800d776:	80fb      	strh	r3, [r7, #6]
 800d778:	4613      	mov	r3, r2
 800d77a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d77c:	7979      	ldrb	r1, [r7, #5]
 800d77e:	2300      	movs	r3, #0
 800d780:	9303      	str	r3, [sp, #12]
 800d782:	88fb      	ldrh	r3, [r7, #6]
 800d784:	9302      	str	r3, [sp, #8]
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	2301      	movs	r3, #1
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	2300      	movs	r3, #0
 800d790:	2201      	movs	r2, #1
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f000 fadf 	bl	800dd56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d798:	2300      	movs	r3, #0

}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3710      	adds	r7, #16
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b088      	sub	sp, #32
 800d7a6:	af04      	add	r7, sp, #16
 800d7a8:	60f8      	str	r0, [r7, #12]
 800d7aa:	60b9      	str	r1, [r7, #8]
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	71fb      	strb	r3, [r7, #7]
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d7b8:	79fb      	ldrb	r3, [r7, #7]
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	79b9      	ldrb	r1, [r7, #6]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	9203      	str	r2, [sp, #12]
 800d7c2:	9302      	str	r3, [sp, #8]
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	9301      	str	r3, [sp, #4]
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	2303      	movs	r3, #3
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f000 fac0 	bl	800dd56 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af04      	add	r7, sp, #16
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	4608      	mov	r0, r1
 800d7ea:	4611      	mov	r1, r2
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	70fb      	strb	r3, [r7, #3]
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	70bb      	strb	r3, [r7, #2]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d7fa:	7878      	ldrb	r0, [r7, #1]
 800d7fc:	78ba      	ldrb	r2, [r7, #2]
 800d7fe:	78f9      	ldrb	r1, [r7, #3]
 800d800:	8b3b      	ldrh	r3, [r7, #24]
 800d802:	9302      	str	r3, [sp, #8]
 800d804:	7d3b      	ldrb	r3, [r7, #20]
 800d806:	9301      	str	r3, [sp, #4]
 800d808:	7c3b      	ldrb	r3, [r7, #16]
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	4603      	mov	r3, r0
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fa53 	bl	800dcba <USBH_LL_OpenPipe>

  return USBH_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b082      	sub	sp, #8
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	460b      	mov	r3, r1
 800d828:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d82a:	78fb      	ldrb	r3, [r7, #3]
 800d82c:	4619      	mov	r1, r3
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 fa72 	bl	800dd18 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b084      	sub	sp, #16
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	460b      	mov	r3, r1
 800d848:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f836 	bl	800d8bc <USBH_GetFreePipe>
 800d850:	4603      	mov	r3, r0
 800d852:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d854:	89fb      	ldrh	r3, [r7, #14]
 800d856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d00a      	beq.n	800d874 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d85e:	78fa      	ldrb	r2, [r7, #3]
 800d860:	89fb      	ldrh	r3, [r7, #14]
 800d862:	f003 030f 	and.w	r3, r3, #15
 800d866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d86a:	6879      	ldr	r1, [r7, #4]
 800d86c:	33e0      	adds	r3, #224	@ 0xe0
 800d86e:	009b      	lsls	r3, r3, #2
 800d870:	440b      	add	r3, r1
 800d872:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d874:	89fb      	ldrh	r3, [r7, #14]
 800d876:	b2db      	uxtb	r3, r3
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	460b      	mov	r3, r1
 800d88a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d88c:	78fb      	ldrb	r3, [r7, #3]
 800d88e:	2b0f      	cmp	r3, #15
 800d890:	d80d      	bhi.n	800d8ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d892:	78fb      	ldrb	r3, [r7, #3]
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	33e0      	adds	r3, #224	@ 0xe0
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4413      	add	r3, r2
 800d89c:	685a      	ldr	r2, [r3, #4]
 800d89e:	78fb      	ldrb	r3, [r7, #3]
 800d8a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d8a4:	6879      	ldr	r1, [r7, #4]
 800d8a6:	33e0      	adds	r3, #224	@ 0xe0
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	440b      	add	r3, r1
 800d8ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d8ae:	2300      	movs	r3, #0
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	73fb      	strb	r3, [r7, #15]
 800d8cc:	e00f      	b.n	800d8ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	33e0      	adds	r3, #224	@ 0xe0
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4413      	add	r3, r2
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d102      	bne.n	800d8e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	e007      	b.n	800d8f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	73fb      	strb	r3, [r7, #15]
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
 800d8f0:	2b0f      	cmp	r3, #15
 800d8f2:	d9ec      	bls.n	800d8ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d8f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3714      	adds	r7, #20
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d908:	2201      	movs	r2, #1
 800d90a:	490e      	ldr	r1, [pc, #56]	@ (800d944 <MX_USB_HOST_Init+0x40>)
 800d90c:	480e      	ldr	r0, [pc, #56]	@ (800d948 <MX_USB_HOST_Init+0x44>)
 800d90e:	f7fe fb39 	bl	800bf84 <USBH_Init>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d918:	f7f3 ffb6 	bl	8001888 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800d91c:	490b      	ldr	r1, [pc, #44]	@ (800d94c <MX_USB_HOST_Init+0x48>)
 800d91e:	480a      	ldr	r0, [pc, #40]	@ (800d948 <MX_USB_HOST_Init+0x44>)
 800d920:	f7fe fbdd 	bl	800c0de <USBH_RegisterClass>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d92a:	f7f3 ffad 	bl	8001888 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d92e:	4806      	ldr	r0, [pc, #24]	@ (800d948 <MX_USB_HOST_Init+0x44>)
 800d930:	f7fe fc61 	bl	800c1f6 <USBH_Start>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d93a:	f7f3 ffa5 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d93e:	bf00      	nop
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	0800d965 	.word	0x0800d965
 800d948:	20000b94 	.word	0x20000b94
 800d94c:	2000000c 	.word	0x2000000c

0800d950 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d954:	4802      	ldr	r0, [pc, #8]	@ (800d960 <MX_USB_HOST_Process+0x10>)
 800d956:	f7fe fc5f 	bl	800c218 <USBH_Process>
}
 800d95a:	bf00      	nop
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20000b94 	.word	0x20000b94

0800d964 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	460b      	mov	r3, r1
 800d96e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d970:	78fb      	ldrb	r3, [r7, #3]
 800d972:	3b01      	subs	r3, #1
 800d974:	2b04      	cmp	r3, #4
 800d976:	d819      	bhi.n	800d9ac <USBH_UserProcess+0x48>
 800d978:	a201      	add	r2, pc, #4	@ (adr r2, 800d980 <USBH_UserProcess+0x1c>)
 800d97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d97e:	bf00      	nop
 800d980:	0800d9ad 	.word	0x0800d9ad
 800d984:	0800d99d 	.word	0x0800d99d
 800d988:	0800d9ad 	.word	0x0800d9ad
 800d98c:	0800d9a5 	.word	0x0800d9a5
 800d990:	0800d995 	.word	0x0800d995
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d994:	4b09      	ldr	r3, [pc, #36]	@ (800d9bc <USBH_UserProcess+0x58>)
 800d996:	2203      	movs	r2, #3
 800d998:	701a      	strb	r2, [r3, #0]
  break;
 800d99a:	e008      	b.n	800d9ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d99c:	4b07      	ldr	r3, [pc, #28]	@ (800d9bc <USBH_UserProcess+0x58>)
 800d99e:	2202      	movs	r2, #2
 800d9a0:	701a      	strb	r2, [r3, #0]
  break;
 800d9a2:	e004      	b.n	800d9ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d9a4:	4b05      	ldr	r3, [pc, #20]	@ (800d9bc <USBH_UserProcess+0x58>)
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	701a      	strb	r2, [r3, #0]
  break;
 800d9aa:	e000      	b.n	800d9ae <USBH_UserProcess+0x4a>

  default:
  break;
 800d9ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d9ae:	bf00      	nop
 800d9b0:	370c      	adds	r7, #12
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	20000f6c 	.word	0x20000f6c

0800d9c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b08a      	sub	sp, #40	@ 0x28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9c8:	f107 0314 	add.w	r3, r7, #20
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	605a      	str	r2, [r3, #4]
 800d9d2:	609a      	str	r2, [r3, #8]
 800d9d4:	60da      	str	r2, [r3, #12]
 800d9d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d9e0:	d147      	bne.n	800da72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	613b      	str	r3, [r7, #16]
 800d9e6:	4b25      	ldr	r3, [pc, #148]	@ (800da7c <HAL_HCD_MspInit+0xbc>)
 800d9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ea:	4a24      	ldr	r2, [pc, #144]	@ (800da7c <HAL_HCD_MspInit+0xbc>)
 800d9ec:	f043 0301 	orr.w	r3, r3, #1
 800d9f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9f2:	4b22      	ldr	r3, [pc, #136]	@ (800da7c <HAL_HCD_MspInit+0xbc>)
 800d9f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	613b      	str	r3, [r7, #16]
 800d9fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d9fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800da04:	2300      	movs	r3, #0
 800da06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da08:	2300      	movs	r3, #0
 800da0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da0c:	f107 0314 	add.w	r3, r7, #20
 800da10:	4619      	mov	r1, r3
 800da12:	481b      	ldr	r0, [pc, #108]	@ (800da80 <HAL_HCD_MspInit+0xc0>)
 800da14:	f7f6 fb54 	bl	80040c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800da18:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800da1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da1e:	2302      	movs	r3, #2
 800da20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da22:	2300      	movs	r3, #0
 800da24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da26:	2303      	movs	r3, #3
 800da28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800da2a:	230a      	movs	r3, #10
 800da2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da2e:	f107 0314 	add.w	r3, r7, #20
 800da32:	4619      	mov	r1, r3
 800da34:	4812      	ldr	r0, [pc, #72]	@ (800da80 <HAL_HCD_MspInit+0xc0>)
 800da36:	f7f6 fb43 	bl	80040c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da3a:	4b10      	ldr	r3, [pc, #64]	@ (800da7c <HAL_HCD_MspInit+0xbc>)
 800da3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da3e:	4a0f      	ldr	r2, [pc, #60]	@ (800da7c <HAL_HCD_MspInit+0xbc>)
 800da40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da44:	6353      	str	r3, [r2, #52]	@ 0x34
 800da46:	2300      	movs	r3, #0
 800da48:	60fb      	str	r3, [r7, #12]
 800da4a:	4b0c      	ldr	r3, [pc, #48]	@ (800da7c <HAL_HCD_MspInit+0xbc>)
 800da4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da4e:	4a0b      	ldr	r2, [pc, #44]	@ (800da7c <HAL_HCD_MspInit+0xbc>)
 800da50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800da54:	6453      	str	r3, [r2, #68]	@ 0x44
 800da56:	4b09      	ldr	r3, [pc, #36]	@ (800da7c <HAL_HCD_MspInit+0xbc>)
 800da58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da5e:	60fb      	str	r3, [r7, #12]
 800da60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800da62:	2200      	movs	r2, #0
 800da64:	2100      	movs	r1, #0
 800da66:	2043      	movs	r0, #67	@ 0x43
 800da68:	f7f5 fcab 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da6c:	2043      	movs	r0, #67	@ 0x43
 800da6e:	f7f5 fcc4 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da72:	bf00      	nop
 800da74:	3728      	adds	r7, #40	@ 0x28
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	40023800 	.word	0x40023800
 800da80:	40020000 	.word	0x40020000

0800da84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800da92:	4618      	mov	r0, r3
 800da94:	f7fe ff97 	bl	800c9c6 <USBH_LL_IncTimer>
}
 800da98:	bf00      	nop
 800da9a:	3708      	adds	r7, #8
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800daae:	4618      	mov	r0, r3
 800dab0:	f7fe ffcf 	bl	800ca52 <USBH_LL_Connect>
}
 800dab4:	bf00      	nop
 800dab6:	3708      	adds	r7, #8
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fe ffd8 	bl	800ca80 <USBH_LL_Disconnect>
}
 800dad0:	bf00      	nop
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dad8:	b480      	push	{r7}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	460b      	mov	r3, r1
 800dae2:	70fb      	strb	r3, [r7, #3]
 800dae4:	4613      	mov	r3, r2
 800dae6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dae8:	bf00      	nop
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800db02:	4618      	mov	r0, r3
 800db04:	f7fe ff89 	bl	800ca1a <USBH_LL_PortEnabled>
}
 800db08:	bf00      	nop
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fe ff89 	bl	800ca36 <USBH_LL_PortDisabled>
}
 800db24:	bf00      	nop
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d12a      	bne.n	800db94 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800db3e:	4a18      	ldr	r2, [pc, #96]	@ (800dba0 <USBH_LL_Init+0x74>)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a15      	ldr	r2, [pc, #84]	@ (800dba0 <USBH_LL_Init+0x74>)
 800db4a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800db4e:	4b14      	ldr	r3, [pc, #80]	@ (800dba0 <USBH_LL_Init+0x74>)
 800db50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800db54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800db56:	4b12      	ldr	r3, [pc, #72]	@ (800dba0 <USBH_LL_Init+0x74>)
 800db58:	2208      	movs	r2, #8
 800db5a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800db5c:	4b10      	ldr	r3, [pc, #64]	@ (800dba0 <USBH_LL_Init+0x74>)
 800db5e:	2201      	movs	r2, #1
 800db60:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800db62:	4b0f      	ldr	r3, [pc, #60]	@ (800dba0 <USBH_LL_Init+0x74>)
 800db64:	2200      	movs	r2, #0
 800db66:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800db68:	4b0d      	ldr	r3, [pc, #52]	@ (800dba0 <USBH_LL_Init+0x74>)
 800db6a:	2202      	movs	r2, #2
 800db6c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800db6e:	4b0c      	ldr	r3, [pc, #48]	@ (800dba0 <USBH_LL_Init+0x74>)
 800db70:	2200      	movs	r2, #0
 800db72:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800db74:	480a      	ldr	r0, [pc, #40]	@ (800dba0 <USBH_LL_Init+0x74>)
 800db76:	f7f6 fc89 	bl	800448c <HAL_HCD_Init>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800db80:	f7f3 fe82 	bl	8001888 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800db84:	4806      	ldr	r0, [pc, #24]	@ (800dba0 <USBH_LL_Init+0x74>)
 800db86:	f7f7 f8e9 	bl	8004d5c <HAL_HCD_GetCurrentFrame>
 800db8a:	4603      	mov	r3, r0
 800db8c:	4619      	mov	r1, r3
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7fe ff0a 	bl	800c9a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	20000f70 	.word	0x20000f70

0800dba4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7f7 f856 	bl	8004c6c <HAL_HCD_Start>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbc4:	7bfb      	ldrb	r3, [r7, #15]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f000 f95e 	bl	800de88 <USBH_Get_USB_Status>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b084      	sub	sp, #16
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7f7 f85e 	bl	8004cb2 <HAL_HCD_Stop>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f000 f943 	bl	800de88 <USBH_Get_USB_Status>
 800dc02:	4603      	mov	r3, r0
 800dc04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc06:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7f7 f8a8 	bl	8004d78 <HAL_HCD_GetCurrentSpeed>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b02      	cmp	r3, #2
 800dc2c:	d00c      	beq.n	800dc48 <USBH_LL_GetSpeed+0x38>
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	d80d      	bhi.n	800dc4e <USBH_LL_GetSpeed+0x3e>
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d002      	beq.n	800dc3c <USBH_LL_GetSpeed+0x2c>
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d003      	beq.n	800dc42 <USBH_LL_GetSpeed+0x32>
 800dc3a:	e008      	b.n	800dc4e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc40:	e008      	b.n	800dc54 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dc42:	2301      	movs	r3, #1
 800dc44:	73fb      	strb	r3, [r7, #15]
    break;
 800dc46:	e005      	b.n	800dc54 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dc48:	2302      	movs	r3, #2
 800dc4a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc4c:	e002      	b.n	800dc54 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	73fb      	strb	r3, [r7, #15]
    break;
 800dc52:	bf00      	nop
  }
  return  speed;
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b084      	sub	sp, #16
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc66:	2300      	movs	r3, #0
 800dc68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7f7 f839 	bl	8004cec <HAL_HCD_ResetPort>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc7e:	7bfb      	ldrb	r3, [r7, #15]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f000 f901 	bl	800de88 <USBH_Get_USB_Status>
 800dc86:	4603      	mov	r3, r0
 800dc88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dca6:	78fa      	ldrb	r2, [r7, #3]
 800dca8:	4611      	mov	r1, r2
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7f7 f841 	bl	8004d32 <HAL_HCD_HC_GetXferCount>
 800dcb0:	4603      	mov	r3, r0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dcba:	b590      	push	{r4, r7, lr}
 800dcbc:	b089      	sub	sp, #36	@ 0x24
 800dcbe:	af04      	add	r7, sp, #16
 800dcc0:	6078      	str	r0, [r7, #4]
 800dcc2:	4608      	mov	r0, r1
 800dcc4:	4611      	mov	r1, r2
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	4603      	mov	r3, r0
 800dcca:	70fb      	strb	r3, [r7, #3]
 800dccc:	460b      	mov	r3, r1
 800dcce:	70bb      	strb	r3, [r7, #2]
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800dce2:	787c      	ldrb	r4, [r7, #1]
 800dce4:	78ba      	ldrb	r2, [r7, #2]
 800dce6:	78f9      	ldrb	r1, [r7, #3]
 800dce8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dcea:	9302      	str	r3, [sp, #8]
 800dcec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dcf0:	9301      	str	r3, [sp, #4]
 800dcf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	4623      	mov	r3, r4
 800dcfa:	f7f6 fc2e 	bl	800455a <HAL_HCD_HC_Init>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd02:	7bfb      	ldrb	r3, [r7, #15]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f000 f8bf 	bl	800de88 <USBH_Get_USB_Status>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3714      	adds	r7, #20
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd90      	pop	{r4, r7, pc}

0800dd18 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	460b      	mov	r3, r1
 800dd22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dd32:	78fa      	ldrb	r2, [r7, #3]
 800dd34:	4611      	mov	r1, r2
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7f6 fcc7 	bl	80046ca <HAL_HCD_HC_Halt>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd40:	7bfb      	ldrb	r3, [r7, #15]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f000 f8a0 	bl	800de88 <USBH_Get_USB_Status>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dd56:	b590      	push	{r4, r7, lr}
 800dd58:	b089      	sub	sp, #36	@ 0x24
 800dd5a:	af04      	add	r7, sp, #16
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	4608      	mov	r0, r1
 800dd60:	4611      	mov	r1, r2
 800dd62:	461a      	mov	r2, r3
 800dd64:	4603      	mov	r3, r0
 800dd66:	70fb      	strb	r3, [r7, #3]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	70bb      	strb	r3, [r7, #2]
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd70:	2300      	movs	r3, #0
 800dd72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800dd7e:	787c      	ldrb	r4, [r7, #1]
 800dd80:	78ba      	ldrb	r2, [r7, #2]
 800dd82:	78f9      	ldrb	r1, [r7, #3]
 800dd84:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dd88:	9303      	str	r3, [sp, #12]
 800dd8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dd8c:	9302      	str	r3, [sp, #8]
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd90:	9301      	str	r3, [sp, #4]
 800dd92:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd96:	9300      	str	r3, [sp, #0]
 800dd98:	4623      	mov	r3, r4
 800dd9a:	f7f6 fcb9 	bl	8004710 <HAL_HCD_HC_SubmitRequest>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f000 f86f 	bl	800de88 <USBH_Get_USB_Status>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddae:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3714      	adds	r7, #20
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd90      	pop	{r4, r7, pc}

0800ddb8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ddca:	78fa      	ldrb	r2, [r7, #3]
 800ddcc:	4611      	mov	r1, r2
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f6 ff9a 	bl	8004d08 <HAL_HCD_HC_GetURBState>
 800ddd4:	4603      	mov	r3, r0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b082      	sub	sp, #8
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	460b      	mov	r3, r1
 800dde8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d103      	bne.n	800ddfc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ddf4:	78fb      	ldrb	r3, [r7, #3]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f000 f872 	bl	800dee0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ddfc:	20c8      	movs	r0, #200	@ 0xc8
 800ddfe:	f7f4 fdcf 	bl	80029a0 <HAL_Delay>
  return USBH_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3708      	adds	r7, #8
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	460b      	mov	r3, r1
 800de16:	70fb      	strb	r3, [r7, #3]
 800de18:	4613      	mov	r3, r2
 800de1a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800de22:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800de24:	78fa      	ldrb	r2, [r7, #3]
 800de26:	68f9      	ldr	r1, [r7, #12]
 800de28:	4613      	mov	r3, r2
 800de2a:	011b      	lsls	r3, r3, #4
 800de2c:	1a9b      	subs	r3, r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	440b      	add	r3, r1
 800de32:	3317      	adds	r3, #23
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00a      	beq.n	800de50 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800de3a:	78fa      	ldrb	r2, [r7, #3]
 800de3c:	68f9      	ldr	r1, [r7, #12]
 800de3e:	4613      	mov	r3, r2
 800de40:	011b      	lsls	r3, r3, #4
 800de42:	1a9b      	subs	r3, r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	440b      	add	r3, r1
 800de48:	333c      	adds	r3, #60	@ 0x3c
 800de4a:	78ba      	ldrb	r2, [r7, #2]
 800de4c:	701a      	strb	r2, [r3, #0]
 800de4e:	e009      	b.n	800de64 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800de50:	78fa      	ldrb	r2, [r7, #3]
 800de52:	68f9      	ldr	r1, [r7, #12]
 800de54:	4613      	mov	r3, r2
 800de56:	011b      	lsls	r3, r3, #4
 800de58:	1a9b      	subs	r3, r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	440b      	add	r3, r1
 800de5e:	333d      	adds	r3, #61	@ 0x3d
 800de60:	78ba      	ldrb	r2, [r7, #2]
 800de62:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3714      	adds	r7, #20
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b082      	sub	sp, #8
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f7f4 fd90 	bl	80029a0 <HAL_Delay>
}
 800de80:	bf00      	nop
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	4603      	mov	r3, r0
 800de90:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de92:	2300      	movs	r3, #0
 800de94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	2b03      	cmp	r3, #3
 800de9a:	d817      	bhi.n	800decc <USBH_Get_USB_Status+0x44>
 800de9c:	a201      	add	r2, pc, #4	@ (adr r2, 800dea4 <USBH_Get_USB_Status+0x1c>)
 800de9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea2:	bf00      	nop
 800dea4:	0800deb5 	.word	0x0800deb5
 800dea8:	0800debb 	.word	0x0800debb
 800deac:	0800dec1 	.word	0x0800dec1
 800deb0:	0800dec7 	.word	0x0800dec7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800deb4:	2300      	movs	r3, #0
 800deb6:	73fb      	strb	r3, [r7, #15]
    break;
 800deb8:	e00b      	b.n	800ded2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800deba:	2302      	movs	r3, #2
 800debc:	73fb      	strb	r3, [r7, #15]
    break;
 800debe:	e008      	b.n	800ded2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dec0:	2301      	movs	r3, #1
 800dec2:	73fb      	strb	r3, [r7, #15]
    break;
 800dec4:	e005      	b.n	800ded2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dec6:	2302      	movs	r3, #2
 800dec8:	73fb      	strb	r3, [r7, #15]
    break;
 800deca:	e002      	b.n	800ded2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800decc:	2302      	movs	r3, #2
 800dece:	73fb      	strb	r3, [r7, #15]
    break;
 800ded0:	bf00      	nop
  }
  return usb_status;
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	4603      	mov	r3, r0
 800dee8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800deea:	79fb      	ldrb	r3, [r7, #7]
 800deec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800deee:	79fb      	ldrb	r3, [r7, #7]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d102      	bne.n	800defa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]
 800def8:	e001      	b.n	800defe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800defa:	2301      	movs	r3, #1
 800defc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800defe:	7bfb      	ldrb	r3, [r7, #15]
 800df00:	461a      	mov	r2, r3
 800df02:	2101      	movs	r1, #1
 800df04:	4803      	ldr	r0, [pc, #12]	@ (800df14 <MX_DriverVbusFS+0x34>)
 800df06:	f7f6 fa8f 	bl	8004428 <HAL_GPIO_WritePin>
}
 800df0a:	bf00      	nop
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	40020800 	.word	0x40020800

0800df18 <Send_TO_BLE>:

uint32_t readFlashedYEAR[flashIdxNo*flashAddNo];  //49
int YEARindices[7] = {6, 13, 20, 27, 34, 41, 48};
uint32_t extracted_YEAR[7]; // Array to store 7 ID numbers

void Send_TO_BLE(void){			//data to ESP ==> huart3
 800df18:	b580      	push	{r7, lr}
 800df1a:	b092      	sub	sp, #72	@ 0x48
 800df1c:	af02      	add	r7, sp, #8

	ExtractDATA();          //Extract and read Bil,ID, TIME and YEAR from flash
 800df1e:	f000 f8a9 	bl	800e074 <ExtractDATA>

	char Bil_msg[10];  		// Buffer for BIL message
	for (int i = 0; i < 7; i++) {
 800df22:	2300      	movs	r3, #0
 800df24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df26:	e025      	b.n	800df74 <Send_TO_BLE+0x5c>
		snprintf(Bil_msg, sizeof(Bil_msg), "%.2f\n", extracted_Bil[i]);
 800df28:	4a4b      	ldr	r2, [pc, #300]	@ (800e058 <Send_TO_BLE+0x140>)
 800df2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4618      	mov	r0, r3
 800df34:	f7f2 fb18 	bl	8000568 <__aeabi_f2d>
 800df38:	4602      	mov	r2, r0
 800df3a:	460b      	mov	r3, r1
 800df3c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800df40:	e9cd 2300 	strd	r2, r3, [sp]
 800df44:	4a45      	ldr	r2, [pc, #276]	@ (800e05c <Send_TO_BLE+0x144>)
 800df46:	210a      	movs	r1, #10
 800df48:	f003 f840 	bl	8010fcc <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)Bil_msg, strlen(Bil_msg), HAL_MAX_DELAY);
 800df4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df50:	4618      	mov	r0, r3
 800df52:	f7f2 f99d 	bl	8000290 <strlen>
 800df56:	4603      	mov	r3, r0
 800df58:	b29a      	uxth	r2, r3
 800df5a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800df5e:	f04f 33ff 	mov.w	r3, #4294967295
 800df62:	483f      	ldr	r0, [pc, #252]	@ (800e060 <Send_TO_BLE+0x148>)
 800df64:	f7fb fc06 	bl	8009774 <HAL_UART_Transmit>
		HAL_Delay(20);  	// Small delay to allow the ESP32 to process the data
 800df68:	2014      	movs	r0, #20
 800df6a:	f7f4 fd19 	bl	80029a0 <HAL_Delay>
	for (int i = 0; i < 7; i++) {
 800df6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df70:	3301      	adds	r3, #1
 800df72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df76:	2b06      	cmp	r3, #6
 800df78:	ddd6      	ble.n	800df28 <Send_TO_BLE+0x10>
	}

	char ID_msg[10];  // Buffer for ID message
	for (int j = 0; j < 7; j++) {
 800df7a:	2300      	movs	r3, #0
 800df7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df7e:	e01d      	b.n	800dfbc <Send_TO_BLE+0xa4>
		snprintf(ID_msg, sizeof(ID_msg), "%lu\n", extracted_ID[j]);
 800df80:	4a38      	ldr	r2, [pc, #224]	@ (800e064 <Send_TO_BLE+0x14c>)
 800df82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df88:	f107 0018 	add.w	r0, r7, #24
 800df8c:	4a36      	ldr	r2, [pc, #216]	@ (800e068 <Send_TO_BLE+0x150>)
 800df8e:	210a      	movs	r1, #10
 800df90:	f003 f81c 	bl	8010fcc <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)ID_msg, strlen(ID_msg), HAL_MAX_DELAY);
 800df94:	f107 0318 	add.w	r3, r7, #24
 800df98:	4618      	mov	r0, r3
 800df9a:	f7f2 f979 	bl	8000290 <strlen>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	f107 0118 	add.w	r1, r7, #24
 800dfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfaa:	482d      	ldr	r0, [pc, #180]	@ (800e060 <Send_TO_BLE+0x148>)
 800dfac:	f7fb fbe2 	bl	8009774 <HAL_UART_Transmit>
		HAL_Delay(20);  // Small delay to allow the ESP32 to process the data
 800dfb0:	2014      	movs	r0, #20
 800dfb2:	f7f4 fcf5 	bl	80029a0 <HAL_Delay>
	for (int j = 0; j < 7; j++) {
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb8:	3301      	adds	r3, #1
 800dfba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfbe:	2b06      	cmp	r3, #6
 800dfc0:	ddde      	ble.n	800df80 <Send_TO_BLE+0x68>
	}
	char TIME_msg[12];  // Buffer for TIME message
	for (int m = 0; m < 7; m++) {
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfc6:	e01d      	b.n	800e004 <Send_TO_BLE+0xec>
		//uint8_t month = extracted_TIME[m] & 0xFF;
		snprintf(TIME_msg, sizeof(TIME_msg), "%lu\n", extracted_TIME[m]);   //month
 800dfc8:	4a28      	ldr	r2, [pc, #160]	@ (800e06c <Send_TO_BLE+0x154>)
 800dfca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfd0:	f107 000c 	add.w	r0, r7, #12
 800dfd4:	4a24      	ldr	r2, [pc, #144]	@ (800e068 <Send_TO_BLE+0x150>)
 800dfd6:	210c      	movs	r1, #12
 800dfd8:	f002 fff8 	bl	8010fcc <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)TIME_msg, strlen(TIME_msg), HAL_MAX_DELAY);
 800dfdc:	f107 030c 	add.w	r3, r7, #12
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7f2 f955 	bl	8000290 <strlen>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	f107 010c 	add.w	r1, r7, #12
 800dfee:	f04f 33ff 	mov.w	r3, #4294967295
 800dff2:	481b      	ldr	r0, [pc, #108]	@ (800e060 <Send_TO_BLE+0x148>)
 800dff4:	f7fb fbbe 	bl	8009774 <HAL_UART_Transmit>
		HAL_Delay(20);  // Small delay to allow the ESP32 to process the data
 800dff8:	2014      	movs	r0, #20
 800dffa:	f7f4 fcd1 	bl	80029a0 <HAL_Delay>
	for (int m = 0; m < 7; m++) {
 800dffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e000:	3301      	adds	r3, #1
 800e002:	637b      	str	r3, [r7, #52]	@ 0x34
 800e004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e006:	2b06      	cmp	r3, #6
 800e008:	ddde      	ble.n	800dfc8 <Send_TO_BLE+0xb0>
	}
	char YEAR_msg[10];  // Buffer for YEAR message
	for (int n = 0; n < 7; n++) {
 800e00a:	2300      	movs	r3, #0
 800e00c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e00e:	e01a      	b.n	800e046 <Send_TO_BLE+0x12e>
		snprintf(YEAR_msg, sizeof(YEAR_msg), "%lu\n", extracted_YEAR[n]);
 800e010:	4a17      	ldr	r2, [pc, #92]	@ (800e070 <Send_TO_BLE+0x158>)
 800e012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e018:	4638      	mov	r0, r7
 800e01a:	4a13      	ldr	r2, [pc, #76]	@ (800e068 <Send_TO_BLE+0x150>)
 800e01c:	210a      	movs	r1, #10
 800e01e:	f002 ffd5 	bl	8010fcc <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)YEAR_msg, strlen(YEAR_msg), HAL_MAX_DELAY);
 800e022:	463b      	mov	r3, r7
 800e024:	4618      	mov	r0, r3
 800e026:	f7f2 f933 	bl	8000290 <strlen>
 800e02a:	4603      	mov	r3, r0
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	4639      	mov	r1, r7
 800e030:	f04f 33ff 	mov.w	r3, #4294967295
 800e034:	480a      	ldr	r0, [pc, #40]	@ (800e060 <Send_TO_BLE+0x148>)
 800e036:	f7fb fb9d 	bl	8009774 <HAL_UART_Transmit>
		HAL_Delay(20);  // Small delay to allow the ESP32 to process the data
 800e03a:	2014      	movs	r0, #20
 800e03c:	f7f4 fcb0 	bl	80029a0 <HAL_Delay>
	for (int n = 0; n < 7; n++) {
 800e040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e042:	3301      	adds	r3, #1
 800e044:	633b      	str	r3, [r7, #48]	@ 0x30
 800e046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e048:	2b06      	cmp	r3, #6
 800e04a:	dde1      	ble.n	800e010 <Send_TO_BLE+0xf8>
	}
}
 800e04c:	bf00      	nop
 800e04e:	bf00      	nop
 800e050:	3740      	adds	r7, #64	@ 0x40
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20001414 	.word	0x20001414
 800e05c:	08013134 	.word	0x08013134
 800e060:	20000624 	.word	0x20000624
 800e064:	200014f4 	.word	0x200014f4
 800e068:	0801313c 	.word	0x0801313c
 800e06c:	200015d4 	.word	0x200015d4
 800e070:	200016b4 	.word	0x200016b4

0800e074 <ExtractDATA>:
uint8_t month = extracted_TIME & 0xFF;           // Extract the least significant 8 bits (month)

 *******************************************************************************************************
 */

void ExtractDATA(void) {
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0

	ReadBilResultsFromFlash(readFlashedBil); // to read BIL _ float
 800e07a:	483f      	ldr	r0, [pc, #252]	@ (800e178 <ExtractDATA+0x104>)
 800e07c:	f000 faca 	bl	800e614 <ReadBilResultsFromFlash>
	ReadBilResultsFromFlash(readFlashedID);  // to read ID _ char
 800e080:	483e      	ldr	r0, [pc, #248]	@ (800e17c <ExtractDATA+0x108>)
 800e082:	f000 fac7 	bl	800e614 <ReadBilResultsFromFlash>
	ReadBilResultsFromFlash(readFlashedTIME);  // to read RTC _ uint8_t
 800e086:	483e      	ldr	r0, [pc, #248]	@ (800e180 <ExtractDATA+0x10c>)
 800e088:	f000 fac4 	bl	800e614 <ReadBilResultsFromFlash>
	ReadBilResultsFromFlash(readFlashedYEAR);  // to read RTC _ uint8_t
 800e08c:	483d      	ldr	r0, [pc, #244]	@ (800e184 <ExtractDATA+0x110>)
 800e08e:	f000 fac1 	bl	800e614 <ReadBilResultsFromFlash>

	for (int i = 0; i < 7; i++) {
 800e092:	2300      	movs	r3, #0
 800e094:	617b      	str	r3, [r7, #20]
 800e096:	e029      	b.n	800e0ec <ExtractDATA+0x78>
		uint32_t tempID = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	613b      	str	r3, [r7, #16]
		//uint32_t temp = 0;
		// Convert the 8 consecutive characters into a number
		for (int j = 0; j < 8; j++) {
 800e09c:	2300      	movs	r3, #0
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	e013      	b.n	800e0ca <ExtractDATA+0x56>
			tempID = tempID * 10 + (readFlashedID[IDindices[i] + j] - '0'); // Convert char to int
 800e0a2:	693a      	ldr	r2, [r7, #16]
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4413      	add	r3, r2
 800e0aa:	005b      	lsls	r3, r3, #1
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	4a36      	ldr	r2, [pc, #216]	@ (800e188 <ExtractDATA+0x114>)
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	4a30      	ldr	r2, [pc, #192]	@ (800e17c <ExtractDATA+0x108>)
 800e0bc:	5cd3      	ldrb	r3, [r2, r3]
 800e0be:	440b      	add	r3, r1
 800e0c0:	3b30      	subs	r3, #48	@ 0x30
 800e0c2:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < 8; j++) {
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	60fb      	str	r3, [r7, #12]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b07      	cmp	r3, #7
 800e0ce:	dde8      	ble.n	800e0a2 <ExtractDATA+0x2e>
		}
		if(tempID==3761633968) tempID = 0;                 // if user didn't scan ID prior the test -> ID=0;
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	4a2e      	ldr	r2, [pc, #184]	@ (800e18c <ExtractDATA+0x118>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d101      	bne.n	800e0dc <ExtractDATA+0x68>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	613b      	str	r3, [r7, #16]
		extracted_ID[i] = tempID; 						   // Store in the ID array
 800e0dc:	492c      	ldr	r1, [pc, #176]	@ (800e190 <ExtractDATA+0x11c>)
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	693a      	ldr	r2, [r7, #16]
 800e0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 7; i++) {
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	617b      	str	r3, [r7, #20]
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	2b06      	cmp	r3, #6
 800e0f0:	ddd2      	ble.n	800e098 <ExtractDATA+0x24>
	}

	for (int i = 0; i < 7; i++) {
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	60bb      	str	r3, [r7, #8]
 800e0f6:	e00f      	b.n	800e118 <ExtractDATA+0xa4>
		extracted_Bil[i] = readFlashedBil[BILindices[i]];  // Copy value at the given index
 800e0f8:	4a26      	ldr	r2, [pc, #152]	@ (800e194 <ExtractDATA+0x120>)
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e100:	4a1d      	ldr	r2, [pc, #116]	@ (800e178 <ExtractDATA+0x104>)
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	4413      	add	r3, r2
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	4923      	ldr	r1, [pc, #140]	@ (800e198 <ExtractDATA+0x124>)
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	440b      	add	r3, r1
 800e110:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 7; i++) {
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	3301      	adds	r3, #1
 800e116:	60bb      	str	r3, [r7, #8]
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	2b06      	cmp	r3, #6
 800e11c:	ddec      	ble.n	800e0f8 <ExtractDATA+0x84>
	}
	for (int i = 0; i < 7; i++) {
 800e11e:	2300      	movs	r3, #0
 800e120:	607b      	str	r3, [r7, #4]
 800e122:	e00d      	b.n	800e140 <ExtractDATA+0xcc>
		extracted_TIME[i] = readFlashedTIME[TIMEindices[i]];  // Copy value at the given index
 800e124:	4a1d      	ldr	r2, [pc, #116]	@ (800e19c <ExtractDATA+0x128>)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e12c:	4a14      	ldr	r2, [pc, #80]	@ (800e180 <ExtractDATA+0x10c>)
 800e12e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e132:	491b      	ldr	r1, [pc, #108]	@ (800e1a0 <ExtractDATA+0x12c>)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 7; i++) {
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	3301      	adds	r3, #1
 800e13e:	607b      	str	r3, [r7, #4]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b06      	cmp	r3, #6
 800e144:	ddee      	ble.n	800e124 <ExtractDATA+0xb0>
	}
	for (int i = 0; i < 7; i++) {
 800e146:	2300      	movs	r3, #0
 800e148:	603b      	str	r3, [r7, #0]
 800e14a:	e00d      	b.n	800e168 <ExtractDATA+0xf4>
		extracted_YEAR[i] = readFlashedYEAR[YEARindices[i]];  // Copy value at the given index
 800e14c:	4a15      	ldr	r2, [pc, #84]	@ (800e1a4 <ExtractDATA+0x130>)
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e154:	4a0b      	ldr	r2, [pc, #44]	@ (800e184 <ExtractDATA+0x110>)
 800e156:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e15a:	4913      	ldr	r1, [pc, #76]	@ (800e1a8 <ExtractDATA+0x134>)
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 7; i++) {
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	3301      	adds	r3, #1
 800e166:	603b      	str	r3, [r7, #0]
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2b06      	cmp	r3, #6
 800e16c:	ddee      	ble.n	800e14c <ExtractDATA+0xd8>
	}
}
 800e16e:	bf00      	nop
 800e170:	bf00      	nop
 800e172:	3718      	adds	r7, #24
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20001350 	.word	0x20001350
 800e17c:	20001430 	.word	0x20001430
 800e180:	20001510 	.word	0x20001510
 800e184:	200015f0 	.word	0x200015f0
 800e188:	20000048 	.word	0x20000048
 800e18c:	e035fab0 	.word	0xe035fab0
 800e190:	200014f4 	.word	0x200014f4
 800e194:	2000002c 	.word	0x2000002c
 800e198:	20001414 	.word	0x20001414
 800e19c:	20000064 	.word	0x20000064
 800e1a0:	200015d4 	.word	0x200015d4
 800e1a4:	20000080 	.word	0x20000080
 800e1a8:	200016b4 	.word	0x200016b4

0800e1ac <USBH_HID_EventCallback>:
char key;
char Buffered_ID[(BcodeIndecesNO*2)+1] = {0};    //17 // 8 characters
int ID_idx = 0;
char ID[8] = {0};

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost){
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_KEYBOARD){
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7fd fbf6 	bl	800b9a6 <USBH_HID_GetDeviceType>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b02      	cmp	r3, #2
 800e1be:	d10c      	bne.n	800e1da <USBH_HID_EventCallback+0x2e>
		HID_KEYBD_Info_TypeDef *Keyboard_Info;
		Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7fd fd27 	bl	800bc14 <USBH_HID_GetKeybdInfo>
 800e1c6:	60f8      	str	r0, [r7, #12]
		key = USBH_HID_GetASCIICode(Keyboard_Info);
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f7fd fdcb 	bl	800bd64 <USBH_HID_GetASCIICode>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	4b04      	ldr	r3, [pc, #16]	@ (800e1e4 <USBH_HID_EventCallback+0x38>)
 800e1d4:	701a      	strb	r2, [r3, #0]
		//int len = sprintf(Uart_Buf, "%c", key);
		//HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, len, 1000);
        process_id();
 800e1d6:	f000 f807 	bl	800e1e8 <process_id>
	}
}
 800e1da:	bf00      	nop
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	200016d0 	.word	0x200016d0

0800e1e8 <process_id>:

void process_id(void){
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
		Buffered_ID[ID_idx++] = key;
 800e1ee:	4b17      	ldr	r3, [pc, #92]	@ (800e24c <process_id+0x64>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	1c5a      	adds	r2, r3, #1
 800e1f4:	4915      	ldr	r1, [pc, #84]	@ (800e24c <process_id+0x64>)
 800e1f6:	600a      	str	r2, [r1, #0]
 800e1f8:	4a15      	ldr	r2, [pc, #84]	@ (800e250 <process_id+0x68>)
 800e1fa:	7811      	ldrb	r1, [r2, #0]
 800e1fc:	4a15      	ldr	r2, [pc, #84]	@ (800e254 <process_id+0x6c>)
 800e1fe:	54d1      	strb	r1, [r2, r3]
		//Buffered_ID[17] = '\0'; // Add null terminator manually	}
		if(ID_idx>=(BcodeIndecesNO*2)+1) ID_idx = 1;
 800e200:	4b12      	ldr	r3, [pc, #72]	@ (800e24c <process_id+0x64>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b10      	cmp	r3, #16
 800e206:	dd02      	ble.n	800e20e <process_id+0x26>
 800e208:	4b10      	ldr	r3, [pc, #64]	@ (800e24c <process_id+0x64>)
 800e20a:	2201      	movs	r2, #1
 800e20c:	601a      	str	r2, [r3, #0]

		for (int i=1,j=0; i < (BcodeIndecesNO*2); i+=2,++j) {
 800e20e:	2301      	movs	r3, #1
 800e210:	607b      	str	r3, [r7, #4]
 800e212:	2300      	movs	r3, #0
 800e214:	603b      	str	r3, [r7, #0]
 800e216:	e00e      	b.n	800e236 <process_id+0x4e>
			ID[j] = Buffered_ID[i];
 800e218:	4a0e      	ldr	r2, [pc, #56]	@ (800e254 <process_id+0x6c>)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4413      	add	r3, r2
 800e21e:	7819      	ldrb	r1, [r3, #0]
 800e220:	4a0d      	ldr	r2, [pc, #52]	@ (800e258 <process_id+0x70>)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	4413      	add	r3, r2
 800e226:	460a      	mov	r2, r1
 800e228:	701a      	strb	r2, [r3, #0]
		for (int i=1,j=0; i < (BcodeIndecesNO*2); i+=2,++j) {
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	3302      	adds	r3, #2
 800e22e:	607b      	str	r3, [r7, #4]
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	603b      	str	r3, [r7, #0]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b0f      	cmp	r3, #15
 800e23a:	dded      	ble.n	800e218 <process_id+0x30>
		}
}
 800e23c:	bf00      	nop
 800e23e:	bf00      	nop
 800e240:	370c      	adds	r7, #12
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	200016e8 	.word	0x200016e8
 800e250:	200016d0 	.word	0x200016d0
 800e254:	200016d4 	.word	0x200016d4
 800e258:	200016ec 	.word	0x200016ec
 800e25c:	00000000 	.word	0x00000000

0800e260 <capture_and_send_data>:
float Bil=0;
float BilResult=0.0;
//uint32_t BilResult =1;

void capture_and_send_data(void)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0

    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 800e266:	4b4a      	ldr	r3, [pc, #296]	@ (800e390 <capture_and_send_data+0x130>)
 800e268:	2200      	movs	r2, #0
 800e26a:	601a      	str	r2, [r3, #0]
 800e26c:	e020      	b.n	800e2b0 <capture_and_send_data+0x50>
    {
        HAL_ADC_Start_DMA(&hadc3, &adc_value, 1);
 800e26e:	2201      	movs	r2, #1
 800e270:	4948      	ldr	r1, [pc, #288]	@ (800e394 <capture_and_send_data+0x134>)
 800e272:	4849      	ldr	r0, [pc, #292]	@ (800e398 <capture_and_send_data+0x138>)
 800e274:	f7f4 fbfc 	bl	8002a70 <HAL_ADC_Start_DMA>
        //HAL_Delay(1);
        DWT_Delay(9);
 800e278:	2009      	movs	r0, #9
 800e27a:	f001 ff51 	bl	8010120 <DWT_Delay>
        // Store the adc_value in spectral_data
        spectral_data[idx++] = adc_value;
 800e27e:	4b47      	ldr	r3, [pc, #284]	@ (800e39c <capture_and_send_data+0x13c>)
 800e280:	881b      	ldrh	r3, [r3, #0]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	b291      	uxth	r1, r2
 800e286:	4a45      	ldr	r2, [pc, #276]	@ (800e39c <capture_and_send_data+0x13c>)
 800e288:	8011      	strh	r1, [r2, #0]
 800e28a:	4619      	mov	r1, r3
 800e28c:	4b41      	ldr	r3, [pc, #260]	@ (800e394 <capture_and_send_data+0x134>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a43      	ldr	r2, [pc, #268]	@ (800e3a0 <capture_and_send_data+0x140>)
 800e292:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (idx >= NUM_WAVELENGTHS*2) idx=0;
 800e296:	4b41      	ldr	r3, [pc, #260]	@ (800e39c <capture_and_send_data+0x13c>)
 800e298:	881b      	ldrh	r3, [r3, #0]
 800e29a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e29e:	d302      	bcc.n	800e2a6 <capture_and_send_data+0x46>
 800e2a0:	4b3e      	ldr	r3, [pc, #248]	@ (800e39c <capture_and_send_data+0x13c>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 800e2a6:	4b3a      	ldr	r3, [pc, #232]	@ (800e390 <capture_and_send_data+0x130>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	4a38      	ldr	r2, [pc, #224]	@ (800e390 <capture_and_send_data+0x130>)
 800e2ae:	6013      	str	r3, [r2, #0]
 800e2b0:	4b37      	ldr	r3, [pc, #220]	@ (800e390 <capture_and_send_data+0x130>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2b8:	dbd9      	blt.n	800e26e <capture_and_send_data+0xe>
			spectral_data_256[index2++] = curr_value;
			if (index2 >= Filtered_Spec_Len) index2=0;
		}
	}*/

	sum_filtered_data=0;
 800e2ba:	4b3a      	ldr	r3, [pc, #232]	@ (800e3a4 <capture_and_send_data+0x144>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	601a      	str	r2, [r3, #0]
	average_filtered_data=0;
 800e2c0:	4b39      	ldr	r3, [pc, #228]	@ (800e3a8 <capture_and_send_data+0x148>)
 800e2c2:	f04f 0200 	mov.w	r2, #0
 800e2c6:	601a      	str	r2, [r3, #0]
	// Calculate the average of the filtered data
	for (int i = main_spec_start; i < main_spec_end; i++)
 800e2c8:	2363      	movs	r3, #99	@ 0x63
 800e2ca:	607b      	str	r3, [r7, #4]
 800e2cc:	e00b      	b.n	800e2e6 <capture_and_send_data+0x86>
	{   //45 main samples
		sum_filtered_data += spectral_data[i];
 800e2ce:	4a34      	ldr	r2, [pc, #208]	@ (800e3a0 <capture_and_send_data+0x140>)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e2d6:	4b33      	ldr	r3, [pc, #204]	@ (800e3a4 <capture_and_send_data+0x144>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4413      	add	r3, r2
 800e2dc:	4a31      	ldr	r2, [pc, #196]	@ (800e3a4 <capture_and_send_data+0x144>)
 800e2de:	6013      	str	r3, [r2, #0]
	for (int i = main_spec_start; i < main_spec_end; i++)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	607b      	str	r3, [r7, #4]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2b90      	cmp	r3, #144	@ 0x90
 800e2ea:	ddf0      	ble.n	800e2ce <capture_and_send_data+0x6e>
	}
	//if (index2 > 0)
	{
		average_filtered_data = (float)sum_filtered_data / (main_spec_end-main_spec_start);
 800e2ec:	4b2d      	ldr	r3, [pc, #180]	@ (800e3a4 <capture_and_send_data+0x144>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	ee07 3a90 	vmov	s15, r3
 800e2f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e2f8:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800e3ac <capture_and_send_data+0x14c>
 800e2fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e300:	4b29      	ldr	r3, [pc, #164]	@ (800e3a8 <capture_and_send_data+0x148>)
 800e302:	edc3 7a00 	vstr	s15, [r3]
		 average_Reflectance = (float)sum_Reflectance / (main_spec_end-main_spec_start);
	}*/

	//BilResult[0] = average_Reflectance*3;
	//BilResult[0]=(1.7016*average_Reflectance*average_Reflectance)-(20.6755*average_Reflectance)+(66.9023);
	 BilResult = (average_filtered_data-478)/120;     //avgSpecAtBlank_Ref = 478   //CalFactor=56;//80
 800e306:	4b28      	ldr	r3, [pc, #160]	@ (800e3a8 <capture_and_send_data+0x148>)
 800e308:	edd3 7a00 	vldr	s15, [r3]
 800e30c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800e3b0 <capture_and_send_data+0x150>
 800e310:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e314:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e3b4 <capture_and_send_data+0x154>
 800e318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e31c:	4b26      	ldr	r3, [pc, #152]	@ (800e3b8 <capture_and_send_data+0x158>)
 800e31e:	edc3 7a00 	vstr	s15, [r3]
	 if(BilResult<=0.1) {
 800e322:	4b25      	ldr	r3, [pc, #148]	@ (800e3b8 <capture_and_send_data+0x158>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4618      	mov	r0, r3
 800e328:	f7f2 f91e 	bl	8000568 <__aeabi_f2d>
 800e32c:	a316      	add	r3, pc, #88	@ (adr r3, 800e388 <capture_and_send_data+0x128>)
 800e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e332:	f7f2 fbed 	bl	8000b10 <__aeabi_dcmple>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d01b      	beq.n	800e374 <capture_and_send_data+0x114>
		 HAL_GPIO_WritePin(GPIOA, SPEC_LED_Pin, GPIO_PIN_RESET);
 800e33c:	2200      	movs	r2, #0
 800e33e:	2180      	movs	r1, #128	@ 0x80
 800e340:	481e      	ldr	r0, [pc, #120]	@ (800e3bc <capture_and_send_data+0x15c>)
 800e342:	f7f6 f871 	bl	8004428 <HAL_GPIO_WritePin>
		 testDone = 0;
 800e346:	4b1e      	ldr	r3, [pc, #120]	@ (800e3c0 <capture_and_send_data+0x160>)
 800e348:	2200      	movs	r2, #0
 800e34a:	701a      	strb	r2, [r3, #0]
		 BilResult=0;
 800e34c:	4b1a      	ldr	r3, [pc, #104]	@ (800e3b8 <capture_and_send_data+0x158>)
 800e34e:	f04f 0200 	mov.w	r2, #0
 800e352:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 800e354:	2201      	movs	r2, #1
 800e356:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e35a:	481a      	ldr	r0, [pc, #104]	@ (800e3c4 <capture_and_send_data+0x164>)
 800e35c:	f7f6 f864 	bl	8004428 <HAL_GPIO_WritePin>
		 HAL_Delay(200);
 800e360:	20c8      	movs	r0, #200	@ 0xc8
 800e362:	f7f4 fb1d 	bl	80029a0 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 800e366:	2200      	movs	r2, #0
 800e368:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e36c:	4815      	ldr	r0, [pc, #84]	@ (800e3c4 <capture_and_send_data+0x164>)
 800e36e:	f7f6 f85b 	bl	8004428 <HAL_GPIO_WritePin>
      //len = sizeof(spectral_data[j]);

      HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(spectral_data[j]), HAL_MAX_DELAY);    //to ESP

    }*/
}
 800e372:	e002      	b.n	800e37a <capture_and_send_data+0x11a>
	 testDone = 1;
 800e374:	4b12      	ldr	r3, [pc, #72]	@ (800e3c0 <capture_and_send_data+0x160>)
 800e376:	2201      	movs	r2, #1
 800e378:	701a      	strb	r2, [r3, #0]
}
 800e37a:	bf00      	nop
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	f3af 8000 	nop.w
 800e388:	9999999a 	.word	0x9999999a
 800e38c:	3fb99999 	.word	0x3fb99999
 800e390:	20001efc 	.word	0x20001efc
 800e394:	20001ef4 	.word	0x20001ef4
 800e398:	200002f0 	.word	0x200002f0
 800e39c:	20001ef8 	.word	0x20001ef8
 800e3a0:	200016f4 	.word	0x200016f4
 800e3a4:	20001f00 	.word	0x20001f00
 800e3a8:	20001f04 	.word	0x20001f04
 800e3ac:	42380000 	.word	0x42380000
 800e3b0:	43ef0000 	.word	0x43ef0000
 800e3b4:	42f00000 	.word	0x42f00000
 800e3b8:	20001f08 	.word	0x20001f08
 800e3bc:	40020000 	.word	0x40020000
 800e3c0:	20001efa 	.word	0x20001efa
 800e3c4:	40021000 	.word	0x40021000

0800e3c8 <FindLastBilResultIndex>:
// Internal variables
static uint32_t flash_index = 0;  // Index for the circular buffer
static uint32_t sequenceNumber = 0;  // Global sequence number for entries

// Function to find the last valid BIL reading index across multiple sectors
void FindLastBilResultIndex(void) {
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
    uint32_t maxSequence = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	60fb      	str	r3, [r7, #12]
    flash_index = 0;
 800e3d2:	4b1a      	ldr	r3, [pc, #104]	@ (800e43c <FindLastBilResultIndex+0x74>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 800e3d8:	2300      	movs	r3, #0
 800e3da:	60bb      	str	r3, [r7, #8]
 800e3dc:	e01c      	b.n	800e418 <FindLastBilResultIndex+0x50>
        uint32_t sectorBaseAddress = GetSectorAddress(i + FLASH_START_SECTOR);
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	3305      	adds	r3, #5
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f000 f966 	bl	800e6b4 <GetSectorAddress>
 800e3e8:	6078      	str	r0, [r7, #4]
        FlashEntry* entry = (FlashEntry*)sectorBaseAddress;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	603b      	str	r3, [r7, #0]

        if (entry->magic == MAGIC_NUMBER) {
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 800e3f6:	d10c      	bne.n	800e412 <FindLastBilResultIndex+0x4a>
            if (entry->sequence > maxSequence) {
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d207      	bcs.n	800e412 <FindLastBilResultIndex+0x4a>
                maxSequence = entry->sequence;
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	60fb      	str	r3, [r7, #12]
                flash_index = i + 1;
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	3301      	adds	r3, #1
 800e40c:	461a      	mov	r2, r3
 800e40e:	4b0b      	ldr	r3, [pc, #44]	@ (800e43c <FindLastBilResultIndex+0x74>)
 800e410:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	3301      	adds	r3, #1
 800e416:	60bb      	str	r3, [r7, #8]
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	2b06      	cmp	r3, #6
 800e41c:	dddf      	ble.n	800e3de <FindLastBilResultIndex+0x16>
            }
        }
    }

    // Wrap around if the index exceeds the max entries
    if (flash_index >= MAX_BIL_READINGS) {
 800e41e:	4b07      	ldr	r3, [pc, #28]	@ (800e43c <FindLastBilResultIndex+0x74>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b06      	cmp	r3, #6
 800e424:	d902      	bls.n	800e42c <FindLastBilResultIndex+0x64>
        flash_index = 0;
 800e426:	4b05      	ldr	r3, [pc, #20]	@ (800e43c <FindLastBilResultIndex+0x74>)
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]
    }

    // Set the global sequenceNumber to maxSequence + 1
    sequenceNumber = maxSequence + 1;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	3301      	adds	r3, #1
 800e430:	4a03      	ldr	r2, [pc, #12]	@ (800e440 <FindLastBilResultIndex+0x78>)
 800e432:	6013      	str	r3, [r2, #0]
}
 800e434:	bf00      	nop
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	20001f0c 	.word	0x20001f0c
 800e440:	20001f10 	.word	0x20001f10

0800e444 <SaveBilResultToFlash>:

// Function to save BIL result to flash at the next sector
void SaveBilResultToFlash(void) {
 800e444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e448:	b094      	sub	sp, #80	@ 0x50
 800e44a:	af04      	add	r7, sp, #16
    uint32_t sector = FLASH_START_SECTOR + flash_index;
 800e44c:	4b64      	ldr	r3, [pc, #400]	@ (800e5e0 <SaveBilResultToFlash+0x19c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3305      	adds	r3, #5
 800e452:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Erase the current sector before writing
    EraseFlashSector(sector);
 800e454:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e456:	f000 f90e 	bl	800e676 <EraseFlashSector>

    RTC_GetTime(&hours, &minutes, &seconds, &day, &date, &month, &year);   //**//
 800e45a:	4b62      	ldr	r3, [pc, #392]	@ (800e5e4 <SaveBilResultToFlash+0x1a0>)
 800e45c:	9302      	str	r3, [sp, #8]
 800e45e:	4b62      	ldr	r3, [pc, #392]	@ (800e5e8 <SaveBilResultToFlash+0x1a4>)
 800e460:	9301      	str	r3, [sp, #4]
 800e462:	4b62      	ldr	r3, [pc, #392]	@ (800e5ec <SaveBilResultToFlash+0x1a8>)
 800e464:	9300      	str	r3, [sp, #0]
 800e466:	4b62      	ldr	r3, [pc, #392]	@ (800e5f0 <SaveBilResultToFlash+0x1ac>)
 800e468:	4a62      	ldr	r2, [pc, #392]	@ (800e5f4 <SaveBilResultToFlash+0x1b0>)
 800e46a:	4963      	ldr	r1, [pc, #396]	@ (800e5f8 <SaveBilResultToFlash+0x1b4>)
 800e46c:	4863      	ldr	r0, [pc, #396]	@ (800e5fc <SaveBilResultToFlash+0x1b8>)
 800e46e:	f001 fcf7 	bl	800fe60 <RTC_GetTime>
    FlashEntry entry;
    entry.magic = MAGIC_NUMBER;
 800e472:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800e476:	61bb      	str	r3, [r7, #24]
    entry.sequence = sequenceNumber++;
 800e478:	4b61      	ldr	r3, [pc, #388]	@ (800e600 <SaveBilResultToFlash+0x1bc>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	1c59      	adds	r1, r3, #1
 800e47e:	4a60      	ldr	r2, [pc, #384]	@ (800e600 <SaveBilResultToFlash+0x1bc>)
 800e480:	6011      	str	r1, [r2, #0]
 800e482:	61fb      	str	r3, [r7, #28]
    entry.bilValue = AveragedBil; //BilResult;
 800e484:	4b5f      	ldr	r3, [pc, #380]	@ (800e604 <SaveBilResultToFlash+0x1c0>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	623b      	str	r3, [r7, #32]
    strncpy(entry.patientID, ID, sizeof(entry.patientID));
 800e48a:	f107 0318 	add.w	r3, r7, #24
 800e48e:	330c      	adds	r3, #12
 800e490:	2208      	movs	r2, #8
 800e492:	495d      	ldr	r1, [pc, #372]	@ (800e608 <SaveBilResultToFlash+0x1c4>)
 800e494:	4618      	mov	r0, r3
 800e496:	f002 fe32 	bl	80110fe <strncpy>
    // Copy RTC values
	entry.hours = hours;
 800e49a:	4b58      	ldr	r3, [pc, #352]	@ (800e5fc <SaveBilResultToFlash+0x1b8>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	entry.minutes = minutes;
 800e4a2:	4b55      	ldr	r3, [pc, #340]	@ (800e5f8 <SaveBilResultToFlash+0x1b4>)
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	entry.date = date;
 800e4aa:	4b50      	ldr	r3, [pc, #320]	@ (800e5ec <SaveBilResultToFlash+0x1a8>)
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	entry.month = month;
 800e4b2:	4b4d      	ldr	r3, [pc, #308]	@ (800e5e8 <SaveBilResultToFlash+0x1a4>)
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	entry.year = year;
 800e4ba:	4b4a      	ldr	r3, [pc, #296]	@ (800e5e4 <SaveBilResultToFlash+0x1a0>)
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    uint32_t sectorBaseAddress = GetSectorAddress(sector);
 800e4c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e4c4:	f000 f8f6 	bl	800e6b4 <GetSectorAddress>
 800e4c8:	6378      	str	r0, [r7, #52]	@ 0x34

    HAL_FLASH_Unlock();
 800e4ca:	f7f5 fb75 	bl	8003bb8 <HAL_FLASH_Unlock>

    // Write the magic number, sequence number, patient ID, and BIL value
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress, entry.magic);
 800e4ce:	69bb      	ldr	r3, [r7, #24]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	461c      	mov	r4, r3
 800e4d4:	4615      	mov	r5, r2
 800e4d6:	4622      	mov	r2, r4
 800e4d8:	462b      	mov	r3, r5
 800e4da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e4dc:	2002      	movs	r0, #2
 800e4de:	f7f5 fb17 	bl	8003b10 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 4, entry.sequence);
 800e4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4e4:	1d19      	adds	r1, r3, #4
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	4698      	mov	r8, r3
 800e4ec:	4691      	mov	r9, r2
 800e4ee:	4642      	mov	r2, r8
 800e4f0:	464b      	mov	r3, r9
 800e4f2:	2002      	movs	r0, #2
 800e4f4:	f7f5 fb0c 	bl	8003b10 <HAL_FLASH_Program>

    for (int i = 0; i < sizeof(entry.patientID); i += 4) {
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4fc:	e016      	b.n	800e52c <SaveBilResultToFlash+0xe8>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 8 + i, *(uint32_t*)&entry.patientID[i]);
 800e4fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e502:	4413      	add	r3, r2
 800e504:	f103 0108 	add.w	r1, r3, #8
 800e508:	f107 0218 	add.w	r2, r7, #24
 800e50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e50e:	3308      	adds	r3, #8
 800e510:	4413      	add	r3, r2
 800e512:	3304      	adds	r3, #4
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2200      	movs	r2, #0
 800e518:	613b      	str	r3, [r7, #16]
 800e51a:	617a      	str	r2, [r7, #20]
 800e51c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e520:	2002      	movs	r0, #2
 800e522:	f7f5 faf5 	bl	8003b10 <HAL_FLASH_Program>
    for (int i = 0; i < sizeof(entry.patientID); i += 4) {
 800e526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e528:	3304      	adds	r3, #4
 800e52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e52e:	2b07      	cmp	r3, #7
 800e530:	d9e5      	bls.n	800e4fe <SaveBilResultToFlash+0xba>
    }

    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 16, *(uint32_t*)&entry.bilValue);
 800e532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e534:	f103 0110 	add.w	r1, r3, #16
 800e538:	f107 0318 	add.w	r3, r7, #24
 800e53c:	3308      	adds	r3, #8
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2200      	movs	r2, #0
 800e542:	60bb      	str	r3, [r7, #8]
 800e544:	60fa      	str	r2, [r7, #12]
 800e546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e54a:	2002      	movs	r0, #2
 800e54c:	f7f5 fae0 	bl	8003b10 <HAL_FLASH_Program>

    // Write RTC values (stored as bytes)
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 20,
 800e550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e552:	f103 0114 	add.w	r1, r3, #20
					 (entry.hours << 24) | (entry.minutes << 16) | (entry.date << 8) | entry.month);
 800e556:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e55a:	061a      	lsls	r2, r3, #24
 800e55c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800e560:	041b      	lsls	r3, r3, #16
 800e562:	431a      	orrs	r2, r3
 800e564:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e568:	021b      	lsls	r3, r3, #8
 800e56a:	4313      	orrs	r3, r2
 800e56c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e570:	4313      	orrs	r3, r2
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 20,
 800e572:	17da      	asrs	r2, r3, #31
 800e574:	603b      	str	r3, [r7, #0]
 800e576:	607a      	str	r2, [r7, #4]
 800e578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e57c:	2002      	movs	r0, #2
 800e57e:	f7f5 fac7 	bl	8003b10 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 24, entry.year);  // year
 800e582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e584:	f103 0118 	add.w	r1, r3, #24
 800e588:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	2200      	movs	r2, #0
 800e590:	469a      	mov	sl, r3
 800e592:	4693      	mov	fp, r2
 800e594:	4652      	mov	r2, sl
 800e596:	465b      	mov	r3, fp
 800e598:	2002      	movs	r0, #2
 800e59a:	f7f5 fab9 	bl	8003b10 <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 800e59e:	f7f5 fb2d 	bl	8003bfc <HAL_FLASH_Lock>

    // Update index for the next write
    flash_index = (flash_index + 1) % MAX_BIL_READINGS;
 800e5a2:	4b0f      	ldr	r3, [pc, #60]	@ (800e5e0 <SaveBilResultToFlash+0x19c>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	1c59      	adds	r1, r3, #1
 800e5a8:	4b18      	ldr	r3, [pc, #96]	@ (800e60c <SaveBilResultToFlash+0x1c8>)
 800e5aa:	fba3 2301 	umull	r2, r3, r3, r1
 800e5ae:	1aca      	subs	r2, r1, r3
 800e5b0:	0852      	lsrs	r2, r2, #1
 800e5b2:	4413      	add	r3, r2
 800e5b4:	089a      	lsrs	r2, r3, #2
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	00db      	lsls	r3, r3, #3
 800e5ba:	1a9b      	subs	r3, r3, r2
 800e5bc:	1aca      	subs	r2, r1, r3
 800e5be:	4b08      	ldr	r3, [pc, #32]	@ (800e5e0 <SaveBilResultToFlash+0x19c>)
 800e5c0:	601a      	str	r2, [r3, #0]
    //for (int i = 0; i < 8; i++) ID[i] = 0;  // Reset ID or // memset(ID, 0, sizeof(ID));
    memset(ID, 0, sizeof(ID));
 800e5c2:	2208      	movs	r2, #8
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	4810      	ldr	r0, [pc, #64]	@ (800e608 <SaveBilResultToFlash+0x1c4>)
 800e5c8:	f002 fd91 	bl	80110ee <memset>
    memset(Buffered_ID, 0, sizeof(ID));
 800e5cc:	2208      	movs	r2, #8
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	480f      	ldr	r0, [pc, #60]	@ (800e610 <SaveBilResultToFlash+0x1cc>)
 800e5d2:	f002 fd8c 	bl	80110ee <memset>
}
 800e5d6:	bf00      	nop
 800e5d8:	3740      	adds	r7, #64	@ 0x40
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e5e0:	20001f0c 	.word	0x20001f0c
 800e5e4:	200000bf 	.word	0x200000bf
 800e5e8:	200000be 	.word	0x200000be
 800e5ec:	200000bc 	.word	0x200000bc
 800e5f0:	200000bd 	.word	0x200000bd
 800e5f4:	20001f5a 	.word	0x20001f5a
 800e5f8:	20001f59 	.word	0x20001f59
 800e5fc:	20001f58 	.word	0x20001f58
 800e600:	20001f10 	.word	0x20001f10
 800e604:	20001f48 	.word	0x20001f48
 800e608:	200016ec 	.word	0x200016ec
 800e60c:	24924925 	.word	0x24924925
 800e610:	200016d4 	.word	0x200016d4

0800e614 <ReadBilResultsFromFlash>:

// Function to read all BIL results from flash into a provided array
void ReadBilResultsFromFlash(FlashEntry* readings) {
 800e614:	b5b0      	push	{r4, r5, r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 800e61c:	2300      	movs	r3, #0
 800e61e:	617b      	str	r3, [r7, #20]
 800e620:	e020      	b.n	800e664 <ReadBilResultsFromFlash+0x50>
        uint32_t sectorBaseAddress = GetSectorAddress(i + FLASH_START_SECTOR);
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	3305      	adds	r3, #5
 800e626:	4618      	mov	r0, r3
 800e628:	f000 f844 	bl	800e6b4 <GetSectorAddress>
 800e62c:	6138      	str	r0, [r7, #16]
        FlashEntry* entry = (FlashEntry*)sectorBaseAddress;
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	60fb      	str	r3, [r7, #12]

        if (entry->magic != MAGIC_NUMBER) {                //EMPTY flash index
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 800e63a:	d117      	bne.n	800e66c <ReadBilResultsFromFlash+0x58>
            break;
        }
        //readings[i] = entry->bilValue;
        readings[i] = *entry;
 800e63c:	697a      	ldr	r2, [r7, #20]
 800e63e:	4613      	mov	r3, r2
 800e640:	00db      	lsls	r3, r3, #3
 800e642:	1a9b      	subs	r3, r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	461a      	mov	r2, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	441a      	add	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4614      	mov	r4, r2
 800e650:	461d      	mov	r5, r3
 800e652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e65a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	3301      	adds	r3, #1
 800e662:	617b      	str	r3, [r7, #20]
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	2b06      	cmp	r3, #6
 800e668:	dddb      	ble.n	800e622 <ReadBilResultsFromFlash+0xe>
    }
}
 800e66a:	e000      	b.n	800e66e <ReadBilResultsFromFlash+0x5a>
            break;
 800e66c:	bf00      	nop
}
 800e66e:	bf00      	nop
 800e670:	3718      	adds	r7, #24
 800e672:	46bd      	mov	sp, r7
 800e674:	bdb0      	pop	{r4, r5, r7, pc}

0800e676 <EraseFlashSector>:

// Function to erase a specific flash sector
void EraseFlashSector(uint32_t sector) {
 800e676:	b580      	push	{r7, lr}
 800e678:	b088      	sub	sp, #32
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 800e67e:	f7f5 fa9b 	bl	8003bb8 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t SectorError = 0;
 800e682:	2300      	movs	r3, #0
 800e684:	60bb      	str	r3, [r7, #8]

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800e686:	2300      	movs	r3, #0
 800e688:	60fb      	str	r3, [r7, #12]
    eraseInitStruct.Sector = sector;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	617b      	str	r3, [r7, #20]
    eraseInitStruct.NbSectors = 1;
 800e68e:	2301      	movs	r3, #1
 800e690:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800e692:	2302      	movs	r3, #2
 800e694:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &SectorError) != HAL_OK) {
 800e696:	f107 0208 	add.w	r2, r7, #8
 800e69a:	f107 030c 	add.w	r3, r7, #12
 800e69e:	4611      	mov	r1, r2
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7f5 fbeb 	bl	8003e7c <HAL_FLASHEx_Erase>
        // Handle error
    }
    HAL_FLASH_Lock();
 800e6a6:	f7f5 faa9 	bl	8003bfc <HAL_FLASH_Lock>
}
 800e6aa:	bf00      	nop
 800e6ac:	3720      	adds	r7, #32
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
	...

0800e6b4 <GetSectorAddress>:

// Function to get the base address of a given sector
uint32_t GetSectorAddress(uint32_t sector) {
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
    switch (sector) {
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	3b05      	subs	r3, #5
 800e6c0:	2b06      	cmp	r3, #6
 800e6c2:	d81f      	bhi.n	800e704 <GetSectorAddress+0x50>
 800e6c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e6cc <GetSectorAddress+0x18>)
 800e6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ca:	bf00      	nop
 800e6cc:	0800e6e9 	.word	0x0800e6e9
 800e6d0:	0800e6ed 	.word	0x0800e6ed
 800e6d4:	0800e6f1 	.word	0x0800e6f1
 800e6d8:	0800e6f5 	.word	0x0800e6f5
 800e6dc:	0800e6f9 	.word	0x0800e6f9
 800e6e0:	0800e6fd 	.word	0x0800e6fd
 800e6e4:	0800e701 	.word	0x0800e701
		//case FLASH_SECTOR_1: return 0x08004001;  // Sector 1 (16 KB)
		//case FLASH_SECTOR_2: return 0x08008001;  // Sector 2 (16 KB)
		//case FLASH_SECTOR_3: return 0x0800C000;  // Sector 3 (16 KB)
		//case FLASH_SECTOR_4: return 0x0801FFFF;  // Sector 4 (64 KB)
	    case FLASH_SECTOR_5: return 0x08020000;  // Sector 5 (128 KB)
 800e6e8:	4b09      	ldr	r3, [pc, #36]	@ (800e710 <GetSectorAddress+0x5c>)
 800e6ea:	e00b      	b.n	800e704 <GetSectorAddress+0x50>
		case FLASH_SECTOR_6: return 0x08040000;  // Sector 6 (128 KB)
 800e6ec:	4b09      	ldr	r3, [pc, #36]	@ (800e714 <GetSectorAddress+0x60>)
 800e6ee:	e009      	b.n	800e704 <GetSectorAddress+0x50>
		case FLASH_SECTOR_7: return 0x08060000;  // Sector 7 (128 KB)
 800e6f0:	4b09      	ldr	r3, [pc, #36]	@ (800e718 <GetSectorAddress+0x64>)
 800e6f2:	e007      	b.n	800e704 <GetSectorAddress+0x50>
		case FLASH_SECTOR_8: return 0x08080000;  // Sector 8 (128 KB)
 800e6f4:	4b09      	ldr	r3, [pc, #36]	@ (800e71c <GetSectorAddress+0x68>)
 800e6f6:	e005      	b.n	800e704 <GetSectorAddress+0x50>
		case FLASH_SECTOR_9: return 0x080A0000;  // Sector 9 (128 KB)
 800e6f8:	4b09      	ldr	r3, [pc, #36]	@ (800e720 <GetSectorAddress+0x6c>)
 800e6fa:	e003      	b.n	800e704 <GetSectorAddress+0x50>
		case FLASH_SECTOR_10: return 0x080C0000;  // Sector 10 (128 KB)
 800e6fc:	4b09      	ldr	r3, [pc, #36]	@ (800e724 <GetSectorAddress+0x70>)
 800e6fe:	e001      	b.n	800e704 <GetSectorAddress+0x50>
		case FLASH_SECTOR_11: return 0x080E0000;  // Sector 11 (128 KB)
 800e700:	4b09      	ldr	r3, [pc, #36]	@ (800e728 <GetSectorAddress+0x74>)
 800e702:	e7ff      	b.n	800e704 <GetSectorAddress+0x50>
		// Add more sectors based on your memory layout
		//default: return 0x08000000;  // Invalid sector (default fallback)
		////default: return 0xFFFFFFFF;  // Invalid sector
    }
}
 800e704:	4618      	mov	r0, r3
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr
 800e710:	08020000 	.word	0x08020000
 800e714:	08040000 	.word	0x08040000
 800e718:	08060000 	.word	0x08060000
 800e71c:	08080000 	.word	0x08080000
 800e720:	080a0000 	.word	0x080a0000
 800e724:	080c0000 	.word	0x080c0000
 800e728:	080e0000 	.word	0x080e0000

0800e72c <LCD>:
uint8_t filterIndex = 0;       			 // Current index in the filter array
float filteredVoltage = 0.0;    		 // Filtered voltage value
int displayPercFlag = 0;

void LCD(void)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	af00      	add	r7, sp, #0
	LCD_DisplayMenu();
 800e730:	f000 f804 	bl	800e73c <LCD_DisplayMenu>
    LCD_HandleButtonPress();
 800e734:	f000 fc60 	bl	800eff8 <LCD_HandleButtonPress>
}
 800e738:	bf00      	nop
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <LCD_DisplayMenu>:


// Function to display the current menu
void LCD_DisplayMenu(void) {
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b094      	sub	sp, #80	@ 0x50
 800e740:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800e742:	2000      	movs	r0, #0
 800e744:	f7f3 f974 	bl	8001a30 <ssd1306_Fill>
    HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET); // Turn off Indication LED
 800e748:	2200      	movs	r2, #0
 800e74a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e74e:	48a7      	ldr	r0, [pc, #668]	@ (800e9ec <LCD_DisplayMenu+0x2b0>)
 800e750:	f7f5 fe6a 	bl	8004428 <HAL_GPIO_WritePin>
    DisplayPercentage();
 800e754:	f001 f916 	bl	800f984 <DisplayPercentage>
    RTC_DisplayTime();
 800e758:	f001 fbe4 	bl	800ff24 <RTC_DisplayTime>
    TimeSetDone=0;
 800e75c:	4ba4      	ldr	r3, [pc, #656]	@ (800e9f0 <LCD_DisplayMenu+0x2b4>)
 800e75e:	2200      	movs	r2, #0
 800e760:	601a      	str	r2, [r3, #0]
    //strncpy(entry.patientID, ID, sizeof(entry.patientID));  // Copy the ID
    HAL_GPIO_WritePin(GPIOD, Bcode_INIT_Pin, GPIO_PIN_RESET); 				// Turn off BT
 800e762:	2200      	movs	r2, #0
 800e764:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800e768:	48a2      	ldr	r0, [pc, #648]	@ (800e9f4 <LCD_DisplayMenu+0x2b8>)
 800e76a:	f7f5 fe5d 	bl	8004428 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, BT_INIT_Pin, GPIO_PIN_RESET); 				    // Turn off BT
 800e76e:	2200      	movs	r2, #0
 800e770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e774:	489f      	ldr	r0, [pc, #636]	@ (800e9f4 <LCD_DisplayMenu+0x2b8>)
 800e776:	f7f5 fe57 	bl	8004428 <HAL_GPIO_WritePin>

    switch (currentMenu)
 800e77a:	4b9f      	ldr	r3, [pc, #636]	@ (800e9f8 <LCD_DisplayMenu+0x2bc>)
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	2b06      	cmp	r3, #6
 800e780:	f200 8402 	bhi.w	800ef88 <LCD_DisplayMenu+0x84c>
 800e784:	a201      	add	r2, pc, #4	@ (adr r2, 800e78c <LCD_DisplayMenu+0x50>)
 800e786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e78a:	bf00      	nop
 800e78c:	0800e7a9 	.word	0x0800e7a9
 800e790:	0800e809 	.word	0x0800e809
 800e794:	0800e8e9 	.word	0x0800e8e9
 800e798:	0800ea97 	.word	0x0800ea97
 800e79c:	0800ebdd 	.word	0x0800ebdd
 800e7a0:	0800ee5f 	.word	0x0800ee5f
 800e7a4:	0800ed15 	.word	0x0800ed15
    {
    	case MENU_START_DEV:
			ssd1306_SetCursor(0, 0);
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	f7f3 fa8a 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_DrawBitmap(0,0,image_data_logo_text,128,32, White );          //AYMED text
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	9301      	str	r3, [sp, #4]
 800e7b4:	2320      	movs	r3, #32
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	2380      	movs	r3, #128	@ 0x80
 800e7ba:	4a90      	ldr	r2, [pc, #576]	@ (800e9fc <LCD_DisplayMenu+0x2c0>)
 800e7bc:	2100      	movs	r1, #0
 800e7be:	2000      	movs	r0, #0
 800e7c0:	f7f3 fae6 	bl	8001d90 <ssd1306_DrawBitmap>
			//---------------------------------------------------//
			ssd1306_SetCursor(34, 38);  //48
 800e7c4:	2126      	movs	r1, #38	@ 0x26
 800e7c6:	2022      	movs	r0, #34	@ 0x22
 800e7c8:	f7f3 fa7c 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("VISHNE v4", Font_7x10, White);					  //Device's Version
 800e7cc:	4b8c      	ldr	r3, [pc, #560]	@ (800ea00 <LCD_DisplayMenu+0x2c4>)
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	9200      	str	r2, [sp, #0]
 800e7d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e7d4:	488b      	ldr	r0, [pc, #556]	@ (800ea04 <LCD_DisplayMenu+0x2c8>)
 800e7d6:	f7f3 fa4f 	bl	8001c78 <ssd1306_WriteString>
			//---------------------------------------------------//
			ssd1306_SetCursor(5, 55);  //48
 800e7da:	2137      	movs	r1, #55	@ 0x37
 800e7dc:	2005      	movs	r0, #5
 800e7de:	f7f3 fa71 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("EnterID", Font_6x8, White);		         // Prev btn (left) -> with ID
 800e7e2:	4b89      	ldr	r3, [pc, #548]	@ (800ea08 <LCD_DisplayMenu+0x2cc>)
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	9200      	str	r2, [sp, #0]
 800e7e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e7ea:	4888      	ldr	r0, [pc, #544]	@ (800ea0c <LCD_DisplayMenu+0x2d0>)
 800e7ec:	f7f3 fa44 	bl	8001c78 <ssd1306_WriteString>
			ssd1306_SetCursor(90, 55);  //48
 800e7f0:	2137      	movs	r1, #55	@ 0x37
 800e7f2:	205a      	movs	r0, #90	@ 0x5a
 800e7f4:	f7f3 fa66 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("SkipID", Font_6x8, White);					 // Next btn (right)-> without ID
 800e7f8:	4b83      	ldr	r3, [pc, #524]	@ (800ea08 <LCD_DisplayMenu+0x2cc>)
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	9200      	str	r2, [sp, #0]
 800e7fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e800:	4883      	ldr	r0, [pc, #524]	@ (800ea10 <LCD_DisplayMenu+0x2d4>)
 800e802:	f7f3 fa39 	bl	8001c78 <ssd1306_WriteString>

    		break;
 800e806:	e3bf      	b.n	800ef88 <LCD_DisplayMenu+0x84c>
      // New menu for scanning patient ID
		case MENU_READ_ID:
			HAL_GPIO_WritePin(GPIOD, Bcode_INIT_Pin, GPIO_PIN_SET); 				// Turn on BT
 800e808:	2201      	movs	r2, #1
 800e80a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800e80e:	4879      	ldr	r0, [pc, #484]	@ (800e9f4 <LCD_DisplayMenu+0x2b8>)
 800e810:	f7f5 fe0a 	bl	8004428 <HAL_GPIO_WritePin>
			ssd1306_SetCursor(5, 56);
 800e814:	2138      	movs	r1, #56	@ 0x38
 800e816:	2005      	movs	r0, #5
 800e818:	f7f3 fa54 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800e81c:	4b7a      	ldr	r3, [pc, #488]	@ (800ea08 <LCD_DisplayMenu+0x2cc>)
 800e81e:	2201      	movs	r2, #1
 800e820:	9200      	str	r2, [sp, #0]
 800e822:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e824:	487b      	ldr	r0, [pc, #492]	@ (800ea14 <LCD_DisplayMenu+0x2d8>)
 800e826:	f7f3 fa27 	bl	8001c78 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800e82a:	2138      	movs	r1, #56	@ 0x38
 800e82c:	2066      	movs	r0, #102	@ 0x66
 800e82e:	f7f3 fa49 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800e832:	4b75      	ldr	r3, [pc, #468]	@ (800ea08 <LCD_DisplayMenu+0x2cc>)
 800e834:	2201      	movs	r2, #1
 800e836:	9200      	str	r2, [sp, #0]
 800e838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e83a:	4877      	ldr	r0, [pc, #476]	@ (800ea18 <LCD_DisplayMenu+0x2dc>)
 800e83c:	f7f3 fa1c 	bl	8001c78 <ssd1306_WriteString>
			//ssd1306_SetCursor(10, 0);
			//ssd1306_WriteString("Scan ID", Font_7x10, White);
			ssd1306_SetCursor(10, 15);
 800e840:	210f      	movs	r1, #15
 800e842:	200a      	movs	r0, #10
 800e844:	f7f3 fa3e 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("Patient ID:", Font_7x10, White);
 800e848:	4b6d      	ldr	r3, [pc, #436]	@ (800ea00 <LCD_DisplayMenu+0x2c4>)
 800e84a:	2201      	movs	r2, #1
 800e84c:	9200      	str	r2, [sp, #0]
 800e84e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e850:	4872      	ldr	r0, [pc, #456]	@ (800ea1c <LCD_DisplayMenu+0x2e0>)
 800e852:	f7f3 fa11 	bl	8001c78 <ssd1306_WriteString>
			ssd1306_SetCursor(10, 35);
 800e856:	2123      	movs	r1, #35	@ 0x23
 800e858:	200a      	movs	r0, #10
 800e85a:	f7f3 fa33 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString(ID, Font_11x18, White);  //Font_11x18 // Display scanned ID
 800e85e:	4b70      	ldr	r3, [pc, #448]	@ (800ea20 <LCD_DisplayMenu+0x2e4>)
 800e860:	2201      	movs	r2, #1
 800e862:	9200      	str	r2, [sp, #0]
 800e864:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e866:	486f      	ldr	r0, [pc, #444]	@ (800ea24 <LCD_DisplayMenu+0x2e8>)
 800e868:	f7f3 fa06 	bl	8001c78 <ssd1306_WriteString>

			if (strlen(ID) == 0) {
 800e86c:	4b6d      	ldr	r3, [pc, #436]	@ (800ea24 <LCD_DisplayMenu+0x2e8>)
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	f040 8384 	bne.w	800ef7e <LCD_DisplayMenu+0x842>
				ssd1306_SetCursor(10, 35);
 800e876:	2123      	movs	r1, #35	@ 0x23
 800e878:	200a      	movs	r0, #10
 800e87a:	f7f3 fa23 	bl	8001cc4 <ssd1306_SetCursor>
				//ssd1306_WriteString("Waiting for ID", Font_7x10, White); // Display message if no ID scanned

				// Generate moving dots based on the dotCounter
				switch (dotCounter % 3) {
 800e87e:	4b6a      	ldr	r3, [pc, #424]	@ (800ea28 <LCD_DisplayMenu+0x2ec>)
 800e880:	6819      	ldr	r1, [r3, #0]
 800e882:	4b6a      	ldr	r3, [pc, #424]	@ (800ea2c <LCD_DisplayMenu+0x2f0>)
 800e884:	fb83 3201 	smull	r3, r2, r3, r1
 800e888:	17cb      	asrs	r3, r1, #31
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	461a      	mov	r2, r3
 800e88e:	0052      	lsls	r2, r2, #1
 800e890:	441a      	add	r2, r3
 800e892:	1a8b      	subs	r3, r1, r2
 800e894:	2b02      	cmp	r3, #2
 800e896:	d016      	beq.n	800e8c6 <LCD_DisplayMenu+0x18a>
 800e898:	2b02      	cmp	r3, #2
 800e89a:	dc1c      	bgt.n	800e8d6 <LCD_DisplayMenu+0x19a>
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d002      	beq.n	800e8a6 <LCD_DisplayMenu+0x16a>
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d008      	beq.n	800e8b6 <LCD_DisplayMenu+0x17a>
 800e8a4:	e017      	b.n	800e8d6 <LCD_DisplayMenu+0x19a>
					case 0:
						ssd1306_WriteString("Wait for ID .", Font_7x10, White);  // One dot
 800e8a6:	4b56      	ldr	r3, [pc, #344]	@ (800ea00 <LCD_DisplayMenu+0x2c4>)
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	9200      	str	r2, [sp, #0]
 800e8ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e8ae:	4860      	ldr	r0, [pc, #384]	@ (800ea30 <LCD_DisplayMenu+0x2f4>)
 800e8b0:	f7f3 f9e2 	bl	8001c78 <ssd1306_WriteString>
						break;
 800e8b4:	e00f      	b.n	800e8d6 <LCD_DisplayMenu+0x19a>
					case 1:
						ssd1306_WriteString("Wait for ID ..", Font_7x10, White);  // Two dots
 800e8b6:	4b52      	ldr	r3, [pc, #328]	@ (800ea00 <LCD_DisplayMenu+0x2c4>)
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	9200      	str	r2, [sp, #0]
 800e8bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e8be:	485d      	ldr	r0, [pc, #372]	@ (800ea34 <LCD_DisplayMenu+0x2f8>)
 800e8c0:	f7f3 f9da 	bl	8001c78 <ssd1306_WriteString>
						break;
 800e8c4:	e007      	b.n	800e8d6 <LCD_DisplayMenu+0x19a>
					case 2:
						ssd1306_WriteString("Wait for ID ...", Font_7x10, White);  // Three dots
 800e8c6:	4b4e      	ldr	r3, [pc, #312]	@ (800ea00 <LCD_DisplayMenu+0x2c4>)
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	9200      	str	r2, [sp, #0]
 800e8cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e8ce:	485a      	ldr	r0, [pc, #360]	@ (800ea38 <LCD_DisplayMenu+0x2fc>)
 800e8d0:	f7f3 f9d2 	bl	8001c78 <ssd1306_WriteString>
						break;
 800e8d4:	bf00      	nop
				}
				// Increment dotCounter to cycle through dots
				//dotCounter++;   // TIM10 used
				if (dotCounter >= 60) {  // Reset counter after 60 refresh cycles (arbitrary limit)
 800e8d6:	4b54      	ldr	r3, [pc, #336]	@ (800ea28 <LCD_DisplayMenu+0x2ec>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2b3b      	cmp	r3, #59	@ 0x3b
 800e8dc:	f340 834f 	ble.w	800ef7e <LCD_DisplayMenu+0x842>
					dotCounter = 0;
 800e8e0:	4b51      	ldr	r3, [pc, #324]	@ (800ea28 <LCD_DisplayMenu+0x2ec>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 800e8e6:	e34a      	b.n	800ef7e <LCD_DisplayMenu+0x842>

        case MENU_SET_AVG:
			ssd1306_SetCursor(5, 56);
 800e8e8:	2138      	movs	r1, #56	@ 0x38
 800e8ea:	2005      	movs	r0, #5
 800e8ec:	f7f3 f9ea 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800e8f0:	4b45      	ldr	r3, [pc, #276]	@ (800ea08 <LCD_DisplayMenu+0x2cc>)
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	9200      	str	r2, [sp, #0]
 800e8f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e8f8:	4846      	ldr	r0, [pc, #280]	@ (800ea14 <LCD_DisplayMenu+0x2d8>)
 800e8fa:	f7f3 f9bd 	bl	8001c78 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800e8fe:	2138      	movs	r1, #56	@ 0x38
 800e900:	2066      	movs	r0, #102	@ 0x66
 800e902:	f7f3 f9df 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800e906:	4b40      	ldr	r3, [pc, #256]	@ (800ea08 <LCD_DisplayMenu+0x2cc>)
 800e908:	2201      	movs	r2, #1
 800e90a:	9200      	str	r2, [sp, #0]
 800e90c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e90e:	4842      	ldr	r0, [pc, #264]	@ (800ea18 <LCD_DisplayMenu+0x2dc>)
 800e910:	f7f3 f9b2 	bl	8001c78 <ssd1306_WriteString>
        	//ssd1306_FillRectangle(126, 0, 128, 128, Black);
        	DisplayPercentage();
 800e914:	f001 f836 	bl	800f984 <DisplayPercentage>
        	RTC_DisplayTime();
 800e918:	f001 fb04 	bl	800ff24 <RTC_DisplayTime>
        	testDone=0;                       // Do not read any result here
 800e91c:	4b47      	ldr	r3, [pc, #284]	@ (800ea3c <LCD_DisplayMenu+0x300>)
 800e91e:	2200      	movs	r2, #0
 800e920:	701a      	strb	r2, [r3, #0]
        	StartTestMenuFlag = 2;            // Not in StartMenu ==> Don't init Spectrometer
 800e922:	4b47      	ldr	r3, [pc, #284]	@ (800ea40 <LCD_DisplayMenu+0x304>)
 800e924:	2202      	movs	r2, #2
 800e926:	601a      	str	r2, [r3, #0]

        	if (currentCursor == CURSOR_ON_MENU) {
 800e928:	4b46      	ldr	r3, [pc, #280]	@ (800ea44 <LCD_DisplayMenu+0x308>)
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d121      	bne.n	800e974 <LCD_DisplayMenu+0x238>
				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 800e930:	4b45      	ldr	r3, [pc, #276]	@ (800ea48 <LCD_DisplayMenu+0x30c>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	b2db      	uxtb	r3, r3
 800e936:	3b05      	subs	r3, #5
 800e938:	b2d8      	uxtb	r0, r3
 800e93a:	4b44      	ldr	r3, [pc, #272]	@ (800ea4c <LCD_DisplayMenu+0x310>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	3b05      	subs	r3, #5
 800e942:	b2d9      	uxtb	r1, r3
 800e944:	2301      	movs	r3, #1
 800e946:	9300      	str	r3, [sp, #0]
 800e948:	2323      	movs	r3, #35	@ 0x23
 800e94a:	225a      	movs	r2, #90	@ 0x5a
 800e94c:	f7f3 f9d2 	bl	8001cf4 <ssd1306_FillRectangle>
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800e950:	4b3d      	ldr	r3, [pc, #244]	@ (800ea48 <LCD_DisplayMenu+0x30c>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	b2db      	uxtb	r3, r3
 800e956:	4a3d      	ldr	r2, [pc, #244]	@ (800ea4c <LCD_DisplayMenu+0x310>)
 800e958:	6812      	ldr	r2, [r2, #0]
 800e95a:	b2d2      	uxtb	r2, r2
 800e95c:	4611      	mov	r1, r2
 800e95e:	4618      	mov	r0, r3
 800e960:	f7f3 f9b0 	bl	8001cc4 <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, Black);
 800e964:	4b26      	ldr	r3, [pc, #152]	@ (800ea00 <LCD_DisplayMenu+0x2c4>)
 800e966:	2200      	movs	r2, #0
 800e968:	9200      	str	r2, [sp, #0]
 800e96a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e96c:	4838      	ldr	r0, [pc, #224]	@ (800ea50 <LCD_DisplayMenu+0x314>)
 800e96e:	f7f3 f983 	bl	8001c78 <ssd1306_WriteString>
 800e972:	e010      	b.n	800e996 <LCD_DisplayMenu+0x25a>
        	}else{
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800e974:	4b34      	ldr	r3, [pc, #208]	@ (800ea48 <LCD_DisplayMenu+0x30c>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	4a34      	ldr	r2, [pc, #208]	@ (800ea4c <LCD_DisplayMenu+0x310>)
 800e97c:	6812      	ldr	r2, [r2, #0]
 800e97e:	b2d2      	uxtb	r2, r2
 800e980:	4611      	mov	r1, r2
 800e982:	4618      	mov	r0, r3
 800e984:	f7f3 f99e 	bl	8001cc4 <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, White);
 800e988:	4b1d      	ldr	r3, [pc, #116]	@ (800ea00 <LCD_DisplayMenu+0x2c4>)
 800e98a:	2201      	movs	r2, #1
 800e98c:	9200      	str	r2, [sp, #0]
 800e98e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e990:	482f      	ldr	r0, [pc, #188]	@ (800ea50 <LCD_DisplayMenu+0x314>)
 800e992:	f7f3 f971 	bl	8001c78 <ssd1306_WriteString>
        	}


            if (currentCursor == CURSOR_ON_VALUE) {
 800e996:	4b2b      	ldr	r3, [pc, #172]	@ (800ea44 <LCD_DisplayMenu+0x308>)
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	2b01      	cmp	r3, #1
 800e99c:	d162      	bne.n	800ea64 <LCD_DisplayMenu+0x328>
            	ssd1306_FillRectangle(set_line_X, set_line_Y, 72, 52, White);
 800e99e:	4b2d      	ldr	r3, [pc, #180]	@ (800ea54 <LCD_DisplayMenu+0x318>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	b2d8      	uxtb	r0, r3
 800e9a4:	4b2c      	ldr	r3, [pc, #176]	@ (800ea58 <LCD_DisplayMenu+0x31c>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	b2d9      	uxtb	r1, r3
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	2334      	movs	r3, #52	@ 0x34
 800e9b0:	2248      	movs	r2, #72	@ 0x48
 800e9b2:	f7f3 f99f 	bl	8001cf4 <ssd1306_FillRectangle>
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 800e9b6:	4b27      	ldr	r3, [pc, #156]	@ (800ea54 <LCD_DisplayMenu+0x318>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	4a26      	ldr	r2, [pc, #152]	@ (800ea58 <LCD_DisplayMenu+0x31c>)
 800e9be:	6812      	ldr	r2, [r2, #0]
 800e9c0:	b2d2      	uxtb	r2, r2
 800e9c2:	4611      	mov	r1, r2
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7f3 f97d 	bl	8001cc4 <ssd1306_SetCursor>
            	 char avgStr[10];
				 snprintf(avgStr, sizeof(avgStr), "-%d-", avgValue);
 800e9ca:	4b24      	ldr	r3, [pc, #144]	@ (800ea5c <LCD_DisplayMenu+0x320>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f107 0010 	add.w	r0, r7, #16
 800e9d2:	4a23      	ldr	r2, [pc, #140]	@ (800ea60 <LCD_DisplayMenu+0x324>)
 800e9d4:	210a      	movs	r1, #10
 800e9d6:	f002 faf9 	bl	8010fcc <sniprintf>
				 ssd1306_WriteString(avgStr, Font_11x18, Black);
 800e9da:	4b11      	ldr	r3, [pc, #68]	@ (800ea20 <LCD_DisplayMenu+0x2e4>)
 800e9dc:	f107 0010 	add.w	r0, r7, #16
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	9200      	str	r2, [sp, #0]
 800e9e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9e6:	f7f3 f947 	bl	8001c78 <ssd1306_WriteString>
            	char avgStr[10];
				snprintf(avgStr, sizeof(avgStr), "-%d-", avgValue);
				ssd1306_WriteString(avgStr, Font_11x18, White);
            }

            break;
 800e9ea:	e2cd      	b.n	800ef88 <LCD_DisplayMenu+0x84c>
 800e9ec:	40021000 	.word	0x40021000
 800e9f0:	20001f54 	.word	0x20001f54
 800e9f4:	40020c00 	.word	0x40020c00
 800e9f8:	20001f14 	.word	0x20001f14
 800e9fc:	0801507c 	.word	0x0801507c
 800ea00:	08014d34 	.word	0x08014d34
 800ea04:	08013144 	.word	0x08013144
 800ea08:	08014d28 	.word	0x08014d28
 800ea0c:	08013150 	.word	0x08013150
 800ea10:	08013158 	.word	0x08013158
 800ea14:	08013160 	.word	0x08013160
 800ea18:	08013168 	.word	0x08013168
 800ea1c:	08013170 	.word	0x08013170
 800ea20:	08014d40 	.word	0x08014d40
 800ea24:	200016ec 	.word	0x200016ec
 800ea28:	20001f7c 	.word	0x20001f7c
 800ea2c:	55555556 	.word	0x55555556
 800ea30:	0801317c 	.word	0x0801317c
 800ea34:	0801318c 	.word	0x0801318c
 800ea38:	0801319c 	.word	0x0801319c
 800ea3c:	20001efa 	.word	0x20001efa
 800ea40:	20001f50 	.word	0x20001f50
 800ea44:	20001f15 	.word	0x20001f15
 800ea48:	200000ac 	.word	0x200000ac
 800ea4c:	200000b0 	.word	0x200000b0
 800ea50:	080131ac 	.word	0x080131ac
 800ea54:	200000b4 	.word	0x200000b4
 800ea58:	200000b8 	.word	0x200000b8
 800ea5c:	2000009c 	.word	0x2000009c
 800ea60:	080131b4 	.word	0x080131b4
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 800ea64:	4b90      	ldr	r3, [pc, #576]	@ (800eca8 <LCD_DisplayMenu+0x56c>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	4a90      	ldr	r2, [pc, #576]	@ (800ecac <LCD_DisplayMenu+0x570>)
 800ea6c:	6812      	ldr	r2, [r2, #0]
 800ea6e:	b2d2      	uxtb	r2, r2
 800ea70:	4611      	mov	r1, r2
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7f3 f926 	bl	8001cc4 <ssd1306_SetCursor>
				snprintf(avgStr, sizeof(avgStr), "-%d-", avgValue);
 800ea78:	4b8d      	ldr	r3, [pc, #564]	@ (800ecb0 <LCD_DisplayMenu+0x574>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	1d38      	adds	r0, r7, #4
 800ea7e:	4a8d      	ldr	r2, [pc, #564]	@ (800ecb4 <LCD_DisplayMenu+0x578>)
 800ea80:	210a      	movs	r1, #10
 800ea82:	f002 faa3 	bl	8010fcc <sniprintf>
				ssd1306_WriteString(avgStr, Font_11x18, White);
 800ea86:	4b8c      	ldr	r3, [pc, #560]	@ (800ecb8 <LCD_DisplayMenu+0x57c>)
 800ea88:	1d38      	adds	r0, r7, #4
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	9200      	str	r2, [sp, #0]
 800ea8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ea90:	f7f3 f8f2 	bl	8001c78 <ssd1306_WriteString>
            break;
 800ea94:	e278      	b.n	800ef88 <LCD_DisplayMenu+0x84c>

        case MENU_START_TEST:
			ssd1306_SetCursor(5, 56);
 800ea96:	2138      	movs	r1, #56	@ 0x38
 800ea98:	2005      	movs	r0, #5
 800ea9a:	f7f3 f913 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800ea9e:	4b87      	ldr	r3, [pc, #540]	@ (800ecbc <LCD_DisplayMenu+0x580>)
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	9200      	str	r2, [sp, #0]
 800eaa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eaa6:	4886      	ldr	r0, [pc, #536]	@ (800ecc0 <LCD_DisplayMenu+0x584>)
 800eaa8:	f7f3 f8e6 	bl	8001c78 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800eaac:	2138      	movs	r1, #56	@ 0x38
 800eaae:	2066      	movs	r0, #102	@ 0x66
 800eab0:	f7f3 f908 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800eab4:	4b81      	ldr	r3, [pc, #516]	@ (800ecbc <LCD_DisplayMenu+0x580>)
 800eab6:	2201      	movs	r2, #1
 800eab8:	9200      	str	r2, [sp, #0]
 800eaba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eabc:	4881      	ldr	r0, [pc, #516]	@ (800ecc4 <LCD_DisplayMenu+0x588>)
 800eabe:	f7f3 f8db 	bl	8001c78 <ssd1306_WriteString>
        	DisplayPercentage();
 800eac2:	f000 ff5f 	bl	800f984 <DisplayPercentage>
        	RTC_DisplayTime();
 800eac6:	f001 fa2d 	bl	800ff24 <RTC_DisplayTime>
        	StartTestMenuFlag = 1;						//  in StartMenu
 800eaca:	4b7f      	ldr	r3, [pc, #508]	@ (800ecc8 <LCD_DisplayMenu+0x58c>)
 800eacc:	2201      	movs	r2, #1
 800eace:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU){
 800ead0:	4b7e      	ldr	r3, [pc, #504]	@ (800eccc <LCD_DisplayMenu+0x590>)
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d120      	bne.n	800eb1a <LCD_DisplayMenu+0x3de>
            	ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 100, 35, White);
 800ead8:	4b7d      	ldr	r3, [pc, #500]	@ (800ecd0 <LCD_DisplayMenu+0x594>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	3b05      	subs	r3, #5
 800eae0:	b2d8      	uxtb	r0, r3
 800eae2:	4b7c      	ldr	r3, [pc, #496]	@ (800ecd4 <LCD_DisplayMenu+0x598>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	3b05      	subs	r3, #5
 800eaea:	b2d9      	uxtb	r1, r3
 800eaec:	2301      	movs	r3, #1
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	2323      	movs	r3, #35	@ 0x23
 800eaf2:	2264      	movs	r2, #100	@ 0x64
 800eaf4:	f7f3 f8fe 	bl	8001cf4 <ssd1306_FillRectangle>
            	ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800eaf8:	4b75      	ldr	r3, [pc, #468]	@ (800ecd0 <LCD_DisplayMenu+0x594>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	4a75      	ldr	r2, [pc, #468]	@ (800ecd4 <LCD_DisplayMenu+0x598>)
 800eb00:	6812      	ldr	r2, [r2, #0]
 800eb02:	b2d2      	uxtb	r2, r2
 800eb04:	4611      	mov	r1, r2
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7f3 f8dc 	bl	8001cc4 <ssd1306_SetCursor>
				ssd1306_WriteString("StartTest", Font_7x10, Black);
 800eb0c:	4b72      	ldr	r3, [pc, #456]	@ (800ecd8 <LCD_DisplayMenu+0x59c>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	9200      	str	r2, [sp, #0]
 800eb12:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eb14:	4871      	ldr	r0, [pc, #452]	@ (800ecdc <LCD_DisplayMenu+0x5a0>)
 800eb16:	f7f3 f8af 	bl	8001c78 <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 10, set_line_Y);
 800eb1a:	4b63      	ldr	r3, [pc, #396]	@ (800eca8 <LCD_DisplayMenu+0x56c>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	3b0a      	subs	r3, #10
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	4a61      	ldr	r2, [pc, #388]	@ (800ecac <LCD_DisplayMenu+0x570>)
 800eb26:	6812      	ldr	r2, [r2, #0]
 800eb28:	b2d2      	uxtb	r2, r2
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7f3 f8c9 	bl	8001cc4 <ssd1306_SetCursor>
            char testStr[20];
            snprintf(testStr, sizeof(testStr), "%d of %d", currentTest, avgValue);
 800eb32:	4b6b      	ldr	r3, [pc, #428]	@ (800ece0 <LCD_DisplayMenu+0x5a4>)
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	4b5e      	ldr	r3, [pc, #376]	@ (800ecb0 <LCD_DisplayMenu+0x574>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	4613      	mov	r3, r2
 800eb42:	4a68      	ldr	r2, [pc, #416]	@ (800ece4 <LCD_DisplayMenu+0x5a8>)
 800eb44:	2114      	movs	r1, #20
 800eb46:	f002 fa41 	bl	8010fcc <sniprintf>
            ssd1306_WriteString(testStr, Font_11x18, White);
 800eb4a:	4b5b      	ldr	r3, [pc, #364]	@ (800ecb8 <LCD_DisplayMenu+0x57c>)
 800eb4c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800eb50:	2201      	movs	r2, #1
 800eb52:	9200      	str	r2, [sp, #0]
 800eb54:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eb56:	f7f3 f88f 	bl	8001c78 <ssd1306_WriteString>

            DoesTestComplete();            			    // if test btn pressed ==> ++currentTest
 800eb5a:	f001 f89f 	bl	800fc9c <DoesTestComplete>

            if (currentTest > avgValue){
 800eb5e:	4b60      	ldr	r3, [pc, #384]	@ (800ece0 <LCD_DisplayMenu+0x5a4>)
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	4b53      	ldr	r3, [pc, #332]	@ (800ecb0 <LCD_DisplayMenu+0x574>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	dd31      	ble.n	800ebce <LCD_DisplayMenu+0x492>
            	currentTest = 1;
 800eb6a:	4b5d      	ldr	r3, [pc, #372]	@ (800ece0 <LCD_DisplayMenu+0x5a4>)
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	601a      	str	r2, [r3, #0]
            	//*********Bil_AVG and FlashWrite***********//
            	MeasureAverage(); //HAL_Delay(10);
 800eb70:	f001 f80c 	bl	800fb8c <MeasureAverage>
            	SaveBilResultToFlash();
 800eb74:	f7ff fc66 	bl	800e444 <SaveBilResultToFlash>
            	//************RESET************************//
				for (int i = 0; i <= 12-1; i++) BilArray[i]=0;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb7c:	e009      	b.n	800eb92 <LCD_DisplayMenu+0x456>
 800eb7e:	4a5a      	ldr	r2, [pc, #360]	@ (800ece8 <LCD_DisplayMenu+0x5ac>)
 800eb80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	4413      	add	r3, r2
 800eb86:	f04f 0200 	mov.w	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]
 800eb8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb8e:	3301      	adds	r3, #1
 800eb90:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb94:	2b0b      	cmp	r3, #11
 800eb96:	ddf2      	ble.n	800eb7e <LCD_DisplayMenu+0x442>
				SumBil = 0;
 800eb98:	4b54      	ldr	r3, [pc, #336]	@ (800ecec <LCD_DisplayMenu+0x5b0>)
 800eb9a:	f04f 0200 	mov.w	r2, #0
 800eb9e:	601a      	str	r2, [r3, #0]
				//AveragedBil = 0;                 // Flashing done but Displaying on LCD -> can not reset
				BilResult=0;
 800eba0:	4b53      	ldr	r3, [pc, #332]	@ (800ecf0 <LCD_DisplayMenu+0x5b4>)
 800eba2:	f04f 0200 	mov.w	r2, #0
 800eba6:	601a      	str	r2, [r3, #0]
				memset(ID, 0, sizeof(ID));         //Bcode reset
 800eba8:	2208      	movs	r2, #8
 800ebaa:	2100      	movs	r1, #0
 800ebac:	4851      	ldr	r0, [pc, #324]	@ (800ecf4 <LCD_DisplayMenu+0x5b8>)
 800ebae:	f002 fa9e 	bl	80110ee <memset>
				memset(Buffered_ID, 0, sizeof(ID));
 800ebb2:	2208      	movs	r2, #8
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	4850      	ldr	r0, [pc, #320]	@ (800ecf8 <LCD_DisplayMenu+0x5bc>)
 800ebb8:	f002 fa99 	bl	80110ee <memset>
				ID_idx=0;
 800ebbc:	4b4f      	ldr	r3, [pc, #316]	@ (800ecfc <LCD_DisplayMenu+0x5c0>)
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	601a      	str	r2, [r3, #0]
            	//***********************//
                currentMenu = MENU_SHOW_RESULT;
 800ebc2:	4b4f      	ldr	r3, [pc, #316]	@ (800ed00 <LCD_DisplayMenu+0x5c4>)
 800ebc4:	2204      	movs	r2, #4
 800ebc6:	701a      	strb	r2, [r3, #0]
                LCD_DisplayMenu();
 800ebc8:	f7ff fdb8 	bl	800e73c <LCD_DisplayMenu>
                HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_SET); 			// IND LED
                /*memset(ID, 0, sizeof(ID));             //Bcode reset
                memset(Buffered_ID, 0, sizeof(ID));
                ID_idx=0;*/
            }
            break;
 800ebcc:	e1dc      	b.n	800ef88 <LCD_DisplayMenu+0x84c>
                HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_SET); 			// IND LED
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ebd4:	484b      	ldr	r0, [pc, #300]	@ (800ed04 <LCD_DisplayMenu+0x5c8>)
 800ebd6:	f7f5 fc27 	bl	8004428 <HAL_GPIO_WritePin>
            break;
 800ebda:	e1d5      	b.n	800ef88 <LCD_DisplayMenu+0x84c>

        case MENU_SHOW_RESULT:
			ssd1306_SetCursor(5, 56);
 800ebdc:	2138      	movs	r1, #56	@ 0x38
 800ebde:	2005      	movs	r0, #5
 800ebe0:	f7f3 f870 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800ebe4:	4b35      	ldr	r3, [pc, #212]	@ (800ecbc <LCD_DisplayMenu+0x580>)
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	9200      	str	r2, [sp, #0]
 800ebea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ebec:	4834      	ldr	r0, [pc, #208]	@ (800ecc0 <LCD_DisplayMenu+0x584>)
 800ebee:	f7f3 f843 	bl	8001c78 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800ebf2:	2138      	movs	r1, #56	@ 0x38
 800ebf4:	2066      	movs	r0, #102	@ 0x66
 800ebf6:	f7f3 f865 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800ebfa:	4b30      	ldr	r3, [pc, #192]	@ (800ecbc <LCD_DisplayMenu+0x580>)
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	9200      	str	r2, [sp, #0]
 800ec00:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ec02:	4830      	ldr	r0, [pc, #192]	@ (800ecc4 <LCD_DisplayMenu+0x588>)
 800ec04:	f7f3 f838 	bl	8001c78 <ssd1306_WriteString>
        	DisplayPercentage();
 800ec08:	f000 febc 	bl	800f984 <DisplayPercentage>
        	RTC_DisplayTime();
 800ec0c:	f001 f98a 	bl	800ff24 <RTC_DisplayTime>
        	StartTestMenuFlag = 2;						// Not in StartMenu ==> Don't init Spectrometer
 800ec10:	4b2d      	ldr	r3, [pc, #180]	@ (800ecc8 <LCD_DisplayMenu+0x58c>)
 800ec12:	2202      	movs	r2, #2
 800ec14:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU){
 800ec16:	4b2d      	ldr	r3, [pc, #180]	@ (800eccc <LCD_DisplayMenu+0x590>)
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d120      	bne.n	800ec60 <LCD_DisplayMenu+0x524>
				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 800ec1e:	4b2c      	ldr	r3, [pc, #176]	@ (800ecd0 <LCD_DisplayMenu+0x594>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	3b05      	subs	r3, #5
 800ec26:	b2d8      	uxtb	r0, r3
 800ec28:	4b2a      	ldr	r3, [pc, #168]	@ (800ecd4 <LCD_DisplayMenu+0x598>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	3b05      	subs	r3, #5
 800ec30:	b2d9      	uxtb	r1, r3
 800ec32:	2301      	movs	r3, #1
 800ec34:	9300      	str	r3, [sp, #0]
 800ec36:	2323      	movs	r3, #35	@ 0x23
 800ec38:	225a      	movs	r2, #90	@ 0x5a
 800ec3a:	f7f3 f85b 	bl	8001cf4 <ssd1306_FillRectangle>
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800ec3e:	4b24      	ldr	r3, [pc, #144]	@ (800ecd0 <LCD_DisplayMenu+0x594>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	4a23      	ldr	r2, [pc, #140]	@ (800ecd4 <LCD_DisplayMenu+0x598>)
 800ec46:	6812      	ldr	r2, [r2, #0]
 800ec48:	b2d2      	uxtb	r2, r2
 800ec4a:	4611      	mov	r1, r2
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7f3 f839 	bl	8001cc4 <ssd1306_SetCursor>
				ssd1306_WriteString(" Result", Font_7x10, Black);
 800ec52:	4b21      	ldr	r3, [pc, #132]	@ (800ecd8 <LCD_DisplayMenu+0x59c>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	9200      	str	r2, [sp, #0]
 800ec58:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ec5a:	482b      	ldr	r0, [pc, #172]	@ (800ed08 <LCD_DisplayMenu+0x5cc>)
 800ec5c:	f7f3 f80c 	bl	8001c78 <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 25, set_line_Y);
 800ec60:	4b11      	ldr	r3, [pc, #68]	@ (800eca8 <LCD_DisplayMenu+0x56c>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	3b19      	subs	r3, #25
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	4a10      	ldr	r2, [pc, #64]	@ (800ecac <LCD_DisplayMenu+0x570>)
 800ec6c:	6812      	ldr	r2, [r2, #0]
 800ec6e:	b2d2      	uxtb	r2, r2
 800ec70:	4611      	mov	r1, r2
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7f3 f826 	bl	8001cc4 <ssd1306_SetCursor>
            char bilStr[20];
            snprintf(bilStr, sizeof(bilStr), "%.2f mg/dL", AveragedBil);
 800ec78:	4b24      	ldr	r3, [pc, #144]	@ (800ed0c <LCD_DisplayMenu+0x5d0>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7f1 fc73 	bl	8000568 <__aeabi_f2d>
 800ec82:	4602      	mov	r2, r0
 800ec84:	460b      	mov	r3, r1
 800ec86:	f107 001c 	add.w	r0, r7, #28
 800ec8a:	e9cd 2300 	strd	r2, r3, [sp]
 800ec8e:	4a20      	ldr	r2, [pc, #128]	@ (800ed10 <LCD_DisplayMenu+0x5d4>)
 800ec90:	2114      	movs	r1, #20
 800ec92:	f002 f99b 	bl	8010fcc <sniprintf>
            ssd1306_WriteString(bilStr, Font_11x18, White);
 800ec96:	4b08      	ldr	r3, [pc, #32]	@ (800ecb8 <LCD_DisplayMenu+0x57c>)
 800ec98:	f107 001c 	add.w	r0, r7, #28
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	9200      	str	r2, [sp, #0]
 800eca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eca2:	f7f2 ffe9 	bl	8001c78 <ssd1306_WriteString>
            break;
 800eca6:	e16f      	b.n	800ef88 <LCD_DisplayMenu+0x84c>
 800eca8:	200000b4 	.word	0x200000b4
 800ecac:	200000b8 	.word	0x200000b8
 800ecb0:	2000009c 	.word	0x2000009c
 800ecb4:	080131b4 	.word	0x080131b4
 800ecb8:	08014d40 	.word	0x08014d40
 800ecbc:	08014d28 	.word	0x08014d28
 800ecc0:	08013160 	.word	0x08013160
 800ecc4:	08013168 	.word	0x08013168
 800ecc8:	20001f50 	.word	0x20001f50
 800eccc:	20001f15 	.word	0x20001f15
 800ecd0:	200000ac 	.word	0x200000ac
 800ecd4:	200000b0 	.word	0x200000b0
 800ecd8:	08014d34 	.word	0x08014d34
 800ecdc:	080131bc 	.word	0x080131bc
 800ece0:	200000a0 	.word	0x200000a0
 800ece4:	080131c8 	.word	0x080131c8
 800ece8:	20001f18 	.word	0x20001f18
 800ecec:	20001f4c 	.word	0x20001f4c
 800ecf0:	20001f08 	.word	0x20001f08
 800ecf4:	200016ec 	.word	0x200016ec
 800ecf8:	200016d4 	.word	0x200016d4
 800ecfc:	200016e8 	.word	0x200016e8
 800ed00:	20001f14 	.word	0x20001f14
 800ed04:	40021000 	.word	0x40021000
 800ed08:	080131d4 	.word	0x080131d4
 800ed0c:	20001f48 	.word	0x20001f48
 800ed10:	080131dc 	.word	0x080131dc

        case MENU_EDIT_RTC:
			ssd1306_SetCursor(5, 56);
 800ed14:	2138      	movs	r1, #56	@ 0x38
 800ed16:	2005      	movs	r0, #5
 800ed18:	f7f2 ffd4 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800ed1c:	4b9d      	ldr	r3, [pc, #628]	@ (800ef94 <LCD_DisplayMenu+0x858>)
 800ed1e:	2201      	movs	r2, #1
 800ed20:	9200      	str	r2, [sp, #0]
 800ed22:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed24:	489c      	ldr	r0, [pc, #624]	@ (800ef98 <LCD_DisplayMenu+0x85c>)
 800ed26:	f7f2 ffa7 	bl	8001c78 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800ed2a:	2138      	movs	r1, #56	@ 0x38
 800ed2c:	2066      	movs	r0, #102	@ 0x66
 800ed2e:	f7f2 ffc9 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800ed32:	4b98      	ldr	r3, [pc, #608]	@ (800ef94 <LCD_DisplayMenu+0x858>)
 800ed34:	2201      	movs	r2, #1
 800ed36:	9200      	str	r2, [sp, #0]
 800ed38:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed3a:	4898      	ldr	r0, [pc, #608]	@ (800ef9c <LCD_DisplayMenu+0x860>)
 800ed3c:	f7f2 ff9c 	bl	8001c78 <ssd1306_WriteString>

        	DisplayPercentage();
 800ed40:	f000 fe20 	bl	800f984 <DisplayPercentage>
        	RTC_DisplayTime();
 800ed44:	f001 f8ee 	bl	800ff24 <RTC_DisplayTime>
        	StartTestMenuFlag = 2;						// Not in StartMenu ==> Don't init Spectrometer
 800ed48:	4b95      	ldr	r3, [pc, #596]	@ (800efa0 <LCD_DisplayMenu+0x864>)
 800ed4a:	2202      	movs	r2, #2
 800ed4c:	601a      	str	r2, [r3, #0]
        	if (currentCursor == CURSOR_ON_MENU){
 800ed4e:	4b95      	ldr	r3, [pc, #596]	@ (800efa4 <LCD_DisplayMenu+0x868>)
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d167      	bne.n	800ee26 <LCD_DisplayMenu+0x6ea>

				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 34, White);
 800ed56:	4b94      	ldr	r3, [pc, #592]	@ (800efa8 <LCD_DisplayMenu+0x86c>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	3b05      	subs	r3, #5
 800ed5e:	b2d8      	uxtb	r0, r3
 800ed60:	4b92      	ldr	r3, [pc, #584]	@ (800efac <LCD_DisplayMenu+0x870>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	3b05      	subs	r3, #5
 800ed68:	b2d9      	uxtb	r1, r3
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	9300      	str	r3, [sp, #0]
 800ed6e:	2322      	movs	r3, #34	@ 0x22
 800ed70:	225a      	movs	r2, #90	@ 0x5a
 800ed72:	f7f2 ffbf 	bl	8001cf4 <ssd1306_FillRectangle>

				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800ed76:	4b8c      	ldr	r3, [pc, #560]	@ (800efa8 <LCD_DisplayMenu+0x86c>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	4a8b      	ldr	r2, [pc, #556]	@ (800efac <LCD_DisplayMenu+0x870>)
 800ed7e:	6812      	ldr	r2, [r2, #0]
 800ed80:	b2d2      	uxtb	r2, r2
 800ed82:	4611      	mov	r1, r2
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7f2 ff9d 	bl	8001cc4 <ssd1306_SetCursor>
				ssd1306_WriteString("Edit RTC", Font_7x10, Black);
 800ed8a:	4b89      	ldr	r3, [pc, #548]	@ (800efb0 <LCD_DisplayMenu+0x874>)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	9200      	str	r2, [sp, #0]
 800ed90:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed92:	4888      	ldr	r0, [pc, #544]	@ (800efb4 <LCD_DisplayMenu+0x878>)
 800ed94:	f7f2 ff70 	bl	8001c78 <ssd1306_WriteString>
				//*****************************************//
			    ssd1306_SetCursor(menu_line_X, menu_line_Y+16);
 800ed98:	4b83      	ldr	r3, [pc, #524]	@ (800efa8 <LCD_DisplayMenu+0x86c>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	4b83      	ldr	r3, [pc, #524]	@ (800efac <LCD_DisplayMenu+0x870>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	3310      	adds	r3, #16
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	4619      	mov	r1, r3
 800edaa:	4610      	mov	r0, r2
 800edac:	f7f2 ff8a 	bl	8001cc4 <ssd1306_SetCursor>
			    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 800edb0:	4b81      	ldr	r3, [pc, #516]	@ (800efb8 <LCD_DisplayMenu+0x87c>)
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	4619      	mov	r1, r3
 800edb6:	4b81      	ldr	r3, [pc, #516]	@ (800efbc <LCD_DisplayMenu+0x880>)
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	461a      	mov	r2, r3
 800edbc:	4b80      	ldr	r3, [pc, #512]	@ (800efc0 <LCD_DisplayMenu+0x884>)
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	9301      	str	r3, [sp, #4]
 800edc2:	9200      	str	r2, [sp, #0]
 800edc4:	460b      	mov	r3, r1
 800edc6:	4a7f      	ldr	r2, [pc, #508]	@ (800efc4 <LCD_DisplayMenu+0x888>)
 800edc8:	2114      	movs	r1, #20
 800edca:	487f      	ldr	r0, [pc, #508]	@ (800efc8 <LCD_DisplayMenu+0x88c>)
 800edcc:	f002 f8fe 	bl	8010fcc <sniprintf>
			    ssd1306_WriteString(buffer, Font_7x10, White);
 800edd0:	4b77      	ldr	r3, [pc, #476]	@ (800efb0 <LCD_DisplayMenu+0x874>)
 800edd2:	2201      	movs	r2, #1
 800edd4:	9200      	str	r2, [sp, #0]
 800edd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800edd8:	487b      	ldr	r0, [pc, #492]	@ (800efc8 <LCD_DisplayMenu+0x88c>)
 800edda:	f7f2 ff4d 	bl	8001c78 <ssd1306_WriteString>

			    ssd1306_SetCursor(menu_line_X, menu_line_Y+32);
 800edde:	4b72      	ldr	r3, [pc, #456]	@ (800efa8 <LCD_DisplayMenu+0x86c>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	b2da      	uxtb	r2, r3
 800ede4:	4b71      	ldr	r3, [pc, #452]	@ (800efac <LCD_DisplayMenu+0x870>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	3320      	adds	r3, #32
 800edec:	b2db      	uxtb	r3, r3
 800edee:	4619      	mov	r1, r3
 800edf0:	4610      	mov	r0, r2
 800edf2:	f7f2 ff67 	bl	8001cc4 <ssd1306_SetCursor>
			    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", day, month, year);
 800edf6:	4b75      	ldr	r3, [pc, #468]	@ (800efcc <LCD_DisplayMenu+0x890>)
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	4619      	mov	r1, r3
 800edfc:	4b74      	ldr	r3, [pc, #464]	@ (800efd0 <LCD_DisplayMenu+0x894>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	461a      	mov	r2, r3
 800ee02:	4b74      	ldr	r3, [pc, #464]	@ (800efd4 <LCD_DisplayMenu+0x898>)
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	9301      	str	r3, [sp, #4]
 800ee08:	9200      	str	r2, [sp, #0]
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	4a72      	ldr	r2, [pc, #456]	@ (800efd8 <LCD_DisplayMenu+0x89c>)
 800ee0e:	2114      	movs	r1, #20
 800ee10:	486d      	ldr	r0, [pc, #436]	@ (800efc8 <LCD_DisplayMenu+0x88c>)
 800ee12:	f002 f8db 	bl	8010fcc <sniprintf>
			    ssd1306_WriteString(buffer, Font_7x10, White);
 800ee16:	4b66      	ldr	r3, [pc, #408]	@ (800efb0 <LCD_DisplayMenu+0x874>)
 800ee18:	2201      	movs	r2, #1
 800ee1a:	9200      	str	r2, [sp, #0]
 800ee1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee1e:	486a      	ldr	r0, [pc, #424]	@ (800efc8 <LCD_DisplayMenu+0x88c>)
 800ee20:	f7f2 ff2a 	bl	8001c78 <ssd1306_WriteString>
 800ee24:	e010      	b.n	800ee48 <LCD_DisplayMenu+0x70c>
				//*****************************************//
			}else{
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800ee26:	4b60      	ldr	r3, [pc, #384]	@ (800efa8 <LCD_DisplayMenu+0x86c>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	4a5f      	ldr	r2, [pc, #380]	@ (800efac <LCD_DisplayMenu+0x870>)
 800ee2e:	6812      	ldr	r2, [r2, #0]
 800ee30:	b2d2      	uxtb	r2, r2
 800ee32:	4611      	mov	r1, r2
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7f2 ff45 	bl	8001cc4 <ssd1306_SetCursor>
				ssd1306_WriteString("Edit RTC", Font_7x10, White);
 800ee3a:	4b5d      	ldr	r3, [pc, #372]	@ (800efb0 <LCD_DisplayMenu+0x874>)
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	9200      	str	r2, [sp, #0]
 800ee40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee42:	485c      	ldr	r0, [pc, #368]	@ (800efb4 <LCD_DisplayMenu+0x878>)
 800ee44:	f7f2 ff18 	bl	8001c78 <ssd1306_WriteString>
        	}

        	if (currentCursor == CURSOR_ON_VALUE){
 800ee48:	4b56      	ldr	r3, [pc, #344]	@ (800efa4 <LCD_DisplayMenu+0x868>)
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	f040 8098 	bne.w	800ef82 <LCD_DisplayMenu+0x846>
        		EditRTC();
 800ee52:	f000 fa11 	bl	800f278 <EditRTC>
        		currentCursor = CURSOR_ON_MENU;
 800ee56:	4b53      	ldr	r3, [pc, #332]	@ (800efa4 <LCD_DisplayMenu+0x868>)
 800ee58:	2200      	movs	r2, #0
 800ee5a:	701a      	strb	r2, [r3, #0]
        	}

			break;
 800ee5c:	e091      	b.n	800ef82 <LCD_DisplayMenu+0x846>

        case MENU_SEND_BLE:
        	HAL_GPIO_WritePin(GPIOD, BT_INIT_Pin, GPIO_PIN_SET); 				// Turn on BT
 800ee5e:	2201      	movs	r2, #1
 800ee60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ee64:	485d      	ldr	r0, [pc, #372]	@ (800efdc <LCD_DisplayMenu+0x8a0>)
 800ee66:	f7f5 fadf 	bl	8004428 <HAL_GPIO_WritePin>
        	AveragedBil=0;//to Erase the old test from LCD while applying new one
 800ee6a:	4b5d      	ldr	r3, [pc, #372]	@ (800efe0 <LCD_DisplayMenu+0x8a4>)
 800ee6c:	f04f 0200 	mov.w	r2, #0
 800ee70:	601a      	str	r2, [r3, #0]

			ssd1306_SetCursor(5, 56);
 800ee72:	2138      	movs	r1, #56	@ 0x38
 800ee74:	2005      	movs	r0, #5
 800ee76:	f7f2 ff25 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800ee7a:	4b46      	ldr	r3, [pc, #280]	@ (800ef94 <LCD_DisplayMenu+0x858>)
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	9200      	str	r2, [sp, #0]
 800ee80:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee82:	4845      	ldr	r0, [pc, #276]	@ (800ef98 <LCD_DisplayMenu+0x85c>)
 800ee84:	f7f2 fef8 	bl	8001c78 <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800ee88:	2138      	movs	r1, #56	@ 0x38
 800ee8a:	2066      	movs	r0, #102	@ 0x66
 800ee8c:	f7f2 ff1a 	bl	8001cc4 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800ee90:	4b40      	ldr	r3, [pc, #256]	@ (800ef94 <LCD_DisplayMenu+0x858>)
 800ee92:	2201      	movs	r2, #1
 800ee94:	9200      	str	r2, [sp, #0]
 800ee96:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee98:	4840      	ldr	r0, [pc, #256]	@ (800ef9c <LCD_DisplayMenu+0x860>)
 800ee9a:	f7f2 feed 	bl	8001c78 <ssd1306_WriteString>
            DisplayPercentage();
 800ee9e:	f000 fd71 	bl	800f984 <DisplayPercentage>
            RTC_DisplayTime();
 800eea2:	f001 f83f 	bl	800ff24 <RTC_DisplayTime>
            StartTestMenuFlag = 2;  // Not in StartMenu ==> Don't init Spectrometer
 800eea6:	4b3e      	ldr	r3, [pc, #248]	@ (800efa0 <LCD_DisplayMenu+0x864>)
 800eea8:	2202      	movs	r2, #2
 800eeaa:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU) {
 800eeac:	4b3d      	ldr	r3, [pc, #244]	@ (800efa4 <LCD_DisplayMenu+0x868>)
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d122      	bne.n	800eefa <LCD_DisplayMenu+0x7be>
                ssd1306_FillRectangle(menu_line_X-10, menu_line_Y, 100, 40, White);
 800eeb4:	4b3c      	ldr	r3, [pc, #240]	@ (800efa8 <LCD_DisplayMenu+0x86c>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	3b0a      	subs	r3, #10
 800eebc:	b2d8      	uxtb	r0, r3
 800eebe:	4b3b      	ldr	r3, [pc, #236]	@ (800efac <LCD_DisplayMenu+0x870>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	b2d9      	uxtb	r1, r3
 800eec4:	2301      	movs	r3, #1
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	2328      	movs	r3, #40	@ 0x28
 800eeca:	2264      	movs	r2, #100	@ 0x64
 800eecc:	f7f2 ff12 	bl	8001cf4 <ssd1306_FillRectangle>
                ssd1306_SetCursor(menu_line_X-5, menu_line_Y+5);
 800eed0:	4b35      	ldr	r3, [pc, #212]	@ (800efa8 <LCD_DisplayMenu+0x86c>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	3b05      	subs	r3, #5
 800eed8:	b2da      	uxtb	r2, r3
 800eeda:	4b34      	ldr	r3, [pc, #208]	@ (800efac <LCD_DisplayMenu+0x870>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	3305      	adds	r3, #5
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	4619      	mov	r1, r3
 800eee6:	4610      	mov	r0, r2
 800eee8:	f7f2 feec 	bl	8001cc4 <ssd1306_SetCursor>
                ssd1306_WriteString("Send to BT", Font_7x10, Black);
 800eeec:	4b30      	ldr	r3, [pc, #192]	@ (800efb0 <LCD_DisplayMenu+0x874>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	9200      	str	r2, [sp, #0]
 800eef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eef4:	483b      	ldr	r0, [pc, #236]	@ (800efe4 <LCD_DisplayMenu+0x8a8>)
 800eef6:	f7f2 febf 	bl	8001c78 <ssd1306_WriteString>
            }

            // Indicate that the user can press the NAVIGATE button to send data
            ssd1306_SetCursor(set_line_X - 5, menu_line_Y + 23);
 800eefa:	4b3b      	ldr	r3, [pc, #236]	@ (800efe8 <LCD_DisplayMenu+0x8ac>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	3b05      	subs	r3, #5
 800ef02:	b2da      	uxtb	r2, r3
 800ef04:	4b29      	ldr	r3, [pc, #164]	@ (800efac <LCD_DisplayMenu+0x870>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	3317      	adds	r3, #23
 800ef0c:	b2db      	uxtb	r3, r3
 800ef0e:	4619      	mov	r1, r3
 800ef10:	4610      	mov	r0, r2
 800ef12:	f7f2 fed7 	bl	8001cc4 <ssd1306_SetCursor>
            ssd1306_WriteString("Press OK", Font_7x10, White);
 800ef16:	4b26      	ldr	r3, [pc, #152]	@ (800efb0 <LCD_DisplayMenu+0x874>)
 800ef18:	2201      	movs	r2, #1
 800ef1a:	9200      	str	r2, [sp, #0]
 800ef1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ef1e:	4833      	ldr	r0, [pc, #204]	@ (800efec <LCD_DisplayMenu+0x8b0>)
 800ef20:	f7f2 feaa 	bl	8001c78 <ssd1306_WriteString>

            // After NAVIGATE is pressed, send data via BLE
            if (sendBLEFlag) {
 800ef24:	4b32      	ldr	r3, [pc, #200]	@ (800eff0 <LCD_DisplayMenu+0x8b4>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d02c      	beq.n	800ef86 <LCD_DisplayMenu+0x84a>
            	ssd1306_FillRectangle(menu_line_X-5, menu_line_Y, 105, 40, Black);
 800ef2c:	4b1e      	ldr	r3, [pc, #120]	@ (800efa8 <LCD_DisplayMenu+0x86c>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	3b05      	subs	r3, #5
 800ef34:	b2d8      	uxtb	r0, r3
 800ef36:	4b1d      	ldr	r3, [pc, #116]	@ (800efac <LCD_DisplayMenu+0x870>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	b2d9      	uxtb	r1, r3
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	2328      	movs	r3, #40	@ 0x28
 800ef42:	2269      	movs	r2, #105	@ 0x69
 800ef44:	f7f2 fed6 	bl	8001cf4 <ssd1306_FillRectangle>
                ssd1306_SetCursor(menu_line_X - 5, menu_line_Y + 30);
 800ef48:	4b17      	ldr	r3, [pc, #92]	@ (800efa8 <LCD_DisplayMenu+0x86c>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	3b05      	subs	r3, #5
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	4b16      	ldr	r3, [pc, #88]	@ (800efac <LCD_DisplayMenu+0x870>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	331e      	adds	r3, #30
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	4610      	mov	r0, r2
 800ef60:	f7f2 feb0 	bl	8001cc4 <ssd1306_SetCursor>
                ssd1306_WriteString("Sending...", Font_7x10, White);
 800ef64:	4b12      	ldr	r3, [pc, #72]	@ (800efb0 <LCD_DisplayMenu+0x874>)
 800ef66:	2201      	movs	r2, #1
 800ef68:	9200      	str	r2, [sp, #0]
 800ef6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ef6c:	4821      	ldr	r0, [pc, #132]	@ (800eff4 <LCD_DisplayMenu+0x8b8>)
 800ef6e:	f7f2 fe83 	bl	8001c78 <ssd1306_WriteString>
                Send_TO_BLE();  // Call the function that sends data over BLE
 800ef72:	f7fe ffd1 	bl	800df18 <Send_TO_BLE>
                sendBLEFlag = 0;  // Reset the flag after sending
 800ef76:	4b1e      	ldr	r3, [pc, #120]	@ (800eff0 <LCD_DisplayMenu+0x8b4>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	601a      	str	r2, [r3, #0]
            }

            break;
 800ef7c:	e003      	b.n	800ef86 <LCD_DisplayMenu+0x84a>
			break;
 800ef7e:	bf00      	nop
 800ef80:	e002      	b.n	800ef88 <LCD_DisplayMenu+0x84c>
			break;
 800ef82:	bf00      	nop
 800ef84:	e000      	b.n	800ef88 <LCD_DisplayMenu+0x84c>
            break;
 800ef86:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 800ef88:	f7f2 fd6a 	bl	8001a60 <ssd1306_UpdateScreen>
}
 800ef8c:	bf00      	nop
 800ef8e:	3748      	adds	r7, #72	@ 0x48
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	08014d28 	.word	0x08014d28
 800ef98:	08013160 	.word	0x08013160
 800ef9c:	08013168 	.word	0x08013168
 800efa0:	20001f50 	.word	0x20001f50
 800efa4:	20001f15 	.word	0x20001f15
 800efa8:	200000ac 	.word	0x200000ac
 800efac:	200000b0 	.word	0x200000b0
 800efb0:	08014d34 	.word	0x08014d34
 800efb4:	080131e8 	.word	0x080131e8
 800efb8:	20001f58 	.word	0x20001f58
 800efbc:	20001f59 	.word	0x20001f59
 800efc0:	20001f5a 	.word	0x20001f5a
 800efc4:	080131f4 	.word	0x080131f4
 800efc8:	20001f5c 	.word	0x20001f5c
 800efcc:	200000bd 	.word	0x200000bd
 800efd0:	200000be 	.word	0x200000be
 800efd4:	200000bf 	.word	0x200000bf
 800efd8:	08013204 	.word	0x08013204
 800efdc:	40020c00 	.word	0x40020c00
 800efe0:	20001f48 	.word	0x20001f48
 800efe4:	08013214 	.word	0x08013214
 800efe8:	200000b4 	.word	0x200000b4
 800efec:	08013220 	.word	0x08013220
 800eff0:	20001f80 	.word	0x20001f80
 800eff4:	0801322c 	.word	0x0801322c

0800eff8 <LCD_HandleButtonPress>:

// Function to handle button presses
void LCD_HandleButtonPress(void) {
 800eff8:	b580      	push	{r7, lr}
 800effa:	af00      	add	r7, sp, #0
    // Assume button GPIOs are connected and configured
    if ((HAL_GPIO_ReadPin(GPIOB, NAVIGATE_BTN_Pin) == GPIO_PIN_RESET)) { // Navigate Button
 800effc:	2102      	movs	r1, #2
 800effe:	4877      	ldr	r0, [pc, #476]	@ (800f1dc <LCD_HandleButtonPress+0x1e4>)
 800f000:	f7f5 f9fa 	bl	80043f8 <HAL_GPIO_ReadPin>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d143      	bne.n	800f092 <LCD_HandleButtonPress+0x9a>
    	RTC_DisplayTime();
 800f00a:	f000 ff8b 	bl	800ff24 <RTC_DisplayTime>
        holdNavigateBtn++;
 800f00e:	4b74      	ldr	r3, [pc, #464]	@ (800f1e0 <LCD_HandleButtonPress+0x1e8>)
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	3301      	adds	r3, #1
 800f014:	b2da      	uxtb	r2, r3
 800f016:	4b72      	ldr	r3, [pc, #456]	@ (800f1e0 <LCD_HandleButtonPress+0x1e8>)
 800f018:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Debounce_Delay); // Debounce delay
 800f01a:	4b72      	ldr	r3, [pc, #456]	@ (800f1e4 <LCD_HandleButtonPress+0x1ec>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7f3 fcbe 	bl	80029a0 <HAL_Delay>

        if (holdNavigateBtn >= 12) { // Assuming hold for 2000 ms
 800f024:	4b6e      	ldr	r3, [pc, #440]	@ (800f1e0 <LCD_HandleButtonPress+0x1e8>)
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	2b0b      	cmp	r3, #11
 800f02a:	d902      	bls.n	800f032 <LCD_HandleButtonPress+0x3a>
            LCD_Reset();
 800f02c:	f000 fde8 	bl	800fc00 <LCD_Reset>
		}

    } else {
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
    }
}
 800f030:	e0d1      	b.n	800f1d6 <LCD_HandleButtonPress+0x1de>
        	 if (currentMenu == MENU_SET_AVG || currentMenu == MENU_EDIT_RTC)
 800f032:	4b6d      	ldr	r3, [pc, #436]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	2b02      	cmp	r3, #2
 800f038:	d003      	beq.n	800f042 <LCD_HandleButtonPress+0x4a>
 800f03a:	4b6b      	ldr	r3, [pc, #428]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b06      	cmp	r3, #6
 800f040:	d11c      	bne.n	800f07c <LCD_HandleButtonPress+0x84>
				currentCursor = (currentCursor + 1) % CURSOR_TOTAL;
 800f042:	4b6a      	ldr	r3, [pc, #424]	@ (800f1ec <LCD_HandleButtonPress+0x1f4>)
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	3301      	adds	r3, #1
 800f048:	2b00      	cmp	r3, #0
 800f04a:	f003 0301 	and.w	r3, r3, #1
 800f04e:	bfb8      	it	lt
 800f050:	425b      	neglt	r3, r3
 800f052:	b2da      	uxtb	r2, r3
 800f054:	4b65      	ldr	r3, [pc, #404]	@ (800f1ec <LCD_HandleButtonPress+0x1f4>)
 800f056:	701a      	strb	r2, [r3, #0]
				if(currentCursor>=2)  currentCursor = (currentCursor - 1) % CURSOR_TOTAL;
 800f058:	4b64      	ldr	r3, [pc, #400]	@ (800f1ec <LCD_HandleButtonPress+0x1f4>)
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d90a      	bls.n	800f076 <LCD_HandleButtonPress+0x7e>
 800f060:	4b62      	ldr	r3, [pc, #392]	@ (800f1ec <LCD_HandleButtonPress+0x1f4>)
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	3b01      	subs	r3, #1
 800f066:	2b00      	cmp	r3, #0
 800f068:	f003 0301 	and.w	r3, r3, #1
 800f06c:	bfb8      	it	lt
 800f06e:	425b      	neglt	r3, r3
 800f070:	b2da      	uxtb	r2, r3
 800f072:	4b5e      	ldr	r3, [pc, #376]	@ (800f1ec <LCD_HandleButtonPress+0x1f4>)
 800f074:	701a      	strb	r2, [r3, #0]
				LCD_UpdateMenu();
 800f076:	f000 fd83 	bl	800fb80 <LCD_UpdateMenu>
}
 800f07a:	e0ac      	b.n	800f1d6 <LCD_HandleButtonPress+0x1de>
        	 else if (currentMenu == MENU_SEND_BLE) {
 800f07c:	4b5a      	ldr	r3, [pc, #360]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	2b05      	cmp	r3, #5
 800f082:	f040 80a8 	bne.w	800f1d6 <LCD_HandleButtonPress+0x1de>
				 sendBLEFlag = 1;  // Set the flag to send data
 800f086:	4b5a      	ldr	r3, [pc, #360]	@ (800f1f0 <LCD_HandleButtonPress+0x1f8>)
 800f088:	2201      	movs	r2, #1
 800f08a:	601a      	str	r2, [r3, #0]
				 LCD_UpdateMenu();  // Update display to show sending status
 800f08c:	f000 fd78 	bl	800fb80 <LCD_UpdateMenu>
}
 800f090:	e0a1      	b.n	800f1d6 <LCD_HandleButtonPress+0x1de>
    } else if (HAL_GPIO_ReadPin(GPIOE, NEXT_BTN_Pin) == GPIO_PIN_RESET) { // Next Button
 800f092:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f096:	4857      	ldr	r0, [pc, #348]	@ (800f1f4 <LCD_HandleButtonPress+0x1fc>)
 800f098:	f7f5 f9ae 	bl	80043f8 <HAL_GPIO_ReadPin>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d13d      	bne.n	800f11e <LCD_HandleButtonPress+0x126>
    	RTC_DisplayTime();
 800f0a2:	f000 ff3f 	bl	800ff24 <RTC_DisplayTime>
        HAL_Delay(Debounce_Delay); // Debounce delay
 800f0a6:	4b4f      	ldr	r3, [pc, #316]	@ (800f1e4 <LCD_HandleButtonPress+0x1ec>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7f3 fc78 	bl	80029a0 <HAL_Delay>
		if (currentCursor == CURSOR_ON_MENU ) {
 800f0b0:	4b4e      	ldr	r3, [pc, #312]	@ (800f1ec <LCD_HandleButtonPress+0x1f4>)
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d11b      	bne.n	800f0f0 <LCD_HandleButtonPress+0xf8>
			if (currentMenu == MENU_START_DEV) currentMenu = MENU_SET_AVG;
 800f0b8:	4b4b      	ldr	r3, [pc, #300]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d103      	bne.n	800f0c8 <LCD_HandleButtonPress+0xd0>
 800f0c0:	4b49      	ldr	r3, [pc, #292]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f0c2:	2202      	movs	r2, #2
 800f0c4:	701a      	strb	r2, [r3, #0]
 800f0c6:	e010      	b.n	800f0ea <LCD_HandleButtonPress+0xf2>
			else currentMenu = (currentMenu + 1) % MENU_TOTAL;
 800f0c8:	4b47      	ldr	r3, [pc, #284]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	1c5a      	adds	r2, r3, #1
 800f0ce:	4b4a      	ldr	r3, [pc, #296]	@ (800f1f8 <LCD_HandleButtonPress+0x200>)
 800f0d0:	fb83 1302 	smull	r1, r3, r3, r2
 800f0d4:	4413      	add	r3, r2
 800f0d6:	1099      	asrs	r1, r3, #2
 800f0d8:	17d3      	asrs	r3, r2, #31
 800f0da:	1ac9      	subs	r1, r1, r3
 800f0dc:	460b      	mov	r3, r1
 800f0de:	00db      	lsls	r3, r3, #3
 800f0e0:	1a5b      	subs	r3, r3, r1
 800f0e2:	1ad1      	subs	r1, r2, r3
 800f0e4:	b2ca      	uxtb	r2, r1
 800f0e6:	4b40      	ldr	r3, [pc, #256]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f0e8:	701a      	strb	r2, [r3, #0]
			LCD_UpdateMenu();
 800f0ea:	f000 fd49 	bl	800fb80 <LCD_UpdateMenu>
}
 800f0ee:	e072      	b.n	800f1d6 <LCD_HandleButtonPress+0x1de>
		} else if (currentCursor == CURSOR_ON_VALUE) {
 800f0f0:	4b3e      	ldr	r3, [pc, #248]	@ (800f1ec <LCD_HandleButtonPress+0x1f4>)
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d16e      	bne.n	800f1d6 <LCD_HandleButtonPress+0x1de>
			if (currentMenu == MENU_SET_AVG) {
 800f0f8:	4b3b      	ldr	r3, [pc, #236]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	2b02      	cmp	r3, #2
 800f0fe:	d16a      	bne.n	800f1d6 <LCD_HandleButtonPress+0x1de>
				avgValue++;
 800f100:	4b3e      	ldr	r3, [pc, #248]	@ (800f1fc <LCD_HandleButtonPress+0x204>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	3301      	adds	r3, #1
 800f106:	4a3d      	ldr	r2, [pc, #244]	@ (800f1fc <LCD_HandleButtonPress+0x204>)
 800f108:	6013      	str	r3, [r2, #0]
				if (avgValue > 9) avgValue = 9; // Max AVG value
 800f10a:	4b3c      	ldr	r3, [pc, #240]	@ (800f1fc <LCD_HandleButtonPress+0x204>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	2b09      	cmp	r3, #9
 800f110:	dd02      	ble.n	800f118 <LCD_HandleButtonPress+0x120>
 800f112:	4b3a      	ldr	r3, [pc, #232]	@ (800f1fc <LCD_HandleButtonPress+0x204>)
 800f114:	2209      	movs	r2, #9
 800f116:	601a      	str	r2, [r3, #0]
				LCD_UpdateMenu();
 800f118:	f000 fd32 	bl	800fb80 <LCD_UpdateMenu>
}
 800f11c:	e05b      	b.n	800f1d6 <LCD_HandleButtonPress+0x1de>
    } else if (HAL_GPIO_ReadPin(GPIOE, PREV_BTN_Pin) == GPIO_PIN_RESET) { // Prev Button
 800f11e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f122:	4834      	ldr	r0, [pc, #208]	@ (800f1f4 <LCD_HandleButtonPress+0x1fc>)
 800f124:	f7f5 f968 	bl	80043f8 <HAL_GPIO_ReadPin>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d150      	bne.n	800f1d0 <LCD_HandleButtonPress+0x1d8>
    	RTC_DisplayTime();
 800f12e:	f000 fef9 	bl	800ff24 <RTC_DisplayTime>
        HAL_Delay(Debounce_Delay); // Debounce delay
 800f132:	4b2c      	ldr	r3, [pc, #176]	@ (800f1e4 <LCD_HandleButtonPress+0x1ec>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4618      	mov	r0, r3
 800f138:	f7f3 fc32 	bl	80029a0 <HAL_Delay>
		if (currentMenu == MENU_SHOW_RESULT) {SumBil = 0;AveragedBil = 0;BilResult=0;testDone=0;}
 800f13c:	4b2a      	ldr	r3, [pc, #168]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b04      	cmp	r3, #4
 800f142:	d10e      	bne.n	800f162 <LCD_HandleButtonPress+0x16a>
 800f144:	4b2e      	ldr	r3, [pc, #184]	@ (800f200 <LCD_HandleButtonPress+0x208>)
 800f146:	f04f 0200 	mov.w	r2, #0
 800f14a:	601a      	str	r2, [r3, #0]
 800f14c:	4b2d      	ldr	r3, [pc, #180]	@ (800f204 <LCD_HandleButtonPress+0x20c>)
 800f14e:	f04f 0200 	mov.w	r2, #0
 800f152:	601a      	str	r2, [r3, #0]
 800f154:	4b2c      	ldr	r3, [pc, #176]	@ (800f208 <LCD_HandleButtonPress+0x210>)
 800f156:	f04f 0200 	mov.w	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]
 800f15c:	4b2b      	ldr	r3, [pc, #172]	@ (800f20c <LCD_HandleButtonPress+0x214>)
 800f15e:	2200      	movs	r2, #0
 800f160:	701a      	strb	r2, [r3, #0]
		if (currentCursor == CURSOR_ON_MENU ) {
 800f162:	4b22      	ldr	r3, [pc, #136]	@ (800f1ec <LCD_HandleButtonPress+0x1f4>)
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d11b      	bne.n	800f1a2 <LCD_HandleButtonPress+0x1aa>
			if (currentMenu == MENU_START_DEV) currentMenu = MENU_READ_ID;
 800f16a:	4b1f      	ldr	r3, [pc, #124]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d103      	bne.n	800f17a <LCD_HandleButtonPress+0x182>
 800f172:	4b1d      	ldr	r3, [pc, #116]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f174:	2201      	movs	r2, #1
 800f176:	701a      	strb	r2, [r3, #0]
 800f178:	e010      	b.n	800f19c <LCD_HandleButtonPress+0x1a4>
			else currentMenu = (currentMenu - 1 + MENU_TOTAL) % MENU_TOTAL;
 800f17a:	4b1b      	ldr	r3, [pc, #108]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	1d9a      	adds	r2, r3, #6
 800f180:	4b1d      	ldr	r3, [pc, #116]	@ (800f1f8 <LCD_HandleButtonPress+0x200>)
 800f182:	fb83 1302 	smull	r1, r3, r3, r2
 800f186:	4413      	add	r3, r2
 800f188:	1099      	asrs	r1, r3, #2
 800f18a:	17d3      	asrs	r3, r2, #31
 800f18c:	1ac9      	subs	r1, r1, r3
 800f18e:	460b      	mov	r3, r1
 800f190:	00db      	lsls	r3, r3, #3
 800f192:	1a5b      	subs	r3, r3, r1
 800f194:	1ad1      	subs	r1, r2, r3
 800f196:	b2ca      	uxtb	r2, r1
 800f198:	4b13      	ldr	r3, [pc, #76]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f19a:	701a      	strb	r2, [r3, #0]
			LCD_UpdateMenu();
 800f19c:	f000 fcf0 	bl	800fb80 <LCD_UpdateMenu>
}
 800f1a0:	e019      	b.n	800f1d6 <LCD_HandleButtonPress+0x1de>
		} else if (currentCursor == CURSOR_ON_VALUE) {
 800f1a2:	4b12      	ldr	r3, [pc, #72]	@ (800f1ec <LCD_HandleButtonPress+0x1f4>)
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d115      	bne.n	800f1d6 <LCD_HandleButtonPress+0x1de>
			if (currentMenu == MENU_SET_AVG) {
 800f1aa:	4b0f      	ldr	r3, [pc, #60]	@ (800f1e8 <LCD_HandleButtonPress+0x1f0>)
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	2b02      	cmp	r3, #2
 800f1b0:	d111      	bne.n	800f1d6 <LCD_HandleButtonPress+0x1de>
				avgValue--;
 800f1b2:	4b12      	ldr	r3, [pc, #72]	@ (800f1fc <LCD_HandleButtonPress+0x204>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	4a10      	ldr	r2, [pc, #64]	@ (800f1fc <LCD_HandleButtonPress+0x204>)
 800f1ba:	6013      	str	r3, [r2, #0]
				if (avgValue < 1) avgValue = 1; // Min AVG value
 800f1bc:	4b0f      	ldr	r3, [pc, #60]	@ (800f1fc <LCD_HandleButtonPress+0x204>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	dc02      	bgt.n	800f1ca <LCD_HandleButtonPress+0x1d2>
 800f1c4:	4b0d      	ldr	r3, [pc, #52]	@ (800f1fc <LCD_HandleButtonPress+0x204>)
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	601a      	str	r2, [r3, #0]
				LCD_UpdateMenu();
 800f1ca:	f000 fcd9 	bl	800fb80 <LCD_UpdateMenu>
}
 800f1ce:	e002      	b.n	800f1d6 <LCD_HandleButtonPress+0x1de>
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
 800f1d0:	4b03      	ldr	r3, [pc, #12]	@ (800f1e0 <LCD_HandleButtonPress+0x1e8>)
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	701a      	strb	r2, [r3, #0]
}
 800f1d6:	bf00      	nop
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	40020400 	.word	0x40020400
 800f1e0:	20001f16 	.word	0x20001f16
 800f1e4:	200000a4 	.word	0x200000a4
 800f1e8:	20001f14 	.word	0x20001f14
 800f1ec:	20001f15 	.word	0x20001f15
 800f1f0:	20001f80 	.word	0x20001f80
 800f1f4:	40021000 	.word	0x40021000
 800f1f8:	92492493 	.word	0x92492493
 800f1fc:	2000009c 	.word	0x2000009c
 800f200:	20001f4c 	.word	0x20001f4c
 800f204:	20001f48 	.word	0x20001f48
 800f208:	20001f08 	.word	0x20001f08
 800f20c:	20001efa 	.word	0x20001efa

0800f210 <HighlightNumber>:

//##############################################################################################################

void HighlightNumber(int x, int y, const char* format, int value) {
 800f210:	b590      	push	{r4, r7, lr}
 800f212:	b08b      	sub	sp, #44	@ 0x2c
 800f214:	af02      	add	r7, sp, #8
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
 800f21c:	603b      	str	r3, [r7, #0]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), format, value);
 800f21e:	f107 0014 	add.w	r0, r7, #20
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	210a      	movs	r1, #10
 800f228:	f001 fed0 	bl	8010fcc <sniprintf>
    ssd1306_SetCursor(x, y);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	b2d2      	uxtb	r2, r2
 800f234:	4611      	mov	r1, r2
 800f236:	4618      	mov	r0, r3
 800f238:	f7f2 fd44 	bl	8001cc4 <ssd1306_SetCursor>
    ssd1306_FillRectangle(x, y, x+8 , y+8 , White);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	b2d8      	uxtb	r0, r3
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	b2d9      	uxtb	r1, r3
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	b2db      	uxtb	r3, r3
 800f248:	3308      	adds	r3, #8
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	3308      	adds	r3, #8
 800f252:	b2db      	uxtb	r3, r3
 800f254:	2401      	movs	r4, #1
 800f256:	9400      	str	r4, [sp, #0]
 800f258:	f7f2 fd4c 	bl	8001cf4 <ssd1306_FillRectangle>
    ssd1306_WriteString(buffer, Font_7x10, Black); // Write black text on white background
 800f25c:	4b05      	ldr	r3, [pc, #20]	@ (800f274 <HighlightNumber+0x64>)
 800f25e:	f107 0014 	add.w	r0, r7, #20
 800f262:	2200      	movs	r2, #0
 800f264:	9200      	str	r2, [sp, #0]
 800f266:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f268:	f7f2 fd06 	bl	8001c78 <ssd1306_WriteString>
}
 800f26c:	bf00      	nop
 800f26e:	3724      	adds	r7, #36	@ 0x24
 800f270:	46bd      	mov	sp, r7
 800f272:	bd90      	pop	{r4, r7, pc}
 800f274:	08014d34 	.word	0x08014d34

0800f278 <EditRTC>:

void EditRTC() {
 800f278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af04      	add	r7, sp, #16
    // Variables to store user input for the RTC
    static int editIndex = 0; // Index to navigate through time and date components

	while(editIndex<6 && !TimeSetDone)  // && !TimeSetDone
 800f27e:	e236      	b.n	800f6ee <EditRTC+0x476>
	{
		    // Display and highlight the component being edited
		    ssd1306_SetCursor(menu_line_X, menu_line_Y+16);
 800f280:	4bad      	ldr	r3, [pc, #692]	@ (800f538 <EditRTC+0x2c0>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	b2da      	uxtb	r2, r3
 800f286:	4bad      	ldr	r3, [pc, #692]	@ (800f53c <EditRTC+0x2c4>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	3310      	adds	r3, #16
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	4619      	mov	r1, r3
 800f292:	4610      	mov	r0, r2
 800f294:	f7f2 fd16 	bl	8001cc4 <ssd1306_SetCursor>
		    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 800f298:	4ba9      	ldr	r3, [pc, #676]	@ (800f540 <EditRTC+0x2c8>)
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	4619      	mov	r1, r3
 800f29e:	4ba9      	ldr	r3, [pc, #676]	@ (800f544 <EditRTC+0x2cc>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	4ba8      	ldr	r3, [pc, #672]	@ (800f548 <EditRTC+0x2d0>)
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	9301      	str	r3, [sp, #4]
 800f2aa:	9200      	str	r2, [sp, #0]
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	4aa7      	ldr	r2, [pc, #668]	@ (800f54c <EditRTC+0x2d4>)
 800f2b0:	2114      	movs	r1, #20
 800f2b2:	48a7      	ldr	r0, [pc, #668]	@ (800f550 <EditRTC+0x2d8>)
 800f2b4:	f001 fe8a 	bl	8010fcc <sniprintf>
		    ssd1306_WriteString(buffer, Font_7x10, White);
 800f2b8:	4ba6      	ldr	r3, [pc, #664]	@ (800f554 <EditRTC+0x2dc>)
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	9200      	str	r2, [sp, #0]
 800f2be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f2c0:	48a3      	ldr	r0, [pc, #652]	@ (800f550 <EditRTC+0x2d8>)
 800f2c2:	f7f2 fcd9 	bl	8001c78 <ssd1306_WriteString>

		    ssd1306_SetCursor(menu_line_X, menu_line_Y+32);
 800f2c6:	4b9c      	ldr	r3, [pc, #624]	@ (800f538 <EditRTC+0x2c0>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	b2da      	uxtb	r2, r3
 800f2cc:	4b9b      	ldr	r3, [pc, #620]	@ (800f53c <EditRTC+0x2c4>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	3320      	adds	r3, #32
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	4610      	mov	r0, r2
 800f2da:	f7f2 fcf3 	bl	8001cc4 <ssd1306_SetCursor>
		    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", day, month, year);
 800f2de:	4b9e      	ldr	r3, [pc, #632]	@ (800f558 <EditRTC+0x2e0>)
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	4b9d      	ldr	r3, [pc, #628]	@ (800f55c <EditRTC+0x2e4>)
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	4b9d      	ldr	r3, [pc, #628]	@ (800f560 <EditRTC+0x2e8>)
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	9301      	str	r3, [sp, #4]
 800f2f0:	9200      	str	r2, [sp, #0]
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	4a9b      	ldr	r2, [pc, #620]	@ (800f564 <EditRTC+0x2ec>)
 800f2f6:	2114      	movs	r1, #20
 800f2f8:	4895      	ldr	r0, [pc, #596]	@ (800f550 <EditRTC+0x2d8>)
 800f2fa:	f001 fe67 	bl	8010fcc <sniprintf>
		    ssd1306_WriteString(buffer, Font_7x10, White);
 800f2fe:	4b95      	ldr	r3, [pc, #596]	@ (800f554 <EditRTC+0x2dc>)
 800f300:	2201      	movs	r2, #1
 800f302:	9200      	str	r2, [sp, #0]
 800f304:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f306:	4892      	ldr	r0, [pc, #584]	@ (800f550 <EditRTC+0x2d8>)
 800f308:	f7f2 fcb6 	bl	8001c78 <ssd1306_WriteString>


		// Highlight the specific component being edited
		    switch (editIndex) {
 800f30c:	4b96      	ldr	r3, [pc, #600]	@ (800f568 <EditRTC+0x2f0>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2b05      	cmp	r3, #5
 800f312:	d85f      	bhi.n	800f3d4 <EditRTC+0x15c>
 800f314:	a201      	add	r2, pc, #4	@ (adr r2, 800f31c <EditRTC+0xa4>)
 800f316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f31a:	bf00      	nop
 800f31c:	0800f335 	.word	0x0800f335
 800f320:	0800f34d 	.word	0x0800f34d
 800f324:	0800f369 	.word	0x0800f369
 800f328:	0800f385 	.word	0x0800f385
 800f32c:	0800f39d 	.word	0x0800f39d
 800f330:	0800f3b9 	.word	0x0800f3b9
		        case 0:
		            HighlightNumber(menu_line_X, menu_line_Y+16, "%02d", hours);
 800f334:	4b80      	ldr	r3, [pc, #512]	@ (800f538 <EditRTC+0x2c0>)
 800f336:	6818      	ldr	r0, [r3, #0]
 800f338:	4b80      	ldr	r3, [pc, #512]	@ (800f53c <EditRTC+0x2c4>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f103 0110 	add.w	r1, r3, #16
 800f340:	4b7f      	ldr	r3, [pc, #508]	@ (800f540 <EditRTC+0x2c8>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	4a89      	ldr	r2, [pc, #548]	@ (800f56c <EditRTC+0x2f4>)
 800f346:	f7ff ff63 	bl	800f210 <HighlightNumber>
		            break;
 800f34a:	e043      	b.n	800f3d4 <EditRTC+0x15c>
		        case 1:
		            HighlightNumber(menu_line_X+22, menu_line_Y+16, "%02d", minutes);
 800f34c:	4b7a      	ldr	r3, [pc, #488]	@ (800f538 <EditRTC+0x2c0>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f103 0016 	add.w	r0, r3, #22
 800f354:	4b79      	ldr	r3, [pc, #484]	@ (800f53c <EditRTC+0x2c4>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f103 0110 	add.w	r1, r3, #16
 800f35c:	4b79      	ldr	r3, [pc, #484]	@ (800f544 <EditRTC+0x2cc>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	4a82      	ldr	r2, [pc, #520]	@ (800f56c <EditRTC+0x2f4>)
 800f362:	f7ff ff55 	bl	800f210 <HighlightNumber>
		            break;
 800f366:	e035      	b.n	800f3d4 <EditRTC+0x15c>
		        case 2:
		            HighlightNumber(menu_line_X+44-2, menu_line_Y+16, "%02d", seconds);
 800f368:	4b73      	ldr	r3, [pc, #460]	@ (800f538 <EditRTC+0x2c0>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800f370:	4b72      	ldr	r3, [pc, #456]	@ (800f53c <EditRTC+0x2c4>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f103 0110 	add.w	r1, r3, #16
 800f378:	4b73      	ldr	r3, [pc, #460]	@ (800f548 <EditRTC+0x2d0>)
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	4a7b      	ldr	r2, [pc, #492]	@ (800f56c <EditRTC+0x2f4>)
 800f37e:	f7ff ff47 	bl	800f210 <HighlightNumber>
		            break;
 800f382:	e027      	b.n	800f3d4 <EditRTC+0x15c>
		        case 3:
		            HighlightNumber(menu_line_X, menu_line_Y+32, "%02d", day);
 800f384:	4b6c      	ldr	r3, [pc, #432]	@ (800f538 <EditRTC+0x2c0>)
 800f386:	6818      	ldr	r0, [r3, #0]
 800f388:	4b6c      	ldr	r3, [pc, #432]	@ (800f53c <EditRTC+0x2c4>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	f103 0120 	add.w	r1, r3, #32
 800f390:	4b71      	ldr	r3, [pc, #452]	@ (800f558 <EditRTC+0x2e0>)
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	4a75      	ldr	r2, [pc, #468]	@ (800f56c <EditRTC+0x2f4>)
 800f396:	f7ff ff3b 	bl	800f210 <HighlightNumber>
		            break;
 800f39a:	e01b      	b.n	800f3d4 <EditRTC+0x15c>
		        case 4:
		            HighlightNumber(menu_line_X+22, menu_line_Y+32, "%02d", month);
 800f39c:	4b66      	ldr	r3, [pc, #408]	@ (800f538 <EditRTC+0x2c0>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f103 0016 	add.w	r0, r3, #22
 800f3a4:	4b65      	ldr	r3, [pc, #404]	@ (800f53c <EditRTC+0x2c4>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f103 0120 	add.w	r1, r3, #32
 800f3ac:	4b6b      	ldr	r3, [pc, #428]	@ (800f55c <EditRTC+0x2e4>)
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	4a6e      	ldr	r2, [pc, #440]	@ (800f56c <EditRTC+0x2f4>)
 800f3b2:	f7ff ff2d 	bl	800f210 <HighlightNumber>
		            break;
 800f3b6:	e00d      	b.n	800f3d4 <EditRTC+0x15c>
		        case 5:
		            HighlightNumber(menu_line_X+44-2, menu_line_Y+32, "%02d", year);
 800f3b8:	4b5f      	ldr	r3, [pc, #380]	@ (800f538 <EditRTC+0x2c0>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800f3c0:	4b5e      	ldr	r3, [pc, #376]	@ (800f53c <EditRTC+0x2c4>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f103 0120 	add.w	r1, r3, #32
 800f3c8:	4b65      	ldr	r3, [pc, #404]	@ (800f560 <EditRTC+0x2e8>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	4a67      	ldr	r2, [pc, #412]	@ (800f56c <EditRTC+0x2f4>)
 800f3ce:	f7ff ff1f 	bl	800f210 <HighlightNumber>
		            break;
 800f3d2:	bf00      	nop
		    }

		// Handle button presses for editing
		if (HAL_GPIO_ReadPin(GPIOE, NEXT_BTN_Pin) == GPIO_PIN_RESET) {
 800f3d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f3d8:	4865      	ldr	r0, [pc, #404]	@ (800f570 <EditRTC+0x2f8>)
 800f3da:	f7f5 f80d 	bl	80043f8 <HAL_GPIO_ReadPin>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f040 8086 	bne.w	800f4f2 <EditRTC+0x27a>
			HAL_Delay(Debounce_Delay); // Debounce delay
 800f3e6:	4b63      	ldr	r3, [pc, #396]	@ (800f574 <EditRTC+0x2fc>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7f3 fad8 	bl	80029a0 <HAL_Delay>
			switch (editIndex) {
 800f3f0:	4b5d      	ldr	r3, [pc, #372]	@ (800f568 <EditRTC+0x2f0>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2b05      	cmp	r3, #5
 800f3f6:	f200 8178 	bhi.w	800f6ea <EditRTC+0x472>
 800f3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f400 <EditRTC+0x188>)
 800f3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f400:	0800f419 	.word	0x0800f419
 800f404:	0800f43d 	.word	0x0800f43d
 800f408:	0800f463 	.word	0x0800f463
 800f40c:	0800f489 	.word	0x0800f489
 800f410:	0800f4af 	.word	0x0800f4af
 800f414:	0800f4d1 	.word	0x0800f4d1
				case 0: hours = (hours + 1) % 24; break;
 800f418:	4b49      	ldr	r3, [pc, #292]	@ (800f540 <EditRTC+0x2c8>)
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	1c5a      	adds	r2, r3, #1
 800f41e:	4b56      	ldr	r3, [pc, #344]	@ (800f578 <EditRTC+0x300>)
 800f420:	fb83 1302 	smull	r1, r3, r3, r2
 800f424:	1099      	asrs	r1, r3, #2
 800f426:	17d3      	asrs	r3, r2, #31
 800f428:	1ac9      	subs	r1, r1, r3
 800f42a:	460b      	mov	r3, r1
 800f42c:	005b      	lsls	r3, r3, #1
 800f42e:	440b      	add	r3, r1
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	1ad1      	subs	r1, r2, r3
 800f434:	b2ca      	uxtb	r2, r1
 800f436:	4b42      	ldr	r3, [pc, #264]	@ (800f540 <EditRTC+0x2c8>)
 800f438:	701a      	strb	r2, [r3, #0]
 800f43a:	e156      	b.n	800f6ea <EditRTC+0x472>
				case 1: minutes = (minutes + 1) % 60; break;
 800f43c:	4b41      	ldr	r3, [pc, #260]	@ (800f544 <EditRTC+0x2cc>)
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	1c5a      	adds	r2, r3, #1
 800f442:	4b4e      	ldr	r3, [pc, #312]	@ (800f57c <EditRTC+0x304>)
 800f444:	fb83 1302 	smull	r1, r3, r3, r2
 800f448:	4413      	add	r3, r2
 800f44a:	1159      	asrs	r1, r3, #5
 800f44c:	17d3      	asrs	r3, r2, #31
 800f44e:	1ac9      	subs	r1, r1, r3
 800f450:	460b      	mov	r3, r1
 800f452:	011b      	lsls	r3, r3, #4
 800f454:	1a5b      	subs	r3, r3, r1
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	1ad1      	subs	r1, r2, r3
 800f45a:	b2ca      	uxtb	r2, r1
 800f45c:	4b39      	ldr	r3, [pc, #228]	@ (800f544 <EditRTC+0x2cc>)
 800f45e:	701a      	strb	r2, [r3, #0]
 800f460:	e143      	b.n	800f6ea <EditRTC+0x472>
				case 2: seconds = (seconds + 1) % 60; break;
 800f462:	4b39      	ldr	r3, [pc, #228]	@ (800f548 <EditRTC+0x2d0>)
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	1c5a      	adds	r2, r3, #1
 800f468:	4b44      	ldr	r3, [pc, #272]	@ (800f57c <EditRTC+0x304>)
 800f46a:	fb83 1302 	smull	r1, r3, r3, r2
 800f46e:	4413      	add	r3, r2
 800f470:	1159      	asrs	r1, r3, #5
 800f472:	17d3      	asrs	r3, r2, #31
 800f474:	1ac9      	subs	r1, r1, r3
 800f476:	460b      	mov	r3, r1
 800f478:	011b      	lsls	r3, r3, #4
 800f47a:	1a5b      	subs	r3, r3, r1
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	1ad1      	subs	r1, r2, r3
 800f480:	b2ca      	uxtb	r2, r1
 800f482:	4b31      	ldr	r3, [pc, #196]	@ (800f548 <EditRTC+0x2d0>)
 800f484:	701a      	strb	r2, [r3, #0]
 800f486:	e130      	b.n	800f6ea <EditRTC+0x472>
				case 3: day = (day % 31) + 1; break;
 800f488:	4b33      	ldr	r3, [pc, #204]	@ (800f558 <EditRTC+0x2e0>)
 800f48a:	781a      	ldrb	r2, [r3, #0]
 800f48c:	4b3c      	ldr	r3, [pc, #240]	@ (800f580 <EditRTC+0x308>)
 800f48e:	fba3 1302 	umull	r1, r3, r3, r2
 800f492:	1ad1      	subs	r1, r2, r3
 800f494:	0849      	lsrs	r1, r1, #1
 800f496:	440b      	add	r3, r1
 800f498:	0919      	lsrs	r1, r3, #4
 800f49a:	460b      	mov	r3, r1
 800f49c:	015b      	lsls	r3, r3, #5
 800f49e:	1a5b      	subs	r3, r3, r1
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	b2da      	uxtb	r2, r3
 800f4a8:	4b2b      	ldr	r3, [pc, #172]	@ (800f558 <EditRTC+0x2e0>)
 800f4aa:	701a      	strb	r2, [r3, #0]
 800f4ac:	e11d      	b.n	800f6ea <EditRTC+0x472>
				case 4: month = (month % 12) + 1; break;
 800f4ae:	4b2b      	ldr	r3, [pc, #172]	@ (800f55c <EditRTC+0x2e4>)
 800f4b0:	781a      	ldrb	r2, [r3, #0]
 800f4b2:	4b34      	ldr	r3, [pc, #208]	@ (800f584 <EditRTC+0x30c>)
 800f4b4:	fba3 1302 	umull	r1, r3, r3, r2
 800f4b8:	08d9      	lsrs	r1, r3, #3
 800f4ba:	460b      	mov	r3, r1
 800f4bc:	005b      	lsls	r3, r3, #1
 800f4be:	440b      	add	r3, r1
 800f4c0:	009b      	lsls	r3, r3, #2
 800f4c2:	1ad3      	subs	r3, r2, r3
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	b2da      	uxtb	r2, r3
 800f4ca:	4b24      	ldr	r3, [pc, #144]	@ (800f55c <EditRTC+0x2e4>)
 800f4cc:	701a      	strb	r2, [r3, #0]
 800f4ce:	e10c      	b.n	800f6ea <EditRTC+0x472>
				case 5: year = (year + 1) % 100; break;
 800f4d0:	4b23      	ldr	r3, [pc, #140]	@ (800f560 <EditRTC+0x2e8>)
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	4a2c      	ldr	r2, [pc, #176]	@ (800f588 <EditRTC+0x310>)
 800f4d8:	fb82 1203 	smull	r1, r2, r2, r3
 800f4dc:	1151      	asrs	r1, r2, #5
 800f4de:	17da      	asrs	r2, r3, #31
 800f4e0:	1a8a      	subs	r2, r1, r2
 800f4e2:	2164      	movs	r1, #100	@ 0x64
 800f4e4:	fb01 f202 	mul.w	r2, r1, r2
 800f4e8:	1a9a      	subs	r2, r3, r2
 800f4ea:	b2d2      	uxtb	r2, r2
 800f4ec:	4b1c      	ldr	r3, [pc, #112]	@ (800f560 <EditRTC+0x2e8>)
 800f4ee:	701a      	strb	r2, [r3, #0]
 800f4f0:	e0fb      	b.n	800f6ea <EditRTC+0x472>
			}
		} else if (HAL_GPIO_ReadPin(GPIOE, PREV_BTN_Pin) == GPIO_PIN_RESET) {
 800f4f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f4f6:	481e      	ldr	r0, [pc, #120]	@ (800f570 <EditRTC+0x2f8>)
 800f4f8:	f7f4 ff7e 	bl	80043f8 <HAL_GPIO_ReadPin>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f040 8092 	bne.w	800f628 <EditRTC+0x3b0>
			HAL_Delay(Debounce_Delay); // Debounce delay
 800f504:	4b1b      	ldr	r3, [pc, #108]	@ (800f574 <EditRTC+0x2fc>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4618      	mov	r0, r3
 800f50a:	f7f3 fa49 	bl	80029a0 <HAL_Delay>
			switch (editIndex) {
 800f50e:	4b16      	ldr	r3, [pc, #88]	@ (800f568 <EditRTC+0x2f0>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2b05      	cmp	r3, #5
 800f514:	f200 80e9 	bhi.w	800f6ea <EditRTC+0x472>
 800f518:	a201      	add	r2, pc, #4	@ (adr r2, 800f520 <EditRTC+0x2a8>)
 800f51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51e:	bf00      	nop
 800f520:	0800f58d 	.word	0x0800f58d
 800f524:	0800f5a7 	.word	0x0800f5a7
 800f528:	0800f5c1 	.word	0x0800f5c1
 800f52c:	0800f5db 	.word	0x0800f5db
 800f530:	0800f5f5 	.word	0x0800f5f5
 800f534:	0800f60f 	.word	0x0800f60f
 800f538:	200000ac 	.word	0x200000ac
 800f53c:	200000b0 	.word	0x200000b0
 800f540:	20001f58 	.word	0x20001f58
 800f544:	20001f59 	.word	0x20001f59
 800f548:	20001f5a 	.word	0x20001f5a
 800f54c:	080131f4 	.word	0x080131f4
 800f550:	20001f5c 	.word	0x20001f5c
 800f554:	08014d34 	.word	0x08014d34
 800f558:	200000bd 	.word	0x200000bd
 800f55c:	200000be 	.word	0x200000be
 800f560:	200000bf 	.word	0x200000bf
 800f564:	08013204 	.word	0x08013204
 800f568:	20001f8c 	.word	0x20001f8c
 800f56c:	08013238 	.word	0x08013238
 800f570:	40021000 	.word	0x40021000
 800f574:	200000a4 	.word	0x200000a4
 800f578:	2aaaaaab 	.word	0x2aaaaaab
 800f57c:	88888889 	.word	0x88888889
 800f580:	08421085 	.word	0x08421085
 800f584:	aaaaaaab 	.word	0xaaaaaaab
 800f588:	51eb851f 	.word	0x51eb851f
				case 0: hours = (hours == 0) ? 23 : hours - 1; break;
 800f58c:	4b61      	ldr	r3, [pc, #388]	@ (800f714 <EditRTC+0x49c>)
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d004      	beq.n	800f59e <EditRTC+0x326>
 800f594:	4b5f      	ldr	r3, [pc, #380]	@ (800f714 <EditRTC+0x49c>)
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	3b01      	subs	r3, #1
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	e000      	b.n	800f5a0 <EditRTC+0x328>
 800f59e:	2317      	movs	r3, #23
 800f5a0:	4a5c      	ldr	r2, [pc, #368]	@ (800f714 <EditRTC+0x49c>)
 800f5a2:	7013      	strb	r3, [r2, #0]
 800f5a4:	e0a1      	b.n	800f6ea <EditRTC+0x472>
				case 1: minutes = (minutes == 0) ? 59 : minutes - 1; break;
 800f5a6:	4b5c      	ldr	r3, [pc, #368]	@ (800f718 <EditRTC+0x4a0>)
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d004      	beq.n	800f5b8 <EditRTC+0x340>
 800f5ae:	4b5a      	ldr	r3, [pc, #360]	@ (800f718 <EditRTC+0x4a0>)
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	b2db      	uxtb	r3, r3
 800f5b6:	e000      	b.n	800f5ba <EditRTC+0x342>
 800f5b8:	233b      	movs	r3, #59	@ 0x3b
 800f5ba:	4a57      	ldr	r2, [pc, #348]	@ (800f718 <EditRTC+0x4a0>)
 800f5bc:	7013      	strb	r3, [r2, #0]
 800f5be:	e094      	b.n	800f6ea <EditRTC+0x472>
				case 2: seconds = (seconds == 0) ? 59 : seconds - 1; break;
 800f5c0:	4b56      	ldr	r3, [pc, #344]	@ (800f71c <EditRTC+0x4a4>)
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d004      	beq.n	800f5d2 <EditRTC+0x35a>
 800f5c8:	4b54      	ldr	r3, [pc, #336]	@ (800f71c <EditRTC+0x4a4>)
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	e000      	b.n	800f5d4 <EditRTC+0x35c>
 800f5d2:	233b      	movs	r3, #59	@ 0x3b
 800f5d4:	4a51      	ldr	r2, [pc, #324]	@ (800f71c <EditRTC+0x4a4>)
 800f5d6:	7013      	strb	r3, [r2, #0]
 800f5d8:	e087      	b.n	800f6ea <EditRTC+0x472>
				case 3: day = (day == 1) ? 31 : day - 1; break;
 800f5da:	4b51      	ldr	r3, [pc, #324]	@ (800f720 <EditRTC+0x4a8>)
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d004      	beq.n	800f5ec <EditRTC+0x374>
 800f5e2:	4b4f      	ldr	r3, [pc, #316]	@ (800f720 <EditRTC+0x4a8>)
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	3b01      	subs	r3, #1
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	e000      	b.n	800f5ee <EditRTC+0x376>
 800f5ec:	231f      	movs	r3, #31
 800f5ee:	4a4c      	ldr	r2, [pc, #304]	@ (800f720 <EditRTC+0x4a8>)
 800f5f0:	7013      	strb	r3, [r2, #0]
 800f5f2:	e07a      	b.n	800f6ea <EditRTC+0x472>
				case 4: month = (month == 1) ? 12 : month - 1; break;
 800f5f4:	4b4b      	ldr	r3, [pc, #300]	@ (800f724 <EditRTC+0x4ac>)
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d004      	beq.n	800f606 <EditRTC+0x38e>
 800f5fc:	4b49      	ldr	r3, [pc, #292]	@ (800f724 <EditRTC+0x4ac>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	3b01      	subs	r3, #1
 800f602:	b2db      	uxtb	r3, r3
 800f604:	e000      	b.n	800f608 <EditRTC+0x390>
 800f606:	230c      	movs	r3, #12
 800f608:	4a46      	ldr	r2, [pc, #280]	@ (800f724 <EditRTC+0x4ac>)
 800f60a:	7013      	strb	r3, [r2, #0]
 800f60c:	e06d      	b.n	800f6ea <EditRTC+0x472>
				case 5: year = (year == 0) ? 99 : year - 1; break;
 800f60e:	4b46      	ldr	r3, [pc, #280]	@ (800f728 <EditRTC+0x4b0>)
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d004      	beq.n	800f620 <EditRTC+0x3a8>
 800f616:	4b44      	ldr	r3, [pc, #272]	@ (800f728 <EditRTC+0x4b0>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	3b01      	subs	r3, #1
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	e000      	b.n	800f622 <EditRTC+0x3aa>
 800f620:	2363      	movs	r3, #99	@ 0x63
 800f622:	4a41      	ldr	r2, [pc, #260]	@ (800f728 <EditRTC+0x4b0>)
 800f624:	7013      	strb	r3, [r2, #0]
 800f626:	e060      	b.n	800f6ea <EditRTC+0x472>
			}
		} else if (HAL_GPIO_ReadPin(GPIOB, NAVIGATE_BTN_Pin) == GPIO_PIN_RESET) {
 800f628:	2102      	movs	r1, #2
 800f62a:	4840      	ldr	r0, [pc, #256]	@ (800f72c <EditRTC+0x4b4>)
 800f62c:	f7f4 fee4 	bl	80043f8 <HAL_GPIO_ReadPin>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d159      	bne.n	800f6ea <EditRTC+0x472>
			HAL_Delay(Debounce_Delay); // Debounce delay
 800f636:	4b3e      	ldr	r3, [pc, #248]	@ (800f730 <EditRTC+0x4b8>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7f3 f9b0 	bl	80029a0 <HAL_Delay>
			editIndex = (editIndex + 1) % 6;
 800f640:	4b3c      	ldr	r3, [pc, #240]	@ (800f734 <EditRTC+0x4bc>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	1c59      	adds	r1, r3, #1
 800f646:	4b3c      	ldr	r3, [pc, #240]	@ (800f738 <EditRTC+0x4c0>)
 800f648:	fb83 3201 	smull	r3, r2, r3, r1
 800f64c:	17cb      	asrs	r3, r1, #31
 800f64e:	1ad2      	subs	r2, r2, r3
 800f650:	4613      	mov	r3, r2
 800f652:	005b      	lsls	r3, r3, #1
 800f654:	4413      	add	r3, r2
 800f656:	005b      	lsls	r3, r3, #1
 800f658:	1aca      	subs	r2, r1, r3
 800f65a:	4b36      	ldr	r3, [pc, #216]	@ (800f734 <EditRTC+0x4bc>)
 800f65c:	601a      	str	r2, [r3, #0]
			holdNavigateBtn++;
 800f65e:	4b37      	ldr	r3, [pc, #220]	@ (800f73c <EditRTC+0x4c4>)
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	3301      	adds	r3, #1
 800f664:	b2da      	uxtb	r2, r3
 800f666:	4b35      	ldr	r3, [pc, #212]	@ (800f73c <EditRTC+0x4c4>)
 800f668:	701a      	strb	r2, [r3, #0]
			ssd1306_UpdateScreen();
 800f66a:	f7f2 f9f9 	bl	8001a60 <ssd1306_UpdateScreen>


			if (editIndex == 0) { // Completed editing all components
 800f66e:	4b31      	ldr	r3, [pc, #196]	@ (800f734 <EditRTC+0x4bc>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d139      	bne.n	800f6ea <EditRTC+0x472>
				RTC_SetTime(hours, minutes, seconds, date, day, month, year);
 800f676:	4b27      	ldr	r3, [pc, #156]	@ (800f714 <EditRTC+0x49c>)
 800f678:	7818      	ldrb	r0, [r3, #0]
 800f67a:	4b27      	ldr	r3, [pc, #156]	@ (800f718 <EditRTC+0x4a0>)
 800f67c:	781c      	ldrb	r4, [r3, #0]
 800f67e:	4b27      	ldr	r3, [pc, #156]	@ (800f71c <EditRTC+0x4a4>)
 800f680:	781d      	ldrb	r5, [r3, #0]
 800f682:	4b2f      	ldr	r3, [pc, #188]	@ (800f740 <EditRTC+0x4c8>)
 800f684:	781e      	ldrb	r6, [r3, #0]
 800f686:	4b26      	ldr	r3, [pc, #152]	@ (800f720 <EditRTC+0x4a8>)
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	4a26      	ldr	r2, [pc, #152]	@ (800f724 <EditRTC+0x4ac>)
 800f68c:	7812      	ldrb	r2, [r2, #0]
 800f68e:	4926      	ldr	r1, [pc, #152]	@ (800f728 <EditRTC+0x4b0>)
 800f690:	7809      	ldrb	r1, [r1, #0]
 800f692:	9102      	str	r1, [sp, #8]
 800f694:	9201      	str	r2, [sp, #4]
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	4633      	mov	r3, r6
 800f69a:	462a      	mov	r2, r5
 800f69c:	4621      	mov	r1, r4
 800f69e:	f000 fb91 	bl	800fdc4 <RTC_SetTime>

				HAL_Delay(10);
 800f6a2:	200a      	movs	r0, #10
 800f6a4:	f7f3 f97c 	bl	80029a0 <HAL_Delay>
				ssd1306_Fill(Black);
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	f7f2 f9c1 	bl	8001a30 <ssd1306_Fill>
				ssd1306_SetCursor(menu_line_X+5, menu_line_Y+5);
 800f6ae:	4b25      	ldr	r3, [pc, #148]	@ (800f744 <EditRTC+0x4cc>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	3305      	adds	r3, #5
 800f6b6:	b2da      	uxtb	r2, r3
 800f6b8:	4b23      	ldr	r3, [pc, #140]	@ (800f748 <EditRTC+0x4d0>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	3305      	adds	r3, #5
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	f7f2 fafd 	bl	8001cc4 <ssd1306_SetCursor>
				ssd1306_WriteString("DONE", Font_11x18, White);
 800f6ca:	4b20      	ldr	r3, [pc, #128]	@ (800f74c <EditRTC+0x4d4>)
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	9200      	str	r2, [sp, #0]
 800f6d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f6d2:	481f      	ldr	r0, [pc, #124]	@ (800f750 <EditRTC+0x4d8>)
 800f6d4:	f7f2 fad0 	bl	8001c78 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800f6d8:	f7f2 f9c2 	bl	8001a60 <ssd1306_UpdateScreen>
				HAL_Delay(2000);
 800f6dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800f6e0:	f7f3 f95e 	bl	80029a0 <HAL_Delay>

				TimeSetDone=1;
 800f6e4:	4b1b      	ldr	r3, [pc, #108]	@ (800f754 <EditRTC+0x4dc>)
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	601a      	str	r2, [r3, #0]
			}
		}

		ssd1306_UpdateScreen();
 800f6ea:	f7f2 f9b9 	bl	8001a60 <ssd1306_UpdateScreen>
	while(editIndex<6 && !TimeSetDone)  // && !TimeSetDone
 800f6ee:	4b11      	ldr	r3, [pc, #68]	@ (800f734 <EditRTC+0x4bc>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2b05      	cmp	r3, #5
 800f6f4:	dc04      	bgt.n	800f700 <EditRTC+0x488>
 800f6f6:	4b17      	ldr	r3, [pc, #92]	@ (800f754 <EditRTC+0x4dc>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f43f adc0 	beq.w	800f280 <EditRTC+0x8>
	}  //while

    currentMenu = MENU_SET_AVG;
 800f700:	4b15      	ldr	r3, [pc, #84]	@ (800f758 <EditRTC+0x4e0>)
 800f702:	2202      	movs	r2, #2
 800f704:	701a      	strb	r2, [r3, #0]
	LCD();
 800f706:	f7ff f811 	bl	800e72c <LCD>
}
 800f70a:	bf00      	nop
 800f70c:	3704      	adds	r7, #4
 800f70e:	46bd      	mov	sp, r7
 800f710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f712:	bf00      	nop
 800f714:	20001f58 	.word	0x20001f58
 800f718:	20001f59 	.word	0x20001f59
 800f71c:	20001f5a 	.word	0x20001f5a
 800f720:	200000bd 	.word	0x200000bd
 800f724:	200000be 	.word	0x200000be
 800f728:	200000bf 	.word	0x200000bf
 800f72c:	40020400 	.word	0x40020400
 800f730:	200000a4 	.word	0x200000a4
 800f734:	20001f8c 	.word	0x20001f8c
 800f738:	2aaaaaab 	.word	0x2aaaaaab
 800f73c:	20001f16 	.word	0x20001f16
 800f740:	200000bc 	.word	0x200000bc
 800f744:	200000ac 	.word	0x200000ac
 800f748:	200000b0 	.word	0x200000b0
 800f74c:	08014d40 	.word	0x08014d40
 800f750:	08013240 	.word	0x08013240
 800f754:	20001f54 	.word	0x20001f54
 800f758:	20001f14 	.word	0x20001f14
 800f75c:	00000000 	.word	0x00000000

0800f760 <BatteryPercentage>:


// Function to calculate battery percentage
void BatteryPercentage(void) {                  //NOTE: With TMR: Calculate Percenatge Every 5 sec & Filter Window = 5 & UPDATE_THRESHOLD = 5
 800f760:	b580      	push	{r7, lr}
 800f762:	af00      	add	r7, sp, #0

	//HAL_ADC_Start(&hadc1);
	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	//adcValue1 = HAL_ADC_GetValue(&hadc1);

    HAL_ADC_Start_DMA(&hadc1, &adcValue1, 1);
 800f764:	2201      	movs	r2, #1
 800f766:	4938      	ldr	r1, [pc, #224]	@ (800f848 <BatteryPercentage+0xe8>)
 800f768:	4838      	ldr	r0, [pc, #224]	@ (800f84c <BatteryPercentage+0xec>)
 800f76a:	f7f3 f981 	bl	8002a70 <HAL_ADC_Start_DMA>

	batteryVoltage = (adcValue1 / 4575.0) * 3.3; //4095.0 // Convert ADC value to voltage
 800f76e:	4b36      	ldr	r3, [pc, #216]	@ (800f848 <BatteryPercentage+0xe8>)
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	4618      	mov	r0, r3
 800f774:	f7f0 fee6 	bl	8000544 <__aeabi_i2d>
 800f778:	a32d      	add	r3, pc, #180	@ (adr r3, 800f830 <BatteryPercentage+0xd0>)
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	f7f1 f875 	bl	800086c <__aeabi_ddiv>
 800f782:	4602      	mov	r2, r0
 800f784:	460b      	mov	r3, r1
 800f786:	4610      	mov	r0, r2
 800f788:	4619      	mov	r1, r3
 800f78a:	a32b      	add	r3, pc, #172	@ (adr r3, 800f838 <BatteryPercentage+0xd8>)
 800f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f790:	f7f0 ff42 	bl	8000618 <__aeabi_dmul>
 800f794:	4602      	mov	r2, r0
 800f796:	460b      	mov	r3, r1
 800f798:	4610      	mov	r0, r2
 800f79a:	4619      	mov	r1, r3
 800f79c:	f7f1 fa14 	bl	8000bc8 <__aeabi_d2f>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	4a2b      	ldr	r2, [pc, #172]	@ (800f850 <BatteryPercentage+0xf0>)
 800f7a4:	6013      	str	r3, [r2, #0]
	batteryVoltage *= 1.67;       						//1.68	//2	 //  = (R1 + R2) / R2 = 2
 800f7a6:	4b2a      	ldr	r3, [pc, #168]	@ (800f850 <BatteryPercentage+0xf0>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7f0 fedc 	bl	8000568 <__aeabi_f2d>
 800f7b0:	a323      	add	r3, pc, #140	@ (adr r3, 800f840 <BatteryPercentage+0xe0>)
 800f7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b6:	f7f0 ff2f 	bl	8000618 <__aeabi_dmul>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	460b      	mov	r3, r1
 800f7be:	4610      	mov	r0, r2
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	f7f1 fa01 	bl	8000bc8 <__aeabi_d2f>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	4a21      	ldr	r2, [pc, #132]	@ (800f850 <BatteryPercentage+0xf0>)
 800f7ca:	6013      	str	r3, [r2, #0]

	// Update the filter array with the new reading
	adcReadings[filterIndex] = batteryVoltage;
 800f7cc:	4b21      	ldr	r3, [pc, #132]	@ (800f854 <BatteryPercentage+0xf4>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	4b1f      	ldr	r3, [pc, #124]	@ (800f850 <BatteryPercentage+0xf0>)
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	4920      	ldr	r1, [pc, #128]	@ (800f858 <BatteryPercentage+0xf8>)
 800f7d8:	0083      	lsls	r3, r0, #2
 800f7da:	440b      	add	r3, r1
 800f7dc:	601a      	str	r2, [r3, #0]
	filterIndex = (filterIndex + 1) % FILTER_SIZE; // Circular buffer index
 800f7de:	4b1d      	ldr	r3, [pc, #116]	@ (800f854 <BatteryPercentage+0xf4>)
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	4b1d      	ldr	r3, [pc, #116]	@ (800f85c <BatteryPercentage+0xfc>)
 800f7e6:	fb83 1302 	smull	r1, r3, r3, r2
 800f7ea:	1059      	asrs	r1, r3, #1
 800f7ec:	17d3      	asrs	r3, r2, #31
 800f7ee:	1ac9      	subs	r1, r1, r3
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	440b      	add	r3, r1
 800f7f6:	1ad1      	subs	r1, r2, r3
 800f7f8:	b2ca      	uxtb	r2, r1
 800f7fa:	4b16      	ldr	r3, [pc, #88]	@ (800f854 <BatteryPercentage+0xf4>)
 800f7fc:	701a      	strb	r2, [r3, #0]

	// Calculate the filtered voltage using the moving average
	filteredVoltage = CalculateAverage(adcReadings, FILTER_SIZE);
 800f7fe:	2105      	movs	r1, #5
 800f800:	4815      	ldr	r0, [pc, #84]	@ (800f858 <BatteryPercentage+0xf8>)
 800f802:	f000 f88d 	bl	800f920 <CalculateAverage>
 800f806:	eef0 7a40 	vmov.f32	s15, s0
 800f80a:	4b15      	ldr	r3, [pc, #84]	@ (800f860 <BatteryPercentage+0x100>)
 800f80c:	edc3 7a00 	vstr	s15, [r3]

    // Calculate battery percentage based on filtered voltage
	percentage = CalculateBatteryPercentage(filteredVoltage);
 800f810:	4b13      	ldr	r3, [pc, #76]	@ (800f860 <BatteryPercentage+0x100>)
 800f812:	edd3 7a00 	vldr	s15, [r3]
 800f816:	eeb0 0a67 	vmov.f32	s0, s15
 800f81a:	f000 f825 	bl	800f868 <CalculateBatteryPercentage>
 800f81e:	eef0 7a40 	vmov.f32	s15, s0
 800f822:	4b10      	ldr	r3, [pc, #64]	@ (800f864 <BatteryPercentage+0x104>)
 800f824:	edc3 7a00 	vstr	s15, [r3]

}
 800f828:	bf00      	nop
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	f3af 8000 	nop.w
 800f830:	00000000 	.word	0x00000000
 800f834:	40b1df00 	.word	0x40b1df00
 800f838:	66666666 	.word	0x66666666
 800f83c:	400a6666 	.word	0x400a6666
 800f840:	eb851eb8 	.word	0xeb851eb8
 800f844:	3ffab851 	.word	0x3ffab851
 800f848:	20001f70 	.word	0x20001f70
 800f84c:	200002a8 	.word	0x200002a8
 800f850:	20001f78 	.word	0x20001f78
 800f854:	20001f84 	.word	0x20001f84
 800f858:	20001fa8 	.word	0x20001fa8
 800f85c:	66666667 	.word	0x66666667
 800f860:	20001f88 	.word	0x20001f88
 800f864:	20001f74 	.word	0x20001f74

0800f868 <CalculateBatteryPercentage>:


float CalculateBatteryPercentage(float batteryVoltage) {
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	ed87 0a01 	vstr	s0, [r7, #4]
    float percentage;

    if (batteryVoltage >= 4.15) {
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f7f0 fe78 	bl	8000568 <__aeabi_f2d>
 800f878:	a327      	add	r3, pc, #156	@ (adr r3, 800f918 <CalculateBatteryPercentage+0xb0>)
 800f87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87e:	f7f1 f951 	bl	8000b24 <__aeabi_dcmpge>
 800f882:	4603      	mov	r3, r0
 800f884:	2b00      	cmp	r3, #0
 800f886:	d002      	beq.n	800f88e <CalculateBatteryPercentage+0x26>
        percentage = 99.0;
 800f888:	4b21      	ldr	r3, [pc, #132]	@ (800f910 <CalculateBatteryPercentage+0xa8>)
 800f88a:	60fb      	str	r3, [r7, #12]
 800f88c:	e030      	b.n	800f8f0 <CalculateBatteryPercentage+0x88>
    } else if (batteryVoltage <= 3.6) {
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f7f0 fe6a 	bl	8000568 <__aeabi_f2d>
 800f894:	a31a      	add	r3, pc, #104	@ (adr r3, 800f900 <CalculateBatteryPercentage+0x98>)
 800f896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89a:	f7f1 f939 	bl	8000b10 <__aeabi_dcmple>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d003      	beq.n	800f8ac <CalculateBatteryPercentage+0x44>
        percentage = 0.0;
 800f8a4:	f04f 0300 	mov.w	r3, #0
 800f8a8:	60fb      	str	r3, [r7, #12]
 800f8aa:	e021      	b.n	800f8f0 <CalculateBatteryPercentage+0x88>
    } else {
        percentage = (batteryVoltage - 3.6) / (4.15 - 3.6) * 100;
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7f0 fe5b 	bl	8000568 <__aeabi_f2d>
 800f8b2:	a313      	add	r3, pc, #76	@ (adr r3, 800f900 <CalculateBatteryPercentage+0x98>)
 800f8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b8:	f7f0 fcf6 	bl	80002a8 <__aeabi_dsub>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	460b      	mov	r3, r1
 800f8c0:	4610      	mov	r0, r2
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	a310      	add	r3, pc, #64	@ (adr r3, 800f908 <CalculateBatteryPercentage+0xa0>)
 800f8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ca:	f7f0 ffcf 	bl	800086c <__aeabi_ddiv>
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	4610      	mov	r0, r2
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	f04f 0200 	mov.w	r2, #0
 800f8da:	4b0e      	ldr	r3, [pc, #56]	@ (800f914 <CalculateBatteryPercentage+0xac>)
 800f8dc:	f7f0 fe9c 	bl	8000618 <__aeabi_dmul>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	460b      	mov	r3, r1
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	f7f1 f96e 	bl	8000bc8 <__aeabi_d2f>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	60fb      	str	r3, [r7, #12]
    }

    return percentage;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	ee07 3a90 	vmov	s15, r3
}
 800f8f6:	eeb0 0a67 	vmov.f32	s0, s15
 800f8fa:	3710      	adds	r7, #16
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	cccccccd 	.word	0xcccccccd
 800f904:	400ccccc 	.word	0x400ccccc
 800f908:	9999999c 	.word	0x9999999c
 800f90c:	3fe19999 	.word	0x3fe19999
 800f910:	42c60000 	.word	0x42c60000
 800f914:	40590000 	.word	0x40590000
 800f918:	9999999a 	.word	0x9999999a
 800f91c:	40109999 	.word	0x40109999

0800f920 <CalculateAverage>:

// Function to calculate the average of an array
float CalculateAverage(float *array, uint8_t size) {
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	460b      	mov	r3, r1
 800f92a:	70fb      	strb	r3, [r7, #3]
    float sum = 0.0;
 800f92c:	f04f 0300 	mov.w	r3, #0
 800f930:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < size; i++) {
 800f932:	2300      	movs	r3, #0
 800f934:	72fb      	strb	r3, [r7, #11]
 800f936:	e00e      	b.n	800f956 <CalculateAverage+0x36>
        sum += array[i];
 800f938:	7afb      	ldrb	r3, [r7, #11]
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	4413      	add	r3, r2
 800f940:	edd3 7a00 	vldr	s15, [r3]
 800f944:	ed97 7a03 	vldr	s14, [r7, #12]
 800f948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f94c:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint8_t i = 0; i < size; i++) {
 800f950:	7afb      	ldrb	r3, [r7, #11]
 800f952:	3301      	adds	r3, #1
 800f954:	72fb      	strb	r3, [r7, #11]
 800f956:	7afa      	ldrb	r2, [r7, #11]
 800f958:	78fb      	ldrb	r3, [r7, #3]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d3ec      	bcc.n	800f938 <CalculateAverage+0x18>
    }
    return sum / size;
 800f95e:	78fb      	ldrb	r3, [r7, #3]
 800f960:	ee07 3a90 	vmov	s15, r3
 800f964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f968:	ed97 7a03 	vldr	s14, [r7, #12]
 800f96c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f970:	eef0 7a66 	vmov.f32	s15, s13
}
 800f974:	eeb0 0a67 	vmov.f32	s0, s15
 800f978:	3714      	adds	r7, #20
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr
	...

0800f984 <DisplayPercentage>:

void DisplayPercentage(void) {
 800f984:	b580      	push	{r7, lr}
 800f986:	b08e      	sub	sp, #56	@ 0x38
 800f988:	af02      	add	r7, sp, #8

	// Update the display only if there is a significant change in percentage
	if (fabs(percentage - lastPercentage) >= UPDATE_THRESHOLD){
 800f98a:	4b42      	ldr	r3, [pc, #264]	@ (800fa94 <DisplayPercentage+0x110>)
 800f98c:	ed93 7a00 	vldr	s14, [r3]
 800f990:	4b41      	ldr	r3, [pc, #260]	@ (800fa98 <DisplayPercentage+0x114>)
 800f992:	edd3 7a00 	vldr	s15, [r3]
 800f996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f99a:	eef0 7ae7 	vabs.f32	s15, s15
 800f99e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800f9a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9aa:	db2f      	blt.n	800fa0c <DisplayPercentage+0x88>
		char buffer1[20];
		snprintf(buffer1, sizeof(buffer1), "%.0f", percentage);
 800f9ac:	4b39      	ldr	r3, [pc, #228]	@ (800fa94 <DisplayPercentage+0x110>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7f0 fdd9 	bl	8000568 <__aeabi_f2d>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	f107 0014 	add.w	r0, r7, #20
 800f9be:	e9cd 2300 	strd	r2, r3, [sp]
 800f9c2:	4a36      	ldr	r2, [pc, #216]	@ (800fa9c <DisplayPercentage+0x118>)
 800f9c4:	2114      	movs	r1, #20
 800f9c6:	f001 fb01 	bl	8010fcc <sniprintf>
		ssd1306_SetCursor(107, 12);
 800f9ca:	210c      	movs	r1, #12
 800f9cc:	206b      	movs	r0, #107	@ 0x6b
 800f9ce:	f7f2 f979 	bl	8001cc4 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer1, Font_7x10, White);
 800f9d2:	4b33      	ldr	r3, [pc, #204]	@ (800faa0 <DisplayPercentage+0x11c>)
 800f9d4:	f107 0014 	add.w	r0, r7, #20
 800f9d8:	2201      	movs	r2, #1
 800f9da:	9200      	str	r2, [sp, #0]
 800f9dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f9de:	f7f2 f94b 	bl	8001c78 <ssd1306_WriteString>
		//ssd1306_UpdateScreen();
		lastPercentage = percentage;           // Update the last percentage value
 800f9e2:	4b2c      	ldr	r3, [pc, #176]	@ (800fa94 <DisplayPercentage+0x110>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4a2c      	ldr	r2, [pc, #176]	@ (800fa98 <DisplayPercentage+0x114>)
 800f9e8:	6013      	str	r3, [r2, #0]
		//***************** BATT ICON *******************************************//
		const uint8_t* batteryIcon = GetBatteryIcon(percentage);
 800f9ea:	4b2a      	ldr	r3, [pc, #168]	@ (800fa94 <DisplayPercentage+0x110>)
 800f9ec:	edd3 7a00 	vldr	s15, [r3]
 800f9f0:	eeb0 0a67 	vmov.f32	s0, s15
 800f9f4:	f000 f85a 	bl	800faac <GetBatteryIcon>
 800f9f8:	62b8      	str	r0, [r7, #40]	@ 0x28
		OLED_DrawBitmap(122, 12, batteryIcon, 16, 8);
 800f9fa:	2308      	movs	r3, #8
 800f9fc:	9300      	str	r3, [sp, #0]
 800f9fe:	2310      	movs	r3, #16
 800fa00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa02:	210c      	movs	r1, #12
 800fa04:	207a      	movs	r0, #122	@ 0x7a
 800fa06:	f7f2 fa4f 	bl	8001ea8 <OLED_DrawBitmap>
 800fa0a:	e028      	b.n	800fa5e <DisplayPercentage+0xda>
	}
	else{
		char buffer1[20];
		snprintf(buffer1, sizeof(buffer1), "%.0f", lastPercentage);
 800fa0c:	4b22      	ldr	r3, [pc, #136]	@ (800fa98 <DisplayPercentage+0x114>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7f0 fda9 	bl	8000568 <__aeabi_f2d>
 800fa16:	4602      	mov	r2, r0
 800fa18:	460b      	mov	r3, r1
 800fa1a:	4638      	mov	r0, r7
 800fa1c:	e9cd 2300 	strd	r2, r3, [sp]
 800fa20:	4a1e      	ldr	r2, [pc, #120]	@ (800fa9c <DisplayPercentage+0x118>)
 800fa22:	2114      	movs	r1, #20
 800fa24:	f001 fad2 	bl	8010fcc <sniprintf>
		ssd1306_SetCursor(107, 12);
 800fa28:	210c      	movs	r1, #12
 800fa2a:	206b      	movs	r0, #107	@ 0x6b
 800fa2c:	f7f2 f94a 	bl	8001cc4 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer1, Font_7x10, White);
 800fa30:	4b1b      	ldr	r3, [pc, #108]	@ (800faa0 <DisplayPercentage+0x11c>)
 800fa32:	4638      	mov	r0, r7
 800fa34:	2201      	movs	r2, #1
 800fa36:	9200      	str	r2, [sp, #0]
 800fa38:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fa3a:	f7f2 f91d 	bl	8001c78 <ssd1306_WriteString>
		//***********************************************************************//
		const uint8_t* batteryIcon = GetBatteryIcon(lastPercentage);
 800fa3e:	4b16      	ldr	r3, [pc, #88]	@ (800fa98 <DisplayPercentage+0x114>)
 800fa40:	edd3 7a00 	vldr	s15, [r3]
 800fa44:	eeb0 0a67 	vmov.f32	s0, s15
 800fa48:	f000 f830 	bl	800faac <GetBatteryIcon>
 800fa4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		OLED_DrawBitmap(122, 12, batteryIcon, 16, 8);
 800fa4e:	2308      	movs	r3, #8
 800fa50:	9300      	str	r3, [sp, #0]
 800fa52:	2310      	movs	r3, #16
 800fa54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa56:	210c      	movs	r1, #12
 800fa58:	207a      	movs	r0, #122	@ 0x7a
 800fa5a:	f7f2 fa25 	bl	8001ea8 <OLED_DrawBitmap>
	}

	if(isCharging){
 800fa5e:	4b11      	ldr	r3, [pc, #68]	@ (800faa4 <DisplayPercentage+0x120>)
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00a      	beq.n	800fa7c <DisplayPercentage+0xf8>
		// Show charging symbol next to battery icon
		ssd1306_DrawBitmap(99, 12, charging_symbol, 8, 8, White);
 800fa66:	2301      	movs	r3, #1
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	2308      	movs	r3, #8
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	2308      	movs	r3, #8
 800fa70:	4a0d      	ldr	r2, [pc, #52]	@ (800faa8 <DisplayPercentage+0x124>)
 800fa72:	210c      	movs	r1, #12
 800fa74:	2063      	movs	r0, #99	@ 0x63
 800fa76:	f7f2 f98b 	bl	8001d90 <ssd1306_DrawBitmap>
	else{
		// Clear the area where the charging symbol would be
		ssd1306_FillRectangle(99, 12, 106, 20, Black);                 //ssd1306_ClearArea
	}

}
 800fa7a:	e007      	b.n	800fa8c <DisplayPercentage+0x108>
		ssd1306_FillRectangle(99, 12, 106, 20, Black);                 //ssd1306_ClearArea
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	2314      	movs	r3, #20
 800fa82:	226a      	movs	r2, #106	@ 0x6a
 800fa84:	210c      	movs	r1, #12
 800fa86:	2063      	movs	r0, #99	@ 0x63
 800fa88:	f7f2 f934 	bl	8001cf4 <ssd1306_FillRectangle>
}
 800fa8c:	bf00      	nop
 800fa8e:	3730      	adds	r7, #48	@ 0x30
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	20001f74 	.word	0x20001f74
 800fa98:	20001fbc 	.word	0x20001fbc
 800fa9c:	08013248 	.word	0x08013248
 800faa0:	08014d34 	.word	0x08014d34
 800faa4:	20001fc0 	.word	0x20001fc0
 800faa8:	080152bc 	.word	0x080152bc

0800faac <GetBatteryIcon>:


const uint8_t* GetBatteryIcon(float percentage) {
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (percentage >= 75.0) {
 800fab6:	edd7 7a01 	vldr	s15, [r7, #4]
 800faba:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800fb08 <GetBatteryIcon+0x5c>
 800fabe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac6:	db01      	blt.n	800facc <GetBatteryIcon+0x20>
        return battery_full;
 800fac8:	4b10      	ldr	r3, [pc, #64]	@ (800fb0c <GetBatteryIcon+0x60>)
 800faca:	e016      	b.n	800fafa <GetBatteryIcon+0x4e>
    } else if (percentage >= 50.0) {
 800facc:	edd7 7a01 	vldr	s15, [r7, #4]
 800fad0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800fb10 <GetBatteryIcon+0x64>
 800fad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fadc:	db01      	blt.n	800fae2 <GetBatteryIcon+0x36>
        return battery_half;
 800fade:	4b0d      	ldr	r3, [pc, #52]	@ (800fb14 <GetBatteryIcon+0x68>)
 800fae0:	e00b      	b.n	800fafa <GetBatteryIcon+0x4e>
    } else if (percentage >= 25.0) {
 800fae2:	edd7 7a01 	vldr	s15, [r7, #4]
 800fae6:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800faea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800faee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf2:	db01      	blt.n	800faf8 <GetBatteryIcon+0x4c>
        return battery_low;
 800faf4:	4b08      	ldr	r3, [pc, #32]	@ (800fb18 <GetBatteryIcon+0x6c>)
 800faf6:	e000      	b.n	800fafa <GetBatteryIcon+0x4e>
    } else {
        return battery_empty;
 800faf8:	4b08      	ldr	r3, [pc, #32]	@ (800fb1c <GetBatteryIcon+0x70>)
    }
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	370c      	adds	r7, #12
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
 800fb06:	bf00      	nop
 800fb08:	42960000 	.word	0x42960000
 800fb0c:	080152ac 	.word	0x080152ac
 800fb10:	42480000 	.word	0x42480000
 800fb14:	0801529c 	.word	0x0801529c
 800fb18:	0801528c 	.word	0x0801528c
 800fb1c:	0801527c 	.word	0x0801527c

0800fb20 <TIM1_TRG_COM_TIM11_IRQHandler>:


void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 800fb20:	b580      	push	{r7, lr}
 800fb22:	af00      	add	r7, sp, #0
	if (TIM11->SR & TIM_SR_UIF) { // Check interrupt flag
 800fb24:	4b07      	ldr	r3, [pc, #28]	@ (800fb44 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	f003 0301 	and.w	r3, r3, #1
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d007      	beq.n	800fb40 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>
		TIM11->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 800fb30:	4b04      	ldr	r3, [pc, #16]	@ (800fb44 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 800fb32:	691b      	ldr	r3, [r3, #16]
 800fb34:	4a03      	ldr	r2, [pc, #12]	@ (800fb44 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 800fb36:	f023 0301 	bic.w	r3, r3, #1
 800fb3a:	6113      	str	r3, [r2, #16]
		BatteryPercentage();      //calculate batt percentage , Every 5 second
 800fb3c:	f7ff fe10 	bl	800f760 <BatteryPercentage>
	}
}
 800fb40:	bf00      	nop
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	40014800 	.word	0x40014800

0800fb48 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void) {
 800fb48:	b480      	push	{r7}
 800fb4a:	af00      	add	r7, sp, #0
	if (TIM10->SR & TIM_SR_UIF) { // Check interrupt flag
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800fb78 <TIM1_UP_TIM10_IRQHandler+0x30>)
 800fb4e:	691b      	ldr	r3, [r3, #16]
 800fb50:	f003 0301 	and.w	r3, r3, #1
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d00a      	beq.n	800fb6e <TIM1_UP_TIM10_IRQHandler+0x26>
		TIM10->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 800fb58:	4b07      	ldr	r3, [pc, #28]	@ (800fb78 <TIM1_UP_TIM10_IRQHandler+0x30>)
 800fb5a:	691b      	ldr	r3, [r3, #16]
 800fb5c:	4a06      	ldr	r2, [pc, #24]	@ (800fb78 <TIM1_UP_TIM10_IRQHandler+0x30>)
 800fb5e:	f023 0301 	bic.w	r3, r3, #1
 800fb62:	6113      	str	r3, [r2, #16]
		dotCounter++;
 800fb64:	4b05      	ldr	r3, [pc, #20]	@ (800fb7c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	4a04      	ldr	r2, [pc, #16]	@ (800fb7c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800fb6c:	6013      	str	r3, [r2, #0]
	}
}
 800fb6e:	bf00      	nop
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr
 800fb78:	40014400 	.word	0x40014400
 800fb7c:	20001f7c 	.word	0x20001f7c

0800fb80 <LCD_UpdateMenu>:

//#######################################################################################################################


// Function to handle menu updates
void LCD_UpdateMenu(void) {
 800fb80:	b580      	push	{r7, lr}
 800fb82:	af00      	add	r7, sp, #0
    LCD_DisplayMenu();
 800fb84:	f7fe fdda 	bl	800e73c <LCD_DisplayMenu>
}
 800fb88:	bf00      	nop
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <MeasureAverage>:

void MeasureAverage(void) {
 800fb8c:	b480      	push	{r7}
 800fb8e:	b083      	sub	sp, #12
 800fb90:	af00      	add	r7, sp, #0
for (int var = 1; var <= avgValue+1; var++)
 800fb92:	2301      	movs	r3, #1
 800fb94:	607b      	str	r3, [r7, #4]
 800fb96:	e010      	b.n	800fbba <MeasureAverage+0x2e>
{
	SumBil += BilArray[var];
 800fb98:	4a15      	ldr	r2, [pc, #84]	@ (800fbf0 <MeasureAverage+0x64>)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	4413      	add	r3, r2
 800fba0:	ed93 7a00 	vldr	s14, [r3]
 800fba4:	4b13      	ldr	r3, [pc, #76]	@ (800fbf4 <MeasureAverage+0x68>)
 800fba6:	edd3 7a00 	vldr	s15, [r3]
 800fbaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbae:	4b11      	ldr	r3, [pc, #68]	@ (800fbf4 <MeasureAverage+0x68>)
 800fbb0:	edc3 7a00 	vstr	s15, [r3]
for (int var = 1; var <= avgValue+1; var++)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	607b      	str	r3, [r7, #4]
 800fbba:	4b0f      	ldr	r3, [pc, #60]	@ (800fbf8 <MeasureAverage+0x6c>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	dde8      	ble.n	800fb98 <MeasureAverage+0xc>
}
AveragedBil = SumBil / avgValue;
 800fbc6:	4b0b      	ldr	r3, [pc, #44]	@ (800fbf4 <MeasureAverage+0x68>)
 800fbc8:	edd3 6a00 	vldr	s13, [r3]
 800fbcc:	4b0a      	ldr	r3, [pc, #40]	@ (800fbf8 <MeasureAverage+0x6c>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	ee07 3a90 	vmov	s15, r3
 800fbd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fbd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbdc:	4b07      	ldr	r3, [pc, #28]	@ (800fbfc <MeasureAverage+0x70>)
 800fbde:	edc3 7a00 	vstr	s15, [r3]
}
 800fbe2:	bf00      	nop
 800fbe4:	370c      	adds	r7, #12
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbec:	4770      	bx	lr
 800fbee:	bf00      	nop
 800fbf0:	20001f18 	.word	0x20001f18
 800fbf4:	20001f4c 	.word	0x20001f4c
 800fbf8:	2000009c 	.word	0x2000009c
 800fbfc:	20001f48 	.word	0x20001f48

0800fc00 <LCD_Reset>:

// Function to reset the menu to the initial state
void LCD_Reset(void) {
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
    currentMenu = MENU_SET_AVG;
 800fc06:	4b1b      	ldr	r3, [pc, #108]	@ (800fc74 <LCD_Reset+0x74>)
 800fc08:	2202      	movs	r2, #2
 800fc0a:	701a      	strb	r2, [r3, #0]
    currentCursor = CURSOR_ON_MENU;
 800fc0c:	4b1a      	ldr	r3, [pc, #104]	@ (800fc78 <LCD_Reset+0x78>)
 800fc0e:	2200      	movs	r2, #0
 800fc10:	701a      	strb	r2, [r3, #0]
    avgValue = 1;
 800fc12:	4b1a      	ldr	r3, [pc, #104]	@ (800fc7c <LCD_Reset+0x7c>)
 800fc14:	2201      	movs	r2, #1
 800fc16:	601a      	str	r2, [r3, #0]
    currentTest = 1;
 800fc18:	4b19      	ldr	r3, [pc, #100]	@ (800fc80 <LCD_Reset+0x80>)
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	601a      	str	r2, [r3, #0]
    //************************************//
    for (int i = 0; i <= 12-1; i++) BilArray[i]=0;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	607b      	str	r3, [r7, #4]
 800fc22:	e009      	b.n	800fc38 <LCD_Reset+0x38>
 800fc24:	4a17      	ldr	r2, [pc, #92]	@ (800fc84 <LCD_Reset+0x84>)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	009b      	lsls	r3, r3, #2
 800fc2a:	4413      	add	r3, r2
 800fc2c:	f04f 0200 	mov.w	r2, #0
 800fc30:	601a      	str	r2, [r3, #0]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	3301      	adds	r3, #1
 800fc36:	607b      	str	r3, [r7, #4]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2b0b      	cmp	r3, #11
 800fc3c:	ddf2      	ble.n	800fc24 <LCD_Reset+0x24>
    SumBil = 0;
 800fc3e:	4b12      	ldr	r3, [pc, #72]	@ (800fc88 <LCD_Reset+0x88>)
 800fc40:	f04f 0200 	mov.w	r2, #0
 800fc44:	601a      	str	r2, [r3, #0]
    AveragedBil = 0;
 800fc46:	4b11      	ldr	r3, [pc, #68]	@ (800fc8c <LCD_Reset+0x8c>)
 800fc48:	f04f 0200 	mov.w	r2, #0
 800fc4c:	601a      	str	r2, [r3, #0]
    BilResult=0;
 800fc4e:	4b10      	ldr	r3, [pc, #64]	@ (800fc90 <LCD_Reset+0x90>)
 800fc50:	f04f 0200 	mov.w	r2, #0
 800fc54:	601a      	str	r2, [r3, #0]
    testDone=0;
 800fc56:	4b0f      	ldr	r3, [pc, #60]	@ (800fc94 <LCD_Reset+0x94>)
 800fc58:	2200      	movs	r2, #0
 800fc5a:	701a      	strb	r2, [r3, #0]
    //***********************************//
    HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET); // Turn off the LED
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fc62:	480d      	ldr	r0, [pc, #52]	@ (800fc98 <LCD_Reset+0x98>)
 800fc64:	f7f4 fbe0 	bl	8004428 <HAL_GPIO_WritePin>
    LCD_UpdateMenu();
 800fc68:	f7ff ff8a 	bl	800fb80 <LCD_UpdateMenu>
}
 800fc6c:	bf00      	nop
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	20001f14 	.word	0x20001f14
 800fc78:	20001f15 	.word	0x20001f15
 800fc7c:	2000009c 	.word	0x2000009c
 800fc80:	200000a0 	.word	0x200000a0
 800fc84:	20001f18 	.word	0x20001f18
 800fc88:	20001f4c 	.word	0x20001f4c
 800fc8c:	20001f48 	.word	0x20001f48
 800fc90:	20001f08 	.word	0x20001f08
 800fc94:	20001efa 	.word	0x20001efa
 800fc98:	40021000 	.word	0x40021000

0800fc9c <DoesTestComplete>:

// Call this function after each test
void DoesTestComplete(void) {
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	af00      	add	r7, sp, #0

	if (testDone)    				 // if test btn pressed
 800fca0:	4b17      	ldr	r3, [pc, #92]	@ (800fd00 <DoesTestComplete+0x64>)
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d029      	beq.n	800fcfc <DoesTestComplete+0x60>
	{
		testDone=0;
 800fca8:	4b15      	ldr	r3, [pc, #84]	@ (800fd00 <DoesTestComplete+0x64>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	701a      	strb	r2, [r3, #0]
		BilArray[currentTest]=BilResult;
 800fcae:	4b15      	ldr	r3, [pc, #84]	@ (800fd04 <DoesTestComplete+0x68>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4a15      	ldr	r2, [pc, #84]	@ (800fd08 <DoesTestComplete+0x6c>)
 800fcb4:	6812      	ldr	r2, [r2, #0]
 800fcb6:	4915      	ldr	r1, [pc, #84]	@ (800fd0c <DoesTestComplete+0x70>)
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	440b      	add	r3, r1
 800fcbc:	601a      	str	r2, [r3, #0]
		BilResult=0;
 800fcbe:	4b12      	ldr	r3, [pc, #72]	@ (800fd08 <DoesTestComplete+0x6c>)
 800fcc0:	f04f 0200 	mov.w	r2, #0
 800fcc4:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET);
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fccc:	4810      	ldr	r0, [pc, #64]	@ (800fd10 <DoesTestComplete+0x74>)
 800fcce:	f7f4 fbab 	bl	8004428 <HAL_GPIO_WritePin>
		HAL_Delay(Tests_Intratime);     // Time between Tests
 800fcd2:	4b10      	ldr	r3, [pc, #64]	@ (800fd14 <DoesTestComplete+0x78>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7f2 fe62 	bl	80029a0 <HAL_Delay>

		currentTest++;
 800fcdc:	4b09      	ldr	r3, [pc, #36]	@ (800fd04 <DoesTestComplete+0x68>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	3301      	adds	r3, #1
 800fce2:	4a08      	ldr	r2, [pc, #32]	@ (800fd04 <DoesTestComplete+0x68>)
 800fce4:	6013      	str	r3, [r2, #0]
		if (currentTest > avgValue)  currentMenu = MENU_SHOW_RESULT;
 800fce6:	4b07      	ldr	r3, [pc, #28]	@ (800fd04 <DoesTestComplete+0x68>)
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	4b0b      	ldr	r3, [pc, #44]	@ (800fd18 <DoesTestComplete+0x7c>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	dd02      	ble.n	800fcf8 <DoesTestComplete+0x5c>
 800fcf2:	4b0a      	ldr	r3, [pc, #40]	@ (800fd1c <DoesTestComplete+0x80>)
 800fcf4:	2204      	movs	r2, #4
 800fcf6:	701a      	strb	r2, [r3, #0]
		LCD_UpdateMenu();
 800fcf8:	f7ff ff42 	bl	800fb80 <LCD_UpdateMenu>
	}
}
 800fcfc:	bf00      	nop
 800fcfe:	bd80      	pop	{r7, pc}
 800fd00:	20001efa 	.word	0x20001efa
 800fd04:	200000a0 	.word	0x200000a0
 800fd08:	20001f08 	.word	0x20001f08
 800fd0c:	20001f18 	.word	0x20001f18
 800fd10:	40021000 	.word	0x40021000
 800fd14:	200000a8 	.word	0x200000a8
 800fd18:	2000009c 	.word	0x2000009c
 800fd1c:	20001f14 	.word	0x20001f14

0800fd20 <decToBcd>:


#define DS1307_ADDRESS 0x68  // DS1307 I2C address

// BCD conversion helper functions
uint8_t decToBcd(int val) {
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
    return (uint8_t)((val / 10 * 16) + (val % 10));
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4a0f      	ldr	r2, [pc, #60]	@ (800fd68 <decToBcd+0x48>)
 800fd2c:	fb82 1203 	smull	r1, r2, r2, r3
 800fd30:	1092      	asrs	r2, r2, #2
 800fd32:	17db      	asrs	r3, r3, #31
 800fd34:	1ad3      	subs	r3, r2, r3
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	011b      	lsls	r3, r3, #4
 800fd3a:	b2d8      	uxtb	r0, r3
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	4b0a      	ldr	r3, [pc, #40]	@ (800fd68 <decToBcd+0x48>)
 800fd40:	fb83 1302 	smull	r1, r3, r3, r2
 800fd44:	1099      	asrs	r1, r3, #2
 800fd46:	17d3      	asrs	r3, r2, #31
 800fd48:	1ac9      	subs	r1, r1, r3
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	440b      	add	r3, r1
 800fd50:	005b      	lsls	r3, r3, #1
 800fd52:	1ad1      	subs	r1, r2, r3
 800fd54:	b2cb      	uxtb	r3, r1
 800fd56:	4403      	add	r3, r0
 800fd58:	b2db      	uxtb	r3, r3
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	370c      	adds	r7, #12
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	66666667 	.word	0x66666667

0800fd6c <bcdToDec>:

int bcdToDec(uint8_t val) {
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 800fd76:	79fb      	ldrb	r3, [r7, #7]
 800fd78:	091b      	lsrs	r3, r3, #4
 800fd7a:	b2db      	uxtb	r3, r3
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	4613      	mov	r3, r2
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	4413      	add	r3, r2
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	461a      	mov	r2, r3
 800fd88:	79fb      	ldrb	r3, [r7, #7]
 800fd8a:	f003 030f 	and.w	r3, r3, #15
 800fd8e:	4413      	add	r3, r2
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr

0800fd9c <RTC_Init>:

// Function to initialize the DS1307 RTC
void RTC_Init(void) {
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af02      	add	r7, sp, #8
    // Ensure the RTC is started by setting the CH (Clock Halt) bit to 0
    uint8_t initData[2] = {0x00, 0x00};
 800fda2:	2300      	movs	r3, #0
 800fda4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, initData, 2, HAL_MAX_DELAY);
 800fda6:	1d3a      	adds	r2, r7, #4
 800fda8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	2302      	movs	r3, #2
 800fdb0:	21d0      	movs	r1, #208	@ 0xd0
 800fdb2:	4803      	ldr	r0, [pc, #12]	@ (800fdc0 <RTC_Init+0x24>)
 800fdb4:	f7f6 fdc8 	bl	8006948 <HAL_I2C_Master_Transmit>
}
 800fdb8:	bf00      	nop
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	200003f8 	.word	0x200003f8

0800fdc4 <RTC_SetTime>:

// Function to set the time and date on the DS1307
void RTC_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t day, uint8_t date, uint8_t month, uint8_t year) {
 800fdc4:	b590      	push	{r4, r7, lr}
 800fdc6:	b087      	sub	sp, #28
 800fdc8:	af02      	add	r7, sp, #8
 800fdca:	4604      	mov	r4, r0
 800fdcc:	4608      	mov	r0, r1
 800fdce:	4611      	mov	r1, r2
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	4623      	mov	r3, r4
 800fdd4:	71fb      	strb	r3, [r7, #7]
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	71bb      	strb	r3, [r7, #6]
 800fdda:	460b      	mov	r3, r1
 800fddc:	717b      	strb	r3, [r7, #5]
 800fdde:	4613      	mov	r3, r2
 800fde0:	713b      	strb	r3, [r7, #4]
    uint8_t setData[8];
    setData[0] = 0x00;  // Register address to start with
 800fde2:	2300      	movs	r3, #0
 800fde4:	723b      	strb	r3, [r7, #8]
    setData[1] = decToBcd(seconds);
 800fde6:	797b      	ldrb	r3, [r7, #5]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7ff ff99 	bl	800fd20 <decToBcd>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	727b      	strb	r3, [r7, #9]
    setData[2] = decToBcd(minutes);
 800fdf2:	79bb      	ldrb	r3, [r7, #6]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7ff ff93 	bl	800fd20 <decToBcd>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	72bb      	strb	r3, [r7, #10]
    setData[3] = decToBcd(hours);
 800fdfe:	79fb      	ldrb	r3, [r7, #7]
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7ff ff8d 	bl	800fd20 <decToBcd>
 800fe06:	4603      	mov	r3, r0
 800fe08:	72fb      	strb	r3, [r7, #11]
    setData[4] = decToBcd(day);
 800fe0a:	793b      	ldrb	r3, [r7, #4]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7ff ff87 	bl	800fd20 <decToBcd>
 800fe12:	4603      	mov	r3, r0
 800fe14:	733b      	strb	r3, [r7, #12]
    setData[5] = decToBcd(date);
 800fe16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7ff ff80 	bl	800fd20 <decToBcd>
 800fe20:	4603      	mov	r3, r0
 800fe22:	737b      	strb	r3, [r7, #13]
    setData[6] = decToBcd(month);
 800fe24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7ff ff79 	bl	800fd20 <decToBcd>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	73bb      	strb	r3, [r7, #14]
    setData[7] = decToBcd(year);
 800fe32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7ff ff72 	bl	800fd20 <decToBcd>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, setData, 8, HAL_MAX_DELAY);
 800fe40:	f107 0208 	add.w	r2, r7, #8
 800fe44:	f04f 33ff 	mov.w	r3, #4294967295
 800fe48:	9300      	str	r3, [sp, #0]
 800fe4a:	2308      	movs	r3, #8
 800fe4c:	21d0      	movs	r1, #208	@ 0xd0
 800fe4e:	4803      	ldr	r0, [pc, #12]	@ (800fe5c <RTC_SetTime+0x98>)
 800fe50:	f7f6 fd7a 	bl	8006948 <HAL_I2C_Master_Transmit>
}
 800fe54:	bf00      	nop
 800fe56:	3714      	adds	r7, #20
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd90      	pop	{r4, r7, pc}
 800fe5c:	200003f8 	.word	0x200003f8

0800fe60 <RTC_GetTime>:

// Function to read the current time and date from the DS1307
void RTC_GetTime(uint8_t* hours, uint8_t* minutes, uint8_t* seconds, uint8_t* day, uint8_t* date, uint8_t* month, uint8_t* year) {
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b08a      	sub	sp, #40	@ 0x28
 800fe64:	af02      	add	r7, sp, #8
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	607a      	str	r2, [r7, #4]
 800fe6c:	603b      	str	r3, [r7, #0]
    uint8_t readData[7];
    uint8_t startAddr = 0x00;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, &startAddr, 1, HAL_MAX_DELAY);
 800fe72:	f107 0217 	add.w	r2, r7, #23
 800fe76:	f04f 33ff 	mov.w	r3, #4294967295
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	21d0      	movs	r1, #208	@ 0xd0
 800fe80:	4827      	ldr	r0, [pc, #156]	@ (800ff20 <RTC_GetTime+0xc0>)
 800fe82:	f7f6 fd61 	bl	8006948 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, DS1307_ADDRESS << 1, readData, 7, HAL_MAX_DELAY);
 800fe86:	f107 0218 	add.w	r2, r7, #24
 800fe8a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	2307      	movs	r3, #7
 800fe92:	21d0      	movs	r1, #208	@ 0xd0
 800fe94:	4822      	ldr	r0, [pc, #136]	@ (800ff20 <RTC_GetTime+0xc0>)
 800fe96:	f7f6 fe55 	bl	8006b44 <HAL_I2C_Master_Receive>

    *seconds = bcdToDec(readData[0] & 0x7F);  // Mask to ignore CH bit
 800fe9a:	7e3b      	ldrb	r3, [r7, #24]
 800fe9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7ff ff62 	bl	800fd6c <bcdToDec>
 800fea8:	4603      	mov	r3, r0
 800feaa:	b2da      	uxtb	r2, r3
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	701a      	strb	r2, [r3, #0]
    *minutes = bcdToDec(readData[1]);
 800feb0:	7e7b      	ldrb	r3, [r7, #25]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7ff ff5a 	bl	800fd6c <bcdToDec>
 800feb8:	4603      	mov	r3, r0
 800feba:	b2da      	uxtb	r2, r3
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	701a      	strb	r2, [r3, #0]
    *hours = bcdToDec(readData[2] & 0x3F);  // 24-hour format
 800fec0:	7ebb      	ldrb	r3, [r7, #26]
 800fec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	4618      	mov	r0, r3
 800feca:	f7ff ff4f 	bl	800fd6c <bcdToDec>
 800fece:	4603      	mov	r3, r0
 800fed0:	b2da      	uxtb	r2, r3
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	701a      	strb	r2, [r3, #0]
    *day = bcdToDec(readData[3]);
 800fed6:	7efb      	ldrb	r3, [r7, #27]
 800fed8:	4618      	mov	r0, r3
 800feda:	f7ff ff47 	bl	800fd6c <bcdToDec>
 800fede:	4603      	mov	r3, r0
 800fee0:	b2da      	uxtb	r2, r3
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	701a      	strb	r2, [r3, #0]
    *date = bcdToDec(readData[4]);
 800fee6:	7f3b      	ldrb	r3, [r7, #28]
 800fee8:	4618      	mov	r0, r3
 800feea:	f7ff ff3f 	bl	800fd6c <bcdToDec>
 800feee:	4603      	mov	r3, r0
 800fef0:	b2da      	uxtb	r2, r3
 800fef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef4:	701a      	strb	r2, [r3, #0]
    *month = bcdToDec(readData[5]);
 800fef6:	7f7b      	ldrb	r3, [r7, #29]
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7ff ff37 	bl	800fd6c <bcdToDec>
 800fefe:	4603      	mov	r3, r0
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff04:	701a      	strb	r2, [r3, #0]
    *year = bcdToDec(readData[6]);
 800ff06:	7fbb      	ldrb	r3, [r7, #30]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7ff ff2f 	bl	800fd6c <bcdToDec>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	b2da      	uxtb	r2, r3
 800ff12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff14:	701a      	strb	r2, [r3, #0]
}
 800ff16:	bf00      	nop
 800ff18:	3720      	adds	r7, #32
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	200003f8 	.word	0x200003f8

0800ff24 <RTC_DisplayTime>:

// Function to display the time and date on the OLED
void RTC_DisplayTime(void) {
 800ff24:	b590      	push	{r4, r7, lr}
 800ff26:	b08d      	sub	sp, #52	@ 0x34
 800ff28:	af04      	add	r7, sp, #16
	static char prevBuffer[20] = {0};
    uint8_t hours, minutes, seconds, day, date, month, year;
    char buffer[20];

    RTC_GetTime(&hours, &minutes, &seconds, &day, &date, &month, &year);
 800ff2a:	f107 041c 	add.w	r4, r7, #28
 800ff2e:	f107 021d 	add.w	r2, r7, #29
 800ff32:	f107 011e 	add.w	r1, r7, #30
 800ff36:	f107 001f 	add.w	r0, r7, #31
 800ff3a:	f107 0319 	add.w	r3, r7, #25
 800ff3e:	9302      	str	r3, [sp, #8]
 800ff40:	f107 031a 	add.w	r3, r7, #26
 800ff44:	9301      	str	r3, [sp, #4]
 800ff46:	f107 031b 	add.w	r3, r7, #27
 800ff4a:	9300      	str	r3, [sp, #0]
 800ff4c:	4623      	mov	r3, r4
 800ff4e:	f7ff ff87 	bl	800fe60 <RTC_GetTime>

    //ssd1306_Fill(Black);

    // Format time
    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 800ff52:	7ffb      	ldrb	r3, [r7, #31]
 800ff54:	4619      	mov	r1, r3
 800ff56:	7fbb      	ldrb	r3, [r7, #30]
 800ff58:	7f7a      	ldrb	r2, [r7, #29]
 800ff5a:	1d38      	adds	r0, r7, #4
 800ff5c:	9201      	str	r2, [sp, #4]
 800ff5e:	9300      	str	r3, [sp, #0]
 800ff60:	460b      	mov	r3, r1
 800ff62:	4a22      	ldr	r2, [pc, #136]	@ (800ffec <RTC_DisplayTime+0xc8>)
 800ff64:	2114      	movs	r1, #20
 800ff66:	f001 f831 	bl	8010fcc <sniprintf>
    if (strcmp(buffer, prevBuffer) != 0) {
 800ff6a:	1d3b      	adds	r3, r7, #4
 800ff6c:	4920      	ldr	r1, [pc, #128]	@ (800fff0 <RTC_DisplayTime+0xcc>)
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7f0 f92e 	bl	80001d0 <strcmp>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00f      	beq.n	800ff9a <RTC_DisplayTime+0x76>
		ssd1306_SetCursor(2, 0);
 800ff7a:	2100      	movs	r1, #0
 800ff7c:	2002      	movs	r0, #2
 800ff7e:	f7f1 fea1 	bl	8001cc4 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_6x8 ,White);
 800ff82:	4b1c      	ldr	r3, [pc, #112]	@ (800fff4 <RTC_DisplayTime+0xd0>)
 800ff84:	1d38      	adds	r0, r7, #4
 800ff86:	2201      	movs	r2, #1
 800ff88:	9200      	str	r2, [sp, #0]
 800ff8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ff8c:	f7f1 fe74 	bl	8001c78 <ssd1306_WriteString>
		strcpy(prevBuffer, buffer);
 800ff90:	1d3b      	adds	r3, r7, #4
 800ff92:	4619      	mov	r1, r3
 800ff94:	4816      	ldr	r0, [pc, #88]	@ (800fff0 <RTC_DisplayTime+0xcc>)
 800ff96:	f001 f94c 	bl	8011232 <strcpy>
	}
    //ssd1306_SetCursor(2, 0);
    //ssd1306_WriteString(buffer, Font_6x8 ,White);

    // Format date
    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", date, month, year);
 800ff9a:	7efb      	ldrb	r3, [r7, #27]
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	7ebb      	ldrb	r3, [r7, #26]
 800ffa0:	7e7a      	ldrb	r2, [r7, #25]
 800ffa2:	1d38      	adds	r0, r7, #4
 800ffa4:	9201      	str	r2, [sp, #4]
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	460b      	mov	r3, r1
 800ffaa:	4a13      	ldr	r2, [pc, #76]	@ (800fff8 <RTC_DisplayTime+0xd4>)
 800ffac:	2114      	movs	r1, #20
 800ffae:	f001 f80d 	bl	8010fcc <sniprintf>
    if (strcmp(buffer, prevBuffer) != 0) {
 800ffb2:	1d3b      	adds	r3, r7, #4
 800ffb4:	490e      	ldr	r1, [pc, #56]	@ (800fff0 <RTC_DisplayTime+0xcc>)
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7f0 f90a 	bl	80001d0 <strcmp>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00f      	beq.n	800ffe2 <RTC_DisplayTime+0xbe>
	   ssd1306_SetCursor(80, 0);
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	2050      	movs	r0, #80	@ 0x50
 800ffc6:	f7f1 fe7d 	bl	8001cc4 <ssd1306_SetCursor>
	   ssd1306_WriteString(buffer, Font_6x8, White);
 800ffca:	4b0a      	ldr	r3, [pc, #40]	@ (800fff4 <RTC_DisplayTime+0xd0>)
 800ffcc:	1d38      	adds	r0, r7, #4
 800ffce:	2201      	movs	r2, #1
 800ffd0:	9200      	str	r2, [sp, #0]
 800ffd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ffd4:	f7f1 fe50 	bl	8001c78 <ssd1306_WriteString>
	   strcpy(prevBuffer, buffer);
 800ffd8:	1d3b      	adds	r3, r7, #4
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4804      	ldr	r0, [pc, #16]	@ (800fff0 <RTC_DisplayTime+0xcc>)
 800ffde:	f001 f928 	bl	8011232 <strcpy>
   }
    //ssd1306_SetCursor(68, 0);
    //ssd1306_WriteString(buffer,Font_6x8, White);

    //ssd1306_UpdateScreen();
}
 800ffe2:	bf00      	nop
 800ffe4:	3724      	adds	r7, #36	@ 0x24
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd90      	pop	{r4, r7, pc}
 800ffea:	bf00      	nop
 800ffec:	08013250 	.word	0x08013250
 800fff0:	20001f90 	.word	0x20001f90
 800fff4:	08014d28 	.word	0x08014d28
 800fff8:	08013260 	.word	0x08013260

0800fffc <spectrometer>:
#include "../INC/generalHeaders.h"

  uint8_t eos_received = 0;  //volatile


void spectrometer(void){
 800fffc:	b580      	push	{r7, lr}
 800fffe:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOA, StartTest_BTN_Pin) == GPIO_PIN_RESET) )
 8010000:	2120      	movs	r1, #32
 8010002:	4811      	ldr	r0, [pc, #68]	@ (8010048 <spectrometer+0x4c>)
 8010004:	f7f4 f9f8 	bl	80043f8 <HAL_GPIO_ReadPin>
 8010008:	4603      	mov	r3, r0
 801000a:	2b00      	cmp	r3, #0
 801000c:	d11a      	bne.n	8010044 <spectrometer+0x48>
	{
		if(StartTestMenuFlag==1){
 801000e:	4b0f      	ldr	r3, [pc, #60]	@ (801004c <spectrometer+0x50>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b01      	cmp	r3, #1
 8010014:	d102      	bne.n	801001c <spectrometer+0x20>
			generate_spectrometer_signals();
 8010016:	f000 f81d 	bl	8010054 <generate_spectrometer_signals>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
			 HAL_Delay(500);
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
		}
	}
}
 801001a:	e013      	b.n	8010044 <spectrometer+0x48>
		}else if (StartTestMenuFlag==2) {                               // if current menu != StartTest
 801001c:	4b0b      	ldr	r3, [pc, #44]	@ (801004c <spectrometer+0x50>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b02      	cmp	r3, #2
 8010022:	d10f      	bne.n	8010044 <spectrometer+0x48>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 8010024:	2201      	movs	r2, #1
 8010026:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801002a:	4809      	ldr	r0, [pc, #36]	@ (8010050 <spectrometer+0x54>)
 801002c:	f7f4 f9fc 	bl	8004428 <HAL_GPIO_WritePin>
			 HAL_Delay(500);
 8010030:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8010034:	f7f2 fcb4 	bl	80029a0 <HAL_Delay>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 8010038:	2200      	movs	r2, #0
 801003a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801003e:	4804      	ldr	r0, [pc, #16]	@ (8010050 <spectrometer+0x54>)
 8010040:	f7f4 f9f2 	bl	8004428 <HAL_GPIO_WritePin>
}
 8010044:	bf00      	nop
 8010046:	bd80      	pop	{r7, pc}
 8010048:	40020000 	.word	0x40020000
 801004c:	20001f50 	.word	0x20001f50
 8010050:	40021000 	.word	0x40021000

08010054 <generate_spectrometer_signals>:

void generate_spectrometer_signals(void){
 8010054:	b580      	push	{r7, lr}
 8010056:	af00      	add	r7, sp, #0

	// Button is pressed
	HAL_GPIO_WritePin(GPIOA, SPEC_LED_Pin, GPIO_PIN_SET); 				// Turn on the LED
 8010058:	2201      	movs	r2, #1
 801005a:	2180      	movs	r1, #128	@ 0x80
 801005c:	4817      	ldr	r0, [pc, #92]	@ (80100bc <generate_spectrometer_signals+0x68>)
 801005e:	f7f4 f9e3 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Wait for stabilization
 8010062:	2001      	movs	r0, #1
 8010064:	f7f2 fc9c 	bl	80029a0 <HAL_Delay>

	// Generate start signal for the spectrometer
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_RESET);
 8010068:	2200      	movs	r2, #0
 801006a:	2120      	movs	r1, #32
 801006c:	4814      	ldr	r0, [pc, #80]	@ (80100c0 <generate_spectrometer_signals+0x6c>)
 801006e:	f7f4 f9db 	bl	8004428 <HAL_GPIO_WritePin>
	//DWT_Delay(1);
	HAL_Delay(1);
 8010072:	2001      	movs	r0, #1
 8010074:	f7f2 fc94 	bl	80029a0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 8010078:	2201      	movs	r2, #1
 801007a:	2120      	movs	r1, #32
 801007c:	4810      	ldr	r0, [pc, #64]	@ (80100c0 <generate_spectrometer_signals+0x6c>)
 801007e:	f7f4 f9d3 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_Delay(20); //8//500 									// Higher integration time Higher Spectrum Amplitude
 8010082:	2014      	movs	r0, #20
 8010084:	f7f2 fc8c 	bl	80029a0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_RESET);
 8010088:	2200      	movs	r2, #0
 801008a:	2120      	movs	r1, #32
 801008c:	480c      	ldr	r0, [pc, #48]	@ (80100c0 <generate_spectrometer_signals+0x6c>)
 801008e:	f7f4 f9cb 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8010092:	2001      	movs	r0, #1
 8010094:	f7f2 fc84 	bl	80029a0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 8010098:	2201      	movs	r2, #1
 801009a:	2120      	movs	r1, #32
 801009c:	4808      	ldr	r0, [pc, #32]	@ (80100c0 <generate_spectrometer_signals+0x6c>)
 801009e:	f7f4 f9c3 	bl	8004428 <HAL_GPIO_WritePin>

	// Wait for EOS signal
	//while (!eos_received) {}
	capture_and_send_data();
 80100a2:	f7fe f8dd 	bl	800e260 <capture_and_send_data>
	HAL_GPIO_WritePin(GPIOA, SPEC_LED_Pin, GPIO_PIN_RESET); 			// Turn off the LED
 80100a6:	2200      	movs	r2, #0
 80100a8:	2180      	movs	r1, #128	@ 0x80
 80100aa:	4804      	ldr	r0, [pc, #16]	@ (80100bc <generate_spectrometer_signals+0x68>)
 80100ac:	f7f4 f9bc 	bl	8004428 <HAL_GPIO_WritePin>
	eos_received = 0;
 80100b0:	4b04      	ldr	r3, [pc, #16]	@ (80100c4 <generate_spectrometer_signals+0x70>)
 80100b2:	2200      	movs	r2, #0
 80100b4:	701a      	strb	r2, [r3, #0]

}
 80100b6:	bf00      	nop
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	40020000 	.word	0x40020000
 80100c0:	40020400 	.word	0x40020400
 80100c4:	20001fa4 	.word	0x20001fa4

080100c8 <EXTI4_IRQHandler>:
	*/
}

/////////////////////////////////////// EOS Interrupt ///////////////////////////////////////////
/* EXTI4 IRQ Handler */
void EXTI4_IRQHandler(void){
 80100c8:	b580      	push	{r7, lr}
 80100ca:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80100cc:	2010      	movs	r0, #16
 80100ce:	f7f4 f9c5 	bl	800445c <HAL_GPIO_EXTI_IRQHandler>
}
 80100d2:	bf00      	nop
 80100d4:	bd80      	pop	{r7, pc}
	...

080100d8 <DWT_Init>:
        eos_received = 1;
    }
}*/
/////////////////////////////////////// us Delay Timer ///////////////////////////////////////////
// Function to initialize the DWT unit
void DWT_Init(void) {
 80100d8:	b480      	push	{r7}
 80100da:	af00      	add	r7, sp, #0
    // Enable TRC
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80100dc:	4b08      	ldr	r3, [pc, #32]	@ (8010100 <DWT_Init+0x28>)
 80100de:	68db      	ldr	r3, [r3, #12]
 80100e0:	4a07      	ldr	r2, [pc, #28]	@ (8010100 <DWT_Init+0x28>)
 80100e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80100e6:	60d3      	str	r3, [r2, #12]
    // Unlock DWT access
    //DWT->LAR = 0xC5ACCE55;
    // Enable the cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80100e8:	4b06      	ldr	r3, [pc, #24]	@ (8010104 <DWT_Init+0x2c>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	4a05      	ldr	r2, [pc, #20]	@ (8010104 <DWT_Init+0x2c>)
 80100ee:	f043 0301 	orr.w	r3, r3, #1
 80100f2:	6013      	str	r3, [r2, #0]
}
 80100f4:	bf00      	nop
 80100f6:	46bd      	mov	sp, r7
 80100f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fc:	4770      	bx	lr
 80100fe:	bf00      	nop
 8010100:	e000edf0 	.word	0xe000edf0
 8010104:	e0001000 	.word	0xe0001000

08010108 <DWT_GetSysClockFreq>:
// Function to get the system clock frequency
uint32_t DWT_GetSysClockFreq(void) {
 8010108:	b480      	push	{r7}
 801010a:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 801010c:	4b03      	ldr	r3, [pc, #12]	@ (801011c <DWT_GetSysClockFreq+0x14>)
 801010e:	681b      	ldr	r3, [r3, #0]
}
 8010110:	4618      	mov	r0, r3
 8010112:	46bd      	mov	sp, r7
 8010114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop
 801011c:	20000000 	.word	0x20000000

08010120 <DWT_Delay>:

// Function to create a microsecond delay
void DWT_Delay(uint32_t us) {
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 8010128:	4b0d      	ldr	r3, [pc, #52]	@ (8010160 <DWT_Delay+0x40>)
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (DWT_GetSysClockFreq() / 1000000);
 801012e:	f7ff ffeb 	bl	8010108 <DWT_GetSysClockFreq>
 8010132:	4603      	mov	r3, r0
 8010134:	4a0b      	ldr	r2, [pc, #44]	@ (8010164 <DWT_Delay+0x44>)
 8010136:	fba2 2303 	umull	r2, r3, r2, r3
 801013a:	0c9a      	lsrs	r2, r3, #18
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	fb02 f303 	mul.w	r3, r2, r3
 8010142:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - startTick) < delayTicks);
 8010144:	bf00      	nop
 8010146:	4b06      	ldr	r3, [pc, #24]	@ (8010160 <DWT_Delay+0x40>)
 8010148:	685a      	ldr	r2, [r3, #4]
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	68ba      	ldr	r2, [r7, #8]
 8010150:	429a      	cmp	r2, r3
 8010152:	d8f8      	bhi.n	8010146 <DWT_Delay+0x26>
}
 8010154:	bf00      	nop
 8010156:	bf00      	nop
 8010158:	3710      	adds	r7, #16
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	e0001000 	.word	0xe0001000
 8010164:	431bde83 	.word	0x431bde83

08010168 <__NVIC_EnableIRQ>:
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	4603      	mov	r3, r0
 8010170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010176:	2b00      	cmp	r3, #0
 8010178:	db0b      	blt.n	8010192 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801017a:	79fb      	ldrb	r3, [r7, #7]
 801017c:	f003 021f 	and.w	r2, r3, #31
 8010180:	4907      	ldr	r1, [pc, #28]	@ (80101a0 <__NVIC_EnableIRQ+0x38>)
 8010182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010186:	095b      	lsrs	r3, r3, #5
 8010188:	2001      	movs	r0, #1
 801018a:	fa00 f202 	lsl.w	r2, r0, r2
 801018e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010192:	bf00      	nop
 8010194:	370c      	adds	r7, #12
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop
 80101a0:	e000e100 	.word	0xe000e100

080101a4 <systemLoop>:

bool isCharging = false;
//float readFlashedData[28];

void systemLoop(void)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	af00      	add	r7, sp, #0
	  spectrometer();
 80101a8:	f7ff ff28 	bl	800fffc <spectrometer>
	  LCD();
 80101ac:	f7fe fabe 	bl	800e72c <LCD>
	  RTC_DisplayTime();
 80101b0:	f7ff feb8 	bl	800ff24 <RTC_DisplayTime>
}
 80101b4:	bf00      	nop
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <systemSetup>:

void systemSetup(void)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	af00      	add	r7, sp, #0
	  SpectrometerSetup();
 80101bc:	f000 f80a 	bl	80101d4 <SpectrometerSetup>
	  LCD_Setup();
 80101c0:	f000 f82c 	bl	801021c <LCD_Setup>
	  RTC_Init();
 80101c4:	f7ff fdea 	bl	800fd9c <RTC_Init>
	  USB_Setup();
 80101c8:	f000 f84c 	bl	8010264 <USB_Setup>
	  FLASH_Setup();
 80101cc:	f000 f856 	bl	801027c <FLASH_Setup>
	 // ReadBilResultsFromFlash(readFlashedData);
}
 80101d0:	bf00      	nop
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <SpectrometerSetup>:

//################################################################################################//

void SpectrometerSetup(void)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	af00      	add	r7, sp, #0
	  TIM1->CCR1=5;  //50   50% Duty Cycle ==> to generate 135khz
 80101d8:	4b0c      	ldr	r3, [pc, #48]	@ (801020c <SpectrometerSetup+0x38>)
 80101da:	2205      	movs	r2, #5
 80101dc:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80101de:	2100      	movs	r1, #0
 80101e0:	480b      	ldr	r0, [pc, #44]	@ (8010210 <SpectrometerSetup+0x3c>)
 80101e2:	f7f8 faa9 	bl	8008738 <HAL_TIM_PWM_Start>

	  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 80101e6:	2201      	movs	r2, #1
 80101e8:	2120      	movs	r1, #32
 80101ea:	480a      	ldr	r0, [pc, #40]	@ (8010214 <SpectrometerSetup+0x40>)
 80101ec:	f7f4 f91c 	bl	8004428 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 80101f0:	2200      	movs	r2, #0
 80101f2:	f44f 7144 	mov.w	r1, #784	@ 0x310
 80101f6:	4807      	ldr	r0, [pc, #28]	@ (8010214 <SpectrometerSetup+0x40>)
 80101f8:	f7f4 f916 	bl	8004428 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SPEC_LED_Pin, GPIO_PIN_RESET); // Turn off the SPEC LED
 80101fc:	2200      	movs	r2, #0
 80101fe:	2180      	movs	r1, #128	@ 0x80
 8010200:	4805      	ldr	r0, [pc, #20]	@ (8010218 <SpectrometerSetup+0x44>)
 8010202:	f7f4 f911 	bl	8004428 <HAL_GPIO_WritePin>
}
 8010206:	bf00      	nop
 8010208:	bd80      	pop	{r7, pc}
 801020a:	bf00      	nop
 801020c:	40010000 	.word	0x40010000
 8010210:	200004a4 	.word	0x200004a4
 8010214:	40020400 	.word	0x40020400
 8010218:	40020000 	.word	0x40020000

0801021c <LCD_Setup>:

void LCD_Setup(void)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, SPEC_LED_Pin, GPIO_PIN_RESET); // Turn off the SPEC LED
 8010222:	2200      	movs	r2, #0
 8010224:	2180      	movs	r1, #128	@ 0x80
 8010226:	480e      	ldr	r0, [pc, #56]	@ (8010260 <LCD_Setup+0x44>)
 8010228:	f7f4 f8fe 	bl	8004428 <HAL_GPIO_WritePin>
	  ssd1306_Init();
 801022c:	f7f1 fb96 	bl	800195c <ssd1306_Init>

	  BatteryLevelFilterInit();
 8010230:	f000 f84c 	bl	80102cc <BatteryLevelFilterInit>
	  TIM11_Init(); 			// Initialize the timer for interrupts ==> for batt level percentage calculation
 8010234:	f000 f86e 	bl	8010314 <TIM11_Init>
	  TIM10_Init();
 8010238:	f000 f896 	bl	8010368 <TIM10_Init>
	  for (int var = 0; var < 5; ++var)  BatteryPercentage();
 801023c:	2300      	movs	r3, #0
 801023e:	607b      	str	r3, [r7, #4]
 8010240:	e004      	b.n	801024c <LCD_Setup+0x30>
 8010242:	f7ff fa8d 	bl	800f760 <BatteryPercentage>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	3301      	adds	r3, #1
 801024a:	607b      	str	r3, [r7, #4]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2b04      	cmp	r3, #4
 8010250:	ddf7      	ble.n	8010242 <LCD_Setup+0x26>

	  //ChargerDetect_Init();

	  Aymed_Logo();
 8010252:	f000 f819 	bl	8010288 <Aymed_Logo>
	  //Aymed_Text();      //moved to LCD.c
}
 8010256:	bf00      	nop
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	40020000 	.word	0x40020000

08010264 <USB_Setup>:

void USB_Setup(void){
 8010264:	b580      	push	{r7, lr}
 8010266:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);          //to open 5 v from PA9
 8010268:	2200      	movs	r2, #0
 801026a:	2101      	movs	r1, #1
 801026c:	4802      	ldr	r0, [pc, #8]	@ (8010278 <USB_Setup+0x14>)
 801026e:	f7f4 f8db 	bl	8004428 <HAL_GPIO_WritePin>

}
 8010272:	bf00      	nop
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	40020800 	.word	0x40020800

0801027c <FLASH_Setup>:

void FLASH_Setup(void){
 801027c:	b580      	push	{r7, lr}
 801027e:	af00      	add	r7, sp, #0

	  //EraseAllBilFlashSectors();            // to reset flash

	  FindLastBilResultIndex();// On startup, find the last valid index in the flash memory
 8010280:	f7fe f8a2 	bl	800e3c8 <FindLastBilResultIndex>

}
 8010284:	bf00      	nop
 8010286:	bd80      	pop	{r7, pc}

08010288 <Aymed_Logo>:
//################################################################################################//

void Aymed_Logo(void)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af02      	add	r7, sp, #8
	 ssd1306_Fill(Black);
 801028e:	2000      	movs	r0, #0
 8010290:	f7f1 fbce 	bl	8001a30 <ssd1306_Fill>
	 ssd1306_SetCursor(0, 0);
 8010294:	2100      	movs	r1, #0
 8010296:	2000      	movs	r0, #0
 8010298:	f7f1 fd14 	bl	8001cc4 <ssd1306_SetCursor>
     ssd1306_DrawBitmap(0,0,image_data_ss,128,64, White );
 801029c:	2301      	movs	r3, #1
 801029e:	9301      	str	r3, [sp, #4]
 80102a0:	2340      	movs	r3, #64	@ 0x40
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	2380      	movs	r3, #128	@ 0x80
 80102a6:	4a07      	ldr	r2, [pc, #28]	@ (80102c4 <Aymed_Logo+0x3c>)
 80102a8:	2100      	movs	r1, #0
 80102aa:	2000      	movs	r0, #0
 80102ac:	f7f1 fd70 	bl	8001d90 <ssd1306_DrawBitmap>
     ssd1306_UpdateScreen();
 80102b0:	f7f1 fbd6 	bl	8001a60 <ssd1306_UpdateScreen>
     HAL_Delay(logo_time);
 80102b4:	4b04      	ldr	r3, [pc, #16]	@ (80102c8 <Aymed_Logo+0x40>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7f2 fb71 	bl	80029a0 <HAL_Delay>
}
 80102be:	bf00      	nop
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	080152c4 	.word	0x080152c4
 80102c8:	200000c0 	.word	0x200000c0

080102cc <BatteryLevelFilterInit>:

    HAL_Delay(text_time);
}

void BatteryLevelFilterInit(void)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
	 lastPercentage = -1.0; // Initialize last percentage to an invalid value
 80102d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010308 <BatteryLevelFilterInit+0x3c>)
 80102d4:	4a0d      	ldr	r2, [pc, #52]	@ (801030c <BatteryLevelFilterInit+0x40>)
 80102d6:	601a      	str	r2, [r3, #0]
	  // Initialize the filter array with initial readings
	  for (int i = 0; i < FILTER_SIZE; i++) {
 80102d8:	2300      	movs	r3, #0
 80102da:	607b      	str	r3, [r7, #4]
 80102dc:	e009      	b.n	80102f2 <BatteryLevelFilterInit+0x26>
		  adcReadings[i] = 0;
 80102de:	4a0c      	ldr	r2, [pc, #48]	@ (8010310 <BatteryLevelFilterInit+0x44>)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	4413      	add	r3, r2
 80102e6:	f04f 0200 	mov.w	r2, #0
 80102ea:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < FILTER_SIZE; i++) {
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	3301      	adds	r3, #1
 80102f0:	607b      	str	r3, [r7, #4]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2b04      	cmp	r3, #4
 80102f6:	ddf2      	ble.n	80102de <BatteryLevelFilterInit+0x12>
	  }
}
 80102f8:	bf00      	nop
 80102fa:	bf00      	nop
 80102fc:	370c      	adds	r7, #12
 80102fe:	46bd      	mov	sp, r7
 8010300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop
 8010308:	20001fbc 	.word	0x20001fbc
 801030c:	bf800000 	.word	0xbf800000
 8010310:	20001fa8 	.word	0x20001fa8

08010314 <TIM11_Init>:

// Timer Interrupt Initialization
void TIM11_Init(void) {
 8010314:	b580      	push	{r7, lr}
 8010316:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim11);
 8010318:	4810      	ldr	r0, [pc, #64]	@ (801035c <TIM11_Init+0x48>)
 801031a:	f7f8 fad5 	bl	80088c8 <HAL_TIM_IRQHandler>
    // Enable clock for TIM2
    RCC->AHB2ENR |= RCC_APB2ENR_TIM11EN;
 801031e:	4b10      	ldr	r3, [pc, #64]	@ (8010360 <TIM11_Init+0x4c>)
 8010320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010322:	4a0f      	ldr	r2, [pc, #60]	@ (8010360 <TIM11_Init+0x4c>)
 8010324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010328:	6353      	str	r3, [r2, #52]	@ 0x34

    // Configure TIM2: 1 tick per millisecond (assuming 16 MHz clock with APB1 prescaler 4)
    TIM11->PSC = 36000 - 1;      // Prescaler: 16 MHz / 16000 = 1 kHz (1 ms period)
 801032a:	4b0e      	ldr	r3, [pc, #56]	@ (8010364 <TIM11_Init+0x50>)
 801032c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8010330:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM11->ARR = 14000 - 1;      //4000=2 sec // Auto-reload: 1 kHz / 30000 = 0.033 Hz (30 second period)  10000 = 5 sec
 8010332:	4b0c      	ldr	r3, [pc, #48]	@ (8010364 <TIM11_Init+0x50>)
 8010334:	f243 62af 	movw	r2, #13999	@ 0x36af
 8010338:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM11->CR1 |= TIM_CR1_CEN;   // Enable counter
 801033a:	4b0a      	ldr	r3, [pc, #40]	@ (8010364 <TIM11_Init+0x50>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4a09      	ldr	r2, [pc, #36]	@ (8010364 <TIM11_Init+0x50>)
 8010340:	f043 0301 	orr.w	r3, r3, #1
 8010344:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt
    TIM11->DIER |= TIM_DIER_UIE;
 8010346:	4b07      	ldr	r3, [pc, #28]	@ (8010364 <TIM11_Init+0x50>)
 8010348:	68db      	ldr	r3, [r3, #12]
 801034a:	4a06      	ldr	r2, [pc, #24]	@ (8010364 <TIM11_Init+0x50>)
 801034c:	f043 0301 	orr.w	r3, r3, #1
 8010350:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8010352:	201a      	movs	r0, #26
 8010354:	f7ff ff08 	bl	8010168 <__NVIC_EnableIRQ>
}
 8010358:	bf00      	nop
 801035a:	bd80      	pop	{r7, pc}
 801035c:	20000534 	.word	0x20000534
 8010360:	40023800 	.word	0x40023800
 8010364:	40014800 	.word	0x40014800

08010368 <TIM10_Init>:
// Timer Interrupt Initialization
void TIM10_Init(void) {
 8010368:	b580      	push	{r7, lr}
 801036a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim10);
 801036c:	4810      	ldr	r0, [pc, #64]	@ (80103b0 <TIM10_Init+0x48>)
 801036e:	f7f8 faab 	bl	80088c8 <HAL_TIM_IRQHandler>
    // Enable clock for TIM2
    RCC->AHB2ENR |= RCC_APB2ENR_TIM10EN;
 8010372:	4b10      	ldr	r3, [pc, #64]	@ (80103b4 <TIM10_Init+0x4c>)
 8010374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010376:	4a0f      	ldr	r2, [pc, #60]	@ (80103b4 <TIM10_Init+0x4c>)
 8010378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801037c:	6353      	str	r3, [r2, #52]	@ 0x34

    // Configure TIM2: 1 tick per millisecond (assuming 16 MHz clock with APB1 prescaler 4)
    TIM10->PSC = 36000 - 1;      // Prescaler: 16 MHz / 16000 = 1 kHz (1 ms period)
 801037e:	4b0e      	ldr	r3, [pc, #56]	@ (80103b8 <TIM10_Init+0x50>)
 8010380:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8010384:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM10->ARR = 2000 - 1;      //4000=2 sec // Auto-reload: 1 kHz / 30000 = 0.033 Hz (30 second period)  10000 = 5 sec
 8010386:	4b0c      	ldr	r3, [pc, #48]	@ (80103b8 <TIM10_Init+0x50>)
 8010388:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 801038c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM10->CR1 |= TIM_CR1_CEN;   // Enable counter
 801038e:	4b0a      	ldr	r3, [pc, #40]	@ (80103b8 <TIM10_Init+0x50>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	4a09      	ldr	r2, [pc, #36]	@ (80103b8 <TIM10_Init+0x50>)
 8010394:	f043 0301 	orr.w	r3, r3, #1
 8010398:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt
    TIM10->DIER |= TIM_DIER_UIE;
 801039a:	4b07      	ldr	r3, [pc, #28]	@ (80103b8 <TIM10_Init+0x50>)
 801039c:	68db      	ldr	r3, [r3, #12]
 801039e:	4a06      	ldr	r2, [pc, #24]	@ (80103b8 <TIM10_Init+0x50>)
 80103a0:	f043 0301 	orr.w	r3, r3, #1
 80103a4:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80103a6:	2019      	movs	r0, #25
 80103a8:	f7ff fede 	bl	8010168 <__NVIC_EnableIRQ>
}
 80103ac:	bf00      	nop
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	200004ec 	.word	0x200004ec
 80103b4:	40023800 	.word	0x40023800
 80103b8:	40014400 	.word	0x40014400

080103bc <EXTI9_5_IRQHandler>:

// ################################################# INTERRUPTS ######################################## //
/* EXTI4 IRQ Handler */

void EXTI9_5_IRQHandler(void)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80103c0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80103c4:	f7f4 f84a 	bl	800445c <HAL_GPIO_EXTI_IRQHandler>
}
 80103c8:	bf00      	nop
 80103ca:	bd80      	pop	{r7, pc}

080103cc <HAL_GPIO_EXTI_Callback>:

// Callback for System interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	4603      	mov	r3, r0
 80103d4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_8) {									// Callback for BattCharger interrupt
 80103d6:	88fb      	ldrh	r3, [r7, #6]
 80103d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80103dc:	d10e      	bne.n	80103fc <HAL_GPIO_EXTI_Callback+0x30>
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET) {
 80103de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80103e2:	480b      	ldr	r0, [pc, #44]	@ (8010410 <HAL_GPIO_EXTI_Callback+0x44>)
 80103e4:	f7f4 f808 	bl	80043f8 <HAL_GPIO_ReadPin>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d103      	bne.n	80103f6 <HAL_GPIO_EXTI_Callback+0x2a>
			// Charger connected (e.g., voltage detected > threshold)
        	isCharging = true;
 80103ee:	4b09      	ldr	r3, [pc, #36]	@ (8010414 <HAL_GPIO_EXTI_Callback+0x48>)
 80103f0:	2201      	movs	r2, #1
 80103f2:	701a      	strb	r2, [r3, #0]
 80103f4:	e002      	b.n	80103fc <HAL_GPIO_EXTI_Callback+0x30>
		} else {
			// Charger disconnected (e.g., voltage detected < threshold)
			isCharging = false;
 80103f6:	4b07      	ldr	r3, [pc, #28]	@ (8010414 <HAL_GPIO_EXTI_Callback+0x48>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	701a      	strb	r2, [r3, #0]
		}
    }

    if (GPIO_Pin == GPIO_PIN_4) {         							  // Callback for SPEC_EOS interrupt
 80103fc:	88fb      	ldrh	r3, [r7, #6]
 80103fe:	2b10      	cmp	r3, #16
 8010400:	d102      	bne.n	8010408 <HAL_GPIO_EXTI_Callback+0x3c>
        eos_received = 1;
 8010402:	4b05      	ldr	r3, [pc, #20]	@ (8010418 <HAL_GPIO_EXTI_Callback+0x4c>)
 8010404:	2201      	movs	r2, #1
 8010406:	701a      	strb	r2, [r3, #0]
    }
}
 8010408:	bf00      	nop
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	40020c00 	.word	0x40020c00
 8010414:	20001fc0 	.word	0x20001fc0
 8010418:	20001fa4 	.word	0x20001fa4

0801041c <malloc>:
 801041c:	4b02      	ldr	r3, [pc, #8]	@ (8010428 <malloc+0xc>)
 801041e:	4601      	mov	r1, r0
 8010420:	6818      	ldr	r0, [r3, #0]
 8010422:	f000 b82d 	b.w	8010480 <_malloc_r>
 8010426:	bf00      	nop
 8010428:	200000d0 	.word	0x200000d0

0801042c <free>:
 801042c:	4b02      	ldr	r3, [pc, #8]	@ (8010438 <free+0xc>)
 801042e:	4601      	mov	r1, r0
 8010430:	6818      	ldr	r0, [r3, #0]
 8010432:	f001 bd61 	b.w	8011ef8 <_free_r>
 8010436:	bf00      	nop
 8010438:	200000d0 	.word	0x200000d0

0801043c <sbrk_aligned>:
 801043c:	b570      	push	{r4, r5, r6, lr}
 801043e:	4e0f      	ldr	r6, [pc, #60]	@ (801047c <sbrk_aligned+0x40>)
 8010440:	460c      	mov	r4, r1
 8010442:	6831      	ldr	r1, [r6, #0]
 8010444:	4605      	mov	r5, r0
 8010446:	b911      	cbnz	r1, 801044e <sbrk_aligned+0x12>
 8010448:	f000 fea4 	bl	8011194 <_sbrk_r>
 801044c:	6030      	str	r0, [r6, #0]
 801044e:	4621      	mov	r1, r4
 8010450:	4628      	mov	r0, r5
 8010452:	f000 fe9f 	bl	8011194 <_sbrk_r>
 8010456:	1c43      	adds	r3, r0, #1
 8010458:	d103      	bne.n	8010462 <sbrk_aligned+0x26>
 801045a:	f04f 34ff 	mov.w	r4, #4294967295
 801045e:	4620      	mov	r0, r4
 8010460:	bd70      	pop	{r4, r5, r6, pc}
 8010462:	1cc4      	adds	r4, r0, #3
 8010464:	f024 0403 	bic.w	r4, r4, #3
 8010468:	42a0      	cmp	r0, r4
 801046a:	d0f8      	beq.n	801045e <sbrk_aligned+0x22>
 801046c:	1a21      	subs	r1, r4, r0
 801046e:	4628      	mov	r0, r5
 8010470:	f000 fe90 	bl	8011194 <_sbrk_r>
 8010474:	3001      	adds	r0, #1
 8010476:	d1f2      	bne.n	801045e <sbrk_aligned+0x22>
 8010478:	e7ef      	b.n	801045a <sbrk_aligned+0x1e>
 801047a:	bf00      	nop
 801047c:	20001fc4 	.word	0x20001fc4

08010480 <_malloc_r>:
 8010480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010484:	1ccd      	adds	r5, r1, #3
 8010486:	f025 0503 	bic.w	r5, r5, #3
 801048a:	3508      	adds	r5, #8
 801048c:	2d0c      	cmp	r5, #12
 801048e:	bf38      	it	cc
 8010490:	250c      	movcc	r5, #12
 8010492:	2d00      	cmp	r5, #0
 8010494:	4606      	mov	r6, r0
 8010496:	db01      	blt.n	801049c <_malloc_r+0x1c>
 8010498:	42a9      	cmp	r1, r5
 801049a:	d904      	bls.n	80104a6 <_malloc_r+0x26>
 801049c:	230c      	movs	r3, #12
 801049e:	6033      	str	r3, [r6, #0]
 80104a0:	2000      	movs	r0, #0
 80104a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801057c <_malloc_r+0xfc>
 80104aa:	f000 f869 	bl	8010580 <__malloc_lock>
 80104ae:	f8d8 3000 	ldr.w	r3, [r8]
 80104b2:	461c      	mov	r4, r3
 80104b4:	bb44      	cbnz	r4, 8010508 <_malloc_r+0x88>
 80104b6:	4629      	mov	r1, r5
 80104b8:	4630      	mov	r0, r6
 80104ba:	f7ff ffbf 	bl	801043c <sbrk_aligned>
 80104be:	1c43      	adds	r3, r0, #1
 80104c0:	4604      	mov	r4, r0
 80104c2:	d158      	bne.n	8010576 <_malloc_r+0xf6>
 80104c4:	f8d8 4000 	ldr.w	r4, [r8]
 80104c8:	4627      	mov	r7, r4
 80104ca:	2f00      	cmp	r7, #0
 80104cc:	d143      	bne.n	8010556 <_malloc_r+0xd6>
 80104ce:	2c00      	cmp	r4, #0
 80104d0:	d04b      	beq.n	801056a <_malloc_r+0xea>
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	4639      	mov	r1, r7
 80104d6:	4630      	mov	r0, r6
 80104d8:	eb04 0903 	add.w	r9, r4, r3
 80104dc:	f000 fe5a 	bl	8011194 <_sbrk_r>
 80104e0:	4581      	cmp	r9, r0
 80104e2:	d142      	bne.n	801056a <_malloc_r+0xea>
 80104e4:	6821      	ldr	r1, [r4, #0]
 80104e6:	1a6d      	subs	r5, r5, r1
 80104e8:	4629      	mov	r1, r5
 80104ea:	4630      	mov	r0, r6
 80104ec:	f7ff ffa6 	bl	801043c <sbrk_aligned>
 80104f0:	3001      	adds	r0, #1
 80104f2:	d03a      	beq.n	801056a <_malloc_r+0xea>
 80104f4:	6823      	ldr	r3, [r4, #0]
 80104f6:	442b      	add	r3, r5
 80104f8:	6023      	str	r3, [r4, #0]
 80104fa:	f8d8 3000 	ldr.w	r3, [r8]
 80104fe:	685a      	ldr	r2, [r3, #4]
 8010500:	bb62      	cbnz	r2, 801055c <_malloc_r+0xdc>
 8010502:	f8c8 7000 	str.w	r7, [r8]
 8010506:	e00f      	b.n	8010528 <_malloc_r+0xa8>
 8010508:	6822      	ldr	r2, [r4, #0]
 801050a:	1b52      	subs	r2, r2, r5
 801050c:	d420      	bmi.n	8010550 <_malloc_r+0xd0>
 801050e:	2a0b      	cmp	r2, #11
 8010510:	d917      	bls.n	8010542 <_malloc_r+0xc2>
 8010512:	1961      	adds	r1, r4, r5
 8010514:	42a3      	cmp	r3, r4
 8010516:	6025      	str	r5, [r4, #0]
 8010518:	bf18      	it	ne
 801051a:	6059      	strne	r1, [r3, #4]
 801051c:	6863      	ldr	r3, [r4, #4]
 801051e:	bf08      	it	eq
 8010520:	f8c8 1000 	streq.w	r1, [r8]
 8010524:	5162      	str	r2, [r4, r5]
 8010526:	604b      	str	r3, [r1, #4]
 8010528:	4630      	mov	r0, r6
 801052a:	f000 f82f 	bl	801058c <__malloc_unlock>
 801052e:	f104 000b 	add.w	r0, r4, #11
 8010532:	1d23      	adds	r3, r4, #4
 8010534:	f020 0007 	bic.w	r0, r0, #7
 8010538:	1ac2      	subs	r2, r0, r3
 801053a:	bf1c      	itt	ne
 801053c:	1a1b      	subne	r3, r3, r0
 801053e:	50a3      	strne	r3, [r4, r2]
 8010540:	e7af      	b.n	80104a2 <_malloc_r+0x22>
 8010542:	6862      	ldr	r2, [r4, #4]
 8010544:	42a3      	cmp	r3, r4
 8010546:	bf0c      	ite	eq
 8010548:	f8c8 2000 	streq.w	r2, [r8]
 801054c:	605a      	strne	r2, [r3, #4]
 801054e:	e7eb      	b.n	8010528 <_malloc_r+0xa8>
 8010550:	4623      	mov	r3, r4
 8010552:	6864      	ldr	r4, [r4, #4]
 8010554:	e7ae      	b.n	80104b4 <_malloc_r+0x34>
 8010556:	463c      	mov	r4, r7
 8010558:	687f      	ldr	r7, [r7, #4]
 801055a:	e7b6      	b.n	80104ca <_malloc_r+0x4a>
 801055c:	461a      	mov	r2, r3
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	42a3      	cmp	r3, r4
 8010562:	d1fb      	bne.n	801055c <_malloc_r+0xdc>
 8010564:	2300      	movs	r3, #0
 8010566:	6053      	str	r3, [r2, #4]
 8010568:	e7de      	b.n	8010528 <_malloc_r+0xa8>
 801056a:	230c      	movs	r3, #12
 801056c:	6033      	str	r3, [r6, #0]
 801056e:	4630      	mov	r0, r6
 8010570:	f000 f80c 	bl	801058c <__malloc_unlock>
 8010574:	e794      	b.n	80104a0 <_malloc_r+0x20>
 8010576:	6005      	str	r5, [r0, #0]
 8010578:	e7d6      	b.n	8010528 <_malloc_r+0xa8>
 801057a:	bf00      	nop
 801057c:	20001fc8 	.word	0x20001fc8

08010580 <__malloc_lock>:
 8010580:	4801      	ldr	r0, [pc, #4]	@ (8010588 <__malloc_lock+0x8>)
 8010582:	f000 be54 	b.w	801122e <__retarget_lock_acquire_recursive>
 8010586:	bf00      	nop
 8010588:	2000210c 	.word	0x2000210c

0801058c <__malloc_unlock>:
 801058c:	4801      	ldr	r0, [pc, #4]	@ (8010594 <__malloc_unlock+0x8>)
 801058e:	f000 be4f 	b.w	8011230 <__retarget_lock_release_recursive>
 8010592:	bf00      	nop
 8010594:	2000210c 	.word	0x2000210c

08010598 <__cvt>:
 8010598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801059c:	ec57 6b10 	vmov	r6, r7, d0
 80105a0:	2f00      	cmp	r7, #0
 80105a2:	460c      	mov	r4, r1
 80105a4:	4619      	mov	r1, r3
 80105a6:	463b      	mov	r3, r7
 80105a8:	bfbb      	ittet	lt
 80105aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80105ae:	461f      	movlt	r7, r3
 80105b0:	2300      	movge	r3, #0
 80105b2:	232d      	movlt	r3, #45	@ 0x2d
 80105b4:	700b      	strb	r3, [r1, #0]
 80105b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80105bc:	4691      	mov	r9, r2
 80105be:	f023 0820 	bic.w	r8, r3, #32
 80105c2:	bfbc      	itt	lt
 80105c4:	4632      	movlt	r2, r6
 80105c6:	4616      	movlt	r6, r2
 80105c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80105cc:	d005      	beq.n	80105da <__cvt+0x42>
 80105ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80105d2:	d100      	bne.n	80105d6 <__cvt+0x3e>
 80105d4:	3401      	adds	r4, #1
 80105d6:	2102      	movs	r1, #2
 80105d8:	e000      	b.n	80105dc <__cvt+0x44>
 80105da:	2103      	movs	r1, #3
 80105dc:	ab03      	add	r3, sp, #12
 80105de:	9301      	str	r3, [sp, #4]
 80105e0:	ab02      	add	r3, sp, #8
 80105e2:	9300      	str	r3, [sp, #0]
 80105e4:	ec47 6b10 	vmov	d0, r6, r7
 80105e8:	4653      	mov	r3, sl
 80105ea:	4622      	mov	r2, r4
 80105ec:	f000 fec0 	bl	8011370 <_dtoa_r>
 80105f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80105f4:	4605      	mov	r5, r0
 80105f6:	d119      	bne.n	801062c <__cvt+0x94>
 80105f8:	f019 0f01 	tst.w	r9, #1
 80105fc:	d00e      	beq.n	801061c <__cvt+0x84>
 80105fe:	eb00 0904 	add.w	r9, r0, r4
 8010602:	2200      	movs	r2, #0
 8010604:	2300      	movs	r3, #0
 8010606:	4630      	mov	r0, r6
 8010608:	4639      	mov	r1, r7
 801060a:	f7f0 fa6d 	bl	8000ae8 <__aeabi_dcmpeq>
 801060e:	b108      	cbz	r0, 8010614 <__cvt+0x7c>
 8010610:	f8cd 900c 	str.w	r9, [sp, #12]
 8010614:	2230      	movs	r2, #48	@ 0x30
 8010616:	9b03      	ldr	r3, [sp, #12]
 8010618:	454b      	cmp	r3, r9
 801061a:	d31e      	bcc.n	801065a <__cvt+0xc2>
 801061c:	9b03      	ldr	r3, [sp, #12]
 801061e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010620:	1b5b      	subs	r3, r3, r5
 8010622:	4628      	mov	r0, r5
 8010624:	6013      	str	r3, [r2, #0]
 8010626:	b004      	add	sp, #16
 8010628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801062c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010630:	eb00 0904 	add.w	r9, r0, r4
 8010634:	d1e5      	bne.n	8010602 <__cvt+0x6a>
 8010636:	7803      	ldrb	r3, [r0, #0]
 8010638:	2b30      	cmp	r3, #48	@ 0x30
 801063a:	d10a      	bne.n	8010652 <__cvt+0xba>
 801063c:	2200      	movs	r2, #0
 801063e:	2300      	movs	r3, #0
 8010640:	4630      	mov	r0, r6
 8010642:	4639      	mov	r1, r7
 8010644:	f7f0 fa50 	bl	8000ae8 <__aeabi_dcmpeq>
 8010648:	b918      	cbnz	r0, 8010652 <__cvt+0xba>
 801064a:	f1c4 0401 	rsb	r4, r4, #1
 801064e:	f8ca 4000 	str.w	r4, [sl]
 8010652:	f8da 3000 	ldr.w	r3, [sl]
 8010656:	4499      	add	r9, r3
 8010658:	e7d3      	b.n	8010602 <__cvt+0x6a>
 801065a:	1c59      	adds	r1, r3, #1
 801065c:	9103      	str	r1, [sp, #12]
 801065e:	701a      	strb	r2, [r3, #0]
 8010660:	e7d9      	b.n	8010616 <__cvt+0x7e>

08010662 <__exponent>:
 8010662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010664:	2900      	cmp	r1, #0
 8010666:	bfba      	itte	lt
 8010668:	4249      	neglt	r1, r1
 801066a:	232d      	movlt	r3, #45	@ 0x2d
 801066c:	232b      	movge	r3, #43	@ 0x2b
 801066e:	2909      	cmp	r1, #9
 8010670:	7002      	strb	r2, [r0, #0]
 8010672:	7043      	strb	r3, [r0, #1]
 8010674:	dd29      	ble.n	80106ca <__exponent+0x68>
 8010676:	f10d 0307 	add.w	r3, sp, #7
 801067a:	461d      	mov	r5, r3
 801067c:	270a      	movs	r7, #10
 801067e:	461a      	mov	r2, r3
 8010680:	fbb1 f6f7 	udiv	r6, r1, r7
 8010684:	fb07 1416 	mls	r4, r7, r6, r1
 8010688:	3430      	adds	r4, #48	@ 0x30
 801068a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801068e:	460c      	mov	r4, r1
 8010690:	2c63      	cmp	r4, #99	@ 0x63
 8010692:	f103 33ff 	add.w	r3, r3, #4294967295
 8010696:	4631      	mov	r1, r6
 8010698:	dcf1      	bgt.n	801067e <__exponent+0x1c>
 801069a:	3130      	adds	r1, #48	@ 0x30
 801069c:	1e94      	subs	r4, r2, #2
 801069e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80106a2:	1c41      	adds	r1, r0, #1
 80106a4:	4623      	mov	r3, r4
 80106a6:	42ab      	cmp	r3, r5
 80106a8:	d30a      	bcc.n	80106c0 <__exponent+0x5e>
 80106aa:	f10d 0309 	add.w	r3, sp, #9
 80106ae:	1a9b      	subs	r3, r3, r2
 80106b0:	42ac      	cmp	r4, r5
 80106b2:	bf88      	it	hi
 80106b4:	2300      	movhi	r3, #0
 80106b6:	3302      	adds	r3, #2
 80106b8:	4403      	add	r3, r0
 80106ba:	1a18      	subs	r0, r3, r0
 80106bc:	b003      	add	sp, #12
 80106be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80106c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80106c8:	e7ed      	b.n	80106a6 <__exponent+0x44>
 80106ca:	2330      	movs	r3, #48	@ 0x30
 80106cc:	3130      	adds	r1, #48	@ 0x30
 80106ce:	7083      	strb	r3, [r0, #2]
 80106d0:	70c1      	strb	r1, [r0, #3]
 80106d2:	1d03      	adds	r3, r0, #4
 80106d4:	e7f1      	b.n	80106ba <__exponent+0x58>
	...

080106d8 <_printf_float>:
 80106d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106dc:	b08d      	sub	sp, #52	@ 0x34
 80106de:	460c      	mov	r4, r1
 80106e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80106e4:	4616      	mov	r6, r2
 80106e6:	461f      	mov	r7, r3
 80106e8:	4605      	mov	r5, r0
 80106ea:	f000 fd1b 	bl	8011124 <_localeconv_r>
 80106ee:	6803      	ldr	r3, [r0, #0]
 80106f0:	9304      	str	r3, [sp, #16]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7ef fdcc 	bl	8000290 <strlen>
 80106f8:	2300      	movs	r3, #0
 80106fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80106fc:	f8d8 3000 	ldr.w	r3, [r8]
 8010700:	9005      	str	r0, [sp, #20]
 8010702:	3307      	adds	r3, #7
 8010704:	f023 0307 	bic.w	r3, r3, #7
 8010708:	f103 0208 	add.w	r2, r3, #8
 801070c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010710:	f8d4 b000 	ldr.w	fp, [r4]
 8010714:	f8c8 2000 	str.w	r2, [r8]
 8010718:	e9d3 8900 	ldrd	r8, r9, [r3]
 801071c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010720:	9307      	str	r3, [sp, #28]
 8010722:	f8cd 8018 	str.w	r8, [sp, #24]
 8010726:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801072a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801072e:	4b9c      	ldr	r3, [pc, #624]	@ (80109a0 <_printf_float+0x2c8>)
 8010730:	f04f 32ff 	mov.w	r2, #4294967295
 8010734:	f7f0 fa0a 	bl	8000b4c <__aeabi_dcmpun>
 8010738:	bb70      	cbnz	r0, 8010798 <_printf_float+0xc0>
 801073a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801073e:	4b98      	ldr	r3, [pc, #608]	@ (80109a0 <_printf_float+0x2c8>)
 8010740:	f04f 32ff 	mov.w	r2, #4294967295
 8010744:	f7f0 f9e4 	bl	8000b10 <__aeabi_dcmple>
 8010748:	bb30      	cbnz	r0, 8010798 <_printf_float+0xc0>
 801074a:	2200      	movs	r2, #0
 801074c:	2300      	movs	r3, #0
 801074e:	4640      	mov	r0, r8
 8010750:	4649      	mov	r1, r9
 8010752:	f7f0 f9d3 	bl	8000afc <__aeabi_dcmplt>
 8010756:	b110      	cbz	r0, 801075e <_printf_float+0x86>
 8010758:	232d      	movs	r3, #45	@ 0x2d
 801075a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801075e:	4a91      	ldr	r2, [pc, #580]	@ (80109a4 <_printf_float+0x2cc>)
 8010760:	4b91      	ldr	r3, [pc, #580]	@ (80109a8 <_printf_float+0x2d0>)
 8010762:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010766:	bf94      	ite	ls
 8010768:	4690      	movls	r8, r2
 801076a:	4698      	movhi	r8, r3
 801076c:	2303      	movs	r3, #3
 801076e:	6123      	str	r3, [r4, #16]
 8010770:	f02b 0304 	bic.w	r3, fp, #4
 8010774:	6023      	str	r3, [r4, #0]
 8010776:	f04f 0900 	mov.w	r9, #0
 801077a:	9700      	str	r7, [sp, #0]
 801077c:	4633      	mov	r3, r6
 801077e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010780:	4621      	mov	r1, r4
 8010782:	4628      	mov	r0, r5
 8010784:	f000 f9d2 	bl	8010b2c <_printf_common>
 8010788:	3001      	adds	r0, #1
 801078a:	f040 808d 	bne.w	80108a8 <_printf_float+0x1d0>
 801078e:	f04f 30ff 	mov.w	r0, #4294967295
 8010792:	b00d      	add	sp, #52	@ 0x34
 8010794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010798:	4642      	mov	r2, r8
 801079a:	464b      	mov	r3, r9
 801079c:	4640      	mov	r0, r8
 801079e:	4649      	mov	r1, r9
 80107a0:	f7f0 f9d4 	bl	8000b4c <__aeabi_dcmpun>
 80107a4:	b140      	cbz	r0, 80107b8 <_printf_float+0xe0>
 80107a6:	464b      	mov	r3, r9
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	bfbc      	itt	lt
 80107ac:	232d      	movlt	r3, #45	@ 0x2d
 80107ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80107b2:	4a7e      	ldr	r2, [pc, #504]	@ (80109ac <_printf_float+0x2d4>)
 80107b4:	4b7e      	ldr	r3, [pc, #504]	@ (80109b0 <_printf_float+0x2d8>)
 80107b6:	e7d4      	b.n	8010762 <_printf_float+0x8a>
 80107b8:	6863      	ldr	r3, [r4, #4]
 80107ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80107be:	9206      	str	r2, [sp, #24]
 80107c0:	1c5a      	adds	r2, r3, #1
 80107c2:	d13b      	bne.n	801083c <_printf_float+0x164>
 80107c4:	2306      	movs	r3, #6
 80107c6:	6063      	str	r3, [r4, #4]
 80107c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80107cc:	2300      	movs	r3, #0
 80107ce:	6022      	str	r2, [r4, #0]
 80107d0:	9303      	str	r3, [sp, #12]
 80107d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80107d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80107d8:	ab09      	add	r3, sp, #36	@ 0x24
 80107da:	9300      	str	r3, [sp, #0]
 80107dc:	6861      	ldr	r1, [r4, #4]
 80107de:	ec49 8b10 	vmov	d0, r8, r9
 80107e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80107e6:	4628      	mov	r0, r5
 80107e8:	f7ff fed6 	bl	8010598 <__cvt>
 80107ec:	9b06      	ldr	r3, [sp, #24]
 80107ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80107f0:	2b47      	cmp	r3, #71	@ 0x47
 80107f2:	4680      	mov	r8, r0
 80107f4:	d129      	bne.n	801084a <_printf_float+0x172>
 80107f6:	1cc8      	adds	r0, r1, #3
 80107f8:	db02      	blt.n	8010800 <_printf_float+0x128>
 80107fa:	6863      	ldr	r3, [r4, #4]
 80107fc:	4299      	cmp	r1, r3
 80107fe:	dd41      	ble.n	8010884 <_printf_float+0x1ac>
 8010800:	f1aa 0a02 	sub.w	sl, sl, #2
 8010804:	fa5f fa8a 	uxtb.w	sl, sl
 8010808:	3901      	subs	r1, #1
 801080a:	4652      	mov	r2, sl
 801080c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010810:	9109      	str	r1, [sp, #36]	@ 0x24
 8010812:	f7ff ff26 	bl	8010662 <__exponent>
 8010816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010818:	1813      	adds	r3, r2, r0
 801081a:	2a01      	cmp	r2, #1
 801081c:	4681      	mov	r9, r0
 801081e:	6123      	str	r3, [r4, #16]
 8010820:	dc02      	bgt.n	8010828 <_printf_float+0x150>
 8010822:	6822      	ldr	r2, [r4, #0]
 8010824:	07d2      	lsls	r2, r2, #31
 8010826:	d501      	bpl.n	801082c <_printf_float+0x154>
 8010828:	3301      	adds	r3, #1
 801082a:	6123      	str	r3, [r4, #16]
 801082c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010830:	2b00      	cmp	r3, #0
 8010832:	d0a2      	beq.n	801077a <_printf_float+0xa2>
 8010834:	232d      	movs	r3, #45	@ 0x2d
 8010836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801083a:	e79e      	b.n	801077a <_printf_float+0xa2>
 801083c:	9a06      	ldr	r2, [sp, #24]
 801083e:	2a47      	cmp	r2, #71	@ 0x47
 8010840:	d1c2      	bne.n	80107c8 <_printf_float+0xf0>
 8010842:	2b00      	cmp	r3, #0
 8010844:	d1c0      	bne.n	80107c8 <_printf_float+0xf0>
 8010846:	2301      	movs	r3, #1
 8010848:	e7bd      	b.n	80107c6 <_printf_float+0xee>
 801084a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801084e:	d9db      	bls.n	8010808 <_printf_float+0x130>
 8010850:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010854:	d118      	bne.n	8010888 <_printf_float+0x1b0>
 8010856:	2900      	cmp	r1, #0
 8010858:	6863      	ldr	r3, [r4, #4]
 801085a:	dd0b      	ble.n	8010874 <_printf_float+0x19c>
 801085c:	6121      	str	r1, [r4, #16]
 801085e:	b913      	cbnz	r3, 8010866 <_printf_float+0x18e>
 8010860:	6822      	ldr	r2, [r4, #0]
 8010862:	07d0      	lsls	r0, r2, #31
 8010864:	d502      	bpl.n	801086c <_printf_float+0x194>
 8010866:	3301      	adds	r3, #1
 8010868:	440b      	add	r3, r1
 801086a:	6123      	str	r3, [r4, #16]
 801086c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801086e:	f04f 0900 	mov.w	r9, #0
 8010872:	e7db      	b.n	801082c <_printf_float+0x154>
 8010874:	b913      	cbnz	r3, 801087c <_printf_float+0x1a4>
 8010876:	6822      	ldr	r2, [r4, #0]
 8010878:	07d2      	lsls	r2, r2, #31
 801087a:	d501      	bpl.n	8010880 <_printf_float+0x1a8>
 801087c:	3302      	adds	r3, #2
 801087e:	e7f4      	b.n	801086a <_printf_float+0x192>
 8010880:	2301      	movs	r3, #1
 8010882:	e7f2      	b.n	801086a <_printf_float+0x192>
 8010884:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801088a:	4299      	cmp	r1, r3
 801088c:	db05      	blt.n	801089a <_printf_float+0x1c2>
 801088e:	6823      	ldr	r3, [r4, #0]
 8010890:	6121      	str	r1, [r4, #16]
 8010892:	07d8      	lsls	r0, r3, #31
 8010894:	d5ea      	bpl.n	801086c <_printf_float+0x194>
 8010896:	1c4b      	adds	r3, r1, #1
 8010898:	e7e7      	b.n	801086a <_printf_float+0x192>
 801089a:	2900      	cmp	r1, #0
 801089c:	bfd4      	ite	le
 801089e:	f1c1 0202 	rsble	r2, r1, #2
 80108a2:	2201      	movgt	r2, #1
 80108a4:	4413      	add	r3, r2
 80108a6:	e7e0      	b.n	801086a <_printf_float+0x192>
 80108a8:	6823      	ldr	r3, [r4, #0]
 80108aa:	055a      	lsls	r2, r3, #21
 80108ac:	d407      	bmi.n	80108be <_printf_float+0x1e6>
 80108ae:	6923      	ldr	r3, [r4, #16]
 80108b0:	4642      	mov	r2, r8
 80108b2:	4631      	mov	r1, r6
 80108b4:	4628      	mov	r0, r5
 80108b6:	47b8      	blx	r7
 80108b8:	3001      	adds	r0, #1
 80108ba:	d12b      	bne.n	8010914 <_printf_float+0x23c>
 80108bc:	e767      	b.n	801078e <_printf_float+0xb6>
 80108be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80108c2:	f240 80dd 	bls.w	8010a80 <_printf_float+0x3a8>
 80108c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80108ca:	2200      	movs	r2, #0
 80108cc:	2300      	movs	r3, #0
 80108ce:	f7f0 f90b 	bl	8000ae8 <__aeabi_dcmpeq>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d033      	beq.n	801093e <_printf_float+0x266>
 80108d6:	4a37      	ldr	r2, [pc, #220]	@ (80109b4 <_printf_float+0x2dc>)
 80108d8:	2301      	movs	r3, #1
 80108da:	4631      	mov	r1, r6
 80108dc:	4628      	mov	r0, r5
 80108de:	47b8      	blx	r7
 80108e0:	3001      	adds	r0, #1
 80108e2:	f43f af54 	beq.w	801078e <_printf_float+0xb6>
 80108e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80108ea:	4543      	cmp	r3, r8
 80108ec:	db02      	blt.n	80108f4 <_printf_float+0x21c>
 80108ee:	6823      	ldr	r3, [r4, #0]
 80108f0:	07d8      	lsls	r0, r3, #31
 80108f2:	d50f      	bpl.n	8010914 <_printf_float+0x23c>
 80108f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108f8:	4631      	mov	r1, r6
 80108fa:	4628      	mov	r0, r5
 80108fc:	47b8      	blx	r7
 80108fe:	3001      	adds	r0, #1
 8010900:	f43f af45 	beq.w	801078e <_printf_float+0xb6>
 8010904:	f04f 0900 	mov.w	r9, #0
 8010908:	f108 38ff 	add.w	r8, r8, #4294967295
 801090c:	f104 0a1a 	add.w	sl, r4, #26
 8010910:	45c8      	cmp	r8, r9
 8010912:	dc09      	bgt.n	8010928 <_printf_float+0x250>
 8010914:	6823      	ldr	r3, [r4, #0]
 8010916:	079b      	lsls	r3, r3, #30
 8010918:	f100 8103 	bmi.w	8010b22 <_printf_float+0x44a>
 801091c:	68e0      	ldr	r0, [r4, #12]
 801091e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010920:	4298      	cmp	r0, r3
 8010922:	bfb8      	it	lt
 8010924:	4618      	movlt	r0, r3
 8010926:	e734      	b.n	8010792 <_printf_float+0xba>
 8010928:	2301      	movs	r3, #1
 801092a:	4652      	mov	r2, sl
 801092c:	4631      	mov	r1, r6
 801092e:	4628      	mov	r0, r5
 8010930:	47b8      	blx	r7
 8010932:	3001      	adds	r0, #1
 8010934:	f43f af2b 	beq.w	801078e <_printf_float+0xb6>
 8010938:	f109 0901 	add.w	r9, r9, #1
 801093c:	e7e8      	b.n	8010910 <_printf_float+0x238>
 801093e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010940:	2b00      	cmp	r3, #0
 8010942:	dc39      	bgt.n	80109b8 <_printf_float+0x2e0>
 8010944:	4a1b      	ldr	r2, [pc, #108]	@ (80109b4 <_printf_float+0x2dc>)
 8010946:	2301      	movs	r3, #1
 8010948:	4631      	mov	r1, r6
 801094a:	4628      	mov	r0, r5
 801094c:	47b8      	blx	r7
 801094e:	3001      	adds	r0, #1
 8010950:	f43f af1d 	beq.w	801078e <_printf_float+0xb6>
 8010954:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010958:	ea59 0303 	orrs.w	r3, r9, r3
 801095c:	d102      	bne.n	8010964 <_printf_float+0x28c>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	07d9      	lsls	r1, r3, #31
 8010962:	d5d7      	bpl.n	8010914 <_printf_float+0x23c>
 8010964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010968:	4631      	mov	r1, r6
 801096a:	4628      	mov	r0, r5
 801096c:	47b8      	blx	r7
 801096e:	3001      	adds	r0, #1
 8010970:	f43f af0d 	beq.w	801078e <_printf_float+0xb6>
 8010974:	f04f 0a00 	mov.w	sl, #0
 8010978:	f104 0b1a 	add.w	fp, r4, #26
 801097c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801097e:	425b      	negs	r3, r3
 8010980:	4553      	cmp	r3, sl
 8010982:	dc01      	bgt.n	8010988 <_printf_float+0x2b0>
 8010984:	464b      	mov	r3, r9
 8010986:	e793      	b.n	80108b0 <_printf_float+0x1d8>
 8010988:	2301      	movs	r3, #1
 801098a:	465a      	mov	r2, fp
 801098c:	4631      	mov	r1, r6
 801098e:	4628      	mov	r0, r5
 8010990:	47b8      	blx	r7
 8010992:	3001      	adds	r0, #1
 8010994:	f43f aefb 	beq.w	801078e <_printf_float+0xb6>
 8010998:	f10a 0a01 	add.w	sl, sl, #1
 801099c:	e7ee      	b.n	801097c <_printf_float+0x2a4>
 801099e:	bf00      	nop
 80109a0:	7fefffff 	.word	0x7fefffff
 80109a4:	080156c4 	.word	0x080156c4
 80109a8:	080156c8 	.word	0x080156c8
 80109ac:	080156cc 	.word	0x080156cc
 80109b0:	080156d0 	.word	0x080156d0
 80109b4:	080156d4 	.word	0x080156d4
 80109b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80109ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80109be:	4553      	cmp	r3, sl
 80109c0:	bfa8      	it	ge
 80109c2:	4653      	movge	r3, sl
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	4699      	mov	r9, r3
 80109c8:	dc36      	bgt.n	8010a38 <_printf_float+0x360>
 80109ca:	f04f 0b00 	mov.w	fp, #0
 80109ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80109d2:	f104 021a 	add.w	r2, r4, #26
 80109d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80109d8:	9306      	str	r3, [sp, #24]
 80109da:	eba3 0309 	sub.w	r3, r3, r9
 80109de:	455b      	cmp	r3, fp
 80109e0:	dc31      	bgt.n	8010a46 <_printf_float+0x36e>
 80109e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109e4:	459a      	cmp	sl, r3
 80109e6:	dc3a      	bgt.n	8010a5e <_printf_float+0x386>
 80109e8:	6823      	ldr	r3, [r4, #0]
 80109ea:	07da      	lsls	r2, r3, #31
 80109ec:	d437      	bmi.n	8010a5e <_printf_float+0x386>
 80109ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109f0:	ebaa 0903 	sub.w	r9, sl, r3
 80109f4:	9b06      	ldr	r3, [sp, #24]
 80109f6:	ebaa 0303 	sub.w	r3, sl, r3
 80109fa:	4599      	cmp	r9, r3
 80109fc:	bfa8      	it	ge
 80109fe:	4699      	movge	r9, r3
 8010a00:	f1b9 0f00 	cmp.w	r9, #0
 8010a04:	dc33      	bgt.n	8010a6e <_printf_float+0x396>
 8010a06:	f04f 0800 	mov.w	r8, #0
 8010a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a0e:	f104 0b1a 	add.w	fp, r4, #26
 8010a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a14:	ebaa 0303 	sub.w	r3, sl, r3
 8010a18:	eba3 0309 	sub.w	r3, r3, r9
 8010a1c:	4543      	cmp	r3, r8
 8010a1e:	f77f af79 	ble.w	8010914 <_printf_float+0x23c>
 8010a22:	2301      	movs	r3, #1
 8010a24:	465a      	mov	r2, fp
 8010a26:	4631      	mov	r1, r6
 8010a28:	4628      	mov	r0, r5
 8010a2a:	47b8      	blx	r7
 8010a2c:	3001      	adds	r0, #1
 8010a2e:	f43f aeae 	beq.w	801078e <_printf_float+0xb6>
 8010a32:	f108 0801 	add.w	r8, r8, #1
 8010a36:	e7ec      	b.n	8010a12 <_printf_float+0x33a>
 8010a38:	4642      	mov	r2, r8
 8010a3a:	4631      	mov	r1, r6
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	47b8      	blx	r7
 8010a40:	3001      	adds	r0, #1
 8010a42:	d1c2      	bne.n	80109ca <_printf_float+0x2f2>
 8010a44:	e6a3      	b.n	801078e <_printf_float+0xb6>
 8010a46:	2301      	movs	r3, #1
 8010a48:	4631      	mov	r1, r6
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	9206      	str	r2, [sp, #24]
 8010a4e:	47b8      	blx	r7
 8010a50:	3001      	adds	r0, #1
 8010a52:	f43f ae9c 	beq.w	801078e <_printf_float+0xb6>
 8010a56:	9a06      	ldr	r2, [sp, #24]
 8010a58:	f10b 0b01 	add.w	fp, fp, #1
 8010a5c:	e7bb      	b.n	80109d6 <_printf_float+0x2fe>
 8010a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a62:	4631      	mov	r1, r6
 8010a64:	4628      	mov	r0, r5
 8010a66:	47b8      	blx	r7
 8010a68:	3001      	adds	r0, #1
 8010a6a:	d1c0      	bne.n	80109ee <_printf_float+0x316>
 8010a6c:	e68f      	b.n	801078e <_printf_float+0xb6>
 8010a6e:	9a06      	ldr	r2, [sp, #24]
 8010a70:	464b      	mov	r3, r9
 8010a72:	4442      	add	r2, r8
 8010a74:	4631      	mov	r1, r6
 8010a76:	4628      	mov	r0, r5
 8010a78:	47b8      	blx	r7
 8010a7a:	3001      	adds	r0, #1
 8010a7c:	d1c3      	bne.n	8010a06 <_printf_float+0x32e>
 8010a7e:	e686      	b.n	801078e <_printf_float+0xb6>
 8010a80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010a84:	f1ba 0f01 	cmp.w	sl, #1
 8010a88:	dc01      	bgt.n	8010a8e <_printf_float+0x3b6>
 8010a8a:	07db      	lsls	r3, r3, #31
 8010a8c:	d536      	bpl.n	8010afc <_printf_float+0x424>
 8010a8e:	2301      	movs	r3, #1
 8010a90:	4642      	mov	r2, r8
 8010a92:	4631      	mov	r1, r6
 8010a94:	4628      	mov	r0, r5
 8010a96:	47b8      	blx	r7
 8010a98:	3001      	adds	r0, #1
 8010a9a:	f43f ae78 	beq.w	801078e <_printf_float+0xb6>
 8010a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010aa2:	4631      	mov	r1, r6
 8010aa4:	4628      	mov	r0, r5
 8010aa6:	47b8      	blx	r7
 8010aa8:	3001      	adds	r0, #1
 8010aaa:	f43f ae70 	beq.w	801078e <_printf_float+0xb6>
 8010aae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010aba:	f7f0 f815 	bl	8000ae8 <__aeabi_dcmpeq>
 8010abe:	b9c0      	cbnz	r0, 8010af2 <_printf_float+0x41a>
 8010ac0:	4653      	mov	r3, sl
 8010ac2:	f108 0201 	add.w	r2, r8, #1
 8010ac6:	4631      	mov	r1, r6
 8010ac8:	4628      	mov	r0, r5
 8010aca:	47b8      	blx	r7
 8010acc:	3001      	adds	r0, #1
 8010ace:	d10c      	bne.n	8010aea <_printf_float+0x412>
 8010ad0:	e65d      	b.n	801078e <_printf_float+0xb6>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	465a      	mov	r2, fp
 8010ad6:	4631      	mov	r1, r6
 8010ad8:	4628      	mov	r0, r5
 8010ada:	47b8      	blx	r7
 8010adc:	3001      	adds	r0, #1
 8010ade:	f43f ae56 	beq.w	801078e <_printf_float+0xb6>
 8010ae2:	f108 0801 	add.w	r8, r8, #1
 8010ae6:	45d0      	cmp	r8, sl
 8010ae8:	dbf3      	blt.n	8010ad2 <_printf_float+0x3fa>
 8010aea:	464b      	mov	r3, r9
 8010aec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010af0:	e6df      	b.n	80108b2 <_printf_float+0x1da>
 8010af2:	f04f 0800 	mov.w	r8, #0
 8010af6:	f104 0b1a 	add.w	fp, r4, #26
 8010afa:	e7f4      	b.n	8010ae6 <_printf_float+0x40e>
 8010afc:	2301      	movs	r3, #1
 8010afe:	4642      	mov	r2, r8
 8010b00:	e7e1      	b.n	8010ac6 <_printf_float+0x3ee>
 8010b02:	2301      	movs	r3, #1
 8010b04:	464a      	mov	r2, r9
 8010b06:	4631      	mov	r1, r6
 8010b08:	4628      	mov	r0, r5
 8010b0a:	47b8      	blx	r7
 8010b0c:	3001      	adds	r0, #1
 8010b0e:	f43f ae3e 	beq.w	801078e <_printf_float+0xb6>
 8010b12:	f108 0801 	add.w	r8, r8, #1
 8010b16:	68e3      	ldr	r3, [r4, #12]
 8010b18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010b1a:	1a5b      	subs	r3, r3, r1
 8010b1c:	4543      	cmp	r3, r8
 8010b1e:	dcf0      	bgt.n	8010b02 <_printf_float+0x42a>
 8010b20:	e6fc      	b.n	801091c <_printf_float+0x244>
 8010b22:	f04f 0800 	mov.w	r8, #0
 8010b26:	f104 0919 	add.w	r9, r4, #25
 8010b2a:	e7f4      	b.n	8010b16 <_printf_float+0x43e>

08010b2c <_printf_common>:
 8010b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b30:	4616      	mov	r6, r2
 8010b32:	4698      	mov	r8, r3
 8010b34:	688a      	ldr	r2, [r1, #8]
 8010b36:	690b      	ldr	r3, [r1, #16]
 8010b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	bfb8      	it	lt
 8010b40:	4613      	movlt	r3, r2
 8010b42:	6033      	str	r3, [r6, #0]
 8010b44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010b48:	4607      	mov	r7, r0
 8010b4a:	460c      	mov	r4, r1
 8010b4c:	b10a      	cbz	r2, 8010b52 <_printf_common+0x26>
 8010b4e:	3301      	adds	r3, #1
 8010b50:	6033      	str	r3, [r6, #0]
 8010b52:	6823      	ldr	r3, [r4, #0]
 8010b54:	0699      	lsls	r1, r3, #26
 8010b56:	bf42      	ittt	mi
 8010b58:	6833      	ldrmi	r3, [r6, #0]
 8010b5a:	3302      	addmi	r3, #2
 8010b5c:	6033      	strmi	r3, [r6, #0]
 8010b5e:	6825      	ldr	r5, [r4, #0]
 8010b60:	f015 0506 	ands.w	r5, r5, #6
 8010b64:	d106      	bne.n	8010b74 <_printf_common+0x48>
 8010b66:	f104 0a19 	add.w	sl, r4, #25
 8010b6a:	68e3      	ldr	r3, [r4, #12]
 8010b6c:	6832      	ldr	r2, [r6, #0]
 8010b6e:	1a9b      	subs	r3, r3, r2
 8010b70:	42ab      	cmp	r3, r5
 8010b72:	dc26      	bgt.n	8010bc2 <_printf_common+0x96>
 8010b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010b78:	6822      	ldr	r2, [r4, #0]
 8010b7a:	3b00      	subs	r3, #0
 8010b7c:	bf18      	it	ne
 8010b7e:	2301      	movne	r3, #1
 8010b80:	0692      	lsls	r2, r2, #26
 8010b82:	d42b      	bmi.n	8010bdc <_printf_common+0xb0>
 8010b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010b88:	4641      	mov	r1, r8
 8010b8a:	4638      	mov	r0, r7
 8010b8c:	47c8      	blx	r9
 8010b8e:	3001      	adds	r0, #1
 8010b90:	d01e      	beq.n	8010bd0 <_printf_common+0xa4>
 8010b92:	6823      	ldr	r3, [r4, #0]
 8010b94:	6922      	ldr	r2, [r4, #16]
 8010b96:	f003 0306 	and.w	r3, r3, #6
 8010b9a:	2b04      	cmp	r3, #4
 8010b9c:	bf02      	ittt	eq
 8010b9e:	68e5      	ldreq	r5, [r4, #12]
 8010ba0:	6833      	ldreq	r3, [r6, #0]
 8010ba2:	1aed      	subeq	r5, r5, r3
 8010ba4:	68a3      	ldr	r3, [r4, #8]
 8010ba6:	bf0c      	ite	eq
 8010ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010bac:	2500      	movne	r5, #0
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	bfc4      	itt	gt
 8010bb2:	1a9b      	subgt	r3, r3, r2
 8010bb4:	18ed      	addgt	r5, r5, r3
 8010bb6:	2600      	movs	r6, #0
 8010bb8:	341a      	adds	r4, #26
 8010bba:	42b5      	cmp	r5, r6
 8010bbc:	d11a      	bne.n	8010bf4 <_printf_common+0xc8>
 8010bbe:	2000      	movs	r0, #0
 8010bc0:	e008      	b.n	8010bd4 <_printf_common+0xa8>
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	4652      	mov	r2, sl
 8010bc6:	4641      	mov	r1, r8
 8010bc8:	4638      	mov	r0, r7
 8010bca:	47c8      	blx	r9
 8010bcc:	3001      	adds	r0, #1
 8010bce:	d103      	bne.n	8010bd8 <_printf_common+0xac>
 8010bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8010bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bd8:	3501      	adds	r5, #1
 8010bda:	e7c6      	b.n	8010b6a <_printf_common+0x3e>
 8010bdc:	18e1      	adds	r1, r4, r3
 8010bde:	1c5a      	adds	r2, r3, #1
 8010be0:	2030      	movs	r0, #48	@ 0x30
 8010be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010be6:	4422      	add	r2, r4
 8010be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010bec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010bf0:	3302      	adds	r3, #2
 8010bf2:	e7c7      	b.n	8010b84 <_printf_common+0x58>
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	4622      	mov	r2, r4
 8010bf8:	4641      	mov	r1, r8
 8010bfa:	4638      	mov	r0, r7
 8010bfc:	47c8      	blx	r9
 8010bfe:	3001      	adds	r0, #1
 8010c00:	d0e6      	beq.n	8010bd0 <_printf_common+0xa4>
 8010c02:	3601      	adds	r6, #1
 8010c04:	e7d9      	b.n	8010bba <_printf_common+0x8e>
	...

08010c08 <_printf_i>:
 8010c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c0c:	7e0f      	ldrb	r7, [r1, #24]
 8010c0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010c10:	2f78      	cmp	r7, #120	@ 0x78
 8010c12:	4691      	mov	r9, r2
 8010c14:	4680      	mov	r8, r0
 8010c16:	460c      	mov	r4, r1
 8010c18:	469a      	mov	sl, r3
 8010c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010c1e:	d807      	bhi.n	8010c30 <_printf_i+0x28>
 8010c20:	2f62      	cmp	r7, #98	@ 0x62
 8010c22:	d80a      	bhi.n	8010c3a <_printf_i+0x32>
 8010c24:	2f00      	cmp	r7, #0
 8010c26:	f000 80d2 	beq.w	8010dce <_printf_i+0x1c6>
 8010c2a:	2f58      	cmp	r7, #88	@ 0x58
 8010c2c:	f000 80b9 	beq.w	8010da2 <_printf_i+0x19a>
 8010c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010c38:	e03a      	b.n	8010cb0 <_printf_i+0xa8>
 8010c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010c3e:	2b15      	cmp	r3, #21
 8010c40:	d8f6      	bhi.n	8010c30 <_printf_i+0x28>
 8010c42:	a101      	add	r1, pc, #4	@ (adr r1, 8010c48 <_printf_i+0x40>)
 8010c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010c48:	08010ca1 	.word	0x08010ca1
 8010c4c:	08010cb5 	.word	0x08010cb5
 8010c50:	08010c31 	.word	0x08010c31
 8010c54:	08010c31 	.word	0x08010c31
 8010c58:	08010c31 	.word	0x08010c31
 8010c5c:	08010c31 	.word	0x08010c31
 8010c60:	08010cb5 	.word	0x08010cb5
 8010c64:	08010c31 	.word	0x08010c31
 8010c68:	08010c31 	.word	0x08010c31
 8010c6c:	08010c31 	.word	0x08010c31
 8010c70:	08010c31 	.word	0x08010c31
 8010c74:	08010db5 	.word	0x08010db5
 8010c78:	08010cdf 	.word	0x08010cdf
 8010c7c:	08010d6f 	.word	0x08010d6f
 8010c80:	08010c31 	.word	0x08010c31
 8010c84:	08010c31 	.word	0x08010c31
 8010c88:	08010dd7 	.word	0x08010dd7
 8010c8c:	08010c31 	.word	0x08010c31
 8010c90:	08010cdf 	.word	0x08010cdf
 8010c94:	08010c31 	.word	0x08010c31
 8010c98:	08010c31 	.word	0x08010c31
 8010c9c:	08010d77 	.word	0x08010d77
 8010ca0:	6833      	ldr	r3, [r6, #0]
 8010ca2:	1d1a      	adds	r2, r3, #4
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	6032      	str	r2, [r6, #0]
 8010ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	e09d      	b.n	8010df0 <_printf_i+0x1e8>
 8010cb4:	6833      	ldr	r3, [r6, #0]
 8010cb6:	6820      	ldr	r0, [r4, #0]
 8010cb8:	1d19      	adds	r1, r3, #4
 8010cba:	6031      	str	r1, [r6, #0]
 8010cbc:	0606      	lsls	r6, r0, #24
 8010cbe:	d501      	bpl.n	8010cc4 <_printf_i+0xbc>
 8010cc0:	681d      	ldr	r5, [r3, #0]
 8010cc2:	e003      	b.n	8010ccc <_printf_i+0xc4>
 8010cc4:	0645      	lsls	r5, r0, #25
 8010cc6:	d5fb      	bpl.n	8010cc0 <_printf_i+0xb8>
 8010cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010ccc:	2d00      	cmp	r5, #0
 8010cce:	da03      	bge.n	8010cd8 <_printf_i+0xd0>
 8010cd0:	232d      	movs	r3, #45	@ 0x2d
 8010cd2:	426d      	negs	r5, r5
 8010cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010cd8:	4859      	ldr	r0, [pc, #356]	@ (8010e40 <_printf_i+0x238>)
 8010cda:	230a      	movs	r3, #10
 8010cdc:	e011      	b.n	8010d02 <_printf_i+0xfa>
 8010cde:	6821      	ldr	r1, [r4, #0]
 8010ce0:	6833      	ldr	r3, [r6, #0]
 8010ce2:	0608      	lsls	r0, r1, #24
 8010ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ce8:	d402      	bmi.n	8010cf0 <_printf_i+0xe8>
 8010cea:	0649      	lsls	r1, r1, #25
 8010cec:	bf48      	it	mi
 8010cee:	b2ad      	uxthmi	r5, r5
 8010cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8010cf2:	4853      	ldr	r0, [pc, #332]	@ (8010e40 <_printf_i+0x238>)
 8010cf4:	6033      	str	r3, [r6, #0]
 8010cf6:	bf14      	ite	ne
 8010cf8:	230a      	movne	r3, #10
 8010cfa:	2308      	moveq	r3, #8
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010d02:	6866      	ldr	r6, [r4, #4]
 8010d04:	60a6      	str	r6, [r4, #8]
 8010d06:	2e00      	cmp	r6, #0
 8010d08:	bfa2      	ittt	ge
 8010d0a:	6821      	ldrge	r1, [r4, #0]
 8010d0c:	f021 0104 	bicge.w	r1, r1, #4
 8010d10:	6021      	strge	r1, [r4, #0]
 8010d12:	b90d      	cbnz	r5, 8010d18 <_printf_i+0x110>
 8010d14:	2e00      	cmp	r6, #0
 8010d16:	d04b      	beq.n	8010db0 <_printf_i+0x1a8>
 8010d18:	4616      	mov	r6, r2
 8010d1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010d1e:	fb03 5711 	mls	r7, r3, r1, r5
 8010d22:	5dc7      	ldrb	r7, [r0, r7]
 8010d24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010d28:	462f      	mov	r7, r5
 8010d2a:	42bb      	cmp	r3, r7
 8010d2c:	460d      	mov	r5, r1
 8010d2e:	d9f4      	bls.n	8010d1a <_printf_i+0x112>
 8010d30:	2b08      	cmp	r3, #8
 8010d32:	d10b      	bne.n	8010d4c <_printf_i+0x144>
 8010d34:	6823      	ldr	r3, [r4, #0]
 8010d36:	07df      	lsls	r7, r3, #31
 8010d38:	d508      	bpl.n	8010d4c <_printf_i+0x144>
 8010d3a:	6923      	ldr	r3, [r4, #16]
 8010d3c:	6861      	ldr	r1, [r4, #4]
 8010d3e:	4299      	cmp	r1, r3
 8010d40:	bfde      	ittt	le
 8010d42:	2330      	movle	r3, #48	@ 0x30
 8010d44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010d48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010d4c:	1b92      	subs	r2, r2, r6
 8010d4e:	6122      	str	r2, [r4, #16]
 8010d50:	f8cd a000 	str.w	sl, [sp]
 8010d54:	464b      	mov	r3, r9
 8010d56:	aa03      	add	r2, sp, #12
 8010d58:	4621      	mov	r1, r4
 8010d5a:	4640      	mov	r0, r8
 8010d5c:	f7ff fee6 	bl	8010b2c <_printf_common>
 8010d60:	3001      	adds	r0, #1
 8010d62:	d14a      	bne.n	8010dfa <_printf_i+0x1f2>
 8010d64:	f04f 30ff 	mov.w	r0, #4294967295
 8010d68:	b004      	add	sp, #16
 8010d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d6e:	6823      	ldr	r3, [r4, #0]
 8010d70:	f043 0320 	orr.w	r3, r3, #32
 8010d74:	6023      	str	r3, [r4, #0]
 8010d76:	4833      	ldr	r0, [pc, #204]	@ (8010e44 <_printf_i+0x23c>)
 8010d78:	2778      	movs	r7, #120	@ 0x78
 8010d7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010d7e:	6823      	ldr	r3, [r4, #0]
 8010d80:	6831      	ldr	r1, [r6, #0]
 8010d82:	061f      	lsls	r7, r3, #24
 8010d84:	f851 5b04 	ldr.w	r5, [r1], #4
 8010d88:	d402      	bmi.n	8010d90 <_printf_i+0x188>
 8010d8a:	065f      	lsls	r7, r3, #25
 8010d8c:	bf48      	it	mi
 8010d8e:	b2ad      	uxthmi	r5, r5
 8010d90:	6031      	str	r1, [r6, #0]
 8010d92:	07d9      	lsls	r1, r3, #31
 8010d94:	bf44      	itt	mi
 8010d96:	f043 0320 	orrmi.w	r3, r3, #32
 8010d9a:	6023      	strmi	r3, [r4, #0]
 8010d9c:	b11d      	cbz	r5, 8010da6 <_printf_i+0x19e>
 8010d9e:	2310      	movs	r3, #16
 8010da0:	e7ac      	b.n	8010cfc <_printf_i+0xf4>
 8010da2:	4827      	ldr	r0, [pc, #156]	@ (8010e40 <_printf_i+0x238>)
 8010da4:	e7e9      	b.n	8010d7a <_printf_i+0x172>
 8010da6:	6823      	ldr	r3, [r4, #0]
 8010da8:	f023 0320 	bic.w	r3, r3, #32
 8010dac:	6023      	str	r3, [r4, #0]
 8010dae:	e7f6      	b.n	8010d9e <_printf_i+0x196>
 8010db0:	4616      	mov	r6, r2
 8010db2:	e7bd      	b.n	8010d30 <_printf_i+0x128>
 8010db4:	6833      	ldr	r3, [r6, #0]
 8010db6:	6825      	ldr	r5, [r4, #0]
 8010db8:	6961      	ldr	r1, [r4, #20]
 8010dba:	1d18      	adds	r0, r3, #4
 8010dbc:	6030      	str	r0, [r6, #0]
 8010dbe:	062e      	lsls	r6, r5, #24
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	d501      	bpl.n	8010dc8 <_printf_i+0x1c0>
 8010dc4:	6019      	str	r1, [r3, #0]
 8010dc6:	e002      	b.n	8010dce <_printf_i+0x1c6>
 8010dc8:	0668      	lsls	r0, r5, #25
 8010dca:	d5fb      	bpl.n	8010dc4 <_printf_i+0x1bc>
 8010dcc:	8019      	strh	r1, [r3, #0]
 8010dce:	2300      	movs	r3, #0
 8010dd0:	6123      	str	r3, [r4, #16]
 8010dd2:	4616      	mov	r6, r2
 8010dd4:	e7bc      	b.n	8010d50 <_printf_i+0x148>
 8010dd6:	6833      	ldr	r3, [r6, #0]
 8010dd8:	1d1a      	adds	r2, r3, #4
 8010dda:	6032      	str	r2, [r6, #0]
 8010ddc:	681e      	ldr	r6, [r3, #0]
 8010dde:	6862      	ldr	r2, [r4, #4]
 8010de0:	2100      	movs	r1, #0
 8010de2:	4630      	mov	r0, r6
 8010de4:	f7ef fa04 	bl	80001f0 <memchr>
 8010de8:	b108      	cbz	r0, 8010dee <_printf_i+0x1e6>
 8010dea:	1b80      	subs	r0, r0, r6
 8010dec:	6060      	str	r0, [r4, #4]
 8010dee:	6863      	ldr	r3, [r4, #4]
 8010df0:	6123      	str	r3, [r4, #16]
 8010df2:	2300      	movs	r3, #0
 8010df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010df8:	e7aa      	b.n	8010d50 <_printf_i+0x148>
 8010dfa:	6923      	ldr	r3, [r4, #16]
 8010dfc:	4632      	mov	r2, r6
 8010dfe:	4649      	mov	r1, r9
 8010e00:	4640      	mov	r0, r8
 8010e02:	47d0      	blx	sl
 8010e04:	3001      	adds	r0, #1
 8010e06:	d0ad      	beq.n	8010d64 <_printf_i+0x15c>
 8010e08:	6823      	ldr	r3, [r4, #0]
 8010e0a:	079b      	lsls	r3, r3, #30
 8010e0c:	d413      	bmi.n	8010e36 <_printf_i+0x22e>
 8010e0e:	68e0      	ldr	r0, [r4, #12]
 8010e10:	9b03      	ldr	r3, [sp, #12]
 8010e12:	4298      	cmp	r0, r3
 8010e14:	bfb8      	it	lt
 8010e16:	4618      	movlt	r0, r3
 8010e18:	e7a6      	b.n	8010d68 <_printf_i+0x160>
 8010e1a:	2301      	movs	r3, #1
 8010e1c:	4632      	mov	r2, r6
 8010e1e:	4649      	mov	r1, r9
 8010e20:	4640      	mov	r0, r8
 8010e22:	47d0      	blx	sl
 8010e24:	3001      	adds	r0, #1
 8010e26:	d09d      	beq.n	8010d64 <_printf_i+0x15c>
 8010e28:	3501      	adds	r5, #1
 8010e2a:	68e3      	ldr	r3, [r4, #12]
 8010e2c:	9903      	ldr	r1, [sp, #12]
 8010e2e:	1a5b      	subs	r3, r3, r1
 8010e30:	42ab      	cmp	r3, r5
 8010e32:	dcf2      	bgt.n	8010e1a <_printf_i+0x212>
 8010e34:	e7eb      	b.n	8010e0e <_printf_i+0x206>
 8010e36:	2500      	movs	r5, #0
 8010e38:	f104 0619 	add.w	r6, r4, #25
 8010e3c:	e7f5      	b.n	8010e2a <_printf_i+0x222>
 8010e3e:	bf00      	nop
 8010e40:	080156d6 	.word	0x080156d6
 8010e44:	080156e7 	.word	0x080156e7

08010e48 <std>:
 8010e48:	2300      	movs	r3, #0
 8010e4a:	b510      	push	{r4, lr}
 8010e4c:	4604      	mov	r4, r0
 8010e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8010e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e56:	6083      	str	r3, [r0, #8]
 8010e58:	8181      	strh	r1, [r0, #12]
 8010e5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8010e5c:	81c2      	strh	r2, [r0, #14]
 8010e5e:	6183      	str	r3, [r0, #24]
 8010e60:	4619      	mov	r1, r3
 8010e62:	2208      	movs	r2, #8
 8010e64:	305c      	adds	r0, #92	@ 0x5c
 8010e66:	f000 f942 	bl	80110ee <memset>
 8010e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010ea0 <std+0x58>)
 8010e6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8010ea4 <std+0x5c>)
 8010e70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010e72:	4b0d      	ldr	r3, [pc, #52]	@ (8010ea8 <std+0x60>)
 8010e74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010e76:	4b0d      	ldr	r3, [pc, #52]	@ (8010eac <std+0x64>)
 8010e78:	6323      	str	r3, [r4, #48]	@ 0x30
 8010e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010eb0 <std+0x68>)
 8010e7c:	6224      	str	r4, [r4, #32]
 8010e7e:	429c      	cmp	r4, r3
 8010e80:	d006      	beq.n	8010e90 <std+0x48>
 8010e82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010e86:	4294      	cmp	r4, r2
 8010e88:	d002      	beq.n	8010e90 <std+0x48>
 8010e8a:	33d0      	adds	r3, #208	@ 0xd0
 8010e8c:	429c      	cmp	r4, r3
 8010e8e:	d105      	bne.n	8010e9c <std+0x54>
 8010e90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e98:	f000 b9c8 	b.w	801122c <__retarget_lock_init_recursive>
 8010e9c:	bd10      	pop	{r4, pc}
 8010e9e:	bf00      	nop
 8010ea0:	08011035 	.word	0x08011035
 8010ea4:	08011057 	.word	0x08011057
 8010ea8:	0801108f 	.word	0x0801108f
 8010eac:	080110b3 	.word	0x080110b3
 8010eb0:	20001fcc 	.word	0x20001fcc

08010eb4 <stdio_exit_handler>:
 8010eb4:	4a02      	ldr	r2, [pc, #8]	@ (8010ec0 <stdio_exit_handler+0xc>)
 8010eb6:	4903      	ldr	r1, [pc, #12]	@ (8010ec4 <stdio_exit_handler+0x10>)
 8010eb8:	4803      	ldr	r0, [pc, #12]	@ (8010ec8 <stdio_exit_handler+0x14>)
 8010eba:	f000 b869 	b.w	8010f90 <_fwalk_sglue>
 8010ebe:	bf00      	nop
 8010ec0:	200000c4 	.word	0x200000c4
 8010ec4:	08012a49 	.word	0x08012a49
 8010ec8:	200000d4 	.word	0x200000d4

08010ecc <cleanup_stdio>:
 8010ecc:	6841      	ldr	r1, [r0, #4]
 8010ece:	4b0c      	ldr	r3, [pc, #48]	@ (8010f00 <cleanup_stdio+0x34>)
 8010ed0:	4299      	cmp	r1, r3
 8010ed2:	b510      	push	{r4, lr}
 8010ed4:	4604      	mov	r4, r0
 8010ed6:	d001      	beq.n	8010edc <cleanup_stdio+0x10>
 8010ed8:	f001 fdb6 	bl	8012a48 <_fflush_r>
 8010edc:	68a1      	ldr	r1, [r4, #8]
 8010ede:	4b09      	ldr	r3, [pc, #36]	@ (8010f04 <cleanup_stdio+0x38>)
 8010ee0:	4299      	cmp	r1, r3
 8010ee2:	d002      	beq.n	8010eea <cleanup_stdio+0x1e>
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f001 fdaf 	bl	8012a48 <_fflush_r>
 8010eea:	68e1      	ldr	r1, [r4, #12]
 8010eec:	4b06      	ldr	r3, [pc, #24]	@ (8010f08 <cleanup_stdio+0x3c>)
 8010eee:	4299      	cmp	r1, r3
 8010ef0:	d004      	beq.n	8010efc <cleanup_stdio+0x30>
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ef8:	f001 bda6 	b.w	8012a48 <_fflush_r>
 8010efc:	bd10      	pop	{r4, pc}
 8010efe:	bf00      	nop
 8010f00:	20001fcc 	.word	0x20001fcc
 8010f04:	20002034 	.word	0x20002034
 8010f08:	2000209c 	.word	0x2000209c

08010f0c <global_stdio_init.part.0>:
 8010f0c:	b510      	push	{r4, lr}
 8010f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8010f3c <global_stdio_init.part.0+0x30>)
 8010f10:	4c0b      	ldr	r4, [pc, #44]	@ (8010f40 <global_stdio_init.part.0+0x34>)
 8010f12:	4a0c      	ldr	r2, [pc, #48]	@ (8010f44 <global_stdio_init.part.0+0x38>)
 8010f14:	601a      	str	r2, [r3, #0]
 8010f16:	4620      	mov	r0, r4
 8010f18:	2200      	movs	r2, #0
 8010f1a:	2104      	movs	r1, #4
 8010f1c:	f7ff ff94 	bl	8010e48 <std>
 8010f20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010f24:	2201      	movs	r2, #1
 8010f26:	2109      	movs	r1, #9
 8010f28:	f7ff ff8e 	bl	8010e48 <std>
 8010f2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010f30:	2202      	movs	r2, #2
 8010f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f36:	2112      	movs	r1, #18
 8010f38:	f7ff bf86 	b.w	8010e48 <std>
 8010f3c:	20002104 	.word	0x20002104
 8010f40:	20001fcc 	.word	0x20001fcc
 8010f44:	08010eb5 	.word	0x08010eb5

08010f48 <__sfp_lock_acquire>:
 8010f48:	4801      	ldr	r0, [pc, #4]	@ (8010f50 <__sfp_lock_acquire+0x8>)
 8010f4a:	f000 b970 	b.w	801122e <__retarget_lock_acquire_recursive>
 8010f4e:	bf00      	nop
 8010f50:	2000210d 	.word	0x2000210d

08010f54 <__sfp_lock_release>:
 8010f54:	4801      	ldr	r0, [pc, #4]	@ (8010f5c <__sfp_lock_release+0x8>)
 8010f56:	f000 b96b 	b.w	8011230 <__retarget_lock_release_recursive>
 8010f5a:	bf00      	nop
 8010f5c:	2000210d 	.word	0x2000210d

08010f60 <__sinit>:
 8010f60:	b510      	push	{r4, lr}
 8010f62:	4604      	mov	r4, r0
 8010f64:	f7ff fff0 	bl	8010f48 <__sfp_lock_acquire>
 8010f68:	6a23      	ldr	r3, [r4, #32]
 8010f6a:	b11b      	cbz	r3, 8010f74 <__sinit+0x14>
 8010f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f70:	f7ff bff0 	b.w	8010f54 <__sfp_lock_release>
 8010f74:	4b04      	ldr	r3, [pc, #16]	@ (8010f88 <__sinit+0x28>)
 8010f76:	6223      	str	r3, [r4, #32]
 8010f78:	4b04      	ldr	r3, [pc, #16]	@ (8010f8c <__sinit+0x2c>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d1f5      	bne.n	8010f6c <__sinit+0xc>
 8010f80:	f7ff ffc4 	bl	8010f0c <global_stdio_init.part.0>
 8010f84:	e7f2      	b.n	8010f6c <__sinit+0xc>
 8010f86:	bf00      	nop
 8010f88:	08010ecd 	.word	0x08010ecd
 8010f8c:	20002104 	.word	0x20002104

08010f90 <_fwalk_sglue>:
 8010f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f94:	4607      	mov	r7, r0
 8010f96:	4688      	mov	r8, r1
 8010f98:	4614      	mov	r4, r2
 8010f9a:	2600      	movs	r6, #0
 8010f9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010fa0:	f1b9 0901 	subs.w	r9, r9, #1
 8010fa4:	d505      	bpl.n	8010fb2 <_fwalk_sglue+0x22>
 8010fa6:	6824      	ldr	r4, [r4, #0]
 8010fa8:	2c00      	cmp	r4, #0
 8010faa:	d1f7      	bne.n	8010f9c <_fwalk_sglue+0xc>
 8010fac:	4630      	mov	r0, r6
 8010fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fb2:	89ab      	ldrh	r3, [r5, #12]
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d907      	bls.n	8010fc8 <_fwalk_sglue+0x38>
 8010fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	d003      	beq.n	8010fc8 <_fwalk_sglue+0x38>
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	4638      	mov	r0, r7
 8010fc4:	47c0      	blx	r8
 8010fc6:	4306      	orrs	r6, r0
 8010fc8:	3568      	adds	r5, #104	@ 0x68
 8010fca:	e7e9      	b.n	8010fa0 <_fwalk_sglue+0x10>

08010fcc <sniprintf>:
 8010fcc:	b40c      	push	{r2, r3}
 8010fce:	b530      	push	{r4, r5, lr}
 8010fd0:	4b17      	ldr	r3, [pc, #92]	@ (8011030 <sniprintf+0x64>)
 8010fd2:	1e0c      	subs	r4, r1, #0
 8010fd4:	681d      	ldr	r5, [r3, #0]
 8010fd6:	b09d      	sub	sp, #116	@ 0x74
 8010fd8:	da08      	bge.n	8010fec <sniprintf+0x20>
 8010fda:	238b      	movs	r3, #139	@ 0x8b
 8010fdc:	602b      	str	r3, [r5, #0]
 8010fde:	f04f 30ff 	mov.w	r0, #4294967295
 8010fe2:	b01d      	add	sp, #116	@ 0x74
 8010fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fe8:	b002      	add	sp, #8
 8010fea:	4770      	bx	lr
 8010fec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010ff4:	bf14      	ite	ne
 8010ff6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010ffa:	4623      	moveq	r3, r4
 8010ffc:	9304      	str	r3, [sp, #16]
 8010ffe:	9307      	str	r3, [sp, #28]
 8011000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011004:	9002      	str	r0, [sp, #8]
 8011006:	9006      	str	r0, [sp, #24]
 8011008:	f8ad 3016 	strh.w	r3, [sp, #22]
 801100c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801100e:	ab21      	add	r3, sp, #132	@ 0x84
 8011010:	a902      	add	r1, sp, #8
 8011012:	4628      	mov	r0, r5
 8011014:	9301      	str	r3, [sp, #4]
 8011016:	f001 fb97 	bl	8012748 <_svfiprintf_r>
 801101a:	1c43      	adds	r3, r0, #1
 801101c:	bfbc      	itt	lt
 801101e:	238b      	movlt	r3, #139	@ 0x8b
 8011020:	602b      	strlt	r3, [r5, #0]
 8011022:	2c00      	cmp	r4, #0
 8011024:	d0dd      	beq.n	8010fe2 <sniprintf+0x16>
 8011026:	9b02      	ldr	r3, [sp, #8]
 8011028:	2200      	movs	r2, #0
 801102a:	701a      	strb	r2, [r3, #0]
 801102c:	e7d9      	b.n	8010fe2 <sniprintf+0x16>
 801102e:	bf00      	nop
 8011030:	200000d0 	.word	0x200000d0

08011034 <__sread>:
 8011034:	b510      	push	{r4, lr}
 8011036:	460c      	mov	r4, r1
 8011038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801103c:	f000 f898 	bl	8011170 <_read_r>
 8011040:	2800      	cmp	r0, #0
 8011042:	bfab      	itete	ge
 8011044:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011046:	89a3      	ldrhlt	r3, [r4, #12]
 8011048:	181b      	addge	r3, r3, r0
 801104a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801104e:	bfac      	ite	ge
 8011050:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011052:	81a3      	strhlt	r3, [r4, #12]
 8011054:	bd10      	pop	{r4, pc}

08011056 <__swrite>:
 8011056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801105a:	461f      	mov	r7, r3
 801105c:	898b      	ldrh	r3, [r1, #12]
 801105e:	05db      	lsls	r3, r3, #23
 8011060:	4605      	mov	r5, r0
 8011062:	460c      	mov	r4, r1
 8011064:	4616      	mov	r6, r2
 8011066:	d505      	bpl.n	8011074 <__swrite+0x1e>
 8011068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801106c:	2302      	movs	r3, #2
 801106e:	2200      	movs	r2, #0
 8011070:	f000 f86c 	bl	801114c <_lseek_r>
 8011074:	89a3      	ldrh	r3, [r4, #12]
 8011076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801107a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801107e:	81a3      	strh	r3, [r4, #12]
 8011080:	4632      	mov	r2, r6
 8011082:	463b      	mov	r3, r7
 8011084:	4628      	mov	r0, r5
 8011086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801108a:	f000 b893 	b.w	80111b4 <_write_r>

0801108e <__sseek>:
 801108e:	b510      	push	{r4, lr}
 8011090:	460c      	mov	r4, r1
 8011092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011096:	f000 f859 	bl	801114c <_lseek_r>
 801109a:	1c43      	adds	r3, r0, #1
 801109c:	89a3      	ldrh	r3, [r4, #12]
 801109e:	bf15      	itete	ne
 80110a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80110a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80110a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80110aa:	81a3      	strheq	r3, [r4, #12]
 80110ac:	bf18      	it	ne
 80110ae:	81a3      	strhne	r3, [r4, #12]
 80110b0:	bd10      	pop	{r4, pc}

080110b2 <__sclose>:
 80110b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110b6:	f000 b839 	b.w	801112c <_close_r>

080110ba <memmove>:
 80110ba:	4288      	cmp	r0, r1
 80110bc:	b510      	push	{r4, lr}
 80110be:	eb01 0402 	add.w	r4, r1, r2
 80110c2:	d902      	bls.n	80110ca <memmove+0x10>
 80110c4:	4284      	cmp	r4, r0
 80110c6:	4623      	mov	r3, r4
 80110c8:	d807      	bhi.n	80110da <memmove+0x20>
 80110ca:	1e43      	subs	r3, r0, #1
 80110cc:	42a1      	cmp	r1, r4
 80110ce:	d008      	beq.n	80110e2 <memmove+0x28>
 80110d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110d8:	e7f8      	b.n	80110cc <memmove+0x12>
 80110da:	4402      	add	r2, r0
 80110dc:	4601      	mov	r1, r0
 80110de:	428a      	cmp	r2, r1
 80110e0:	d100      	bne.n	80110e4 <memmove+0x2a>
 80110e2:	bd10      	pop	{r4, pc}
 80110e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110ec:	e7f7      	b.n	80110de <memmove+0x24>

080110ee <memset>:
 80110ee:	4402      	add	r2, r0
 80110f0:	4603      	mov	r3, r0
 80110f2:	4293      	cmp	r3, r2
 80110f4:	d100      	bne.n	80110f8 <memset+0xa>
 80110f6:	4770      	bx	lr
 80110f8:	f803 1b01 	strb.w	r1, [r3], #1
 80110fc:	e7f9      	b.n	80110f2 <memset+0x4>

080110fe <strncpy>:
 80110fe:	b510      	push	{r4, lr}
 8011100:	3901      	subs	r1, #1
 8011102:	4603      	mov	r3, r0
 8011104:	b132      	cbz	r2, 8011114 <strncpy+0x16>
 8011106:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801110a:	f803 4b01 	strb.w	r4, [r3], #1
 801110e:	3a01      	subs	r2, #1
 8011110:	2c00      	cmp	r4, #0
 8011112:	d1f7      	bne.n	8011104 <strncpy+0x6>
 8011114:	441a      	add	r2, r3
 8011116:	2100      	movs	r1, #0
 8011118:	4293      	cmp	r3, r2
 801111a:	d100      	bne.n	801111e <strncpy+0x20>
 801111c:	bd10      	pop	{r4, pc}
 801111e:	f803 1b01 	strb.w	r1, [r3], #1
 8011122:	e7f9      	b.n	8011118 <strncpy+0x1a>

08011124 <_localeconv_r>:
 8011124:	4800      	ldr	r0, [pc, #0]	@ (8011128 <_localeconv_r+0x4>)
 8011126:	4770      	bx	lr
 8011128:	20000210 	.word	0x20000210

0801112c <_close_r>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	4d06      	ldr	r5, [pc, #24]	@ (8011148 <_close_r+0x1c>)
 8011130:	2300      	movs	r3, #0
 8011132:	4604      	mov	r4, r0
 8011134:	4608      	mov	r0, r1
 8011136:	602b      	str	r3, [r5, #0]
 8011138:	f7f1 fb1a 	bl	8002770 <_close>
 801113c:	1c43      	adds	r3, r0, #1
 801113e:	d102      	bne.n	8011146 <_close_r+0x1a>
 8011140:	682b      	ldr	r3, [r5, #0]
 8011142:	b103      	cbz	r3, 8011146 <_close_r+0x1a>
 8011144:	6023      	str	r3, [r4, #0]
 8011146:	bd38      	pop	{r3, r4, r5, pc}
 8011148:	20002108 	.word	0x20002108

0801114c <_lseek_r>:
 801114c:	b538      	push	{r3, r4, r5, lr}
 801114e:	4d07      	ldr	r5, [pc, #28]	@ (801116c <_lseek_r+0x20>)
 8011150:	4604      	mov	r4, r0
 8011152:	4608      	mov	r0, r1
 8011154:	4611      	mov	r1, r2
 8011156:	2200      	movs	r2, #0
 8011158:	602a      	str	r2, [r5, #0]
 801115a:	461a      	mov	r2, r3
 801115c:	f7f1 fb2f 	bl	80027be <_lseek>
 8011160:	1c43      	adds	r3, r0, #1
 8011162:	d102      	bne.n	801116a <_lseek_r+0x1e>
 8011164:	682b      	ldr	r3, [r5, #0]
 8011166:	b103      	cbz	r3, 801116a <_lseek_r+0x1e>
 8011168:	6023      	str	r3, [r4, #0]
 801116a:	bd38      	pop	{r3, r4, r5, pc}
 801116c:	20002108 	.word	0x20002108

08011170 <_read_r>:
 8011170:	b538      	push	{r3, r4, r5, lr}
 8011172:	4d07      	ldr	r5, [pc, #28]	@ (8011190 <_read_r+0x20>)
 8011174:	4604      	mov	r4, r0
 8011176:	4608      	mov	r0, r1
 8011178:	4611      	mov	r1, r2
 801117a:	2200      	movs	r2, #0
 801117c:	602a      	str	r2, [r5, #0]
 801117e:	461a      	mov	r2, r3
 8011180:	f7f1 fabd 	bl	80026fe <_read>
 8011184:	1c43      	adds	r3, r0, #1
 8011186:	d102      	bne.n	801118e <_read_r+0x1e>
 8011188:	682b      	ldr	r3, [r5, #0]
 801118a:	b103      	cbz	r3, 801118e <_read_r+0x1e>
 801118c:	6023      	str	r3, [r4, #0]
 801118e:	bd38      	pop	{r3, r4, r5, pc}
 8011190:	20002108 	.word	0x20002108

08011194 <_sbrk_r>:
 8011194:	b538      	push	{r3, r4, r5, lr}
 8011196:	4d06      	ldr	r5, [pc, #24]	@ (80111b0 <_sbrk_r+0x1c>)
 8011198:	2300      	movs	r3, #0
 801119a:	4604      	mov	r4, r0
 801119c:	4608      	mov	r0, r1
 801119e:	602b      	str	r3, [r5, #0]
 80111a0:	f7f1 fb1a 	bl	80027d8 <_sbrk>
 80111a4:	1c43      	adds	r3, r0, #1
 80111a6:	d102      	bne.n	80111ae <_sbrk_r+0x1a>
 80111a8:	682b      	ldr	r3, [r5, #0]
 80111aa:	b103      	cbz	r3, 80111ae <_sbrk_r+0x1a>
 80111ac:	6023      	str	r3, [r4, #0]
 80111ae:	bd38      	pop	{r3, r4, r5, pc}
 80111b0:	20002108 	.word	0x20002108

080111b4 <_write_r>:
 80111b4:	b538      	push	{r3, r4, r5, lr}
 80111b6:	4d07      	ldr	r5, [pc, #28]	@ (80111d4 <_write_r+0x20>)
 80111b8:	4604      	mov	r4, r0
 80111ba:	4608      	mov	r0, r1
 80111bc:	4611      	mov	r1, r2
 80111be:	2200      	movs	r2, #0
 80111c0:	602a      	str	r2, [r5, #0]
 80111c2:	461a      	mov	r2, r3
 80111c4:	f7f1 fab8 	bl	8002738 <_write>
 80111c8:	1c43      	adds	r3, r0, #1
 80111ca:	d102      	bne.n	80111d2 <_write_r+0x1e>
 80111cc:	682b      	ldr	r3, [r5, #0]
 80111ce:	b103      	cbz	r3, 80111d2 <_write_r+0x1e>
 80111d0:	6023      	str	r3, [r4, #0]
 80111d2:	bd38      	pop	{r3, r4, r5, pc}
 80111d4:	20002108 	.word	0x20002108

080111d8 <__errno>:
 80111d8:	4b01      	ldr	r3, [pc, #4]	@ (80111e0 <__errno+0x8>)
 80111da:	6818      	ldr	r0, [r3, #0]
 80111dc:	4770      	bx	lr
 80111de:	bf00      	nop
 80111e0:	200000d0 	.word	0x200000d0

080111e4 <__libc_init_array>:
 80111e4:	b570      	push	{r4, r5, r6, lr}
 80111e6:	4d0d      	ldr	r5, [pc, #52]	@ (801121c <__libc_init_array+0x38>)
 80111e8:	4c0d      	ldr	r4, [pc, #52]	@ (8011220 <__libc_init_array+0x3c>)
 80111ea:	1b64      	subs	r4, r4, r5
 80111ec:	10a4      	asrs	r4, r4, #2
 80111ee:	2600      	movs	r6, #0
 80111f0:	42a6      	cmp	r6, r4
 80111f2:	d109      	bne.n	8011208 <__libc_init_array+0x24>
 80111f4:	4d0b      	ldr	r5, [pc, #44]	@ (8011224 <__libc_init_array+0x40>)
 80111f6:	4c0c      	ldr	r4, [pc, #48]	@ (8011228 <__libc_init_array+0x44>)
 80111f8:	f001 ff8c 	bl	8013114 <_init>
 80111fc:	1b64      	subs	r4, r4, r5
 80111fe:	10a4      	asrs	r4, r4, #2
 8011200:	2600      	movs	r6, #0
 8011202:	42a6      	cmp	r6, r4
 8011204:	d105      	bne.n	8011212 <__libc_init_array+0x2e>
 8011206:	bd70      	pop	{r4, r5, r6, pc}
 8011208:	f855 3b04 	ldr.w	r3, [r5], #4
 801120c:	4798      	blx	r3
 801120e:	3601      	adds	r6, #1
 8011210:	e7ee      	b.n	80111f0 <__libc_init_array+0xc>
 8011212:	f855 3b04 	ldr.w	r3, [r5], #4
 8011216:	4798      	blx	r3
 8011218:	3601      	adds	r6, #1
 801121a:	e7f2      	b.n	8011202 <__libc_init_array+0x1e>
 801121c:	08015a40 	.word	0x08015a40
 8011220:	08015a40 	.word	0x08015a40
 8011224:	08015a40 	.word	0x08015a40
 8011228:	08015a44 	.word	0x08015a44

0801122c <__retarget_lock_init_recursive>:
 801122c:	4770      	bx	lr

0801122e <__retarget_lock_acquire_recursive>:
 801122e:	4770      	bx	lr

08011230 <__retarget_lock_release_recursive>:
 8011230:	4770      	bx	lr

08011232 <strcpy>:
 8011232:	4603      	mov	r3, r0
 8011234:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011238:	f803 2b01 	strb.w	r2, [r3], #1
 801123c:	2a00      	cmp	r2, #0
 801123e:	d1f9      	bne.n	8011234 <strcpy+0x2>
 8011240:	4770      	bx	lr

08011242 <memcpy>:
 8011242:	440a      	add	r2, r1
 8011244:	4291      	cmp	r1, r2
 8011246:	f100 33ff 	add.w	r3, r0, #4294967295
 801124a:	d100      	bne.n	801124e <memcpy+0xc>
 801124c:	4770      	bx	lr
 801124e:	b510      	push	{r4, lr}
 8011250:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011258:	4291      	cmp	r1, r2
 801125a:	d1f9      	bne.n	8011250 <memcpy+0xe>
 801125c:	bd10      	pop	{r4, pc}

0801125e <quorem>:
 801125e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011262:	6903      	ldr	r3, [r0, #16]
 8011264:	690c      	ldr	r4, [r1, #16]
 8011266:	42a3      	cmp	r3, r4
 8011268:	4607      	mov	r7, r0
 801126a:	db7e      	blt.n	801136a <quorem+0x10c>
 801126c:	3c01      	subs	r4, #1
 801126e:	f101 0814 	add.w	r8, r1, #20
 8011272:	00a3      	lsls	r3, r4, #2
 8011274:	f100 0514 	add.w	r5, r0, #20
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801127e:	9301      	str	r3, [sp, #4]
 8011280:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011288:	3301      	adds	r3, #1
 801128a:	429a      	cmp	r2, r3
 801128c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011290:	fbb2 f6f3 	udiv	r6, r2, r3
 8011294:	d32e      	bcc.n	80112f4 <quorem+0x96>
 8011296:	f04f 0a00 	mov.w	sl, #0
 801129a:	46c4      	mov	ip, r8
 801129c:	46ae      	mov	lr, r5
 801129e:	46d3      	mov	fp, sl
 80112a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80112a4:	b298      	uxth	r0, r3
 80112a6:	fb06 a000 	mla	r0, r6, r0, sl
 80112aa:	0c02      	lsrs	r2, r0, #16
 80112ac:	0c1b      	lsrs	r3, r3, #16
 80112ae:	fb06 2303 	mla	r3, r6, r3, r2
 80112b2:	f8de 2000 	ldr.w	r2, [lr]
 80112b6:	b280      	uxth	r0, r0
 80112b8:	b292      	uxth	r2, r2
 80112ba:	1a12      	subs	r2, r2, r0
 80112bc:	445a      	add	r2, fp
 80112be:	f8de 0000 	ldr.w	r0, [lr]
 80112c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80112cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80112d0:	b292      	uxth	r2, r2
 80112d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80112d6:	45e1      	cmp	r9, ip
 80112d8:	f84e 2b04 	str.w	r2, [lr], #4
 80112dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80112e0:	d2de      	bcs.n	80112a0 <quorem+0x42>
 80112e2:	9b00      	ldr	r3, [sp, #0]
 80112e4:	58eb      	ldr	r3, [r5, r3]
 80112e6:	b92b      	cbnz	r3, 80112f4 <quorem+0x96>
 80112e8:	9b01      	ldr	r3, [sp, #4]
 80112ea:	3b04      	subs	r3, #4
 80112ec:	429d      	cmp	r5, r3
 80112ee:	461a      	mov	r2, r3
 80112f0:	d32f      	bcc.n	8011352 <quorem+0xf4>
 80112f2:	613c      	str	r4, [r7, #16]
 80112f4:	4638      	mov	r0, r7
 80112f6:	f001 f8c3 	bl	8012480 <__mcmp>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	db25      	blt.n	801134a <quorem+0xec>
 80112fe:	4629      	mov	r1, r5
 8011300:	2000      	movs	r0, #0
 8011302:	f858 2b04 	ldr.w	r2, [r8], #4
 8011306:	f8d1 c000 	ldr.w	ip, [r1]
 801130a:	fa1f fe82 	uxth.w	lr, r2
 801130e:	fa1f f38c 	uxth.w	r3, ip
 8011312:	eba3 030e 	sub.w	r3, r3, lr
 8011316:	4403      	add	r3, r0
 8011318:	0c12      	lsrs	r2, r2, #16
 801131a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801131e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011322:	b29b      	uxth	r3, r3
 8011324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011328:	45c1      	cmp	r9, r8
 801132a:	f841 3b04 	str.w	r3, [r1], #4
 801132e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011332:	d2e6      	bcs.n	8011302 <quorem+0xa4>
 8011334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011338:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801133c:	b922      	cbnz	r2, 8011348 <quorem+0xea>
 801133e:	3b04      	subs	r3, #4
 8011340:	429d      	cmp	r5, r3
 8011342:	461a      	mov	r2, r3
 8011344:	d30b      	bcc.n	801135e <quorem+0x100>
 8011346:	613c      	str	r4, [r7, #16]
 8011348:	3601      	adds	r6, #1
 801134a:	4630      	mov	r0, r6
 801134c:	b003      	add	sp, #12
 801134e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011352:	6812      	ldr	r2, [r2, #0]
 8011354:	3b04      	subs	r3, #4
 8011356:	2a00      	cmp	r2, #0
 8011358:	d1cb      	bne.n	80112f2 <quorem+0x94>
 801135a:	3c01      	subs	r4, #1
 801135c:	e7c6      	b.n	80112ec <quorem+0x8e>
 801135e:	6812      	ldr	r2, [r2, #0]
 8011360:	3b04      	subs	r3, #4
 8011362:	2a00      	cmp	r2, #0
 8011364:	d1ef      	bne.n	8011346 <quorem+0xe8>
 8011366:	3c01      	subs	r4, #1
 8011368:	e7ea      	b.n	8011340 <quorem+0xe2>
 801136a:	2000      	movs	r0, #0
 801136c:	e7ee      	b.n	801134c <quorem+0xee>
	...

08011370 <_dtoa_r>:
 8011370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011374:	69c7      	ldr	r7, [r0, #28]
 8011376:	b099      	sub	sp, #100	@ 0x64
 8011378:	ed8d 0b02 	vstr	d0, [sp, #8]
 801137c:	ec55 4b10 	vmov	r4, r5, d0
 8011380:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011382:	9109      	str	r1, [sp, #36]	@ 0x24
 8011384:	4683      	mov	fp, r0
 8011386:	920e      	str	r2, [sp, #56]	@ 0x38
 8011388:	9313      	str	r3, [sp, #76]	@ 0x4c
 801138a:	b97f      	cbnz	r7, 80113ac <_dtoa_r+0x3c>
 801138c:	2010      	movs	r0, #16
 801138e:	f7ff f845 	bl	801041c <malloc>
 8011392:	4602      	mov	r2, r0
 8011394:	f8cb 001c 	str.w	r0, [fp, #28]
 8011398:	b920      	cbnz	r0, 80113a4 <_dtoa_r+0x34>
 801139a:	4ba7      	ldr	r3, [pc, #668]	@ (8011638 <_dtoa_r+0x2c8>)
 801139c:	21ef      	movs	r1, #239	@ 0xef
 801139e:	48a7      	ldr	r0, [pc, #668]	@ (801163c <_dtoa_r+0x2cc>)
 80113a0:	f001 fb7a 	bl	8012a98 <__assert_func>
 80113a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80113a8:	6007      	str	r7, [r0, #0]
 80113aa:	60c7      	str	r7, [r0, #12]
 80113ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80113b0:	6819      	ldr	r1, [r3, #0]
 80113b2:	b159      	cbz	r1, 80113cc <_dtoa_r+0x5c>
 80113b4:	685a      	ldr	r2, [r3, #4]
 80113b6:	604a      	str	r2, [r1, #4]
 80113b8:	2301      	movs	r3, #1
 80113ba:	4093      	lsls	r3, r2
 80113bc:	608b      	str	r3, [r1, #8]
 80113be:	4658      	mov	r0, fp
 80113c0:	f000 fe24 	bl	801200c <_Bfree>
 80113c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80113c8:	2200      	movs	r2, #0
 80113ca:	601a      	str	r2, [r3, #0]
 80113cc:	1e2b      	subs	r3, r5, #0
 80113ce:	bfb9      	ittee	lt
 80113d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80113d4:	9303      	strlt	r3, [sp, #12]
 80113d6:	2300      	movge	r3, #0
 80113d8:	6033      	strge	r3, [r6, #0]
 80113da:	9f03      	ldr	r7, [sp, #12]
 80113dc:	4b98      	ldr	r3, [pc, #608]	@ (8011640 <_dtoa_r+0x2d0>)
 80113de:	bfbc      	itt	lt
 80113e0:	2201      	movlt	r2, #1
 80113e2:	6032      	strlt	r2, [r6, #0]
 80113e4:	43bb      	bics	r3, r7
 80113e6:	d112      	bne.n	801140e <_dtoa_r+0x9e>
 80113e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80113ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80113ee:	6013      	str	r3, [r2, #0]
 80113f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80113f4:	4323      	orrs	r3, r4
 80113f6:	f000 854d 	beq.w	8011e94 <_dtoa_r+0xb24>
 80113fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80113fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011654 <_dtoa_r+0x2e4>
 8011400:	2b00      	cmp	r3, #0
 8011402:	f000 854f 	beq.w	8011ea4 <_dtoa_r+0xb34>
 8011406:	f10a 0303 	add.w	r3, sl, #3
 801140a:	f000 bd49 	b.w	8011ea0 <_dtoa_r+0xb30>
 801140e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011412:	2200      	movs	r2, #0
 8011414:	ec51 0b17 	vmov	r0, r1, d7
 8011418:	2300      	movs	r3, #0
 801141a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801141e:	f7ef fb63 	bl	8000ae8 <__aeabi_dcmpeq>
 8011422:	4680      	mov	r8, r0
 8011424:	b158      	cbz	r0, 801143e <_dtoa_r+0xce>
 8011426:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011428:	2301      	movs	r3, #1
 801142a:	6013      	str	r3, [r2, #0]
 801142c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801142e:	b113      	cbz	r3, 8011436 <_dtoa_r+0xc6>
 8011430:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011432:	4b84      	ldr	r3, [pc, #528]	@ (8011644 <_dtoa_r+0x2d4>)
 8011434:	6013      	str	r3, [r2, #0]
 8011436:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011658 <_dtoa_r+0x2e8>
 801143a:	f000 bd33 	b.w	8011ea4 <_dtoa_r+0xb34>
 801143e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011442:	aa16      	add	r2, sp, #88	@ 0x58
 8011444:	a917      	add	r1, sp, #92	@ 0x5c
 8011446:	4658      	mov	r0, fp
 8011448:	f001 f8ca 	bl	80125e0 <__d2b>
 801144c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011450:	4681      	mov	r9, r0
 8011452:	2e00      	cmp	r6, #0
 8011454:	d077      	beq.n	8011546 <_dtoa_r+0x1d6>
 8011456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011458:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801145c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011464:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011468:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801146c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011470:	4619      	mov	r1, r3
 8011472:	2200      	movs	r2, #0
 8011474:	4b74      	ldr	r3, [pc, #464]	@ (8011648 <_dtoa_r+0x2d8>)
 8011476:	f7ee ff17 	bl	80002a8 <__aeabi_dsub>
 801147a:	a369      	add	r3, pc, #420	@ (adr r3, 8011620 <_dtoa_r+0x2b0>)
 801147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011480:	f7ef f8ca 	bl	8000618 <__aeabi_dmul>
 8011484:	a368      	add	r3, pc, #416	@ (adr r3, 8011628 <_dtoa_r+0x2b8>)
 8011486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148a:	f7ee ff0f 	bl	80002ac <__adddf3>
 801148e:	4604      	mov	r4, r0
 8011490:	4630      	mov	r0, r6
 8011492:	460d      	mov	r5, r1
 8011494:	f7ef f856 	bl	8000544 <__aeabi_i2d>
 8011498:	a365      	add	r3, pc, #404	@ (adr r3, 8011630 <_dtoa_r+0x2c0>)
 801149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149e:	f7ef f8bb 	bl	8000618 <__aeabi_dmul>
 80114a2:	4602      	mov	r2, r0
 80114a4:	460b      	mov	r3, r1
 80114a6:	4620      	mov	r0, r4
 80114a8:	4629      	mov	r1, r5
 80114aa:	f7ee feff 	bl	80002ac <__adddf3>
 80114ae:	4604      	mov	r4, r0
 80114b0:	460d      	mov	r5, r1
 80114b2:	f7ef fb61 	bl	8000b78 <__aeabi_d2iz>
 80114b6:	2200      	movs	r2, #0
 80114b8:	4607      	mov	r7, r0
 80114ba:	2300      	movs	r3, #0
 80114bc:	4620      	mov	r0, r4
 80114be:	4629      	mov	r1, r5
 80114c0:	f7ef fb1c 	bl	8000afc <__aeabi_dcmplt>
 80114c4:	b140      	cbz	r0, 80114d8 <_dtoa_r+0x168>
 80114c6:	4638      	mov	r0, r7
 80114c8:	f7ef f83c 	bl	8000544 <__aeabi_i2d>
 80114cc:	4622      	mov	r2, r4
 80114ce:	462b      	mov	r3, r5
 80114d0:	f7ef fb0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80114d4:	b900      	cbnz	r0, 80114d8 <_dtoa_r+0x168>
 80114d6:	3f01      	subs	r7, #1
 80114d8:	2f16      	cmp	r7, #22
 80114da:	d851      	bhi.n	8011580 <_dtoa_r+0x210>
 80114dc:	4b5b      	ldr	r3, [pc, #364]	@ (801164c <_dtoa_r+0x2dc>)
 80114de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80114e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114ea:	f7ef fb07 	bl	8000afc <__aeabi_dcmplt>
 80114ee:	2800      	cmp	r0, #0
 80114f0:	d048      	beq.n	8011584 <_dtoa_r+0x214>
 80114f2:	3f01      	subs	r7, #1
 80114f4:	2300      	movs	r3, #0
 80114f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80114f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80114fa:	1b9b      	subs	r3, r3, r6
 80114fc:	1e5a      	subs	r2, r3, #1
 80114fe:	bf44      	itt	mi
 8011500:	f1c3 0801 	rsbmi	r8, r3, #1
 8011504:	2300      	movmi	r3, #0
 8011506:	9208      	str	r2, [sp, #32]
 8011508:	bf54      	ite	pl
 801150a:	f04f 0800 	movpl.w	r8, #0
 801150e:	9308      	strmi	r3, [sp, #32]
 8011510:	2f00      	cmp	r7, #0
 8011512:	db39      	blt.n	8011588 <_dtoa_r+0x218>
 8011514:	9b08      	ldr	r3, [sp, #32]
 8011516:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011518:	443b      	add	r3, r7
 801151a:	9308      	str	r3, [sp, #32]
 801151c:	2300      	movs	r3, #0
 801151e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011522:	2b09      	cmp	r3, #9
 8011524:	d864      	bhi.n	80115f0 <_dtoa_r+0x280>
 8011526:	2b05      	cmp	r3, #5
 8011528:	bfc4      	itt	gt
 801152a:	3b04      	subgt	r3, #4
 801152c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801152e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011530:	f1a3 0302 	sub.w	r3, r3, #2
 8011534:	bfcc      	ite	gt
 8011536:	2400      	movgt	r4, #0
 8011538:	2401      	movle	r4, #1
 801153a:	2b03      	cmp	r3, #3
 801153c:	d863      	bhi.n	8011606 <_dtoa_r+0x296>
 801153e:	e8df f003 	tbb	[pc, r3]
 8011542:	372a      	.short	0x372a
 8011544:	5535      	.short	0x5535
 8011546:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801154a:	441e      	add	r6, r3
 801154c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011550:	2b20      	cmp	r3, #32
 8011552:	bfc1      	itttt	gt
 8011554:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011558:	409f      	lslgt	r7, r3
 801155a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801155e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011562:	bfd6      	itet	le
 8011564:	f1c3 0320 	rsble	r3, r3, #32
 8011568:	ea47 0003 	orrgt.w	r0, r7, r3
 801156c:	fa04 f003 	lslle.w	r0, r4, r3
 8011570:	f7ee ffd8 	bl	8000524 <__aeabi_ui2d>
 8011574:	2201      	movs	r2, #1
 8011576:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801157a:	3e01      	subs	r6, #1
 801157c:	9214      	str	r2, [sp, #80]	@ 0x50
 801157e:	e777      	b.n	8011470 <_dtoa_r+0x100>
 8011580:	2301      	movs	r3, #1
 8011582:	e7b8      	b.n	80114f6 <_dtoa_r+0x186>
 8011584:	9012      	str	r0, [sp, #72]	@ 0x48
 8011586:	e7b7      	b.n	80114f8 <_dtoa_r+0x188>
 8011588:	427b      	negs	r3, r7
 801158a:	930a      	str	r3, [sp, #40]	@ 0x28
 801158c:	2300      	movs	r3, #0
 801158e:	eba8 0807 	sub.w	r8, r8, r7
 8011592:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011594:	e7c4      	b.n	8011520 <_dtoa_r+0x1b0>
 8011596:	2300      	movs	r3, #0
 8011598:	930b      	str	r3, [sp, #44]	@ 0x2c
 801159a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801159c:	2b00      	cmp	r3, #0
 801159e:	dc35      	bgt.n	801160c <_dtoa_r+0x29c>
 80115a0:	2301      	movs	r3, #1
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	9307      	str	r3, [sp, #28]
 80115a6:	461a      	mov	r2, r3
 80115a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80115aa:	e00b      	b.n	80115c4 <_dtoa_r+0x254>
 80115ac:	2301      	movs	r3, #1
 80115ae:	e7f3      	b.n	8011598 <_dtoa_r+0x228>
 80115b0:	2300      	movs	r3, #0
 80115b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80115b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115b6:	18fb      	adds	r3, r7, r3
 80115b8:	9300      	str	r3, [sp, #0]
 80115ba:	3301      	adds	r3, #1
 80115bc:	2b01      	cmp	r3, #1
 80115be:	9307      	str	r3, [sp, #28]
 80115c0:	bfb8      	it	lt
 80115c2:	2301      	movlt	r3, #1
 80115c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80115c8:	2100      	movs	r1, #0
 80115ca:	2204      	movs	r2, #4
 80115cc:	f102 0514 	add.w	r5, r2, #20
 80115d0:	429d      	cmp	r5, r3
 80115d2:	d91f      	bls.n	8011614 <_dtoa_r+0x2a4>
 80115d4:	6041      	str	r1, [r0, #4]
 80115d6:	4658      	mov	r0, fp
 80115d8:	f000 fcd8 	bl	8011f8c <_Balloc>
 80115dc:	4682      	mov	sl, r0
 80115de:	2800      	cmp	r0, #0
 80115e0:	d13c      	bne.n	801165c <_dtoa_r+0x2ec>
 80115e2:	4b1b      	ldr	r3, [pc, #108]	@ (8011650 <_dtoa_r+0x2e0>)
 80115e4:	4602      	mov	r2, r0
 80115e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80115ea:	e6d8      	b.n	801139e <_dtoa_r+0x2e>
 80115ec:	2301      	movs	r3, #1
 80115ee:	e7e0      	b.n	80115b2 <_dtoa_r+0x242>
 80115f0:	2401      	movs	r4, #1
 80115f2:	2300      	movs	r3, #0
 80115f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80115f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80115f8:	f04f 33ff 	mov.w	r3, #4294967295
 80115fc:	9300      	str	r3, [sp, #0]
 80115fe:	9307      	str	r3, [sp, #28]
 8011600:	2200      	movs	r2, #0
 8011602:	2312      	movs	r3, #18
 8011604:	e7d0      	b.n	80115a8 <_dtoa_r+0x238>
 8011606:	2301      	movs	r3, #1
 8011608:	930b      	str	r3, [sp, #44]	@ 0x2c
 801160a:	e7f5      	b.n	80115f8 <_dtoa_r+0x288>
 801160c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801160e:	9300      	str	r3, [sp, #0]
 8011610:	9307      	str	r3, [sp, #28]
 8011612:	e7d7      	b.n	80115c4 <_dtoa_r+0x254>
 8011614:	3101      	adds	r1, #1
 8011616:	0052      	lsls	r2, r2, #1
 8011618:	e7d8      	b.n	80115cc <_dtoa_r+0x25c>
 801161a:	bf00      	nop
 801161c:	f3af 8000 	nop.w
 8011620:	636f4361 	.word	0x636f4361
 8011624:	3fd287a7 	.word	0x3fd287a7
 8011628:	8b60c8b3 	.word	0x8b60c8b3
 801162c:	3fc68a28 	.word	0x3fc68a28
 8011630:	509f79fb 	.word	0x509f79fb
 8011634:	3fd34413 	.word	0x3fd34413
 8011638:	08015705 	.word	0x08015705
 801163c:	0801571c 	.word	0x0801571c
 8011640:	7ff00000 	.word	0x7ff00000
 8011644:	080156d5 	.word	0x080156d5
 8011648:	3ff80000 	.word	0x3ff80000
 801164c:	08015818 	.word	0x08015818
 8011650:	08015774 	.word	0x08015774
 8011654:	08015701 	.word	0x08015701
 8011658:	080156d4 	.word	0x080156d4
 801165c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011660:	6018      	str	r0, [r3, #0]
 8011662:	9b07      	ldr	r3, [sp, #28]
 8011664:	2b0e      	cmp	r3, #14
 8011666:	f200 80a4 	bhi.w	80117b2 <_dtoa_r+0x442>
 801166a:	2c00      	cmp	r4, #0
 801166c:	f000 80a1 	beq.w	80117b2 <_dtoa_r+0x442>
 8011670:	2f00      	cmp	r7, #0
 8011672:	dd33      	ble.n	80116dc <_dtoa_r+0x36c>
 8011674:	4bad      	ldr	r3, [pc, #692]	@ (801192c <_dtoa_r+0x5bc>)
 8011676:	f007 020f 	and.w	r2, r7, #15
 801167a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801167e:	ed93 7b00 	vldr	d7, [r3]
 8011682:	05f8      	lsls	r0, r7, #23
 8011684:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011688:	ea4f 1427 	mov.w	r4, r7, asr #4
 801168c:	d516      	bpl.n	80116bc <_dtoa_r+0x34c>
 801168e:	4ba8      	ldr	r3, [pc, #672]	@ (8011930 <_dtoa_r+0x5c0>)
 8011690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011694:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011698:	f7ef f8e8 	bl	800086c <__aeabi_ddiv>
 801169c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116a0:	f004 040f 	and.w	r4, r4, #15
 80116a4:	2603      	movs	r6, #3
 80116a6:	4da2      	ldr	r5, [pc, #648]	@ (8011930 <_dtoa_r+0x5c0>)
 80116a8:	b954      	cbnz	r4, 80116c0 <_dtoa_r+0x350>
 80116aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116b2:	f7ef f8db 	bl	800086c <__aeabi_ddiv>
 80116b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116ba:	e028      	b.n	801170e <_dtoa_r+0x39e>
 80116bc:	2602      	movs	r6, #2
 80116be:	e7f2      	b.n	80116a6 <_dtoa_r+0x336>
 80116c0:	07e1      	lsls	r1, r4, #31
 80116c2:	d508      	bpl.n	80116d6 <_dtoa_r+0x366>
 80116c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80116c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80116cc:	f7ee ffa4 	bl	8000618 <__aeabi_dmul>
 80116d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80116d4:	3601      	adds	r6, #1
 80116d6:	1064      	asrs	r4, r4, #1
 80116d8:	3508      	adds	r5, #8
 80116da:	e7e5      	b.n	80116a8 <_dtoa_r+0x338>
 80116dc:	f000 80d2 	beq.w	8011884 <_dtoa_r+0x514>
 80116e0:	427c      	negs	r4, r7
 80116e2:	4b92      	ldr	r3, [pc, #584]	@ (801192c <_dtoa_r+0x5bc>)
 80116e4:	4d92      	ldr	r5, [pc, #584]	@ (8011930 <_dtoa_r+0x5c0>)
 80116e6:	f004 020f 	and.w	r2, r4, #15
 80116ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80116f6:	f7ee ff8f 	bl	8000618 <__aeabi_dmul>
 80116fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116fe:	1124      	asrs	r4, r4, #4
 8011700:	2300      	movs	r3, #0
 8011702:	2602      	movs	r6, #2
 8011704:	2c00      	cmp	r4, #0
 8011706:	f040 80b2 	bne.w	801186e <_dtoa_r+0x4fe>
 801170a:	2b00      	cmp	r3, #0
 801170c:	d1d3      	bne.n	80116b6 <_dtoa_r+0x346>
 801170e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011710:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011714:	2b00      	cmp	r3, #0
 8011716:	f000 80b7 	beq.w	8011888 <_dtoa_r+0x518>
 801171a:	4b86      	ldr	r3, [pc, #536]	@ (8011934 <_dtoa_r+0x5c4>)
 801171c:	2200      	movs	r2, #0
 801171e:	4620      	mov	r0, r4
 8011720:	4629      	mov	r1, r5
 8011722:	f7ef f9eb 	bl	8000afc <__aeabi_dcmplt>
 8011726:	2800      	cmp	r0, #0
 8011728:	f000 80ae 	beq.w	8011888 <_dtoa_r+0x518>
 801172c:	9b07      	ldr	r3, [sp, #28]
 801172e:	2b00      	cmp	r3, #0
 8011730:	f000 80aa 	beq.w	8011888 <_dtoa_r+0x518>
 8011734:	9b00      	ldr	r3, [sp, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	dd37      	ble.n	80117aa <_dtoa_r+0x43a>
 801173a:	1e7b      	subs	r3, r7, #1
 801173c:	9304      	str	r3, [sp, #16]
 801173e:	4620      	mov	r0, r4
 8011740:	4b7d      	ldr	r3, [pc, #500]	@ (8011938 <_dtoa_r+0x5c8>)
 8011742:	2200      	movs	r2, #0
 8011744:	4629      	mov	r1, r5
 8011746:	f7ee ff67 	bl	8000618 <__aeabi_dmul>
 801174a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801174e:	9c00      	ldr	r4, [sp, #0]
 8011750:	3601      	adds	r6, #1
 8011752:	4630      	mov	r0, r6
 8011754:	f7ee fef6 	bl	8000544 <__aeabi_i2d>
 8011758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801175c:	f7ee ff5c 	bl	8000618 <__aeabi_dmul>
 8011760:	4b76      	ldr	r3, [pc, #472]	@ (801193c <_dtoa_r+0x5cc>)
 8011762:	2200      	movs	r2, #0
 8011764:	f7ee fda2 	bl	80002ac <__adddf3>
 8011768:	4605      	mov	r5, r0
 801176a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801176e:	2c00      	cmp	r4, #0
 8011770:	f040 808d 	bne.w	801188e <_dtoa_r+0x51e>
 8011774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011778:	4b71      	ldr	r3, [pc, #452]	@ (8011940 <_dtoa_r+0x5d0>)
 801177a:	2200      	movs	r2, #0
 801177c:	f7ee fd94 	bl	80002a8 <__aeabi_dsub>
 8011780:	4602      	mov	r2, r0
 8011782:	460b      	mov	r3, r1
 8011784:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011788:	462a      	mov	r2, r5
 801178a:	4633      	mov	r3, r6
 801178c:	f7ef f9d4 	bl	8000b38 <__aeabi_dcmpgt>
 8011790:	2800      	cmp	r0, #0
 8011792:	f040 828b 	bne.w	8011cac <_dtoa_r+0x93c>
 8011796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801179a:	462a      	mov	r2, r5
 801179c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80117a0:	f7ef f9ac 	bl	8000afc <__aeabi_dcmplt>
 80117a4:	2800      	cmp	r0, #0
 80117a6:	f040 8128 	bne.w	80119fa <_dtoa_r+0x68a>
 80117aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80117ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80117b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	f2c0 815a 	blt.w	8011a6e <_dtoa_r+0x6fe>
 80117ba:	2f0e      	cmp	r7, #14
 80117bc:	f300 8157 	bgt.w	8011a6e <_dtoa_r+0x6fe>
 80117c0:	4b5a      	ldr	r3, [pc, #360]	@ (801192c <_dtoa_r+0x5bc>)
 80117c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80117c6:	ed93 7b00 	vldr	d7, [r3]
 80117ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	ed8d 7b00 	vstr	d7, [sp]
 80117d2:	da03      	bge.n	80117dc <_dtoa_r+0x46c>
 80117d4:	9b07      	ldr	r3, [sp, #28]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	f340 8101 	ble.w	80119de <_dtoa_r+0x66e>
 80117dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80117e0:	4656      	mov	r6, sl
 80117e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117e6:	4620      	mov	r0, r4
 80117e8:	4629      	mov	r1, r5
 80117ea:	f7ef f83f 	bl	800086c <__aeabi_ddiv>
 80117ee:	f7ef f9c3 	bl	8000b78 <__aeabi_d2iz>
 80117f2:	4680      	mov	r8, r0
 80117f4:	f7ee fea6 	bl	8000544 <__aeabi_i2d>
 80117f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117fc:	f7ee ff0c 	bl	8000618 <__aeabi_dmul>
 8011800:	4602      	mov	r2, r0
 8011802:	460b      	mov	r3, r1
 8011804:	4620      	mov	r0, r4
 8011806:	4629      	mov	r1, r5
 8011808:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801180c:	f7ee fd4c 	bl	80002a8 <__aeabi_dsub>
 8011810:	f806 4b01 	strb.w	r4, [r6], #1
 8011814:	9d07      	ldr	r5, [sp, #28]
 8011816:	eba6 040a 	sub.w	r4, r6, sl
 801181a:	42a5      	cmp	r5, r4
 801181c:	4602      	mov	r2, r0
 801181e:	460b      	mov	r3, r1
 8011820:	f040 8117 	bne.w	8011a52 <_dtoa_r+0x6e2>
 8011824:	f7ee fd42 	bl	80002ac <__adddf3>
 8011828:	e9dd 2300 	ldrd	r2, r3, [sp]
 801182c:	4604      	mov	r4, r0
 801182e:	460d      	mov	r5, r1
 8011830:	f7ef f982 	bl	8000b38 <__aeabi_dcmpgt>
 8011834:	2800      	cmp	r0, #0
 8011836:	f040 80f9 	bne.w	8011a2c <_dtoa_r+0x6bc>
 801183a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801183e:	4620      	mov	r0, r4
 8011840:	4629      	mov	r1, r5
 8011842:	f7ef f951 	bl	8000ae8 <__aeabi_dcmpeq>
 8011846:	b118      	cbz	r0, 8011850 <_dtoa_r+0x4e0>
 8011848:	f018 0f01 	tst.w	r8, #1
 801184c:	f040 80ee 	bne.w	8011a2c <_dtoa_r+0x6bc>
 8011850:	4649      	mov	r1, r9
 8011852:	4658      	mov	r0, fp
 8011854:	f000 fbda 	bl	801200c <_Bfree>
 8011858:	2300      	movs	r3, #0
 801185a:	7033      	strb	r3, [r6, #0]
 801185c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801185e:	3701      	adds	r7, #1
 8011860:	601f      	str	r7, [r3, #0]
 8011862:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011864:	2b00      	cmp	r3, #0
 8011866:	f000 831d 	beq.w	8011ea4 <_dtoa_r+0xb34>
 801186a:	601e      	str	r6, [r3, #0]
 801186c:	e31a      	b.n	8011ea4 <_dtoa_r+0xb34>
 801186e:	07e2      	lsls	r2, r4, #31
 8011870:	d505      	bpl.n	801187e <_dtoa_r+0x50e>
 8011872:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011876:	f7ee fecf 	bl	8000618 <__aeabi_dmul>
 801187a:	3601      	adds	r6, #1
 801187c:	2301      	movs	r3, #1
 801187e:	1064      	asrs	r4, r4, #1
 8011880:	3508      	adds	r5, #8
 8011882:	e73f      	b.n	8011704 <_dtoa_r+0x394>
 8011884:	2602      	movs	r6, #2
 8011886:	e742      	b.n	801170e <_dtoa_r+0x39e>
 8011888:	9c07      	ldr	r4, [sp, #28]
 801188a:	9704      	str	r7, [sp, #16]
 801188c:	e761      	b.n	8011752 <_dtoa_r+0x3e2>
 801188e:	4b27      	ldr	r3, [pc, #156]	@ (801192c <_dtoa_r+0x5bc>)
 8011890:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011892:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011896:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801189a:	4454      	add	r4, sl
 801189c:	2900      	cmp	r1, #0
 801189e:	d053      	beq.n	8011948 <_dtoa_r+0x5d8>
 80118a0:	4928      	ldr	r1, [pc, #160]	@ (8011944 <_dtoa_r+0x5d4>)
 80118a2:	2000      	movs	r0, #0
 80118a4:	f7ee ffe2 	bl	800086c <__aeabi_ddiv>
 80118a8:	4633      	mov	r3, r6
 80118aa:	462a      	mov	r2, r5
 80118ac:	f7ee fcfc 	bl	80002a8 <__aeabi_dsub>
 80118b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80118b4:	4656      	mov	r6, sl
 80118b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118ba:	f7ef f95d 	bl	8000b78 <__aeabi_d2iz>
 80118be:	4605      	mov	r5, r0
 80118c0:	f7ee fe40 	bl	8000544 <__aeabi_i2d>
 80118c4:	4602      	mov	r2, r0
 80118c6:	460b      	mov	r3, r1
 80118c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118cc:	f7ee fcec 	bl	80002a8 <__aeabi_dsub>
 80118d0:	3530      	adds	r5, #48	@ 0x30
 80118d2:	4602      	mov	r2, r0
 80118d4:	460b      	mov	r3, r1
 80118d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80118da:	f806 5b01 	strb.w	r5, [r6], #1
 80118de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80118e2:	f7ef f90b 	bl	8000afc <__aeabi_dcmplt>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	d171      	bne.n	80119ce <_dtoa_r+0x65e>
 80118ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118ee:	4911      	ldr	r1, [pc, #68]	@ (8011934 <_dtoa_r+0x5c4>)
 80118f0:	2000      	movs	r0, #0
 80118f2:	f7ee fcd9 	bl	80002a8 <__aeabi_dsub>
 80118f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80118fa:	f7ef f8ff 	bl	8000afc <__aeabi_dcmplt>
 80118fe:	2800      	cmp	r0, #0
 8011900:	f040 8095 	bne.w	8011a2e <_dtoa_r+0x6be>
 8011904:	42a6      	cmp	r6, r4
 8011906:	f43f af50 	beq.w	80117aa <_dtoa_r+0x43a>
 801190a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801190e:	4b0a      	ldr	r3, [pc, #40]	@ (8011938 <_dtoa_r+0x5c8>)
 8011910:	2200      	movs	r2, #0
 8011912:	f7ee fe81 	bl	8000618 <__aeabi_dmul>
 8011916:	4b08      	ldr	r3, [pc, #32]	@ (8011938 <_dtoa_r+0x5c8>)
 8011918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801191c:	2200      	movs	r2, #0
 801191e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011922:	f7ee fe79 	bl	8000618 <__aeabi_dmul>
 8011926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801192a:	e7c4      	b.n	80118b6 <_dtoa_r+0x546>
 801192c:	08015818 	.word	0x08015818
 8011930:	080157f0 	.word	0x080157f0
 8011934:	3ff00000 	.word	0x3ff00000
 8011938:	40240000 	.word	0x40240000
 801193c:	401c0000 	.word	0x401c0000
 8011940:	40140000 	.word	0x40140000
 8011944:	3fe00000 	.word	0x3fe00000
 8011948:	4631      	mov	r1, r6
 801194a:	4628      	mov	r0, r5
 801194c:	f7ee fe64 	bl	8000618 <__aeabi_dmul>
 8011950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011954:	9415      	str	r4, [sp, #84]	@ 0x54
 8011956:	4656      	mov	r6, sl
 8011958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801195c:	f7ef f90c 	bl	8000b78 <__aeabi_d2iz>
 8011960:	4605      	mov	r5, r0
 8011962:	f7ee fdef 	bl	8000544 <__aeabi_i2d>
 8011966:	4602      	mov	r2, r0
 8011968:	460b      	mov	r3, r1
 801196a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801196e:	f7ee fc9b 	bl	80002a8 <__aeabi_dsub>
 8011972:	3530      	adds	r5, #48	@ 0x30
 8011974:	f806 5b01 	strb.w	r5, [r6], #1
 8011978:	4602      	mov	r2, r0
 801197a:	460b      	mov	r3, r1
 801197c:	42a6      	cmp	r6, r4
 801197e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011982:	f04f 0200 	mov.w	r2, #0
 8011986:	d124      	bne.n	80119d2 <_dtoa_r+0x662>
 8011988:	4bac      	ldr	r3, [pc, #688]	@ (8011c3c <_dtoa_r+0x8cc>)
 801198a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801198e:	f7ee fc8d 	bl	80002ac <__adddf3>
 8011992:	4602      	mov	r2, r0
 8011994:	460b      	mov	r3, r1
 8011996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801199a:	f7ef f8cd 	bl	8000b38 <__aeabi_dcmpgt>
 801199e:	2800      	cmp	r0, #0
 80119a0:	d145      	bne.n	8011a2e <_dtoa_r+0x6be>
 80119a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80119a6:	49a5      	ldr	r1, [pc, #660]	@ (8011c3c <_dtoa_r+0x8cc>)
 80119a8:	2000      	movs	r0, #0
 80119aa:	f7ee fc7d 	bl	80002a8 <__aeabi_dsub>
 80119ae:	4602      	mov	r2, r0
 80119b0:	460b      	mov	r3, r1
 80119b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119b6:	f7ef f8a1 	bl	8000afc <__aeabi_dcmplt>
 80119ba:	2800      	cmp	r0, #0
 80119bc:	f43f aef5 	beq.w	80117aa <_dtoa_r+0x43a>
 80119c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80119c2:	1e73      	subs	r3, r6, #1
 80119c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80119c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80119ca:	2b30      	cmp	r3, #48	@ 0x30
 80119cc:	d0f8      	beq.n	80119c0 <_dtoa_r+0x650>
 80119ce:	9f04      	ldr	r7, [sp, #16]
 80119d0:	e73e      	b.n	8011850 <_dtoa_r+0x4e0>
 80119d2:	4b9b      	ldr	r3, [pc, #620]	@ (8011c40 <_dtoa_r+0x8d0>)
 80119d4:	f7ee fe20 	bl	8000618 <__aeabi_dmul>
 80119d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119dc:	e7bc      	b.n	8011958 <_dtoa_r+0x5e8>
 80119de:	d10c      	bne.n	80119fa <_dtoa_r+0x68a>
 80119e0:	4b98      	ldr	r3, [pc, #608]	@ (8011c44 <_dtoa_r+0x8d4>)
 80119e2:	2200      	movs	r2, #0
 80119e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119e8:	f7ee fe16 	bl	8000618 <__aeabi_dmul>
 80119ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119f0:	f7ef f898 	bl	8000b24 <__aeabi_dcmpge>
 80119f4:	2800      	cmp	r0, #0
 80119f6:	f000 8157 	beq.w	8011ca8 <_dtoa_r+0x938>
 80119fa:	2400      	movs	r4, #0
 80119fc:	4625      	mov	r5, r4
 80119fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a00:	43db      	mvns	r3, r3
 8011a02:	9304      	str	r3, [sp, #16]
 8011a04:	4656      	mov	r6, sl
 8011a06:	2700      	movs	r7, #0
 8011a08:	4621      	mov	r1, r4
 8011a0a:	4658      	mov	r0, fp
 8011a0c:	f000 fafe 	bl	801200c <_Bfree>
 8011a10:	2d00      	cmp	r5, #0
 8011a12:	d0dc      	beq.n	80119ce <_dtoa_r+0x65e>
 8011a14:	b12f      	cbz	r7, 8011a22 <_dtoa_r+0x6b2>
 8011a16:	42af      	cmp	r7, r5
 8011a18:	d003      	beq.n	8011a22 <_dtoa_r+0x6b2>
 8011a1a:	4639      	mov	r1, r7
 8011a1c:	4658      	mov	r0, fp
 8011a1e:	f000 faf5 	bl	801200c <_Bfree>
 8011a22:	4629      	mov	r1, r5
 8011a24:	4658      	mov	r0, fp
 8011a26:	f000 faf1 	bl	801200c <_Bfree>
 8011a2a:	e7d0      	b.n	80119ce <_dtoa_r+0x65e>
 8011a2c:	9704      	str	r7, [sp, #16]
 8011a2e:	4633      	mov	r3, r6
 8011a30:	461e      	mov	r6, r3
 8011a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a36:	2a39      	cmp	r2, #57	@ 0x39
 8011a38:	d107      	bne.n	8011a4a <_dtoa_r+0x6da>
 8011a3a:	459a      	cmp	sl, r3
 8011a3c:	d1f8      	bne.n	8011a30 <_dtoa_r+0x6c0>
 8011a3e:	9a04      	ldr	r2, [sp, #16]
 8011a40:	3201      	adds	r2, #1
 8011a42:	9204      	str	r2, [sp, #16]
 8011a44:	2230      	movs	r2, #48	@ 0x30
 8011a46:	f88a 2000 	strb.w	r2, [sl]
 8011a4a:	781a      	ldrb	r2, [r3, #0]
 8011a4c:	3201      	adds	r2, #1
 8011a4e:	701a      	strb	r2, [r3, #0]
 8011a50:	e7bd      	b.n	80119ce <_dtoa_r+0x65e>
 8011a52:	4b7b      	ldr	r3, [pc, #492]	@ (8011c40 <_dtoa_r+0x8d0>)
 8011a54:	2200      	movs	r2, #0
 8011a56:	f7ee fddf 	bl	8000618 <__aeabi_dmul>
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	4604      	mov	r4, r0
 8011a60:	460d      	mov	r5, r1
 8011a62:	f7ef f841 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a66:	2800      	cmp	r0, #0
 8011a68:	f43f aebb 	beq.w	80117e2 <_dtoa_r+0x472>
 8011a6c:	e6f0      	b.n	8011850 <_dtoa_r+0x4e0>
 8011a6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011a70:	2a00      	cmp	r2, #0
 8011a72:	f000 80db 	beq.w	8011c2c <_dtoa_r+0x8bc>
 8011a76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a78:	2a01      	cmp	r2, #1
 8011a7a:	f300 80bf 	bgt.w	8011bfc <_dtoa_r+0x88c>
 8011a7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011a80:	2a00      	cmp	r2, #0
 8011a82:	f000 80b7 	beq.w	8011bf4 <_dtoa_r+0x884>
 8011a86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011a8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011a8c:	4646      	mov	r6, r8
 8011a8e:	9a08      	ldr	r2, [sp, #32]
 8011a90:	2101      	movs	r1, #1
 8011a92:	441a      	add	r2, r3
 8011a94:	4658      	mov	r0, fp
 8011a96:	4498      	add	r8, r3
 8011a98:	9208      	str	r2, [sp, #32]
 8011a9a:	f000 fb6b 	bl	8012174 <__i2b>
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	b15e      	cbz	r6, 8011aba <_dtoa_r+0x74a>
 8011aa2:	9b08      	ldr	r3, [sp, #32]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	dd08      	ble.n	8011aba <_dtoa_r+0x74a>
 8011aa8:	42b3      	cmp	r3, r6
 8011aaa:	9a08      	ldr	r2, [sp, #32]
 8011aac:	bfa8      	it	ge
 8011aae:	4633      	movge	r3, r6
 8011ab0:	eba8 0803 	sub.w	r8, r8, r3
 8011ab4:	1af6      	subs	r6, r6, r3
 8011ab6:	1ad3      	subs	r3, r2, r3
 8011ab8:	9308      	str	r3, [sp, #32]
 8011aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011abc:	b1f3      	cbz	r3, 8011afc <_dtoa_r+0x78c>
 8011abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	f000 80b7 	beq.w	8011c34 <_dtoa_r+0x8c4>
 8011ac6:	b18c      	cbz	r4, 8011aec <_dtoa_r+0x77c>
 8011ac8:	4629      	mov	r1, r5
 8011aca:	4622      	mov	r2, r4
 8011acc:	4658      	mov	r0, fp
 8011ace:	f000 fc11 	bl	80122f4 <__pow5mult>
 8011ad2:	464a      	mov	r2, r9
 8011ad4:	4601      	mov	r1, r0
 8011ad6:	4605      	mov	r5, r0
 8011ad8:	4658      	mov	r0, fp
 8011ada:	f000 fb61 	bl	80121a0 <__multiply>
 8011ade:	4649      	mov	r1, r9
 8011ae0:	9004      	str	r0, [sp, #16]
 8011ae2:	4658      	mov	r0, fp
 8011ae4:	f000 fa92 	bl	801200c <_Bfree>
 8011ae8:	9b04      	ldr	r3, [sp, #16]
 8011aea:	4699      	mov	r9, r3
 8011aec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011aee:	1b1a      	subs	r2, r3, r4
 8011af0:	d004      	beq.n	8011afc <_dtoa_r+0x78c>
 8011af2:	4649      	mov	r1, r9
 8011af4:	4658      	mov	r0, fp
 8011af6:	f000 fbfd 	bl	80122f4 <__pow5mult>
 8011afa:	4681      	mov	r9, r0
 8011afc:	2101      	movs	r1, #1
 8011afe:	4658      	mov	r0, fp
 8011b00:	f000 fb38 	bl	8012174 <__i2b>
 8011b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b06:	4604      	mov	r4, r0
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	f000 81cf 	beq.w	8011eac <_dtoa_r+0xb3c>
 8011b0e:	461a      	mov	r2, r3
 8011b10:	4601      	mov	r1, r0
 8011b12:	4658      	mov	r0, fp
 8011b14:	f000 fbee 	bl	80122f4 <__pow5mult>
 8011b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	4604      	mov	r4, r0
 8011b1e:	f300 8095 	bgt.w	8011c4c <_dtoa_r+0x8dc>
 8011b22:	9b02      	ldr	r3, [sp, #8]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	f040 8087 	bne.w	8011c38 <_dtoa_r+0x8c8>
 8011b2a:	9b03      	ldr	r3, [sp, #12]
 8011b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f040 8089 	bne.w	8011c48 <_dtoa_r+0x8d8>
 8011b36:	9b03      	ldr	r3, [sp, #12]
 8011b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011b3c:	0d1b      	lsrs	r3, r3, #20
 8011b3e:	051b      	lsls	r3, r3, #20
 8011b40:	b12b      	cbz	r3, 8011b4e <_dtoa_r+0x7de>
 8011b42:	9b08      	ldr	r3, [sp, #32]
 8011b44:	3301      	adds	r3, #1
 8011b46:	9308      	str	r3, [sp, #32]
 8011b48:	f108 0801 	add.w	r8, r8, #1
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f000 81b0 	beq.w	8011eb8 <_dtoa_r+0xb48>
 8011b58:	6923      	ldr	r3, [r4, #16]
 8011b5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b5e:	6918      	ldr	r0, [r3, #16]
 8011b60:	f000 fabc 	bl	80120dc <__hi0bits>
 8011b64:	f1c0 0020 	rsb	r0, r0, #32
 8011b68:	9b08      	ldr	r3, [sp, #32]
 8011b6a:	4418      	add	r0, r3
 8011b6c:	f010 001f 	ands.w	r0, r0, #31
 8011b70:	d077      	beq.n	8011c62 <_dtoa_r+0x8f2>
 8011b72:	f1c0 0320 	rsb	r3, r0, #32
 8011b76:	2b04      	cmp	r3, #4
 8011b78:	dd6b      	ble.n	8011c52 <_dtoa_r+0x8e2>
 8011b7a:	9b08      	ldr	r3, [sp, #32]
 8011b7c:	f1c0 001c 	rsb	r0, r0, #28
 8011b80:	4403      	add	r3, r0
 8011b82:	4480      	add	r8, r0
 8011b84:	4406      	add	r6, r0
 8011b86:	9308      	str	r3, [sp, #32]
 8011b88:	f1b8 0f00 	cmp.w	r8, #0
 8011b8c:	dd05      	ble.n	8011b9a <_dtoa_r+0x82a>
 8011b8e:	4649      	mov	r1, r9
 8011b90:	4642      	mov	r2, r8
 8011b92:	4658      	mov	r0, fp
 8011b94:	f000 fc08 	bl	80123a8 <__lshift>
 8011b98:	4681      	mov	r9, r0
 8011b9a:	9b08      	ldr	r3, [sp, #32]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	dd05      	ble.n	8011bac <_dtoa_r+0x83c>
 8011ba0:	4621      	mov	r1, r4
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	4658      	mov	r0, fp
 8011ba6:	f000 fbff 	bl	80123a8 <__lshift>
 8011baa:	4604      	mov	r4, r0
 8011bac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d059      	beq.n	8011c66 <_dtoa_r+0x8f6>
 8011bb2:	4621      	mov	r1, r4
 8011bb4:	4648      	mov	r0, r9
 8011bb6:	f000 fc63 	bl	8012480 <__mcmp>
 8011bba:	2800      	cmp	r0, #0
 8011bbc:	da53      	bge.n	8011c66 <_dtoa_r+0x8f6>
 8011bbe:	1e7b      	subs	r3, r7, #1
 8011bc0:	9304      	str	r3, [sp, #16]
 8011bc2:	4649      	mov	r1, r9
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	220a      	movs	r2, #10
 8011bc8:	4658      	mov	r0, fp
 8011bca:	f000 fa41 	bl	8012050 <__multadd>
 8011bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011bd0:	4681      	mov	r9, r0
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	f000 8172 	beq.w	8011ebc <_dtoa_r+0xb4c>
 8011bd8:	2300      	movs	r3, #0
 8011bda:	4629      	mov	r1, r5
 8011bdc:	220a      	movs	r2, #10
 8011bde:	4658      	mov	r0, fp
 8011be0:	f000 fa36 	bl	8012050 <__multadd>
 8011be4:	9b00      	ldr	r3, [sp, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	4605      	mov	r5, r0
 8011bea:	dc67      	bgt.n	8011cbc <_dtoa_r+0x94c>
 8011bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bee:	2b02      	cmp	r3, #2
 8011bf0:	dc41      	bgt.n	8011c76 <_dtoa_r+0x906>
 8011bf2:	e063      	b.n	8011cbc <_dtoa_r+0x94c>
 8011bf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011bf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011bfa:	e746      	b.n	8011a8a <_dtoa_r+0x71a>
 8011bfc:	9b07      	ldr	r3, [sp, #28]
 8011bfe:	1e5c      	subs	r4, r3, #1
 8011c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c02:	42a3      	cmp	r3, r4
 8011c04:	bfbf      	itttt	lt
 8011c06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011c08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011c0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011c0c:	1ae3      	sublt	r3, r4, r3
 8011c0e:	bfb4      	ite	lt
 8011c10:	18d2      	addlt	r2, r2, r3
 8011c12:	1b1c      	subge	r4, r3, r4
 8011c14:	9b07      	ldr	r3, [sp, #28]
 8011c16:	bfbc      	itt	lt
 8011c18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011c1a:	2400      	movlt	r4, #0
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	bfb5      	itete	lt
 8011c20:	eba8 0603 	sublt.w	r6, r8, r3
 8011c24:	9b07      	ldrge	r3, [sp, #28]
 8011c26:	2300      	movlt	r3, #0
 8011c28:	4646      	movge	r6, r8
 8011c2a:	e730      	b.n	8011a8e <_dtoa_r+0x71e>
 8011c2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011c2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011c30:	4646      	mov	r6, r8
 8011c32:	e735      	b.n	8011aa0 <_dtoa_r+0x730>
 8011c34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c36:	e75c      	b.n	8011af2 <_dtoa_r+0x782>
 8011c38:	2300      	movs	r3, #0
 8011c3a:	e788      	b.n	8011b4e <_dtoa_r+0x7de>
 8011c3c:	3fe00000 	.word	0x3fe00000
 8011c40:	40240000 	.word	0x40240000
 8011c44:	40140000 	.word	0x40140000
 8011c48:	9b02      	ldr	r3, [sp, #8]
 8011c4a:	e780      	b.n	8011b4e <_dtoa_r+0x7de>
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c50:	e782      	b.n	8011b58 <_dtoa_r+0x7e8>
 8011c52:	d099      	beq.n	8011b88 <_dtoa_r+0x818>
 8011c54:	9a08      	ldr	r2, [sp, #32]
 8011c56:	331c      	adds	r3, #28
 8011c58:	441a      	add	r2, r3
 8011c5a:	4498      	add	r8, r3
 8011c5c:	441e      	add	r6, r3
 8011c5e:	9208      	str	r2, [sp, #32]
 8011c60:	e792      	b.n	8011b88 <_dtoa_r+0x818>
 8011c62:	4603      	mov	r3, r0
 8011c64:	e7f6      	b.n	8011c54 <_dtoa_r+0x8e4>
 8011c66:	9b07      	ldr	r3, [sp, #28]
 8011c68:	9704      	str	r7, [sp, #16]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	dc20      	bgt.n	8011cb0 <_dtoa_r+0x940>
 8011c6e:	9300      	str	r3, [sp, #0]
 8011c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c72:	2b02      	cmp	r3, #2
 8011c74:	dd1e      	ble.n	8011cb4 <_dtoa_r+0x944>
 8011c76:	9b00      	ldr	r3, [sp, #0]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	f47f aec0 	bne.w	80119fe <_dtoa_r+0x68e>
 8011c7e:	4621      	mov	r1, r4
 8011c80:	2205      	movs	r2, #5
 8011c82:	4658      	mov	r0, fp
 8011c84:	f000 f9e4 	bl	8012050 <__multadd>
 8011c88:	4601      	mov	r1, r0
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	4648      	mov	r0, r9
 8011c8e:	f000 fbf7 	bl	8012480 <__mcmp>
 8011c92:	2800      	cmp	r0, #0
 8011c94:	f77f aeb3 	ble.w	80119fe <_dtoa_r+0x68e>
 8011c98:	4656      	mov	r6, sl
 8011c9a:	2331      	movs	r3, #49	@ 0x31
 8011c9c:	f806 3b01 	strb.w	r3, [r6], #1
 8011ca0:	9b04      	ldr	r3, [sp, #16]
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	9304      	str	r3, [sp, #16]
 8011ca6:	e6ae      	b.n	8011a06 <_dtoa_r+0x696>
 8011ca8:	9c07      	ldr	r4, [sp, #28]
 8011caa:	9704      	str	r7, [sp, #16]
 8011cac:	4625      	mov	r5, r4
 8011cae:	e7f3      	b.n	8011c98 <_dtoa_r+0x928>
 8011cb0:	9b07      	ldr	r3, [sp, #28]
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f000 8104 	beq.w	8011ec4 <_dtoa_r+0xb54>
 8011cbc:	2e00      	cmp	r6, #0
 8011cbe:	dd05      	ble.n	8011ccc <_dtoa_r+0x95c>
 8011cc0:	4629      	mov	r1, r5
 8011cc2:	4632      	mov	r2, r6
 8011cc4:	4658      	mov	r0, fp
 8011cc6:	f000 fb6f 	bl	80123a8 <__lshift>
 8011cca:	4605      	mov	r5, r0
 8011ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d05a      	beq.n	8011d88 <_dtoa_r+0xa18>
 8011cd2:	6869      	ldr	r1, [r5, #4]
 8011cd4:	4658      	mov	r0, fp
 8011cd6:	f000 f959 	bl	8011f8c <_Balloc>
 8011cda:	4606      	mov	r6, r0
 8011cdc:	b928      	cbnz	r0, 8011cea <_dtoa_r+0x97a>
 8011cde:	4b84      	ldr	r3, [pc, #528]	@ (8011ef0 <_dtoa_r+0xb80>)
 8011ce0:	4602      	mov	r2, r0
 8011ce2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011ce6:	f7ff bb5a 	b.w	801139e <_dtoa_r+0x2e>
 8011cea:	692a      	ldr	r2, [r5, #16]
 8011cec:	3202      	adds	r2, #2
 8011cee:	0092      	lsls	r2, r2, #2
 8011cf0:	f105 010c 	add.w	r1, r5, #12
 8011cf4:	300c      	adds	r0, #12
 8011cf6:	f7ff faa4 	bl	8011242 <memcpy>
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	4631      	mov	r1, r6
 8011cfe:	4658      	mov	r0, fp
 8011d00:	f000 fb52 	bl	80123a8 <__lshift>
 8011d04:	f10a 0301 	add.w	r3, sl, #1
 8011d08:	9307      	str	r3, [sp, #28]
 8011d0a:	9b00      	ldr	r3, [sp, #0]
 8011d0c:	4453      	add	r3, sl
 8011d0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d10:	9b02      	ldr	r3, [sp, #8]
 8011d12:	f003 0301 	and.w	r3, r3, #1
 8011d16:	462f      	mov	r7, r5
 8011d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d1a:	4605      	mov	r5, r0
 8011d1c:	9b07      	ldr	r3, [sp, #28]
 8011d1e:	4621      	mov	r1, r4
 8011d20:	3b01      	subs	r3, #1
 8011d22:	4648      	mov	r0, r9
 8011d24:	9300      	str	r3, [sp, #0]
 8011d26:	f7ff fa9a 	bl	801125e <quorem>
 8011d2a:	4639      	mov	r1, r7
 8011d2c:	9002      	str	r0, [sp, #8]
 8011d2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011d32:	4648      	mov	r0, r9
 8011d34:	f000 fba4 	bl	8012480 <__mcmp>
 8011d38:	462a      	mov	r2, r5
 8011d3a:	9008      	str	r0, [sp, #32]
 8011d3c:	4621      	mov	r1, r4
 8011d3e:	4658      	mov	r0, fp
 8011d40:	f000 fbba 	bl	80124b8 <__mdiff>
 8011d44:	68c2      	ldr	r2, [r0, #12]
 8011d46:	4606      	mov	r6, r0
 8011d48:	bb02      	cbnz	r2, 8011d8c <_dtoa_r+0xa1c>
 8011d4a:	4601      	mov	r1, r0
 8011d4c:	4648      	mov	r0, r9
 8011d4e:	f000 fb97 	bl	8012480 <__mcmp>
 8011d52:	4602      	mov	r2, r0
 8011d54:	4631      	mov	r1, r6
 8011d56:	4658      	mov	r0, fp
 8011d58:	920e      	str	r2, [sp, #56]	@ 0x38
 8011d5a:	f000 f957 	bl	801200c <_Bfree>
 8011d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d62:	9e07      	ldr	r6, [sp, #28]
 8011d64:	ea43 0102 	orr.w	r1, r3, r2
 8011d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d6a:	4319      	orrs	r1, r3
 8011d6c:	d110      	bne.n	8011d90 <_dtoa_r+0xa20>
 8011d6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011d72:	d029      	beq.n	8011dc8 <_dtoa_r+0xa58>
 8011d74:	9b08      	ldr	r3, [sp, #32]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	dd02      	ble.n	8011d80 <_dtoa_r+0xa10>
 8011d7a:	9b02      	ldr	r3, [sp, #8]
 8011d7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011d80:	9b00      	ldr	r3, [sp, #0]
 8011d82:	f883 8000 	strb.w	r8, [r3]
 8011d86:	e63f      	b.n	8011a08 <_dtoa_r+0x698>
 8011d88:	4628      	mov	r0, r5
 8011d8a:	e7bb      	b.n	8011d04 <_dtoa_r+0x994>
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	e7e1      	b.n	8011d54 <_dtoa_r+0x9e4>
 8011d90:	9b08      	ldr	r3, [sp, #32]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	db04      	blt.n	8011da0 <_dtoa_r+0xa30>
 8011d96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011d98:	430b      	orrs	r3, r1
 8011d9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011d9c:	430b      	orrs	r3, r1
 8011d9e:	d120      	bne.n	8011de2 <_dtoa_r+0xa72>
 8011da0:	2a00      	cmp	r2, #0
 8011da2:	dded      	ble.n	8011d80 <_dtoa_r+0xa10>
 8011da4:	4649      	mov	r1, r9
 8011da6:	2201      	movs	r2, #1
 8011da8:	4658      	mov	r0, fp
 8011daa:	f000 fafd 	bl	80123a8 <__lshift>
 8011dae:	4621      	mov	r1, r4
 8011db0:	4681      	mov	r9, r0
 8011db2:	f000 fb65 	bl	8012480 <__mcmp>
 8011db6:	2800      	cmp	r0, #0
 8011db8:	dc03      	bgt.n	8011dc2 <_dtoa_r+0xa52>
 8011dba:	d1e1      	bne.n	8011d80 <_dtoa_r+0xa10>
 8011dbc:	f018 0f01 	tst.w	r8, #1
 8011dc0:	d0de      	beq.n	8011d80 <_dtoa_r+0xa10>
 8011dc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011dc6:	d1d8      	bne.n	8011d7a <_dtoa_r+0xa0a>
 8011dc8:	9a00      	ldr	r2, [sp, #0]
 8011dca:	2339      	movs	r3, #57	@ 0x39
 8011dcc:	7013      	strb	r3, [r2, #0]
 8011dce:	4633      	mov	r3, r6
 8011dd0:	461e      	mov	r6, r3
 8011dd2:	3b01      	subs	r3, #1
 8011dd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011dd8:	2a39      	cmp	r2, #57	@ 0x39
 8011dda:	d052      	beq.n	8011e82 <_dtoa_r+0xb12>
 8011ddc:	3201      	adds	r2, #1
 8011dde:	701a      	strb	r2, [r3, #0]
 8011de0:	e612      	b.n	8011a08 <_dtoa_r+0x698>
 8011de2:	2a00      	cmp	r2, #0
 8011de4:	dd07      	ble.n	8011df6 <_dtoa_r+0xa86>
 8011de6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011dea:	d0ed      	beq.n	8011dc8 <_dtoa_r+0xa58>
 8011dec:	9a00      	ldr	r2, [sp, #0]
 8011dee:	f108 0301 	add.w	r3, r8, #1
 8011df2:	7013      	strb	r3, [r2, #0]
 8011df4:	e608      	b.n	8011a08 <_dtoa_r+0x698>
 8011df6:	9b07      	ldr	r3, [sp, #28]
 8011df8:	9a07      	ldr	r2, [sp, #28]
 8011dfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d028      	beq.n	8011e56 <_dtoa_r+0xae6>
 8011e04:	4649      	mov	r1, r9
 8011e06:	2300      	movs	r3, #0
 8011e08:	220a      	movs	r2, #10
 8011e0a:	4658      	mov	r0, fp
 8011e0c:	f000 f920 	bl	8012050 <__multadd>
 8011e10:	42af      	cmp	r7, r5
 8011e12:	4681      	mov	r9, r0
 8011e14:	f04f 0300 	mov.w	r3, #0
 8011e18:	f04f 020a 	mov.w	r2, #10
 8011e1c:	4639      	mov	r1, r7
 8011e1e:	4658      	mov	r0, fp
 8011e20:	d107      	bne.n	8011e32 <_dtoa_r+0xac2>
 8011e22:	f000 f915 	bl	8012050 <__multadd>
 8011e26:	4607      	mov	r7, r0
 8011e28:	4605      	mov	r5, r0
 8011e2a:	9b07      	ldr	r3, [sp, #28]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	9307      	str	r3, [sp, #28]
 8011e30:	e774      	b.n	8011d1c <_dtoa_r+0x9ac>
 8011e32:	f000 f90d 	bl	8012050 <__multadd>
 8011e36:	4629      	mov	r1, r5
 8011e38:	4607      	mov	r7, r0
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	220a      	movs	r2, #10
 8011e3e:	4658      	mov	r0, fp
 8011e40:	f000 f906 	bl	8012050 <__multadd>
 8011e44:	4605      	mov	r5, r0
 8011e46:	e7f0      	b.n	8011e2a <_dtoa_r+0xaba>
 8011e48:	9b00      	ldr	r3, [sp, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	bfcc      	ite	gt
 8011e4e:	461e      	movgt	r6, r3
 8011e50:	2601      	movle	r6, #1
 8011e52:	4456      	add	r6, sl
 8011e54:	2700      	movs	r7, #0
 8011e56:	4649      	mov	r1, r9
 8011e58:	2201      	movs	r2, #1
 8011e5a:	4658      	mov	r0, fp
 8011e5c:	f000 faa4 	bl	80123a8 <__lshift>
 8011e60:	4621      	mov	r1, r4
 8011e62:	4681      	mov	r9, r0
 8011e64:	f000 fb0c 	bl	8012480 <__mcmp>
 8011e68:	2800      	cmp	r0, #0
 8011e6a:	dcb0      	bgt.n	8011dce <_dtoa_r+0xa5e>
 8011e6c:	d102      	bne.n	8011e74 <_dtoa_r+0xb04>
 8011e6e:	f018 0f01 	tst.w	r8, #1
 8011e72:	d1ac      	bne.n	8011dce <_dtoa_r+0xa5e>
 8011e74:	4633      	mov	r3, r6
 8011e76:	461e      	mov	r6, r3
 8011e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e7c:	2a30      	cmp	r2, #48	@ 0x30
 8011e7e:	d0fa      	beq.n	8011e76 <_dtoa_r+0xb06>
 8011e80:	e5c2      	b.n	8011a08 <_dtoa_r+0x698>
 8011e82:	459a      	cmp	sl, r3
 8011e84:	d1a4      	bne.n	8011dd0 <_dtoa_r+0xa60>
 8011e86:	9b04      	ldr	r3, [sp, #16]
 8011e88:	3301      	adds	r3, #1
 8011e8a:	9304      	str	r3, [sp, #16]
 8011e8c:	2331      	movs	r3, #49	@ 0x31
 8011e8e:	f88a 3000 	strb.w	r3, [sl]
 8011e92:	e5b9      	b.n	8011a08 <_dtoa_r+0x698>
 8011e94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011ef4 <_dtoa_r+0xb84>
 8011e9a:	b11b      	cbz	r3, 8011ea4 <_dtoa_r+0xb34>
 8011e9c:	f10a 0308 	add.w	r3, sl, #8
 8011ea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011ea2:	6013      	str	r3, [r2, #0]
 8011ea4:	4650      	mov	r0, sl
 8011ea6:	b019      	add	sp, #100	@ 0x64
 8011ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	f77f ae37 	ble.w	8011b22 <_dtoa_r+0x7b2>
 8011eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011eb8:	2001      	movs	r0, #1
 8011eba:	e655      	b.n	8011b68 <_dtoa_r+0x7f8>
 8011ebc:	9b00      	ldr	r3, [sp, #0]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	f77f aed6 	ble.w	8011c70 <_dtoa_r+0x900>
 8011ec4:	4656      	mov	r6, sl
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	4648      	mov	r0, r9
 8011eca:	f7ff f9c8 	bl	801125e <quorem>
 8011ece:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011ed2:	f806 8b01 	strb.w	r8, [r6], #1
 8011ed6:	9b00      	ldr	r3, [sp, #0]
 8011ed8:	eba6 020a 	sub.w	r2, r6, sl
 8011edc:	4293      	cmp	r3, r2
 8011ede:	ddb3      	ble.n	8011e48 <_dtoa_r+0xad8>
 8011ee0:	4649      	mov	r1, r9
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	220a      	movs	r2, #10
 8011ee6:	4658      	mov	r0, fp
 8011ee8:	f000 f8b2 	bl	8012050 <__multadd>
 8011eec:	4681      	mov	r9, r0
 8011eee:	e7ea      	b.n	8011ec6 <_dtoa_r+0xb56>
 8011ef0:	08015774 	.word	0x08015774
 8011ef4:	080156f8 	.word	0x080156f8

08011ef8 <_free_r>:
 8011ef8:	b538      	push	{r3, r4, r5, lr}
 8011efa:	4605      	mov	r5, r0
 8011efc:	2900      	cmp	r1, #0
 8011efe:	d041      	beq.n	8011f84 <_free_r+0x8c>
 8011f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f04:	1f0c      	subs	r4, r1, #4
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	bfb8      	it	lt
 8011f0a:	18e4      	addlt	r4, r4, r3
 8011f0c:	f7fe fb38 	bl	8010580 <__malloc_lock>
 8011f10:	4a1d      	ldr	r2, [pc, #116]	@ (8011f88 <_free_r+0x90>)
 8011f12:	6813      	ldr	r3, [r2, #0]
 8011f14:	b933      	cbnz	r3, 8011f24 <_free_r+0x2c>
 8011f16:	6063      	str	r3, [r4, #4]
 8011f18:	6014      	str	r4, [r2, #0]
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f20:	f7fe bb34 	b.w	801058c <__malloc_unlock>
 8011f24:	42a3      	cmp	r3, r4
 8011f26:	d908      	bls.n	8011f3a <_free_r+0x42>
 8011f28:	6820      	ldr	r0, [r4, #0]
 8011f2a:	1821      	adds	r1, r4, r0
 8011f2c:	428b      	cmp	r3, r1
 8011f2e:	bf01      	itttt	eq
 8011f30:	6819      	ldreq	r1, [r3, #0]
 8011f32:	685b      	ldreq	r3, [r3, #4]
 8011f34:	1809      	addeq	r1, r1, r0
 8011f36:	6021      	streq	r1, [r4, #0]
 8011f38:	e7ed      	b.n	8011f16 <_free_r+0x1e>
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	b10b      	cbz	r3, 8011f44 <_free_r+0x4c>
 8011f40:	42a3      	cmp	r3, r4
 8011f42:	d9fa      	bls.n	8011f3a <_free_r+0x42>
 8011f44:	6811      	ldr	r1, [r2, #0]
 8011f46:	1850      	adds	r0, r2, r1
 8011f48:	42a0      	cmp	r0, r4
 8011f4a:	d10b      	bne.n	8011f64 <_free_r+0x6c>
 8011f4c:	6820      	ldr	r0, [r4, #0]
 8011f4e:	4401      	add	r1, r0
 8011f50:	1850      	adds	r0, r2, r1
 8011f52:	4283      	cmp	r3, r0
 8011f54:	6011      	str	r1, [r2, #0]
 8011f56:	d1e0      	bne.n	8011f1a <_free_r+0x22>
 8011f58:	6818      	ldr	r0, [r3, #0]
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	6053      	str	r3, [r2, #4]
 8011f5e:	4408      	add	r0, r1
 8011f60:	6010      	str	r0, [r2, #0]
 8011f62:	e7da      	b.n	8011f1a <_free_r+0x22>
 8011f64:	d902      	bls.n	8011f6c <_free_r+0x74>
 8011f66:	230c      	movs	r3, #12
 8011f68:	602b      	str	r3, [r5, #0]
 8011f6a:	e7d6      	b.n	8011f1a <_free_r+0x22>
 8011f6c:	6820      	ldr	r0, [r4, #0]
 8011f6e:	1821      	adds	r1, r4, r0
 8011f70:	428b      	cmp	r3, r1
 8011f72:	bf04      	itt	eq
 8011f74:	6819      	ldreq	r1, [r3, #0]
 8011f76:	685b      	ldreq	r3, [r3, #4]
 8011f78:	6063      	str	r3, [r4, #4]
 8011f7a:	bf04      	itt	eq
 8011f7c:	1809      	addeq	r1, r1, r0
 8011f7e:	6021      	streq	r1, [r4, #0]
 8011f80:	6054      	str	r4, [r2, #4]
 8011f82:	e7ca      	b.n	8011f1a <_free_r+0x22>
 8011f84:	bd38      	pop	{r3, r4, r5, pc}
 8011f86:	bf00      	nop
 8011f88:	20001fc8 	.word	0x20001fc8

08011f8c <_Balloc>:
 8011f8c:	b570      	push	{r4, r5, r6, lr}
 8011f8e:	69c6      	ldr	r6, [r0, #28]
 8011f90:	4604      	mov	r4, r0
 8011f92:	460d      	mov	r5, r1
 8011f94:	b976      	cbnz	r6, 8011fb4 <_Balloc+0x28>
 8011f96:	2010      	movs	r0, #16
 8011f98:	f7fe fa40 	bl	801041c <malloc>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	61e0      	str	r0, [r4, #28]
 8011fa0:	b920      	cbnz	r0, 8011fac <_Balloc+0x20>
 8011fa2:	4b18      	ldr	r3, [pc, #96]	@ (8012004 <_Balloc+0x78>)
 8011fa4:	4818      	ldr	r0, [pc, #96]	@ (8012008 <_Balloc+0x7c>)
 8011fa6:	216b      	movs	r1, #107	@ 0x6b
 8011fa8:	f000 fd76 	bl	8012a98 <__assert_func>
 8011fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011fb0:	6006      	str	r6, [r0, #0]
 8011fb2:	60c6      	str	r6, [r0, #12]
 8011fb4:	69e6      	ldr	r6, [r4, #28]
 8011fb6:	68f3      	ldr	r3, [r6, #12]
 8011fb8:	b183      	cbz	r3, 8011fdc <_Balloc+0x50>
 8011fba:	69e3      	ldr	r3, [r4, #28]
 8011fbc:	68db      	ldr	r3, [r3, #12]
 8011fbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011fc2:	b9b8      	cbnz	r0, 8011ff4 <_Balloc+0x68>
 8011fc4:	2101      	movs	r1, #1
 8011fc6:	fa01 f605 	lsl.w	r6, r1, r5
 8011fca:	1d72      	adds	r2, r6, #5
 8011fcc:	0092      	lsls	r2, r2, #2
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f000 fd80 	bl	8012ad4 <_calloc_r>
 8011fd4:	b160      	cbz	r0, 8011ff0 <_Balloc+0x64>
 8011fd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011fda:	e00e      	b.n	8011ffa <_Balloc+0x6e>
 8011fdc:	2221      	movs	r2, #33	@ 0x21
 8011fde:	2104      	movs	r1, #4
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	f000 fd77 	bl	8012ad4 <_calloc_r>
 8011fe6:	69e3      	ldr	r3, [r4, #28]
 8011fe8:	60f0      	str	r0, [r6, #12]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d1e4      	bne.n	8011fba <_Balloc+0x2e>
 8011ff0:	2000      	movs	r0, #0
 8011ff2:	bd70      	pop	{r4, r5, r6, pc}
 8011ff4:	6802      	ldr	r2, [r0, #0]
 8011ff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012000:	e7f7      	b.n	8011ff2 <_Balloc+0x66>
 8012002:	bf00      	nop
 8012004:	08015705 	.word	0x08015705
 8012008:	08015785 	.word	0x08015785

0801200c <_Bfree>:
 801200c:	b570      	push	{r4, r5, r6, lr}
 801200e:	69c6      	ldr	r6, [r0, #28]
 8012010:	4605      	mov	r5, r0
 8012012:	460c      	mov	r4, r1
 8012014:	b976      	cbnz	r6, 8012034 <_Bfree+0x28>
 8012016:	2010      	movs	r0, #16
 8012018:	f7fe fa00 	bl	801041c <malloc>
 801201c:	4602      	mov	r2, r0
 801201e:	61e8      	str	r0, [r5, #28]
 8012020:	b920      	cbnz	r0, 801202c <_Bfree+0x20>
 8012022:	4b09      	ldr	r3, [pc, #36]	@ (8012048 <_Bfree+0x3c>)
 8012024:	4809      	ldr	r0, [pc, #36]	@ (801204c <_Bfree+0x40>)
 8012026:	218f      	movs	r1, #143	@ 0x8f
 8012028:	f000 fd36 	bl	8012a98 <__assert_func>
 801202c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012030:	6006      	str	r6, [r0, #0]
 8012032:	60c6      	str	r6, [r0, #12]
 8012034:	b13c      	cbz	r4, 8012046 <_Bfree+0x3a>
 8012036:	69eb      	ldr	r3, [r5, #28]
 8012038:	6862      	ldr	r2, [r4, #4]
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012040:	6021      	str	r1, [r4, #0]
 8012042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012046:	bd70      	pop	{r4, r5, r6, pc}
 8012048:	08015705 	.word	0x08015705
 801204c:	08015785 	.word	0x08015785

08012050 <__multadd>:
 8012050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012054:	690d      	ldr	r5, [r1, #16]
 8012056:	4607      	mov	r7, r0
 8012058:	460c      	mov	r4, r1
 801205a:	461e      	mov	r6, r3
 801205c:	f101 0c14 	add.w	ip, r1, #20
 8012060:	2000      	movs	r0, #0
 8012062:	f8dc 3000 	ldr.w	r3, [ip]
 8012066:	b299      	uxth	r1, r3
 8012068:	fb02 6101 	mla	r1, r2, r1, r6
 801206c:	0c1e      	lsrs	r6, r3, #16
 801206e:	0c0b      	lsrs	r3, r1, #16
 8012070:	fb02 3306 	mla	r3, r2, r6, r3
 8012074:	b289      	uxth	r1, r1
 8012076:	3001      	adds	r0, #1
 8012078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801207c:	4285      	cmp	r5, r0
 801207e:	f84c 1b04 	str.w	r1, [ip], #4
 8012082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012086:	dcec      	bgt.n	8012062 <__multadd+0x12>
 8012088:	b30e      	cbz	r6, 80120ce <__multadd+0x7e>
 801208a:	68a3      	ldr	r3, [r4, #8]
 801208c:	42ab      	cmp	r3, r5
 801208e:	dc19      	bgt.n	80120c4 <__multadd+0x74>
 8012090:	6861      	ldr	r1, [r4, #4]
 8012092:	4638      	mov	r0, r7
 8012094:	3101      	adds	r1, #1
 8012096:	f7ff ff79 	bl	8011f8c <_Balloc>
 801209a:	4680      	mov	r8, r0
 801209c:	b928      	cbnz	r0, 80120aa <__multadd+0x5a>
 801209e:	4602      	mov	r2, r0
 80120a0:	4b0c      	ldr	r3, [pc, #48]	@ (80120d4 <__multadd+0x84>)
 80120a2:	480d      	ldr	r0, [pc, #52]	@ (80120d8 <__multadd+0x88>)
 80120a4:	21ba      	movs	r1, #186	@ 0xba
 80120a6:	f000 fcf7 	bl	8012a98 <__assert_func>
 80120aa:	6922      	ldr	r2, [r4, #16]
 80120ac:	3202      	adds	r2, #2
 80120ae:	f104 010c 	add.w	r1, r4, #12
 80120b2:	0092      	lsls	r2, r2, #2
 80120b4:	300c      	adds	r0, #12
 80120b6:	f7ff f8c4 	bl	8011242 <memcpy>
 80120ba:	4621      	mov	r1, r4
 80120bc:	4638      	mov	r0, r7
 80120be:	f7ff ffa5 	bl	801200c <_Bfree>
 80120c2:	4644      	mov	r4, r8
 80120c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80120c8:	3501      	adds	r5, #1
 80120ca:	615e      	str	r6, [r3, #20]
 80120cc:	6125      	str	r5, [r4, #16]
 80120ce:	4620      	mov	r0, r4
 80120d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120d4:	08015774 	.word	0x08015774
 80120d8:	08015785 	.word	0x08015785

080120dc <__hi0bits>:
 80120dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80120e0:	4603      	mov	r3, r0
 80120e2:	bf36      	itet	cc
 80120e4:	0403      	lslcc	r3, r0, #16
 80120e6:	2000      	movcs	r0, #0
 80120e8:	2010      	movcc	r0, #16
 80120ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80120ee:	bf3c      	itt	cc
 80120f0:	021b      	lslcc	r3, r3, #8
 80120f2:	3008      	addcc	r0, #8
 80120f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80120f8:	bf3c      	itt	cc
 80120fa:	011b      	lslcc	r3, r3, #4
 80120fc:	3004      	addcc	r0, #4
 80120fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012102:	bf3c      	itt	cc
 8012104:	009b      	lslcc	r3, r3, #2
 8012106:	3002      	addcc	r0, #2
 8012108:	2b00      	cmp	r3, #0
 801210a:	db05      	blt.n	8012118 <__hi0bits+0x3c>
 801210c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012110:	f100 0001 	add.w	r0, r0, #1
 8012114:	bf08      	it	eq
 8012116:	2020      	moveq	r0, #32
 8012118:	4770      	bx	lr

0801211a <__lo0bits>:
 801211a:	6803      	ldr	r3, [r0, #0]
 801211c:	4602      	mov	r2, r0
 801211e:	f013 0007 	ands.w	r0, r3, #7
 8012122:	d00b      	beq.n	801213c <__lo0bits+0x22>
 8012124:	07d9      	lsls	r1, r3, #31
 8012126:	d421      	bmi.n	801216c <__lo0bits+0x52>
 8012128:	0798      	lsls	r0, r3, #30
 801212a:	bf49      	itett	mi
 801212c:	085b      	lsrmi	r3, r3, #1
 801212e:	089b      	lsrpl	r3, r3, #2
 8012130:	2001      	movmi	r0, #1
 8012132:	6013      	strmi	r3, [r2, #0]
 8012134:	bf5c      	itt	pl
 8012136:	6013      	strpl	r3, [r2, #0]
 8012138:	2002      	movpl	r0, #2
 801213a:	4770      	bx	lr
 801213c:	b299      	uxth	r1, r3
 801213e:	b909      	cbnz	r1, 8012144 <__lo0bits+0x2a>
 8012140:	0c1b      	lsrs	r3, r3, #16
 8012142:	2010      	movs	r0, #16
 8012144:	b2d9      	uxtb	r1, r3
 8012146:	b909      	cbnz	r1, 801214c <__lo0bits+0x32>
 8012148:	3008      	adds	r0, #8
 801214a:	0a1b      	lsrs	r3, r3, #8
 801214c:	0719      	lsls	r1, r3, #28
 801214e:	bf04      	itt	eq
 8012150:	091b      	lsreq	r3, r3, #4
 8012152:	3004      	addeq	r0, #4
 8012154:	0799      	lsls	r1, r3, #30
 8012156:	bf04      	itt	eq
 8012158:	089b      	lsreq	r3, r3, #2
 801215a:	3002      	addeq	r0, #2
 801215c:	07d9      	lsls	r1, r3, #31
 801215e:	d403      	bmi.n	8012168 <__lo0bits+0x4e>
 8012160:	085b      	lsrs	r3, r3, #1
 8012162:	f100 0001 	add.w	r0, r0, #1
 8012166:	d003      	beq.n	8012170 <__lo0bits+0x56>
 8012168:	6013      	str	r3, [r2, #0]
 801216a:	4770      	bx	lr
 801216c:	2000      	movs	r0, #0
 801216e:	4770      	bx	lr
 8012170:	2020      	movs	r0, #32
 8012172:	4770      	bx	lr

08012174 <__i2b>:
 8012174:	b510      	push	{r4, lr}
 8012176:	460c      	mov	r4, r1
 8012178:	2101      	movs	r1, #1
 801217a:	f7ff ff07 	bl	8011f8c <_Balloc>
 801217e:	4602      	mov	r2, r0
 8012180:	b928      	cbnz	r0, 801218e <__i2b+0x1a>
 8012182:	4b05      	ldr	r3, [pc, #20]	@ (8012198 <__i2b+0x24>)
 8012184:	4805      	ldr	r0, [pc, #20]	@ (801219c <__i2b+0x28>)
 8012186:	f240 1145 	movw	r1, #325	@ 0x145
 801218a:	f000 fc85 	bl	8012a98 <__assert_func>
 801218e:	2301      	movs	r3, #1
 8012190:	6144      	str	r4, [r0, #20]
 8012192:	6103      	str	r3, [r0, #16]
 8012194:	bd10      	pop	{r4, pc}
 8012196:	bf00      	nop
 8012198:	08015774 	.word	0x08015774
 801219c:	08015785 	.word	0x08015785

080121a0 <__multiply>:
 80121a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a4:	4614      	mov	r4, r2
 80121a6:	690a      	ldr	r2, [r1, #16]
 80121a8:	6923      	ldr	r3, [r4, #16]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	bfa8      	it	ge
 80121ae:	4623      	movge	r3, r4
 80121b0:	460f      	mov	r7, r1
 80121b2:	bfa4      	itt	ge
 80121b4:	460c      	movge	r4, r1
 80121b6:	461f      	movge	r7, r3
 80121b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80121bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80121c0:	68a3      	ldr	r3, [r4, #8]
 80121c2:	6861      	ldr	r1, [r4, #4]
 80121c4:	eb0a 0609 	add.w	r6, sl, r9
 80121c8:	42b3      	cmp	r3, r6
 80121ca:	b085      	sub	sp, #20
 80121cc:	bfb8      	it	lt
 80121ce:	3101      	addlt	r1, #1
 80121d0:	f7ff fedc 	bl	8011f8c <_Balloc>
 80121d4:	b930      	cbnz	r0, 80121e4 <__multiply+0x44>
 80121d6:	4602      	mov	r2, r0
 80121d8:	4b44      	ldr	r3, [pc, #272]	@ (80122ec <__multiply+0x14c>)
 80121da:	4845      	ldr	r0, [pc, #276]	@ (80122f0 <__multiply+0x150>)
 80121dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80121e0:	f000 fc5a 	bl	8012a98 <__assert_func>
 80121e4:	f100 0514 	add.w	r5, r0, #20
 80121e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80121ec:	462b      	mov	r3, r5
 80121ee:	2200      	movs	r2, #0
 80121f0:	4543      	cmp	r3, r8
 80121f2:	d321      	bcc.n	8012238 <__multiply+0x98>
 80121f4:	f107 0114 	add.w	r1, r7, #20
 80121f8:	f104 0214 	add.w	r2, r4, #20
 80121fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012200:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012204:	9302      	str	r3, [sp, #8]
 8012206:	1b13      	subs	r3, r2, r4
 8012208:	3b15      	subs	r3, #21
 801220a:	f023 0303 	bic.w	r3, r3, #3
 801220e:	3304      	adds	r3, #4
 8012210:	f104 0715 	add.w	r7, r4, #21
 8012214:	42ba      	cmp	r2, r7
 8012216:	bf38      	it	cc
 8012218:	2304      	movcc	r3, #4
 801221a:	9301      	str	r3, [sp, #4]
 801221c:	9b02      	ldr	r3, [sp, #8]
 801221e:	9103      	str	r1, [sp, #12]
 8012220:	428b      	cmp	r3, r1
 8012222:	d80c      	bhi.n	801223e <__multiply+0x9e>
 8012224:	2e00      	cmp	r6, #0
 8012226:	dd03      	ble.n	8012230 <__multiply+0x90>
 8012228:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801222c:	2b00      	cmp	r3, #0
 801222e:	d05b      	beq.n	80122e8 <__multiply+0x148>
 8012230:	6106      	str	r6, [r0, #16]
 8012232:	b005      	add	sp, #20
 8012234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012238:	f843 2b04 	str.w	r2, [r3], #4
 801223c:	e7d8      	b.n	80121f0 <__multiply+0x50>
 801223e:	f8b1 a000 	ldrh.w	sl, [r1]
 8012242:	f1ba 0f00 	cmp.w	sl, #0
 8012246:	d024      	beq.n	8012292 <__multiply+0xf2>
 8012248:	f104 0e14 	add.w	lr, r4, #20
 801224c:	46a9      	mov	r9, r5
 801224e:	f04f 0c00 	mov.w	ip, #0
 8012252:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012256:	f8d9 3000 	ldr.w	r3, [r9]
 801225a:	fa1f fb87 	uxth.w	fp, r7
 801225e:	b29b      	uxth	r3, r3
 8012260:	fb0a 330b 	mla	r3, sl, fp, r3
 8012264:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012268:	f8d9 7000 	ldr.w	r7, [r9]
 801226c:	4463      	add	r3, ip
 801226e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012272:	fb0a c70b 	mla	r7, sl, fp, ip
 8012276:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801227a:	b29b      	uxth	r3, r3
 801227c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012280:	4572      	cmp	r2, lr
 8012282:	f849 3b04 	str.w	r3, [r9], #4
 8012286:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801228a:	d8e2      	bhi.n	8012252 <__multiply+0xb2>
 801228c:	9b01      	ldr	r3, [sp, #4]
 801228e:	f845 c003 	str.w	ip, [r5, r3]
 8012292:	9b03      	ldr	r3, [sp, #12]
 8012294:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012298:	3104      	adds	r1, #4
 801229a:	f1b9 0f00 	cmp.w	r9, #0
 801229e:	d021      	beq.n	80122e4 <__multiply+0x144>
 80122a0:	682b      	ldr	r3, [r5, #0]
 80122a2:	f104 0c14 	add.w	ip, r4, #20
 80122a6:	46ae      	mov	lr, r5
 80122a8:	f04f 0a00 	mov.w	sl, #0
 80122ac:	f8bc b000 	ldrh.w	fp, [ip]
 80122b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80122b4:	fb09 770b 	mla	r7, r9, fp, r7
 80122b8:	4457      	add	r7, sl
 80122ba:	b29b      	uxth	r3, r3
 80122bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80122c0:	f84e 3b04 	str.w	r3, [lr], #4
 80122c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80122c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122cc:	f8be 3000 	ldrh.w	r3, [lr]
 80122d0:	fb09 330a 	mla	r3, r9, sl, r3
 80122d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80122d8:	4562      	cmp	r2, ip
 80122da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122de:	d8e5      	bhi.n	80122ac <__multiply+0x10c>
 80122e0:	9f01      	ldr	r7, [sp, #4]
 80122e2:	51eb      	str	r3, [r5, r7]
 80122e4:	3504      	adds	r5, #4
 80122e6:	e799      	b.n	801221c <__multiply+0x7c>
 80122e8:	3e01      	subs	r6, #1
 80122ea:	e79b      	b.n	8012224 <__multiply+0x84>
 80122ec:	08015774 	.word	0x08015774
 80122f0:	08015785 	.word	0x08015785

080122f4 <__pow5mult>:
 80122f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122f8:	4615      	mov	r5, r2
 80122fa:	f012 0203 	ands.w	r2, r2, #3
 80122fe:	4607      	mov	r7, r0
 8012300:	460e      	mov	r6, r1
 8012302:	d007      	beq.n	8012314 <__pow5mult+0x20>
 8012304:	4c25      	ldr	r4, [pc, #148]	@ (801239c <__pow5mult+0xa8>)
 8012306:	3a01      	subs	r2, #1
 8012308:	2300      	movs	r3, #0
 801230a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801230e:	f7ff fe9f 	bl	8012050 <__multadd>
 8012312:	4606      	mov	r6, r0
 8012314:	10ad      	asrs	r5, r5, #2
 8012316:	d03d      	beq.n	8012394 <__pow5mult+0xa0>
 8012318:	69fc      	ldr	r4, [r7, #28]
 801231a:	b97c      	cbnz	r4, 801233c <__pow5mult+0x48>
 801231c:	2010      	movs	r0, #16
 801231e:	f7fe f87d 	bl	801041c <malloc>
 8012322:	4602      	mov	r2, r0
 8012324:	61f8      	str	r0, [r7, #28]
 8012326:	b928      	cbnz	r0, 8012334 <__pow5mult+0x40>
 8012328:	4b1d      	ldr	r3, [pc, #116]	@ (80123a0 <__pow5mult+0xac>)
 801232a:	481e      	ldr	r0, [pc, #120]	@ (80123a4 <__pow5mult+0xb0>)
 801232c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012330:	f000 fbb2 	bl	8012a98 <__assert_func>
 8012334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012338:	6004      	str	r4, [r0, #0]
 801233a:	60c4      	str	r4, [r0, #12]
 801233c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012344:	b94c      	cbnz	r4, 801235a <__pow5mult+0x66>
 8012346:	f240 2171 	movw	r1, #625	@ 0x271
 801234a:	4638      	mov	r0, r7
 801234c:	f7ff ff12 	bl	8012174 <__i2b>
 8012350:	2300      	movs	r3, #0
 8012352:	f8c8 0008 	str.w	r0, [r8, #8]
 8012356:	4604      	mov	r4, r0
 8012358:	6003      	str	r3, [r0, #0]
 801235a:	f04f 0900 	mov.w	r9, #0
 801235e:	07eb      	lsls	r3, r5, #31
 8012360:	d50a      	bpl.n	8012378 <__pow5mult+0x84>
 8012362:	4631      	mov	r1, r6
 8012364:	4622      	mov	r2, r4
 8012366:	4638      	mov	r0, r7
 8012368:	f7ff ff1a 	bl	80121a0 <__multiply>
 801236c:	4631      	mov	r1, r6
 801236e:	4680      	mov	r8, r0
 8012370:	4638      	mov	r0, r7
 8012372:	f7ff fe4b 	bl	801200c <_Bfree>
 8012376:	4646      	mov	r6, r8
 8012378:	106d      	asrs	r5, r5, #1
 801237a:	d00b      	beq.n	8012394 <__pow5mult+0xa0>
 801237c:	6820      	ldr	r0, [r4, #0]
 801237e:	b938      	cbnz	r0, 8012390 <__pow5mult+0x9c>
 8012380:	4622      	mov	r2, r4
 8012382:	4621      	mov	r1, r4
 8012384:	4638      	mov	r0, r7
 8012386:	f7ff ff0b 	bl	80121a0 <__multiply>
 801238a:	6020      	str	r0, [r4, #0]
 801238c:	f8c0 9000 	str.w	r9, [r0]
 8012390:	4604      	mov	r4, r0
 8012392:	e7e4      	b.n	801235e <__pow5mult+0x6a>
 8012394:	4630      	mov	r0, r6
 8012396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801239a:	bf00      	nop
 801239c:	080157e0 	.word	0x080157e0
 80123a0:	08015705 	.word	0x08015705
 80123a4:	08015785 	.word	0x08015785

080123a8 <__lshift>:
 80123a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123ac:	460c      	mov	r4, r1
 80123ae:	6849      	ldr	r1, [r1, #4]
 80123b0:	6923      	ldr	r3, [r4, #16]
 80123b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80123b6:	68a3      	ldr	r3, [r4, #8]
 80123b8:	4607      	mov	r7, r0
 80123ba:	4691      	mov	r9, r2
 80123bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80123c0:	f108 0601 	add.w	r6, r8, #1
 80123c4:	42b3      	cmp	r3, r6
 80123c6:	db0b      	blt.n	80123e0 <__lshift+0x38>
 80123c8:	4638      	mov	r0, r7
 80123ca:	f7ff fddf 	bl	8011f8c <_Balloc>
 80123ce:	4605      	mov	r5, r0
 80123d0:	b948      	cbnz	r0, 80123e6 <__lshift+0x3e>
 80123d2:	4602      	mov	r2, r0
 80123d4:	4b28      	ldr	r3, [pc, #160]	@ (8012478 <__lshift+0xd0>)
 80123d6:	4829      	ldr	r0, [pc, #164]	@ (801247c <__lshift+0xd4>)
 80123d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80123dc:	f000 fb5c 	bl	8012a98 <__assert_func>
 80123e0:	3101      	adds	r1, #1
 80123e2:	005b      	lsls	r3, r3, #1
 80123e4:	e7ee      	b.n	80123c4 <__lshift+0x1c>
 80123e6:	2300      	movs	r3, #0
 80123e8:	f100 0114 	add.w	r1, r0, #20
 80123ec:	f100 0210 	add.w	r2, r0, #16
 80123f0:	4618      	mov	r0, r3
 80123f2:	4553      	cmp	r3, sl
 80123f4:	db33      	blt.n	801245e <__lshift+0xb6>
 80123f6:	6920      	ldr	r0, [r4, #16]
 80123f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123fc:	f104 0314 	add.w	r3, r4, #20
 8012400:	f019 091f 	ands.w	r9, r9, #31
 8012404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012408:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801240c:	d02b      	beq.n	8012466 <__lshift+0xbe>
 801240e:	f1c9 0e20 	rsb	lr, r9, #32
 8012412:	468a      	mov	sl, r1
 8012414:	2200      	movs	r2, #0
 8012416:	6818      	ldr	r0, [r3, #0]
 8012418:	fa00 f009 	lsl.w	r0, r0, r9
 801241c:	4310      	orrs	r0, r2
 801241e:	f84a 0b04 	str.w	r0, [sl], #4
 8012422:	f853 2b04 	ldr.w	r2, [r3], #4
 8012426:	459c      	cmp	ip, r3
 8012428:	fa22 f20e 	lsr.w	r2, r2, lr
 801242c:	d8f3      	bhi.n	8012416 <__lshift+0x6e>
 801242e:	ebac 0304 	sub.w	r3, ip, r4
 8012432:	3b15      	subs	r3, #21
 8012434:	f023 0303 	bic.w	r3, r3, #3
 8012438:	3304      	adds	r3, #4
 801243a:	f104 0015 	add.w	r0, r4, #21
 801243e:	4584      	cmp	ip, r0
 8012440:	bf38      	it	cc
 8012442:	2304      	movcc	r3, #4
 8012444:	50ca      	str	r2, [r1, r3]
 8012446:	b10a      	cbz	r2, 801244c <__lshift+0xa4>
 8012448:	f108 0602 	add.w	r6, r8, #2
 801244c:	3e01      	subs	r6, #1
 801244e:	4638      	mov	r0, r7
 8012450:	612e      	str	r6, [r5, #16]
 8012452:	4621      	mov	r1, r4
 8012454:	f7ff fdda 	bl	801200c <_Bfree>
 8012458:	4628      	mov	r0, r5
 801245a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801245e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012462:	3301      	adds	r3, #1
 8012464:	e7c5      	b.n	80123f2 <__lshift+0x4a>
 8012466:	3904      	subs	r1, #4
 8012468:	f853 2b04 	ldr.w	r2, [r3], #4
 801246c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012470:	459c      	cmp	ip, r3
 8012472:	d8f9      	bhi.n	8012468 <__lshift+0xc0>
 8012474:	e7ea      	b.n	801244c <__lshift+0xa4>
 8012476:	bf00      	nop
 8012478:	08015774 	.word	0x08015774
 801247c:	08015785 	.word	0x08015785

08012480 <__mcmp>:
 8012480:	690a      	ldr	r2, [r1, #16]
 8012482:	4603      	mov	r3, r0
 8012484:	6900      	ldr	r0, [r0, #16]
 8012486:	1a80      	subs	r0, r0, r2
 8012488:	b530      	push	{r4, r5, lr}
 801248a:	d10e      	bne.n	80124aa <__mcmp+0x2a>
 801248c:	3314      	adds	r3, #20
 801248e:	3114      	adds	r1, #20
 8012490:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012494:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012498:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801249c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80124a0:	4295      	cmp	r5, r2
 80124a2:	d003      	beq.n	80124ac <__mcmp+0x2c>
 80124a4:	d205      	bcs.n	80124b2 <__mcmp+0x32>
 80124a6:	f04f 30ff 	mov.w	r0, #4294967295
 80124aa:	bd30      	pop	{r4, r5, pc}
 80124ac:	42a3      	cmp	r3, r4
 80124ae:	d3f3      	bcc.n	8012498 <__mcmp+0x18>
 80124b0:	e7fb      	b.n	80124aa <__mcmp+0x2a>
 80124b2:	2001      	movs	r0, #1
 80124b4:	e7f9      	b.n	80124aa <__mcmp+0x2a>
	...

080124b8 <__mdiff>:
 80124b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124bc:	4689      	mov	r9, r1
 80124be:	4606      	mov	r6, r0
 80124c0:	4611      	mov	r1, r2
 80124c2:	4648      	mov	r0, r9
 80124c4:	4614      	mov	r4, r2
 80124c6:	f7ff ffdb 	bl	8012480 <__mcmp>
 80124ca:	1e05      	subs	r5, r0, #0
 80124cc:	d112      	bne.n	80124f4 <__mdiff+0x3c>
 80124ce:	4629      	mov	r1, r5
 80124d0:	4630      	mov	r0, r6
 80124d2:	f7ff fd5b 	bl	8011f8c <_Balloc>
 80124d6:	4602      	mov	r2, r0
 80124d8:	b928      	cbnz	r0, 80124e6 <__mdiff+0x2e>
 80124da:	4b3f      	ldr	r3, [pc, #252]	@ (80125d8 <__mdiff+0x120>)
 80124dc:	f240 2137 	movw	r1, #567	@ 0x237
 80124e0:	483e      	ldr	r0, [pc, #248]	@ (80125dc <__mdiff+0x124>)
 80124e2:	f000 fad9 	bl	8012a98 <__assert_func>
 80124e6:	2301      	movs	r3, #1
 80124e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80124ec:	4610      	mov	r0, r2
 80124ee:	b003      	add	sp, #12
 80124f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124f4:	bfbc      	itt	lt
 80124f6:	464b      	movlt	r3, r9
 80124f8:	46a1      	movlt	r9, r4
 80124fa:	4630      	mov	r0, r6
 80124fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012500:	bfba      	itte	lt
 8012502:	461c      	movlt	r4, r3
 8012504:	2501      	movlt	r5, #1
 8012506:	2500      	movge	r5, #0
 8012508:	f7ff fd40 	bl	8011f8c <_Balloc>
 801250c:	4602      	mov	r2, r0
 801250e:	b918      	cbnz	r0, 8012518 <__mdiff+0x60>
 8012510:	4b31      	ldr	r3, [pc, #196]	@ (80125d8 <__mdiff+0x120>)
 8012512:	f240 2145 	movw	r1, #581	@ 0x245
 8012516:	e7e3      	b.n	80124e0 <__mdiff+0x28>
 8012518:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801251c:	6926      	ldr	r6, [r4, #16]
 801251e:	60c5      	str	r5, [r0, #12]
 8012520:	f109 0310 	add.w	r3, r9, #16
 8012524:	f109 0514 	add.w	r5, r9, #20
 8012528:	f104 0e14 	add.w	lr, r4, #20
 801252c:	f100 0b14 	add.w	fp, r0, #20
 8012530:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012534:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012538:	9301      	str	r3, [sp, #4]
 801253a:	46d9      	mov	r9, fp
 801253c:	f04f 0c00 	mov.w	ip, #0
 8012540:	9b01      	ldr	r3, [sp, #4]
 8012542:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012546:	f853 af04 	ldr.w	sl, [r3, #4]!
 801254a:	9301      	str	r3, [sp, #4]
 801254c:	fa1f f38a 	uxth.w	r3, sl
 8012550:	4619      	mov	r1, r3
 8012552:	b283      	uxth	r3, r0
 8012554:	1acb      	subs	r3, r1, r3
 8012556:	0c00      	lsrs	r0, r0, #16
 8012558:	4463      	add	r3, ip
 801255a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801255e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012562:	b29b      	uxth	r3, r3
 8012564:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012568:	4576      	cmp	r6, lr
 801256a:	f849 3b04 	str.w	r3, [r9], #4
 801256e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012572:	d8e5      	bhi.n	8012540 <__mdiff+0x88>
 8012574:	1b33      	subs	r3, r6, r4
 8012576:	3b15      	subs	r3, #21
 8012578:	f023 0303 	bic.w	r3, r3, #3
 801257c:	3415      	adds	r4, #21
 801257e:	3304      	adds	r3, #4
 8012580:	42a6      	cmp	r6, r4
 8012582:	bf38      	it	cc
 8012584:	2304      	movcc	r3, #4
 8012586:	441d      	add	r5, r3
 8012588:	445b      	add	r3, fp
 801258a:	461e      	mov	r6, r3
 801258c:	462c      	mov	r4, r5
 801258e:	4544      	cmp	r4, r8
 8012590:	d30e      	bcc.n	80125b0 <__mdiff+0xf8>
 8012592:	f108 0103 	add.w	r1, r8, #3
 8012596:	1b49      	subs	r1, r1, r5
 8012598:	f021 0103 	bic.w	r1, r1, #3
 801259c:	3d03      	subs	r5, #3
 801259e:	45a8      	cmp	r8, r5
 80125a0:	bf38      	it	cc
 80125a2:	2100      	movcc	r1, #0
 80125a4:	440b      	add	r3, r1
 80125a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80125aa:	b191      	cbz	r1, 80125d2 <__mdiff+0x11a>
 80125ac:	6117      	str	r7, [r2, #16]
 80125ae:	e79d      	b.n	80124ec <__mdiff+0x34>
 80125b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80125b4:	46e6      	mov	lr, ip
 80125b6:	0c08      	lsrs	r0, r1, #16
 80125b8:	fa1c fc81 	uxtah	ip, ip, r1
 80125bc:	4471      	add	r1, lr
 80125be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80125c2:	b289      	uxth	r1, r1
 80125c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80125c8:	f846 1b04 	str.w	r1, [r6], #4
 80125cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80125d0:	e7dd      	b.n	801258e <__mdiff+0xd6>
 80125d2:	3f01      	subs	r7, #1
 80125d4:	e7e7      	b.n	80125a6 <__mdiff+0xee>
 80125d6:	bf00      	nop
 80125d8:	08015774 	.word	0x08015774
 80125dc:	08015785 	.word	0x08015785

080125e0 <__d2b>:
 80125e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80125e4:	460f      	mov	r7, r1
 80125e6:	2101      	movs	r1, #1
 80125e8:	ec59 8b10 	vmov	r8, r9, d0
 80125ec:	4616      	mov	r6, r2
 80125ee:	f7ff fccd 	bl	8011f8c <_Balloc>
 80125f2:	4604      	mov	r4, r0
 80125f4:	b930      	cbnz	r0, 8012604 <__d2b+0x24>
 80125f6:	4602      	mov	r2, r0
 80125f8:	4b23      	ldr	r3, [pc, #140]	@ (8012688 <__d2b+0xa8>)
 80125fa:	4824      	ldr	r0, [pc, #144]	@ (801268c <__d2b+0xac>)
 80125fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8012600:	f000 fa4a 	bl	8012a98 <__assert_func>
 8012604:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801260c:	b10d      	cbz	r5, 8012612 <__d2b+0x32>
 801260e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012612:	9301      	str	r3, [sp, #4]
 8012614:	f1b8 0300 	subs.w	r3, r8, #0
 8012618:	d023      	beq.n	8012662 <__d2b+0x82>
 801261a:	4668      	mov	r0, sp
 801261c:	9300      	str	r3, [sp, #0]
 801261e:	f7ff fd7c 	bl	801211a <__lo0bits>
 8012622:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012626:	b1d0      	cbz	r0, 801265e <__d2b+0x7e>
 8012628:	f1c0 0320 	rsb	r3, r0, #32
 801262c:	fa02 f303 	lsl.w	r3, r2, r3
 8012630:	430b      	orrs	r3, r1
 8012632:	40c2      	lsrs	r2, r0
 8012634:	6163      	str	r3, [r4, #20]
 8012636:	9201      	str	r2, [sp, #4]
 8012638:	9b01      	ldr	r3, [sp, #4]
 801263a:	61a3      	str	r3, [r4, #24]
 801263c:	2b00      	cmp	r3, #0
 801263e:	bf0c      	ite	eq
 8012640:	2201      	moveq	r2, #1
 8012642:	2202      	movne	r2, #2
 8012644:	6122      	str	r2, [r4, #16]
 8012646:	b1a5      	cbz	r5, 8012672 <__d2b+0x92>
 8012648:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801264c:	4405      	add	r5, r0
 801264e:	603d      	str	r5, [r7, #0]
 8012650:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012654:	6030      	str	r0, [r6, #0]
 8012656:	4620      	mov	r0, r4
 8012658:	b003      	add	sp, #12
 801265a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801265e:	6161      	str	r1, [r4, #20]
 8012660:	e7ea      	b.n	8012638 <__d2b+0x58>
 8012662:	a801      	add	r0, sp, #4
 8012664:	f7ff fd59 	bl	801211a <__lo0bits>
 8012668:	9b01      	ldr	r3, [sp, #4]
 801266a:	6163      	str	r3, [r4, #20]
 801266c:	3020      	adds	r0, #32
 801266e:	2201      	movs	r2, #1
 8012670:	e7e8      	b.n	8012644 <__d2b+0x64>
 8012672:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012676:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801267a:	6038      	str	r0, [r7, #0]
 801267c:	6918      	ldr	r0, [r3, #16]
 801267e:	f7ff fd2d 	bl	80120dc <__hi0bits>
 8012682:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012686:	e7e5      	b.n	8012654 <__d2b+0x74>
 8012688:	08015774 	.word	0x08015774
 801268c:	08015785 	.word	0x08015785

08012690 <__ssputs_r>:
 8012690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012694:	688e      	ldr	r6, [r1, #8]
 8012696:	461f      	mov	r7, r3
 8012698:	42be      	cmp	r6, r7
 801269a:	680b      	ldr	r3, [r1, #0]
 801269c:	4682      	mov	sl, r0
 801269e:	460c      	mov	r4, r1
 80126a0:	4690      	mov	r8, r2
 80126a2:	d82d      	bhi.n	8012700 <__ssputs_r+0x70>
 80126a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80126ac:	d026      	beq.n	80126fc <__ssputs_r+0x6c>
 80126ae:	6965      	ldr	r5, [r4, #20]
 80126b0:	6909      	ldr	r1, [r1, #16]
 80126b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126b6:	eba3 0901 	sub.w	r9, r3, r1
 80126ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80126be:	1c7b      	adds	r3, r7, #1
 80126c0:	444b      	add	r3, r9
 80126c2:	106d      	asrs	r5, r5, #1
 80126c4:	429d      	cmp	r5, r3
 80126c6:	bf38      	it	cc
 80126c8:	461d      	movcc	r5, r3
 80126ca:	0553      	lsls	r3, r2, #21
 80126cc:	d527      	bpl.n	801271e <__ssputs_r+0x8e>
 80126ce:	4629      	mov	r1, r5
 80126d0:	f7fd fed6 	bl	8010480 <_malloc_r>
 80126d4:	4606      	mov	r6, r0
 80126d6:	b360      	cbz	r0, 8012732 <__ssputs_r+0xa2>
 80126d8:	6921      	ldr	r1, [r4, #16]
 80126da:	464a      	mov	r2, r9
 80126dc:	f7fe fdb1 	bl	8011242 <memcpy>
 80126e0:	89a3      	ldrh	r3, [r4, #12]
 80126e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80126e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126ea:	81a3      	strh	r3, [r4, #12]
 80126ec:	6126      	str	r6, [r4, #16]
 80126ee:	6165      	str	r5, [r4, #20]
 80126f0:	444e      	add	r6, r9
 80126f2:	eba5 0509 	sub.w	r5, r5, r9
 80126f6:	6026      	str	r6, [r4, #0]
 80126f8:	60a5      	str	r5, [r4, #8]
 80126fa:	463e      	mov	r6, r7
 80126fc:	42be      	cmp	r6, r7
 80126fe:	d900      	bls.n	8012702 <__ssputs_r+0x72>
 8012700:	463e      	mov	r6, r7
 8012702:	6820      	ldr	r0, [r4, #0]
 8012704:	4632      	mov	r2, r6
 8012706:	4641      	mov	r1, r8
 8012708:	f7fe fcd7 	bl	80110ba <memmove>
 801270c:	68a3      	ldr	r3, [r4, #8]
 801270e:	1b9b      	subs	r3, r3, r6
 8012710:	60a3      	str	r3, [r4, #8]
 8012712:	6823      	ldr	r3, [r4, #0]
 8012714:	4433      	add	r3, r6
 8012716:	6023      	str	r3, [r4, #0]
 8012718:	2000      	movs	r0, #0
 801271a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801271e:	462a      	mov	r2, r5
 8012720:	f000 f9fe 	bl	8012b20 <_realloc_r>
 8012724:	4606      	mov	r6, r0
 8012726:	2800      	cmp	r0, #0
 8012728:	d1e0      	bne.n	80126ec <__ssputs_r+0x5c>
 801272a:	6921      	ldr	r1, [r4, #16]
 801272c:	4650      	mov	r0, sl
 801272e:	f7ff fbe3 	bl	8011ef8 <_free_r>
 8012732:	230c      	movs	r3, #12
 8012734:	f8ca 3000 	str.w	r3, [sl]
 8012738:	89a3      	ldrh	r3, [r4, #12]
 801273a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801273e:	81a3      	strh	r3, [r4, #12]
 8012740:	f04f 30ff 	mov.w	r0, #4294967295
 8012744:	e7e9      	b.n	801271a <__ssputs_r+0x8a>
	...

08012748 <_svfiprintf_r>:
 8012748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801274c:	4698      	mov	r8, r3
 801274e:	898b      	ldrh	r3, [r1, #12]
 8012750:	061b      	lsls	r3, r3, #24
 8012752:	b09d      	sub	sp, #116	@ 0x74
 8012754:	4607      	mov	r7, r0
 8012756:	460d      	mov	r5, r1
 8012758:	4614      	mov	r4, r2
 801275a:	d510      	bpl.n	801277e <_svfiprintf_r+0x36>
 801275c:	690b      	ldr	r3, [r1, #16]
 801275e:	b973      	cbnz	r3, 801277e <_svfiprintf_r+0x36>
 8012760:	2140      	movs	r1, #64	@ 0x40
 8012762:	f7fd fe8d 	bl	8010480 <_malloc_r>
 8012766:	6028      	str	r0, [r5, #0]
 8012768:	6128      	str	r0, [r5, #16]
 801276a:	b930      	cbnz	r0, 801277a <_svfiprintf_r+0x32>
 801276c:	230c      	movs	r3, #12
 801276e:	603b      	str	r3, [r7, #0]
 8012770:	f04f 30ff 	mov.w	r0, #4294967295
 8012774:	b01d      	add	sp, #116	@ 0x74
 8012776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801277a:	2340      	movs	r3, #64	@ 0x40
 801277c:	616b      	str	r3, [r5, #20]
 801277e:	2300      	movs	r3, #0
 8012780:	9309      	str	r3, [sp, #36]	@ 0x24
 8012782:	2320      	movs	r3, #32
 8012784:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012788:	f8cd 800c 	str.w	r8, [sp, #12]
 801278c:	2330      	movs	r3, #48	@ 0x30
 801278e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801292c <_svfiprintf_r+0x1e4>
 8012792:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012796:	f04f 0901 	mov.w	r9, #1
 801279a:	4623      	mov	r3, r4
 801279c:	469a      	mov	sl, r3
 801279e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127a2:	b10a      	cbz	r2, 80127a8 <_svfiprintf_r+0x60>
 80127a4:	2a25      	cmp	r2, #37	@ 0x25
 80127a6:	d1f9      	bne.n	801279c <_svfiprintf_r+0x54>
 80127a8:	ebba 0b04 	subs.w	fp, sl, r4
 80127ac:	d00b      	beq.n	80127c6 <_svfiprintf_r+0x7e>
 80127ae:	465b      	mov	r3, fp
 80127b0:	4622      	mov	r2, r4
 80127b2:	4629      	mov	r1, r5
 80127b4:	4638      	mov	r0, r7
 80127b6:	f7ff ff6b 	bl	8012690 <__ssputs_r>
 80127ba:	3001      	adds	r0, #1
 80127bc:	f000 80a7 	beq.w	801290e <_svfiprintf_r+0x1c6>
 80127c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127c2:	445a      	add	r2, fp
 80127c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80127c6:	f89a 3000 	ldrb.w	r3, [sl]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	f000 809f 	beq.w	801290e <_svfiprintf_r+0x1c6>
 80127d0:	2300      	movs	r3, #0
 80127d2:	f04f 32ff 	mov.w	r2, #4294967295
 80127d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127da:	f10a 0a01 	add.w	sl, sl, #1
 80127de:	9304      	str	r3, [sp, #16]
 80127e0:	9307      	str	r3, [sp, #28]
 80127e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80127e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80127e8:	4654      	mov	r4, sl
 80127ea:	2205      	movs	r2, #5
 80127ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127f0:	484e      	ldr	r0, [pc, #312]	@ (801292c <_svfiprintf_r+0x1e4>)
 80127f2:	f7ed fcfd 	bl	80001f0 <memchr>
 80127f6:	9a04      	ldr	r2, [sp, #16]
 80127f8:	b9d8      	cbnz	r0, 8012832 <_svfiprintf_r+0xea>
 80127fa:	06d0      	lsls	r0, r2, #27
 80127fc:	bf44      	itt	mi
 80127fe:	2320      	movmi	r3, #32
 8012800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012804:	0711      	lsls	r1, r2, #28
 8012806:	bf44      	itt	mi
 8012808:	232b      	movmi	r3, #43	@ 0x2b
 801280a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801280e:	f89a 3000 	ldrb.w	r3, [sl]
 8012812:	2b2a      	cmp	r3, #42	@ 0x2a
 8012814:	d015      	beq.n	8012842 <_svfiprintf_r+0xfa>
 8012816:	9a07      	ldr	r2, [sp, #28]
 8012818:	4654      	mov	r4, sl
 801281a:	2000      	movs	r0, #0
 801281c:	f04f 0c0a 	mov.w	ip, #10
 8012820:	4621      	mov	r1, r4
 8012822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012826:	3b30      	subs	r3, #48	@ 0x30
 8012828:	2b09      	cmp	r3, #9
 801282a:	d94b      	bls.n	80128c4 <_svfiprintf_r+0x17c>
 801282c:	b1b0      	cbz	r0, 801285c <_svfiprintf_r+0x114>
 801282e:	9207      	str	r2, [sp, #28]
 8012830:	e014      	b.n	801285c <_svfiprintf_r+0x114>
 8012832:	eba0 0308 	sub.w	r3, r0, r8
 8012836:	fa09 f303 	lsl.w	r3, r9, r3
 801283a:	4313      	orrs	r3, r2
 801283c:	9304      	str	r3, [sp, #16]
 801283e:	46a2      	mov	sl, r4
 8012840:	e7d2      	b.n	80127e8 <_svfiprintf_r+0xa0>
 8012842:	9b03      	ldr	r3, [sp, #12]
 8012844:	1d19      	adds	r1, r3, #4
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	9103      	str	r1, [sp, #12]
 801284a:	2b00      	cmp	r3, #0
 801284c:	bfbb      	ittet	lt
 801284e:	425b      	neglt	r3, r3
 8012850:	f042 0202 	orrlt.w	r2, r2, #2
 8012854:	9307      	strge	r3, [sp, #28]
 8012856:	9307      	strlt	r3, [sp, #28]
 8012858:	bfb8      	it	lt
 801285a:	9204      	strlt	r2, [sp, #16]
 801285c:	7823      	ldrb	r3, [r4, #0]
 801285e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012860:	d10a      	bne.n	8012878 <_svfiprintf_r+0x130>
 8012862:	7863      	ldrb	r3, [r4, #1]
 8012864:	2b2a      	cmp	r3, #42	@ 0x2a
 8012866:	d132      	bne.n	80128ce <_svfiprintf_r+0x186>
 8012868:	9b03      	ldr	r3, [sp, #12]
 801286a:	1d1a      	adds	r2, r3, #4
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	9203      	str	r2, [sp, #12]
 8012870:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012874:	3402      	adds	r4, #2
 8012876:	9305      	str	r3, [sp, #20]
 8012878:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801293c <_svfiprintf_r+0x1f4>
 801287c:	7821      	ldrb	r1, [r4, #0]
 801287e:	2203      	movs	r2, #3
 8012880:	4650      	mov	r0, sl
 8012882:	f7ed fcb5 	bl	80001f0 <memchr>
 8012886:	b138      	cbz	r0, 8012898 <_svfiprintf_r+0x150>
 8012888:	9b04      	ldr	r3, [sp, #16]
 801288a:	eba0 000a 	sub.w	r0, r0, sl
 801288e:	2240      	movs	r2, #64	@ 0x40
 8012890:	4082      	lsls	r2, r0
 8012892:	4313      	orrs	r3, r2
 8012894:	3401      	adds	r4, #1
 8012896:	9304      	str	r3, [sp, #16]
 8012898:	f814 1b01 	ldrb.w	r1, [r4], #1
 801289c:	4824      	ldr	r0, [pc, #144]	@ (8012930 <_svfiprintf_r+0x1e8>)
 801289e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80128a2:	2206      	movs	r2, #6
 80128a4:	f7ed fca4 	bl	80001f0 <memchr>
 80128a8:	2800      	cmp	r0, #0
 80128aa:	d036      	beq.n	801291a <_svfiprintf_r+0x1d2>
 80128ac:	4b21      	ldr	r3, [pc, #132]	@ (8012934 <_svfiprintf_r+0x1ec>)
 80128ae:	bb1b      	cbnz	r3, 80128f8 <_svfiprintf_r+0x1b0>
 80128b0:	9b03      	ldr	r3, [sp, #12]
 80128b2:	3307      	adds	r3, #7
 80128b4:	f023 0307 	bic.w	r3, r3, #7
 80128b8:	3308      	adds	r3, #8
 80128ba:	9303      	str	r3, [sp, #12]
 80128bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128be:	4433      	add	r3, r6
 80128c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80128c2:	e76a      	b.n	801279a <_svfiprintf_r+0x52>
 80128c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80128c8:	460c      	mov	r4, r1
 80128ca:	2001      	movs	r0, #1
 80128cc:	e7a8      	b.n	8012820 <_svfiprintf_r+0xd8>
 80128ce:	2300      	movs	r3, #0
 80128d0:	3401      	adds	r4, #1
 80128d2:	9305      	str	r3, [sp, #20]
 80128d4:	4619      	mov	r1, r3
 80128d6:	f04f 0c0a 	mov.w	ip, #10
 80128da:	4620      	mov	r0, r4
 80128dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128e0:	3a30      	subs	r2, #48	@ 0x30
 80128e2:	2a09      	cmp	r2, #9
 80128e4:	d903      	bls.n	80128ee <_svfiprintf_r+0x1a6>
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d0c6      	beq.n	8012878 <_svfiprintf_r+0x130>
 80128ea:	9105      	str	r1, [sp, #20]
 80128ec:	e7c4      	b.n	8012878 <_svfiprintf_r+0x130>
 80128ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80128f2:	4604      	mov	r4, r0
 80128f4:	2301      	movs	r3, #1
 80128f6:	e7f0      	b.n	80128da <_svfiprintf_r+0x192>
 80128f8:	ab03      	add	r3, sp, #12
 80128fa:	9300      	str	r3, [sp, #0]
 80128fc:	462a      	mov	r2, r5
 80128fe:	4b0e      	ldr	r3, [pc, #56]	@ (8012938 <_svfiprintf_r+0x1f0>)
 8012900:	a904      	add	r1, sp, #16
 8012902:	4638      	mov	r0, r7
 8012904:	f7fd fee8 	bl	80106d8 <_printf_float>
 8012908:	1c42      	adds	r2, r0, #1
 801290a:	4606      	mov	r6, r0
 801290c:	d1d6      	bne.n	80128bc <_svfiprintf_r+0x174>
 801290e:	89ab      	ldrh	r3, [r5, #12]
 8012910:	065b      	lsls	r3, r3, #25
 8012912:	f53f af2d 	bmi.w	8012770 <_svfiprintf_r+0x28>
 8012916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012918:	e72c      	b.n	8012774 <_svfiprintf_r+0x2c>
 801291a:	ab03      	add	r3, sp, #12
 801291c:	9300      	str	r3, [sp, #0]
 801291e:	462a      	mov	r2, r5
 8012920:	4b05      	ldr	r3, [pc, #20]	@ (8012938 <_svfiprintf_r+0x1f0>)
 8012922:	a904      	add	r1, sp, #16
 8012924:	4638      	mov	r0, r7
 8012926:	f7fe f96f 	bl	8010c08 <_printf_i>
 801292a:	e7ed      	b.n	8012908 <_svfiprintf_r+0x1c0>
 801292c:	080158e0 	.word	0x080158e0
 8012930:	080158ea 	.word	0x080158ea
 8012934:	080106d9 	.word	0x080106d9
 8012938:	08012691 	.word	0x08012691
 801293c:	080158e6 	.word	0x080158e6

08012940 <__sflush_r>:
 8012940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012948:	0716      	lsls	r6, r2, #28
 801294a:	4605      	mov	r5, r0
 801294c:	460c      	mov	r4, r1
 801294e:	d454      	bmi.n	80129fa <__sflush_r+0xba>
 8012950:	684b      	ldr	r3, [r1, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	dc02      	bgt.n	801295c <__sflush_r+0x1c>
 8012956:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012958:	2b00      	cmp	r3, #0
 801295a:	dd48      	ble.n	80129ee <__sflush_r+0xae>
 801295c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801295e:	2e00      	cmp	r6, #0
 8012960:	d045      	beq.n	80129ee <__sflush_r+0xae>
 8012962:	2300      	movs	r3, #0
 8012964:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012968:	682f      	ldr	r7, [r5, #0]
 801296a:	6a21      	ldr	r1, [r4, #32]
 801296c:	602b      	str	r3, [r5, #0]
 801296e:	d030      	beq.n	80129d2 <__sflush_r+0x92>
 8012970:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012972:	89a3      	ldrh	r3, [r4, #12]
 8012974:	0759      	lsls	r1, r3, #29
 8012976:	d505      	bpl.n	8012984 <__sflush_r+0x44>
 8012978:	6863      	ldr	r3, [r4, #4]
 801297a:	1ad2      	subs	r2, r2, r3
 801297c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801297e:	b10b      	cbz	r3, 8012984 <__sflush_r+0x44>
 8012980:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012982:	1ad2      	subs	r2, r2, r3
 8012984:	2300      	movs	r3, #0
 8012986:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012988:	6a21      	ldr	r1, [r4, #32]
 801298a:	4628      	mov	r0, r5
 801298c:	47b0      	blx	r6
 801298e:	1c43      	adds	r3, r0, #1
 8012990:	89a3      	ldrh	r3, [r4, #12]
 8012992:	d106      	bne.n	80129a2 <__sflush_r+0x62>
 8012994:	6829      	ldr	r1, [r5, #0]
 8012996:	291d      	cmp	r1, #29
 8012998:	d82b      	bhi.n	80129f2 <__sflush_r+0xb2>
 801299a:	4a2a      	ldr	r2, [pc, #168]	@ (8012a44 <__sflush_r+0x104>)
 801299c:	410a      	asrs	r2, r1
 801299e:	07d6      	lsls	r6, r2, #31
 80129a0:	d427      	bmi.n	80129f2 <__sflush_r+0xb2>
 80129a2:	2200      	movs	r2, #0
 80129a4:	6062      	str	r2, [r4, #4]
 80129a6:	04d9      	lsls	r1, r3, #19
 80129a8:	6922      	ldr	r2, [r4, #16]
 80129aa:	6022      	str	r2, [r4, #0]
 80129ac:	d504      	bpl.n	80129b8 <__sflush_r+0x78>
 80129ae:	1c42      	adds	r2, r0, #1
 80129b0:	d101      	bne.n	80129b6 <__sflush_r+0x76>
 80129b2:	682b      	ldr	r3, [r5, #0]
 80129b4:	b903      	cbnz	r3, 80129b8 <__sflush_r+0x78>
 80129b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80129b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80129ba:	602f      	str	r7, [r5, #0]
 80129bc:	b1b9      	cbz	r1, 80129ee <__sflush_r+0xae>
 80129be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80129c2:	4299      	cmp	r1, r3
 80129c4:	d002      	beq.n	80129cc <__sflush_r+0x8c>
 80129c6:	4628      	mov	r0, r5
 80129c8:	f7ff fa96 	bl	8011ef8 <_free_r>
 80129cc:	2300      	movs	r3, #0
 80129ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80129d0:	e00d      	b.n	80129ee <__sflush_r+0xae>
 80129d2:	2301      	movs	r3, #1
 80129d4:	4628      	mov	r0, r5
 80129d6:	47b0      	blx	r6
 80129d8:	4602      	mov	r2, r0
 80129da:	1c50      	adds	r0, r2, #1
 80129dc:	d1c9      	bne.n	8012972 <__sflush_r+0x32>
 80129de:	682b      	ldr	r3, [r5, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d0c6      	beq.n	8012972 <__sflush_r+0x32>
 80129e4:	2b1d      	cmp	r3, #29
 80129e6:	d001      	beq.n	80129ec <__sflush_r+0xac>
 80129e8:	2b16      	cmp	r3, #22
 80129ea:	d11e      	bne.n	8012a2a <__sflush_r+0xea>
 80129ec:	602f      	str	r7, [r5, #0]
 80129ee:	2000      	movs	r0, #0
 80129f0:	e022      	b.n	8012a38 <__sflush_r+0xf8>
 80129f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129f6:	b21b      	sxth	r3, r3
 80129f8:	e01b      	b.n	8012a32 <__sflush_r+0xf2>
 80129fa:	690f      	ldr	r7, [r1, #16]
 80129fc:	2f00      	cmp	r7, #0
 80129fe:	d0f6      	beq.n	80129ee <__sflush_r+0xae>
 8012a00:	0793      	lsls	r3, r2, #30
 8012a02:	680e      	ldr	r6, [r1, #0]
 8012a04:	bf08      	it	eq
 8012a06:	694b      	ldreq	r3, [r1, #20]
 8012a08:	600f      	str	r7, [r1, #0]
 8012a0a:	bf18      	it	ne
 8012a0c:	2300      	movne	r3, #0
 8012a0e:	eba6 0807 	sub.w	r8, r6, r7
 8012a12:	608b      	str	r3, [r1, #8]
 8012a14:	f1b8 0f00 	cmp.w	r8, #0
 8012a18:	dde9      	ble.n	80129ee <__sflush_r+0xae>
 8012a1a:	6a21      	ldr	r1, [r4, #32]
 8012a1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012a1e:	4643      	mov	r3, r8
 8012a20:	463a      	mov	r2, r7
 8012a22:	4628      	mov	r0, r5
 8012a24:	47b0      	blx	r6
 8012a26:	2800      	cmp	r0, #0
 8012a28:	dc08      	bgt.n	8012a3c <__sflush_r+0xfc>
 8012a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a32:	81a3      	strh	r3, [r4, #12]
 8012a34:	f04f 30ff 	mov.w	r0, #4294967295
 8012a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a3c:	4407      	add	r7, r0
 8012a3e:	eba8 0800 	sub.w	r8, r8, r0
 8012a42:	e7e7      	b.n	8012a14 <__sflush_r+0xd4>
 8012a44:	dfbffffe 	.word	0xdfbffffe

08012a48 <_fflush_r>:
 8012a48:	b538      	push	{r3, r4, r5, lr}
 8012a4a:	690b      	ldr	r3, [r1, #16]
 8012a4c:	4605      	mov	r5, r0
 8012a4e:	460c      	mov	r4, r1
 8012a50:	b913      	cbnz	r3, 8012a58 <_fflush_r+0x10>
 8012a52:	2500      	movs	r5, #0
 8012a54:	4628      	mov	r0, r5
 8012a56:	bd38      	pop	{r3, r4, r5, pc}
 8012a58:	b118      	cbz	r0, 8012a62 <_fflush_r+0x1a>
 8012a5a:	6a03      	ldr	r3, [r0, #32]
 8012a5c:	b90b      	cbnz	r3, 8012a62 <_fflush_r+0x1a>
 8012a5e:	f7fe fa7f 	bl	8010f60 <__sinit>
 8012a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d0f3      	beq.n	8012a52 <_fflush_r+0xa>
 8012a6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012a6c:	07d0      	lsls	r0, r2, #31
 8012a6e:	d404      	bmi.n	8012a7a <_fflush_r+0x32>
 8012a70:	0599      	lsls	r1, r3, #22
 8012a72:	d402      	bmi.n	8012a7a <_fflush_r+0x32>
 8012a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a76:	f7fe fbda 	bl	801122e <__retarget_lock_acquire_recursive>
 8012a7a:	4628      	mov	r0, r5
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	f7ff ff5f 	bl	8012940 <__sflush_r>
 8012a82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a84:	07da      	lsls	r2, r3, #31
 8012a86:	4605      	mov	r5, r0
 8012a88:	d4e4      	bmi.n	8012a54 <_fflush_r+0xc>
 8012a8a:	89a3      	ldrh	r3, [r4, #12]
 8012a8c:	059b      	lsls	r3, r3, #22
 8012a8e:	d4e1      	bmi.n	8012a54 <_fflush_r+0xc>
 8012a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a92:	f7fe fbcd 	bl	8011230 <__retarget_lock_release_recursive>
 8012a96:	e7dd      	b.n	8012a54 <_fflush_r+0xc>

08012a98 <__assert_func>:
 8012a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a9a:	4614      	mov	r4, r2
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	4b09      	ldr	r3, [pc, #36]	@ (8012ac4 <__assert_func+0x2c>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	4605      	mov	r5, r0
 8012aa4:	68d8      	ldr	r0, [r3, #12]
 8012aa6:	b954      	cbnz	r4, 8012abe <__assert_func+0x26>
 8012aa8:	4b07      	ldr	r3, [pc, #28]	@ (8012ac8 <__assert_func+0x30>)
 8012aaa:	461c      	mov	r4, r3
 8012aac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ab0:	9100      	str	r1, [sp, #0]
 8012ab2:	462b      	mov	r3, r5
 8012ab4:	4905      	ldr	r1, [pc, #20]	@ (8012acc <__assert_func+0x34>)
 8012ab6:	f000 f86f 	bl	8012b98 <fiprintf>
 8012aba:	f000 f87f 	bl	8012bbc <abort>
 8012abe:	4b04      	ldr	r3, [pc, #16]	@ (8012ad0 <__assert_func+0x38>)
 8012ac0:	e7f4      	b.n	8012aac <__assert_func+0x14>
 8012ac2:	bf00      	nop
 8012ac4:	200000d0 	.word	0x200000d0
 8012ac8:	08015936 	.word	0x08015936
 8012acc:	08015908 	.word	0x08015908
 8012ad0:	080158fb 	.word	0x080158fb

08012ad4 <_calloc_r>:
 8012ad4:	b570      	push	{r4, r5, r6, lr}
 8012ad6:	fba1 5402 	umull	r5, r4, r1, r2
 8012ada:	b93c      	cbnz	r4, 8012aec <_calloc_r+0x18>
 8012adc:	4629      	mov	r1, r5
 8012ade:	f7fd fccf 	bl	8010480 <_malloc_r>
 8012ae2:	4606      	mov	r6, r0
 8012ae4:	b928      	cbnz	r0, 8012af2 <_calloc_r+0x1e>
 8012ae6:	2600      	movs	r6, #0
 8012ae8:	4630      	mov	r0, r6
 8012aea:	bd70      	pop	{r4, r5, r6, pc}
 8012aec:	220c      	movs	r2, #12
 8012aee:	6002      	str	r2, [r0, #0]
 8012af0:	e7f9      	b.n	8012ae6 <_calloc_r+0x12>
 8012af2:	462a      	mov	r2, r5
 8012af4:	4621      	mov	r1, r4
 8012af6:	f7fe fafa 	bl	80110ee <memset>
 8012afa:	e7f5      	b.n	8012ae8 <_calloc_r+0x14>

08012afc <__ascii_mbtowc>:
 8012afc:	b082      	sub	sp, #8
 8012afe:	b901      	cbnz	r1, 8012b02 <__ascii_mbtowc+0x6>
 8012b00:	a901      	add	r1, sp, #4
 8012b02:	b142      	cbz	r2, 8012b16 <__ascii_mbtowc+0x1a>
 8012b04:	b14b      	cbz	r3, 8012b1a <__ascii_mbtowc+0x1e>
 8012b06:	7813      	ldrb	r3, [r2, #0]
 8012b08:	600b      	str	r3, [r1, #0]
 8012b0a:	7812      	ldrb	r2, [r2, #0]
 8012b0c:	1e10      	subs	r0, r2, #0
 8012b0e:	bf18      	it	ne
 8012b10:	2001      	movne	r0, #1
 8012b12:	b002      	add	sp, #8
 8012b14:	4770      	bx	lr
 8012b16:	4610      	mov	r0, r2
 8012b18:	e7fb      	b.n	8012b12 <__ascii_mbtowc+0x16>
 8012b1a:	f06f 0001 	mvn.w	r0, #1
 8012b1e:	e7f8      	b.n	8012b12 <__ascii_mbtowc+0x16>

08012b20 <_realloc_r>:
 8012b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b24:	4680      	mov	r8, r0
 8012b26:	4615      	mov	r5, r2
 8012b28:	460c      	mov	r4, r1
 8012b2a:	b921      	cbnz	r1, 8012b36 <_realloc_r+0x16>
 8012b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b30:	4611      	mov	r1, r2
 8012b32:	f7fd bca5 	b.w	8010480 <_malloc_r>
 8012b36:	b92a      	cbnz	r2, 8012b44 <_realloc_r+0x24>
 8012b38:	f7ff f9de 	bl	8011ef8 <_free_r>
 8012b3c:	2400      	movs	r4, #0
 8012b3e:	4620      	mov	r0, r4
 8012b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b44:	f000 f841 	bl	8012bca <_malloc_usable_size_r>
 8012b48:	4285      	cmp	r5, r0
 8012b4a:	4606      	mov	r6, r0
 8012b4c:	d802      	bhi.n	8012b54 <_realloc_r+0x34>
 8012b4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012b52:	d8f4      	bhi.n	8012b3e <_realloc_r+0x1e>
 8012b54:	4629      	mov	r1, r5
 8012b56:	4640      	mov	r0, r8
 8012b58:	f7fd fc92 	bl	8010480 <_malloc_r>
 8012b5c:	4607      	mov	r7, r0
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d0ec      	beq.n	8012b3c <_realloc_r+0x1c>
 8012b62:	42b5      	cmp	r5, r6
 8012b64:	462a      	mov	r2, r5
 8012b66:	4621      	mov	r1, r4
 8012b68:	bf28      	it	cs
 8012b6a:	4632      	movcs	r2, r6
 8012b6c:	f7fe fb69 	bl	8011242 <memcpy>
 8012b70:	4621      	mov	r1, r4
 8012b72:	4640      	mov	r0, r8
 8012b74:	f7ff f9c0 	bl	8011ef8 <_free_r>
 8012b78:	463c      	mov	r4, r7
 8012b7a:	e7e0      	b.n	8012b3e <_realloc_r+0x1e>

08012b7c <__ascii_wctomb>:
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	4608      	mov	r0, r1
 8012b80:	b141      	cbz	r1, 8012b94 <__ascii_wctomb+0x18>
 8012b82:	2aff      	cmp	r2, #255	@ 0xff
 8012b84:	d904      	bls.n	8012b90 <__ascii_wctomb+0x14>
 8012b86:	228a      	movs	r2, #138	@ 0x8a
 8012b88:	601a      	str	r2, [r3, #0]
 8012b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b8e:	4770      	bx	lr
 8012b90:	700a      	strb	r2, [r1, #0]
 8012b92:	2001      	movs	r0, #1
 8012b94:	4770      	bx	lr
	...

08012b98 <fiprintf>:
 8012b98:	b40e      	push	{r1, r2, r3}
 8012b9a:	b503      	push	{r0, r1, lr}
 8012b9c:	4601      	mov	r1, r0
 8012b9e:	ab03      	add	r3, sp, #12
 8012ba0:	4805      	ldr	r0, [pc, #20]	@ (8012bb8 <fiprintf+0x20>)
 8012ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ba6:	6800      	ldr	r0, [r0, #0]
 8012ba8:	9301      	str	r3, [sp, #4]
 8012baa:	f000 f83f 	bl	8012c2c <_vfiprintf_r>
 8012bae:	b002      	add	sp, #8
 8012bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bb4:	b003      	add	sp, #12
 8012bb6:	4770      	bx	lr
 8012bb8:	200000d0 	.word	0x200000d0

08012bbc <abort>:
 8012bbc:	b508      	push	{r3, lr}
 8012bbe:	2006      	movs	r0, #6
 8012bc0:	f000 fa08 	bl	8012fd4 <raise>
 8012bc4:	2001      	movs	r0, #1
 8012bc6:	f7ef fd8f 	bl	80026e8 <_exit>

08012bca <_malloc_usable_size_r>:
 8012bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bce:	1f18      	subs	r0, r3, #4
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	bfbc      	itt	lt
 8012bd4:	580b      	ldrlt	r3, [r1, r0]
 8012bd6:	18c0      	addlt	r0, r0, r3
 8012bd8:	4770      	bx	lr

08012bda <__sfputc_r>:
 8012bda:	6893      	ldr	r3, [r2, #8]
 8012bdc:	3b01      	subs	r3, #1
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	b410      	push	{r4}
 8012be2:	6093      	str	r3, [r2, #8]
 8012be4:	da08      	bge.n	8012bf8 <__sfputc_r+0x1e>
 8012be6:	6994      	ldr	r4, [r2, #24]
 8012be8:	42a3      	cmp	r3, r4
 8012bea:	db01      	blt.n	8012bf0 <__sfputc_r+0x16>
 8012bec:	290a      	cmp	r1, #10
 8012bee:	d103      	bne.n	8012bf8 <__sfputc_r+0x1e>
 8012bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bf4:	f000 b932 	b.w	8012e5c <__swbuf_r>
 8012bf8:	6813      	ldr	r3, [r2, #0]
 8012bfa:	1c58      	adds	r0, r3, #1
 8012bfc:	6010      	str	r0, [r2, #0]
 8012bfe:	7019      	strb	r1, [r3, #0]
 8012c00:	4608      	mov	r0, r1
 8012c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c06:	4770      	bx	lr

08012c08 <__sfputs_r>:
 8012c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c0a:	4606      	mov	r6, r0
 8012c0c:	460f      	mov	r7, r1
 8012c0e:	4614      	mov	r4, r2
 8012c10:	18d5      	adds	r5, r2, r3
 8012c12:	42ac      	cmp	r4, r5
 8012c14:	d101      	bne.n	8012c1a <__sfputs_r+0x12>
 8012c16:	2000      	movs	r0, #0
 8012c18:	e007      	b.n	8012c2a <__sfputs_r+0x22>
 8012c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c1e:	463a      	mov	r2, r7
 8012c20:	4630      	mov	r0, r6
 8012c22:	f7ff ffda 	bl	8012bda <__sfputc_r>
 8012c26:	1c43      	adds	r3, r0, #1
 8012c28:	d1f3      	bne.n	8012c12 <__sfputs_r+0xa>
 8012c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c2c <_vfiprintf_r>:
 8012c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c30:	460d      	mov	r5, r1
 8012c32:	b09d      	sub	sp, #116	@ 0x74
 8012c34:	4614      	mov	r4, r2
 8012c36:	4698      	mov	r8, r3
 8012c38:	4606      	mov	r6, r0
 8012c3a:	b118      	cbz	r0, 8012c44 <_vfiprintf_r+0x18>
 8012c3c:	6a03      	ldr	r3, [r0, #32]
 8012c3e:	b90b      	cbnz	r3, 8012c44 <_vfiprintf_r+0x18>
 8012c40:	f7fe f98e 	bl	8010f60 <__sinit>
 8012c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c46:	07d9      	lsls	r1, r3, #31
 8012c48:	d405      	bmi.n	8012c56 <_vfiprintf_r+0x2a>
 8012c4a:	89ab      	ldrh	r3, [r5, #12]
 8012c4c:	059a      	lsls	r2, r3, #22
 8012c4e:	d402      	bmi.n	8012c56 <_vfiprintf_r+0x2a>
 8012c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c52:	f7fe faec 	bl	801122e <__retarget_lock_acquire_recursive>
 8012c56:	89ab      	ldrh	r3, [r5, #12]
 8012c58:	071b      	lsls	r3, r3, #28
 8012c5a:	d501      	bpl.n	8012c60 <_vfiprintf_r+0x34>
 8012c5c:	692b      	ldr	r3, [r5, #16]
 8012c5e:	b99b      	cbnz	r3, 8012c88 <_vfiprintf_r+0x5c>
 8012c60:	4629      	mov	r1, r5
 8012c62:	4630      	mov	r0, r6
 8012c64:	f000 f938 	bl	8012ed8 <__swsetup_r>
 8012c68:	b170      	cbz	r0, 8012c88 <_vfiprintf_r+0x5c>
 8012c6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c6c:	07dc      	lsls	r4, r3, #31
 8012c6e:	d504      	bpl.n	8012c7a <_vfiprintf_r+0x4e>
 8012c70:	f04f 30ff 	mov.w	r0, #4294967295
 8012c74:	b01d      	add	sp, #116	@ 0x74
 8012c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c7a:	89ab      	ldrh	r3, [r5, #12]
 8012c7c:	0598      	lsls	r0, r3, #22
 8012c7e:	d4f7      	bmi.n	8012c70 <_vfiprintf_r+0x44>
 8012c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c82:	f7fe fad5 	bl	8011230 <__retarget_lock_release_recursive>
 8012c86:	e7f3      	b.n	8012c70 <_vfiprintf_r+0x44>
 8012c88:	2300      	movs	r3, #0
 8012c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c8c:	2320      	movs	r3, #32
 8012c8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c96:	2330      	movs	r3, #48	@ 0x30
 8012c98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012e48 <_vfiprintf_r+0x21c>
 8012c9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012ca0:	f04f 0901 	mov.w	r9, #1
 8012ca4:	4623      	mov	r3, r4
 8012ca6:	469a      	mov	sl, r3
 8012ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cac:	b10a      	cbz	r2, 8012cb2 <_vfiprintf_r+0x86>
 8012cae:	2a25      	cmp	r2, #37	@ 0x25
 8012cb0:	d1f9      	bne.n	8012ca6 <_vfiprintf_r+0x7a>
 8012cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8012cb6:	d00b      	beq.n	8012cd0 <_vfiprintf_r+0xa4>
 8012cb8:	465b      	mov	r3, fp
 8012cba:	4622      	mov	r2, r4
 8012cbc:	4629      	mov	r1, r5
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7ff ffa2 	bl	8012c08 <__sfputs_r>
 8012cc4:	3001      	adds	r0, #1
 8012cc6:	f000 80a7 	beq.w	8012e18 <_vfiprintf_r+0x1ec>
 8012cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ccc:	445a      	add	r2, fp
 8012cce:	9209      	str	r2, [sp, #36]	@ 0x24
 8012cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f000 809f 	beq.w	8012e18 <_vfiprintf_r+0x1ec>
 8012cda:	2300      	movs	r3, #0
 8012cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ce4:	f10a 0a01 	add.w	sl, sl, #1
 8012ce8:	9304      	str	r3, [sp, #16]
 8012cea:	9307      	str	r3, [sp, #28]
 8012cec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012cf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8012cf2:	4654      	mov	r4, sl
 8012cf4:	2205      	movs	r2, #5
 8012cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cfa:	4853      	ldr	r0, [pc, #332]	@ (8012e48 <_vfiprintf_r+0x21c>)
 8012cfc:	f7ed fa78 	bl	80001f0 <memchr>
 8012d00:	9a04      	ldr	r2, [sp, #16]
 8012d02:	b9d8      	cbnz	r0, 8012d3c <_vfiprintf_r+0x110>
 8012d04:	06d1      	lsls	r1, r2, #27
 8012d06:	bf44      	itt	mi
 8012d08:	2320      	movmi	r3, #32
 8012d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d0e:	0713      	lsls	r3, r2, #28
 8012d10:	bf44      	itt	mi
 8012d12:	232b      	movmi	r3, #43	@ 0x2b
 8012d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d18:	f89a 3000 	ldrb.w	r3, [sl]
 8012d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d1e:	d015      	beq.n	8012d4c <_vfiprintf_r+0x120>
 8012d20:	9a07      	ldr	r2, [sp, #28]
 8012d22:	4654      	mov	r4, sl
 8012d24:	2000      	movs	r0, #0
 8012d26:	f04f 0c0a 	mov.w	ip, #10
 8012d2a:	4621      	mov	r1, r4
 8012d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d30:	3b30      	subs	r3, #48	@ 0x30
 8012d32:	2b09      	cmp	r3, #9
 8012d34:	d94b      	bls.n	8012dce <_vfiprintf_r+0x1a2>
 8012d36:	b1b0      	cbz	r0, 8012d66 <_vfiprintf_r+0x13a>
 8012d38:	9207      	str	r2, [sp, #28]
 8012d3a:	e014      	b.n	8012d66 <_vfiprintf_r+0x13a>
 8012d3c:	eba0 0308 	sub.w	r3, r0, r8
 8012d40:	fa09 f303 	lsl.w	r3, r9, r3
 8012d44:	4313      	orrs	r3, r2
 8012d46:	9304      	str	r3, [sp, #16]
 8012d48:	46a2      	mov	sl, r4
 8012d4a:	e7d2      	b.n	8012cf2 <_vfiprintf_r+0xc6>
 8012d4c:	9b03      	ldr	r3, [sp, #12]
 8012d4e:	1d19      	adds	r1, r3, #4
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	9103      	str	r1, [sp, #12]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	bfbb      	ittet	lt
 8012d58:	425b      	neglt	r3, r3
 8012d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8012d5e:	9307      	strge	r3, [sp, #28]
 8012d60:	9307      	strlt	r3, [sp, #28]
 8012d62:	bfb8      	it	lt
 8012d64:	9204      	strlt	r2, [sp, #16]
 8012d66:	7823      	ldrb	r3, [r4, #0]
 8012d68:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d6a:	d10a      	bne.n	8012d82 <_vfiprintf_r+0x156>
 8012d6c:	7863      	ldrb	r3, [r4, #1]
 8012d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d70:	d132      	bne.n	8012dd8 <_vfiprintf_r+0x1ac>
 8012d72:	9b03      	ldr	r3, [sp, #12]
 8012d74:	1d1a      	adds	r2, r3, #4
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	9203      	str	r2, [sp, #12]
 8012d7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d7e:	3402      	adds	r4, #2
 8012d80:	9305      	str	r3, [sp, #20]
 8012d82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012e58 <_vfiprintf_r+0x22c>
 8012d86:	7821      	ldrb	r1, [r4, #0]
 8012d88:	2203      	movs	r2, #3
 8012d8a:	4650      	mov	r0, sl
 8012d8c:	f7ed fa30 	bl	80001f0 <memchr>
 8012d90:	b138      	cbz	r0, 8012da2 <_vfiprintf_r+0x176>
 8012d92:	9b04      	ldr	r3, [sp, #16]
 8012d94:	eba0 000a 	sub.w	r0, r0, sl
 8012d98:	2240      	movs	r2, #64	@ 0x40
 8012d9a:	4082      	lsls	r2, r0
 8012d9c:	4313      	orrs	r3, r2
 8012d9e:	3401      	adds	r4, #1
 8012da0:	9304      	str	r3, [sp, #16]
 8012da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012da6:	4829      	ldr	r0, [pc, #164]	@ (8012e4c <_vfiprintf_r+0x220>)
 8012da8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012dac:	2206      	movs	r2, #6
 8012dae:	f7ed fa1f 	bl	80001f0 <memchr>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	d03f      	beq.n	8012e36 <_vfiprintf_r+0x20a>
 8012db6:	4b26      	ldr	r3, [pc, #152]	@ (8012e50 <_vfiprintf_r+0x224>)
 8012db8:	bb1b      	cbnz	r3, 8012e02 <_vfiprintf_r+0x1d6>
 8012dba:	9b03      	ldr	r3, [sp, #12]
 8012dbc:	3307      	adds	r3, #7
 8012dbe:	f023 0307 	bic.w	r3, r3, #7
 8012dc2:	3308      	adds	r3, #8
 8012dc4:	9303      	str	r3, [sp, #12]
 8012dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dc8:	443b      	add	r3, r7
 8012dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dcc:	e76a      	b.n	8012ca4 <_vfiprintf_r+0x78>
 8012dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dd2:	460c      	mov	r4, r1
 8012dd4:	2001      	movs	r0, #1
 8012dd6:	e7a8      	b.n	8012d2a <_vfiprintf_r+0xfe>
 8012dd8:	2300      	movs	r3, #0
 8012dda:	3401      	adds	r4, #1
 8012ddc:	9305      	str	r3, [sp, #20]
 8012dde:	4619      	mov	r1, r3
 8012de0:	f04f 0c0a 	mov.w	ip, #10
 8012de4:	4620      	mov	r0, r4
 8012de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dea:	3a30      	subs	r2, #48	@ 0x30
 8012dec:	2a09      	cmp	r2, #9
 8012dee:	d903      	bls.n	8012df8 <_vfiprintf_r+0x1cc>
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d0c6      	beq.n	8012d82 <_vfiprintf_r+0x156>
 8012df4:	9105      	str	r1, [sp, #20]
 8012df6:	e7c4      	b.n	8012d82 <_vfiprintf_r+0x156>
 8012df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	2301      	movs	r3, #1
 8012e00:	e7f0      	b.n	8012de4 <_vfiprintf_r+0x1b8>
 8012e02:	ab03      	add	r3, sp, #12
 8012e04:	9300      	str	r3, [sp, #0]
 8012e06:	462a      	mov	r2, r5
 8012e08:	4b12      	ldr	r3, [pc, #72]	@ (8012e54 <_vfiprintf_r+0x228>)
 8012e0a:	a904      	add	r1, sp, #16
 8012e0c:	4630      	mov	r0, r6
 8012e0e:	f7fd fc63 	bl	80106d8 <_printf_float>
 8012e12:	4607      	mov	r7, r0
 8012e14:	1c78      	adds	r0, r7, #1
 8012e16:	d1d6      	bne.n	8012dc6 <_vfiprintf_r+0x19a>
 8012e18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e1a:	07d9      	lsls	r1, r3, #31
 8012e1c:	d405      	bmi.n	8012e2a <_vfiprintf_r+0x1fe>
 8012e1e:	89ab      	ldrh	r3, [r5, #12]
 8012e20:	059a      	lsls	r2, r3, #22
 8012e22:	d402      	bmi.n	8012e2a <_vfiprintf_r+0x1fe>
 8012e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e26:	f7fe fa03 	bl	8011230 <__retarget_lock_release_recursive>
 8012e2a:	89ab      	ldrh	r3, [r5, #12]
 8012e2c:	065b      	lsls	r3, r3, #25
 8012e2e:	f53f af1f 	bmi.w	8012c70 <_vfiprintf_r+0x44>
 8012e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e34:	e71e      	b.n	8012c74 <_vfiprintf_r+0x48>
 8012e36:	ab03      	add	r3, sp, #12
 8012e38:	9300      	str	r3, [sp, #0]
 8012e3a:	462a      	mov	r2, r5
 8012e3c:	4b05      	ldr	r3, [pc, #20]	@ (8012e54 <_vfiprintf_r+0x228>)
 8012e3e:	a904      	add	r1, sp, #16
 8012e40:	4630      	mov	r0, r6
 8012e42:	f7fd fee1 	bl	8010c08 <_printf_i>
 8012e46:	e7e4      	b.n	8012e12 <_vfiprintf_r+0x1e6>
 8012e48:	080158e0 	.word	0x080158e0
 8012e4c:	080158ea 	.word	0x080158ea
 8012e50:	080106d9 	.word	0x080106d9
 8012e54:	08012c09 	.word	0x08012c09
 8012e58:	080158e6 	.word	0x080158e6

08012e5c <__swbuf_r>:
 8012e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e5e:	460e      	mov	r6, r1
 8012e60:	4614      	mov	r4, r2
 8012e62:	4605      	mov	r5, r0
 8012e64:	b118      	cbz	r0, 8012e6e <__swbuf_r+0x12>
 8012e66:	6a03      	ldr	r3, [r0, #32]
 8012e68:	b90b      	cbnz	r3, 8012e6e <__swbuf_r+0x12>
 8012e6a:	f7fe f879 	bl	8010f60 <__sinit>
 8012e6e:	69a3      	ldr	r3, [r4, #24]
 8012e70:	60a3      	str	r3, [r4, #8]
 8012e72:	89a3      	ldrh	r3, [r4, #12]
 8012e74:	071a      	lsls	r2, r3, #28
 8012e76:	d501      	bpl.n	8012e7c <__swbuf_r+0x20>
 8012e78:	6923      	ldr	r3, [r4, #16]
 8012e7a:	b943      	cbnz	r3, 8012e8e <__swbuf_r+0x32>
 8012e7c:	4621      	mov	r1, r4
 8012e7e:	4628      	mov	r0, r5
 8012e80:	f000 f82a 	bl	8012ed8 <__swsetup_r>
 8012e84:	b118      	cbz	r0, 8012e8e <__swbuf_r+0x32>
 8012e86:	f04f 37ff 	mov.w	r7, #4294967295
 8012e8a:	4638      	mov	r0, r7
 8012e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e8e:	6823      	ldr	r3, [r4, #0]
 8012e90:	6922      	ldr	r2, [r4, #16]
 8012e92:	1a98      	subs	r0, r3, r2
 8012e94:	6963      	ldr	r3, [r4, #20]
 8012e96:	b2f6      	uxtb	r6, r6
 8012e98:	4283      	cmp	r3, r0
 8012e9a:	4637      	mov	r7, r6
 8012e9c:	dc05      	bgt.n	8012eaa <__swbuf_r+0x4e>
 8012e9e:	4621      	mov	r1, r4
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	f7ff fdd1 	bl	8012a48 <_fflush_r>
 8012ea6:	2800      	cmp	r0, #0
 8012ea8:	d1ed      	bne.n	8012e86 <__swbuf_r+0x2a>
 8012eaa:	68a3      	ldr	r3, [r4, #8]
 8012eac:	3b01      	subs	r3, #1
 8012eae:	60a3      	str	r3, [r4, #8]
 8012eb0:	6823      	ldr	r3, [r4, #0]
 8012eb2:	1c5a      	adds	r2, r3, #1
 8012eb4:	6022      	str	r2, [r4, #0]
 8012eb6:	701e      	strb	r6, [r3, #0]
 8012eb8:	6962      	ldr	r2, [r4, #20]
 8012eba:	1c43      	adds	r3, r0, #1
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d004      	beq.n	8012eca <__swbuf_r+0x6e>
 8012ec0:	89a3      	ldrh	r3, [r4, #12]
 8012ec2:	07db      	lsls	r3, r3, #31
 8012ec4:	d5e1      	bpl.n	8012e8a <__swbuf_r+0x2e>
 8012ec6:	2e0a      	cmp	r6, #10
 8012ec8:	d1df      	bne.n	8012e8a <__swbuf_r+0x2e>
 8012eca:	4621      	mov	r1, r4
 8012ecc:	4628      	mov	r0, r5
 8012ece:	f7ff fdbb 	bl	8012a48 <_fflush_r>
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d0d9      	beq.n	8012e8a <__swbuf_r+0x2e>
 8012ed6:	e7d6      	b.n	8012e86 <__swbuf_r+0x2a>

08012ed8 <__swsetup_r>:
 8012ed8:	b538      	push	{r3, r4, r5, lr}
 8012eda:	4b29      	ldr	r3, [pc, #164]	@ (8012f80 <__swsetup_r+0xa8>)
 8012edc:	4605      	mov	r5, r0
 8012ede:	6818      	ldr	r0, [r3, #0]
 8012ee0:	460c      	mov	r4, r1
 8012ee2:	b118      	cbz	r0, 8012eec <__swsetup_r+0x14>
 8012ee4:	6a03      	ldr	r3, [r0, #32]
 8012ee6:	b90b      	cbnz	r3, 8012eec <__swsetup_r+0x14>
 8012ee8:	f7fe f83a 	bl	8010f60 <__sinit>
 8012eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ef0:	0719      	lsls	r1, r3, #28
 8012ef2:	d422      	bmi.n	8012f3a <__swsetup_r+0x62>
 8012ef4:	06da      	lsls	r2, r3, #27
 8012ef6:	d407      	bmi.n	8012f08 <__swsetup_r+0x30>
 8012ef8:	2209      	movs	r2, #9
 8012efa:	602a      	str	r2, [r5, #0]
 8012efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f00:	81a3      	strh	r3, [r4, #12]
 8012f02:	f04f 30ff 	mov.w	r0, #4294967295
 8012f06:	e033      	b.n	8012f70 <__swsetup_r+0x98>
 8012f08:	0758      	lsls	r0, r3, #29
 8012f0a:	d512      	bpl.n	8012f32 <__swsetup_r+0x5a>
 8012f0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f0e:	b141      	cbz	r1, 8012f22 <__swsetup_r+0x4a>
 8012f10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f14:	4299      	cmp	r1, r3
 8012f16:	d002      	beq.n	8012f1e <__swsetup_r+0x46>
 8012f18:	4628      	mov	r0, r5
 8012f1a:	f7fe ffed 	bl	8011ef8 <_free_r>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f22:	89a3      	ldrh	r3, [r4, #12]
 8012f24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012f28:	81a3      	strh	r3, [r4, #12]
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	6063      	str	r3, [r4, #4]
 8012f2e:	6923      	ldr	r3, [r4, #16]
 8012f30:	6023      	str	r3, [r4, #0]
 8012f32:	89a3      	ldrh	r3, [r4, #12]
 8012f34:	f043 0308 	orr.w	r3, r3, #8
 8012f38:	81a3      	strh	r3, [r4, #12]
 8012f3a:	6923      	ldr	r3, [r4, #16]
 8012f3c:	b94b      	cbnz	r3, 8012f52 <__swsetup_r+0x7a>
 8012f3e:	89a3      	ldrh	r3, [r4, #12]
 8012f40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f48:	d003      	beq.n	8012f52 <__swsetup_r+0x7a>
 8012f4a:	4621      	mov	r1, r4
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	f000 f883 	bl	8013058 <__smakebuf_r>
 8012f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f56:	f013 0201 	ands.w	r2, r3, #1
 8012f5a:	d00a      	beq.n	8012f72 <__swsetup_r+0x9a>
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	60a2      	str	r2, [r4, #8]
 8012f60:	6962      	ldr	r2, [r4, #20]
 8012f62:	4252      	negs	r2, r2
 8012f64:	61a2      	str	r2, [r4, #24]
 8012f66:	6922      	ldr	r2, [r4, #16]
 8012f68:	b942      	cbnz	r2, 8012f7c <__swsetup_r+0xa4>
 8012f6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012f6e:	d1c5      	bne.n	8012efc <__swsetup_r+0x24>
 8012f70:	bd38      	pop	{r3, r4, r5, pc}
 8012f72:	0799      	lsls	r1, r3, #30
 8012f74:	bf58      	it	pl
 8012f76:	6962      	ldrpl	r2, [r4, #20]
 8012f78:	60a2      	str	r2, [r4, #8]
 8012f7a:	e7f4      	b.n	8012f66 <__swsetup_r+0x8e>
 8012f7c:	2000      	movs	r0, #0
 8012f7e:	e7f7      	b.n	8012f70 <__swsetup_r+0x98>
 8012f80:	200000d0 	.word	0x200000d0

08012f84 <_raise_r>:
 8012f84:	291f      	cmp	r1, #31
 8012f86:	b538      	push	{r3, r4, r5, lr}
 8012f88:	4605      	mov	r5, r0
 8012f8a:	460c      	mov	r4, r1
 8012f8c:	d904      	bls.n	8012f98 <_raise_r+0x14>
 8012f8e:	2316      	movs	r3, #22
 8012f90:	6003      	str	r3, [r0, #0]
 8012f92:	f04f 30ff 	mov.w	r0, #4294967295
 8012f96:	bd38      	pop	{r3, r4, r5, pc}
 8012f98:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012f9a:	b112      	cbz	r2, 8012fa2 <_raise_r+0x1e>
 8012f9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012fa0:	b94b      	cbnz	r3, 8012fb6 <_raise_r+0x32>
 8012fa2:	4628      	mov	r0, r5
 8012fa4:	f000 f830 	bl	8013008 <_getpid_r>
 8012fa8:	4622      	mov	r2, r4
 8012faa:	4601      	mov	r1, r0
 8012fac:	4628      	mov	r0, r5
 8012fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fb2:	f000 b817 	b.w	8012fe4 <_kill_r>
 8012fb6:	2b01      	cmp	r3, #1
 8012fb8:	d00a      	beq.n	8012fd0 <_raise_r+0x4c>
 8012fba:	1c59      	adds	r1, r3, #1
 8012fbc:	d103      	bne.n	8012fc6 <_raise_r+0x42>
 8012fbe:	2316      	movs	r3, #22
 8012fc0:	6003      	str	r3, [r0, #0]
 8012fc2:	2001      	movs	r0, #1
 8012fc4:	e7e7      	b.n	8012f96 <_raise_r+0x12>
 8012fc6:	2100      	movs	r1, #0
 8012fc8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012fcc:	4620      	mov	r0, r4
 8012fce:	4798      	blx	r3
 8012fd0:	2000      	movs	r0, #0
 8012fd2:	e7e0      	b.n	8012f96 <_raise_r+0x12>

08012fd4 <raise>:
 8012fd4:	4b02      	ldr	r3, [pc, #8]	@ (8012fe0 <raise+0xc>)
 8012fd6:	4601      	mov	r1, r0
 8012fd8:	6818      	ldr	r0, [r3, #0]
 8012fda:	f7ff bfd3 	b.w	8012f84 <_raise_r>
 8012fde:	bf00      	nop
 8012fe0:	200000d0 	.word	0x200000d0

08012fe4 <_kill_r>:
 8012fe4:	b538      	push	{r3, r4, r5, lr}
 8012fe6:	4d07      	ldr	r5, [pc, #28]	@ (8013004 <_kill_r+0x20>)
 8012fe8:	2300      	movs	r3, #0
 8012fea:	4604      	mov	r4, r0
 8012fec:	4608      	mov	r0, r1
 8012fee:	4611      	mov	r1, r2
 8012ff0:	602b      	str	r3, [r5, #0]
 8012ff2:	f7ef fb69 	bl	80026c8 <_kill>
 8012ff6:	1c43      	adds	r3, r0, #1
 8012ff8:	d102      	bne.n	8013000 <_kill_r+0x1c>
 8012ffa:	682b      	ldr	r3, [r5, #0]
 8012ffc:	b103      	cbz	r3, 8013000 <_kill_r+0x1c>
 8012ffe:	6023      	str	r3, [r4, #0]
 8013000:	bd38      	pop	{r3, r4, r5, pc}
 8013002:	bf00      	nop
 8013004:	20002108 	.word	0x20002108

08013008 <_getpid_r>:
 8013008:	f7ef bb56 	b.w	80026b8 <_getpid>

0801300c <__swhatbuf_r>:
 801300c:	b570      	push	{r4, r5, r6, lr}
 801300e:	460c      	mov	r4, r1
 8013010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013014:	2900      	cmp	r1, #0
 8013016:	b096      	sub	sp, #88	@ 0x58
 8013018:	4615      	mov	r5, r2
 801301a:	461e      	mov	r6, r3
 801301c:	da0d      	bge.n	801303a <__swhatbuf_r+0x2e>
 801301e:	89a3      	ldrh	r3, [r4, #12]
 8013020:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013024:	f04f 0100 	mov.w	r1, #0
 8013028:	bf14      	ite	ne
 801302a:	2340      	movne	r3, #64	@ 0x40
 801302c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013030:	2000      	movs	r0, #0
 8013032:	6031      	str	r1, [r6, #0]
 8013034:	602b      	str	r3, [r5, #0]
 8013036:	b016      	add	sp, #88	@ 0x58
 8013038:	bd70      	pop	{r4, r5, r6, pc}
 801303a:	466a      	mov	r2, sp
 801303c:	f000 f848 	bl	80130d0 <_fstat_r>
 8013040:	2800      	cmp	r0, #0
 8013042:	dbec      	blt.n	801301e <__swhatbuf_r+0x12>
 8013044:	9901      	ldr	r1, [sp, #4]
 8013046:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801304a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801304e:	4259      	negs	r1, r3
 8013050:	4159      	adcs	r1, r3
 8013052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013056:	e7eb      	b.n	8013030 <__swhatbuf_r+0x24>

08013058 <__smakebuf_r>:
 8013058:	898b      	ldrh	r3, [r1, #12]
 801305a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801305c:	079d      	lsls	r5, r3, #30
 801305e:	4606      	mov	r6, r0
 8013060:	460c      	mov	r4, r1
 8013062:	d507      	bpl.n	8013074 <__smakebuf_r+0x1c>
 8013064:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013068:	6023      	str	r3, [r4, #0]
 801306a:	6123      	str	r3, [r4, #16]
 801306c:	2301      	movs	r3, #1
 801306e:	6163      	str	r3, [r4, #20]
 8013070:	b003      	add	sp, #12
 8013072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013074:	ab01      	add	r3, sp, #4
 8013076:	466a      	mov	r2, sp
 8013078:	f7ff ffc8 	bl	801300c <__swhatbuf_r>
 801307c:	9f00      	ldr	r7, [sp, #0]
 801307e:	4605      	mov	r5, r0
 8013080:	4639      	mov	r1, r7
 8013082:	4630      	mov	r0, r6
 8013084:	f7fd f9fc 	bl	8010480 <_malloc_r>
 8013088:	b948      	cbnz	r0, 801309e <__smakebuf_r+0x46>
 801308a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801308e:	059a      	lsls	r2, r3, #22
 8013090:	d4ee      	bmi.n	8013070 <__smakebuf_r+0x18>
 8013092:	f023 0303 	bic.w	r3, r3, #3
 8013096:	f043 0302 	orr.w	r3, r3, #2
 801309a:	81a3      	strh	r3, [r4, #12]
 801309c:	e7e2      	b.n	8013064 <__smakebuf_r+0xc>
 801309e:	89a3      	ldrh	r3, [r4, #12]
 80130a0:	6020      	str	r0, [r4, #0]
 80130a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130a6:	81a3      	strh	r3, [r4, #12]
 80130a8:	9b01      	ldr	r3, [sp, #4]
 80130aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80130ae:	b15b      	cbz	r3, 80130c8 <__smakebuf_r+0x70>
 80130b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130b4:	4630      	mov	r0, r6
 80130b6:	f000 f81d 	bl	80130f4 <_isatty_r>
 80130ba:	b128      	cbz	r0, 80130c8 <__smakebuf_r+0x70>
 80130bc:	89a3      	ldrh	r3, [r4, #12]
 80130be:	f023 0303 	bic.w	r3, r3, #3
 80130c2:	f043 0301 	orr.w	r3, r3, #1
 80130c6:	81a3      	strh	r3, [r4, #12]
 80130c8:	89a3      	ldrh	r3, [r4, #12]
 80130ca:	431d      	orrs	r5, r3
 80130cc:	81a5      	strh	r5, [r4, #12]
 80130ce:	e7cf      	b.n	8013070 <__smakebuf_r+0x18>

080130d0 <_fstat_r>:
 80130d0:	b538      	push	{r3, r4, r5, lr}
 80130d2:	4d07      	ldr	r5, [pc, #28]	@ (80130f0 <_fstat_r+0x20>)
 80130d4:	2300      	movs	r3, #0
 80130d6:	4604      	mov	r4, r0
 80130d8:	4608      	mov	r0, r1
 80130da:	4611      	mov	r1, r2
 80130dc:	602b      	str	r3, [r5, #0]
 80130de:	f7ef fb53 	bl	8002788 <_fstat>
 80130e2:	1c43      	adds	r3, r0, #1
 80130e4:	d102      	bne.n	80130ec <_fstat_r+0x1c>
 80130e6:	682b      	ldr	r3, [r5, #0]
 80130e8:	b103      	cbz	r3, 80130ec <_fstat_r+0x1c>
 80130ea:	6023      	str	r3, [r4, #0]
 80130ec:	bd38      	pop	{r3, r4, r5, pc}
 80130ee:	bf00      	nop
 80130f0:	20002108 	.word	0x20002108

080130f4 <_isatty_r>:
 80130f4:	b538      	push	{r3, r4, r5, lr}
 80130f6:	4d06      	ldr	r5, [pc, #24]	@ (8013110 <_isatty_r+0x1c>)
 80130f8:	2300      	movs	r3, #0
 80130fa:	4604      	mov	r4, r0
 80130fc:	4608      	mov	r0, r1
 80130fe:	602b      	str	r3, [r5, #0]
 8013100:	f7ef fb52 	bl	80027a8 <_isatty>
 8013104:	1c43      	adds	r3, r0, #1
 8013106:	d102      	bne.n	801310e <_isatty_r+0x1a>
 8013108:	682b      	ldr	r3, [r5, #0]
 801310a:	b103      	cbz	r3, 801310e <_isatty_r+0x1a>
 801310c:	6023      	str	r3, [r4, #0]
 801310e:	bd38      	pop	{r3, r4, r5, pc}
 8013110:	20002108 	.word	0x20002108

08013114 <_init>:
 8013114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013116:	bf00      	nop
 8013118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801311a:	bc08      	pop	{r3}
 801311c:	469e      	mov	lr, r3
 801311e:	4770      	bx	lr

08013120 <_fini>:
 8013120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013122:	bf00      	nop
 8013124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013126:	bc08      	pop	{r3}
 8013128:	469e      	mov	lr, r3
 801312a:	4770      	bx	lr
