
VISHNE_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013234  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002910  080133c8  080133c8  000143c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cd8  08015cd8  00017290  2**0
                  CONTENTS
  4 .ARM          00000008  08015cd8  08015cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ce0  08015ce0  00017290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ce0  08015ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015ce4  08015ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000290  20000000  08015ce8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00017290  2**0
                  CONTENTS
 10 .bss          00001ed0  20000290  20000290  00017290  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002160  20002160  00017290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00017290  2**0
                  CONTENTS, READONLY
 13 .debug_info   000276f1  00000000  00000000  000172c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065e4  00000000  00000000  0003e9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f58  00000000  00000000  00044f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000182d  00000000  00000000  00046ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b927  00000000  00000000  0004871d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e0db  00000000  00000000  00074044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6f11  00000000  00000000  000a211f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00189030  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009360  00000000  00000000  00189074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001923d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080133ac 	.word	0x080133ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	080133ac 	.word	0x080133ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f001 fd10 	bl	8002980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f824 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 fbba 	bl	80016dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f68:	f000 fb6a 	bl	8001640 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 fb14 	bl	8001598 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f70:	f000 f98e 	bl	8001290 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000f74:	f000 f8d6 	bl	8001124 <MX_ADC3_Init>
  MX_SPI3_Init();
 8000f78:	f000 f954 	bl	8001224 <MX_SPI3_Init>
  MX_I2C3_Init();
 8000f7c:	f000 f924 	bl	80011c8 <MX_I2C3_Init>
  MX_ADC1_Init();
 8000f80:	f000 f87e 	bl	8001080 <MX_ADC1_Init>
  MX_TIM11_Init();
 8000f84:	f000 fa70 	bl	8001468 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8000f88:	f000 fb30 	bl	80015ec <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 8000f8c:	f00c fd46 	bl	800da1c <MX_USB_HOST_Init>
  MX_TIM10_Init();
 8000f90:	f000 fa1e 	bl	80013d0 <MX_TIM10_Init>
  MX_TIM13_Init();
 8000f94:	f000 fab4 	bl	8001500 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8000f98:	f00f f99e 	bl	80102d8 <DWT_Init>

  systemSetup();
 8000f9c:	f00f fa0c 	bl	80103b8 <systemSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000fa0:	f00c fd62 	bl	800da68 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	 systemLoop();
 8000fa4:	f00f f9fe 	bl	80103a4 <systemLoop>
  {
 8000fa8:	bf00      	nop
 8000faa:	e7f9      	b.n	8000fa0 <main+0x48>

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	@ 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	2230      	movs	r2, #48	@ 0x30
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f010 f9e1 	bl	8011382 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <SystemClock_Config+0xcc>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	4a27      	ldr	r2, [pc, #156]	@ (8001078 <SystemClock_Config+0xcc>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe0:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <SystemClock_Config+0xcc>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	4b22      	ldr	r3, [pc, #136]	@ (800107c <SystemClock_Config+0xd0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a21      	ldr	r2, [pc, #132]	@ (800107c <SystemClock_Config+0xd0>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <SystemClock_Config+0xd0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001008:	2301      	movs	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001016:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800101a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800101c:	2304      	movs	r3, #4
 800101e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001020:	23a8      	movs	r3, #168	@ 0xa8
 8001022:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001024:	2302      	movs	r3, #2
 8001026:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001028:	2307      	movs	r3, #7
 800102a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	4618      	mov	r0, r3
 8001032:	f006 fbcb 	bl	80077cc <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800103c:	f000 fc6e 	bl	800191c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2302      	movs	r3, #2
 8001046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001050:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001056:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2105      	movs	r1, #5
 800105e:	4618      	mov	r0, r3
 8001060:	f006 fe2c 	bl	8007cbc <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800106a:	f000 fc57 	bl	800191c <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	3750      	adds	r7, #80	@ 0x50
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_ADC1_Init+0x98>)
 800109a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800109e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_ADC1_Init+0xa0>)
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010dc:	2201      	movs	r2, #1
 80010de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010e2:	f001 fce3 	bl	8002aac <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010ec:	f000 fc16 	bl	800191c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010f0:	2308      	movs	r3, #8
 80010f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001102:	f001 fe45 	bl	8002d90 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800110c:	f000 fc06 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200002ac 	.word	0x200002ac
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001136:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <MX_ADC3_Init+0x98>)
 8001138:	4a21      	ldr	r2, [pc, #132]	@ (80011c0 <MX_ADC3_Init+0x9c>)
 800113a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800113c:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <MX_ADC3_Init+0x98>)
 800113e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001142:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <MX_ADC3_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800114a:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <MX_ADC3_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_ADC3_Init+0x98>)
 8001152:	2201      	movs	r2, #1
 8001154:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001156:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <MX_ADC3_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800115e:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <MX_ADC3_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <MX_ADC3_Init+0x98>)
 8001166:	4a17      	ldr	r2, [pc, #92]	@ (80011c4 <MX_ADC3_Init+0xa0>)
 8001168:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_ADC3_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_ADC3_Init+0x98>)
 8001172:	2201      	movs	r2, #1
 8001174:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_ADC3_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_ADC3_Init+0x98>)
 8001180:	2201      	movs	r2, #1
 8001182:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001184:	480d      	ldr	r0, [pc, #52]	@ (80011bc <MX_ADC3_Init+0x98>)
 8001186:	f001 fc91 	bl	8002aac <HAL_ADC_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001190:	f000 fbc4 	bl	800191c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001194:	2301      	movs	r3, #1
 8001196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_ADC3_Init+0x98>)
 80011a6:	f001 fdf3 	bl	8002d90 <HAL_ADC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80011b0:	f000 fbb4 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200002f4 	.word	0x200002f4
 80011c0:	40012200 	.word	0x40012200
 80011c4:	0f000001 	.word	0x0f000001

080011c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C3_Init+0x50>)
 80011ce:	4a13      	ldr	r2, [pc, #76]	@ (800121c <MX_I2C3_Init+0x54>)
 80011d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C3_Init+0x50>)
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <MX_I2C3_Init+0x58>)
 80011d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C3_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_I2C3_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_I2C3_Init+0x50>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MX_I2C3_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_I2C3_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <MX_I2C3_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_I2C3_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <MX_I2C3_Init+0x50>)
 8001206:	f005 fabd 	bl	8006784 <HAL_I2C_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001210:	f000 fb84 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200003fc 	.word	0x200003fc
 800121c:	40005c00 	.word	0x40005c00
 8001220:	000186a0 	.word	0x000186a0

08001224 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001228:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <MX_SPI3_Init+0x64>)
 800122a:	4a18      	ldr	r2, [pc, #96]	@ (800128c <MX_SPI3_Init+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_SPI3_Init+0x64>)
 8001230:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001234:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001236:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <MX_SPI3_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <MX_SPI3_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001242:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_SPI3_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MX_SPI3_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_SPI3_Init+0x64>)
 8001250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001254:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_SPI3_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <MX_SPI3_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_SPI3_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <MX_SPI3_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_SPI3_Init+0x64>)
 8001270:	220a      	movs	r2, #10
 8001272:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	@ (8001288 <MX_SPI3_Init+0x64>)
 8001276:	f006 ff41 	bl	80080fc <HAL_SPI_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001280:	f000 fb4c 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000450 	.word	0x20000450
 800128c:	40003c00 	.word	0x40003c00

08001290 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b096      	sub	sp, #88	@ 0x58
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
 80012be:	615a      	str	r2, [r3, #20]
 80012c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2220      	movs	r2, #32
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f010 f85a 	bl	8011382 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ce:	4b3e      	ldr	r3, [pc, #248]	@ (80013c8 <MX_TIM1_Init+0x138>)
 80012d0:	4a3e      	ldr	r2, [pc, #248]	@ (80013cc <MX_TIM1_Init+0x13c>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 124-1;
 80012d4:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <MX_TIM1_Init+0x138>)
 80012d6:	227b      	movs	r2, #123	@ 0x7b
 80012d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b3b      	ldr	r3, [pc, #236]	@ (80013c8 <MX_TIM1_Init+0x138>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80012e0:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <MX_TIM1_Init+0x138>)
 80012e2:	2209      	movs	r2, #9
 80012e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b38      	ldr	r3, [pc, #224]	@ (80013c8 <MX_TIM1_Init+0x138>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ec:	4b36      	ldr	r3, [pc, #216]	@ (80013c8 <MX_TIM1_Init+0x138>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b35      	ldr	r3, [pc, #212]	@ (80013c8 <MX_TIM1_Init+0x138>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f8:	4833      	ldr	r0, [pc, #204]	@ (80013c8 <MX_TIM1_Init+0x138>)
 80012fa:	f007 f9a7 	bl	800864c <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001304:	f000 fb0a 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001312:	4619      	mov	r1, r3
 8001314:	482c      	ldr	r0, [pc, #176]	@ (80013c8 <MX_TIM1_Init+0x138>)
 8001316:	f007 fd71 	bl	8008dfc <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001320:	f000 fafc 	bl	800191c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001324:	4828      	ldr	r0, [pc, #160]	@ (80013c8 <MX_TIM1_Init+0x138>)
 8001326:	f007 fa39 	bl	800879c <HAL_TIM_PWM_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001330:	f000 faf4 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001340:	4619      	mov	r1, r3
 8001342:	4821      	ldr	r0, [pc, #132]	@ (80013c8 <MX_TIM1_Init+0x138>)
 8001344:	f008 f970 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800134e:	f000 fae5 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001352:	2360      	movs	r3, #96	@ 0x60
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800135e:	2300      	movs	r3, #0
 8001360:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	4814      	ldr	r0, [pc, #80]	@ (80013c8 <MX_TIM1_Init+0x138>)
 8001378:	f007 fc7e 	bl	8008c78 <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001382:	f000 facb 	bl	800191c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800139a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <MX_TIM1_Init+0x138>)
 80013aa:	f008 f9b9 	bl	8009720 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013b4:	f000 fab2 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <MX_TIM1_Init+0x138>)
 80013ba:	f001 f857 	bl	800246c <HAL_TIM_MspPostInit>

}
 80013be:	bf00      	nop
 80013c0:	3758      	adds	r7, #88	@ 0x58
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200004a8 	.word	0x200004a8
 80013cc:	40010000 	.word	0x40010000

080013d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <MX_TIM10_Init+0x8c>)
 80013ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001460 <MX_TIM10_Init+0x90>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168000-1;//36000-1;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <MX_TIM10_Init+0x8c>)
 80013f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <MX_TIM10_Init+0x94>)
 80013f2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <MX_TIM10_Init+0x8c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;//30000-1;
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <MX_TIM10_Init+0x8c>)
 80013fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001400:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <MX_TIM10_Init+0x8c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_TIM10_Init+0x8c>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800140e:	4813      	ldr	r0, [pc, #76]	@ (800145c <MX_TIM10_Init+0x8c>)
 8001410:	f007 f91c 	bl	800864c <HAL_TIM_Base_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800141a:	f000 fa7f 	bl	800191c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 800141e:	480f      	ldr	r0, [pc, #60]	@ (800145c <MX_TIM10_Init+0x8c>)
 8001420:	f007 f963 	bl	80086ea <HAL_TIM_OC_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800142a:	f000 fa77 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	@ (800145c <MX_TIM10_Init+0x8c>)
 8001446:	f007 fbbb 	bl	8008bc0 <HAL_TIM_OC_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001450:	f000 fa64 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3720      	adds	r7, #32
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200004f0 	.word	0x200004f0
 8001460:	40014400 	.word	0x40014400
 8001464:	0002903f 	.word	0x0002903f

08001468 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	615a      	str	r2, [r3, #20]
 800147e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001480:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <MX_TIM11_Init+0x90>)
 8001482:	4a1e      	ldr	r2, [pc, #120]	@ (80014fc <MX_TIM11_Init+0x94>)
 8001484:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 36000-1;
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <MX_TIM11_Init+0x90>)
 8001488:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800148c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_TIM11_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 30000-1;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_TIM11_Init+0x90>)
 8001496:	f247 522f 	movw	r2, #29999	@ 0x752f
 800149a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_TIM11_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <MX_TIM11_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014a8:	4813      	ldr	r0, [pc, #76]	@ (80014f8 <MX_TIM11_Init+0x90>)
 80014aa:	f007 f8cf 	bl	800864c <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 80014b4:	f000 fa32 	bl	800191c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80014b8:	480f      	ldr	r0, [pc, #60]	@ (80014f8 <MX_TIM11_Init+0x90>)
 80014ba:	f007 f916 	bl	80086ea <HAL_TIM_OC_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 80014c4:	f000 fa2a 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	@ (80014f8 <MX_TIM11_Init+0x90>)
 80014e0:	f007 fb6e 	bl	8008bc0 <HAL_TIM_OC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 80014ea:	f000 fa17 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000538 	.word	0x20000538
 80014fc:	40014800 	.word	0x40014800

08001500 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <MX_TIM13_Init+0x90>)
 800151a:	4a1e      	ldr	r2, [pc, #120]	@ (8001594 <MX_TIM13_Init+0x94>)
 800151c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 18000-1;
 800151e:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <MX_TIM13_Init+0x90>)
 8001520:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001524:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <MX_TIM13_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 30000-1;
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <MX_TIM13_Init+0x90>)
 800152e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001532:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_TIM13_Init+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_TIM13_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001540:	4813      	ldr	r0, [pc, #76]	@ (8001590 <MX_TIM13_Init+0x90>)
 8001542:	f007 f883 	bl	800864c <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 800154c:	f000 f9e6 	bl	800191c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8001550:	480f      	ldr	r0, [pc, #60]	@ (8001590 <MX_TIM13_Init+0x90>)
 8001552:	f007 f8ca 	bl	80086ea <HAL_TIM_OC_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800155c:	f000 f9de 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	@ (8001590 <MX_TIM13_Init+0x90>)
 8001578:	f007 fb22 	bl	8008bc0 <HAL_TIM_OC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001582:	f000 f9cb 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000580 	.word	0x20000580
 8001594:	40001c00 	.word	0x40001c00

08001598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_USART2_UART_Init+0x4c>)
 800159e:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <MX_USART2_UART_Init+0x50>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015d0:	f008 f90c 	bl	80097ec <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015da:	f000 f99f 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000628 	.word	0x20000628
 80015e8:	40004400 	.word	0x40004400

080015ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_USART3_UART_Init+0x4c>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <MX_USART3_UART_Init+0x50>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <MX_USART3_UART_Init+0x4c>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_USART3_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_USART3_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <MX_USART3_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_USART3_UART_Init+0x4c>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <MX_USART3_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_USART3_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_USART3_UART_Init+0x4c>)
 8001624:	f008 f8e2 	bl	80097ec <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800162e:	f000 f975 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000670 	.word	0x20000670
 800163c:	40004800 	.word	0x40004800

08001640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b23      	ldr	r3, [pc, #140]	@ (80016d8 <MX_DMA_Init+0x98>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a22      	ldr	r2, [pc, #136]	@ (80016d8 <MX_DMA_Init+0x98>)
 8001650:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <MX_DMA_Init+0x98>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <MX_DMA_Init+0x98>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a1b      	ldr	r2, [pc, #108]	@ (80016d8 <MX_DMA_Init+0x98>)
 800166c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <MX_DMA_Init+0x98>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	200e      	movs	r0, #14
 8001684:	f001 feff 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001688:	200e      	movs	r0, #14
 800168a:	f001 ff18 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2011      	movs	r0, #17
 8001694:	f001 fef7 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001698:	2011      	movs	r0, #17
 800169a:	f001 ff10 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2038      	movs	r0, #56	@ 0x38
 80016a4:	f001 feef 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016a8:	2038      	movs	r0, #56	@ 0x38
 80016aa:	f001 ff08 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2039      	movs	r0, #57	@ 0x39
 80016b4:	f001 fee7 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80016b8:	2039      	movs	r0, #57	@ 0x39
 80016ba:	f001 ff00 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	203c      	movs	r0, #60	@ 0x3c
 80016c4:	f001 fedf 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80016c8:	203c      	movs	r0, #60	@ 0x3c
 80016ca:	f001 fef8 	bl	80034be <HAL_NVIC_EnableIRQ>

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800

080016dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08c      	sub	sp, #48	@ 0x30
 80016e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	4b83      	ldr	r3, [pc, #524]	@ (8001904 <MX_GPIO_Init+0x228>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a82      	ldr	r2, [pc, #520]	@ (8001904 <MX_GPIO_Init+0x228>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b80      	ldr	r3, [pc, #512]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	4b7c      	ldr	r3, [pc, #496]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a7b      	ldr	r2, [pc, #492]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b79      	ldr	r3, [pc, #484]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b75      	ldr	r3, [pc, #468]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a74      	ldr	r2, [pc, #464]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b72      	ldr	r3, [pc, #456]	@ (8001904 <MX_GPIO_Init+0x228>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b6e      	ldr	r3, [pc, #440]	@ (8001904 <MX_GPIO_Init+0x228>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a6d      	ldr	r2, [pc, #436]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b6b      	ldr	r3, [pc, #428]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b67      	ldr	r3, [pc, #412]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a66      	ldr	r2, [pc, #408]	@ (8001904 <MX_GPIO_Init+0x228>)
 800176c:	f043 0310 	orr.w	r3, r3, #16
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b64      	ldr	r3, [pc, #400]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b60      	ldr	r3, [pc, #384]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a5f      	ldr	r2, [pc, #380]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001788:	f043 0308 	orr.w	r3, r3, #8
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b5d      	ldr	r3, [pc, #372]	@ (8001904 <MX_GPIO_Init+0x228>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2101      	movs	r1, #1
 800179e:	485a      	ldr	r0, [pc, #360]	@ (8001908 <MX_GPIO_Init+0x22c>)
 80017a0:	f002 fea4 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPEC_LED_GPIO_Port, SPEC_LED_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2180      	movs	r1, #128	@ 0x80
 80017a8:	4858      	ldr	r0, [pc, #352]	@ (800190c <MX_GPIO_Init+0x230>)
 80017aa:	f002 fe9f 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin|READY_LED_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80017b4:	4856      	ldr	r0, [pc, #344]	@ (8001910 <MX_GPIO_Init+0x234>)
 80017b6:	f002 fe99 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Bcode_INIT_Pin|BT_INIT_Pin|LCD_CE_Pin|LCD_DC_Pin
 80017ba:	2200      	movs	r2, #0
 80017bc:	f641 0107 	movw	r1, #6151	@ 0x1807
 80017c0:	4854      	ldr	r0, [pc, #336]	@ (8001914 <MX_GPIO_Init+0x238>)
 80017c2:	f002 fe93 	bl	80044ec <HAL_GPIO_WritePin>
                          |LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80017cc:	4852      	ldr	r0, [pc, #328]	@ (8001918 <MX_GPIO_Init+0x23c>)
 80017ce:	f002 fe8d 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4847      	ldr	r0, [pc, #284]	@ (8001908 <MX_GPIO_Init+0x22c>)
 80017ea:	f002 fccb 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : NAVIGATE_BTN_Pin SPEC_EOS_Pin */
  GPIO_InitStruct.Pin = NAVIGATE_BTN_Pin|SPEC_EOS_Pin;
 80017ee:	2311      	movs	r3, #17
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	4842      	ldr	r0, [pc, #264]	@ (800190c <MX_GPIO_Init+0x230>)
 8001804:	f002 fcbe 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : StartTest_BTN_Pin */
  GPIO_InitStruct.Pin = StartTest_BTN_Pin;
 8001808:	2320      	movs	r3, #32
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(StartTest_BTN_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	483c      	ldr	r0, [pc, #240]	@ (800190c <MX_GPIO_Init+0x230>)
 800181c:	f002 fcb2 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_LED_Pin */
  GPIO_InitStruct.Pin = SPEC_LED_Pin;
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPEC_LED_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	4835      	ldr	r0, [pc, #212]	@ (800190c <MX_GPIO_Init+0x230>)
 8001838:	f002 fca4 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERR_BUZZER_Pin READY_LED_Pin */
  GPIO_InitStruct.Pin = ERR_BUZZER_Pin|READY_LED_Pin;
 800183c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	482e      	ldr	r0, [pc, #184]	@ (8001910 <MX_GPIO_Init+0x234>)
 8001856:	f002 fc95 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : NEXT_BTN_Pin PREV_BTN_Pin */
  GPIO_InitStruct.Pin = NEXT_BTN_Pin|PREV_BTN_Pin;
 800185a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	4828      	ldr	r0, [pc, #160]	@ (8001910 <MX_GPIO_Init+0x234>)
 8001870:	f002 fc88 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : IsCharging_EXTI_Pin */
  GPIO_InitStruct.Pin = IsCharging_EXTI_Pin;
 8001874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800187a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001880:	2302      	movs	r3, #2
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IsCharging_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4822      	ldr	r0, [pc, #136]	@ (8001914 <MX_GPIO_Init+0x238>)
 800188c:	f002 fc7a 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : Bcode_INIT_Pin BT_INIT_Pin LCD_CE_Pin LCD_DC_Pin
                           LCD_RST_Pin */
  GPIO_InitStruct.Pin = Bcode_INIT_Pin|BT_INIT_Pin|LCD_CE_Pin|LCD_DC_Pin
 8001890:	f641 0307 	movw	r3, #6151	@ 0x1807
 8001894:	61fb      	str	r3, [r7, #28]
                          |LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	481a      	ldr	r0, [pc, #104]	@ (8001914 <MX_GPIO_Init+0x238>)
 80018aa:	f002 fc6b 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEC_START_Pin SPEC_GAIN_Pin */
  GPIO_InitStruct.Pin = SPEC_START_Pin|SPEC_GAIN_Pin;
 80018ae:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	4619      	mov	r1, r3
 80018c6:	4814      	ldr	r0, [pc, #80]	@ (8001918 <MX_GPIO_Init+0x23c>)
 80018c8:	f002 fc5c 	bl	8004184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* EXTI interrupt init */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2102      	movs	r1, #2
 80018d0:	2017      	movs	r0, #23
 80018d2:	f001 fdd8 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018d6:	2017      	movs	r0, #23
 80018d8:	f001 fdf1 	bl	80034be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2102      	movs	r1, #2
 80018e0:	200a      	movs	r0, #10
 80018e2:	f001 fdd0 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018e6:	200a      	movs	r0, #10
 80018e8:	f001 fde9 	bl	80034be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2102      	movs	r1, #2
 80018f0:	2006      	movs	r0, #6
 80018f2:	f001 fdc8 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018f6:	2006      	movs	r0, #6
 80018f8:	f001 fde1 	bl	80034be <HAL_NVIC_EnableIRQ>

     // HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin, GPIO_PIN_SET);
/* USER CODE END MX_GPIO_Init_2 */
}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	@ 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40020800 	.word	0x40020800
 800190c:	40020000 	.word	0x40020000
 8001910:	40021000 	.word	0x40021000
 8001914:	40020c00 	.word	0x40020c00
 8001918:	40020400 	.word	0x40020400

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <Error_Handler+0x8>

08001928 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2101      	movs	r1, #1
 8001930:	480a      	ldr	r0, [pc, #40]	@ (800195c <ssd1306_Reset+0x34>)
 8001932:	f002 fddb 	bl	80044ec <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2104      	movs	r1, #4
 800193a:	4808      	ldr	r0, [pc, #32]	@ (800195c <ssd1306_Reset+0x34>)
 800193c:	f002 fdd6 	bl	80044ec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001940:	200a      	movs	r0, #10
 8001942:	f001 f88f 	bl	8002a64 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	2104      	movs	r1, #4
 800194a:	4804      	ldr	r0, [pc, #16]	@ (800195c <ssd1306_Reset+0x34>)
 800194c:	f002 fdce 	bl	80044ec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001950:	200a      	movs	r0, #10
 8001952:	f001 f887 	bl	8002a64 <HAL_Delay>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40020c00 	.word	0x40020c00

08001960 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800196a:	2200      	movs	r2, #0
 800196c:	2101      	movs	r1, #1
 800196e:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <ssd1306_WriteCommand+0x40>)
 8001970:	f002 fdbc 	bl	80044ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001974:	2200      	movs	r2, #0
 8001976:	2102      	movs	r1, #2
 8001978:	4809      	ldr	r0, [pc, #36]	@ (80019a0 <ssd1306_WriteCommand+0x40>)
 800197a:	f002 fdb7 	bl	80044ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800197e:	1df9      	adds	r1, r7, #7
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	2201      	movs	r2, #1
 8001986:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <ssd1306_WriteCommand+0x44>)
 8001988:	f006 fc41 	bl	800820e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800198c:	2201      	movs	r2, #1
 800198e:	2101      	movs	r1, #1
 8001990:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <ssd1306_WriteCommand+0x40>)
 8001992:	f002 fdab 	bl	80044ec <HAL_GPIO_WritePin>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	20000450 	.word	0x20000450

080019a8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80019b2:	2200      	movs	r2, #0
 80019b4:	2101      	movs	r1, #1
 80019b6:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <ssd1306_WriteData+0x40>)
 80019b8:	f002 fd98 	bl	80044ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80019bc:	2201      	movs	r2, #1
 80019be:	2102      	movs	r1, #2
 80019c0:	4809      	ldr	r0, [pc, #36]	@ (80019e8 <ssd1306_WriteData+0x40>)
 80019c2:	f002 fd93 	bl	80044ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4806      	ldr	r0, [pc, #24]	@ (80019ec <ssd1306_WriteData+0x44>)
 80019d2:	f006 fc1c 	bl	800820e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80019d6:	2201      	movs	r2, #1
 80019d8:	2101      	movs	r1, #1
 80019da:	4803      	ldr	r0, [pc, #12]	@ (80019e8 <ssd1306_WriteData+0x40>)
 80019dc:	f002 fd86 	bl	80044ec <HAL_GPIO_WritePin>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40020c00 	.word	0x40020c00
 80019ec:	20000450 	.word	0x20000450

080019f0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80019f4:	f7ff ff98 	bl	8001928 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(10);  //10
 80019f8:	200a      	movs	r0, #10
 80019fa:	f001 f833 	bl	8002a64 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 fa7e 	bl	8001f00 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a04:	2020      	movs	r0, #32
 8001a06:	f7ff ffab 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff ffa8 	bl	8001960 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a10:	20b0      	movs	r0, #176	@ 0xb0
 8001a12:	f7ff ffa5 	bl	8001960 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a16:	20c8      	movs	r0, #200	@ 0xc8
 8001a18:	f7ff ffa2 	bl	8001960 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff ff9f 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a22:	2010      	movs	r0, #16
 8001a24:	f7ff ff9c 	bl	8001960 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a28:	2040      	movs	r0, #64	@ 0x40
 8001a2a:	f7ff ff99 	bl	8001960 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a2e:	20ff      	movs	r0, #255	@ 0xff
 8001a30:	f000 fa53 	bl	8001eda <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a34:	20a1      	movs	r0, #161	@ 0xa1
 8001a36:	f7ff ff93 	bl	8001960 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a3a:	20a6      	movs	r0, #166	@ 0xa6
 8001a3c:	f7ff ff90 	bl	8001960 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a40:	20a8      	movs	r0, #168	@ 0xa8
 8001a42:	f7ff ff8d 	bl	8001960 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001a46:	203f      	movs	r0, #63	@ 0x3f
 8001a48:	f7ff ff8a 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a4c:	20a4      	movs	r0, #164	@ 0xa4
 8001a4e:	f7ff ff87 	bl	8001960 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001a52:	20d3      	movs	r0, #211	@ 0xd3
 8001a54:	f7ff ff84 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff ff81 	bl	8001960 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a5e:	20d5      	movs	r0, #213	@ 0xd5
 8001a60:	f7ff ff7e 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001a64:	20f0      	movs	r0, #240	@ 0xf0
 8001a66:	f7ff ff7b 	bl	8001960 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a6a:	20d9      	movs	r0, #217	@ 0xd9
 8001a6c:	f7ff ff78 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001a70:	2022      	movs	r0, #34	@ 0x22
 8001a72:	f7ff ff75 	bl	8001960 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001a76:	20da      	movs	r0, #218	@ 0xda
 8001a78:	f7ff ff72 	bl	8001960 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001a7c:	2012      	movs	r0, #18
 8001a7e:	f7ff ff6f 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a82:	20db      	movs	r0, #219	@ 0xdb
 8001a84:	f7ff ff6c 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a88:	2020      	movs	r0, #32
 8001a8a:	f7ff ff69 	bl	8001960 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001a8e:	208d      	movs	r0, #141	@ 0x8d
 8001a90:	f7ff ff66 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a94:	2014      	movs	r0, #20
 8001a96:	f7ff ff63 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 fa30 	bl	8001f00 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 f80f 	bl	8001ac4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001aa6:	f000 f825 	bl	8001af4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <ssd1306_Init+0xd0>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <ssd1306_Init+0xd0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001ab6:	4b02      	ldr	r3, [pc, #8]	@ (8001ac0 <ssd1306_Init+0xd0>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	711a      	strb	r2, [r3, #4]
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000b78 	.word	0x20000b78

08001ac4 <ssd1306_Fill>:

	/* Return OK */
	return 1;
}
/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <ssd1306_Fill+0x14>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e000      	b.n	8001ada <ssd1306_Fill+0x16>
 8001ad8:	23ff      	movs	r3, #255	@ 0xff
 8001ada:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4803      	ldr	r0, [pc, #12]	@ (8001af0 <ssd1306_Fill+0x2c>)
 8001ae2:	f00f fc4e 	bl	8011382 <memset>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000778 	.word	0x20000778

08001af4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	71fb      	strb	r3, [r7, #7]
 8001afe:	e016      	b.n	8001b2e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	3b50      	subs	r3, #80	@ 0x50
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff2a 	bl	8001960 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff ff27 	bl	8001960 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001b12:	2010      	movs	r0, #16
 8001b14:	f7ff ff24 	bl	8001960 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	01db      	lsls	r3, r3, #7
 8001b1c:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <ssd1306_UpdateScreen+0x4c>)
 8001b1e:	4413      	add	r3, r2
 8001b20:	2180      	movs	r1, #128	@ 0x80
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff40 	bl	80019a8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	71fb      	strb	r3, [r7, #7]
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b07      	cmp	r3, #7
 8001b32:	d9e5      	bls.n	8001b00 <ssd1306_UpdateScreen+0xc>
    }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000778 	.word	0x20000778

08001b44 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	71bb      	strb	r3, [r7, #6]
 8001b52:	4613      	mov	r3, r2
 8001b54:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db3d      	blt.n	8001bda <ssd1306_DrawPixel+0x96>
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b62:	d83a      	bhi.n	8001bda <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d11a      	bne.n	8001ba0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	79bb      	ldrb	r3, [r7, #6]
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	b2d8      	uxtb	r0, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	01db      	lsls	r3, r3, #7
 8001b76:	4413      	add	r3, r2
 8001b78:	4a1b      	ldr	r2, [pc, #108]	@ (8001be8 <ssd1306_DrawPixel+0xa4>)
 8001b7a:	5cd3      	ldrb	r3, [r2, r3]
 8001b7c:	b25a      	sxtb	r2, r3
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b259      	sxtb	r1, r3
 8001b90:	79fa      	ldrb	r2, [r7, #7]
 8001b92:	4603      	mov	r3, r0
 8001b94:	01db      	lsls	r3, r3, #7
 8001b96:	4413      	add	r3, r2
 8001b98:	b2c9      	uxtb	r1, r1
 8001b9a:	4a13      	ldr	r2, [pc, #76]	@ (8001be8 <ssd1306_DrawPixel+0xa4>)
 8001b9c:	54d1      	strb	r1, [r2, r3]
 8001b9e:	e01d      	b.n	8001bdc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ba0:	79fa      	ldrb	r2, [r7, #7]
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	b2d8      	uxtb	r0, r3
 8001ba8:	4603      	mov	r3, r0
 8001baa:	01db      	lsls	r3, r3, #7
 8001bac:	4413      	add	r3, r2
 8001bae:	4a0e      	ldr	r2, [pc, #56]	@ (8001be8 <ssd1306_DrawPixel+0xa4>)
 8001bb0:	5cd3      	ldrb	r3, [r2, r3]
 8001bb2:	b25a      	sxtb	r2, r3
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	b259      	sxtb	r1, r3
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	4603      	mov	r3, r0
 8001bce:	01db      	lsls	r3, r3, #7
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b2c9      	uxtb	r1, r1
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <ssd1306_DrawPixel+0xa4>)
 8001bd6:	54d1      	strb	r1, [r2, r3]
 8001bd8:	e000      	b.n	8001bdc <ssd1306_DrawPixel+0x98>
        return;
 8001bda:	bf00      	nop
    }
}
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000778 	.word	0x20000778

08001bec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4638      	mov	r0, r7
 8001bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	2b1f      	cmp	r3, #31
 8001c02:	d902      	bls.n	8001c0a <ssd1306_WriteChar+0x1e>
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b7e      	cmp	r3, #126	@ 0x7e
 8001c08:	d901      	bls.n	8001c0e <ssd1306_WriteChar+0x22>
        return 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e077      	b.n	8001cfe <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d08 <ssd1306_WriteChar+0x11c>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	783b      	ldrb	r3, [r7, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	2b80      	cmp	r3, #128	@ 0x80
 8001c1a:	dc06      	bgt.n	8001c2a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d08 <ssd1306_WriteChar+0x11c>)
 8001c1e:	885b      	ldrh	r3, [r3, #2]
 8001c20:	461a      	mov	r2, r3
 8001c22:	787b      	ldrb	r3, [r7, #1]
 8001c24:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001c26:	2b40      	cmp	r3, #64	@ 0x40
 8001c28:	dd01      	ble.n	8001c2e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e067      	b.n	8001cfe <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e04e      	b.n	8001cd2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	3b20      	subs	r3, #32
 8001c3a:	7879      	ldrb	r1, [r7, #1]
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4619      	mov	r1, r3
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	440b      	add	r3, r1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	e036      	b.n	8001cc2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <ssd1306_WriteChar+0x11c>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	b2d8      	uxtb	r0, r3
 8001c72:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <ssd1306_WriteChar+0x11c>)
 8001c74:	885b      	ldrh	r3, [r3, #2]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7ff ff5d 	bl	8001b44 <ssd1306_DrawPixel>
 8001c8a:	e017      	b.n	8001cbc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <ssd1306_WriteChar+0x11c>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	b2d8      	uxtb	r0, r3
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <ssd1306_WriteChar+0x11c>)
 8001c9c:	885b      	ldrh	r3, [r3, #2]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b2d9      	uxtb	r1, r3
 8001ca8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f7ff ff44 	bl	8001b44 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	783b      	ldrb	r3, [r7, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d3c3      	bcc.n	8001c54 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	787b      	ldrb	r3, [r7, #1]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d3ab      	bcc.n	8001c34 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <ssd1306_WriteChar+0x11c>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d005      	beq.n	8001cf2 <ssd1306_WriteChar+0x106>
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	3a20      	subs	r2, #32
 8001cec:	440a      	add	r2, r1
 8001cee:	7812      	ldrb	r2, [r2, #0]
 8001cf0:	e000      	b.n	8001cf4 <ssd1306_WriteChar+0x108>
 8001cf2:	783a      	ldrb	r2, [r7, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <ssd1306_WriteChar+0x11c>)
 8001cfa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	@ 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd90      	pop	{r4, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000b78 	.word	0x20000b78

08001d0c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	4638      	mov	r0, r7
 8001d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001d1a:	e013      	b.n	8001d44 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	7818      	ldrb	r0, [r3, #0]
 8001d20:	7e3b      	ldrb	r3, [r7, #24]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	463b      	mov	r3, r7
 8001d26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d28:	f7ff ff60 	bl	8001bec <ssd1306_WriteChar>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d002      	beq.n	8001d3e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	e008      	b.n	8001d50 <ssd1306_WriteString+0x44>
        }
        str++;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3301      	adds	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e7      	bne.n	8001d1c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460a      	mov	r2, r1
 8001d62:	71fb      	strb	r3, [r7, #7]
 8001d64:	4613      	mov	r3, r2
 8001d66:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <ssd1306_SetCursor+0x2c>)
 8001d6e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d70:	79bb      	ldrb	r3, [r7, #6]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	4b03      	ldr	r3, [pc, #12]	@ (8001d84 <ssd1306_SetCursor+0x2c>)
 8001d76:	805a      	strh	r2, [r3, #2]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20000b78 	.word	0x20000b78

08001d88 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4604      	mov	r4, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	4623      	mov	r3, r4
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71bb      	strb	r3, [r7, #6]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	717b      	strb	r3, [r7, #5]
 8001da2:	4613      	mov	r3, r2
 8001da4:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	4293      	cmp	r3, r2
 8001dac:	bf28      	it	cs
 8001dae:	4613      	movcs	r3, r2
 8001db0:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001db2:	797a      	ldrb	r2, [r7, #5]
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	4293      	cmp	r3, r2
 8001db8:	bf38      	it	cc
 8001dba:	4613      	movcc	r3, r2
 8001dbc:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001dbe:	79ba      	ldrb	r2, [r7, #6]
 8001dc0:	793b      	ldrb	r3, [r7, #4]
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	bf28      	it	cs
 8001dc6:	4613      	movcs	r3, r2
 8001dc8:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001dca:	793a      	ldrb	r2, [r7, #4]
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	bf38      	it	cc
 8001dd2:	4613      	movcc	r3, r2
 8001dd4:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e017      	b.n	8001e0c <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001ddc:	7b7b      	ldrb	r3, [r7, #13]
 8001dde:	73bb      	strb	r3, [r7, #14]
 8001de0:	e009      	b.n	8001df6 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001de2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001de6:	7bf9      	ldrb	r1, [r7, #15]
 8001de8:	7bbb      	ldrb	r3, [r7, #14]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff feaa 	bl	8001b44 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001df0:	7bbb      	ldrb	r3, [r7, #14]
 8001df2:	3301      	adds	r3, #1
 8001df4:	73bb      	strb	r3, [r7, #14]
 8001df6:	7bba      	ldrb	r2, [r7, #14]
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d803      	bhi.n	8001e06 <ssd1306_FillRectangle+0x7e>
 8001dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	daed      	bge.n	8001de2 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	7abb      	ldrb	r3, [r7, #10]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d803      	bhi.n	8001e1c <ssd1306_FillRectangle+0x94>
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e18:	d9e0      	bls.n	8001ddc <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
}
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}

08001e24 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	603a      	str	r2, [r7, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	460b      	mov	r3, r1
 8001e34:	71bb      	strb	r3, [r7, #6]
 8001e36:	4613      	mov	r3, r2
 8001e38:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001e3a:	797b      	ldrb	r3, [r7, #5]
 8001e3c:	3307      	adds	r3, #7
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da00      	bge.n	8001e44 <ssd1306_DrawBitmap+0x20>
 8001e42:	3307      	adds	r3, #7
 8001e44:	10db      	asrs	r3, r3, #3
 8001e46:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db3e      	blt.n	8001ed2 <ssd1306_DrawBitmap+0xae>
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e58:	d83b      	bhi.n	8001ed2 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73bb      	strb	r3, [r7, #14]
 8001e5e:	e033      	b.n	8001ec8 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	737b      	strb	r3, [r7, #13]
 8001e64:	e026      	b.n	8001eb4 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001e66:	7b7b      	ldrb	r3, [r7, #13]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e00d      	b.n	8001e94 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	7b7a      	ldrb	r2, [r7, #13]
 8001e84:	08d2      	lsrs	r2, r2, #3
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	4413      	add	r3, r2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	da08      	bge.n	8001eae <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001e9c:	79fa      	ldrb	r2, [r7, #7]
 8001e9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	7f3a      	ldrb	r2, [r7, #28]
 8001ea6:	79b9      	ldrb	r1, [r7, #6]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fe4b 	bl	8001b44 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001eae:	7b7b      	ldrb	r3, [r7, #13]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	737b      	strb	r3, [r7, #13]
 8001eb4:	7b7a      	ldrb	r2, [r7, #13]
 8001eb6:	797b      	ldrb	r3, [r7, #5]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3d4      	bcc.n	8001e66 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001ebc:	7bbb      	ldrb	r3, [r7, #14]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	73bb      	strb	r3, [r7, #14]
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	71bb      	strb	r3, [r7, #6]
 8001ec8:	7bba      	ldrb	r2, [r7, #14]
 8001eca:	7e3b      	ldrb	r3, [r7, #24]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3c7      	bcc.n	8001e60 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001ed0:	e000      	b.n	8001ed4 <ssd1306_DrawBitmap+0xb0>
        return;
 8001ed2:	bf00      	nop
}
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ee4:	2381      	movs	r3, #129	@ 0x81
 8001ee6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fd38 	bl	8001960 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fd34 	bl	8001960 <ssd1306_WriteCommand>
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001f10:	23af      	movs	r3, #175	@ 0xaf
 8001f12:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <ssd1306_SetDisplayOn+0x38>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	715a      	strb	r2, [r3, #5]
 8001f1a:	e004      	b.n	8001f26 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001f1c:	23ae      	movs	r3, #174	@ 0xae
 8001f1e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <ssd1306_SetDisplayOn+0x38>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fd19 	bl	8001960 <ssd1306_WriteCommand>
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000b78 	.word	0x20000b78

08001f3c <OLED_DrawBitmap>:
    return SSD1306.DisplayOn;
}

//*********************************************************************************************//
// For 16*8
void OLED_DrawBitmap(uint8_t x, uint8_t y, const uint8_t* bitmap, uint8_t width, uint8_t height) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	603a      	str	r2, [r7, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	71bb      	strb	r3, [r7, #6]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	717b      	strb	r3, [r7, #5]
    for (uint8_t i = 0; i < height; i++) {
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e031      	b.n	8001fbc <OLED_DrawBitmap+0x80>
        for (uint8_t j = 0; j < width; j++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73bb      	strb	r3, [r7, #14]
 8001f5c:	e027      	b.n	8001fae <OLED_DrawBitmap+0x72>
            if (bitmap[i] & (1 << j)) {
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	7bbb      	ldrb	r3, [r7, #14]
 8001f6a:	fa42 f303 	asr.w	r3, r2, r3
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <OLED_DrawBitmap+0x54>
            	ssd1306_DrawPixel(x + j, y + i, White);  // Draw pixel if bit is set
 8001f76:	79fa      	ldrb	r2, [r7, #7]
 8001f78:	7bbb      	ldrb	r3, [r7, #14]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b2d8      	uxtb	r0, r3
 8001f7e:	79ba      	ldrb	r2, [r7, #6]
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	4413      	add	r3, r2
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2201      	movs	r2, #1
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7ff fddb 	bl	8001b44 <ssd1306_DrawPixel>
 8001f8e:	e00b      	b.n	8001fa8 <OLED_DrawBitmap+0x6c>
            } else {
            	ssd1306_DrawPixel(x + j, y + i, Black);  // Clear pixel if bit is not set
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	4413      	add	r3, r2
 8001f96:	b2d8      	uxtb	r0, r3
 8001f98:	79ba      	ldrb	r2, [r7, #6]
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7ff fdce 	bl	8001b44 <ssd1306_DrawPixel>
        for (uint8_t j = 0; j < width; j++) {
 8001fa8:	7bbb      	ldrb	r3, [r7, #14]
 8001faa:	3301      	adds	r3, #1
 8001fac:	73bb      	strb	r3, [r7, #14]
 8001fae:	7bba      	ldrb	r2, [r7, #14]
 8001fb0:	797b      	ldrb	r3, [r7, #5]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d3d3      	bcc.n	8001f5e <OLED_DrawBitmap+0x22>
    for (uint8_t i = 0; i < height; i++) {
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	7e3b      	ldrb	r3, [r7, #24]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d3c9      	bcc.n	8001f58 <OLED_DrawBitmap+0x1c>
            }
        }
    }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4b10      	ldr	r3, [pc, #64]	@ (800201c <HAL_MspInit+0x4c>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	4a0f      	ldr	r2, [pc, #60]	@ (800201c <HAL_MspInit+0x4c>)
 8001fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HAL_MspInit+0x4c>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <HAL_MspInit+0x4c>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	4a08      	ldr	r2, [pc, #32]	@ (800201c <HAL_MspInit+0x4c>)
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002000:	6413      	str	r3, [r2, #64]	@ 0x40
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_MspInit+0x4c>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800

08002020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	@ 0x30
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a5e      	ldr	r2, [pc, #376]	@ (80021b8 <HAL_ADC_MspInit+0x198>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d157      	bne.n	80020f2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	4b5d      	ldr	r3, [pc, #372]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	4a5c      	ldr	r2, [pc, #368]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002050:	6453      	str	r3, [r2, #68]	@ 0x44
 8002052:	4b5a      	ldr	r3, [pc, #360]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	4b56      	ldr	r3, [pc, #344]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	4a55      	ldr	r2, [pc, #340]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	@ 0x30
 800206e:	4b53      	ldr	r3, [pc, #332]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 800207a:	2301      	movs	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	4619      	mov	r1, r3
 800208c:	484c      	ldr	r0, [pc, #304]	@ (80021c0 <HAL_ADC_MspInit+0x1a0>)
 800208e:	f002 f879 	bl	8004184 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002092:	4b4c      	ldr	r3, [pc, #304]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002094:	4a4c      	ldr	r2, [pc, #304]	@ (80021c8 <HAL_ADC_MspInit+0x1a8>)
 8002096:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002098:	4b4a      	ldr	r3, [pc, #296]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 800209a:	2200      	movs	r2, #0
 800209c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800209e:	4b49      	ldr	r3, [pc, #292]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a4:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020aa:	4b46      	ldr	r3, [pc, #280]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020b2:	4b44      	ldr	r3, [pc, #272]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ba:	4b42      	ldr	r3, [pc, #264]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80020c2:	4b40      	ldr	r3, [pc, #256]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020c8:	4b3e      	ldr	r3, [pc, #248]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ce:	4b3d      	ldr	r3, [pc, #244]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020d4:	483b      	ldr	r0, [pc, #236]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020d6:	f001 fa0d 	bl	80034f4 <HAL_DMA_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80020e0:	f7ff fc1c 	bl	800191c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a37      	ldr	r2, [pc, #220]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80020ea:	4a36      	ldr	r2, [pc, #216]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020f0:	e05d      	b.n	80021ae <HAL_ADC_MspInit+0x18e>
  else if(hadc->Instance==ADC3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a35      	ldr	r2, [pc, #212]	@ (80021cc <HAL_ADC_MspInit+0x1ac>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d158      	bne.n	80021ae <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 8002102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002104:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 8002106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210a:	6453      	str	r3, [r2, #68]	@ 0x44
 800210c:	4b2b      	ldr	r3, [pc, #172]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 800210e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b27      	ldr	r3, [pc, #156]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	4a26      	ldr	r2, [pc, #152]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6313      	str	r3, [r2, #48]	@ 0x30
 8002128:	4b24      	ldr	r3, [pc, #144]	@ (80021bc <HAL_ADC_MspInit+0x19c>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002134:	2302      	movs	r3, #2
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002138:	2303      	movs	r3, #3
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	4822      	ldr	r0, [pc, #136]	@ (80021d0 <HAL_ADC_MspInit+0x1b0>)
 8002148:	f002 f81c 	bl	8004184 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 800214c:	4b21      	ldr	r3, [pc, #132]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 800214e:	4a22      	ldr	r2, [pc, #136]	@ (80021d8 <HAL_ADC_MspInit+0x1b8>)
 8002150:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002152:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 8002154:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002158:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215a:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002160:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002166:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 8002168:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800216c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800216e:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 8002170:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002174:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002176:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 8002178:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800217c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 8002180:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002184:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002186:	4b13      	ldr	r3, [pc, #76]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 8002188:	2200      	movs	r2, #0
 800218a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800218c:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 800218e:	2200      	movs	r2, #0
 8002190:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002192:	4810      	ldr	r0, [pc, #64]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 8002194:	f001 f9ae 	bl	80034f4 <HAL_DMA_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_ADC_MspInit+0x182>
      Error_Handler();
 800219e:	f7ff fbbd 	bl	800191c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a0b      	ldr	r2, [pc, #44]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 80021a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80021a8:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <HAL_ADC_MspInit+0x1b4>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80021ae:	bf00      	nop
 80021b0:	3730      	adds	r7, #48	@ 0x30
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40012000 	.word	0x40012000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020400 	.word	0x40020400
 80021c4:	2000033c 	.word	0x2000033c
 80021c8:	40026470 	.word	0x40026470
 80021cc:	40012200 	.word	0x40012200
 80021d0:	40020000 	.word	0x40020000
 80021d4:	2000039c 	.word	0x2000039c
 80021d8:	40026410 	.word	0x40026410

080021dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a29      	ldr	r2, [pc, #164]	@ (80022a0 <HAL_I2C_MspInit+0xc4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d14b      	bne.n	8002296 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_I2C_MspInit+0xc8>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a27      	ldr	r2, [pc, #156]	@ (80022a4 <HAL_I2C_MspInit+0xc8>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <HAL_I2C_MspInit+0xc8>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b21      	ldr	r3, [pc, #132]	@ (80022a4 <HAL_I2C_MspInit+0xc8>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a20      	ldr	r2, [pc, #128]	@ (80022a4 <HAL_I2C_MspInit+0xc8>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b1e      	ldr	r3, [pc, #120]	@ (80022a4 <HAL_I2C_MspInit+0xc8>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = RTC_SDA_Pin;
 8002236:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223c:	2312      	movs	r3, #18
 800223e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002248:	2304      	movs	r3, #4
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RTC_SDA_GPIO_Port, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	4815      	ldr	r0, [pc, #84]	@ (80022a8 <HAL_I2C_MspInit+0xcc>)
 8002254:	f001 ff96 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RTC_SCL_Pin;
 8002258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800225e:	2312      	movs	r3, #18
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800226a:	2304      	movs	r3, #4
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RTC_SCL_GPIO_Port, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	480d      	ldr	r0, [pc, #52]	@ (80022ac <HAL_I2C_MspInit+0xd0>)
 8002276:	f001 ff85 	bl	8004184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_I2C_MspInit+0xc8>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	4a08      	ldr	r2, [pc, #32]	@ (80022a4 <HAL_I2C_MspInit+0xc8>)
 8002284:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002288:	6413      	str	r3, [r2, #64]	@ 0x40
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_I2C_MspInit+0xc8>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	@ 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40005c00 	.word	0x40005c00
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020000 	.word	0x40020000

080022b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	@ (8002334 <HAL_SPI_MspInit+0x84>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12c      	bne.n	800232c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	4a17      	ldr	r2, [pc, #92]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 80022dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e2:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800230a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002318:	2303      	movs	r3, #3
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800231c:	2306      	movs	r3, #6
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4805      	ldr	r0, [pc, #20]	@ (800233c <HAL_SPI_MspInit+0x8c>)
 8002328:	f001 ff2c 	bl	8004184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	@ 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40003c00 	.word	0x40003c00
 8002338:	40023800 	.word	0x40023800
 800233c:	40020800 	.word	0x40020800

08002340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a40      	ldr	r2, [pc, #256]	@ (8002450 <HAL_TIM_Base_MspInit+0x110>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d13e      	bne.n	80023d0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	4b3f      	ldr	r3, [pc, #252]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	4a3e      	ldr	r2, [pc, #248]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6453      	str	r3, [r2, #68]	@ 0x44
 8002362:	4b3c      	ldr	r3, [pc, #240]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800236e:	4b3a      	ldr	r3, [pc, #232]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 8002370:	4a3a      	ldr	r2, [pc, #232]	@ (800245c <HAL_TIM_Base_MspInit+0x11c>)
 8002372:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002374:	4b38      	ldr	r3, [pc, #224]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 8002376:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800237a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800237c:	4b36      	ldr	r3, [pc, #216]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 800237e:	2240      	movs	r2, #64	@ 0x40
 8002380:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002382:	4b35      	ldr	r3, [pc, #212]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002388:	4b33      	ldr	r3, [pc, #204]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 800238a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800238e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002390:	4b31      	ldr	r3, [pc, #196]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 8002392:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002396:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002398:	4b2f      	ldr	r3, [pc, #188]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 800239a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800239e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80023a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80023b2:	4829      	ldr	r0, [pc, #164]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 80023b4:	f001 f89e 	bl	80034f4 <HAL_DMA_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80023be:	f7ff faad 	bl	800191c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a24      	ldr	r2, [pc, #144]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80023c8:	4a23      	ldr	r2, [pc, #140]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80023ce:	e03a      	b.n	8002446 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM10)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a22      	ldr	r2, [pc, #136]	@ (8002460 <HAL_TIM_Base_MspInit+0x120>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d10e      	bne.n	80023f8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
}
 80023f6:	e026      	b.n	8002446 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM11)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a19      	ldr	r2, [pc, #100]	@ (8002464 <HAL_TIM_Base_MspInit+0x124>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002410:	6453      	str	r3, [r2, #68]	@ 0x44
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
}
 800241e:	e012      	b.n	8002446 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM13)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a10      	ldr	r2, [pc, #64]	@ (8002468 <HAL_TIM_Base_MspInit+0x128>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10d      	bne.n	8002446 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 8002434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40010000 	.word	0x40010000
 8002454:	40023800 	.word	0x40023800
 8002458:	200005c8 	.word	0x200005c8
 800245c:	40026428 	.word	0x40026428
 8002460:	40014400 	.word	0x40014400
 8002464:	40014800 	.word	0x40014800
 8002468:	40001c00 	.word	0x40001c00

0800246c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <HAL_TIM_MspPostInit+0x68>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d11e      	bne.n	80024cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <HAL_TIM_MspPostInit+0x6c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a10      	ldr	r2, [pc, #64]	@ (80024d8 <HAL_TIM_MspPostInit+0x6c>)
 8002498:	f043 0310 	orr.w	r3, r3, #16
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <HAL_TIM_MspPostInit+0x6c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SPEC_CLK_Pin;
 80024aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024bc:	2301      	movs	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPEC_CLK_GPIO_Port, &GPIO_InitStruct);
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	4619      	mov	r1, r3
 80024c6:	4805      	ldr	r0, [pc, #20]	@ (80024dc <HAL_TIM_MspPostInit+0x70>)
 80024c8:	f001 fe5c 	bl	8004184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024cc:	bf00      	nop
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40021000 	.word	0x40021000

080024e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	@ 0x30
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a60      	ldr	r2, [pc, #384]	@ (8002680 <HAL_UART_MspInit+0x1a0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d15a      	bne.n	80025b8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	4b5f      	ldr	r3, [pc, #380]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	4a5e      	ldr	r2, [pc, #376]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 800250c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002510:	6413      	str	r3, [r2, #64]	@ 0x40
 8002512:	4b5c      	ldr	r3, [pc, #368]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	61bb      	str	r3, [r7, #24]
 800251c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	4b58      	ldr	r3, [pc, #352]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a57      	ldr	r2, [pc, #348]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b55      	ldr	r3, [pc, #340]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800253a:	230c      	movs	r3, #12
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800254a:	2307      	movs	r3, #7
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	4619      	mov	r1, r3
 8002554:	484c      	ldr	r0, [pc, #304]	@ (8002688 <HAL_UART_MspInit+0x1a8>)
 8002556:	f001 fe15 	bl	8004184 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800255a:	4b4c      	ldr	r3, [pc, #304]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 800255c:	4a4c      	ldr	r2, [pc, #304]	@ (8002690 <HAL_UART_MspInit+0x1b0>)
 800255e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002560:	4b4a      	ldr	r3, [pc, #296]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 8002562:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002566:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002568:	4b48      	ldr	r3, [pc, #288]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 800256a:	2240      	movs	r2, #64	@ 0x40
 800256c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800256e:	4b47      	ldr	r3, [pc, #284]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002574:	4b45      	ldr	r3, [pc, #276]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 8002576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800257a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800257c:	4b43      	ldr	r3, [pc, #268]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002582:	4b42      	ldr	r3, [pc, #264]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002588:	4b40      	ldr	r3, [pc, #256]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800258e:	4b3f      	ldr	r3, [pc, #252]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002594:	4b3d      	ldr	r3, [pc, #244]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800259a:	483c      	ldr	r0, [pc, #240]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 800259c:	f000 ffaa 	bl	80034f4 <HAL_DMA_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80025a6:	f7ff f9b9 	bl	800191c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a37      	ldr	r2, [pc, #220]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 80025ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80025b0:	4a36      	ldr	r2, [pc, #216]	@ (800268c <HAL_UART_MspInit+0x1ac>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025b6:	e05f      	b.n	8002678 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a35      	ldr	r2, [pc, #212]	@ (8002694 <HAL_UART_MspInit+0x1b4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d15a      	bne.n	8002678 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 80025cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b28      	ldr	r3, [pc, #160]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a27      	ldr	r2, [pc, #156]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b25      	ldr	r3, [pc, #148]	@ (8002684 <HAL_UART_MspInit+0x1a4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800260c:	2307      	movs	r3, #7
 800260e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	4619      	mov	r1, r3
 8002616:	4820      	ldr	r0, [pc, #128]	@ (8002698 <HAL_UART_MspInit+0x1b8>)
 8002618:	f001 fdb4 	bl	8004184 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800261c:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 800261e:	4a20      	ldr	r2, [pc, #128]	@ (80026a0 <HAL_UART_MspInit+0x1c0>)
 8002620:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002622:	4b1e      	ldr	r3, [pc, #120]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 8002624:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002628:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800262a:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 800262c:	2240      	movs	r2, #64	@ 0x40
 800262e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002630:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002636:	4b19      	ldr	r3, [pc, #100]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 8002638:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800263c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800263e:	4b17      	ldr	r3, [pc, #92]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002644:	4b15      	ldr	r3, [pc, #84]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800264a:	4b14      	ldr	r3, [pc, #80]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002656:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800265c:	480f      	ldr	r0, [pc, #60]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 800265e:	f000 ff49 	bl	80034f4 <HAL_DMA_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002668:	f7ff f958 	bl	800191c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a0b      	ldr	r2, [pc, #44]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 8002670:	639a      	str	r2, [r3, #56]	@ 0x38
 8002672:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <HAL_UART_MspInit+0x1bc>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002678:	bf00      	nop
 800267a:	3730      	adds	r7, #48	@ 0x30
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40004400 	.word	0x40004400
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000
 800268c:	200006b8 	.word	0x200006b8
 8002690:	400260a0 	.word	0x400260a0
 8002694:	40004800 	.word	0x40004800
 8002698:	40020400 	.word	0x40020400
 800269c:	20000718 	.word	0x20000718
 80026a0:	40026058 	.word	0x40026058

080026a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <NMI_Handler+0x4>

080026ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <HardFault_Handler+0x4>

080026b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <MemManage_Handler+0x4>

080026bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <BusFault_Handler+0x4>

080026c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <UsageFault_Handler+0x4>

080026cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026fa:	f000 f993 	bl	8002a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <DMA1_Stream3_IRQHandler+0x10>)
 800270a:	f000 fff9 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000718 	.word	0x20000718

08002718 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <DMA1_Stream6_IRQHandler+0x10>)
 800271e:	f000 ffef 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200006b8 	.word	0x200006b8

0800272c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <DMA2_Stream0_IRQHandler+0x10>)
 8002732:	f000 ffe5 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2000039c 	.word	0x2000039c

08002740 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <DMA2_Stream1_IRQHandler+0x10>)
 8002746:	f000 ffdb 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200005c8 	.word	0x200005c8

08002754 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <DMA2_Stream4_IRQHandler+0x10>)
 800275a:	f000 ffd1 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	2000033c 	.word	0x2000033c

08002768 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <OTG_FS_IRQHandler+0x10>)
 800276e:	f002 f9cf 	bl	8004b10 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000fbc 	.word	0x20000fbc

0800277c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return 1;
 8002780:	2301      	movs	r3, #1
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_kill>:

int _kill(int pid, int sig)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002796:	f00e fe69 	bl	801146c <__errno>
 800279a:	4603      	mov	r3, r0
 800279c:	2216      	movs	r2, #22
 800279e:	601a      	str	r2, [r3, #0]
  return -1;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_exit>:

void _exit (int status)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ffe7 	bl	800278c <_kill>
  while (1) {}    /* Make sure we hang here */
 80027be:	bf00      	nop
 80027c0:	e7fd      	b.n	80027be <_exit+0x12>

080027c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e00a      	b.n	80027ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027d4:	f3af 8000 	nop.w
 80027d8:	4601      	mov	r1, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	60ba      	str	r2, [r7, #8]
 80027e0:	b2ca      	uxtb	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3301      	adds	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	dbf0      	blt.n	80027d4 <_read+0x12>
  }

  return len;
 80027f2:	687b      	ldr	r3, [r7, #4]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e009      	b.n	8002822 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	60ba      	str	r2, [r7, #8]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	3301      	adds	r3, #1
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	429a      	cmp	r2, r3
 8002828:	dbf1      	blt.n	800280e <_write+0x12>
  }
  return len;
 800282a:	687b      	ldr	r3, [r7, #4]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_close>:

int _close(int file)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800285c:	605a      	str	r2, [r3, #4]
  return 0;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <_isatty>:

int _isatty(int file)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	@ (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f00e fdce 	bl	801146c <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	@ (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20020000 	.word	0x20020000
 80028fc:	00000400 	.word	0x00000400
 8002900:	20000b80 	.word	0x20000b80
 8002904:	20002160 	.word	0x20002160

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <SystemInit+0x20>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002912:	4a05      	ldr	r2, [pc, #20]	@ (8002928 <SystemInit+0x20>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002930:	f7ff ffea 	bl	8002908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002934:	480c      	ldr	r0, [pc, #48]	@ (8002968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002936:	490d      	ldr	r1, [pc, #52]	@ (800296c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800293c:	e002      	b.n	8002944 <LoopCopyDataInit>

0800293e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002942:	3304      	adds	r3, #4

08002944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002948:	d3f9      	bcc.n	800293e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800294c:	4c0a      	ldr	r4, [pc, #40]	@ (8002978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002950:	e001      	b.n	8002956 <LoopFillZerobss>

08002952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002954:	3204      	adds	r2, #4

08002956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002958:	d3fb      	bcc.n	8002952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800295a:	f00e fd8d 	bl	8011478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295e:	f7fe fafb 	bl	8000f58 <main>
  bx  lr    
 8002962:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800296c:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002970:	08015ce8 	.word	0x08015ce8
  ldr r2, =_sbss
 8002974:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8002978:	20002160 	.word	0x20002160

0800297c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC_IRQHandler>
	...

08002980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002984:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0d      	ldr	r2, [pc, #52]	@ (80029c0 <HAL_Init+0x40>)
 800298a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800298e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002990:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0a      	ldr	r2, [pc, #40]	@ (80029c0 <HAL_Init+0x40>)
 8002996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800299a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800299c:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a07      	ldr	r2, [pc, #28]	@ (80029c0 <HAL_Init+0x40>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f000 fd61 	bl	8003470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ae:	200f      	movs	r0, #15
 80029b0:	f000 f808 	bl	80029c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b4:	f7ff fb0c 	bl	8001fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023c00 	.word	0x40023c00

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029cc:	4b12      	ldr	r3, [pc, #72]	@ (8002a18 <HAL_InitTick+0x54>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <HAL_InitTick+0x58>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029da:	fbb3 f3f1 	udiv	r3, r3, r1
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fd79 	bl	80034da <HAL_SYSTICK_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00e      	b.n	8002a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d80a      	bhi.n	8002a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f8:	2200      	movs	r2, #0
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	f000 fd41 	bl	8003486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a04:	4a06      	ldr	r2, [pc, #24]	@ (8002a20 <HAL_InitTick+0x5c>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000008 	.word	0x20000008
 8002a20:	20000004 	.word	0x20000004

08002a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a28:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <HAL_IncTick+0x20>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_IncTick+0x24>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a04      	ldr	r2, [pc, #16]	@ (8002a48 <HAL_IncTick+0x24>)
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000008 	.word	0x20000008
 8002a48:	20000b84 	.word	0x20000b84

08002a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a50:	4b03      	ldr	r3, [pc, #12]	@ (8002a60 <HAL_GetTick+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000b84 	.word	0x20000b84

08002a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff ffee 	bl	8002a4c <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d005      	beq.n	8002a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <HAL_Delay+0x44>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a8a:	bf00      	nop
 8002a8c:	f7ff ffde 	bl	8002a4c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d8f7      	bhi.n	8002a8c <HAL_Delay+0x28>
  {
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000008 	.word	0x20000008

08002aac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e033      	b.n	8002b2a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff faa8 	bl	8002020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002af2:	f023 0302 	bic.w	r3, r3, #2
 8002af6:	f043 0202 	orr.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa68 	bl	8002fd4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f023 0303 	bic.w	r3, r3, #3
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b1a:	e001      	b.n	8002b20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADC_Start_DMA+0x1e>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e0e9      	b.n	8002d26 <HAL_ADC_Start_DMA+0x1f2>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d018      	beq.n	8002b9a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b78:	4b6d      	ldr	r3, [pc, #436]	@ (8002d30 <HAL_ADC_Start_DMA+0x1fc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a6d      	ldr	r2, [pc, #436]	@ (8002d34 <HAL_ADC_Start_DMA+0x200>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0c9a      	lsrs	r2, r3, #18
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002b8c:	e002      	b.n	8002b94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f9      	bne.n	8002b8e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ba8:	d107      	bne.n	8002bba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bb8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	f040 80a1 	bne.w	8002d0c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bf4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c08:	d106      	bne.n	8002c18 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0e:	f023 0206 	bic.w	r2, r3, #6
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c16:	e002      	b.n	8002c1e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c26:	4b44      	ldr	r3, [pc, #272]	@ (8002d38 <HAL_ADC_Start_DMA+0x204>)
 8002c28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2e:	4a43      	ldr	r2, [pc, #268]	@ (8002d3c <HAL_ADC_Start_DMA+0x208>)
 8002c30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c36:	4a42      	ldr	r2, [pc, #264]	@ (8002d40 <HAL_ADC_Start_DMA+0x20c>)
 8002c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3e:	4a41      	ldr	r2, [pc, #260]	@ (8002d44 <HAL_ADC_Start_DMA+0x210>)
 8002c40:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c5a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c6a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	334c      	adds	r3, #76	@ 0x4c
 8002c76:	4619      	mov	r1, r3
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f000 fce8 	bl	8003650 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d12a      	bne.n	8002ce2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2d      	ldr	r2, [pc, #180]	@ (8002d48 <HAL_ADC_Start_DMA+0x214>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d015      	beq.n	8002cc2 <HAL_ADC_Start_DMA+0x18e>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d4c <HAL_ADC_Start_DMA+0x218>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d105      	bne.n	8002cac <HAL_ADC_Start_DMA+0x178>
 8002ca0:	4b25      	ldr	r3, [pc, #148]	@ (8002d38 <HAL_ADC_Start_DMA+0x204>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a27      	ldr	r2, [pc, #156]	@ (8002d50 <HAL_ADC_Start_DMA+0x21c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d136      	bne.n	8002d24 <HAL_ADC_Start_DMA+0x1f0>
 8002cb6:	4b20      	ldr	r3, [pc, #128]	@ (8002d38 <HAL_ADC_Start_DMA+0x204>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d130      	bne.n	8002d24 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d129      	bne.n	8002d24 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	e020      	b.n	8002d24 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <HAL_ADC_Start_DMA+0x214>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d11b      	bne.n	8002d24 <HAL_ADC_Start_DMA+0x1f0>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d114      	bne.n	8002d24 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	e00b      	b.n	8002d24 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f043 0210 	orr.w	r2, r3, #16
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000
 8002d34:	431bde83 	.word	0x431bde83
 8002d38:	40012300 	.word	0x40012300
 8002d3c:	080031cd 	.word	0x080031cd
 8002d40:	08003287 	.word	0x08003287
 8002d44:	080032a3 	.word	0x080032a3
 8002d48:	40012000 	.word	0x40012000
 8002d4c:	40012100 	.word	0x40012100
 8002d50:	40012200 	.word	0x40012200

08002d54 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x1c>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e105      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x228>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	d925      	bls.n	8002e08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68d9      	ldr	r1, [r3, #12]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b1e      	subs	r3, #30
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	400a      	ands	r2, r1
 8002de0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68d9      	ldr	r1, [r3, #12]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	4618      	mov	r0, r3
 8002df4:	4603      	mov	r3, r0
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4403      	add	r3, r0
 8002dfa:	3b1e      	subs	r3, #30
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	e022      	b.n	8002e4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6919      	ldr	r1, [r3, #16]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	400a      	ands	r2, r1
 8002e2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6919      	ldr	r1, [r3, #16]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4403      	add	r3, r0
 8002e44:	409a      	lsls	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d824      	bhi.n	8002ea0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	3b05      	subs	r3, #5
 8002e68:	221f      	movs	r2, #31
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	400a      	ands	r2, r1
 8002e76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4618      	mov	r0, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b05      	subs	r3, #5
 8002e92:	fa00 f203 	lsl.w	r2, r0, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e9e:	e04c      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d824      	bhi.n	8002ef2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3b23      	subs	r3, #35	@ 0x23
 8002eba:	221f      	movs	r2, #31
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3b23      	subs	r3, #35	@ 0x23
 8002ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ef0:	e023      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	3b41      	subs	r3, #65	@ 0x41
 8002f04:	221f      	movs	r2, #31
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	400a      	ands	r2, r1
 8002f12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3b41      	subs	r3, #65	@ 0x41
 8002f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f3a:	4b22      	ldr	r3, [pc, #136]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x234>)
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a21      	ldr	r2, [pc, #132]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x238>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d109      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1cc>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b12      	cmp	r3, #18
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a19      	ldr	r2, [pc, #100]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x238>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d123      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x21e>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d003      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x1e6>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b11      	cmp	r3, #17
 8002f74:	d11b      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d111      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f8a:	4b10      	ldr	r3, [pc, #64]	@ (8002fcc <HAL_ADC_ConfigChannel+0x23c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a10      	ldr	r2, [pc, #64]	@ (8002fd0 <HAL_ADC_ConfigChannel+0x240>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	0c9a      	lsrs	r2, r3, #18
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fa0:	e002      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f9      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40012300 	.word	0x40012300
 8002fc8:	40012000 	.word	0x40012000
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	431bde83 	.word	0x431bde83

08002fd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fdc:	4b79      	ldr	r3, [pc, #484]	@ (80031c4 <ADC_Init+0x1f0>)
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	021a      	lsls	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800302c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800304e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	4a58      	ldr	r2, [pc, #352]	@ (80031c8 <ADC_Init+0x1f4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800307a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6899      	ldr	r1, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800309c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6899      	ldr	r1, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	e00f      	b.n	80030d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0202 	bic.w	r2, r2, #2
 80030e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6899      	ldr	r1, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7e1b      	ldrb	r3, [r3, #24]
 80030ec:	005a      	lsls	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01b      	beq.n	8003138 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800310e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800311e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	3b01      	subs	r3, #1
 800312c:	035a      	lsls	r2, r3, #13
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	e007      	b.n	8003148 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003146:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	3b01      	subs	r3, #1
 8003164:	051a      	lsls	r2, r3, #20
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800317c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6899      	ldr	r1, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800318a:	025a      	lsls	r2, r3, #9
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6899      	ldr	r1, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	029a      	lsls	r2, r3, #10
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	609a      	str	r2, [r3, #8]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40012300 	.word	0x40012300
 80031c8:	0f000001 	.word	0x0f000001

080031cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d13c      	bne.n	8003260 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d12b      	bne.n	8003258 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003204:	2b00      	cmp	r3, #0
 8003206:	d127      	bne.n	8003258 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003220:	2b00      	cmp	r3, #0
 8003222:	d119      	bne.n	8003258 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0220 	bic.w	r2, r2, #32
 8003232:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff fd7b 	bl	8002d54 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800325e:	e00e      	b.n	800327e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff fd85 	bl	8002d7c <HAL_ADC_ErrorCallback>
}
 8003272:	e004      	b.n	800327e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7ff fd67 	bl	8002d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2240      	movs	r2, #64	@ 0x40
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	f043 0204 	orr.w	r2, r3, #4
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff fd5a 	bl	8002d7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032ec:	4013      	ands	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003302:	4a04      	ldr	r2, [pc, #16]	@ (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	60d3      	str	r3, [r2, #12]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800331c:	4b04      	ldr	r3, [pc, #16]	@ (8003330 <__NVIC_GetPriorityGrouping+0x18>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 0307 	and.w	r3, r3, #7
}
 8003326:	4618      	mov	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	2b00      	cmp	r3, #0
 8003344:	db0b      	blt.n	800335e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	4907      	ldr	r1, [pc, #28]	@ (800336c <__NVIC_EnableIRQ+0x38>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2001      	movs	r0, #1
 8003356:	fa00 f202 	lsl.w	r2, r0, r2
 800335a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000e100 	.word	0xe000e100

08003370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003380:	2b00      	cmp	r3, #0
 8003382:	db0a      	blt.n	800339a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	490c      	ldr	r1, [pc, #48]	@ (80033bc <__NVIC_SetPriority+0x4c>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	440b      	add	r3, r1
 8003394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003398:	e00a      	b.n	80033b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4908      	ldr	r1, [pc, #32]	@ (80033c0 <__NVIC_SetPriority+0x50>)
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	3b04      	subs	r3, #4
 80033a8:	0112      	lsls	r2, r2, #4
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	440b      	add	r3, r1
 80033ae:	761a      	strb	r2, [r3, #24]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000e100 	.word	0xe000e100
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	@ 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f1c3 0307 	rsb	r3, r3, #7
 80033de:	2b04      	cmp	r3, #4
 80033e0:	bf28      	it	cs
 80033e2:	2304      	movcs	r3, #4
 80033e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3304      	adds	r3, #4
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d902      	bls.n	80033f4 <NVIC_EncodePriority+0x30>
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3b03      	subs	r3, #3
 80033f2:	e000      	b.n	80033f6 <NVIC_EncodePriority+0x32>
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	f04f 32ff 	mov.w	r2, #4294967295
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	401a      	ands	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800340c:	f04f 31ff 	mov.w	r1, #4294967295
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43d9      	mvns	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	4313      	orrs	r3, r2
         );
}
 800341e:	4618      	mov	r0, r3
 8003420:	3724      	adds	r7, #36	@ 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800343c:	d301      	bcc.n	8003442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343e:	2301      	movs	r3, #1
 8003440:	e00f      	b.n	8003462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003442:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <SysTick_Config+0x40>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800344a:	210f      	movs	r1, #15
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	f7ff ff8e 	bl	8003370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003454:	4b05      	ldr	r3, [pc, #20]	@ (800346c <SysTick_Config+0x40>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345a:	4b04      	ldr	r3, [pc, #16]	@ (800346c <SysTick_Config+0x40>)
 800345c:	2207      	movs	r2, #7
 800345e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	e000e010 	.word	0xe000e010

08003470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff29 	bl	80032d0 <__NVIC_SetPriorityGrouping>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	4603      	mov	r3, r0
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003498:	f7ff ff3e 	bl	8003318 <__NVIC_GetPriorityGrouping>
 800349c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	6978      	ldr	r0, [r7, #20]
 80034a4:	f7ff ff8e 	bl	80033c4 <NVIC_EncodePriority>
 80034a8:	4602      	mov	r2, r0
 80034aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff5d 	bl	8003370 <__NVIC_SetPriority>
}
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff31 	bl	8003334 <__NVIC_EnableIRQ>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ffa2 	bl	800342c <SysTick_Config>
 80034e8:	4603      	mov	r3, r0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7ff faa4 	bl	8002a4c <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e099      	b.n	8003644 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003530:	e00f      	b.n	8003552 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003532:	f7ff fa8b 	bl	8002a4c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b05      	cmp	r3, #5
 800353e:	d908      	bls.n	8003552 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2203      	movs	r2, #3
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e078      	b.n	8003644 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e8      	bne.n	8003532 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4b38      	ldr	r3, [pc, #224]	@ (800364c <HAL_DMA_Init+0x158>)
 800356c:	4013      	ands	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800357e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d107      	bne.n	80035bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	4313      	orrs	r3, r2
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0307 	bic.w	r3, r3, #7
 80035d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d117      	bne.n	8003616 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fa6f 	bl	8003adc <DMA_CheckFifoParam>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2240      	movs	r2, #64	@ 0x40
 8003608:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003612:	2301      	movs	r3, #1
 8003614:	e016      	b.n	8003644 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa26 	bl	8003a70 <DMA_CalcBaseAndBitshift>
 8003624:	4603      	mov	r3, r0
 8003626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	223f      	movs	r2, #63	@ 0x3f
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	f010803f 	.word	0xf010803f

08003650 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003666:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_DMA_Start_IT+0x26>
 8003672:	2302      	movs	r3, #2
 8003674:	e040      	b.n	80036f8 <HAL_DMA_Start_IT+0xa8>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d12f      	bne.n	80036ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f9b8 	bl	8003a14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a8:	223f      	movs	r2, #63	@ 0x3f
 80036aa:	409a      	lsls	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0216 	orr.w	r2, r2, #22
 80036be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0208 	orr.w	r2, r2, #8
 80036d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e005      	b.n	80036f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
 80036f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800370c:	4b8e      	ldr	r3, [pc, #568]	@ (8003948 <HAL_DMA_IRQHandler+0x248>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a8e      	ldr	r2, [pc, #568]	@ (800394c <HAL_DMA_IRQHandler+0x24c>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0a9b      	lsrs	r3, r3, #10
 8003718:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372a:	2208      	movs	r2, #8
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01a      	beq.n	800376c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d013      	beq.n	800376c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	2208      	movs	r2, #8
 800375a:	409a      	lsls	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	2201      	movs	r2, #1
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	f043 0202 	orr.w	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2204      	movs	r2, #4
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d012      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c4:	2204      	movs	r2, #4
 80037c6:	409a      	lsls	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	2210      	movs	r2, #16
 80037de:	409a      	lsls	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d043      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03c      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	2210      	movs	r2, #16
 80037fc:	409a      	lsls	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d018      	beq.n	8003842 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d108      	bne.n	8003830 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d024      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
 800382e:	e01f      	b.n	8003870 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e016      	b.n	8003870 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0208 	bic.w	r2, r2, #8
 800385e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003874:	2220      	movs	r2, #32
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 808f 	beq.w	80039a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8087 	beq.w	80039a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	2220      	movs	r2, #32
 8003898:	409a      	lsls	r2, r3
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d136      	bne.n	8003918 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0216 	bic.w	r2, r2, #22
 80038b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <HAL_DMA_IRQHandler+0x1da>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0208 	bic.w	r2, r2, #8
 80038e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	223f      	movs	r2, #63	@ 0x3f
 80038f0:	409a      	lsls	r2, r3
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390a:	2b00      	cmp	r3, #0
 800390c:	d07e      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
        }
        return;
 8003916:	e079      	b.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01d      	beq.n	8003962 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10d      	bne.n	8003950 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003938:	2b00      	cmp	r3, #0
 800393a:	d031      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
 8003944:	e02c      	b.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
 8003946:	bf00      	nop
 8003948:	20000000 	.word	0x20000000
 800394c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d023      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
 8003960:	e01e      	b.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10f      	bne.n	8003990 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0210 	bic.w	r2, r2, #16
 800397e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d032      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d022      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2205      	movs	r2, #5
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d307      	bcc.n	80039e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f2      	bne.n	80039cc <HAL_DMA_IRQHandler+0x2cc>
 80039e6:	e000      	b.n	80039ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
 8003a0a:	e000      	b.n	8003a0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a0c:	bf00      	nop
    }
  }
}
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b40      	cmp	r3, #64	@ 0x40
 8003a40:	d108      	bne.n	8003a54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a52:	e007      	b.n	8003a64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	3b10      	subs	r3, #16
 8003a80:	4a14      	ldr	r2, [pc, #80]	@ (8003ad4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a8a:	4a13      	ldr	r2, [pc, #76]	@ (8003ad8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d909      	bls.n	8003ab2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	1d1a      	adds	r2, r3, #4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ab0:	e007      	b.n	8003ac2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	aaaaaaab 	.word	0xaaaaaaab
 8003ad8:	08015004 	.word	0x08015004

08003adc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d11f      	bne.n	8003b36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d856      	bhi.n	8003baa <DMA_CheckFifoParam+0xce>
 8003afc:	a201      	add	r2, pc, #4	@ (adr r2, 8003b04 <DMA_CheckFifoParam+0x28>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b27 	.word	0x08003b27
 8003b0c:	08003b15 	.word	0x08003b15
 8003b10:	08003bab 	.word	0x08003bab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d046      	beq.n	8003bae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e043      	b.n	8003bae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b2e:	d140      	bne.n	8003bb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b34:	e03d      	b.n	8003bb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3e:	d121      	bne.n	8003b84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d837      	bhi.n	8003bb6 <DMA_CheckFifoParam+0xda>
 8003b46:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <DMA_CheckFifoParam+0x70>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b63 	.word	0x08003b63
 8003b54:	08003b5d 	.word	0x08003b5d
 8003b58:	08003b75 	.word	0x08003b75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b60:	e030      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d025      	beq.n	8003bba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b72:	e022      	b.n	8003bba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b7c:	d11f      	bne.n	8003bbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b82:	e01c      	b.n	8003bbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d903      	bls.n	8003b92 <DMA_CheckFifoParam+0xb6>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d003      	beq.n	8003b98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b90:	e018      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
      break;
 8003b96:	e015      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00e      	beq.n	8003bc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e00b      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003baa:	bf00      	nop
 8003bac:	e00a      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e008      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e006      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e004      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc2:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop

08003bd4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003be6:	4b23      	ldr	r3, [pc, #140]	@ (8003c74 <HAL_FLASH_Program+0xa0>)
 8003be8:	7e1b      	ldrb	r3, [r3, #24]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_FLASH_Program+0x1e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e03b      	b.n	8003c6a <HAL_FLASH_Program+0x96>
 8003bf2:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <HAL_FLASH_Program+0xa0>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bf8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003bfc:	f000 f870 	bl	8003ce0 <FLASH_WaitForLastOperation>
 8003c00:	4603      	mov	r3, r0
 8003c02:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d12b      	bne.n	8003c62 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003c10:	783b      	ldrb	r3, [r7, #0]
 8003c12:	4619      	mov	r1, r3
 8003c14:	68b8      	ldr	r0, [r7, #8]
 8003c16:	f000 f91b 	bl	8003e50 <FLASH_Program_Byte>
 8003c1a:	e016      	b.n	8003c4a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003c22:	883b      	ldrh	r3, [r7, #0]
 8003c24:	4619      	mov	r1, r3
 8003c26:	68b8      	ldr	r0, [r7, #8]
 8003c28:	f000 f8ee 	bl	8003e08 <FLASH_Program_HalfWord>
 8003c2c:	e00d      	b.n	8003c4a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d105      	bne.n	8003c40 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4619      	mov	r1, r3
 8003c38:	68b8      	ldr	r0, [r7, #8]
 8003c3a:	f000 f8c3 	bl	8003dc4 <FLASH_Program_Word>
 8003c3e:	e004      	b.n	8003c4a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c44:	68b8      	ldr	r0, [r7, #8]
 8003c46:	f000 f88b 	bl	8003d60 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c4a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003c4e:	f000 f847 	bl	8003ce0 <FLASH_WaitForLastOperation>
 8003c52:	4603      	mov	r3, r0
 8003c54:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003c56:	4b08      	ldr	r3, [pc, #32]	@ (8003c78 <HAL_FLASH_Program+0xa4>)
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	4a07      	ldr	r2, [pc, #28]	@ (8003c78 <HAL_FLASH_Program+0xa4>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c62:	4b04      	ldr	r3, [pc, #16]	@ (8003c74 <HAL_FLASH_Program+0xa0>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000b88 	.word	0x20000b88
 8003c78:	40023c00 	.word	0x40023c00

08003c7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c86:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_FLASH_Unlock+0x38>)
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da0b      	bge.n	8003ca6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c8e:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <HAL_FLASH_Unlock+0x38>)
 8003c90:	4a09      	ldr	r2, [pc, #36]	@ (8003cb8 <HAL_FLASH_Unlock+0x3c>)
 8003c92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c94:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <HAL_FLASH_Unlock+0x38>)
 8003c96:	4a09      	ldr	r2, [pc, #36]	@ (8003cbc <HAL_FLASH_Unlock+0x40>)
 8003c98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c9a:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_FLASH_Unlock+0x38>)
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	da01      	bge.n	8003ca6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40023c00 	.word	0x40023c00
 8003cb8:	45670123 	.word	0x45670123
 8003cbc:	cdef89ab 	.word	0xcdef89ab

08003cc0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003cc4:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <HAL_FLASH_Lock+0x1c>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4a04      	ldr	r2, [pc, #16]	@ (8003cdc <HAL_FLASH_Lock+0x1c>)
 8003cca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40023c00 	.word	0x40023c00

08003ce0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003cec:	4b1a      	ldr	r3, [pc, #104]	@ (8003d58 <FLASH_WaitForLastOperation+0x78>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003cf2:	f7fe feab 	bl	8002a4c <HAL_GetTick>
 8003cf6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003cf8:	e010      	b.n	8003d1c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d00c      	beq.n	8003d1c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <FLASH_WaitForLastOperation+0x38>
 8003d08:	f7fe fea0 	bl	8002a4c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d201      	bcs.n	8003d1c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e019      	b.n	8003d50 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d5c <FLASH_WaitForLastOperation+0x7c>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e8      	bne.n	8003cfa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003d28:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <FLASH_WaitForLastOperation+0x7c>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d34:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <FLASH_WaitForLastOperation+0x7c>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003d3a:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <FLASH_WaitForLastOperation+0x7c>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d46:	f000 f8a5 	bl	8003e94 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
  
}  
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000b88 	.word	0x20000b88
 8003d5c:	40023c00 	.word	0x40023c00

08003d60 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d6c:	4b14      	ldr	r3, [pc, #80]	@ (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	4a13      	ldr	r2, [pc, #76]	@ (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003d78:	4b11      	ldr	r3, [pc, #68]	@ (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	4a10      	ldr	r2, [pc, #64]	@ (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d7e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003d82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d84:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003d96:	f3bf 8f6f 	isb	sy
}
 8003d9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	000a      	movs	r2, r1
 8003daa:	2300      	movs	r3, #0
 8003dac:	68f9      	ldr	r1, [r7, #12]
 8003dae:	3104      	adds	r1, #4
 8003db0:	4613      	mov	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40023c00 	.word	0x40023c00

08003dc4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <FLASH_Program_Word+0x40>)
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <FLASH_Program_Word+0x40>)
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003dda:	4b0a      	ldr	r3, [pc, #40]	@ (8003e04 <FLASH_Program_Word+0x40>)
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	4a09      	ldr	r2, [pc, #36]	@ (8003e04 <FLASH_Program_Word+0x40>)
 8003de0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003de4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003de6:	4b07      	ldr	r3, [pc, #28]	@ (8003e04 <FLASH_Program_Word+0x40>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	4a06      	ldr	r2, [pc, #24]	@ (8003e04 <FLASH_Program_Word+0x40>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	601a      	str	r2, [r3, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40023c00 	.word	0x40023c00

08003e08 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e14:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <FLASH_Program_HalfWord+0x44>)
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	4a0c      	ldr	r2, [pc, #48]	@ (8003e4c <FLASH_Program_HalfWord+0x44>)
 8003e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003e20:	4b0a      	ldr	r3, [pc, #40]	@ (8003e4c <FLASH_Program_HalfWord+0x44>)
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	4a09      	ldr	r2, [pc, #36]	@ (8003e4c <FLASH_Program_HalfWord+0x44>)
 8003e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e2c:	4b07      	ldr	r3, [pc, #28]	@ (8003e4c <FLASH_Program_HalfWord+0x44>)
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4a06      	ldr	r2, [pc, #24]	@ (8003e4c <FLASH_Program_HalfWord+0x44>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	801a      	strh	r2, [r3, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023c00 	.word	0x40023c00

08003e50 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e90 <FLASH_Program_Byte+0x40>)
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	4a0b      	ldr	r2, [pc, #44]	@ (8003e90 <FLASH_Program_Byte+0x40>)
 8003e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003e68:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <FLASH_Program_Byte+0x40>)
 8003e6a:	4a09      	ldr	r2, [pc, #36]	@ (8003e90 <FLASH_Program_Byte+0x40>)
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e70:	4b07      	ldr	r3, [pc, #28]	@ (8003e90 <FLASH_Program_Byte+0x40>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	4a06      	ldr	r2, [pc, #24]	@ (8003e90 <FLASH_Program_Byte+0x40>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	701a      	strb	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40023c00 	.word	0x40023c00

08003e94 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003e98:	4b27      	ldr	r3, [pc, #156]	@ (8003f38 <FLASH_SetErrorCode+0xa4>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ea4:	4b25      	ldr	r3, [pc, #148]	@ (8003f3c <FLASH_SetErrorCode+0xa8>)
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f043 0310 	orr.w	r3, r3, #16
 8003eac:	4a23      	ldr	r2, [pc, #140]	@ (8003f3c <FLASH_SetErrorCode+0xa8>)
 8003eae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003eb0:	4b21      	ldr	r3, [pc, #132]	@ (8003f38 <FLASH_SetErrorCode+0xa4>)
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003eb6:	4b20      	ldr	r3, [pc, #128]	@ (8003f38 <FLASH_SetErrorCode+0xa4>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <FLASH_SetErrorCode+0xa8>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f043 0308 	orr.w	r3, r3, #8
 8003eca:	4a1c      	ldr	r2, [pc, #112]	@ (8003f3c <FLASH_SetErrorCode+0xa8>)
 8003ecc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003ece:	4b1a      	ldr	r3, [pc, #104]	@ (8003f38 <FLASH_SetErrorCode+0xa4>)
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003ed4:	4b18      	ldr	r3, [pc, #96]	@ (8003f38 <FLASH_SetErrorCode+0xa4>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003ee0:	4b16      	ldr	r3, [pc, #88]	@ (8003f3c <FLASH_SetErrorCode+0xa8>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f043 0304 	orr.w	r3, r3, #4
 8003ee8:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <FLASH_SetErrorCode+0xa8>)
 8003eea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <FLASH_SetErrorCode+0xa4>)
 8003eee:	2240      	movs	r2, #64	@ 0x40
 8003ef0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003ef2:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <FLASH_SetErrorCode+0xa4>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003efe:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <FLASH_SetErrorCode+0xa8>)
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f043 0302 	orr.w	r3, r3, #2
 8003f06:	4a0d      	ldr	r2, [pc, #52]	@ (8003f3c <FLASH_SetErrorCode+0xa8>)
 8003f08:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <FLASH_SetErrorCode+0xa4>)
 8003f0c:	2280      	movs	r2, #128	@ 0x80
 8003f0e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003f10:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <FLASH_SetErrorCode+0xa4>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003f1c:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <FLASH_SetErrorCode+0xa8>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f043 0320 	orr.w	r3, r3, #32
 8003f24:	4a05      	ldr	r2, [pc, #20]	@ (8003f3c <FLASH_SetErrorCode+0xa8>)
 8003f26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003f28:	4b03      	ldr	r3, [pc, #12]	@ (8003f38 <FLASH_SetErrorCode+0xa4>)
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	60da      	str	r2, [r3, #12]
  }
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40023c00 	.word	0x40023c00
 8003f3c:	20000b88 	.word	0x20000b88

08003f40 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f52:	4b31      	ldr	r3, [pc, #196]	@ (8004018 <HAL_FLASHEx_Erase+0xd8>)
 8003f54:	7e1b      	ldrb	r3, [r3, #24]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_FLASHEx_Erase+0x1e>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e058      	b.n	8004010 <HAL_FLASHEx_Erase+0xd0>
 8003f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8004018 <HAL_FLASHEx_Erase+0xd8>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f64:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f68:	f7ff feba 	bl	8003ce0 <FLASH_WaitForLastOperation>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d148      	bne.n	8004008 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d115      	bne.n	8003fb2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f000 f844 	bl	8004020 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f98:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f9c:	f7ff fea0 	bl	8003ce0 <FLASH_WaitForLastOperation>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <HAL_FLASHEx_Erase+0xdc>)
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800401c <HAL_FLASHEx_Erase+0xdc>)
 8003faa:	f023 0304 	bic.w	r3, r3, #4
 8003fae:	6113      	str	r3, [r2, #16]
 8003fb0:	e028      	b.n	8004004 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	e01c      	b.n	8003ff4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	68b8      	ldr	r0, [r7, #8]
 8003fc4:	f000 f850 	bl	8004068 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fc8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003fcc:	f7ff fe88 	bl	8003ce0 <FLASH_WaitForLastOperation>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003fd4:	4b11      	ldr	r3, [pc, #68]	@ (800401c <HAL_FLASHEx_Erase+0xdc>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	4a10      	ldr	r2, [pc, #64]	@ (800401c <HAL_FLASHEx_Erase+0xdc>)
 8003fda:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8003fde:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	601a      	str	r2, [r3, #0]
          break;
 8003fec:	e00a      	b.n	8004004 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d3da      	bcc.n	8003fba <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004004:	f000 f878 	bl	80040f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004008:	4b03      	ldr	r3, [pc, #12]	@ (8004018 <HAL_FLASHEx_Erase+0xd8>)
 800400a:	2200      	movs	r2, #0
 800400c:	761a      	strb	r2, [r3, #24]

  return status;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000b88 	.word	0x20000b88
 800401c:	40023c00 	.word	0x40023c00

08004020 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800402c:	4b0d      	ldr	r3, [pc, #52]	@ (8004064 <FLASH_MassErase+0x44>)
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	4a0c      	ldr	r2, [pc, #48]	@ (8004064 <FLASH_MassErase+0x44>)
 8004032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004036:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004038:	4b0a      	ldr	r3, [pc, #40]	@ (8004064 <FLASH_MassErase+0x44>)
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	4a09      	ldr	r2, [pc, #36]	@ (8004064 <FLASH_MassErase+0x44>)
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004044:	4b07      	ldr	r3, [pc, #28]	@ (8004064 <FLASH_MassErase+0x44>)
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	4313      	orrs	r3, r2
 800404e:	4a05      	ldr	r2, [pc, #20]	@ (8004064 <FLASH_MassErase+0x44>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004054:	6113      	str	r3, [r2, #16]
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40023c00 	.word	0x40023c00

08004068 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e010      	b.n	80040a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d103      	bne.n	8004092 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800408a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e009      	b.n	80040a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d103      	bne.n	80040a0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e002      	b.n	80040a6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80040a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040a6:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <FLASH_Erase_Sector+0x8c>)
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	4a12      	ldr	r2, [pc, #72]	@ (80040f4 <FLASH_Erase_Sector+0x8c>)
 80040ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80040b2:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <FLASH_Erase_Sector+0x8c>)
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	490f      	ldr	r1, [pc, #60]	@ (80040f4 <FLASH_Erase_Sector+0x8c>)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80040be:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <FLASH_Erase_Sector+0x8c>)
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	4a0c      	ldr	r2, [pc, #48]	@ (80040f4 <FLASH_Erase_Sector+0x8c>)
 80040c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80040c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80040ca:	4b0a      	ldr	r3, [pc, #40]	@ (80040f4 <FLASH_Erase_Sector+0x8c>)
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4313      	orrs	r3, r2
 80040d4:	4a07      	ldr	r2, [pc, #28]	@ (80040f4 <FLASH_Erase_Sector+0x8c>)
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <FLASH_Erase_Sector+0x8c>)
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <FLASH_Erase_Sector+0x8c>)
 80040e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e6:	6113      	str	r3, [r2, #16]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40023c00 	.word	0x40023c00

080040f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80040fc:	4b20      	ldr	r3, [pc, #128]	@ (8004180 <FLASH_FlushCaches+0x88>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004108:	4b1d      	ldr	r3, [pc, #116]	@ (8004180 <FLASH_FlushCaches+0x88>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <FLASH_FlushCaches+0x88>)
 800410e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004112:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004114:	4b1a      	ldr	r3, [pc, #104]	@ (8004180 <FLASH_FlushCaches+0x88>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a19      	ldr	r2, [pc, #100]	@ (8004180 <FLASH_FlushCaches+0x88>)
 800411a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b17      	ldr	r3, [pc, #92]	@ (8004180 <FLASH_FlushCaches+0x88>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a16      	ldr	r2, [pc, #88]	@ (8004180 <FLASH_FlushCaches+0x88>)
 8004126:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800412a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800412c:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <FLASH_FlushCaches+0x88>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a13      	ldr	r2, [pc, #76]	@ (8004180 <FLASH_FlushCaches+0x88>)
 8004132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004136:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004138:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <FLASH_FlushCaches+0x88>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d017      	beq.n	8004174 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004144:	4b0e      	ldr	r3, [pc, #56]	@ (8004180 <FLASH_FlushCaches+0x88>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a0d      	ldr	r2, [pc, #52]	@ (8004180 <FLASH_FlushCaches+0x88>)
 800414a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800414e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004150:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <FLASH_FlushCaches+0x88>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0a      	ldr	r2, [pc, #40]	@ (8004180 <FLASH_FlushCaches+0x88>)
 8004156:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <FLASH_FlushCaches+0x88>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a07      	ldr	r2, [pc, #28]	@ (8004180 <FLASH_FlushCaches+0x88>)
 8004162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004166:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004168:	4b05      	ldr	r3, [pc, #20]	@ (8004180 <FLASH_FlushCaches+0x88>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a04      	ldr	r2, [pc, #16]	@ (8004180 <FLASH_FlushCaches+0x88>)
 800416e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004172:	6013      	str	r3, [r2, #0]
  }
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40023c00 	.word	0x40023c00

08004184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	@ 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e16b      	b.n	8004478 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041a0:	2201      	movs	r2, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	f040 815a 	bne.w	8004472 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d005      	beq.n	80041d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d130      	bne.n	8004238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800420c:	2201      	movs	r2, #1
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f003 0201 	and.w	r2, r3, #1
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	2b03      	cmp	r3, #3
 8004242:	d017      	beq.n	8004274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	2203      	movs	r2, #3
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d123      	bne.n	80042c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	08da      	lsrs	r2, r3, #3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3208      	adds	r2, #8
 8004288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	220f      	movs	r2, #15
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	08da      	lsrs	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3208      	adds	r2, #8
 80042c2:	69b9      	ldr	r1, [r7, #24]
 80042c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	2203      	movs	r2, #3
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0203 	and.w	r2, r3, #3
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80b4 	beq.w	8004472 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	4b60      	ldr	r3, [pc, #384]	@ (8004490 <HAL_GPIO_Init+0x30c>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	4a5f      	ldr	r2, [pc, #380]	@ (8004490 <HAL_GPIO_Init+0x30c>)
 8004314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004318:	6453      	str	r3, [r2, #68]	@ 0x44
 800431a:	4b5d      	ldr	r3, [pc, #372]	@ (8004490 <HAL_GPIO_Init+0x30c>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004326:	4a5b      	ldr	r2, [pc, #364]	@ (8004494 <HAL_GPIO_Init+0x310>)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	089b      	lsrs	r3, r3, #2
 800432c:	3302      	adds	r3, #2
 800432e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	220f      	movs	r2, #15
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4013      	ands	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a52      	ldr	r2, [pc, #328]	@ (8004498 <HAL_GPIO_Init+0x314>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d02b      	beq.n	80043aa <HAL_GPIO_Init+0x226>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a51      	ldr	r2, [pc, #324]	@ (800449c <HAL_GPIO_Init+0x318>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d025      	beq.n	80043a6 <HAL_GPIO_Init+0x222>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a50      	ldr	r2, [pc, #320]	@ (80044a0 <HAL_GPIO_Init+0x31c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01f      	beq.n	80043a2 <HAL_GPIO_Init+0x21e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a4f      	ldr	r2, [pc, #316]	@ (80044a4 <HAL_GPIO_Init+0x320>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d019      	beq.n	800439e <HAL_GPIO_Init+0x21a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a4e      	ldr	r2, [pc, #312]	@ (80044a8 <HAL_GPIO_Init+0x324>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_GPIO_Init+0x216>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a4d      	ldr	r2, [pc, #308]	@ (80044ac <HAL_GPIO_Init+0x328>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00d      	beq.n	8004396 <HAL_GPIO_Init+0x212>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a4c      	ldr	r2, [pc, #304]	@ (80044b0 <HAL_GPIO_Init+0x32c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <HAL_GPIO_Init+0x20e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a4b      	ldr	r2, [pc, #300]	@ (80044b4 <HAL_GPIO_Init+0x330>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d101      	bne.n	800438e <HAL_GPIO_Init+0x20a>
 800438a:	2307      	movs	r3, #7
 800438c:	e00e      	b.n	80043ac <HAL_GPIO_Init+0x228>
 800438e:	2308      	movs	r3, #8
 8004390:	e00c      	b.n	80043ac <HAL_GPIO_Init+0x228>
 8004392:	2306      	movs	r3, #6
 8004394:	e00a      	b.n	80043ac <HAL_GPIO_Init+0x228>
 8004396:	2305      	movs	r3, #5
 8004398:	e008      	b.n	80043ac <HAL_GPIO_Init+0x228>
 800439a:	2304      	movs	r3, #4
 800439c:	e006      	b.n	80043ac <HAL_GPIO_Init+0x228>
 800439e:	2303      	movs	r3, #3
 80043a0:	e004      	b.n	80043ac <HAL_GPIO_Init+0x228>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e002      	b.n	80043ac <HAL_GPIO_Init+0x228>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <HAL_GPIO_Init+0x228>
 80043aa:	2300      	movs	r3, #0
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	f002 0203 	and.w	r2, r2, #3
 80043b2:	0092      	lsls	r2, r2, #2
 80043b4:	4093      	lsls	r3, r2
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043bc:	4935      	ldr	r1, [pc, #212]	@ (8004494 <HAL_GPIO_Init+0x310>)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	089b      	lsrs	r3, r3, #2
 80043c2:	3302      	adds	r3, #2
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ca:	4b3b      	ldr	r3, [pc, #236]	@ (80044b8 <HAL_GPIO_Init+0x334>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ee:	4a32      	ldr	r2, [pc, #200]	@ (80044b8 <HAL_GPIO_Init+0x334>)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043f4:	4b30      	ldr	r3, [pc, #192]	@ (80044b8 <HAL_GPIO_Init+0x334>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004418:	4a27      	ldr	r2, [pc, #156]	@ (80044b8 <HAL_GPIO_Init+0x334>)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800441e:	4b26      	ldr	r3, [pc, #152]	@ (80044b8 <HAL_GPIO_Init+0x334>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004442:	4a1d      	ldr	r2, [pc, #116]	@ (80044b8 <HAL_GPIO_Init+0x334>)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004448:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <HAL_GPIO_Init+0x334>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800446c:	4a12      	ldr	r2, [pc, #72]	@ (80044b8 <HAL_GPIO_Init+0x334>)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3301      	adds	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b0f      	cmp	r3, #15
 800447c:	f67f ae90 	bls.w	80041a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	3724      	adds	r7, #36	@ 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800
 8004494:	40013800 	.word	0x40013800
 8004498:	40020000 	.word	0x40020000
 800449c:	40020400 	.word	0x40020400
 80044a0:	40020800 	.word	0x40020800
 80044a4:	40020c00 	.word	0x40020c00
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40021400 	.word	0x40021400
 80044b0:	40021800 	.word	0x40021800
 80044b4:	40021c00 	.word	0x40021c00
 80044b8:	40013c00 	.word	0x40013c00

080044bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	887b      	ldrh	r3, [r7, #2]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e001      	b.n	80044de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
 80044f8:	4613      	mov	r3, r2
 80044fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044fc:	787b      	ldrb	r3, [r7, #1]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004508:	e003      	b.n	8004512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	041a      	lsls	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	619a      	str	r2, [r3, #24]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800452a:	4b08      	ldr	r3, [pc, #32]	@ (800454c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	4013      	ands	r3, r2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004536:	4a05      	ldr	r2, [pc, #20]	@ (800454c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	4618      	mov	r0, r3
 8004540:	f00c f88e 	bl	8010660 <HAL_GPIO_EXTI_Callback>
  }
}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40013c00 	.word	0x40013c00

08004550 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af02      	add	r7, sp, #8
 8004556:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e059      	b.n	8004616 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f009 faab 	bl	800dad8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2203      	movs	r2, #3
 8004586:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004590:	d102      	bne.n	8004598 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f005 fda6 	bl	800a0ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	7c1a      	ldrb	r2, [r3, #16]
 80045aa:	f88d 2000 	strb.w	r2, [sp]
 80045ae:	3304      	adds	r3, #4
 80045b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045b2:	f005 fd27 	bl	800a004 <USB_CoreInit>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e026      	b.n	8004616 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2101      	movs	r1, #1
 80045ce:	4618      	mov	r0, r3
 80045d0:	f005 fd9e 	bl	800a110 <USB_SetCurrentMode>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e017      	b.n	8004616 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7c1a      	ldrb	r2, [r3, #16]
 80045ee:	f88d 2000 	strb.w	r2, [sp]
 80045f2:	3304      	adds	r3, #4
 80045f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045f6:	f005 ff41 	bl	800a47c <USB_HostInit>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e004      	b.n	8004616 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800461e:	b590      	push	{r4, r7, lr}
 8004620:	b08b      	sub	sp, #44	@ 0x2c
 8004622:	af04      	add	r7, sp, #16
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	4608      	mov	r0, r1
 8004628:	4611      	mov	r1, r2
 800462a:	461a      	mov	r2, r3
 800462c:	4603      	mov	r3, r0
 800462e:	70fb      	strb	r3, [r7, #3]
 8004630:	460b      	mov	r3, r1
 8004632:	70bb      	strb	r3, [r7, #2]
 8004634:	4613      	mov	r3, r2
 8004636:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004638:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800463a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_HCD_HC_Init+0x2c>
 8004646:	2302      	movs	r3, #2
 8004648:	e09d      	b.n	8004786 <HAL_HCD_HC_Init+0x168>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	3319      	adds	r3, #25
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	3314      	adds	r3, #20
 8004676:	787a      	ldrb	r2, [r7, #1]
 8004678:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	3315      	adds	r3, #21
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	3326      	adds	r3, #38	@ 0x26
 800469e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80046a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	78bb      	ldrb	r3, [r7, #2]
 80046a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ac:	b2d8      	uxtb	r0, r3
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3316      	adds	r3, #22
 80046bc:	4602      	mov	r2, r0
 80046be:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fbc7 	bl	8004e58 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80046ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	da0a      	bge.n	80046e8 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	3317      	adds	r3, #23
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e009      	b.n	80046fc <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	3317      	adds	r3, #23
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f006 f81f 	bl	800a744 <USB_GetHostSpeed>
 8004706:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004708:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d10b      	bne.n	8004728 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004710:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_HCD_HC_Init+0x10a>
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2bbc      	cmp	r3, #188	@ 0xbc
 8004722:	d901      	bls.n	8004728 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004724:	23bc      	movs	r3, #188	@ 0xbc
 8004726:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	3318      	adds	r3, #24
 8004738:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800473c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	b298      	uxth	r0, r3
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	3328      	adds	r3, #40	@ 0x28
 8004752:	4602      	mov	r2, r0
 8004754:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	b29b      	uxth	r3, r3
 800475e:	787c      	ldrb	r4, [r7, #1]
 8004760:	78ba      	ldrb	r2, [r7, #2]
 8004762:	78f9      	ldrb	r1, [r7, #3]
 8004764:	9302      	str	r3, [sp, #8]
 8004766:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	4623      	mov	r3, r4
 8004774:	f006 f80e 	bl	800a794 <USB_HC_Init>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	bd90      	pop	{r4, r7, pc}

0800478e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_HCD_HC_Halt+0x1e>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e00f      	b.n	80047cc <HAL_HCD_HC_Halt+0x3e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	4611      	mov	r1, r2
 80047bc:	4618      	mov	r0, r3
 80047be:	f006 fba0 	bl	800af02 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	4608      	mov	r0, r1
 80047de:	4611      	mov	r1, r2
 80047e0:	461a      	mov	r2, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	70fb      	strb	r3, [r7, #3]
 80047e6:	460b      	mov	r3, r1
 80047e8:	70bb      	strb	r3, [r7, #2]
 80047ea:	4613      	mov	r3, r2
 80047ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3317      	adds	r3, #23
 80047fe:	78ba      	ldrb	r2, [r7, #2]
 8004800:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	3326      	adds	r3, #38	@ 0x26
 8004812:	787a      	ldrb	r2, [r7, #1]
 8004814:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004816:	7c3b      	ldrb	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d114      	bne.n	8004846 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	332a      	adds	r3, #42	@ 0x2a
 800482c:	2203      	movs	r2, #3
 800482e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	3319      	adds	r3, #25
 8004840:	7f3a      	ldrb	r2, [r7, #28]
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e009      	b.n	800485a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	332a      	adds	r3, #42	@ 0x2a
 8004856:	2202      	movs	r2, #2
 8004858:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800485a:	787b      	ldrb	r3, [r7, #1]
 800485c:	2b03      	cmp	r3, #3
 800485e:	f200 8102 	bhi.w	8004a66 <HAL_HCD_HC_SubmitRequest+0x292>
 8004862:	a201      	add	r2, pc, #4	@ (adr r2, 8004868 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004879 	.word	0x08004879
 800486c:	08004a51 	.word	0x08004a51
 8004870:	0800493d 	.word	0x0800493d
 8004874:	080049c7 	.word	0x080049c7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004878:	7c3b      	ldrb	r3, [r7, #16]
 800487a:	2b01      	cmp	r3, #1
 800487c:	f040 80f5 	bne.w	8004a6a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004880:	78bb      	ldrb	r3, [r7, #2]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d12d      	bne.n	80048e2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004886:	8b3b      	ldrh	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800488c:	78fa      	ldrb	r2, [r7, #3]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	333d      	adds	r3, #61	@ 0x3d
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	333d      	adds	r3, #61	@ 0x3d
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	332a      	adds	r3, #42	@ 0x2a
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80048ca:	e0ce      	b.n	8004a6a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048cc:	78fa      	ldrb	r2, [r7, #3]
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	440b      	add	r3, r1
 80048da:	332a      	adds	r3, #42	@ 0x2a
 80048dc:	2202      	movs	r2, #2
 80048de:	701a      	strb	r2, [r3, #0]
      break;
 80048e0:	e0c3      	b.n	8004a6a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	331a      	adds	r3, #26
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	f040 80b8 	bne.w	8004a6a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	333c      	adds	r3, #60	@ 0x3c
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	332a      	adds	r3, #42	@ 0x2a
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]
      break;
 8004924:	e0a1      	b.n	8004a6a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	332a      	adds	r3, #42	@ 0x2a
 8004936:	2202      	movs	r2, #2
 8004938:	701a      	strb	r2, [r3, #0]
      break;
 800493a:	e096      	b.n	8004a6a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800493c:	78bb      	ldrb	r3, [r7, #2]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d120      	bne.n	8004984 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	333d      	adds	r3, #61	@ 0x3d
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004958:	78fa      	ldrb	r2, [r7, #3]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	332a      	adds	r3, #42	@ 0x2a
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800496c:	e07e      	b.n	8004a6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	332a      	adds	r3, #42	@ 0x2a
 800497e:	2202      	movs	r2, #2
 8004980:	701a      	strb	r2, [r3, #0]
      break;
 8004982:	e073      	b.n	8004a6c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	333c      	adds	r3, #60	@ 0x3c
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	332a      	adds	r3, #42	@ 0x2a
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]
      break;
 80049ae:	e05d      	b.n	8004a6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	332a      	adds	r3, #42	@ 0x2a
 80049c0:	2202      	movs	r2, #2
 80049c2:	701a      	strb	r2, [r3, #0]
      break;
 80049c4:	e052      	b.n	8004a6c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80049c6:	78bb      	ldrb	r3, [r7, #2]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d120      	bne.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	333d      	adds	r3, #61	@ 0x3d
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049e2:	78fa      	ldrb	r2, [r7, #3]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	332a      	adds	r3, #42	@ 0x2a
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80049f6:	e039      	b.n	8004a6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049f8:	78fa      	ldrb	r2, [r7, #3]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	332a      	adds	r3, #42	@ 0x2a
 8004a08:	2202      	movs	r2, #2
 8004a0a:	701a      	strb	r2, [r3, #0]
      break;
 8004a0c:	e02e      	b.n	8004a6c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	333c      	adds	r3, #60	@ 0x3c
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	332a      	adds	r3, #42	@ 0x2a
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
      break;
 8004a38:	e018      	b.n	8004a6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	332a      	adds	r3, #42	@ 0x2a
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	701a      	strb	r2, [r3, #0]
      break;
 8004a4e:	e00d      	b.n	8004a6c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	332a      	adds	r3, #42	@ 0x2a
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
      break;
 8004a64:	e002      	b.n	8004a6c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004a66:	bf00      	nop
 8004a68:	e000      	b.n	8004a6c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004a6a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	332c      	adds	r3, #44	@ 0x2c
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	8b39      	ldrh	r1, [r7, #24]
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4403      	add	r3, r0
 8004a90:	3334      	adds	r3, #52	@ 0x34
 8004a92:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	334c      	adds	r3, #76	@ 0x4c
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3338      	adds	r3, #56	@ 0x38
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	3315      	adds	r3, #21
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004ad0:	78fa      	ldrb	r2, [r7, #3]
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	334d      	adds	r3, #77	@ 0x4d
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	4613      	mov	r3, r2
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	3310      	adds	r3, #16
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	4413      	add	r3, r2
 8004af8:	1d19      	adds	r1, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	799b      	ldrb	r3, [r3, #6]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f005 ff74 	bl	800a9ec <USB_HC_StartXfer>
 8004b04:	4603      	mov	r3, r0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop

08004b10 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f005 fc68 	bl	800a3fc <USB_GetMode>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	f040 80fb 	bne.w	8004d2a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f005 fc2b 	bl	800a394 <USB_ReadInterrupts>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80f1 	beq.w	8004d28 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f005 fc22 	bl	800a394 <USB_ReadInterrupts>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b5a:	d104      	bne.n	8004b66 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004b64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f005 fc12 	bl	800a394 <USB_ReadInterrupts>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b7a:	d104      	bne.n	8004b86 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f005 fc02 	bl	800a394 <USB_ReadInterrupts>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b9a:	d104      	bne.n	8004ba6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004ba4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f005 fbf2 	bl	800a394 <USB_ReadInterrupts>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d103      	bne.n	8004bc2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f005 fbe4 	bl	800a394 <USB_ReadInterrupts>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bd6:	d120      	bne.n	8004c1a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004be0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d113      	bne.n	8004c1a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004bf2:	2110      	movs	r1, #16
 8004bf4:	6938      	ldr	r0, [r7, #16]
 8004bf6:	f005 fad7 	bl	800a1a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004bfa:	6938      	ldr	r0, [r7, #16]
 8004bfc:	f005 fb06 	bl	800a20c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	7a5b      	ldrb	r3, [r3, #9]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d105      	bne.n	8004c14 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f005 fcf8 	bl	800a604 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f008 ffdd 	bl	800dbd4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f005 fbb8 	bl	800a394 <USB_ReadInterrupts>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c2e:	d102      	bne.n	8004c36 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f001 fd33 	bl	800669c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f005 fbaa 	bl	800a394 <USB_ReadInterrupts>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d106      	bne.n	8004c58 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f008 ffa6 	bl	800db9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2208      	movs	r2, #8
 8004c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f005 fb99 	bl	800a394 <USB_ReadInterrupts>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c6c:	d139      	bne.n	8004ce2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f006 f934 	bl	800aee0 <USB_HC_ReadInterrupt>
 8004c78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	e025      	b.n	8004ccc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d018      	beq.n	8004cc6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004caa:	d106      	bne.n	8004cba <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f905 	bl	8004ec2 <HCD_HC_IN_IRQHandler>
 8004cb8:	e005      	b.n	8004cc6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 ff67 	bl	8005b94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	795b      	ldrb	r3, [r3, #5]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d3d3      	bcc.n	8004c80 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f005 fb54 	bl	800a394 <USB_ReadInterrupts>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d101      	bne.n	8004cfa <HAL_HCD_IRQHandler+0x1ea>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <HAL_HCD_IRQHandler+0x1ec>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d014      	beq.n	8004d2a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0210 	bic.w	r2, r2, #16
 8004d0e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 fbe4 	bl	80064de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0210 	orr.w	r2, r2, #16
 8004d24:	619a      	str	r2, [r3, #24]
 8004d26:	e000      	b.n	8004d2a <HAL_HCD_IRQHandler+0x21a>
      return;
 8004d28:	bf00      	nop
    }
  }
}
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_HCD_Start+0x16>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e013      	b.n	8004d6e <HAL_HCD_Start+0x3e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2101      	movs	r1, #1
 8004d54:	4618      	mov	r0, r3
 8004d56:	f005 fcbc 	bl	800a6d2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f005 f9b4 	bl	800a0cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_HCD_Stop+0x16>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e00d      	b.n	8004da8 <HAL_HCD_Stop+0x32>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f006 fa0f 	bl	800b1bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f005 fc5e 	bl	800a67e <USB_ResetPort>
 8004dc2:	4603      	mov	r3, r0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	334c      	adds	r3, #76	@ 0x4c
 8004de8:	781b      	ldrb	r3, [r3, #0]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3338      	adds	r3, #56	@ 0x38
 8004e12:	681b      	ldr	r3, [r3, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f005 fca0 	bl	800a772 <USB_GetCurrentFrame>
 8004e32:	4603      	mov	r3, r0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f005 fc7b 	bl	800a744 <USB_GetHostSpeed>
 8004e4e:	4603      	mov	r3, r0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	331a      	adds	r3, #26
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	331b      	adds	r3, #27
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	3325      	adds	r3, #37	@ 0x25
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	3324      	adds	r3, #36	@ 0x24
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	78fa      	ldrb	r2, [r7, #3]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f005 fa6a 	bl	800a3ba <USB_ReadChInterrupts>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d11a      	bne.n	8004f26 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004efc:	461a      	mov	r2, r3
 8004efe:	2304      	movs	r3, #4
 8004f00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	334d      	adds	r3, #77	@ 0x4d
 8004f12:	2207      	movs	r2, #7
 8004f14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	78fa      	ldrb	r2, [r7, #3]
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f005 ffef 	bl	800af02 <USB_HC_Halt>
 8004f24:	e09e      	b.n	8005064 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f005 fa43 	bl	800a3ba <USB_ReadChInterrupts>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f3e:	d11b      	bne.n	8004f78 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	334d      	adds	r3, #77	@ 0x4d
 8004f64:	2208      	movs	r2, #8
 8004f66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	78fa      	ldrb	r2, [r7, #3]
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f005 ffc6 	bl	800af02 <USB_HC_Halt>
 8004f76:	e075      	b.n	8005064 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	78fa      	ldrb	r2, [r7, #3]
 8004f7e:	4611      	mov	r1, r2
 8004f80:	4618      	mov	r0, r3
 8004f82:	f005 fa1a 	bl	800a3ba <USB_ReadChInterrupts>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d11a      	bne.n	8004fc6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	334d      	adds	r3, #77	@ 0x4d
 8004fb2:	2206      	movs	r2, #6
 8004fb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	78fa      	ldrb	r2, [r7, #3]
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f005 ff9f 	bl	800af02 <USB_HC_Halt>
 8004fc4:	e04e      	b.n	8005064 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	4611      	mov	r1, r2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f005 f9f3 	bl	800a3ba <USB_ReadChInterrupts>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fde:	d11b      	bne.n	8005018 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fec:	461a      	mov	r2, r3
 8004fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ff2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	334d      	adds	r3, #77	@ 0x4d
 8005004:	2209      	movs	r2, #9
 8005006:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	4611      	mov	r1, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f005 ff76 	bl	800af02 <USB_HC_Halt>
 8005016:	e025      	b.n	8005064 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f005 f9ca 	bl	800a3ba <USB_ReadChInterrupts>
 8005026:	4603      	mov	r3, r0
 8005028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502c:	2b80      	cmp	r3, #128	@ 0x80
 800502e:	d119      	bne.n	8005064 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800503c:	461a      	mov	r2, r3
 800503e:	2380      	movs	r3, #128	@ 0x80
 8005040:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	334d      	adds	r3, #77	@ 0x4d
 8005052:	2207      	movs	r2, #7
 8005054:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f005 ff4f 	bl	800af02 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f005 f9a4 	bl	800a3ba <USB_ReadChInterrupts>
 8005072:	4603      	mov	r3, r0
 8005074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800507c:	d112      	bne.n	80050a4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	78fa      	ldrb	r2, [r7, #3]
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f005 ff3b 	bl	800af02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	4413      	add	r3, r2
 8005094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005098:	461a      	mov	r2, r3
 800509a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800509e:	6093      	str	r3, [r2, #8]
 80050a0:	f000 bd75 	b.w	8005b8e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	78fa      	ldrb	r2, [r7, #3]
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f005 f984 	bl	800a3ba <USB_ReadChInterrupts>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	f040 8128 	bne.w	800530e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ca:	461a      	mov	r2, r3
 80050cc:	2320      	movs	r3, #32
 80050ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80050d0:	78fa      	ldrb	r2, [r7, #3]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	331b      	adds	r3, #27
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d119      	bne.n	800511a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80050e6:	78fa      	ldrb	r2, [r7, #3]
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	331b      	adds	r3, #27
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4413      	add	r3, r2
 8005102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	440a      	add	r2, r1
 8005110:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005118:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	799b      	ldrb	r3, [r3, #6]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01b      	beq.n	800515a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	3330      	adds	r3, #48	@ 0x30
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	1ac9      	subs	r1, r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4403      	add	r3, r0
 8005156:	3338      	adds	r3, #56	@ 0x38
 8005158:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	334d      	adds	r3, #77	@ 0x4d
 800516a:	2201      	movs	r2, #1
 800516c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	3344      	adds	r3, #68	@ 0x44
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800518e:	461a      	mov	r2, r3
 8005190:	2301      	movs	r3, #1
 8005192:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005194:	78fa      	ldrb	r2, [r7, #3]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	3326      	adds	r3, #38	@ 0x26
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	3326      	adds	r3, #38	@ 0x26
 80051ba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d110      	bne.n	80051e2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f005 fe9a 	bl	800af02 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051da:	461a      	mov	r2, r3
 80051dc:	2310      	movs	r3, #16
 80051de:	6093      	str	r3, [r2, #8]
 80051e0:	e03d      	b.n	800525e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3326      	adds	r3, #38	@ 0x26
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d00a      	beq.n	800520e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3326      	adds	r3, #38	@ 0x26
 8005208:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800520a:	2b01      	cmp	r3, #1
 800520c:	d127      	bne.n	800525e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	440a      	add	r2, r1
 8005224:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005228:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800522c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	334c      	adds	r3, #76	@ 0x4c
 800523e:	2201      	movs	r2, #1
 8005240:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	334c      	adds	r3, #76	@ 0x4c
 8005252:	781a      	ldrb	r2, [r3, #0]
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f008 fcc9 	bl	800dbf0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	799b      	ldrb	r3, [r3, #6]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d13b      	bne.n	80052de <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005266:	78fa      	ldrb	r2, [r7, #3]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	3338      	adds	r3, #56	@ 0x38
 8005276:	6819      	ldr	r1, [r3, #0]
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4403      	add	r3, r0
 8005286:	3328      	adds	r3, #40	@ 0x28
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	440b      	add	r3, r1
 800528c:	1e59      	subs	r1, r3, #1
 800528e:	78fa      	ldrb	r2, [r7, #3]
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4403      	add	r3, r0
 800529c:	3328      	adds	r3, #40	@ 0x28
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8470 	beq.w	8005b8e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	333c      	adds	r3, #60	@ 0x3c
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	f083 0301 	eor.w	r3, r3, #1
 80052c6:	b2d8      	uxtb	r0, r3
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	333c      	adds	r3, #60	@ 0x3c
 80052d6:	4602      	mov	r2, r0
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	f000 bc58 	b.w	8005b8e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	333c      	adds	r3, #60	@ 0x3c
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	f083 0301 	eor.w	r3, r3, #1
 80052f6:	b2d8      	uxtb	r0, r3
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	333c      	adds	r3, #60	@ 0x3c
 8005306:	4602      	mov	r2, r0
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	f000 bc40 	b.w	8005b8e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	4611      	mov	r1, r2
 8005316:	4618      	mov	r0, r3
 8005318:	f005 f84f 	bl	800a3ba <USB_ReadChInterrupts>
 800531c:	4603      	mov	r3, r0
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d131      	bne.n	800538a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005332:	461a      	mov	r2, r3
 8005334:	2320      	movs	r3, #32
 8005336:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	331a      	adds	r3, #26
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b01      	cmp	r3, #1
 800534c:	f040 841f 	bne.w	8005b8e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	331b      	adds	r3, #27
 8005360:	2201      	movs	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005364:	78fa      	ldrb	r2, [r7, #3]
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	334d      	adds	r3, #77	@ 0x4d
 8005374:	2203      	movs	r2, #3
 8005376:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	78fa      	ldrb	r2, [r7, #3]
 800537e:	4611      	mov	r1, r2
 8005380:	4618      	mov	r0, r3
 8005382:	f005 fdbe 	bl	800af02 <USB_HC_Halt>
 8005386:	f000 bc02 	b.w	8005b8e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	78fa      	ldrb	r2, [r7, #3]
 8005390:	4611      	mov	r1, r2
 8005392:	4618      	mov	r0, r3
 8005394:	f005 f811 	bl	800a3ba <USB_ReadChInterrupts>
 8005398:	4603      	mov	r3, r0
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b02      	cmp	r3, #2
 80053a0:	f040 8305 	bne.w	80059ae <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b0:	461a      	mov	r2, r3
 80053b2:	2302      	movs	r3, #2
 80053b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	334d      	adds	r3, #77	@ 0x4d
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d114      	bne.n	80053f6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053cc:	78fa      	ldrb	r2, [r7, #3]
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	334d      	adds	r3, #77	@ 0x4d
 80053dc:	2202      	movs	r2, #2
 80053de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	334c      	adds	r3, #76	@ 0x4c
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e2cc      	b.n	8005990 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80053f6:	78fa      	ldrb	r2, [r7, #3]
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	334d      	adds	r3, #77	@ 0x4d
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b06      	cmp	r3, #6
 800540a:	d114      	bne.n	8005436 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	334d      	adds	r3, #77	@ 0x4d
 800541c:	2202      	movs	r2, #2
 800541e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	334c      	adds	r3, #76	@ 0x4c
 8005430:	2205      	movs	r2, #5
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	e2ac      	b.n	8005990 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005436:	78fa      	ldrb	r2, [r7, #3]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	440b      	add	r3, r1
 8005444:	334d      	adds	r3, #77	@ 0x4d
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b07      	cmp	r3, #7
 800544a:	d00b      	beq.n	8005464 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800544c:	78fa      	ldrb	r2, [r7, #3]
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	4613      	mov	r3, r2
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	334d      	adds	r3, #77	@ 0x4d
 800545c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800545e:	2b09      	cmp	r3, #9
 8005460:	f040 80a6 	bne.w	80055b0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005464:	78fa      	ldrb	r2, [r7, #3]
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	1a9b      	subs	r3, r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	334d      	adds	r3, #77	@ 0x4d
 8005474:	2202      	movs	r2, #2
 8005476:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	3344      	adds	r3, #68	@ 0x44
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4403      	add	r3, r0
 8005498:	3344      	adds	r3, #68	@ 0x44
 800549a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	3344      	adds	r3, #68	@ 0x44
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d943      	bls.n	800553a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	3344      	adds	r3, #68	@ 0x44
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	331a      	adds	r3, #26
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d123      	bne.n	8005524 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	331b      	adds	r3, #27
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80054f0:	78fa      	ldrb	r2, [r7, #3]
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	331c      	adds	r3, #28
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	440a      	add	r2, r1
 800551a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800551e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005522:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	334c      	adds	r3, #76	@ 0x4c
 8005534:	2204      	movs	r2, #4
 8005536:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005538:	e229      	b.n	800598e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	334c      	adds	r3, #76	@ 0x4c
 800554a:	2202      	movs	r2, #2
 800554c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	3326      	adds	r3, #38	@ 0x26
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005564:	78fa      	ldrb	r2, [r7, #3]
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	3326      	adds	r3, #38	@ 0x26
 8005574:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005576:	2b02      	cmp	r3, #2
 8005578:	f040 8209 	bne.w	800598e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005592:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800559a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055a8:	461a      	mov	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80055ae:	e1ee      	b.n	800598e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	334d      	adds	r3, #77	@ 0x4d
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	f040 80c8 	bne.w	8005758 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	334d      	adds	r3, #77	@ 0x4d
 80055d8:	2202      	movs	r2, #2
 80055da:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80055dc:	78fa      	ldrb	r2, [r7, #3]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	331b      	adds	r3, #27
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	f040 81ce 	bne.w	8005990 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	3326      	adds	r3, #38	@ 0x26
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d16b      	bne.n	80056e2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3348      	adds	r3, #72	@ 0x48
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	1c59      	adds	r1, r3, #1
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4403      	add	r3, r0
 800562a:	3348      	adds	r3, #72	@ 0x48
 800562c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	3348      	adds	r3, #72	@ 0x48
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d943      	bls.n	80056cc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	3348      	adds	r3, #72	@ 0x48
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005658:	78fa      	ldrb	r2, [r7, #3]
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	331b      	adds	r3, #27
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	3344      	adds	r3, #68	@ 0x44
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d809      	bhi.n	8005696 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	331c      	adds	r3, #28
 8005692:	2201      	movs	r2, #1
 8005694:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4413      	add	r3, r2
 800569e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056b4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	334c      	adds	r3, #76	@ 0x4c
 80056c6:	2204      	movs	r2, #4
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	e014      	b.n	80056f6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056cc:	78fa      	ldrb	r2, [r7, #3]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	334c      	adds	r3, #76	@ 0x4c
 80056dc:	2202      	movs	r2, #2
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	e009      	b.n	80056f6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	440b      	add	r3, r1
 80056f0:	334c      	adds	r3, #76	@ 0x4c
 80056f2:	2202      	movs	r2, #2
 80056f4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	3326      	adds	r3, #38	@ 0x26
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800570c:	78fa      	ldrb	r2, [r7, #3]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3326      	adds	r3, #38	@ 0x26
 800571c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800571e:	2b02      	cmp	r3, #2
 8005720:	f040 8136 	bne.w	8005990 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4413      	add	r3, r2
 800572c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800573a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005742:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005750:	461a      	mov	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e11b      	b.n	8005990 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	334d      	adds	r3, #77	@ 0x4d
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b03      	cmp	r3, #3
 800576c:	f040 8081 	bne.w	8005872 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005770:	78fa      	ldrb	r2, [r7, #3]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	334d      	adds	r3, #77	@ 0x4d
 8005780:	2202      	movs	r2, #2
 8005782:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005784:	78fa      	ldrb	r2, [r7, #3]
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	4613      	mov	r3, r2
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	331b      	adds	r3, #27
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b01      	cmp	r3, #1
 8005798:	f040 80fa 	bne.w	8005990 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800579c:	78fa      	ldrb	r2, [r7, #3]
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	334c      	adds	r3, #76	@ 0x4c
 80057ac:	2202      	movs	r2, #2
 80057ae:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	78fa      	ldrb	r2, [r7, #3]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ce:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ee:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	440a      	add	r2, r1
 8005806:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800580a:	f023 0320 	bic.w	r3, r3, #32
 800580e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4613      	mov	r3, r2
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	3326      	adds	r3, #38	@ 0x26
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005826:	78fa      	ldrb	r2, [r7, #3]
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	3326      	adds	r3, #38	@ 0x26
 8005836:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005838:	2b02      	cmp	r3, #2
 800583a:	f040 80a9 	bne.w	8005990 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800583e:	78fb      	ldrb	r3, [r7, #3]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	4413      	add	r3, r2
 8005846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005854:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800585c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4413      	add	r3, r2
 8005866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800586a:	461a      	mov	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	e08e      	b.n	8005990 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	334d      	adds	r3, #77	@ 0x4d
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b04      	cmp	r3, #4
 8005886:	d143      	bne.n	8005910 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005888:	78fa      	ldrb	r2, [r7, #3]
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	334d      	adds	r3, #77	@ 0x4d
 8005898:	2202      	movs	r2, #2
 800589a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	334c      	adds	r3, #76	@ 0x4c
 80058ac:	2202      	movs	r2, #2
 80058ae:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	3326      	adds	r3, #38	@ 0x26
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80058c6:	78fa      	ldrb	r2, [r7, #3]
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	3326      	adds	r3, #38	@ 0x26
 80058d6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d159      	bne.n	8005990 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058f2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058fa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4413      	add	r3, r2
 8005904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005908:	461a      	mov	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e03f      	b.n	8005990 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	334d      	adds	r3, #77	@ 0x4d
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b08      	cmp	r3, #8
 8005924:	d126      	bne.n	8005974 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005926:	78fa      	ldrb	r2, [r7, #3]
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	334d      	adds	r3, #77	@ 0x4d
 8005936:	2202      	movs	r2, #2
 8005938:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	3344      	adds	r3, #68	@ 0x44
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	1c59      	adds	r1, r3, #1
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4403      	add	r3, r0
 800595a:	3344      	adds	r3, #68	@ 0x44
 800595c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	334c      	adds	r3, #76	@ 0x4c
 800596e:	2204      	movs	r2, #4
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	e00d      	b.n	8005990 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	334d      	adds	r3, #77	@ 0x4d
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b02      	cmp	r3, #2
 8005988:	f000 8100 	beq.w	8005b8c <HCD_HC_IN_IRQHandler+0xcca>
 800598c:	e000      	b.n	8005990 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800598e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	4613      	mov	r3, r2
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	334c      	adds	r3, #76	@ 0x4c
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f008 f922 	bl	800dbf0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80059ac:	e0ef      	b.n	8005b8e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	78fa      	ldrb	r2, [r7, #3]
 80059b4:	4611      	mov	r1, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f004 fcff 	bl	800a3ba <USB_ReadChInterrupts>
 80059bc:	4603      	mov	r3, r0
 80059be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c2:	2b40      	cmp	r3, #64	@ 0x40
 80059c4:	d12f      	bne.n	8005a26 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059d2:	461a      	mov	r2, r3
 80059d4:	2340      	movs	r3, #64	@ 0x40
 80059d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	334d      	adds	r3, #77	@ 0x4d
 80059e8:	2205      	movs	r2, #5
 80059ea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	331a      	adds	r3, #26
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005a02:	78fa      	ldrb	r2, [r7, #3]
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	3344      	adds	r3, #68	@ 0x44
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	78fa      	ldrb	r2, [r7, #3]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f005 fa6f 	bl	800af02 <USB_HC_Halt>
 8005a24:	e0b3      	b.n	8005b8e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	78fa      	ldrb	r2, [r7, #3]
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f004 fcc3 	bl	800a3ba <USB_ReadChInterrupts>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	f040 80a7 	bne.w	8005b8e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005a40:	78fa      	ldrb	r2, [r7, #3]
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	4613      	mov	r3, r2
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	3326      	adds	r3, #38	@ 0x26
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d11b      	bne.n	8005a8e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005a56:	78fa      	ldrb	r2, [r7, #3]
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	3344      	adds	r3, #68	@ 0x44
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	334d      	adds	r3, #77	@ 0x4d
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	78fa      	ldrb	r2, [r7, #3]
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f005 fa3b 	bl	800af02 <USB_HC_Halt>
 8005a8c:	e03f      	b.n	8005b0e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005a8e:	78fa      	ldrb	r2, [r7, #3]
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	1a9b      	subs	r3, r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	3326      	adds	r3, #38	@ 0x26
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	3326      	adds	r3, #38	@ 0x26
 8005ab4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d129      	bne.n	8005b0e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005aba:	78fa      	ldrb	r2, [r7, #3]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	3344      	adds	r3, #68	@ 0x44
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	799b      	ldrb	r3, [r3, #6]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <HCD_HC_IN_IRQHandler+0xc2a>
 8005ad6:	78fa      	ldrb	r2, [r7, #3]
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	331b      	adds	r3, #27
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d110      	bne.n	8005b0e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4613      	mov	r3, r2
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	334d      	adds	r3, #77	@ 0x4d
 8005afc:	2204      	movs	r2, #4
 8005afe:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f005 f9fa 	bl	800af02 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	331b      	adds	r3, #27
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d129      	bne.n	8005b78 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b24:	78fa      	ldrb	r2, [r7, #3]
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	331b      	adds	r3, #27
 8005b34:	2200      	movs	r2, #0
 8005b36:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	78fa      	ldrb	r2, [r7, #3]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b56:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	78fa      	ldrb	r2, [r7, #3]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b72:	f043 0320 	orr.w	r3, r3, #32
 8005b76:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b84:	461a      	mov	r2, r3
 8005b86:	2310      	movs	r3, #16
 8005b88:	6093      	str	r3, [r2, #8]
 8005b8a:	e000      	b.n	8005b8e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005b8c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f004 fc01 	bl	800a3ba <USB_ReadChInterrupts>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d11b      	bne.n	8005bfa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	334d      	adds	r3, #77	@ 0x4d
 8005be4:	2207      	movs	r2, #7
 8005be6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	78fa      	ldrb	r2, [r7, #3]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f005 f986 	bl	800af02 <USB_HC_Halt>
 8005bf6:	f000 bc6f 	b.w	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f004 fbd9 	bl	800a3ba <USB_ReadChInterrupts>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	f040 8082 	bne.w	8005d18 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c20:	461a      	mov	r2, r3
 8005c22:	2320      	movs	r3, #32
 8005c24:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	1a9b      	subs	r3, r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	3319      	adds	r3, #25
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d124      	bne.n	8005c86 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	3319      	adds	r3, #25
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c50:	78fa      	ldrb	r2, [r7, #3]
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	334c      	adds	r3, #76	@ 0x4c
 8005c60:	2202      	movs	r2, #2
 8005c62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005c64:	78fa      	ldrb	r2, [r7, #3]
 8005c66:	6879      	ldr	r1, [r7, #4]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	1a9b      	subs	r3, r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	334d      	adds	r3, #77	@ 0x4d
 8005c74:	2203      	movs	r2, #3
 8005c76:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	4611      	mov	r1, r2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f005 f93e 	bl	800af02 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	331a      	adds	r3, #26
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	f040 841d 	bne.w	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	331b      	adds	r3, #27
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 8411 	bne.w	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3326      	adds	r3, #38	@ 0x26
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d009      	beq.n	8005ce0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	331b      	adds	r3, #27
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005ce0:	78fa      	ldrb	r2, [r7, #3]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	334d      	adds	r3, #77	@ 0x4d
 8005cf0:	2203      	movs	r2, #3
 8005cf2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f005 f900 	bl	800af02 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3344      	adds	r3, #68	@ 0x44
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e3df      	b.n	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	78fa      	ldrb	r2, [r7, #3]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f004 fb4a 	bl	800a3ba <USB_ReadChInterrupts>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d30:	d111      	bne.n	8005d56 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d44:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f005 f8d7 	bl	800af02 <USB_HC_Halt>
 8005d54:	e3c0      	b.n	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f004 fb2b 	bl	800a3ba <USB_ReadChInterrupts>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d168      	bne.n	8005e40 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005d6e:	78fa      	ldrb	r2, [r7, #3]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	3344      	adds	r3, #68	@ 0x44
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f004 fb15 	bl	800a3ba <USB_ReadChInterrupts>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d96:	2b40      	cmp	r3, #64	@ 0x40
 8005d98:	d112      	bne.n	8005dc0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	3319      	adds	r3, #25
 8005daa:	2201      	movs	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2340      	movs	r3, #64	@ 0x40
 8005dbe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005dc0:	78fa      	ldrb	r2, [r7, #3]
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	331b      	adds	r3, #27
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d019      	beq.n	8005e0a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	331b      	adds	r3, #27
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e08:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e16:	461a      	mov	r2, r3
 8005e18:	2301      	movs	r3, #1
 8005e1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	4613      	mov	r3, r2
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	440b      	add	r3, r1
 8005e2a:	334d      	adds	r3, #77	@ 0x4d
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	78fa      	ldrb	r2, [r7, #3]
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f005 f862 	bl	800af02 <USB_HC_Halt>
 8005e3e:	e34b      	b.n	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f004 fab6 	bl	800a3ba <USB_ReadChInterrupts>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e54:	2b40      	cmp	r3, #64	@ 0x40
 8005e56:	d139      	bne.n	8005ecc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	334d      	adds	r3, #77	@ 0x4d
 8005e68:	2205      	movs	r2, #5
 8005e6a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	331a      	adds	r3, #26
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	3319      	adds	r3, #25
 8005e92:	2201      	movs	r2, #1
 8005e94:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3344      	adds	r3, #68	@ 0x44
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	78fa      	ldrb	r2, [r7, #3]
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f005 f825 	bl	800af02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2340      	movs	r3, #64	@ 0x40
 8005ec8:	6093      	str	r3, [r2, #8]
 8005eca:	e305      	b.n	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	78fa      	ldrb	r2, [r7, #3]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f004 fa70 	bl	800a3ba <USB_ReadChInterrupts>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d11a      	bne.n	8005f1a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	334d      	adds	r3, #77	@ 0x4d
 8005f06:	2206      	movs	r2, #6
 8005f08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	78fa      	ldrb	r2, [r7, #3]
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f004 fff5 	bl	800af02 <USB_HC_Halt>
 8005f18:	e2de      	b.n	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	78fa      	ldrb	r2, [r7, #3]
 8005f20:	4611      	mov	r1, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f004 fa49 	bl	800a3ba <USB_ReadChInterrupts>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d144      	bne.n	8005fbc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	3344      	adds	r3, #68	@ 0x44
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	334d      	adds	r3, #77	@ 0x4d
 8005f56:	2204      	movs	r2, #4
 8005f58:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	3319      	adds	r3, #25
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d114      	bne.n	8005f9a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	3318      	adds	r3, #24
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	3319      	adds	r3, #25
 8005f96:	2201      	movs	r2, #1
 8005f98:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f004 ffad 	bl	800af02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2310      	movs	r3, #16
 8005fb8:	6093      	str	r3, [r2, #8]
 8005fba:	e28d      	b.n	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f004 f9f8 	bl	800a3ba <USB_ReadChInterrupts>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd0:	2b80      	cmp	r3, #128	@ 0x80
 8005fd2:	d169      	bne.n	80060a8 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	799b      	ldrb	r3, [r3, #6]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d111      	bne.n	8006000 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005fdc:	78fa      	ldrb	r2, [r7, #3]
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	334d      	adds	r3, #77	@ 0x4d
 8005fec:	2207      	movs	r2, #7
 8005fee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	78fa      	ldrb	r2, [r7, #3]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f004 ff82 	bl	800af02 <USB_HC_Halt>
 8005ffe:	e049      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006000:	78fa      	ldrb	r2, [r7, #3]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	3344      	adds	r3, #68	@ 0x44
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	1c59      	adds	r1, r3, #1
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4403      	add	r3, r0
 8006020:	3344      	adds	r3, #68	@ 0x44
 8006022:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	3344      	adds	r3, #68	@ 0x44
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d922      	bls.n	8006080 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	3344      	adds	r3, #68	@ 0x44
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	334c      	adds	r3, #76	@ 0x4c
 800605e:	2204      	movs	r2, #4
 8006060:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	334c      	adds	r3, #76	@ 0x4c
 8006072:	781a      	ldrb	r2, [r3, #0]
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f007 fdb9 	bl	800dbf0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800607e:	e009      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	334c      	adds	r3, #76	@ 0x4c
 8006090:	2202      	movs	r2, #2
 8006092:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a0:	461a      	mov	r2, r3
 80060a2:	2380      	movs	r3, #128	@ 0x80
 80060a4:	6093      	str	r3, [r2, #8]
 80060a6:	e217      	b.n	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	4611      	mov	r1, r2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f004 f982 	bl	800a3ba <USB_ReadChInterrupts>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060c0:	d11b      	bne.n	80060fa <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	334d      	adds	r3, #77	@ 0x4d
 80060d2:	2209      	movs	r2, #9
 80060d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	78fa      	ldrb	r2, [r7, #3]
 80060dc:	4611      	mov	r1, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f004 ff0f 	bl	800af02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f0:	461a      	mov	r2, r3
 80060f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060f6:	6093      	str	r3, [r2, #8]
 80060f8:	e1ee      	b.n	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	78fa      	ldrb	r2, [r7, #3]
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f004 f959 	bl	800a3ba <USB_ReadChInterrupts>
 8006108:	4603      	mov	r3, r0
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b02      	cmp	r3, #2
 8006110:	f040 81df 	bne.w	80064d2 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006120:	461a      	mov	r2, r3
 8006122:	2302      	movs	r3, #2
 8006124:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006126:	78fa      	ldrb	r2, [r7, #3]
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	1a9b      	subs	r3, r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	334d      	adds	r3, #77	@ 0x4d
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	f040 8093 	bne.w	8006264 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	334d      	adds	r3, #77	@ 0x4d
 800614e:	2202      	movs	r2, #2
 8006150:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	334c      	adds	r3, #76	@ 0x4c
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006166:	78fa      	ldrb	r2, [r7, #3]
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	3326      	adds	r3, #38	@ 0x26
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d00b      	beq.n	8006194 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800617c:	78fa      	ldrb	r2, [r7, #3]
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	3326      	adds	r3, #38	@ 0x26
 800618c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800618e:	2b03      	cmp	r3, #3
 8006190:	f040 8190 	bne.w	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	799b      	ldrb	r3, [r3, #6]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d115      	bne.n	80061c8 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	333d      	adds	r3, #61	@ 0x3d
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	f083 0301 	eor.w	r3, r3, #1
 80061b4:	b2d8      	uxtb	r0, r3
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	333d      	adds	r3, #61	@ 0x3d
 80061c4:	4602      	mov	r2, r0
 80061c6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	799b      	ldrb	r3, [r3, #6]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	f040 8171 	bne.w	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	3334      	adds	r3, #52	@ 0x34
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8165 	beq.w	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	1a9b      	subs	r3, r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	3334      	adds	r3, #52	@ 0x34
 80061fa:	6819      	ldr	r1, [r3, #0]
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4403      	add	r3, r0
 800620a:	3328      	adds	r3, #40	@ 0x28
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	440b      	add	r3, r1
 8006210:	1e59      	subs	r1, r3, #1
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4403      	add	r3, r0
 8006220:	3328      	adds	r3, #40	@ 0x28
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	fbb1 f3f3 	udiv	r3, r1, r3
 8006228:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 813f 	beq.w	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006236:	78fa      	ldrb	r2, [r7, #3]
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	4613      	mov	r3, r2
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	440b      	add	r3, r1
 8006244:	333d      	adds	r3, #61	@ 0x3d
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	78fa      	ldrb	r2, [r7, #3]
 800624a:	f083 0301 	eor.w	r3, r3, #1
 800624e:	b2d8      	uxtb	r0, r3
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	333d      	adds	r3, #61	@ 0x3d
 800625e:	4602      	mov	r2, r0
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	e127      	b.n	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	4613      	mov	r3, r2
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	1a9b      	subs	r3, r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	334d      	adds	r3, #77	@ 0x4d
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d120      	bne.n	80062bc <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800627a:	78fa      	ldrb	r2, [r7, #3]
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	1a9b      	subs	r3, r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	334d      	adds	r3, #77	@ 0x4d
 800628a:	2202      	movs	r2, #2
 800628c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800628e:	78fa      	ldrb	r2, [r7, #3]
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	1a9b      	subs	r3, r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	331b      	adds	r3, #27
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	f040 8107 	bne.w	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	334c      	adds	r3, #76	@ 0x4c
 80062b6:	2202      	movs	r2, #2
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	e0fb      	b.n	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	334d      	adds	r3, #77	@ 0x4d
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d13a      	bne.n	8006348 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062d2:	78fa      	ldrb	r2, [r7, #3]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	1a9b      	subs	r3, r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	334d      	adds	r3, #77	@ 0x4d
 80062e2:	2202      	movs	r2, #2
 80062e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062e6:	78fa      	ldrb	r2, [r7, #3]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	334c      	adds	r3, #76	@ 0x4c
 80062f6:	2202      	movs	r2, #2
 80062f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80062fa:	78fa      	ldrb	r2, [r7, #3]
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	1a9b      	subs	r3, r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	331b      	adds	r3, #27
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b01      	cmp	r3, #1
 800630e:	f040 80d1 	bne.w	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	331b      	adds	r3, #27
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	78fa      	ldrb	r2, [r7, #3]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	440a      	add	r2, r1
 800633c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006344:	6053      	str	r3, [r2, #4]
 8006346:	e0b5      	b.n	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006348:	78fa      	ldrb	r2, [r7, #3]
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	440b      	add	r3, r1
 8006356:	334d      	adds	r3, #77	@ 0x4d
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b05      	cmp	r3, #5
 800635c:	d114      	bne.n	8006388 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	1a9b      	subs	r3, r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	334d      	adds	r3, #77	@ 0x4d
 800636e:	2202      	movs	r2, #2
 8006370:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006372:	78fa      	ldrb	r2, [r7, #3]
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	334c      	adds	r3, #76	@ 0x4c
 8006382:	2202      	movs	r2, #2
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	e095      	b.n	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006388:	78fa      	ldrb	r2, [r7, #3]
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4613      	mov	r3, r2
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	334d      	adds	r3, #77	@ 0x4d
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b06      	cmp	r3, #6
 800639c:	d114      	bne.n	80063c8 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800639e:	78fa      	ldrb	r2, [r7, #3]
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	334d      	adds	r3, #77	@ 0x4d
 80063ae:	2202      	movs	r2, #2
 80063b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80063b2:	78fa      	ldrb	r2, [r7, #3]
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	1a9b      	subs	r3, r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	334c      	adds	r3, #76	@ 0x4c
 80063c2:	2205      	movs	r2, #5
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	e075      	b.n	80064b4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	334d      	adds	r3, #77	@ 0x4d
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b07      	cmp	r3, #7
 80063dc:	d00a      	beq.n	80063f4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80063de:	78fa      	ldrb	r2, [r7, #3]
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	440b      	add	r3, r1
 80063ec:	334d      	adds	r3, #77	@ 0x4d
 80063ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80063f0:	2b09      	cmp	r3, #9
 80063f2:	d170      	bne.n	80064d6 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80063f4:	78fa      	ldrb	r2, [r7, #3]
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	1a9b      	subs	r3, r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	334d      	adds	r3, #77	@ 0x4d
 8006404:	2202      	movs	r2, #2
 8006406:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006408:	78fa      	ldrb	r2, [r7, #3]
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	4613      	mov	r3, r2
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	1a9b      	subs	r3, r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	3344      	adds	r3, #68	@ 0x44
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	1a9b      	subs	r3, r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4403      	add	r3, r0
 8006428:	3344      	adds	r3, #68	@ 0x44
 800642a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800642c:	78fa      	ldrb	r2, [r7, #3]
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	3344      	adds	r3, #68	@ 0x44
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d914      	bls.n	800646c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	3344      	adds	r3, #68	@ 0x44
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	1a9b      	subs	r3, r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	440b      	add	r3, r1
 8006464:	334c      	adds	r3, #76	@ 0x4c
 8006466:	2204      	movs	r2, #4
 8006468:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800646a:	e022      	b.n	80064b2 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800646c:	78fa      	ldrb	r2, [r7, #3]
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	4613      	mov	r3, r2
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	440b      	add	r3, r1
 800647a:	334c      	adds	r3, #76	@ 0x4c
 800647c:	2202      	movs	r2, #2
 800647e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006496:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800649e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ac:	461a      	mov	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80064b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80064b4:	78fa      	ldrb	r2, [r7, #3]
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	334c      	adds	r3, #76	@ 0x4c
 80064c4:	781a      	ldrb	r2, [r3, #0]
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f007 fb90 	bl	800dbf0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80064d0:	e002      	b.n	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80064d2:	bf00      	nop
 80064d4:	e000      	b.n	80064d8 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80064d6:	bf00      	nop
  }
}
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b08a      	sub	sp, #40	@ 0x28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	0c5b      	lsrs	r3, r3, #17
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	091b      	lsrs	r3, r3, #4
 800650e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006512:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d004      	beq.n	8006524 <HCD_RXQLVL_IRQHandler+0x46>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b05      	cmp	r3, #5
 800651e:	f000 80b6 	beq.w	800668e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006522:	e0b7      	b.n	8006694 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 80b3 	beq.w	8006692 <HCD_RXQLVL_IRQHandler+0x1b4>
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4613      	mov	r3, r2
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	332c      	adds	r3, #44	@ 0x2c
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 80a7 	beq.w	8006692 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4613      	mov	r3, r2
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	3338      	adds	r3, #56	@ 0x38
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	18d1      	adds	r1, r2, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	4613      	mov	r3, r2
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4403      	add	r3, r0
 8006568:	3334      	adds	r3, #52	@ 0x34
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4299      	cmp	r1, r3
 800656e:	f200 8083 	bhi.w	8006678 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	4613      	mov	r3, r2
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	332c      	adds	r3, #44	@ 0x2c
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	b292      	uxth	r2, r2
 800658c:	4619      	mov	r1, r3
 800658e:	f003 fea9 	bl	800a2e4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	4613      	mov	r3, r2
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	1a9b      	subs	r3, r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	332c      	adds	r3, #44	@ 0x2c
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	18d1      	adds	r1, r2, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4613      	mov	r3, r2
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4403      	add	r3, r0
 80065b6:	332c      	adds	r3, #44	@ 0x2c
 80065b8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	4613      	mov	r3, r2
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3338      	adds	r3, #56	@ 0x38
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	18d1      	adds	r1, r2, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4613      	mov	r3, r2
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4403      	add	r3, r0
 80065de:	3338      	adds	r3, #56	@ 0x38
 80065e0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	0cdb      	lsrs	r3, r3, #19
 80065f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065f6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	4613      	mov	r3, r2
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	1a9b      	subs	r3, r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	3328      	adds	r3, #40	@ 0x28
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	4293      	cmp	r3, r2
 8006610:	d13f      	bne.n	8006692 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d03c      	beq.n	8006692 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	4413      	add	r3, r2
 8006620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800662e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006636:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	4413      	add	r3, r2
 8006640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006644:	461a      	mov	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	4613      	mov	r3, r2
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	333c      	adds	r3, #60	@ 0x3c
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f083 0301 	eor.w	r3, r3, #1
 8006660:	b2d8      	uxtb	r0, r3
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4613      	mov	r3, r2
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	333c      	adds	r3, #60	@ 0x3c
 8006672:	4602      	mov	r2, r0
 8006674:	701a      	strb	r2, [r3, #0]
      break;
 8006676:	e00c      	b.n	8006692 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	4613      	mov	r3, r2
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	1a9b      	subs	r3, r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	440b      	add	r3, r1
 8006686:	334c      	adds	r3, #76	@ 0x4c
 8006688:	2204      	movs	r2, #4
 800668a:	701a      	strb	r2, [r3, #0]
      break;
 800668c:	e001      	b.n	8006692 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006692:	bf00      	nop
  }
}
 8006694:	bf00      	nop
 8006696:	3728      	adds	r7, #40	@ 0x28
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80066c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d10b      	bne.n	80066ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d102      	bne.n	80066e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f007 fa6a 	bl	800dbb8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f043 0302 	orr.w	r3, r3, #2
 80066ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d132      	bne.n	800675c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f043 0308 	orr.w	r3, r3, #8
 80066fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b04      	cmp	r3, #4
 8006706:	d126      	bne.n	8006756 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7a5b      	ldrb	r3, [r3, #9]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d113      	bne.n	8006738 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006716:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800671a:	d106      	bne.n	800672a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2102      	movs	r1, #2
 8006722:	4618      	mov	r0, r3
 8006724:	f003 ff6e 	bl	800a604 <USB_InitFSLSPClkSel>
 8006728:	e011      	b.n	800674e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2101      	movs	r1, #1
 8006730:	4618      	mov	r0, r3
 8006732:	f003 ff67 	bl	800a604 <USB_InitFSLSPClkSel>
 8006736:	e00a      	b.n	800674e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	79db      	ldrb	r3, [r3, #7]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d106      	bne.n	800674e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006746:	461a      	mov	r2, r3
 8006748:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800674c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f007 fa5c 	bl	800dc0c <HAL_HCD_PortEnabled_Callback>
 8006754:	e002      	b.n	800675c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f007 fa66 	bl	800dc28 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b20      	cmp	r3, #32
 8006764:	d103      	bne.n	800676e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f043 0320 	orr.w	r3, r3, #32
 800676c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006774:	461a      	mov	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	6013      	str	r3, [r2, #0]
}
 800677a:	bf00      	nop
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e12b      	b.n	80069ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fb fd16 	bl	80021dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2224      	movs	r2, #36	@ 0x24
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0201 	bic.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067e8:	f001 fc60 	bl	80080ac <HAL_RCC_GetPCLK1Freq>
 80067ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	4a81      	ldr	r2, [pc, #516]	@ (80069f8 <HAL_I2C_Init+0x274>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d807      	bhi.n	8006808 <HAL_I2C_Init+0x84>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4a80      	ldr	r2, [pc, #512]	@ (80069fc <HAL_I2C_Init+0x278>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	bf94      	ite	ls
 8006800:	2301      	movls	r3, #1
 8006802:	2300      	movhi	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e006      	b.n	8006816 <HAL_I2C_Init+0x92>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a7d      	ldr	r2, [pc, #500]	@ (8006a00 <HAL_I2C_Init+0x27c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	bf94      	ite	ls
 8006810:	2301      	movls	r3, #1
 8006812:	2300      	movhi	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e0e7      	b.n	80069ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a78      	ldr	r2, [pc, #480]	@ (8006a04 <HAL_I2C_Init+0x280>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	0c9b      	lsrs	r3, r3, #18
 8006828:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4a6a      	ldr	r2, [pc, #424]	@ (80069f8 <HAL_I2C_Init+0x274>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d802      	bhi.n	8006858 <HAL_I2C_Init+0xd4>
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	3301      	adds	r3, #1
 8006856:	e009      	b.n	800686c <HAL_I2C_Init+0xe8>
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	4a69      	ldr	r2, [pc, #420]	@ (8006a08 <HAL_I2C_Init+0x284>)
 8006864:	fba2 2303 	umull	r2, r3, r2, r3
 8006868:	099b      	lsrs	r3, r3, #6
 800686a:	3301      	adds	r3, #1
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6812      	ldr	r2, [r2, #0]
 8006870:	430b      	orrs	r3, r1
 8006872:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800687e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	495c      	ldr	r1, [pc, #368]	@ (80069f8 <HAL_I2C_Init+0x274>)
 8006888:	428b      	cmp	r3, r1
 800688a:	d819      	bhi.n	80068c0 <HAL_I2C_Init+0x13c>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1e59      	subs	r1, r3, #1
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	fbb1 f3f3 	udiv	r3, r1, r3
 800689a:	1c59      	adds	r1, r3, #1
 800689c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80068a0:	400b      	ands	r3, r1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <HAL_I2C_Init+0x138>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1e59      	subs	r1, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80068b4:	3301      	adds	r3, #1
 80068b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ba:	e051      	b.n	8006960 <HAL_I2C_Init+0x1dc>
 80068bc:	2304      	movs	r3, #4
 80068be:	e04f      	b.n	8006960 <HAL_I2C_Init+0x1dc>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d111      	bne.n	80068ec <HAL_I2C_Init+0x168>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1e58      	subs	r0, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6859      	ldr	r1, [r3, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	440b      	add	r3, r1
 80068d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068da:	3301      	adds	r3, #1
 80068dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	bf0c      	ite	eq
 80068e4:	2301      	moveq	r3, #1
 80068e6:	2300      	movne	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e012      	b.n	8006912 <HAL_I2C_Init+0x18e>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	1e58      	subs	r0, r3, #1
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6859      	ldr	r1, [r3, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	0099      	lsls	r1, r3, #2
 80068fc:	440b      	add	r3, r1
 80068fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006902:	3301      	adds	r3, #1
 8006904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006908:	2b00      	cmp	r3, #0
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_I2C_Init+0x196>
 8006916:	2301      	movs	r3, #1
 8006918:	e022      	b.n	8006960 <HAL_I2C_Init+0x1dc>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10e      	bne.n	8006940 <HAL_I2C_Init+0x1bc>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1e58      	subs	r0, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6859      	ldr	r1, [r3, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	440b      	add	r3, r1
 8006930:	fbb0 f3f3 	udiv	r3, r0, r3
 8006934:	3301      	adds	r3, #1
 8006936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800693a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800693e:	e00f      	b.n	8006960 <HAL_I2C_Init+0x1dc>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	1e58      	subs	r0, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6859      	ldr	r1, [r3, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	0099      	lsls	r1, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	fbb0 f3f3 	udiv	r3, r0, r3
 8006956:	3301      	adds	r3, #1
 8006958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800695c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	6809      	ldr	r1, [r1, #0]
 8006964:	4313      	orrs	r3, r2
 8006966:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69da      	ldr	r2, [r3, #28]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800698e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6911      	ldr	r1, [r2, #16]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	68d2      	ldr	r2, [r2, #12]
 800699a:	4311      	orrs	r1, r2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6812      	ldr	r2, [r2, #0]
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	695a      	ldr	r2, [r3, #20]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	000186a0 	.word	0x000186a0
 80069fc:	001e847f 	.word	0x001e847f
 8006a00:	003d08ff 	.word	0x003d08ff
 8006a04:	431bde83 	.word	0x431bde83
 8006a08:	10624dd3 	.word	0x10624dd3

08006a0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	461a      	mov	r2, r3
 8006a18:	460b      	mov	r3, r1
 8006a1a:	817b      	strh	r3, [r7, #10]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a20:	f7fc f814 	bl	8002a4c <HAL_GetTick>
 8006a24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	f040 80e0 	bne.w	8006bf4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	2319      	movs	r3, #25
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	4970      	ldr	r1, [pc, #448]	@ (8006c00 <HAL_I2C_Master_Transmit+0x1f4>)
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 fc64 	bl	800730c <I2C_WaitOnFlagUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e0d3      	b.n	8006bf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_I2C_Master_Transmit+0x50>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e0cc      	b.n	8006bf6 <HAL_I2C_Master_Transmit+0x1ea>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d007      	beq.n	8006a82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0201 	orr.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2221      	movs	r2, #33	@ 0x21
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2210      	movs	r2, #16
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	893a      	ldrh	r2, [r7, #8]
 8006ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4a50      	ldr	r2, [pc, #320]	@ (8006c04 <HAL_I2C_Master_Transmit+0x1f8>)
 8006ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006ac4:	8979      	ldrh	r1, [r7, #10]
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 face 	bl	800706c <I2C_MasterRequestWrite>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e08d      	b.n	8006bf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ada:	2300      	movs	r3, #0
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006af0:	e066      	b.n	8006bc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	6a39      	ldr	r1, [r7, #32]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 fd22 	bl	8007540 <I2C_WaitOnTXEFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00d      	beq.n	8006b1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d107      	bne.n	8006b1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e06b      	b.n	8006bf6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b22:	781a      	ldrb	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d11b      	bne.n	8006b94 <HAL_I2C_Master_Transmit+0x188>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d017      	beq.n	8006b94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	6a39      	ldr	r1, [r7, #32]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fd19 	bl	80075d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00d      	beq.n	8006bc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d107      	bne.n	8006bbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e01a      	b.n	8006bf6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d194      	bne.n	8006af2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e000      	b.n	8006bf6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006bf4:	2302      	movs	r3, #2
  }
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	00100002 	.word	0x00100002
 8006c04:	ffff0000 	.word	0xffff0000

08006c08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	@ 0x30
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	607a      	str	r2, [r7, #4]
 8006c12:	461a      	mov	r2, r3
 8006c14:	460b      	mov	r3, r1
 8006c16:	817b      	strh	r3, [r7, #10]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c1c:	f7fb ff16 	bl	8002a4c <HAL_GetTick>
 8006c20:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	f040 8217 	bne.w	800705e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	2319      	movs	r3, #25
 8006c36:	2201      	movs	r2, #1
 8006c38:	497c      	ldr	r1, [pc, #496]	@ (8006e2c <HAL_I2C_Master_Receive+0x224>)
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fb66 	bl	800730c <I2C_WaitOnFlagUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006c46:	2302      	movs	r3, #2
 8006c48:	e20a      	b.n	8007060 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_I2C_Master_Receive+0x50>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e203      	b.n	8007060 <HAL_I2C_Master_Receive+0x458>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d007      	beq.n	8006c7e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0201 	orr.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2222      	movs	r2, #34	@ 0x22
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2210      	movs	r2, #16
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	893a      	ldrh	r2, [r7, #8]
 8006cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a5c      	ldr	r2, [pc, #368]	@ (8006e30 <HAL_I2C_Master_Receive+0x228>)
 8006cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006cc0:	8979      	ldrh	r1, [r7, #10]
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fa52 	bl	8007170 <I2C_MasterRequestRead>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e1c4      	b.n	8007060 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d113      	bne.n	8006d06 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cde:	2300      	movs	r3, #0
 8006ce0:	623b      	str	r3, [r7, #32]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	623b      	str	r3, [r7, #32]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	623b      	str	r3, [r7, #32]
 8006cf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	e198      	b.n	8007038 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d11b      	bne.n	8006d46 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	61fb      	str	r3, [r7, #28]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e178      	b.n	8007038 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d11b      	bne.n	8006d86 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	e158      	b.n	8007038 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d96:	2300      	movs	r3, #0
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006dac:	e144      	b.n	8007038 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	f200 80f1 	bhi.w	8006f9a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d123      	bne.n	8006e08 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 fc4b 	bl	8007660 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e145      	b.n	8007060 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691a      	ldr	r2, [r3, #16]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e06:	e117      	b.n	8007038 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d14e      	bne.n	8006eae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e16:	2200      	movs	r2, #0
 8006e18:	4906      	ldr	r1, [pc, #24]	@ (8006e34 <HAL_I2C_Master_Receive+0x22c>)
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 fa76 	bl	800730c <I2C_WaitOnFlagUntilTimeout>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d008      	beq.n	8006e38 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e11a      	b.n	8007060 <HAL_I2C_Master_Receive+0x458>
 8006e2a:	bf00      	nop
 8006e2c:	00100002 	.word	0x00100002
 8006e30:	ffff0000 	.word	0xffff0000
 8006e34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006eac:	e0c4      	b.n	8007038 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	496c      	ldr	r1, [pc, #432]	@ (8007068 <HAL_I2C_Master_Receive+0x460>)
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fa27 	bl	800730c <I2C_WaitOnFlagUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e0cb      	b.n	8007060 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	2200      	movs	r2, #0
 8006f12:	4955      	ldr	r1, [pc, #340]	@ (8007068 <HAL_I2C_Master_Receive+0x460>)
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f9f9 	bl	800730c <I2C_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e09d      	b.n	8007060 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f98:	e04e      	b.n	8007038 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 fb5e 	bl	8007660 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e058      	b.n	8007060 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d124      	bne.n	8007038 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d107      	bne.n	8007006 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007004:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800703c:	2b00      	cmp	r3, #0
 800703e:	f47f aeb6 	bne.w	8006dae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	e000      	b.n	8007060 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800705e:	2302      	movs	r3, #2
  }
}
 8007060:	4618      	mov	r0, r3
 8007062:	3728      	adds	r7, #40	@ 0x28
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	00010004 	.word	0x00010004

0800706c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af02      	add	r7, sp, #8
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	607a      	str	r2, [r7, #4]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	460b      	mov	r3, r1
 800707a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007080:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b08      	cmp	r3, #8
 8007086:	d006      	beq.n	8007096 <I2C_MasterRequestWrite+0x2a>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d003      	beq.n	8007096 <I2C_MasterRequestWrite+0x2a>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007094:	d108      	bne.n	80070a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e00b      	b.n	80070c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ac:	2b12      	cmp	r3, #18
 80070ae:	d107      	bne.n	80070c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f91d 	bl	800730c <I2C_WaitOnFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00d      	beq.n	80070f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e6:	d103      	bne.n	80070f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e035      	b.n	8007160 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070fc:	d108      	bne.n	8007110 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070fe:	897b      	ldrh	r3, [r7, #10]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800710c:	611a      	str	r2, [r3, #16]
 800710e:	e01b      	b.n	8007148 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007110:	897b      	ldrh	r3, [r7, #10]
 8007112:	11db      	asrs	r3, r3, #7
 8007114:	b2db      	uxtb	r3, r3
 8007116:	f003 0306 	and.w	r3, r3, #6
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f063 030f 	orn	r3, r3, #15
 8007120:	b2da      	uxtb	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	490e      	ldr	r1, [pc, #56]	@ (8007168 <I2C_MasterRequestWrite+0xfc>)
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f966 	bl	8007400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e010      	b.n	8007160 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800713e:	897b      	ldrh	r3, [r7, #10]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4907      	ldr	r1, [pc, #28]	@ (800716c <I2C_MasterRequestWrite+0x100>)
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f956 	bl	8007400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	00010008 	.word	0x00010008
 800716c:	00010002 	.word	0x00010002

08007170 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	607a      	str	r2, [r7, #4]
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	460b      	mov	r3, r1
 800717e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007194:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b08      	cmp	r3, #8
 800719a:	d006      	beq.n	80071aa <I2C_MasterRequestRead+0x3a>
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d003      	beq.n	80071aa <I2C_MasterRequestRead+0x3a>
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80071a8:	d108      	bne.n	80071bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e00b      	b.n	80071d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c0:	2b11      	cmp	r3, #17
 80071c2:	d107      	bne.n	80071d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f893 	bl	800730c <I2C_WaitOnFlagUntilTimeout>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00d      	beq.n	8007208 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071fa:	d103      	bne.n	8007204 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007202:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e079      	b.n	80072fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007210:	d108      	bne.n	8007224 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007212:	897b      	ldrh	r3, [r7, #10]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f043 0301 	orr.w	r3, r3, #1
 800721a:	b2da      	uxtb	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	611a      	str	r2, [r3, #16]
 8007222:	e05f      	b.n	80072e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007224:	897b      	ldrh	r3, [r7, #10]
 8007226:	11db      	asrs	r3, r3, #7
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 0306 	and.w	r3, r3, #6
 800722e:	b2db      	uxtb	r3, r3
 8007230:	f063 030f 	orn	r3, r3, #15
 8007234:	b2da      	uxtb	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	4930      	ldr	r1, [pc, #192]	@ (8007304 <I2C_MasterRequestRead+0x194>)
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 f8dc 	bl	8007400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e054      	b.n	80072fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007252:	897b      	ldrh	r3, [r7, #10]
 8007254:	b2da      	uxtb	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	4929      	ldr	r1, [pc, #164]	@ (8007308 <I2C_MasterRequestRead+0x198>)
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 f8cc 	bl	8007400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e044      	b.n	80072fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007272:	2300      	movs	r3, #0
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007296:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f831 	bl	800730c <I2C_WaitOnFlagUntilTimeout>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00d      	beq.n	80072cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072be:	d103      	bne.n	80072c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072c6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e017      	b.n	80072fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80072cc:	897b      	ldrh	r3, [r7, #10]
 80072ce:	11db      	asrs	r3, r3, #7
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 0306 	and.w	r3, r3, #6
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f063 030e 	orn	r3, r3, #14
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	4907      	ldr	r1, [pc, #28]	@ (8007308 <I2C_MasterRequestRead+0x198>)
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 f888 	bl	8007400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	00010008 	.word	0x00010008
 8007308:	00010002 	.word	0x00010002

0800730c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	4613      	mov	r3, r2
 800731a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800731c:	e048      	b.n	80073b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007324:	d044      	beq.n	80073b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007326:	f7fb fb91 	bl	8002a4c <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d302      	bcc.n	800733c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d139      	bne.n	80073b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	0c1b      	lsrs	r3, r3, #16
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b01      	cmp	r3, #1
 8007344:	d10d      	bne.n	8007362 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	43da      	mvns	r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4013      	ands	r3, r2
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	bf0c      	ite	eq
 8007358:	2301      	moveq	r3, #1
 800735a:	2300      	movne	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	e00c      	b.n	800737c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	43da      	mvns	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4013      	ands	r3, r2
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	bf0c      	ite	eq
 8007374:	2301      	moveq	r3, #1
 8007376:	2300      	movne	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	461a      	mov	r2, r3
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	429a      	cmp	r2, r3
 8007380:	d116      	bne.n	80073b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739c:	f043 0220 	orr.w	r2, r3, #32
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e023      	b.n	80073f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	0c1b      	lsrs	r3, r3, #16
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d10d      	bne.n	80073d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	43da      	mvns	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4013      	ands	r3, r2
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	bf0c      	ite	eq
 80073cc:	2301      	moveq	r3, #1
 80073ce:	2300      	movne	r3, #0
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	461a      	mov	r2, r3
 80073d4:	e00c      	b.n	80073f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	43da      	mvns	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	4013      	ands	r3, r2
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	bf0c      	ite	eq
 80073e8:	2301      	moveq	r3, #1
 80073ea:	2300      	movne	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	461a      	mov	r2, r3
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d093      	beq.n	800731e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800740e:	e071      	b.n	80074f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800741a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800741e:	d123      	bne.n	8007468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800742e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007454:	f043 0204 	orr.w	r2, r3, #4
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e067      	b.n	8007538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746e:	d041      	beq.n	80074f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007470:	f7fb faec 	bl	8002a4c <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	d302      	bcc.n	8007486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d136      	bne.n	80074f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	0c1b      	lsrs	r3, r3, #16
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b01      	cmp	r3, #1
 800748e:	d10c      	bne.n	80074aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	43da      	mvns	r2, r3
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4013      	ands	r3, r2
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	bf14      	ite	ne
 80074a2:	2301      	movne	r3, #1
 80074a4:	2300      	moveq	r3, #0
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	e00b      	b.n	80074c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	43da      	mvns	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4013      	ands	r3, r2
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	bf14      	ite	ne
 80074bc:	2301      	movne	r3, #1
 80074be:	2300      	moveq	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d016      	beq.n	80074f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e0:	f043 0220 	orr.w	r2, r3, #32
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e021      	b.n	8007538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	0c1b      	lsrs	r3, r3, #16
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d10c      	bne.n	8007518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	43da      	mvns	r2, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4013      	ands	r3, r2
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	bf14      	ite	ne
 8007510:	2301      	movne	r3, #1
 8007512:	2300      	moveq	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	e00b      	b.n	8007530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	43da      	mvns	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4013      	ands	r3, r2
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	bf14      	ite	ne
 800752a:	2301      	movne	r3, #1
 800752c:	2300      	moveq	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	f47f af6d 	bne.w	8007410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800754c:	e034      	b.n	80075b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f8e3 	bl	800771a <I2C_IsAcknowledgeFailed>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e034      	b.n	80075c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007564:	d028      	beq.n	80075b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007566:	f7fb fa71 	bl	8002a4c <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	429a      	cmp	r2, r3
 8007574:	d302      	bcc.n	800757c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d11d      	bne.n	80075b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007586:	2b80      	cmp	r3, #128	@ 0x80
 8007588:	d016      	beq.n	80075b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2220      	movs	r2, #32
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a4:	f043 0220 	orr.w	r2, r3, #32
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e007      	b.n	80075c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c2:	2b80      	cmp	r3, #128	@ 0x80
 80075c4:	d1c3      	bne.n	800754e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075dc:	e034      	b.n	8007648 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f89b 	bl	800771a <I2C_IsAcknowledgeFailed>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e034      	b.n	8007658 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f4:	d028      	beq.n	8007648 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f6:	f7fb fa29 	bl	8002a4c <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	429a      	cmp	r2, r3
 8007604:	d302      	bcc.n	800760c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d11d      	bne.n	8007648 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b04      	cmp	r3, #4
 8007618:	d016      	beq.n	8007648 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2220      	movs	r2, #32
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007634:	f043 0220 	orr.w	r2, r3, #32
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e007      	b.n	8007658 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b04      	cmp	r3, #4
 8007654:	d1c3      	bne.n	80075de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800766c:	e049      	b.n	8007702 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b10      	cmp	r3, #16
 800767a:	d119      	bne.n	80076b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0210 	mvn.w	r2, #16
 8007684:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e030      	b.n	8007712 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076b0:	f7fb f9cc 	bl	8002a4c <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d302      	bcc.n	80076c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d11d      	bne.n	8007702 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d0:	2b40      	cmp	r3, #64	@ 0x40
 80076d2:	d016      	beq.n	8007702 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2220      	movs	r2, #32
 80076de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	f043 0220 	orr.w	r2, r3, #32
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e007      	b.n	8007712 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800770c:	2b40      	cmp	r3, #64	@ 0x40
 800770e:	d1ae      	bne.n	800766e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800772c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007730:	d11b      	bne.n	800776a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800773a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007756:	f043 0204 	orr.w	r2, r3, #4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8007780:	4b05      	ldr	r3, [pc, #20]	@ (8007798 <HAL_PWR_EnableWakeUpPin+0x20>)
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	4904      	ldr	r1, [pc, #16]	@ (8007798 <HAL_PWR_EnableWakeUpPin+0x20>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4313      	orrs	r3, r2
 800778a:	604b      	str	r3, [r1, #4]
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	40007000 	.word	0x40007000

0800779c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80077a0:	4b08      	ldr	r3, [pc, #32]	@ (80077c4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a07      	ldr	r2, [pc, #28]	@ (80077c4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80077a6:	f043 0302 	orr.w	r3, r3, #2
 80077aa:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80077ac:	4b06      	ldr	r3, [pc, #24]	@ (80077c8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	4a05      	ldr	r2, [pc, #20]	@ (80077c8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80077b2:	f043 0304 	orr.w	r3, r3, #4
 80077b6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80077b8:	bf30      	wfi
}
 80077ba:	bf00      	nop
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	40007000 	.word	0x40007000
 80077c8:	e000ed00 	.word	0xe000ed00

080077cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e267      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d075      	beq.n	80078d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ea:	4b88      	ldr	r3, [pc, #544]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 030c 	and.w	r3, r3, #12
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d00c      	beq.n	8007810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077f6:	4b85      	ldr	r3, [pc, #532]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d112      	bne.n	8007828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007802:	4b82      	ldr	r3, [pc, #520]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800780a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800780e:	d10b      	bne.n	8007828 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007810:	4b7e      	ldr	r3, [pc, #504]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d05b      	beq.n	80078d4 <HAL_RCC_OscConfig+0x108>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d157      	bne.n	80078d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e242      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007830:	d106      	bne.n	8007840 <HAL_RCC_OscConfig+0x74>
 8007832:	4b76      	ldr	r3, [pc, #472]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a75      	ldr	r2, [pc, #468]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	e01d      	b.n	800787c <HAL_RCC_OscConfig+0xb0>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007848:	d10c      	bne.n	8007864 <HAL_RCC_OscConfig+0x98>
 800784a:	4b70      	ldr	r3, [pc, #448]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a6f      	ldr	r2, [pc, #444]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	4b6d      	ldr	r3, [pc, #436]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a6c      	ldr	r2, [pc, #432]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 800785c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	e00b      	b.n	800787c <HAL_RCC_OscConfig+0xb0>
 8007864:	4b69      	ldr	r3, [pc, #420]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a68      	ldr	r2, [pc, #416]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 800786a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	4b66      	ldr	r3, [pc, #408]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a65      	ldr	r2, [pc, #404]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800787a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d013      	beq.n	80078ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007884:	f7fb f8e2 	bl	8002a4c <HAL_GetTick>
 8007888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800788a:	e008      	b.n	800789e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800788c:	f7fb f8de 	bl	8002a4c <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	2b64      	cmp	r3, #100	@ 0x64
 8007898:	d901      	bls.n	800789e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e207      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800789e:	4b5b      	ldr	r3, [pc, #364]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0f0      	beq.n	800788c <HAL_RCC_OscConfig+0xc0>
 80078aa:	e014      	b.n	80078d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ac:	f7fb f8ce 	bl	8002a4c <HAL_GetTick>
 80078b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078b2:	e008      	b.n	80078c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078b4:	f7fb f8ca 	bl	8002a4c <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b64      	cmp	r3, #100	@ 0x64
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e1f3      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078c6:	4b51      	ldr	r3, [pc, #324]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1f0      	bne.n	80078b4 <HAL_RCC_OscConfig+0xe8>
 80078d2:	e000      	b.n	80078d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d063      	beq.n	80079aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078e2:	4b4a      	ldr	r3, [pc, #296]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 030c 	and.w	r3, r3, #12
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00b      	beq.n	8007906 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ee:	4b47      	ldr	r3, [pc, #284]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078f6:	2b08      	cmp	r3, #8
 80078f8:	d11c      	bne.n	8007934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078fa:	4b44      	ldr	r3, [pc, #272]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d116      	bne.n	8007934 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007906:	4b41      	ldr	r3, [pc, #260]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <HAL_RCC_OscConfig+0x152>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d001      	beq.n	800791e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e1c7      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800791e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	4937      	ldr	r1, [pc, #220]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 800792e:	4313      	orrs	r3, r2
 8007930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007932:	e03a      	b.n	80079aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d020      	beq.n	800797e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800793c:	4b34      	ldr	r3, [pc, #208]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800793e:	2201      	movs	r2, #1
 8007940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007942:	f7fb f883 	bl	8002a4c <HAL_GetTick>
 8007946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007948:	e008      	b.n	800795c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800794a:	f7fb f87f 	bl	8002a4c <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d901      	bls.n	800795c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e1a8      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800795c:	4b2b      	ldr	r3, [pc, #172]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d0f0      	beq.n	800794a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007968:	4b28      	ldr	r3, [pc, #160]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	00db      	lsls	r3, r3, #3
 8007976:	4925      	ldr	r1, [pc, #148]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 8007978:	4313      	orrs	r3, r2
 800797a:	600b      	str	r3, [r1, #0]
 800797c:	e015      	b.n	80079aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800797e:	4b24      	ldr	r3, [pc, #144]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007984:	f7fb f862 	bl	8002a4c <HAL_GetTick>
 8007988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800798a:	e008      	b.n	800799e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800798c:	f7fb f85e 	bl	8002a4c <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e187      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800799e:	4b1b      	ldr	r3, [pc, #108]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1f0      	bne.n	800798c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0308 	and.w	r3, r3, #8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d036      	beq.n	8007a24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d016      	beq.n	80079ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079be:	4b15      	ldr	r3, [pc, #84]	@ (8007a14 <HAL_RCC_OscConfig+0x248>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c4:	f7fb f842 	bl	8002a4c <HAL_GetTick>
 80079c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079cc:	f7fb f83e 	bl	8002a4c <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e167      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079de:	4b0b      	ldr	r3, [pc, #44]	@ (8007a0c <HAL_RCC_OscConfig+0x240>)
 80079e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCC_OscConfig+0x200>
 80079ea:	e01b      	b.n	8007a24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079ec:	4b09      	ldr	r3, [pc, #36]	@ (8007a14 <HAL_RCC_OscConfig+0x248>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079f2:	f7fb f82b 	bl	8002a4c <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079f8:	e00e      	b.n	8007a18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079fa:	f7fb f827 	bl	8002a4c <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d907      	bls.n	8007a18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e150      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
 8007a0c:	40023800 	.word	0x40023800
 8007a10:	42470000 	.word	0x42470000
 8007a14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a18:	4b88      	ldr	r3, [pc, #544]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1ea      	bne.n	80079fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0304 	and.w	r3, r3, #4
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 8097 	beq.w	8007b60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a36:	4b81      	ldr	r3, [pc, #516]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10f      	bne.n	8007a62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a42:	2300      	movs	r3, #0
 8007a44:	60bb      	str	r3, [r7, #8]
 8007a46:	4b7d      	ldr	r3, [pc, #500]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4a:	4a7c      	ldr	r2, [pc, #496]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a52:	4b7a      	ldr	r3, [pc, #488]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a5a:	60bb      	str	r3, [r7, #8]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a62:	4b77      	ldr	r3, [pc, #476]	@ (8007c40 <HAL_RCC_OscConfig+0x474>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d118      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a6e:	4b74      	ldr	r3, [pc, #464]	@ (8007c40 <HAL_RCC_OscConfig+0x474>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a73      	ldr	r2, [pc, #460]	@ (8007c40 <HAL_RCC_OscConfig+0x474>)
 8007a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a7a:	f7fa ffe7 	bl	8002a4c <HAL_GetTick>
 8007a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a80:	e008      	b.n	8007a94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a82:	f7fa ffe3 	bl	8002a4c <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e10c      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a94:	4b6a      	ldr	r3, [pc, #424]	@ (8007c40 <HAL_RCC_OscConfig+0x474>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0f0      	beq.n	8007a82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d106      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x2ea>
 8007aa8:	4b64      	ldr	r3, [pc, #400]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aac:	4a63      	ldr	r2, [pc, #396]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ab4:	e01c      	b.n	8007af0 <HAL_RCC_OscConfig+0x324>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b05      	cmp	r3, #5
 8007abc:	d10c      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x30c>
 8007abe:	4b5f      	ldr	r3, [pc, #380]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007ac4:	f043 0304 	orr.w	r3, r3, #4
 8007ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007aca:	4b5c      	ldr	r3, [pc, #368]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ace:	4a5b      	ldr	r2, [pc, #364]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007ad0:	f043 0301 	orr.w	r3, r3, #1
 8007ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ad6:	e00b      	b.n	8007af0 <HAL_RCC_OscConfig+0x324>
 8007ad8:	4b58      	ldr	r3, [pc, #352]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007adc:	4a57      	ldr	r2, [pc, #348]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ae4:	4b55      	ldr	r3, [pc, #340]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae8:	4a54      	ldr	r2, [pc, #336]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007aea:	f023 0304 	bic.w	r3, r3, #4
 8007aee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d015      	beq.n	8007b24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af8:	f7fa ffa8 	bl	8002a4c <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007afe:	e00a      	b.n	8007b16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b00:	f7fa ffa4 	bl	8002a4c <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e0cb      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b16:	4b49      	ldr	r3, [pc, #292]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0ee      	beq.n	8007b00 <HAL_RCC_OscConfig+0x334>
 8007b22:	e014      	b.n	8007b4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b24:	f7fa ff92 	bl	8002a4c <HAL_GetTick>
 8007b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b2a:	e00a      	b.n	8007b42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b2c:	f7fa ff8e 	bl	8002a4c <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e0b5      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b42:	4b3e      	ldr	r3, [pc, #248]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1ee      	bne.n	8007b2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d105      	bne.n	8007b60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b54:	4b39      	ldr	r3, [pc, #228]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b58:	4a38      	ldr	r2, [pc, #224]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80a1 	beq.w	8007cac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b6a:	4b34      	ldr	r3, [pc, #208]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 030c 	and.w	r3, r3, #12
 8007b72:	2b08      	cmp	r3, #8
 8007b74:	d05c      	beq.n	8007c30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d141      	bne.n	8007c02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b7e:	4b31      	ldr	r3, [pc, #196]	@ (8007c44 <HAL_RCC_OscConfig+0x478>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b84:	f7fa ff62 	bl	8002a4c <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b8c:	f7fa ff5e 	bl	8002a4c <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e087      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b9e:	4b27      	ldr	r3, [pc, #156]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1f0      	bne.n	8007b8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69da      	ldr	r2, [r3, #28]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	019b      	lsls	r3, r3, #6
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc0:	085b      	lsrs	r3, r3, #1
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	041b      	lsls	r3, r3, #16
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bcc:	061b      	lsls	r3, r3, #24
 8007bce:	491b      	ldr	r1, [pc, #108]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8007c44 <HAL_RCC_OscConfig+0x478>)
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bda:	f7fa ff37 	bl	8002a4c <HAL_GetTick>
 8007bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007be0:	e008      	b.n	8007bf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007be2:	f7fa ff33 	bl	8002a4c <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d901      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e05c      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bf4:	4b11      	ldr	r3, [pc, #68]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0f0      	beq.n	8007be2 <HAL_RCC_OscConfig+0x416>
 8007c00:	e054      	b.n	8007cac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c02:	4b10      	ldr	r3, [pc, #64]	@ (8007c44 <HAL_RCC_OscConfig+0x478>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c08:	f7fa ff20 	bl	8002a4c <HAL_GetTick>
 8007c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c10:	f7fa ff1c 	bl	8002a4c <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e045      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c22:	4b06      	ldr	r3, [pc, #24]	@ (8007c3c <HAL_RCC_OscConfig+0x470>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1f0      	bne.n	8007c10 <HAL_RCC_OscConfig+0x444>
 8007c2e:	e03d      	b.n	8007cac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d107      	bne.n	8007c48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e038      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	40007000 	.word	0x40007000
 8007c44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c48:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb8 <HAL_RCC_OscConfig+0x4ec>)
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d028      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d121      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d11a      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007c78:	4013      	ands	r3, r2
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007c7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d111      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	3b01      	subs	r3, #1
 8007c92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d107      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d001      	beq.n	8007cac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e000      	b.n	8007cae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40023800 	.word	0x40023800

08007cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e0cc      	b.n	8007e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd0:	4b68      	ldr	r3, [pc, #416]	@ (8007e74 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d90c      	bls.n	8007cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cde:	4b65      	ldr	r3, [pc, #404]	@ (8007e74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ce6:	4b63      	ldr	r3, [pc, #396]	@ (8007e74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d001      	beq.n	8007cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e0b8      	b.n	8007e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d020      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d10:	4b59      	ldr	r3, [pc, #356]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	4a58      	ldr	r2, [pc, #352]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007d16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d28:	4b53      	ldr	r3, [pc, #332]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	4a52      	ldr	r2, [pc, #328]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d34:	4b50      	ldr	r3, [pc, #320]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	494d      	ldr	r1, [pc, #308]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d044      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d107      	bne.n	8007d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d5a:	4b47      	ldr	r3, [pc, #284]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d119      	bne.n	8007d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e07f      	b.n	8007e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d003      	beq.n	8007d7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d107      	bne.n	8007d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d109      	bne.n	8007d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e06f      	b.n	8007e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e067      	b.n	8007e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d9a:	4b37      	ldr	r3, [pc, #220]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f023 0203 	bic.w	r2, r3, #3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	4934      	ldr	r1, [pc, #208]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007dac:	f7fa fe4e 	bl	8002a4c <HAL_GetTick>
 8007db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007db2:	e00a      	b.n	8007dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db4:	f7fa fe4a 	bl	8002a4c <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d901      	bls.n	8007dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e04f      	b.n	8007e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dca:	4b2b      	ldr	r3, [pc, #172]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 020c 	and.w	r2, r3, #12
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d1eb      	bne.n	8007db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ddc:	4b25      	ldr	r3, [pc, #148]	@ (8007e74 <HAL_RCC_ClockConfig+0x1b8>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d20c      	bcs.n	8007e04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dea:	4b22      	ldr	r3, [pc, #136]	@ (8007e74 <HAL_RCC_ClockConfig+0x1b8>)
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007df2:	4b20      	ldr	r3, [pc, #128]	@ (8007e74 <HAL_RCC_ClockConfig+0x1b8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d001      	beq.n	8007e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e032      	b.n	8007e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d008      	beq.n	8007e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e10:	4b19      	ldr	r3, [pc, #100]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	4916      	ldr	r1, [pc, #88]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d009      	beq.n	8007e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e2e:	4b12      	ldr	r3, [pc, #72]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	490e      	ldr	r1, [pc, #56]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e42:	f000 f821 	bl	8007e88 <HAL_RCC_GetSysClockFreq>
 8007e46:	4602      	mov	r2, r0
 8007e48:	4b0b      	ldr	r3, [pc, #44]	@ (8007e78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	091b      	lsrs	r3, r3, #4
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	490a      	ldr	r1, [pc, #40]	@ (8007e7c <HAL_RCC_ClockConfig+0x1c0>)
 8007e54:	5ccb      	ldrb	r3, [r1, r3]
 8007e56:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5a:	4a09      	ldr	r2, [pc, #36]	@ (8007e80 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e5e:	4b09      	ldr	r3, [pc, #36]	@ (8007e84 <HAL_RCC_ClockConfig+0x1c8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fa fdae 	bl	80029c4 <HAL_InitTick>

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	40023c00 	.word	0x40023c00
 8007e78:	40023800 	.word	0x40023800
 8007e7c:	08014fec 	.word	0x08014fec
 8007e80:	20000000 	.word	0x20000000
 8007e84:	20000004 	.word	0x20000004

08007e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e8c:	b094      	sub	sp, #80	@ 0x50
 8007e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e94:	2300      	movs	r3, #0
 8007e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e98:	2300      	movs	r3, #0
 8007e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ea0:	4b79      	ldr	r3, [pc, #484]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 030c 	and.w	r3, r3, #12
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d00d      	beq.n	8007ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	f200 80e1 	bhi.w	8008074 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <HAL_RCC_GetSysClockFreq+0x34>
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d003      	beq.n	8007ec2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007eba:	e0db      	b.n	8008074 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ebc:	4b73      	ldr	r3, [pc, #460]	@ (800808c <HAL_RCC_GetSysClockFreq+0x204>)
 8007ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007ec0:	e0db      	b.n	800807a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ec2:	4b73      	ldr	r3, [pc, #460]	@ (8008090 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ec6:	e0d8      	b.n	800807a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x200>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ed0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d063      	beq.n	8007fa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ede:	4b6a      	ldr	r3, [pc, #424]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	099b      	lsrs	r3, r3, #6
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007efa:	4622      	mov	r2, r4
 8007efc:	462b      	mov	r3, r5
 8007efe:	f04f 0000 	mov.w	r0, #0
 8007f02:	f04f 0100 	mov.w	r1, #0
 8007f06:	0159      	lsls	r1, r3, #5
 8007f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f0c:	0150      	lsls	r0, r2, #5
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4621      	mov	r1, r4
 8007f14:	1a51      	subs	r1, r2, r1
 8007f16:	6139      	str	r1, [r7, #16]
 8007f18:	4629      	mov	r1, r5
 8007f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	018b      	lsls	r3, r1, #6
 8007f30:	4651      	mov	r1, sl
 8007f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f36:	4651      	mov	r1, sl
 8007f38:	018a      	lsls	r2, r1, #6
 8007f3a:	4651      	mov	r1, sl
 8007f3c:	ebb2 0801 	subs.w	r8, r2, r1
 8007f40:	4659      	mov	r1, fp
 8007f42:	eb63 0901 	sbc.w	r9, r3, r1
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f5a:	4690      	mov	r8, r2
 8007f5c:	4699      	mov	r9, r3
 8007f5e:	4623      	mov	r3, r4
 8007f60:	eb18 0303 	adds.w	r3, r8, r3
 8007f64:	60bb      	str	r3, [r7, #8]
 8007f66:	462b      	mov	r3, r5
 8007f68:	eb49 0303 	adc.w	r3, r9, r3
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	024b      	lsls	r3, r1, #9
 8007f7e:	4621      	mov	r1, r4
 8007f80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f84:	4621      	mov	r1, r4
 8007f86:	024a      	lsls	r2, r1, #9
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f8e:	2200      	movs	r2, #0
 8007f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f98:	f7f8 fe66 	bl	8000c68 <__aeabi_uldivmod>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fa4:	e058      	b.n	8008058 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fa6:	4b38      	ldr	r3, [pc, #224]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	099b      	lsrs	r3, r3, #6
 8007fac:	2200      	movs	r2, #0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007fb6:	623b      	str	r3, [r7, #32]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	f04f 0000 	mov.w	r0, #0
 8007fc8:	f04f 0100 	mov.w	r1, #0
 8007fcc:	0159      	lsls	r1, r3, #5
 8007fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fd2:	0150      	lsls	r0, r2, #5
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4641      	mov	r1, r8
 8007fda:	ebb2 0a01 	subs.w	sl, r2, r1
 8007fde:	4649      	mov	r1, r9
 8007fe0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	f04f 0300 	mov.w	r3, #0
 8007fec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ff0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ff4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ff8:	ebb2 040a 	subs.w	r4, r2, sl
 8007ffc:	eb63 050b 	sbc.w	r5, r3, fp
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	00eb      	lsls	r3, r5, #3
 800800a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800800e:	00e2      	lsls	r2, r4, #3
 8008010:	4614      	mov	r4, r2
 8008012:	461d      	mov	r5, r3
 8008014:	4643      	mov	r3, r8
 8008016:	18e3      	adds	r3, r4, r3
 8008018:	603b      	str	r3, [r7, #0]
 800801a:	464b      	mov	r3, r9
 800801c:	eb45 0303 	adc.w	r3, r5, r3
 8008020:	607b      	str	r3, [r7, #4]
 8008022:	f04f 0200 	mov.w	r2, #0
 8008026:	f04f 0300 	mov.w	r3, #0
 800802a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800802e:	4629      	mov	r1, r5
 8008030:	028b      	lsls	r3, r1, #10
 8008032:	4621      	mov	r1, r4
 8008034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008038:	4621      	mov	r1, r4
 800803a:	028a      	lsls	r2, r1, #10
 800803c:	4610      	mov	r0, r2
 800803e:	4619      	mov	r1, r3
 8008040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008042:	2200      	movs	r2, #0
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	61fa      	str	r2, [r7, #28]
 8008048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800804c:	f7f8 fe0c 	bl	8000c68 <__aeabi_uldivmod>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4613      	mov	r3, r2
 8008056:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008058:	4b0b      	ldr	r3, [pc, #44]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x200>)
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	0c1b      	lsrs	r3, r3, #16
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	3301      	adds	r3, #1
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008068:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800806a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800806c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008070:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008072:	e002      	b.n	800807a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008074:	4b05      	ldr	r3, [pc, #20]	@ (800808c <HAL_RCC_GetSysClockFreq+0x204>)
 8008076:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800807a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800807c:	4618      	mov	r0, r3
 800807e:	3750      	adds	r7, #80	@ 0x50
 8008080:	46bd      	mov	sp, r7
 8008082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008086:	bf00      	nop
 8008088:	40023800 	.word	0x40023800
 800808c:	00f42400 	.word	0x00f42400
 8008090:	007a1200 	.word	0x007a1200

08008094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008098:	4b03      	ldr	r3, [pc, #12]	@ (80080a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800809a:	681b      	ldr	r3, [r3, #0]
}
 800809c:	4618      	mov	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	20000000 	.word	0x20000000

080080ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080b0:	f7ff fff0 	bl	8008094 <HAL_RCC_GetHCLKFreq>
 80080b4:	4602      	mov	r2, r0
 80080b6:	4b05      	ldr	r3, [pc, #20]	@ (80080cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	0a9b      	lsrs	r3, r3, #10
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	4903      	ldr	r1, [pc, #12]	@ (80080d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080c2:	5ccb      	ldrb	r3, [r1, r3]
 80080c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	40023800 	.word	0x40023800
 80080d0:	08014ffc 	.word	0x08014ffc

080080d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80080d8:	f7ff ffdc 	bl	8008094 <HAL_RCC_GetHCLKFreq>
 80080dc:	4602      	mov	r2, r0
 80080de:	4b05      	ldr	r3, [pc, #20]	@ (80080f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	0b5b      	lsrs	r3, r3, #13
 80080e4:	f003 0307 	and.w	r3, r3, #7
 80080e8:	4903      	ldr	r1, [pc, #12]	@ (80080f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080ea:	5ccb      	ldrb	r3, [r1, r3]
 80080ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	40023800 	.word	0x40023800
 80080f8:	08014ffc 	.word	0x08014ffc

080080fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e07b      	b.n	8008206 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008112:	2b00      	cmp	r3, #0
 8008114:	d108      	bne.n	8008128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800811e:	d009      	beq.n	8008134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	61da      	str	r2, [r3, #28]
 8008126:	e005      	b.n	8008134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7fa f8ae 	bl	80022b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800816a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081a4:	431a      	orrs	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b8:	ea42 0103 	orr.w	r1, r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	0c1b      	lsrs	r3, r3, #16
 80081d2:	f003 0104 	and.w	r1, r3, #4
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081da:	f003 0210 	and.w	r2, r3, #16
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69da      	ldr	r2, [r3, #28]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b088      	sub	sp, #32
 8008212:	af00      	add	r7, sp, #0
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	603b      	str	r3, [r7, #0]
 800821a:	4613      	mov	r3, r2
 800821c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_SPI_Transmit+0x22>
 800822c:	2302      	movs	r3, #2
 800822e:	e12d      	b.n	800848c <HAL_SPI_Transmit+0x27e>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008238:	f7fa fc08 	bl	8002a4c <HAL_GetTick>
 800823c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800823e:	88fb      	ldrh	r3, [r7, #6]
 8008240:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b01      	cmp	r3, #1
 800824c:	d002      	beq.n	8008254 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800824e:	2302      	movs	r3, #2
 8008250:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008252:	e116      	b.n	8008482 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <HAL_SPI_Transmit+0x52>
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008264:	e10d      	b.n	8008482 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2203      	movs	r2, #3
 800826a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	88fa      	ldrh	r2, [r7, #6]
 800827e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	88fa      	ldrh	r2, [r7, #6]
 8008284:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ac:	d10f      	bne.n	80082ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d8:	2b40      	cmp	r3, #64	@ 0x40
 80082da:	d007      	beq.n	80082ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082f4:	d14f      	bne.n	8008396 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <HAL_SPI_Transmit+0xf6>
 80082fe:	8afb      	ldrh	r3, [r7, #22]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d142      	bne.n	800838a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008308:	881a      	ldrh	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008314:	1c9a      	adds	r2, r3, #2
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008328:	e02f      	b.n	800838a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b02      	cmp	r3, #2
 8008336:	d112      	bne.n	800835e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833c:	881a      	ldrh	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008348:	1c9a      	adds	r2, r3, #2
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008352:	b29b      	uxth	r3, r3
 8008354:	3b01      	subs	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800835c:	e015      	b.n	800838a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800835e:	f7fa fb75 	bl	8002a4c <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d803      	bhi.n	8008376 <HAL_SPI_Transmit+0x168>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d102      	bne.n	800837c <HAL_SPI_Transmit+0x16e>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d106      	bne.n	800838a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008388:	e07b      	b.n	8008482 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800838e:	b29b      	uxth	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1ca      	bne.n	800832a <HAL_SPI_Transmit+0x11c>
 8008394:	e050      	b.n	8008438 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <HAL_SPI_Transmit+0x196>
 800839e:	8afb      	ldrh	r3, [r7, #22]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d144      	bne.n	800842e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	330c      	adds	r3, #12
 80083ae:	7812      	ldrb	r2, [r2, #0]
 80083b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80083ca:	e030      	b.n	800842e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d113      	bne.n	8008402 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	330c      	adds	r3, #12
 80083e4:	7812      	ldrb	r2, [r2, #0]
 80083e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	3b01      	subs	r3, #1
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008400:	e015      	b.n	800842e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008402:	f7fa fb23 	bl	8002a4c <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d803      	bhi.n	800841a <HAL_SPI_Transmit+0x20c>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008418:	d102      	bne.n	8008420 <HAL_SPI_Transmit+0x212>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800842c:	e029      	b.n	8008482 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008432:	b29b      	uxth	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1c9      	bne.n	80083cc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 f8b1 	bl	80085a4 <SPI_EndRxTxTransaction>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2220      	movs	r2, #32
 800844c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10a      	bne.n	800846c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	77fb      	strb	r3, [r7, #31]
 8008478:	e003      	b.n	8008482 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800848a:	7ffb      	ldrb	r3, [r7, #31]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3720      	adds	r7, #32
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	4613      	mov	r3, r2
 80084a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084a4:	f7fa fad2 	bl	8002a4c <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ac:	1a9b      	subs	r3, r3, r2
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	4413      	add	r3, r2
 80084b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084b4:	f7fa faca 	bl	8002a4c <HAL_GetTick>
 80084b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80084ba:	4b39      	ldr	r3, [pc, #228]	@ (80085a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	015b      	lsls	r3, r3, #5
 80084c0:	0d1b      	lsrs	r3, r3, #20
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	fb02 f303 	mul.w	r3, r2, r3
 80084c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084ca:	e054      	b.n	8008576 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d2:	d050      	beq.n	8008576 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084d4:	f7fa faba 	bl	8002a4c <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	69fa      	ldr	r2, [r7, #28]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d902      	bls.n	80084ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d13d      	bne.n	8008566 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008502:	d111      	bne.n	8008528 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800850c:	d004      	beq.n	8008518 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008516:	d107      	bne.n	8008528 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008530:	d10f      	bne.n	8008552 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e017      	b.n	8008596 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	3b01      	subs	r3, #1
 8008574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	4013      	ands	r3, r2
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	429a      	cmp	r2, r3
 8008584:	bf0c      	ite	eq
 8008586:	2301      	moveq	r3, #1
 8008588:	2300      	movne	r3, #0
 800858a:	b2db      	uxtb	r3, r3
 800858c:	461a      	mov	r2, r3
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	429a      	cmp	r2, r3
 8008592:	d19b      	bne.n	80084cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3720      	adds	r7, #32
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	20000000 	.word	0x20000000

080085a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af02      	add	r7, sp, #8
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2201      	movs	r2, #1
 80085b8:	2102      	movs	r1, #2
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f7ff ff6a 	bl	8008494 <SPI_WaitFlagStateUntilTimeout>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d007      	beq.n	80085d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ca:	f043 0220 	orr.w	r2, r3, #32
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e032      	b.n	800863c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008644 <SPI_EndRxTxTransaction+0xa0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a1b      	ldr	r2, [pc, #108]	@ (8008648 <SPI_EndRxTxTransaction+0xa4>)
 80085dc:	fba2 2303 	umull	r2, r3, r2, r3
 80085e0:	0d5b      	lsrs	r3, r3, #21
 80085e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80085e6:	fb02 f303 	mul.w	r3, r2, r3
 80085ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085f4:	d112      	bne.n	800861c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2200      	movs	r2, #0
 80085fe:	2180      	movs	r1, #128	@ 0x80
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f7ff ff47 	bl	8008494 <SPI_WaitFlagStateUntilTimeout>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d016      	beq.n	800863a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008610:	f043 0220 	orr.w	r2, r3, #32
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e00f      	b.n	800863c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	3b01      	subs	r3, #1
 8008626:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008632:	2b80      	cmp	r3, #128	@ 0x80
 8008634:	d0f2      	beq.n	800861c <SPI_EndRxTxTransaction+0x78>
 8008636:	e000      	b.n	800863a <SPI_EndRxTxTransaction+0x96>
        break;
 8008638:	bf00      	nop
  }

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20000000 	.word	0x20000000
 8008648:	165e9f81 	.word	0x165e9f81

0800864c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e041      	b.n	80086e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d106      	bne.n	8008678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7f9 fe64 	bl	8002340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3304      	adds	r3, #4
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f000 fcb0 	bl	8008ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e041      	b.n	8008780 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d106      	bne.n	8008716 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f839 	bl	8008788 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2202      	movs	r2, #2
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	3304      	adds	r3, #4
 8008726:	4619      	mov	r1, r3
 8008728:	4610      	mov	r0, r2
 800872a:	f000 fc61 	bl	8008ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e041      	b.n	8008832 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f839 	bl	800883a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3304      	adds	r3, #4
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f000 fc08 	bl	8008ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
	...

08008850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d109      	bne.n	8008874 <HAL_TIM_PWM_Start+0x24>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b01      	cmp	r3, #1
 800886a:	bf14      	ite	ne
 800886c:	2301      	movne	r3, #1
 800886e:	2300      	moveq	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	e022      	b.n	80088ba <HAL_TIM_PWM_Start+0x6a>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2b04      	cmp	r3, #4
 8008878:	d109      	bne.n	800888e <HAL_TIM_PWM_Start+0x3e>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b01      	cmp	r3, #1
 8008884:	bf14      	ite	ne
 8008886:	2301      	movne	r3, #1
 8008888:	2300      	moveq	r3, #0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	e015      	b.n	80088ba <HAL_TIM_PWM_Start+0x6a>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b08      	cmp	r3, #8
 8008892:	d109      	bne.n	80088a8 <HAL_TIM_PWM_Start+0x58>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b01      	cmp	r3, #1
 800889e:	bf14      	ite	ne
 80088a0:	2301      	movne	r3, #1
 80088a2:	2300      	moveq	r3, #0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	e008      	b.n	80088ba <HAL_TIM_PWM_Start+0x6a>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	bf14      	ite	ne
 80088b4:	2301      	movne	r3, #1
 80088b6:	2300      	moveq	r3, #0
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e07c      	b.n	80089bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d104      	bne.n	80088d2 <HAL_TIM_PWM_Start+0x82>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088d0:	e013      	b.n	80088fa <HAL_TIM_PWM_Start+0xaa>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d104      	bne.n	80088e2 <HAL_TIM_PWM_Start+0x92>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088e0:	e00b      	b.n	80088fa <HAL_TIM_PWM_Start+0xaa>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d104      	bne.n	80088f2 <HAL_TIM_PWM_Start+0xa2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088f0:	e003      	b.n	80088fa <HAL_TIM_PWM_Start+0xaa>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2202      	movs	r2, #2
 80088f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2201      	movs	r2, #1
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fe6a 	bl	80095dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a2d      	ldr	r2, [pc, #180]	@ (80089c4 <HAL_TIM_PWM_Start+0x174>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d004      	beq.n	800891c <HAL_TIM_PWM_Start+0xcc>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a2c      	ldr	r2, [pc, #176]	@ (80089c8 <HAL_TIM_PWM_Start+0x178>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d101      	bne.n	8008920 <HAL_TIM_PWM_Start+0xd0>
 800891c:	2301      	movs	r3, #1
 800891e:	e000      	b.n	8008922 <HAL_TIM_PWM_Start+0xd2>
 8008920:	2300      	movs	r3, #0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d007      	beq.n	8008936 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008934:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a22      	ldr	r2, [pc, #136]	@ (80089c4 <HAL_TIM_PWM_Start+0x174>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d022      	beq.n	8008986 <HAL_TIM_PWM_Start+0x136>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008948:	d01d      	beq.n	8008986 <HAL_TIM_PWM_Start+0x136>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a1f      	ldr	r2, [pc, #124]	@ (80089cc <HAL_TIM_PWM_Start+0x17c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d018      	beq.n	8008986 <HAL_TIM_PWM_Start+0x136>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a1d      	ldr	r2, [pc, #116]	@ (80089d0 <HAL_TIM_PWM_Start+0x180>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d013      	beq.n	8008986 <HAL_TIM_PWM_Start+0x136>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a1c      	ldr	r2, [pc, #112]	@ (80089d4 <HAL_TIM_PWM_Start+0x184>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00e      	beq.n	8008986 <HAL_TIM_PWM_Start+0x136>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a16      	ldr	r2, [pc, #88]	@ (80089c8 <HAL_TIM_PWM_Start+0x178>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d009      	beq.n	8008986 <HAL_TIM_PWM_Start+0x136>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a18      	ldr	r2, [pc, #96]	@ (80089d8 <HAL_TIM_PWM_Start+0x188>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d004      	beq.n	8008986 <HAL_TIM_PWM_Start+0x136>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a16      	ldr	r2, [pc, #88]	@ (80089dc <HAL_TIM_PWM_Start+0x18c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d111      	bne.n	80089aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f003 0307 	and.w	r3, r3, #7
 8008990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b06      	cmp	r3, #6
 8008996:	d010      	beq.n	80089ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0201 	orr.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a8:	e007      	b.n	80089ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f042 0201 	orr.w	r2, r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	40010000 	.word	0x40010000
 80089c8:	40010400 	.word	0x40010400
 80089cc:	40000400 	.word	0x40000400
 80089d0:	40000800 	.word	0x40000800
 80089d4:	40000c00 	.word	0x40000c00
 80089d8:	40014000 	.word	0x40014000
 80089dc:	40001800 	.word	0x40001800

080089e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d020      	beq.n	8008a44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01b      	beq.n	8008a44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f06f 0202 	mvn.w	r2, #2
 8008a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fac1 	bl	8008fb2 <HAL_TIM_IC_CaptureCallback>
 8008a30:	e005      	b.n	8008a3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fab3 	bl	8008f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fac4 	bl	8008fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d020      	beq.n	8008a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f003 0304 	and.w	r3, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d01b      	beq.n	8008a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f06f 0204 	mvn.w	r2, #4
 8008a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2202      	movs	r2, #2
 8008a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa9b 	bl	8008fb2 <HAL_TIM_IC_CaptureCallback>
 8008a7c:	e005      	b.n	8008a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fa8d 	bl	8008f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fa9e 	bl	8008fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f003 0308 	and.w	r3, r3, #8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d020      	beq.n	8008adc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01b      	beq.n	8008adc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f06f 0208 	mvn.w	r2, #8
 8008aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2204      	movs	r2, #4
 8008ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fa75 	bl	8008fb2 <HAL_TIM_IC_CaptureCallback>
 8008ac8:	e005      	b.n	8008ad6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa67 	bl	8008f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fa78 	bl	8008fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f003 0310 	and.w	r3, r3, #16
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d020      	beq.n	8008b28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f003 0310 	and.w	r3, r3, #16
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01b      	beq.n	8008b28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0210 	mvn.w	r2, #16
 8008af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2208      	movs	r2, #8
 8008afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa4f 	bl	8008fb2 <HAL_TIM_IC_CaptureCallback>
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa41 	bl	8008f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa52 	bl	8008fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00c      	beq.n	8008b4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f06f 0201 	mvn.w	r2, #1
 8008b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa1f 	bl	8008f8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00c      	beq.n	8008b70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fe34 	bl	80097d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00c      	beq.n	8008b94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d007      	beq.n	8008b94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fa23 	bl	8008fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00c      	beq.n	8008bb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d007      	beq.n	8008bb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f06f 0220 	mvn.w	r2, #32
 8008bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fe06 	bl	80097c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d101      	bne.n	8008bde <HAL_TIM_OC_ConfigChannel+0x1e>
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e048      	b.n	8008c70 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b0c      	cmp	r3, #12
 8008bea:	d839      	bhi.n	8008c60 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008bec:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf2:	bf00      	nop
 8008bf4:	08008c29 	.word	0x08008c29
 8008bf8:	08008c61 	.word	0x08008c61
 8008bfc:	08008c61 	.word	0x08008c61
 8008c00:	08008c61 	.word	0x08008c61
 8008c04:	08008c37 	.word	0x08008c37
 8008c08:	08008c61 	.word	0x08008c61
 8008c0c:	08008c61 	.word	0x08008c61
 8008c10:	08008c61 	.word	0x08008c61
 8008c14:	08008c45 	.word	0x08008c45
 8008c18:	08008c61 	.word	0x08008c61
 8008c1c:	08008c61 	.word	0x08008c61
 8008c20:	08008c61 	.word	0x08008c61
 8008c24:	08008c53 	.word	0x08008c53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fa8a 	bl	8009148 <TIM_OC1_SetConfig>
      break;
 8008c34:	e017      	b.n	8008c66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68b9      	ldr	r1, [r7, #8]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 faf3 	bl	8009228 <TIM_OC2_SetConfig>
      break;
 8008c42:	e010      	b.n	8008c66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68b9      	ldr	r1, [r7, #8]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fb62 	bl	8009314 <TIM_OC3_SetConfig>
      break;
 8008c50:	e009      	b.n	8008c66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 fbcf 	bl	80093fc <TIM_OC4_SetConfig>
      break;
 8008c5e:	e002      	b.n	8008c66 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	75fb      	strb	r3, [r7, #23]
      break;
 8008c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e0ae      	b.n	8008df4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b0c      	cmp	r3, #12
 8008ca2:	f200 809f 	bhi.w	8008de4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008ce1 	.word	0x08008ce1
 8008cb0:	08008de5 	.word	0x08008de5
 8008cb4:	08008de5 	.word	0x08008de5
 8008cb8:	08008de5 	.word	0x08008de5
 8008cbc:	08008d21 	.word	0x08008d21
 8008cc0:	08008de5 	.word	0x08008de5
 8008cc4:	08008de5 	.word	0x08008de5
 8008cc8:	08008de5 	.word	0x08008de5
 8008ccc:	08008d63 	.word	0x08008d63
 8008cd0:	08008de5 	.word	0x08008de5
 8008cd4:	08008de5 	.word	0x08008de5
 8008cd8:	08008de5 	.word	0x08008de5
 8008cdc:	08008da3 	.word	0x08008da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68b9      	ldr	r1, [r7, #8]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fa2e 	bl	8009148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0208 	orr.w	r2, r2, #8
 8008cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	699a      	ldr	r2, [r3, #24]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0204 	bic.w	r2, r2, #4
 8008d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6999      	ldr	r1, [r3, #24]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	691a      	ldr	r2, [r3, #16]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	619a      	str	r2, [r3, #24]
      break;
 8008d1e:	e064      	b.n	8008dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68b9      	ldr	r1, [r7, #8]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fa7e 	bl	8009228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	699a      	ldr	r2, [r3, #24]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699a      	ldr	r2, [r3, #24]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6999      	ldr	r1, [r3, #24]
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	021a      	lsls	r2, r3, #8
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	619a      	str	r2, [r3, #24]
      break;
 8008d60:	e043      	b.n	8008dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68b9      	ldr	r1, [r7, #8]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 fad3 	bl	8009314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69da      	ldr	r2, [r3, #28]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f042 0208 	orr.w	r2, r2, #8
 8008d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69da      	ldr	r2, [r3, #28]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f022 0204 	bic.w	r2, r2, #4
 8008d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69d9      	ldr	r1, [r3, #28]
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	691a      	ldr	r2, [r3, #16]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	61da      	str	r2, [r3, #28]
      break;
 8008da0:	e023      	b.n	8008dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68b9      	ldr	r1, [r7, #8]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fb27 	bl	80093fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69da      	ldr	r2, [r3, #28]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69da      	ldr	r2, [r3, #28]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69d9      	ldr	r1, [r3, #28]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	021a      	lsls	r2, r3, #8
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	61da      	str	r2, [r3, #28]
      break;
 8008de2:	e002      	b.n	8008dea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	75fb      	strb	r3, [r7, #23]
      break;
 8008de8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3718      	adds	r7, #24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <HAL_TIM_ConfigClockSource+0x1c>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e0b4      	b.n	8008f82 <HAL_TIM_ConfigClockSource+0x186>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e50:	d03e      	beq.n	8008ed0 <HAL_TIM_ConfigClockSource+0xd4>
 8008e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e56:	f200 8087 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x16c>
 8008e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e5e:	f000 8086 	beq.w	8008f6e <HAL_TIM_ConfigClockSource+0x172>
 8008e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e66:	d87f      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x16c>
 8008e68:	2b70      	cmp	r3, #112	@ 0x70
 8008e6a:	d01a      	beq.n	8008ea2 <HAL_TIM_ConfigClockSource+0xa6>
 8008e6c:	2b70      	cmp	r3, #112	@ 0x70
 8008e6e:	d87b      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x16c>
 8008e70:	2b60      	cmp	r3, #96	@ 0x60
 8008e72:	d050      	beq.n	8008f16 <HAL_TIM_ConfigClockSource+0x11a>
 8008e74:	2b60      	cmp	r3, #96	@ 0x60
 8008e76:	d877      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x16c>
 8008e78:	2b50      	cmp	r3, #80	@ 0x50
 8008e7a:	d03c      	beq.n	8008ef6 <HAL_TIM_ConfigClockSource+0xfa>
 8008e7c:	2b50      	cmp	r3, #80	@ 0x50
 8008e7e:	d873      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x16c>
 8008e80:	2b40      	cmp	r3, #64	@ 0x40
 8008e82:	d058      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x13a>
 8008e84:	2b40      	cmp	r3, #64	@ 0x40
 8008e86:	d86f      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x16c>
 8008e88:	2b30      	cmp	r3, #48	@ 0x30
 8008e8a:	d064      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x15a>
 8008e8c:	2b30      	cmp	r3, #48	@ 0x30
 8008e8e:	d86b      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x16c>
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	d060      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x15a>
 8008e94:	2b20      	cmp	r3, #32
 8008e96:	d867      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x16c>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d05c      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x15a>
 8008e9c:	2b10      	cmp	r3, #16
 8008e9e:	d05a      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x15a>
 8008ea0:	e062      	b.n	8008f68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008eb2:	f000 fb73 	bl	800959c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	609a      	str	r2, [r3, #8]
      break;
 8008ece:	e04f      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ee0:	f000 fb5c 	bl	800959c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ef2:	609a      	str	r2, [r3, #8]
      break;
 8008ef4:	e03c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f02:	461a      	mov	r2, r3
 8008f04:	f000 fad0 	bl	80094a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2150      	movs	r1, #80	@ 0x50
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 fb29 	bl	8009566 <TIM_ITRx_SetConfig>
      break;
 8008f14:	e02c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f22:	461a      	mov	r2, r3
 8008f24:	f000 faef 	bl	8009506 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2160      	movs	r1, #96	@ 0x60
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fb19 	bl	8009566 <TIM_ITRx_SetConfig>
      break;
 8008f34:	e01c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f42:	461a      	mov	r2, r3
 8008f44:	f000 fab0 	bl	80094a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2140      	movs	r1, #64	@ 0x40
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fb09 	bl	8009566 <TIM_ITRx_SetConfig>
      break;
 8008f54:	e00c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4610      	mov	r0, r2
 8008f62:	f000 fb00 	bl	8009566 <TIM_ITRx_SetConfig>
      break;
 8008f66:	e003      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f6c:	e000      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f92:	bf00      	nop
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fa6:	bf00      	nop
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fba:	bf00      	nop
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b083      	sub	sp, #12
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
	...

08008ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a46      	ldr	r2, [pc, #280]	@ (800911c <TIM_Base_SetConfig+0x12c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d013      	beq.n	8009030 <TIM_Base_SetConfig+0x40>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800900e:	d00f      	beq.n	8009030 <TIM_Base_SetConfig+0x40>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a43      	ldr	r2, [pc, #268]	@ (8009120 <TIM_Base_SetConfig+0x130>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d00b      	beq.n	8009030 <TIM_Base_SetConfig+0x40>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a42      	ldr	r2, [pc, #264]	@ (8009124 <TIM_Base_SetConfig+0x134>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d007      	beq.n	8009030 <TIM_Base_SetConfig+0x40>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a41      	ldr	r2, [pc, #260]	@ (8009128 <TIM_Base_SetConfig+0x138>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d003      	beq.n	8009030 <TIM_Base_SetConfig+0x40>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a40      	ldr	r2, [pc, #256]	@ (800912c <TIM_Base_SetConfig+0x13c>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d108      	bne.n	8009042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a35      	ldr	r2, [pc, #212]	@ (800911c <TIM_Base_SetConfig+0x12c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d02b      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009050:	d027      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a32      	ldr	r2, [pc, #200]	@ (8009120 <TIM_Base_SetConfig+0x130>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d023      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a31      	ldr	r2, [pc, #196]	@ (8009124 <TIM_Base_SetConfig+0x134>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d01f      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a30      	ldr	r2, [pc, #192]	@ (8009128 <TIM_Base_SetConfig+0x138>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d01b      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a2f      	ldr	r2, [pc, #188]	@ (800912c <TIM_Base_SetConfig+0x13c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d017      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a2e      	ldr	r2, [pc, #184]	@ (8009130 <TIM_Base_SetConfig+0x140>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d013      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a2d      	ldr	r2, [pc, #180]	@ (8009134 <TIM_Base_SetConfig+0x144>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d00f      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a2c      	ldr	r2, [pc, #176]	@ (8009138 <TIM_Base_SetConfig+0x148>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00b      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a2b      	ldr	r2, [pc, #172]	@ (800913c <TIM_Base_SetConfig+0x14c>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d007      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a2a      	ldr	r2, [pc, #168]	@ (8009140 <TIM_Base_SetConfig+0x150>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d003      	beq.n	80090a2 <TIM_Base_SetConfig+0xb2>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a29      	ldr	r2, [pc, #164]	@ (8009144 <TIM_Base_SetConfig+0x154>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d108      	bne.n	80090b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	4313      	orrs	r3, r2
 80090c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a10      	ldr	r2, [pc, #64]	@ (800911c <TIM_Base_SetConfig+0x12c>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d003      	beq.n	80090e8 <TIM_Base_SetConfig+0xf8>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a12      	ldr	r2, [pc, #72]	@ (800912c <TIM_Base_SetConfig+0x13c>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d103      	bne.n	80090f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d105      	bne.n	800910e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	f023 0201 	bic.w	r2, r3, #1
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	611a      	str	r2, [r3, #16]
  }
}
 800910e:	bf00      	nop
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	40010000 	.word	0x40010000
 8009120:	40000400 	.word	0x40000400
 8009124:	40000800 	.word	0x40000800
 8009128:	40000c00 	.word	0x40000c00
 800912c:	40010400 	.word	0x40010400
 8009130:	40014000 	.word	0x40014000
 8009134:	40014400 	.word	0x40014400
 8009138:	40014800 	.word	0x40014800
 800913c:	40001800 	.word	0x40001800
 8009140:	40001c00 	.word	0x40001c00
 8009144:	40002000 	.word	0x40002000

08009148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a1b      	ldr	r3, [r3, #32]
 800915c:	f023 0201 	bic.w	r2, r3, #1
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f023 0303 	bic.w	r3, r3, #3
 800917e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f023 0302 	bic.w	r3, r3, #2
 8009190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	4313      	orrs	r3, r2
 800919a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a20      	ldr	r2, [pc, #128]	@ (8009220 <TIM_OC1_SetConfig+0xd8>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d003      	beq.n	80091ac <TIM_OC1_SetConfig+0x64>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009224 <TIM_OC1_SetConfig+0xdc>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d10c      	bne.n	80091c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f023 0308 	bic.w	r3, r3, #8
 80091b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f023 0304 	bic.w	r3, r3, #4
 80091c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a15      	ldr	r2, [pc, #84]	@ (8009220 <TIM_OC1_SetConfig+0xd8>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d003      	beq.n	80091d6 <TIM_OC1_SetConfig+0x8e>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a14      	ldr	r2, [pc, #80]	@ (8009224 <TIM_OC1_SetConfig+0xdc>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d111      	bne.n	80091fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	621a      	str	r2, [r3, #32]
}
 8009214:	bf00      	nop
 8009216:	371c      	adds	r7, #28
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	40010000 	.word	0x40010000
 8009224:	40010400 	.word	0x40010400

08009228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	f023 0210 	bic.w	r2, r3, #16
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800925e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	021b      	lsls	r3, r3, #8
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f023 0320 	bic.w	r3, r3, #32
 8009272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	011b      	lsls	r3, r3, #4
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	4313      	orrs	r3, r2
 800927e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a22      	ldr	r2, [pc, #136]	@ (800930c <TIM_OC2_SetConfig+0xe4>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d003      	beq.n	8009290 <TIM_OC2_SetConfig+0x68>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a21      	ldr	r2, [pc, #132]	@ (8009310 <TIM_OC2_SetConfig+0xe8>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d10d      	bne.n	80092ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a17      	ldr	r2, [pc, #92]	@ (800930c <TIM_OC2_SetConfig+0xe4>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d003      	beq.n	80092bc <TIM_OC2_SetConfig+0x94>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a16      	ldr	r2, [pc, #88]	@ (8009310 <TIM_OC2_SetConfig+0xe8>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d113      	bne.n	80092e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80092c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	695b      	ldr	r3, [r3, #20]
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	621a      	str	r2, [r3, #32]
}
 80092fe:	bf00      	nop
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	40010000 	.word	0x40010000
 8009310:	40010400 	.word	0x40010400

08009314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f023 0303 	bic.w	r3, r3, #3
 800934a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800935c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4313      	orrs	r3, r2
 8009368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a21      	ldr	r2, [pc, #132]	@ (80093f4 <TIM_OC3_SetConfig+0xe0>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d003      	beq.n	800937a <TIM_OC3_SetConfig+0x66>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a20      	ldr	r2, [pc, #128]	@ (80093f8 <TIM_OC3_SetConfig+0xe4>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d10d      	bne.n	8009396 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	021b      	lsls	r3, r3, #8
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	4313      	orrs	r3, r2
 800938c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a16      	ldr	r2, [pc, #88]	@ (80093f4 <TIM_OC3_SetConfig+0xe0>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d003      	beq.n	80093a6 <TIM_OC3_SetConfig+0x92>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a15      	ldr	r2, [pc, #84]	@ (80093f8 <TIM_OC3_SetConfig+0xe4>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d113      	bne.n	80093ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80093b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	011b      	lsls	r3, r3, #4
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	621a      	str	r2, [r3, #32]
}
 80093e8:	bf00      	nop
 80093ea:	371c      	adds	r7, #28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	40010000 	.word	0x40010000
 80093f8:	40010400 	.word	0x40010400

080093fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b087      	sub	sp, #28
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a1b      	ldr	r3, [r3, #32]
 8009410:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800942a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	4313      	orrs	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	031b      	lsls	r3, r3, #12
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	4313      	orrs	r3, r2
 8009452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a12      	ldr	r2, [pc, #72]	@ (80094a0 <TIM_OC4_SetConfig+0xa4>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d003      	beq.n	8009464 <TIM_OC4_SetConfig+0x68>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a11      	ldr	r2, [pc, #68]	@ (80094a4 <TIM_OC4_SetConfig+0xa8>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d109      	bne.n	8009478 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800946a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	019b      	lsls	r3, r3, #6
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	4313      	orrs	r3, r2
 8009476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	621a      	str	r2, [r3, #32]
}
 8009492:	bf00      	nop
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	40010000 	.word	0x40010000
 80094a4:	40010400 	.word	0x40010400

080094a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
 80094b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	f023 0201 	bic.w	r2, r3, #1
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	011b      	lsls	r3, r3, #4
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4313      	orrs	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f023 030a 	bic.w	r3, r3, #10
 80094e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	621a      	str	r2, [r3, #32]
}
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009506:	b480      	push	{r7}
 8009508:	b087      	sub	sp, #28
 800950a:	af00      	add	r7, sp, #0
 800950c:	60f8      	str	r0, [r7, #12]
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	f023 0210 	bic.w	r2, r3, #16
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	031b      	lsls	r3, r3, #12
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	4313      	orrs	r3, r2
 800953a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009542:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	011b      	lsls	r3, r3, #4
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	4313      	orrs	r3, r2
 800954c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	621a      	str	r2, [r3, #32]
}
 800955a:	bf00      	nop
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800957c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	f043 0307 	orr.w	r3, r3, #7
 8009588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	609a      	str	r2, [r3, #8]
}
 8009590:	bf00      	nop
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	021a      	lsls	r2, r3, #8
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	431a      	orrs	r2, r3
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	609a      	str	r2, [r3, #8]
}
 80095d0:	bf00      	nop
 80095d2:	371c      	adds	r7, #28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	f003 031f 	and.w	r3, r3, #31
 80095ee:	2201      	movs	r2, #1
 80095f0:	fa02 f303 	lsl.w	r3, r2, r3
 80095f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6a1a      	ldr	r2, [r3, #32]
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	43db      	mvns	r3, r3
 80095fe:	401a      	ands	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a1a      	ldr	r2, [r3, #32]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f003 031f 	and.w	r3, r3, #31
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	fa01 f303 	lsl.w	r3, r1, r3
 8009614:	431a      	orrs	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	621a      	str	r2, [r3, #32]
}
 800961a:	bf00      	nop
 800961c:	371c      	adds	r7, #28
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
	...

08009628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800963c:	2302      	movs	r3, #2
 800963e:	e05a      	b.n	80096f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	4313      	orrs	r3, r2
 8009670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a21      	ldr	r2, [pc, #132]	@ (8009704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d022      	beq.n	80096ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800968c:	d01d      	beq.n	80096ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a1d      	ldr	r2, [pc, #116]	@ (8009708 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d018      	beq.n	80096ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a1b      	ldr	r2, [pc, #108]	@ (800970c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d013      	beq.n	80096ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009710 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00e      	beq.n	80096ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a18      	ldr	r2, [pc, #96]	@ (8009714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d009      	beq.n	80096ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a17      	ldr	r2, [pc, #92]	@ (8009718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d004      	beq.n	80096ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a15      	ldr	r2, [pc, #84]	@ (800971c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d10c      	bne.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	4313      	orrs	r3, r2
 80096da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	40010000 	.word	0x40010000
 8009708:	40000400 	.word	0x40000400
 800970c:	40000800 	.word	0x40000800
 8009710:	40000c00 	.word	0x40000c00
 8009714:	40010400 	.word	0x40010400
 8009718:	40014000 	.word	0x40014000
 800971c:	40001800 	.word	0x40001800

08009720 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009734:	2b01      	cmp	r3, #1
 8009736:	d101      	bne.n	800973c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009738:	2302      	movs	r3, #2
 800973a:	e03d      	b.n	80097b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	4313      	orrs	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4313      	orrs	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	4313      	orrs	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	4313      	orrs	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e042      	b.n	8009884 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7f8 fe64 	bl	80024e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2224      	movs	r2, #36	@ 0x24
 800981c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800982e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f973 	bl	8009b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	695a      	ldr	r2, [r3, #20]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08a      	sub	sp, #40	@ 0x28
 8009890:	af02      	add	r7, sp, #8
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	603b      	str	r3, [r7, #0]
 8009898:	4613      	mov	r3, r2
 800989a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	d175      	bne.n	8009998 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <HAL_UART_Transmit+0x2c>
 80098b2:	88fb      	ldrh	r3, [r7, #6]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e06e      	b.n	800999a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2221      	movs	r2, #33	@ 0x21
 80098c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098ca:	f7f9 f8bf 	bl	8002a4c <HAL_GetTick>
 80098ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	88fa      	ldrh	r2, [r7, #6]
 80098d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	88fa      	ldrh	r2, [r7, #6]
 80098da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098e4:	d108      	bne.n	80098f8 <HAL_UART_Transmit+0x6c>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d104      	bne.n	80098f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	61bb      	str	r3, [r7, #24]
 80098f6:	e003      	b.n	8009900 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098fc:	2300      	movs	r3, #0
 80098fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009900:	e02e      	b.n	8009960 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2200      	movs	r2, #0
 800990a:	2180      	movs	r1, #128	@ 0x80
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 f848 	bl	80099a2 <UART_WaitOnFlagUntilTimeout>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2220      	movs	r2, #32
 800991c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e03a      	b.n	800999a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10b      	bne.n	8009942 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	3302      	adds	r3, #2
 800993e:	61bb      	str	r3, [r7, #24]
 8009940:	e007      	b.n	8009952 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	781a      	ldrb	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	3301      	adds	r3, #1
 8009950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009956:	b29b      	uxth	r3, r3
 8009958:	3b01      	subs	r3, #1
 800995a:	b29a      	uxth	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009964:	b29b      	uxth	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1cb      	bne.n	8009902 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2200      	movs	r2, #0
 8009972:	2140      	movs	r1, #64	@ 0x40
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 f814 	bl	80099a2 <UART_WaitOnFlagUntilTimeout>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2220      	movs	r2, #32
 8009984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e006      	b.n	800999a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	e000      	b.n	800999a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009998:	2302      	movs	r3, #2
  }
}
 800999a:	4618      	mov	r0, r3
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b086      	sub	sp, #24
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	603b      	str	r3, [r7, #0]
 80099ae:	4613      	mov	r3, r2
 80099b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099b2:	e03b      	b.n	8009a2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ba:	d037      	beq.n	8009a2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099bc:	f7f9 f846 	bl	8002a4c <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	6a3a      	ldr	r2, [r7, #32]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d302      	bcc.n	80099d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e03a      	b.n	8009a4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d023      	beq.n	8009a2c <UART_WaitOnFlagUntilTimeout+0x8a>
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	2b80      	cmp	r3, #128	@ 0x80
 80099e8:	d020      	beq.n	8009a2c <UART_WaitOnFlagUntilTimeout+0x8a>
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2b40      	cmp	r3, #64	@ 0x40
 80099ee:	d01d      	beq.n	8009a2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0308 	and.w	r3, r3, #8
 80099fa:	2b08      	cmp	r3, #8
 80099fc:	d116      	bne.n	8009a2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80099fe:	2300      	movs	r3, #0
 8009a00:	617b      	str	r3, [r7, #20]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	617b      	str	r3, [r7, #20]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	617b      	str	r3, [r7, #20]
 8009a12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 f81d 	bl	8009a54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2208      	movs	r2, #8
 8009a1e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e00f      	b.n	8009a4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	4013      	ands	r3, r2
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	bf0c      	ite	eq
 8009a3c:	2301      	moveq	r3, #1
 8009a3e:	2300      	movne	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	461a      	mov	r2, r3
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d0b4      	beq.n	80099b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b095      	sub	sp, #84	@ 0x54
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	330c      	adds	r3, #12
 8009a62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	330c      	adds	r3, #12
 8009a7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a7c:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e5      	bne.n	8009a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3314      	adds	r3, #20
 8009a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	e853 3f00 	ldrex	r3, [r3]
 8009a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f023 0301 	bic.w	r3, r3, #1
 8009aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3314      	adds	r3, #20
 8009aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e5      	bne.n	8009a90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d119      	bne.n	8009b00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	330c      	adds	r3, #12
 8009ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	e853 3f00 	ldrex	r3, [r3]
 8009ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	f023 0310 	bic.w	r3, r3, #16
 8009ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	330c      	adds	r3, #12
 8009aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aec:	61ba      	str	r2, [r7, #24]
 8009aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af0:	6979      	ldr	r1, [r7, #20]
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	e841 2300 	strex	r3, r2, [r1]
 8009af8:	613b      	str	r3, [r7, #16]
   return(result);
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1e5      	bne.n	8009acc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009b0e:	bf00      	nop
 8009b10:	3754      	adds	r7, #84	@ 0x54
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
	...

08009b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b20:	b0c0      	sub	sp, #256	@ 0x100
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b38:	68d9      	ldr	r1, [r3, #12]
 8009b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	ea40 0301 	orr.w	r3, r0, r1
 8009b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	431a      	orrs	r2, r3
 8009b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b74:	f021 010c 	bic.w	r1, r1, #12
 8009b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b82:	430b      	orrs	r3, r1
 8009b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b96:	6999      	ldr	r1, [r3, #24]
 8009b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	ea40 0301 	orr.w	r3, r0, r1
 8009ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4b8f      	ldr	r3, [pc, #572]	@ (8009de8 <UART_SetConfig+0x2cc>)
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d005      	beq.n	8009bbc <UART_SetConfig+0xa0>
 8009bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8009dec <UART_SetConfig+0x2d0>)
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d104      	bne.n	8009bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009bbc:	f7fe fa8a 	bl	80080d4 <HAL_RCC_GetPCLK2Freq>
 8009bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009bc4:	e003      	b.n	8009bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bc6:	f7fe fa71 	bl	80080ac <HAL_RCC_GetPCLK1Freq>
 8009bca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bd8:	f040 810c 	bne.w	8009df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009be6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009bee:	4622      	mov	r2, r4
 8009bf0:	462b      	mov	r3, r5
 8009bf2:	1891      	adds	r1, r2, r2
 8009bf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009bf6:	415b      	adcs	r3, r3
 8009bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009bfe:	4621      	mov	r1, r4
 8009c00:	eb12 0801 	adds.w	r8, r2, r1
 8009c04:	4629      	mov	r1, r5
 8009c06:	eb43 0901 	adc.w	r9, r3, r1
 8009c0a:	f04f 0200 	mov.w	r2, #0
 8009c0e:	f04f 0300 	mov.w	r3, #0
 8009c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c1e:	4690      	mov	r8, r2
 8009c20:	4699      	mov	r9, r3
 8009c22:	4623      	mov	r3, r4
 8009c24:	eb18 0303 	adds.w	r3, r8, r3
 8009c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	eb49 0303 	adc.w	r3, r9, r3
 8009c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	18db      	adds	r3, r3, r3
 8009c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c50:	4613      	mov	r3, r2
 8009c52:	eb42 0303 	adc.w	r3, r2, r3
 8009c56:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c60:	f7f7 f802 	bl	8000c68 <__aeabi_uldivmod>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4b61      	ldr	r3, [pc, #388]	@ (8009df0 <UART_SetConfig+0x2d4>)
 8009c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8009c6e:	095b      	lsrs	r3, r3, #5
 8009c70:	011c      	lsls	r4, r3, #4
 8009c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c76:	2200      	movs	r2, #0
 8009c78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009c84:	4642      	mov	r2, r8
 8009c86:	464b      	mov	r3, r9
 8009c88:	1891      	adds	r1, r2, r2
 8009c8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c8c:	415b      	adcs	r3, r3
 8009c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c94:	4641      	mov	r1, r8
 8009c96:	eb12 0a01 	adds.w	sl, r2, r1
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8009ca0:	f04f 0200 	mov.w	r2, #0
 8009ca4:	f04f 0300 	mov.w	r3, #0
 8009ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cb4:	4692      	mov	sl, r2
 8009cb6:	469b      	mov	fp, r3
 8009cb8:	4643      	mov	r3, r8
 8009cba:	eb1a 0303 	adds.w	r3, sl, r3
 8009cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cc2:	464b      	mov	r3, r9
 8009cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8009cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	18db      	adds	r3, r3, r3
 8009ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	eb42 0303 	adc.w	r3, r2, r3
 8009cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009cf6:	f7f6 ffb7 	bl	8000c68 <__aeabi_uldivmod>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4b3b      	ldr	r3, [pc, #236]	@ (8009df0 <UART_SetConfig+0x2d4>)
 8009d02:	fba3 2301 	umull	r2, r3, r3, r1
 8009d06:	095b      	lsrs	r3, r3, #5
 8009d08:	2264      	movs	r2, #100	@ 0x64
 8009d0a:	fb02 f303 	mul.w	r3, r2, r3
 8009d0e:	1acb      	subs	r3, r1, r3
 8009d10:	00db      	lsls	r3, r3, #3
 8009d12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d16:	4b36      	ldr	r3, [pc, #216]	@ (8009df0 <UART_SetConfig+0x2d4>)
 8009d18:	fba3 2302 	umull	r2, r3, r3, r2
 8009d1c:	095b      	lsrs	r3, r3, #5
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d24:	441c      	add	r4, r3
 8009d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d38:	4642      	mov	r2, r8
 8009d3a:	464b      	mov	r3, r9
 8009d3c:	1891      	adds	r1, r2, r2
 8009d3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d40:	415b      	adcs	r3, r3
 8009d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d48:	4641      	mov	r1, r8
 8009d4a:	1851      	adds	r1, r2, r1
 8009d4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d4e:	4649      	mov	r1, r9
 8009d50:	414b      	adcs	r3, r1
 8009d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d54:	f04f 0200 	mov.w	r2, #0
 8009d58:	f04f 0300 	mov.w	r3, #0
 8009d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d60:	4659      	mov	r1, fp
 8009d62:	00cb      	lsls	r3, r1, #3
 8009d64:	4651      	mov	r1, sl
 8009d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d6a:	4651      	mov	r1, sl
 8009d6c:	00ca      	lsls	r2, r1, #3
 8009d6e:	4610      	mov	r0, r2
 8009d70:	4619      	mov	r1, r3
 8009d72:	4603      	mov	r3, r0
 8009d74:	4642      	mov	r2, r8
 8009d76:	189b      	adds	r3, r3, r2
 8009d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d7c:	464b      	mov	r3, r9
 8009d7e:	460a      	mov	r2, r1
 8009d80:	eb42 0303 	adc.w	r3, r2, r3
 8009d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	18db      	adds	r3, r3, r3
 8009da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009da2:	4613      	mov	r3, r2
 8009da4:	eb42 0303 	adc.w	r3, r2, r3
 8009da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009db2:	f7f6 ff59 	bl	8000c68 <__aeabi_uldivmod>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4b0d      	ldr	r3, [pc, #52]	@ (8009df0 <UART_SetConfig+0x2d4>)
 8009dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8009dc0:	095b      	lsrs	r3, r3, #5
 8009dc2:	2164      	movs	r1, #100	@ 0x64
 8009dc4:	fb01 f303 	mul.w	r3, r1, r3
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	00db      	lsls	r3, r3, #3
 8009dcc:	3332      	adds	r3, #50	@ 0x32
 8009dce:	4a08      	ldr	r2, [pc, #32]	@ (8009df0 <UART_SetConfig+0x2d4>)
 8009dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd4:	095b      	lsrs	r3, r3, #5
 8009dd6:	f003 0207 	and.w	r2, r3, #7
 8009dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4422      	add	r2, r4
 8009de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009de4:	e106      	b.n	8009ff4 <UART_SetConfig+0x4d8>
 8009de6:	bf00      	nop
 8009de8:	40011000 	.word	0x40011000
 8009dec:	40011400 	.word	0x40011400
 8009df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009e06:	4642      	mov	r2, r8
 8009e08:	464b      	mov	r3, r9
 8009e0a:	1891      	adds	r1, r2, r2
 8009e0c:	6239      	str	r1, [r7, #32]
 8009e0e:	415b      	adcs	r3, r3
 8009e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e16:	4641      	mov	r1, r8
 8009e18:	1854      	adds	r4, r2, r1
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	eb43 0501 	adc.w	r5, r3, r1
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	f04f 0300 	mov.w	r3, #0
 8009e28:	00eb      	lsls	r3, r5, #3
 8009e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e2e:	00e2      	lsls	r2, r4, #3
 8009e30:	4614      	mov	r4, r2
 8009e32:	461d      	mov	r5, r3
 8009e34:	4643      	mov	r3, r8
 8009e36:	18e3      	adds	r3, r4, r3
 8009e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	eb45 0303 	adc.w	r3, r5, r3
 8009e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e56:	f04f 0200 	mov.w	r2, #0
 8009e5a:	f04f 0300 	mov.w	r3, #0
 8009e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e62:	4629      	mov	r1, r5
 8009e64:	008b      	lsls	r3, r1, #2
 8009e66:	4621      	mov	r1, r4
 8009e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	008a      	lsls	r2, r1, #2
 8009e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e74:	f7f6 fef8 	bl	8000c68 <__aeabi_uldivmod>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4b60      	ldr	r3, [pc, #384]	@ (800a000 <UART_SetConfig+0x4e4>)
 8009e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8009e82:	095b      	lsrs	r3, r3, #5
 8009e84:	011c      	lsls	r4, r3, #4
 8009e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009e98:	4642      	mov	r2, r8
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	1891      	adds	r1, r2, r2
 8009e9e:	61b9      	str	r1, [r7, #24]
 8009ea0:	415b      	adcs	r3, r3
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ea8:	4641      	mov	r1, r8
 8009eaa:	1851      	adds	r1, r2, r1
 8009eac:	6139      	str	r1, [r7, #16]
 8009eae:	4649      	mov	r1, r9
 8009eb0:	414b      	adcs	r3, r1
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	f04f 0200 	mov.w	r2, #0
 8009eb8:	f04f 0300 	mov.w	r3, #0
 8009ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	00cb      	lsls	r3, r1, #3
 8009ec4:	4651      	mov	r1, sl
 8009ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eca:	4651      	mov	r1, sl
 8009ecc:	00ca      	lsls	r2, r1, #3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	4642      	mov	r2, r8
 8009ed6:	189b      	adds	r3, r3, r2
 8009ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009edc:	464b      	mov	r3, r9
 8009ede:	460a      	mov	r2, r1
 8009ee0:	eb42 0303 	adc.w	r3, r2, r3
 8009ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ef2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	f04f 0300 	mov.w	r3, #0
 8009efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009f00:	4649      	mov	r1, r9
 8009f02:	008b      	lsls	r3, r1, #2
 8009f04:	4641      	mov	r1, r8
 8009f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f0a:	4641      	mov	r1, r8
 8009f0c:	008a      	lsls	r2, r1, #2
 8009f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f12:	f7f6 fea9 	bl	8000c68 <__aeabi_uldivmod>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	4b38      	ldr	r3, [pc, #224]	@ (800a000 <UART_SetConfig+0x4e4>)
 8009f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8009f22:	095b      	lsrs	r3, r3, #5
 8009f24:	2264      	movs	r2, #100	@ 0x64
 8009f26:	fb02 f303 	mul.w	r3, r2, r3
 8009f2a:	1acb      	subs	r3, r1, r3
 8009f2c:	011b      	lsls	r3, r3, #4
 8009f2e:	3332      	adds	r3, #50	@ 0x32
 8009f30:	4a33      	ldr	r2, [pc, #204]	@ (800a000 <UART_SetConfig+0x4e4>)
 8009f32:	fba2 2303 	umull	r2, r3, r2, r3
 8009f36:	095b      	lsrs	r3, r3, #5
 8009f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f3c:	441c      	add	r4, r3
 8009f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f42:	2200      	movs	r2, #0
 8009f44:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f46:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f4c:	4642      	mov	r2, r8
 8009f4e:	464b      	mov	r3, r9
 8009f50:	1891      	adds	r1, r2, r2
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	415b      	adcs	r3, r3
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f5c:	4641      	mov	r1, r8
 8009f5e:	1851      	adds	r1, r2, r1
 8009f60:	6039      	str	r1, [r7, #0]
 8009f62:	4649      	mov	r1, r9
 8009f64:	414b      	adcs	r3, r1
 8009f66:	607b      	str	r3, [r7, #4]
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	f04f 0300 	mov.w	r3, #0
 8009f70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f74:	4659      	mov	r1, fp
 8009f76:	00cb      	lsls	r3, r1, #3
 8009f78:	4651      	mov	r1, sl
 8009f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f7e:	4651      	mov	r1, sl
 8009f80:	00ca      	lsls	r2, r1, #3
 8009f82:	4610      	mov	r0, r2
 8009f84:	4619      	mov	r1, r3
 8009f86:	4603      	mov	r3, r0
 8009f88:	4642      	mov	r2, r8
 8009f8a:	189b      	adds	r3, r3, r2
 8009f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f8e:	464b      	mov	r3, r9
 8009f90:	460a      	mov	r2, r1
 8009f92:	eb42 0303 	adc.w	r3, r2, r3
 8009f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fa2:	667a      	str	r2, [r7, #100]	@ 0x64
 8009fa4:	f04f 0200 	mov.w	r2, #0
 8009fa8:	f04f 0300 	mov.w	r3, #0
 8009fac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	008b      	lsls	r3, r1, #2
 8009fb4:	4641      	mov	r1, r8
 8009fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fba:	4641      	mov	r1, r8
 8009fbc:	008a      	lsls	r2, r1, #2
 8009fbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009fc2:	f7f6 fe51 	bl	8000c68 <__aeabi_uldivmod>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4b0d      	ldr	r3, [pc, #52]	@ (800a000 <UART_SetConfig+0x4e4>)
 8009fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8009fd0:	095b      	lsrs	r3, r3, #5
 8009fd2:	2164      	movs	r1, #100	@ 0x64
 8009fd4:	fb01 f303 	mul.w	r3, r1, r3
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	011b      	lsls	r3, r3, #4
 8009fdc:	3332      	adds	r3, #50	@ 0x32
 8009fde:	4a08      	ldr	r2, [pc, #32]	@ (800a000 <UART_SetConfig+0x4e4>)
 8009fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe4:	095b      	lsrs	r3, r3, #5
 8009fe6:	f003 020f 	and.w	r2, r3, #15
 8009fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4422      	add	r2, r4
 8009ff2:	609a      	str	r2, [r3, #8]
}
 8009ff4:	bf00      	nop
 8009ff6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a000:	51eb851f 	.word	0x51eb851f

0800a004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a004:	b084      	sub	sp, #16
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	f107 001c 	add.w	r0, r7, #28
 800a012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a016:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d123      	bne.n	800a066 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a022:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a046:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d105      	bne.n	800a05a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f9dc 	bl	800a418 <USB_CoreReset>
 800a060:	4603      	mov	r3, r0
 800a062:	73fb      	strb	r3, [r7, #15]
 800a064:	e01b      	b.n	800a09e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f9d0 	bl	800a418 <USB_CoreReset>
 800a078:	4603      	mov	r3, r0
 800a07a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a07c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a080:	2b00      	cmp	r3, #0
 800a082:	d106      	bne.n	800a092 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a088:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a090:	e005      	b.n	800a09e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a096:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a09e:	7fbb      	ldrb	r3, [r7, #30]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d10b      	bne.n	800a0bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f043 0206 	orr.w	r2, r3, #6
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f043 0220 	orr.w	r2, r3, #32
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0c8:	b004      	add	sp, #16
 800a0ca:	4770      	bx	lr

0800a0cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f043 0201 	orr.w	r2, r3, #1
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f023 0201 	bic.w	r2, r3, #1
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d115      	bne.n	800a15e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a13e:	200a      	movs	r0, #10
 800a140:	f7f8 fc90 	bl	8002a64 <HAL_Delay>
      ms += 10U;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	330a      	adds	r3, #10
 800a148:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f956 	bl	800a3fc <USB_GetMode>
 800a150:	4603      	mov	r3, r0
 800a152:	2b01      	cmp	r3, #1
 800a154:	d01e      	beq.n	800a194 <USB_SetCurrentMode+0x84>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2bc7      	cmp	r3, #199	@ 0xc7
 800a15a:	d9f0      	bls.n	800a13e <USB_SetCurrentMode+0x2e>
 800a15c:	e01a      	b.n	800a194 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a15e:	78fb      	ldrb	r3, [r7, #3]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d115      	bne.n	800a190 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a170:	200a      	movs	r0, #10
 800a172:	f7f8 fc77 	bl	8002a64 <HAL_Delay>
      ms += 10U;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	330a      	adds	r3, #10
 800a17a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f93d 	bl	800a3fc <USB_GetMode>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d005      	beq.n	800a194 <USB_SetCurrentMode+0x84>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a18c:	d9f0      	bls.n	800a170 <USB_SetCurrentMode+0x60>
 800a18e:	e001      	b.n	800a194 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e005      	b.n	800a1a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2bc8      	cmp	r3, #200	@ 0xc8
 800a198:	d101      	bne.n	800a19e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e000      	b.n	800a1a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1c2:	d901      	bls.n	800a1c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e01b      	b.n	800a200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	daf2      	bge.n	800a1b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	019b      	lsls	r3, r3, #6
 800a1d8:	f043 0220 	orr.w	r2, r3, #32
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1ec:	d901      	bls.n	800a1f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e006      	b.n	800a200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	f003 0320 	and.w	r3, r3, #32
 800a1fa:	2b20      	cmp	r3, #32
 800a1fc:	d0f0      	beq.n	800a1e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3301      	adds	r3, #1
 800a21c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a224:	d901      	bls.n	800a22a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e018      	b.n	800a25c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	daf2      	bge.n	800a218 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a232:	2300      	movs	r3, #0
 800a234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2210      	movs	r2, #16
 800a23a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3301      	adds	r3, #1
 800a240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a248:	d901      	bls.n	800a24e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e006      	b.n	800a25c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	f003 0310 	and.w	r3, r3, #16
 800a256:	2b10      	cmp	r3, #16
 800a258:	d0f0      	beq.n	800a23c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a268:	b480      	push	{r7}
 800a26a:	b089      	sub	sp, #36	@ 0x24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	4611      	mov	r1, r2
 800a274:	461a      	mov	r2, r3
 800a276:	460b      	mov	r3, r1
 800a278:	71fb      	strb	r3, [r7, #7]
 800a27a:	4613      	mov	r3, r2
 800a27c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a286:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d123      	bne.n	800a2d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a28e:	88bb      	ldrh	r3, [r7, #4]
 800a290:	3303      	adds	r3, #3
 800a292:	089b      	lsrs	r3, r3, #2
 800a294:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a296:	2300      	movs	r3, #0
 800a298:	61bb      	str	r3, [r7, #24]
 800a29a:	e018      	b.n	800a2ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a29c:	79fb      	ldrb	r3, [r7, #7]
 800a29e:	031a      	lsls	r2, r3, #12
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	61bb      	str	r3, [r7, #24]
 800a2ce:	69ba      	ldr	r2, [r7, #24]
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d3e2      	bcc.n	800a29c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3724      	adds	r7, #36	@ 0x24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b08b      	sub	sp, #44	@ 0x2c
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a2fa:	88fb      	ldrh	r3, [r7, #6]
 800a2fc:	089b      	lsrs	r3, r3, #2
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	f003 0303 	and.w	r3, r3, #3
 800a308:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a30a:	2300      	movs	r3, #0
 800a30c:	623b      	str	r3, [r7, #32]
 800a30e:	e014      	b.n	800a33a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31e:	3301      	adds	r3, #1
 800a320:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a324:	3301      	adds	r3, #1
 800a326:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	3301      	adds	r3, #1
 800a32c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	3301      	adds	r3, #1
 800a332:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a334:	6a3b      	ldr	r3, [r7, #32]
 800a336:	3301      	adds	r3, #1
 800a338:	623b      	str	r3, [r7, #32]
 800a33a:	6a3a      	ldr	r2, [r7, #32]
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d3e6      	bcc.n	800a310 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a342:	8bfb      	ldrh	r3, [r7, #30]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d01e      	beq.n	800a386 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a348:	2300      	movs	r3, #0
 800a34a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a352:	461a      	mov	r2, r3
 800a354:	f107 0310 	add.w	r3, r7, #16
 800a358:	6812      	ldr	r2, [r2, #0]
 800a35a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	fa22 f303 	lsr.w	r3, r2, r3
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36c:	701a      	strb	r2, [r3, #0]
      i++;
 800a36e:	6a3b      	ldr	r3, [r7, #32]
 800a370:	3301      	adds	r3, #1
 800a372:	623b      	str	r3, [r7, #32]
      pDest++;
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	3301      	adds	r3, #1
 800a378:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a37a:	8bfb      	ldrh	r3, [r7, #30]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a380:	8bfb      	ldrh	r3, [r7, #30]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1ea      	bne.n	800a35c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a388:	4618      	mov	r0, r3
 800a38a:	372c      	adds	r7, #44	@ 0x2c
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b085      	sub	sp, #20
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a3ca:	78fb      	ldrb	r3, [r7, #3]
 800a3cc:	015a      	lsls	r2, r3, #5
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	f003 0301 	and.w	r3, r3, #1
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	3301      	adds	r3, #1
 800a428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a430:	d901      	bls.n	800a436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e01b      	b.n	800a46e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	daf2      	bge.n	800a424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a43e:	2300      	movs	r3, #0
 800a440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	f043 0201 	orr.w	r2, r3, #1
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3301      	adds	r3, #1
 800a452:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a45a:	d901      	bls.n	800a460 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e006      	b.n	800a46e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d0f0      	beq.n	800a44e <USB_CoreReset+0x36>

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
	...

0800a47c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a47c:	b084      	sub	sp, #16
 800a47e:	b580      	push	{r7, lr}
 800a480:	b086      	sub	sp, #24
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a48a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a49c:	461a      	mov	r2, r3
 800a49e:	2300      	movs	r3, #0
 800a4a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4be:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d119      	bne.n	800a506 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a4d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d10a      	bne.n	800a4f0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a4e8:	f043 0304 	orr.w	r3, r3, #4
 800a4ec:	6013      	str	r3, [r2, #0]
 800a4ee:	e014      	b.n	800a51a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a4fe:	f023 0304 	bic.w	r3, r3, #4
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	e009      	b.n	800a51a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a514:	f023 0304 	bic.w	r3, r3, #4
 800a518:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a51a:	2110      	movs	r1, #16
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff fe43 	bl	800a1a8 <USB_FlushTxFifo>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7ff fe6d 	bl	800a20c <USB_FlushRxFifo>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a53c:	2300      	movs	r3, #0
 800a53e:	613b      	str	r3, [r7, #16]
 800a540:	e015      	b.n	800a56e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a54e:	461a      	mov	r2, r3
 800a550:	f04f 33ff 	mov.w	r3, #4294967295
 800a554:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a562:	461a      	mov	r2, r3
 800a564:	2300      	movs	r3, #0
 800a566:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	3301      	adds	r3, #1
 800a56c:	613b      	str	r3, [r7, #16]
 800a56e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a572:	461a      	mov	r2, r3
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	4293      	cmp	r3, r2
 800a578:	d3e3      	bcc.n	800a542 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f04f 32ff 	mov.w	r2, #4294967295
 800a586:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a18      	ldr	r2, [pc, #96]	@ (800a5ec <USB_HostInit+0x170>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d10b      	bne.n	800a5a8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a596:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a15      	ldr	r2, [pc, #84]	@ (800a5f0 <USB_HostInit+0x174>)
 800a59c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a14      	ldr	r2, [pc, #80]	@ (800a5f4 <USB_HostInit+0x178>)
 800a5a2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800a5a6:	e009      	b.n	800a5bc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2280      	movs	r2, #128	@ 0x80
 800a5ac:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a11      	ldr	r2, [pc, #68]	@ (800a5f8 <USB_HostInit+0x17c>)
 800a5b2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a11      	ldr	r2, [pc, #68]	@ (800a5fc <USB_HostInit+0x180>)
 800a5b8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a5bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d105      	bne.n	800a5d0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	f043 0210 	orr.w	r2, r3, #16
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	699a      	ldr	r2, [r3, #24]
 800a5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a600 <USB_HostInit+0x184>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5e8:	b004      	add	sp, #16
 800a5ea:	4770      	bx	lr
 800a5ec:	40040000 	.word	0x40040000
 800a5f0:	01000200 	.word	0x01000200
 800a5f4:	00e00300 	.word	0x00e00300
 800a5f8:	00600080 	.word	0x00600080
 800a5fc:	004000e0 	.word	0x004000e0
 800a600:	a3200008 	.word	0xa3200008

0800a604 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	460b      	mov	r3, r1
 800a60e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a622:	f023 0303 	bic.w	r3, r3, #3
 800a626:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	78fb      	ldrb	r3, [r7, #3]
 800a632:	f003 0303 	and.w	r3, r3, #3
 800a636:	68f9      	ldr	r1, [r7, #12]
 800a638:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a63c:	4313      	orrs	r3, r2
 800a63e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d107      	bne.n	800a656 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a64c:	461a      	mov	r2, r3
 800a64e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a652:	6053      	str	r3, [r2, #4]
 800a654:	e00c      	b.n	800a670 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a656:	78fb      	ldrb	r3, [r7, #3]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d107      	bne.n	800a66c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a662:	461a      	mov	r2, r3
 800a664:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a668:	6053      	str	r3, [r2, #4]
 800a66a:	e001      	b.n	800a670 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e000      	b.n	800a672 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3714      	adds	r7, #20
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b084      	sub	sp, #16
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a68a:	2300      	movs	r3, #0
 800a68c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a69e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a6a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a6ae:	2064      	movs	r0, #100	@ 0x64
 800a6b0:	f7f8 f9d8 	bl	8002a64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a6bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6c0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a6c2:	200a      	movs	r0, #10
 800a6c4:	f7f8 f9ce 	bl	8002a64 <HAL_Delay>

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b085      	sub	sp, #20
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a6f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d109      	bne.n	800a716 <USB_DriveVbus+0x44>
 800a702:	78fb      	ldrb	r3, [r7, #3]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d106      	bne.n	800a716 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a710:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a714:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a71c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a720:	d109      	bne.n	800a736 <USB_DriveVbus+0x64>
 800a722:	78fb      	ldrb	r3, [r7, #3]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d106      	bne.n	800a736 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a734:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a750:	2300      	movs	r3, #0
 800a752:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	0c5b      	lsrs	r3, r3, #17
 800a762:	f003 0303 	and.w	r3, r3, #3
}
 800a766:	4618      	mov	r0, r3
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a772:	b480      	push	{r7}
 800a774:	b085      	sub	sp, #20
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	b29b      	uxth	r3, r3
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	4608      	mov	r0, r1
 800a79e:	4611      	mov	r1, r2
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	70fb      	strb	r3, [r7, #3]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	70bb      	strb	r3, [r7, #2]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	015a      	lsls	r2, r3, #5
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a7ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d87c      	bhi.n	800a8cc <USB_HC_Init+0x138>
 800a7d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d8 <USB_HC_Init+0x44>)
 800a7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d8:	0800a7e9 	.word	0x0800a7e9
 800a7dc:	0800a88f 	.word	0x0800a88f
 800a7e0:	0800a7e9 	.word	0x0800a7e9
 800a7e4:	0800a851 	.word	0x0800a851
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a7e8:	78fb      	ldrb	r3, [r7, #3]
 800a7ea:	015a      	lsls	r2, r3, #5
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	f240 439d 	movw	r3, #1181	@ 0x49d
 800a7fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a7fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a800:	2b00      	cmp	r3, #0
 800a802:	da10      	bge.n	800a826 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	0151      	lsls	r1, r2, #5
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	440a      	add	r2, r1
 800a81a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a81e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a822:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a824:	e055      	b.n	800a8d2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a6f      	ldr	r2, [pc, #444]	@ (800a9e8 <USB_HC_Init+0x254>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d151      	bne.n	800a8d2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	015a      	lsls	r2, r3, #5
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	4413      	add	r3, r2
 800a836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	78fa      	ldrb	r2, [r7, #3]
 800a83e:	0151      	lsls	r1, r2, #5
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	440a      	add	r2, r1
 800a844:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a848:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a84c:	60d3      	str	r3, [r2, #12]
      break;
 800a84e:	e040      	b.n	800a8d2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	015a      	lsls	r2, r3, #5
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	4413      	add	r3, r2
 800a858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a85c:	461a      	mov	r2, r3
 800a85e:	f240 639d 	movw	r3, #1693	@ 0x69d
 800a862:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a864:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	da34      	bge.n	800a8d6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a86c:	78fb      	ldrb	r3, [r7, #3]
 800a86e:	015a      	lsls	r2, r3, #5
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	4413      	add	r3, r2
 800a874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	78fa      	ldrb	r2, [r7, #3]
 800a87c:	0151      	lsls	r1, r2, #5
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	440a      	add	r2, r1
 800a882:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a88a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a88c:	e023      	b.n	800a8d6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a88e:	78fb      	ldrb	r3, [r7, #3]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	4413      	add	r3, r2
 800a896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a89a:	461a      	mov	r2, r3
 800a89c:	f240 2325 	movw	r3, #549	@ 0x225
 800a8a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a8a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da17      	bge.n	800a8da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a8aa:	78fb      	ldrb	r3, [r7, #3]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	78fa      	ldrb	r2, [r7, #3]
 800a8ba:	0151      	lsls	r1, r2, #5
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	440a      	add	r2, r1
 800a8c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a8c4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800a8c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a8ca:	e006      	b.n	800a8da <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	77fb      	strb	r3, [r7, #31]
      break;
 800a8d0:	e004      	b.n	800a8dc <USB_HC_Init+0x148>
      break;
 800a8d2:	bf00      	nop
 800a8d4:	e002      	b.n	800a8dc <USB_HC_Init+0x148>
      break;
 800a8d6:	bf00      	nop
 800a8d8:	e000      	b.n	800a8dc <USB_HC_Init+0x148>
      break;
 800a8da:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a8ee:	78fb      	ldrb	r3, [r7, #3]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	78fa      	ldrb	r2, [r7, #3]
 800a8fe:	0151      	lsls	r1, r2, #5
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	440a      	add	r2, r1
 800a904:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a908:	f043 0302 	orr.w	r3, r3, #2
 800a90c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	78fb      	ldrb	r3, [r7, #3]
 800a918:	f003 030f 	and.w	r3, r3, #15
 800a91c:	2101      	movs	r1, #1
 800a91e:	fa01 f303 	lsl.w	r3, r1, r3
 800a922:	6939      	ldr	r1, [r7, #16]
 800a924:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a928:	4313      	orrs	r3, r2
 800a92a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a938:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da03      	bge.n	800a948 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a940:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a944:	61bb      	str	r3, [r7, #24]
 800a946:	e001      	b.n	800a94c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7ff fef9 	bl	800a744 <USB_GetHostSpeed>
 800a952:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a954:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d106      	bne.n	800a96a <USB_HC_Init+0x1d6>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d003      	beq.n	800a96a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a962:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	e001      	b.n	800a96e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a96e:	787b      	ldrb	r3, [r7, #1]
 800a970:	059b      	lsls	r3, r3, #22
 800a972:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a976:	78bb      	ldrb	r3, [r7, #2]
 800a978:	02db      	lsls	r3, r3, #11
 800a97a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a97e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a980:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a984:	049b      	lsls	r3, r3, #18
 800a986:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a98a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a98c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a98e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a992:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	431a      	orrs	r2, r3
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a99c:	78fa      	ldrb	r2, [r7, #3]
 800a99e:	0151      	lsls	r1, r2, #5
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	440a      	add	r2, r1
 800a9a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a9a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9ac:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a9ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d003      	beq.n	800a9be <USB_HC_Init+0x22a>
 800a9b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d10f      	bne.n	800a9de <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	78fa      	ldrb	r2, [r7, #3]
 800a9ce:	0151      	lsls	r1, r2, #5
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	440a      	add	r2, r1
 800a9d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a9d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a9dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a9de:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3720      	adds	r7, #32
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	40040000 	.word	0x40040000

0800a9ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08c      	sub	sp, #48	@ 0x30
 800a9f0:	af02      	add	r7, sp, #8
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	785b      	ldrb	r3, [r3, #1]
 800aa02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800aa04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa08:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4a5d      	ldr	r2, [pc, #372]	@ (800ab84 <USB_HC_StartXfer+0x198>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d12f      	bne.n	800aa72 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800aa12:	79fb      	ldrb	r3, [r7, #7]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d11c      	bne.n	800aa52 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	7c9b      	ldrb	r3, [r3, #18]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <USB_HC_StartXfer+0x3c>
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	7c9b      	ldrb	r3, [r3, #18]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d124      	bne.n	800aa72 <USB_HC_StartXfer+0x86>
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	799b      	ldrb	r3, [r3, #6]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d120      	bne.n	800aa72 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	015a      	lsls	r2, r3, #5
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	4413      	add	r3, r2
 800aa38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	69fa      	ldr	r2, [r7, #28]
 800aa40:	0151      	lsls	r1, r2, #5
 800aa42:	6a3a      	ldr	r2, [r7, #32]
 800aa44:	440a      	add	r2, r1
 800aa46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa4e:	60d3      	str	r3, [r2, #12]
 800aa50:	e00f      	b.n	800aa72 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	791b      	ldrb	r3, [r3, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10b      	bne.n	800aa72 <USB_HC_StartXfer+0x86>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	795b      	ldrb	r3, [r3, #5]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d107      	bne.n	800aa72 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	785b      	ldrb	r3, [r3, #1]
 800aa66:	4619      	mov	r1, r3
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 fb6b 	bl	800b144 <USB_DoPing>
        return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	e232      	b.n	800aed8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	799b      	ldrb	r3, [r3, #6]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d158      	bne.n	800ab2c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	78db      	ldrb	r3, [r3, #3]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d007      	beq.n	800aa96 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aa86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	8a92      	ldrh	r2, [r2, #20]
 800aa8c:	fb03 f202 	mul.w	r2, r3, r2
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	61da      	str	r2, [r3, #28]
 800aa94:	e07c      	b.n	800ab90 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	7c9b      	ldrb	r3, [r3, #18]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d130      	bne.n	800ab00 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	2bbc      	cmp	r3, #188	@ 0xbc
 800aaa4:	d918      	bls.n	800aad8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	8a9b      	ldrh	r3, [r3, #20]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	69da      	ldr	r2, [r3, #28]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d003      	beq.n	800aac8 <USB_HC_StartXfer+0xdc>
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d103      	bne.n	800aad0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2202      	movs	r2, #2
 800aacc:	60da      	str	r2, [r3, #12]
 800aace:	e05f      	b.n	800ab90 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2201      	movs	r2, #1
 800aad4:	60da      	str	r2, [r3, #12]
 800aad6:	e05b      	b.n	800ab90 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	6a1a      	ldr	r2, [r3, #32]
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d007      	beq.n	800aaf8 <USB_HC_StartXfer+0x10c>
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d003      	beq.n	800aaf8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2204      	movs	r2, #4
 800aaf4:	60da      	str	r2, [r3, #12]
 800aaf6:	e04b      	b.n	800ab90 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2203      	movs	r2, #3
 800aafc:	60da      	str	r2, [r3, #12]
 800aafe:	e047      	b.n	800ab90 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ab00:	79fb      	ldrb	r3, [r7, #7]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d10d      	bne.n	800ab22 <USB_HC_StartXfer+0x136>
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	8a92      	ldrh	r2, [r2, #20]
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d907      	bls.n	800ab22 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ab12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	8a92      	ldrh	r2, [r2, #20]
 800ab18:	fb03 f202 	mul.w	r2, r3, r2
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	61da      	str	r2, [r3, #28]
 800ab20:	e036      	b.n	800ab90 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6a1a      	ldr	r2, [r3, #32]
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	61da      	str	r2, [r3, #28]
 800ab2a:	e031      	b.n	800ab90 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d018      	beq.n	800ab66 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	8a92      	ldrh	r2, [r2, #20]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	8a92      	ldrh	r2, [r2, #20]
 800ab44:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab48:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800ab4a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ab4c:	8b7b      	ldrh	r3, [r7, #26]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d90b      	bls.n	800ab6a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800ab52:	8b7b      	ldrh	r3, [r7, #26]
 800ab54:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ab56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	8a92      	ldrh	r2, [r2, #20]
 800ab5c:	fb03 f202 	mul.w	r2, r3, r2
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	61da      	str	r2, [r3, #28]
 800ab64:	e001      	b.n	800ab6a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800ab66:	2301      	movs	r3, #1
 800ab68:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	78db      	ldrb	r3, [r3, #3]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ab72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	8a92      	ldrh	r2, [r2, #20]
 800ab78:	fb03 f202 	mul.w	r2, r3, r2
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	61da      	str	r2, [r3, #28]
 800ab80:	e006      	b.n	800ab90 <USB_HC_StartXfer+0x1a4>
 800ab82:	bf00      	nop
 800ab84:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	6a1a      	ldr	r2, [r3, #32]
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab9a:	04d9      	lsls	r1, r3, #19
 800ab9c:	4ba3      	ldr	r3, [pc, #652]	@ (800ae2c <USB_HC_StartXfer+0x440>)
 800ab9e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aba0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	7d9b      	ldrb	r3, [r3, #22]
 800aba6:	075b      	lsls	r3, r3, #29
 800aba8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800abac:	69f9      	ldr	r1, [r7, #28]
 800abae:	0148      	lsls	r0, r1, #5
 800abb0:	6a39      	ldr	r1, [r7, #32]
 800abb2:	4401      	add	r1, r0
 800abb4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800abb8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800abba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800abbc:	79fb      	ldrb	r3, [r7, #7]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d009      	beq.n	800abd6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	6999      	ldr	r1, [r3, #24]
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	015a      	lsls	r2, r3, #5
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	4413      	add	r3, r2
 800abce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abd2:	460a      	mov	r2, r1
 800abd4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800abd6:	6a3b      	ldr	r3, [r7, #32]
 800abd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	bf0c      	ite	eq
 800abe6:	2301      	moveq	r3, #1
 800abe8:	2300      	movne	r3, #0
 800abea:	b2db      	uxtb	r3, r3
 800abec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	015a      	lsls	r2, r3, #5
 800abf2:	6a3b      	ldr	r3, [r7, #32]
 800abf4:	4413      	add	r3, r2
 800abf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	69fa      	ldr	r2, [r7, #28]
 800abfe:	0151      	lsls	r1, r2, #5
 800ac00:	6a3a      	ldr	r2, [r7, #32]
 800ac02:	440a      	add	r2, r1
 800ac04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ac08:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ac0c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	015a      	lsls	r2, r3, #5
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	4413      	add	r3, r2
 800ac16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	7e7b      	ldrb	r3, [r7, #25]
 800ac1e:	075b      	lsls	r3, r3, #29
 800ac20:	69f9      	ldr	r1, [r7, #28]
 800ac22:	0148      	lsls	r0, r1, #5
 800ac24:	6a39      	ldr	r1, [r7, #32]
 800ac26:	4401      	add	r1, r0
 800ac28:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	799b      	ldrb	r3, [r3, #6]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	f040 80c3 	bne.w	800adc0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	7c5b      	ldrb	r3, [r3, #17]
 800ac3e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ac44:	4313      	orrs	r3, r2
 800ac46:	69fa      	ldr	r2, [r7, #28]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	6a3a      	ldr	r2, [r7, #32]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ac52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ac56:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	69fa      	ldr	r2, [r7, #28]
 800ac68:	0151      	lsls	r1, r2, #5
 800ac6a:	6a3a      	ldr	r2, [r7, #32]
 800ac6c:	440a      	add	r2, r1
 800ac6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ac72:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ac76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	79db      	ldrb	r3, [r3, #7]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d123      	bne.n	800acc8 <USB_HC_StartXfer+0x2dc>
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	78db      	ldrb	r3, [r3, #3]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d11f      	bne.n	800acc8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	015a      	lsls	r2, r3, #5
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	69fa      	ldr	r2, [r7, #28]
 800ac98:	0151      	lsls	r1, r2, #5
 800ac9a:	6a3a      	ldr	r2, [r7, #32]
 800ac9c:	440a      	add	r2, r1
 800ac9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aca6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	015a      	lsls	r2, r3, #5
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	4413      	add	r3, r2
 800acb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	69fa      	ldr	r2, [r7, #28]
 800acb8:	0151      	lsls	r1, r2, #5
 800acba:	6a3a      	ldr	r2, [r7, #32]
 800acbc:	440a      	add	r2, r1
 800acbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800acc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acc6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	7c9b      	ldrb	r3, [r3, #18]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d003      	beq.n	800acd8 <USB_HC_StartXfer+0x2ec>
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	7c9b      	ldrb	r3, [r3, #18]
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d117      	bne.n	800ad08 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d113      	bne.n	800ad08 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	78db      	ldrb	r3, [r3, #3]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d10f      	bne.n	800ad08 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	015a      	lsls	r2, r3, #5
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	4413      	add	r3, r2
 800acf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	69fa      	ldr	r2, [r7, #28]
 800acf8:	0151      	lsls	r1, r2, #5
 800acfa:	6a3a      	ldr	r2, [r7, #32]
 800acfc:	440a      	add	r2, r1
 800acfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad06:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	7c9b      	ldrb	r3, [r3, #18]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d162      	bne.n	800add6 <USB_HC_StartXfer+0x3ea>
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	78db      	ldrb	r3, [r3, #3]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d15e      	bne.n	800add6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	d858      	bhi.n	800add4 <USB_HC_StartXfer+0x3e8>
 800ad22:	a201      	add	r2, pc, #4	@ (adr r2, 800ad28 <USB_HC_StartXfer+0x33c>)
 800ad24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad28:	0800ad39 	.word	0x0800ad39
 800ad2c:	0800ad5b 	.word	0x0800ad5b
 800ad30:	0800ad7d 	.word	0x0800ad7d
 800ad34:	0800ad9f 	.word	0x0800ad9f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	015a      	lsls	r2, r3, #5
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	0151      	lsls	r1, r2, #5
 800ad4a:	6a3a      	ldr	r2, [r7, #32]
 800ad4c:	440a      	add	r2, r1
 800ad4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad56:	6053      	str	r3, [r2, #4]
          break;
 800ad58:	e03d      	b.n	800add6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	015a      	lsls	r2, r3, #5
 800ad5e:	6a3b      	ldr	r3, [r7, #32]
 800ad60:	4413      	add	r3, r2
 800ad62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	69fa      	ldr	r2, [r7, #28]
 800ad6a:	0151      	lsls	r1, r2, #5
 800ad6c:	6a3a      	ldr	r2, [r7, #32]
 800ad6e:	440a      	add	r2, r1
 800ad70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad74:	f043 030e 	orr.w	r3, r3, #14
 800ad78:	6053      	str	r3, [r2, #4]
          break;
 800ad7a:	e02c      	b.n	800add6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	69fa      	ldr	r2, [r7, #28]
 800ad8c:	0151      	lsls	r1, r2, #5
 800ad8e:	6a3a      	ldr	r2, [r7, #32]
 800ad90:	440a      	add	r2, r1
 800ad92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad9a:	6053      	str	r3, [r2, #4]
          break;
 800ad9c:	e01b      	b.n	800add6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	69fa      	ldr	r2, [r7, #28]
 800adae:	0151      	lsls	r1, r2, #5
 800adb0:	6a3a      	ldr	r2, [r7, #32]
 800adb2:	440a      	add	r2, r1
 800adb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800adbc:	6053      	str	r3, [r2, #4]
          break;
 800adbe:	e00a      	b.n	800add6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	6a3b      	ldr	r3, [r7, #32]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adcc:	461a      	mov	r2, r3
 800adce:	2300      	movs	r3, #0
 800add0:	6053      	str	r3, [r2, #4]
 800add2:	e000      	b.n	800add6 <USB_HC_StartXfer+0x3ea>
          break;
 800add4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	4413      	add	r3, r2
 800adde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800adec:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	78db      	ldrb	r3, [r3, #3]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d004      	beq.n	800ae00 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adfc:	613b      	str	r3, [r7, #16]
 800adfe:	e003      	b.n	800ae08 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ae06:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae0e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d003      	beq.n	800ae30 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	e055      	b.n	800aed8 <USB_HC_StartXfer+0x4ec>
 800ae2c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	78db      	ldrb	r3, [r3, #3]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d14e      	bne.n	800aed6 <USB_HC_StartXfer+0x4ea>
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	6a1b      	ldr	r3, [r3, #32]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d04a      	beq.n	800aed6 <USB_HC_StartXfer+0x4ea>
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	79db      	ldrb	r3, [r3, #7]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d146      	bne.n	800aed6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	7c9b      	ldrb	r3, [r3, #18]
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	d831      	bhi.n	800aeb4 <USB_HC_StartXfer+0x4c8>
 800ae50:	a201      	add	r2, pc, #4	@ (adr r2, 800ae58 <USB_HC_StartXfer+0x46c>)
 800ae52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae56:	bf00      	nop
 800ae58:	0800ae69 	.word	0x0800ae69
 800ae5c:	0800ae8d 	.word	0x0800ae8d
 800ae60:	0800ae69 	.word	0x0800ae69
 800ae64:	0800ae8d 	.word	0x0800ae8d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	3303      	adds	r3, #3
 800ae6e:	089b      	lsrs	r3, r3, #2
 800ae70:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ae72:	8afa      	ldrh	r2, [r7, #22]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d91c      	bls.n	800aeb8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	f043 0220 	orr.w	r2, r3, #32
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	619a      	str	r2, [r3, #24]
        }
        break;
 800ae8a:	e015      	b.n	800aeb8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	6a1b      	ldr	r3, [r3, #32]
 800ae90:	3303      	adds	r3, #3
 800ae92:	089b      	lsrs	r3, r3, #2
 800ae94:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ae96:	8afa      	ldrh	r2, [r7, #22]
 800ae98:	6a3b      	ldr	r3, [r7, #32]
 800ae9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d90a      	bls.n	800aebc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	619a      	str	r2, [r3, #24]
        }
        break;
 800aeb2:	e003      	b.n	800aebc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800aeb4:	bf00      	nop
 800aeb6:	e002      	b.n	800aebe <USB_HC_StartXfer+0x4d2>
        break;
 800aeb8:	bf00      	nop
 800aeba:	e000      	b.n	800aebe <USB_HC_StartXfer+0x4d2>
        break;
 800aebc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	6999      	ldr	r1, [r3, #24]
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	785a      	ldrb	r2, [r3, #1]
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	2000      	movs	r0, #0
 800aece:	9000      	str	r0, [sp, #0]
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f7ff f9c9 	bl	800a268 <USB_WritePacket>
  }

  return HAL_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3728      	adds	r7, #40	@ 0x28
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	b29b      	uxth	r3, r3
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800af02:	b480      	push	{r7}
 800af04:	b089      	sub	sp, #36	@ 0x24
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	460b      	mov	r3, r1
 800af0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800af12:	78fb      	ldrb	r3, [r7, #3]
 800af14:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800af16:	2300      	movs	r3, #0
 800af18:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	015a      	lsls	r2, r3, #5
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	4413      	add	r3, r2
 800af22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	0c9b      	lsrs	r3, r3, #18
 800af2a:	f003 0303 	and.w	r3, r3, #3
 800af2e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	4413      	add	r3, r2
 800af38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	0fdb      	lsrs	r3, r3, #31
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	015a      	lsls	r2, r3, #5
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	4413      	add	r3, r2
 800af4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	0fdb      	lsrs	r3, r3, #31
 800af56:	f003 0301 	and.w	r3, r3, #1
 800af5a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	f003 0320 	and.w	r3, r3, #32
 800af64:	2b20      	cmp	r3, #32
 800af66:	d10d      	bne.n	800af84 <USB_HC_Halt+0x82>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <USB_HC_Halt+0x82>
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d002      	beq.n	800af80 <USB_HC_Halt+0x7e>
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b03      	cmp	r3, #3
 800af7e:	d101      	bne.n	800af84 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	e0d8      	b.n	800b136 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d002      	beq.n	800af90 <USB_HC_Halt+0x8e>
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d173      	bne.n	800b078 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	4413      	add	r3, r2
 800af98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	0151      	lsls	r1, r2, #5
 800afa2:	69fa      	ldr	r2, [r7, #28]
 800afa4:	440a      	add	r2, r1
 800afa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800afaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800afae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f003 0320 	and.w	r3, r3, #32
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d14a      	bne.n	800b052 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d133      	bne.n	800b030 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	015a      	lsls	r2, r3, #5
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	4413      	add	r3, r2
 800afd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69ba      	ldr	r2, [r7, #24]
 800afd8:	0151      	lsls	r1, r2, #5
 800afda:	69fa      	ldr	r2, [r7, #28]
 800afdc:	440a      	add	r2, r1
 800afde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800afe2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afe6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	015a      	lsls	r2, r3, #5
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	0151      	lsls	r1, r2, #5
 800affa:	69fa      	ldr	r2, [r7, #28]
 800affc:	440a      	add	r2, r1
 800affe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b002:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b006:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	3301      	adds	r3, #1
 800b00c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b014:	d82e      	bhi.n	800b074 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b02c:	d0ec      	beq.n	800b008 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b02e:	e081      	b.n	800b134 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	015a      	lsls	r2, r3, #5
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	4413      	add	r3, r2
 800b038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	69ba      	ldr	r2, [r7, #24]
 800b040:	0151      	lsls	r1, r2, #5
 800b042:	69fa      	ldr	r2, [r7, #28]
 800b044:	440a      	add	r2, r1
 800b046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b04a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b04e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b050:	e070      	b.n	800b134 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	015a      	lsls	r2, r3, #5
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	4413      	add	r3, r2
 800b05a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	0151      	lsls	r1, r2, #5
 800b064:	69fa      	ldr	r2, [r7, #28]
 800b066:	440a      	add	r2, r1
 800b068:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b06c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b070:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b072:	e05f      	b.n	800b134 <USB_HC_Halt+0x232>
            break;
 800b074:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b076:	e05d      	b.n	800b134 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	015a      	lsls	r2, r3, #5
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	4413      	add	r3, r2
 800b080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	69ba      	ldr	r2, [r7, #24]
 800b088:	0151      	lsls	r1, r2, #5
 800b08a:	69fa      	ldr	r2, [r7, #28]
 800b08c:	440a      	add	r2, r1
 800b08e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b092:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b096:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d133      	bne.n	800b110 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	69ba      	ldr	r2, [r7, #24]
 800b0b8:	0151      	lsls	r1, r2, #5
 800b0ba:	69fa      	ldr	r2, [r7, #28]
 800b0bc:	440a      	add	r2, r1
 800b0be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b0c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	015a      	lsls	r2, r3, #5
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69ba      	ldr	r2, [r7, #24]
 800b0d8:	0151      	lsls	r1, r2, #5
 800b0da:	69fa      	ldr	r2, [r7, #28]
 800b0dc:	440a      	add	r2, r1
 800b0de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b0e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b0e6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b0f4:	d81d      	bhi.n	800b132 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	015a      	lsls	r2, r3, #5
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b108:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b10c:	d0ec      	beq.n	800b0e8 <USB_HC_Halt+0x1e6>
 800b10e:	e011      	b.n	800b134 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	4413      	add	r3, r2
 800b118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	69ba      	ldr	r2, [r7, #24]
 800b120:	0151      	lsls	r1, r2, #5
 800b122:	69fa      	ldr	r2, [r7, #28]
 800b124:	440a      	add	r2, r1
 800b126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b12a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b12e:	6013      	str	r3, [r2, #0]
 800b130:	e000      	b.n	800b134 <USB_HC_Halt+0x232>
          break;
 800b132:	bf00      	nop
    }
  }

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3724      	adds	r7, #36	@ 0x24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
	...

0800b144 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b144:	b480      	push	{r7}
 800b146:	b087      	sub	sp, #28
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b158:	2301      	movs	r3, #1
 800b15a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	04da      	lsls	r2, r3, #19
 800b160:	4b15      	ldr	r3, [pc, #84]	@ (800b1b8 <USB_DoPing+0x74>)
 800b162:	4013      	ands	r3, r2
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	0151      	lsls	r1, r2, #5
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	440a      	add	r2, r1
 800b16c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b170:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b174:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b18c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b194:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	371c      	adds	r7, #28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	1ff80000 	.word	0x1ff80000

0800b1bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7fe ff8c 	bl	800a0ee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b1d6:	2110      	movs	r1, #16
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7fe ffe5 	bl	800a1a8 <USB_FlushTxFifo>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7ff f80f 	bl	800a20c <USB_FlushRxFifo>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	61bb      	str	r3, [r7, #24]
 800b1fc:	e01f      	b.n	800b23e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	015a      	lsls	r2, r3, #5
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	4413      	add	r3, r2
 800b206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b214:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b21c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b224:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	015a      	lsls	r2, r3, #5
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	4413      	add	r3, r2
 800b22e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b232:	461a      	mov	r2, r3
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	3301      	adds	r3, #1
 800b23c:	61bb      	str	r3, [r7, #24]
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	2b0f      	cmp	r3, #15
 800b242:	d9dc      	bls.n	800b1fe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b244:	2300      	movs	r3, #0
 800b246:	61bb      	str	r3, [r7, #24]
 800b248:	e034      	b.n	800b2b4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	4413      	add	r3, r2
 800b252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b260:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b268:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b270:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b27e:	461a      	mov	r2, r3
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3301      	adds	r3, #1
 800b288:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b290:	d80c      	bhi.n	800b2ac <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	015a      	lsls	r2, r3, #5
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	4413      	add	r3, r2
 800b29a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2a8:	d0ec      	beq.n	800b284 <USB_StopHost+0xc8>
 800b2aa:	e000      	b.n	800b2ae <USB_StopHost+0xf2>
        break;
 800b2ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	61bb      	str	r3, [r7, #24]
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	2b0f      	cmp	r3, #15
 800b2b8:	d9c7      	bls.n	800b24a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7fe fefb 	bl	800a0cc <USB_EnableGlobalInt>

  return ret;
 800b2d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3720      	adds	r7, #32
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b08b      	sub	sp, #44	@ 0x2c
 800b2e4:	af04      	add	r7, sp, #16
 800b2e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2f2:	7919      	ldrb	r1, [r3, #4]
 800b2f4:	23ff      	movs	r3, #255	@ 0xff
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 ffc2 	bl	800c282 <USBH_FindInterface>
 800b2fe:	4603      	mov	r3, r0
 800b300:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b302:	7dbb      	ldrb	r3, [r7, #22]
 800b304:	2bff      	cmp	r3, #255	@ 0xff
 800b306:	d002      	beq.n	800b30e <USBH_HID_InterfaceInit+0x2e>
 800b308:	7dbb      	ldrb	r3, [r7, #22]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d901      	bls.n	800b312 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b30e:	2302      	movs	r3, #2
 800b310:	e122      	b.n	800b558 <USBH_HID_InterfaceInit+0x278>
  }

  status = USBH_SelectInterface(phost, interface);
 800b312:	7dbb      	ldrb	r3, [r7, #22]
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 ff97 	bl	800c24a <USBH_SelectInterface>
 800b31c:	4603      	mov	r3, r0
 800b31e:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800b320:	7d7b      	ldrb	r3, [r7, #21]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 800b326:	2302      	movs	r3, #2
 800b328:	e116      	b.n	800b558 <USBH_HID_InterfaceInit+0x278>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800b330:	2034      	movs	r0, #52	@ 0x34
 800b332:	f005 f9bd 	bl	80106b0 <malloc>
 800b336:	4603      	mov	r3, r0
 800b338:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 800b34a:	2302      	movs	r3, #2
 800b34c:	e104      	b.n	800b558 <USBH_HID_InterfaceInit+0x278>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800b34e:	2234      	movs	r2, #52	@ 0x34
 800b350:	2100      	movs	r1, #0
 800b352:	6938      	ldr	r0, [r7, #16]
 800b354:	f006 f815 	bl	8011382 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	2207      	movs	r2, #7
 800b35c:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800b35e:	7dbb      	ldrb	r3, [r7, #22]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	211a      	movs	r1, #26
 800b364:	fb01 f303 	mul.w	r3, r1, r3
 800b368:	4413      	add	r3, r2
 800b36a:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d103      	bne.n	800b37c <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	4a7a      	ldr	r2, [pc, #488]	@ (800b560 <USBH_HID_InterfaceInit+0x280>)
 800b378:	631a      	str	r2, [r3, #48]	@ 0x30
 800b37a:	e010      	b.n	800b39e <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800b37c:	7dbb      	ldrb	r3, [r7, #22]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	211a      	movs	r1, #26
 800b382:	fb01 f303 	mul.w	r3, r1, r3
 800b386:	4413      	add	r3, r2
 800b388:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d103      	bne.n	800b39a <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	4a73      	ldr	r2, [pc, #460]	@ (800b564 <USBH_HID_InterfaceInit+0x284>)
 800b396:	631a      	str	r2, [r3, #48]	@ 0x30
 800b398:	e001      	b.n	800b39e <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 800b39a:	2302      	movs	r3, #2
 800b39c:	e0dc      	b.n	800b558 <USBH_HID_InterfaceInit+0x278>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b3aa:	7dbb      	ldrb	r3, [r7, #22]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	211a      	movs	r1, #26
 800b3b0:	fb01 f303 	mul.w	r3, r1, r3
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b3ba:	781a      	ldrb	r2, [r3, #0]
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b3c0:	7dbb      	ldrb	r3, [r7, #22]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	211a      	movs	r1, #26
 800b3c6:	fb01 f303 	mul.w	r3, r1, r3
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b3d0:	881a      	ldrh	r2, [r3, #0]
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800b3d6:	7dbb      	ldrb	r3, [r7, #22]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	211a      	movs	r1, #26
 800b3dc:	fb01 f303 	mul.w	r3, r1, r3
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f203 3352 	addw	r3, r3, #850	@ 0x352
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	8b9b      	ldrh	r3, [r3, #28]
 800b3f2:	2b09      	cmp	r3, #9
 800b3f4:	d802      	bhi.n	800b3fc <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	220a      	movs	r2, #10
 800b3fa:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800b3fc:	7dbb      	ldrb	r3, [r7, #22]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	211a      	movs	r1, #26
 800b402:	fb01 f303 	mul.w	r3, r1, r3
 800b406:	4413      	add	r3, r2
 800b408:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	2b02      	cmp	r3, #2
 800b410:	bf28      	it	cs
 800b412:	2302      	movcs	r3, #2
 800b414:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800b416:	2300      	movs	r3, #0
 800b418:	75fb      	strb	r3, [r7, #23]
 800b41a:	e097      	b.n	800b54c <USBH_HID_InterfaceInit+0x26c>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800b41c:	7dbb      	ldrb	r3, [r7, #22]
 800b41e:	7df9      	ldrb	r1, [r7, #23]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	3101      	adds	r1, #1
 800b424:	00c9      	lsls	r1, r1, #3
 800b426:	201a      	movs	r0, #26
 800b428:	fb00 f303 	mul.w	r3, r0, r3
 800b42c:	440b      	add	r3, r1
 800b42e:	4413      	add	r3, r2
 800b430:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	b25b      	sxtb	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	da42      	bge.n	800b4c2 <USBH_HID_InterfaceInit+0x1e2>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800b43c:	7dbb      	ldrb	r3, [r7, #22]
 800b43e:	7df9      	ldrb	r1, [r7, #23]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	3101      	adds	r1, #1
 800b444:	00c9      	lsls	r1, r1, #3
 800b446:	201a      	movs	r0, #26
 800b448:	fb00 f303 	mul.w	r3, r0, r3
 800b44c:	440b      	add	r3, r1
 800b44e:	4413      	add	r3, r2
 800b450:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b454:	781a      	ldrb	r2, [r3, #0]
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	791b      	ldrb	r3, [r3, #4]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f002 fa78 	bl	800d956 <USBH_AllocPipe>
 800b466:	4603      	mov	r3, r0
 800b468:	461a      	mov	r2, r3
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800b46e:	7dbb      	ldrb	r3, [r7, #22]
 800b470:	7df9      	ldrb	r1, [r7, #23]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	3101      	adds	r1, #1
 800b476:	00c9      	lsls	r1, r1, #3
 800b478:	201a      	movs	r0, #26
 800b47a:	fb00 f303 	mul.w	r3, r0, r3
 800b47e:	440b      	add	r3, r1
 800b480:	4413      	add	r3, r2
 800b482:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800b486:	881b      	ldrh	r3, [r3, #0]
 800b488:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	7859      	ldrb	r1, [r3, #1]
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	7918      	ldrb	r0, [r3, #4]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b49e:	89ba      	ldrh	r2, [r7, #12]
 800b4a0:	9202      	str	r2, [sp, #8]
 800b4a2:	2203      	movs	r2, #3
 800b4a4:	9201      	str	r2, [sp, #4]
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	4623      	mov	r3, r4
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f002 fa23 	bl	800d8f8 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	785b      	ldrb	r3, [r3, #1]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f002 fd32 	bl	800df24 <USBH_LL_SetToggle>
 800b4c0:	e041      	b.n	800b546 <USBH_HID_InterfaceInit+0x266>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800b4c2:	7dbb      	ldrb	r3, [r7, #22]
 800b4c4:	7df9      	ldrb	r1, [r7, #23]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	3101      	adds	r1, #1
 800b4ca:	00c9      	lsls	r1, r1, #3
 800b4cc:	201a      	movs	r0, #26
 800b4ce:	fb00 f303 	mul.w	r3, r0, r3
 800b4d2:	440b      	add	r3, r1
 800b4d4:	4413      	add	r3, r2
 800b4d6:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b4da:	781a      	ldrb	r2, [r3, #0]
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	78db      	ldrb	r3, [r3, #3]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f002 fa35 	bl	800d956 <USBH_AllocPipe>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800b4f4:	7dbb      	ldrb	r3, [r7, #22]
 800b4f6:	7df9      	ldrb	r1, [r7, #23]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	3101      	adds	r1, #1
 800b4fc:	00c9      	lsls	r1, r1, #3
 800b4fe:	201a      	movs	r0, #26
 800b500:	fb00 f303 	mul.w	r3, r0, r3
 800b504:	440b      	add	r3, r1
 800b506:	4413      	add	r3, r2
 800b508:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	7819      	ldrb	r1, [r3, #0]
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	78d8      	ldrb	r0, [r3, #3]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b524:	89ba      	ldrh	r2, [r7, #12]
 800b526:	9202      	str	r2, [sp, #8]
 800b528:	2203      	movs	r2, #3
 800b52a:	9201      	str	r2, [sp, #4]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	4623      	mov	r3, r4
 800b530:	4602      	mov	r2, r0
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f002 f9e0 	bl	800d8f8 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2200      	movs	r2, #0
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f002 fcef 	bl	800df24 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800b546:	7dfb      	ldrb	r3, [r7, #23]
 800b548:	3301      	adds	r3, #1
 800b54a:	75fb      	strb	r3, [r7, #23]
 800b54c:	7dfa      	ldrb	r2, [r7, #23]
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
 800b550:	429a      	cmp	r2, r3
 800b552:	f4ff af63 	bcc.w	800b41c <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	371c      	adds	r7, #28
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd90      	pop	{r4, r7, pc}
 800b560:	0800bc85 	.word	0x0800bc85
 800b564:	0800bed5 	.word	0x0800bed5

0800b568 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b576:	69db      	ldr	r3, [r3, #28]
 800b578:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	785b      	ldrb	r3, [r3, #1]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00e      	beq.n	800b5a0 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f002 f9d4 	bl	800d936 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f002 f9ff 	bl	800d998 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00e      	beq.n	800b5c6 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f002 f9c1 	bl	800d936 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f002 f9ec 	bl	800d998 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00b      	beq.n	800b5ea <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f005 f870 	bl	80106c0 <free>
    phost->pActiveClass->pData = 0U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800b600:	2301      	movs	r3, #1
 800b602:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	795b      	ldrb	r3, [r3, #5]
 800b612:	2b05      	cmp	r3, #5
 800b614:	d860      	bhi.n	800b6d8 <USBH_HID_ClassRequest+0xe4>
 800b616:	a201      	add	r2, pc, #4	@ (adr r2, 800b61c <USBH_HID_ClassRequest+0x28>)
 800b618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61c:	0800b635 	.word	0x0800b635
 800b620:	0800b6d9 	.word	0x0800b6d9
 800b624:	0800b64f 	.word	0x0800b64f
 800b628:	0800b635 	.word	0x0800b635
 800b62c:	0800b679 	.word	0x0800b679
 800b630:	0800b6a3 	.word	0x0800b6a3
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	331c      	adds	r3, #28
 800b63e:	4619      	mov	r1, r3
 800b640:	4610      	mov	r0, r2
 800b642:	f000 f9e1 	bl	800ba08 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2202      	movs	r2, #2
 800b64a:	715a      	strb	r2, [r3, #5]

      break;
 800b64c:	e04b      	b.n	800b6e6 <USBH_HID_ClassRequest+0xf2>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b652:	4619      	mov	r1, r3
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f93e 	bl	800b8d6 <USBH_HID_GetHIDReportDescriptor>
 800b65a:	4603      	mov	r3, r0
 800b65c:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800b65e:	7bbb      	ldrb	r3, [r7, #14]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d103      	bne.n	800b66c <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2204      	movs	r2, #4
 800b668:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800b66a:	e037      	b.n	800b6dc <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800b66c:	7bbb      	ldrb	r3, [r7, #14]
 800b66e:	2b03      	cmp	r3, #3
 800b670:	d134      	bne.n	800b6dc <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 800b672:	2302      	movs	r3, #2
 800b674:	73fb      	strb	r3, [r7, #15]
      break;
 800b676:	e031      	b.n	800b6dc <USBH_HID_ClassRequest+0xe8>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800b678:	2200      	movs	r2, #0
 800b67a:	2100      	movs	r1, #0
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f949 	bl	800b914 <USBH_HID_SetIdle>
 800b682:	4603      	mov	r3, r0
 800b684:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800b686:	7bbb      	ldrb	r3, [r7, #14]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d103      	bne.n	800b694 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2205      	movs	r2, #5
 800b690:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800b692:	e025      	b.n	800b6e0 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800b694:	7bbb      	ldrb	r3, [r7, #14]
 800b696:	2b03      	cmp	r3, #3
 800b698:	d122      	bne.n	800b6e0 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2205      	movs	r2, #5
 800b69e:	715a      	strb	r2, [r3, #5]
      break;
 800b6a0:	e01e      	b.n	800b6e0 <USBH_HID_ClassRequest+0xec>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f989 	bl	800b9bc <USBH_HID_SetProtocol>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800b6ae:	7bbb      	ldrb	r3, [r7, #14]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10b      	bne.n	800b6cc <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b6c0:	2102      	movs	r1, #2
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	4798      	blx	r3
        status = USBH_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800b6ca:	e00b      	b.n	800b6e4 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800b6cc:	7bbb      	ldrb	r3, [r7, #14]
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	d108      	bne.n	800b6e4 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d6:	e005      	b.n	800b6e4 <USBH_HID_ClassRequest+0xf0>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800b6d8:	bf00      	nop
 800b6da:	e004      	b.n	800b6e6 <USBH_HID_ClassRequest+0xf2>
      break;
 800b6dc:	bf00      	nop
 800b6de:	e002      	b.n	800b6e6 <USBH_HID_ClassRequest+0xf2>
      break;
 800b6e0:	bf00      	nop
 800b6e2:	e000      	b.n	800b6e6 <USBH_HID_ClassRequest+0xf2>
      break;
 800b6e4:	bf00      	nop
  }

  return status;
 800b6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b088      	sub	sp, #32
 800b6f4:	af02      	add	r7, sp, #8
 800b6f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b702:	69db      	ldr	r3, [r3, #28]
 800b704:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	789b      	ldrb	r3, [r3, #2]
 800b70a:	2b06      	cmp	r3, #6
 800b70c:	f200 80b8 	bhi.w	800b880 <USBH_HID_Process+0x190>
 800b710:	a201      	add	r2, pc, #4	@ (adr r2, 800b718 <USBH_HID_Process+0x28>)
 800b712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b716:	bf00      	nop
 800b718:	0800b735 	.word	0x0800b735
 800b71c:	0800b75b 	.word	0x0800b75b
 800b720:	0800b881 	.word	0x0800b881
 800b724:	0800b881 	.word	0x0800b881
 800b728:	0800b7cb 	.word	0x0800b7cb
 800b72c:	0800b7b5 	.word	0x0800b7b5
 800b730:	0800b7f9 	.word	0x0800b7f9
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	4798      	blx	r3
 800b73c:	4603      	mov	r3, r0
 800b73e:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d103      	bne.n	800b74e <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	2201      	movs	r2, #1
 800b74a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b74c:	e09d      	b.n	800b88a <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	2207      	movs	r2, #7
 800b752:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800b754:	2302      	movs	r3, #2
 800b756:	75fb      	strb	r3, [r7, #23]
      break;
 800b758:	e097      	b.n	800b88a <USBH_HID_Process+0x19a>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	695a      	ldr	r2, [r3, #20]
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	8b1b      	ldrh	r3, [r3, #24]
 800b762:	b2db      	uxtb	r3, r3
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	4613      	mov	r3, r2
 800b768:	2200      	movs	r2, #0
 800b76a:	2101      	movs	r1, #1
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f8f9 	bl	800b964 <USBH_HID_GetReport>
 800b772:	4603      	mov	r3, r0
 800b774:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800b776:	7dfb      	ldrb	r3, [r7, #23]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d103      	bne.n	800b784 <USBH_HID_Process+0x94>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2205      	movs	r2, #5
 800b780:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b782:	e082      	b.n	800b88a <USBH_HID_Process+0x19a>
      else if (status == USBH_BUSY)
 800b784:	7dfb      	ldrb	r3, [r7, #23]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d105      	bne.n	800b796 <USBH_HID_Process+0xa6>
        HID_Handle->state = USBH_HID_IDLE;
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	2201      	movs	r2, #1
 800b78e:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800b790:	2300      	movs	r3, #0
 800b792:	75fb      	strb	r3, [r7, #23]
      break;
 800b794:	e079      	b.n	800b88a <USBH_HID_Process+0x19a>
      else if (status == USBH_NOT_SUPPORTED)
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	2b03      	cmp	r3, #3
 800b79a:	d105      	bne.n	800b7a8 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_SYNC;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	2205      	movs	r2, #5
 800b7a0:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b7a6:	e070      	b.n	800b88a <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	2207      	movs	r2, #7
 800b7ac:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b7b2:	e06a      	b.n	800b88a <USBH_HID_Process+0x19a>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d060      	beq.n	800b884 <USBH_HID_Process+0x194>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	2204      	movs	r2, #4
 800b7c6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b7c8:	e05c      	b.n	800b884 <USBH_HID_Process+0x194>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	785b      	ldrb	r3, [r3, #1]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f002 f86e 	bl	800d8ba <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	2206      	movs	r2, #6
 800b7e2:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800b7f6:	e048      	b.n	800b88a <USBH_HID_Process+0x19a>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	785b      	ldrb	r3, [r3, #1]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f002 fb66 	bl	800ded0 <USBH_LL_GetURBState>
 800b804:	4603      	mov	r3, r0
 800b806:	2b01      	cmp	r3, #1
 800b808:	d124      	bne.n	800b854 <USBH_HID_Process+0x164>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	785b      	ldrb	r3, [r3, #1]
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f002 facb 	bl	800ddac <USBH_LL_GetLastXferSize>
 800b816:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d132      	bne.n	800b888 <USBH_HID_Process+0x198>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d02f      	beq.n	800b888 <USBH_HID_Process+0x198>
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d02b      	beq.n	800b888 <USBH_HID_Process+0x198>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f103 0008 	add.w	r0, r3, #8
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	6959      	ldr	r1, [r3, #20]
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	8b1b      	ldrh	r3, [r3, #24]
 800b83e:	461a      	mov	r2, r3
 800b840:	f000 f9cc 	bl	800bbdc <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f002 fd39 	bl	800e2c4 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800b852:	e019      	b.n	800b888 <USBH_HID_Process+0x198>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	785b      	ldrb	r3, [r3, #1]
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f002 fb38 	bl	800ded0 <USBH_LL_GetURBState>
 800b860:	4603      	mov	r3, r0
 800b862:	2b05      	cmp	r3, #5
 800b864:	d110      	bne.n	800b888 <USBH_HID_Process+0x198>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	7e9b      	ldrb	r3, [r3, #26]
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f001 fae1 	bl	800ce34 <USBH_ClrFeature>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d107      	bne.n	800b888 <USBH_HID_Process+0x198>
            HID_Handle->state = USBH_HID_GET_DATA;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	2204      	movs	r2, #4
 800b87c:	709a      	strb	r2, [r3, #2]
      break;
 800b87e:	e003      	b.n	800b888 <USBH_HID_Process+0x198>

    default:
      break;
 800b880:	bf00      	nop
 800b882:	e002      	b.n	800b88a <USBH_HID_Process+0x19a>
      break;
 800b884:	bf00      	nop
 800b886:	e000      	b.n	800b88a <USBH_HID_Process+0x19a>
      break;
 800b888:	bf00      	nop
  }

  return status;
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3718      	adds	r7, #24
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b8a2:	69db      	ldr	r3, [r3, #28]
 800b8a4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	789b      	ldrb	r3, [r3, #2]
 800b8aa:	2b06      	cmp	r3, #6
 800b8ac:	d10c      	bne.n	800b8c8 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6a1b      	ldr	r3, [r3, #32]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	8b92      	ldrh	r2, [r2, #28]
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d302      	bcc.n	800b8c8 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2204      	movs	r2, #4
 800b8c6:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b086      	sub	sp, #24
 800b8da:	af02      	add	r7, sp, #8
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	460b      	mov	r3, r1
 800b8e0:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b8e2:	887b      	ldrh	r3, [r7, #2]
 800b8e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8e8:	d901      	bls.n	800b8ee <USBH_HID_GetHIDReportDescriptor+0x18>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e00e      	b.n	800b90c <USBH_HID_GetHIDReportDescriptor+0x36>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b8f4:	887b      	ldrh	r3, [r7, #2]
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800b8fe:	2101      	movs	r1, #1
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 f9f7 	bl	800ccf4 <USBH_GetDescriptor>
 800b906:	4603      	mov	r3, r0
 800b908:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	460b      	mov	r3, r1
 800b91e:	70fb      	strb	r3, [r7, #3]
 800b920:	4613      	mov	r3, r2
 800b922:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2221      	movs	r2, #33	@ 0x21
 800b928:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	220a      	movs	r2, #10
 800b92e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800b930:	78fb      	ldrb	r3, [r7, #3]
 800b932:	b29b      	uxth	r3, r3
 800b934:	021b      	lsls	r3, r3, #8
 800b936:	b29a      	uxth	r2, r3
 800b938:	78bb      	ldrb	r3, [r7, #2]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	4313      	orrs	r3, r2
 800b93e:	b29a      	uxth	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b950:	2200      	movs	r2, #0
 800b952:	2100      	movs	r1, #0
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f001 fda2 	bl	800d49e <USBH_CtlReq>
 800b95a:	4603      	mov	r3, r0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	607b      	str	r3, [r7, #4]
 800b96e:	460b      	mov	r3, r1
 800b970:	72fb      	strb	r3, [r7, #11]
 800b972:	4613      	mov	r3, r2
 800b974:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	22a1      	movs	r2, #161	@ 0xa1
 800b97a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2201      	movs	r2, #1
 800b980:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800b982:	7afb      	ldrb	r3, [r7, #11]
 800b984:	b29b      	uxth	r3, r3
 800b986:	021b      	lsls	r3, r3, #8
 800b988:	b29a      	uxth	r2, r3
 800b98a:	7abb      	ldrb	r3, [r7, #10]
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	4313      	orrs	r3, r2
 800b990:	b29a      	uxth	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800b99c:	7e3b      	ldrb	r3, [r7, #24]
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800b9a4:	7e3b      	ldrb	r3, [r7, #24]
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f001 fd76 	bl	800d49e <USBH_CtlReq>
 800b9b2:	4603      	mov	r3, r0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2221      	movs	r2, #33	@ 0x21
 800b9cc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	220b      	movs	r2, #11
 800b9d2:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800b9d4:	78fb      	ldrb	r3, [r7, #3]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d003      	beq.n	800b9e2 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	825a      	strh	r2, [r3, #18]
 800b9e0:	e002      	b.n	800b9e8 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f001 fd50 	bl	800d49e <USBH_CtlReq>
 800b9fe:	4603      	mov	r3, r0

}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	3302      	adds	r3, #2
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	3303      	adds	r3, #3
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	021b      	lsls	r3, r3, #8
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800ba2c:	897b      	ldrh	r3, [r7, #10]
 800ba2e:	2b09      	cmp	r3, #9
 800ba30:	d941      	bls.n	800bab6 <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800ba32:	2309      	movs	r3, #9
 800ba34:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800ba36:	e03a      	b.n	800baae <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ba38:	f107 0308 	add.w	r3, r7, #8
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f001 fd13 	bl	800d46a <USBH_GetNextDesc>
 800ba44:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	785b      	ldrb	r3, [r3, #1]
 800ba4a:	2b21      	cmp	r3, #33	@ 0x21
 800ba4c:	d12f      	bne.n	800baae <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	781a      	ldrb	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	785a      	ldrb	r2, [r3, #1]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	3302      	adds	r3, #2
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	461a      	mov	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	3303      	adds	r3, #3
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	021b      	lsls	r3, r3, #8
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	4313      	orrs	r3, r2
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	791a      	ldrb	r2, [r3, #4]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	795a      	ldrb	r2, [r3, #5]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	799a      	ldrb	r2, [r3, #6]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3307      	adds	r3, #7
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	461a      	mov	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	021b      	lsls	r3, r3, #8
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	4313      	orrs	r3, r2
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	811a      	strh	r2, [r3, #8]
        break;
 800baaa:	bf00      	nop
      }
    }
  }
}
 800baac:	e003      	b.n	800bab6 <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800baae:	893b      	ldrh	r3, [r7, #8]
 800bab0:	897a      	ldrh	r2, [r7, #10]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d8c0      	bhi.n	800ba38 <USBH_HID_ParseHIDDesc+0x30>
}
 800bab6:	bf00      	nop
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 800babe:	b480      	push	{r7}
 800bac0:	b085      	sub	sp, #20
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800bac6:	23ff      	movs	r3, #255	@ 0xff
 800bac8:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b0b      	cmp	r3, #11
 800bad2:	d117      	bne.n	800bb04 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800bada:	4619      	mov	r1, r3
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	231a      	movs	r3, #26
 800bae0:	fb01 f303 	mul.w	r3, r1, r3
 800bae4:	4413      	add	r3, r2
 800bae6:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800baee:	7bbb      	ldrb	r3, [r7, #14]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d102      	bne.n	800bafa <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800baf4:	2302      	movs	r3, #2
 800baf6:	73fb      	strb	r3, [r7, #15]
 800baf8:	e004      	b.n	800bb04 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800bafa:	7bbb      	ldrb	r3, [r7, #14]
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d101      	bne.n	800bb04 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 800bb00:	2301      	movs	r3, #1
 800bb02:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b085      	sub	sp, #20
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	88fa      	ldrh	r2, [r7, #6]
 800bb36:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	601a      	str	r2, [r3, #0]
}
 800bb3e:	bf00      	nop
 800bb40:	3714      	adds	r7, #20
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800bb4a:	b480      	push	{r7}
 800bb4c:	b087      	sub	sp, #28
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	60f8      	str	r0, [r7, #12]
 800bb52:	60b9      	str	r1, [r7, #8]
 800bb54:	4613      	mov	r3, r2
 800bb56:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	7a9b      	ldrb	r3, [r3, #10]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d131      	bne.n	800bbc8 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2201      	movs	r2, #1
 800bb68:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	82fb      	strh	r3, [r7, #22]
 800bb6e:	e027      	b.n	800bbc0 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	88da      	ldrh	r2, [r3, #6]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	889b      	ldrh	r3, [r3, #4]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d019      	beq.n	800bbb0 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	88d2      	ldrh	r2, [r2, #6]
 800bb84:	441a      	add	r2, r3
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	1c59      	adds	r1, r3, #1
 800bb8a:	6139      	str	r1, [r7, #16]
 800bb8c:	7812      	ldrb	r2, [r2, #0]
 800bb8e:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	88db      	ldrh	r3, [r3, #6]
 800bb94:	3301      	adds	r3, #1
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	88da      	ldrh	r2, [r3, #6]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	891b      	ldrh	r3, [r3, #8]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d108      	bne.n	800bbba <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	80da      	strh	r2, [r3, #6]
 800bbae:	e004      	b.n	800bbba <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	729a      	strb	r2, [r3, #10]
        return i;
 800bbb6:	8afb      	ldrh	r3, [r7, #22]
 800bbb8:	e00a      	b.n	800bbd0 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800bbba:	8afb      	ldrh	r3, [r7, #22]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	82fb      	strh	r3, [r7, #22]
 800bbc0:	8afa      	ldrh	r2, [r7, #22]
 800bbc2:	88fb      	ldrh	r3, [r7, #6]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d3d3      	bcc.n	800bb70 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800bbce:	88fb      	ldrh	r3, [r7, #6]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	371c      	adds	r7, #28
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b087      	sub	sp, #28
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	7a9b      	ldrb	r3, [r3, #10]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d13c      	bne.n	800bc70 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	82fb      	strh	r3, [r7, #22]
 800bc00:	e032      	b.n	800bc68 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	889b      	ldrh	r3, [r3, #4]
 800bc06:	3301      	adds	r3, #1
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	88d2      	ldrh	r2, [r2, #6]
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d00a      	beq.n	800bc26 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	889b      	ldrh	r3, [r3, #4]
 800bc14:	3301      	adds	r3, #1
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d108      	bne.n	800bc30 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	88db      	ldrh	r3, [r3, #6]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d104      	bne.n	800bc30 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	729a      	strb	r2, [r3, #10]
        return i;
 800bc2c:	8afb      	ldrh	r3, [r7, #22]
 800bc2e:	e023      	b.n	800bc78 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	613a      	str	r2, [r7, #16]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	6812      	ldr	r2, [r2, #0]
 800bc3a:	68f9      	ldr	r1, [r7, #12]
 800bc3c:	8889      	ldrh	r1, [r1, #4]
 800bc3e:	440a      	add	r2, r1
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	7013      	strb	r3, [r2, #0]
        f->head++;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	889b      	ldrh	r3, [r3, #4]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	889a      	ldrh	r2, [r3, #4]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	891b      	ldrh	r3, [r3, #8]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d102      	bne.n	800bc62 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800bc62:	8afb      	ldrh	r3, [r7, #22]
 800bc64:	3301      	adds	r3, #1
 800bc66:	82fb      	strh	r3, [r7, #22]
 800bc68:	8afa      	ldrh	r2, [r7, #22]
 800bc6a:	88fb      	ldrh	r3, [r7, #6]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d3c8      	bcc.n	800bc02 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800bc76:	88fb      	ldrh	r3, [r7, #6]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	371c      	adds	r7, #28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc92:	69db      	ldr	r3, [r3, #28]
 800bc94:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800bc96:	4b22      	ldr	r3, [pc, #136]	@ (800bd20 <USBH_HID_KeybdInit+0x9c>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800bc9c:	4b20      	ldr	r3, [pc, #128]	@ (800bd20 <USBH_HID_KeybdInit+0x9c>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800bca2:	4b1f      	ldr	r3, [pc, #124]	@ (800bd20 <USBH_HID_KeybdInit+0x9c>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800bca8:	4b1d      	ldr	r3, [pc, #116]	@ (800bd20 <USBH_HID_KeybdInit+0x9c>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800bcae:	4b1c      	ldr	r3, [pc, #112]	@ (800bd20 <USBH_HID_KeybdInit+0x9c>)
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800bcb4:	4b1a      	ldr	r3, [pc, #104]	@ (800bd20 <USBH_HID_KeybdInit+0x9c>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800bcba:	4b19      	ldr	r3, [pc, #100]	@ (800bd20 <USBH_HID_KeybdInit+0x9c>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800bcc0:	4b17      	ldr	r3, [pc, #92]	@ (800bd20 <USBH_HID_KeybdInit+0x9c>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	60fb      	str	r3, [r7, #12]
 800bcca:	e00c      	b.n	800bce6 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800bccc:	4a15      	ldr	r2, [pc, #84]	@ (800bd24 <USBH_HID_KeybdInit+0xa0>)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800bcd6:	4a14      	ldr	r2, [pc, #80]	@ (800bd28 <USBH_HID_KeybdInit+0xa4>)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	4413      	add	r3, r2
 800bcdc:	2200      	movs	r2, #0
 800bcde:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3301      	adds	r3, #1
 800bce4:	60fb      	str	r3, [r7, #12]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b07      	cmp	r3, #7
 800bcea:	d9ef      	bls.n	800bccc <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	8b1b      	ldrh	r3, [r3, #24]
 800bcf0:	2b08      	cmp	r3, #8
 800bcf2:	d902      	bls.n	800bcfa <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	2208      	movs	r2, #8
 800bcf8:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	4a0a      	ldr	r2, [pc, #40]	@ (800bd28 <USBH_HID_KeybdInit+0xa4>)
 800bcfe:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	f103 0008 	add.w	r0, r3, #8
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bd0c:	2250      	movs	r2, #80	@ 0x50
 800bd0e:	4619      	mov	r1, r3
 800bd10:	f7ff feff 	bl	800bb12 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	20000ba8 	.word	0x20000ba8
 800bd24:	20000bc0 	.word	0x20000bc0
 800bd28:	20000bb8 	.word	0x20000bb8

0800bd2c <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 f80d 	bl	800bd54 <USBH_HID_KeybdDecode>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800bd40:	4b03      	ldr	r3, [pc, #12]	@ (800bd50 <USBH_HID_GetKeybdInfo+0x24>)
 800bd42:	e000      	b.n	800bd46 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800bd44:	2300      	movs	r3, #0
  }
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	20000ba8 	.word	0x20000ba8

0800bd54 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bd62:	69db      	ldr	r3, [r3, #28]
 800bd64:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	8b1b      	ldrh	r3, [r3, #24]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d003      	beq.n	800bd76 <USBH_HID_KeybdDecode+0x22>
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800bd76:	2302      	movs	r3, #2
 800bd78:	e066      	b.n	800be48 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	f103 0008 	add.w	r0, r3, #8
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	8b1b      	ldrh	r3, [r3, #24]
 800bd84:	461a      	mov	r2, r3
 800bd86:	4932      	ldr	r1, [pc, #200]	@ (800be50 <USBH_HID_KeybdDecode+0xfc>)
 800bd88:	f7ff fedf 	bl	800bb4a <USBH_HID_FifoRead>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	461a      	mov	r2, r3
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	8b1b      	ldrh	r3, [r3, #24]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d156      	bne.n	800be46 <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800bd98:	2100      	movs	r1, #0
 800bd9a:	482e      	ldr	r0, [pc, #184]	@ (800be54 <USBH_HID_KeybdDecode+0x100>)
 800bd9c:	f000 f8e4 	bl	800bf68 <HID_ReadItem>
 800bda0:	4603      	mov	r3, r0
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	4b2c      	ldr	r3, [pc, #176]	@ (800be58 <USBH_HID_KeybdDecode+0x104>)
 800bda6:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800bda8:	2100      	movs	r1, #0
 800bdaa:	482c      	ldr	r0, [pc, #176]	@ (800be5c <USBH_HID_KeybdDecode+0x108>)
 800bdac:	f000 f8dc 	bl	800bf68 <HID_ReadItem>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	4b28      	ldr	r3, [pc, #160]	@ (800be58 <USBH_HID_KeybdDecode+0x104>)
 800bdb6:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800bdb8:	2100      	movs	r1, #0
 800bdba:	4829      	ldr	r0, [pc, #164]	@ (800be60 <USBH_HID_KeybdDecode+0x10c>)
 800bdbc:	f000 f8d4 	bl	800bf68 <HID_ReadItem>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	4b24      	ldr	r3, [pc, #144]	@ (800be58 <USBH_HID_KeybdDecode+0x104>)
 800bdc6:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800bdc8:	2100      	movs	r1, #0
 800bdca:	4826      	ldr	r0, [pc, #152]	@ (800be64 <USBH_HID_KeybdDecode+0x110>)
 800bdcc:	f000 f8cc 	bl	800bf68 <HID_ReadItem>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	4b20      	ldr	r3, [pc, #128]	@ (800be58 <USBH_HID_KeybdDecode+0x104>)
 800bdd6:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800bdd8:	2100      	movs	r1, #0
 800bdda:	4823      	ldr	r0, [pc, #140]	@ (800be68 <USBH_HID_KeybdDecode+0x114>)
 800bddc:	f000 f8c4 	bl	800bf68 <HID_ReadItem>
 800bde0:	4603      	mov	r3, r0
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	4b1c      	ldr	r3, [pc, #112]	@ (800be58 <USBH_HID_KeybdDecode+0x104>)
 800bde6:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800bde8:	2100      	movs	r1, #0
 800bdea:	4820      	ldr	r0, [pc, #128]	@ (800be6c <USBH_HID_KeybdDecode+0x118>)
 800bdec:	f000 f8bc 	bl	800bf68 <HID_ReadItem>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	4b18      	ldr	r3, [pc, #96]	@ (800be58 <USBH_HID_KeybdDecode+0x104>)
 800bdf6:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	481d      	ldr	r0, [pc, #116]	@ (800be70 <USBH_HID_KeybdDecode+0x11c>)
 800bdfc:	f000 f8b4 	bl	800bf68 <HID_ReadItem>
 800be00:	4603      	mov	r3, r0
 800be02:	b2da      	uxtb	r2, r3
 800be04:	4b14      	ldr	r3, [pc, #80]	@ (800be58 <USBH_HID_KeybdDecode+0x104>)
 800be06:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800be08:	2100      	movs	r1, #0
 800be0a:	481a      	ldr	r0, [pc, #104]	@ (800be74 <USBH_HID_KeybdDecode+0x120>)
 800be0c:	f000 f8ac 	bl	800bf68 <HID_ReadItem>
 800be10:	4603      	mov	r3, r0
 800be12:	b2da      	uxtb	r2, r3
 800be14:	4b10      	ldr	r3, [pc, #64]	@ (800be58 <USBH_HID_KeybdDecode+0x104>)
 800be16:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
 800be1c:	e00e      	b.n	800be3c <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	4619      	mov	r1, r3
 800be22:	4815      	ldr	r0, [pc, #84]	@ (800be78 <USBH_HID_KeybdDecode+0x124>)
 800be24:	f000 f8a0 	bl	800bf68 <HID_ReadItem>
 800be28:	4602      	mov	r2, r0
 800be2a:	7bfb      	ldrb	r3, [r7, #15]
 800be2c:	b2d1      	uxtb	r1, r2
 800be2e:	4a0a      	ldr	r2, [pc, #40]	@ (800be58 <USBH_HID_KeybdDecode+0x104>)
 800be30:	4413      	add	r3, r2
 800be32:	460a      	mov	r2, r1
 800be34:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	3301      	adds	r3, #1
 800be3a:	73fb      	strb	r3, [r7, #15]
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
 800be3e:	2b05      	cmp	r3, #5
 800be40:	d9ed      	bls.n	800be1e <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	e000      	b.n	800be48 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800be46:	2302      	movs	r3, #2
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	20000bc0 	.word	0x20000bc0
 800be54:	0801500c 	.word	0x0801500c
 800be58:	20000ba8 	.word	0x20000ba8
 800be5c:	0801502c 	.word	0x0801502c
 800be60:	0801504c 	.word	0x0801504c
 800be64:	0801506c 	.word	0x0801506c
 800be68:	0801508c 	.word	0x0801508c
 800be6c:	080150ac 	.word	0x080150ac
 800be70:	080150cc 	.word	0x080150cc
 800be74:	080150ec 	.word	0x080150ec
 800be78:	0801510c 	.word	0x0801510c

0800be7c <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	789b      	ldrb	r3, [r3, #2]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d103      	bne.n	800be94 <USBH_HID_GetASCIICode+0x18>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	799b      	ldrb	r3, [r3, #6]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d009      	beq.n	800bea8 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7a5b      	ldrb	r3, [r3, #9]
 800be98:	461a      	mov	r2, r3
 800be9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bec8 <USBH_HID_GetASCIICode+0x4c>)
 800be9c:	5c9b      	ldrb	r3, [r3, r2]
 800be9e:	461a      	mov	r2, r3
 800bea0:	4b0a      	ldr	r3, [pc, #40]	@ (800becc <USBH_HID_GetASCIICode+0x50>)
 800bea2:	5c9b      	ldrb	r3, [r3, r2]
 800bea4:	73fb      	strb	r3, [r7, #15]
 800bea6:	e008      	b.n	800beba <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7a5b      	ldrb	r3, [r3, #9]
 800beac:	461a      	mov	r2, r3
 800beae:	4b06      	ldr	r3, [pc, #24]	@ (800bec8 <USBH_HID_GetASCIICode+0x4c>)
 800beb0:	5c9b      	ldrb	r3, [r3, r2]
 800beb2:	461a      	mov	r2, r3
 800beb4:	4b06      	ldr	r3, [pc, #24]	@ (800bed0 <USBH_HID_GetASCIICode+0x54>)
 800beb6:	5c9b      	ldrb	r3, [r3, r2]
 800beb8:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800beba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	08015234 	.word	0x08015234
 800becc:	080151b0 	.word	0x080151b0
 800bed0:	0801512c 	.word	0x0801512c

0800bed4 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bee2:	69db      	ldr	r3, [r3, #28]
 800bee4:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800bee6:	4b1d      	ldr	r3, [pc, #116]	@ (800bf5c <USBH_HID_MouseInit+0x88>)
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800beec:	4b1b      	ldr	r3, [pc, #108]	@ (800bf5c <USBH_HID_MouseInit+0x88>)
 800beee:	2200      	movs	r2, #0
 800bef0:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800bef2:	4b1a      	ldr	r3, [pc, #104]	@ (800bf5c <USBH_HID_MouseInit+0x88>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800bef8:	4b18      	ldr	r3, [pc, #96]	@ (800bf5c <USBH_HID_MouseInit+0x88>)
 800befa:	2200      	movs	r2, #0
 800befc:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800befe:	4b17      	ldr	r3, [pc, #92]	@ (800bf5c <USBH_HID_MouseInit+0x88>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800bf04:	2300      	movs	r3, #0
 800bf06:	60fb      	str	r3, [r7, #12]
 800bf08:	e00c      	b.n	800bf24 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800bf0a:	4a15      	ldr	r2, [pc, #84]	@ (800bf60 <USBH_HID_MouseInit+0x8c>)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4413      	add	r3, r2
 800bf10:	2200      	movs	r2, #0
 800bf12:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800bf14:	4a13      	ldr	r2, [pc, #76]	@ (800bf64 <USBH_HID_MouseInit+0x90>)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	4413      	add	r3, r2
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	3301      	adds	r3, #1
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b07      	cmp	r3, #7
 800bf28:	d9ef      	bls.n	800bf0a <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	8b1b      	ldrh	r3, [r3, #24]
 800bf2e:	2b08      	cmp	r3, #8
 800bf30:	d902      	bls.n	800bf38 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	2208      	movs	r2, #8
 800bf36:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	4a0a      	ldr	r2, [pc, #40]	@ (800bf64 <USBH_HID_MouseInit+0x90>)
 800bf3c:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	f103 0008 	add.w	r0, r3, #8
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bf4a:	2250      	movs	r2, #80	@ 0x50
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	f7ff fde0 	bl	800bb12 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	20000bc8 	.word	0x20000bc8
 800bf60:	20000bd0 	.word	0x20000bd0
 800bf64:	20000bd8 	.word	0x20000bd8

0800bf68 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b089      	sub	sp, #36	@ 0x24
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	460b      	mov	r3, r1
 800bf72:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800bf74:	2300      	movs	r3, #0
 800bf76:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	7a1b      	ldrb	r3, [r3, #8]
 800bf86:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	7a5b      	ldrb	r3, [r3, #9]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d01a      	beq.n	800bfc6 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	7a5b      	ldrb	r3, [r3, #9]
 800bf94:	78fa      	ldrb	r2, [r7, #3]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d301      	bcc.n	800bf9e <HID_ReadItem+0x36>
    {
      return (0U);
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	e078      	b.n	800c090 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800bf9e:	78fb      	ldrb	r3, [r7, #3]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	6852      	ldr	r2, [r2, #4]
 800bfa4:	fb02 f303 	mul.w	r3, r2, r3
 800bfa8:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800bfaa:	7cfb      	ldrb	r3, [r7, #19]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	4413      	add	r3, r2
 800bfb0:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	08db      	lsrs	r3, r3, #3
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	4413      	add	r3, r2
 800bfba:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	f003 0307 	and.w	r3, r3, #7
 800bfc4:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	61bb      	str	r3, [r7, #24]
 800bfca:	e00a      	b.n	800bfe2 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfda:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	61bb      	str	r3, [r7, #24]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	f003 0307 	and.w	r3, r3, #7
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d004      	beq.n	800bff8 <HID_ReadItem+0x90>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	08db      	lsrs	r3, r3, #3
 800bff4:	3301      	adds	r3, #1
 800bff6:	e002      	b.n	800bffe <HID_ReadItem+0x96>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	08db      	lsrs	r3, r3, #3
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	4293      	cmp	r3, r2
 800c002:	d8e3      	bhi.n	800bfcc <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800c004:	7cfb      	ldrb	r3, [r7, #19]
 800c006:	69fa      	ldr	r2, [r7, #28]
 800c008:	40da      	lsrs	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	f04f 31ff 	mov.w	r1, #4294967295
 800c012:	fa01 f303 	lsl.w	r3, r1, r3
 800c016:	43db      	mvns	r3, r3
 800c018:	4013      	ands	r3, r2
 800c01a:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	69fa      	ldr	r2, [r7, #28]
 800c022:	429a      	cmp	r2, r3
 800c024:	d304      	bcc.n	800c030 <HID_ReadItem+0xc8>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	69fa      	ldr	r2, [r7, #28]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d901      	bls.n	800c034 <HID_ReadItem+0xcc>
  {
    return (0U);
 800c030:	2300      	movs	r3, #0
 800c032:	e02d      	b.n	800c090 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	7a9b      	ldrb	r3, [r3, #10]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d01e      	beq.n	800c07a <HID_ReadItem+0x112>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	3b01      	subs	r3, #1
 800c042:	69fa      	ldr	r2, [r7, #28]
 800c044:	fa22 f303 	lsr.w	r3, r2, r3
 800c048:	f003 0301 	and.w	r3, r3, #1
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d014      	beq.n	800c07a <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	fa02 f303 	lsl.w	r3, r2, r3
 800c05a:	425b      	negs	r3, r3
 800c05c:	69fa      	ldr	r2, [r7, #28]
 800c05e:	4313      	orrs	r3, r2
 800c060:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	69db      	ldr	r3, [r3, #28]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d101      	bne.n	800c06e <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	e010      	b.n	800c090 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	69db      	ldr	r3, [r3, #28]
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	fb02 f303 	mul.w	r3, r2, r3
 800c078:	e00a      	b.n	800c090 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d101      	bne.n	800c086 <HID_ReadItem+0x11e>
    {
      return (val);
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	e004      	b.n	800c090 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	69db      	ldr	r3, [r3, #28]
 800c08a:	69fa      	ldr	r2, [r7, #28]
 800c08c:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800c090:	4618      	mov	r0, r3
 800c092:	3724      	adds	r7, #36	@ 0x24
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d101      	bne.n	800c0b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	e029      	b.n	800c108 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	79fa      	ldrb	r2, [r7, #7]
 800c0b8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f000 f81f 	bl	800c110 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d003      	beq.n	800c100 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f001 fd9f 	bl	800dc44 <USBH_LL_Init>

  return USBH_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c118:	2300      	movs	r3, #0
 800c11a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c11c:	2300      	movs	r3, #0
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	e009      	b.n	800c136 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	33e0      	adds	r3, #224	@ 0xe0
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	2200      	movs	r2, #0
 800c12e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	3301      	adds	r3, #1
 800c134:	60fb      	str	r3, [r7, #12]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2b0f      	cmp	r3, #15
 800c13a:	d9f2      	bls.n	800c122 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c13c:	2300      	movs	r3, #0
 800c13e:	60fb      	str	r3, [r7, #12]
 800c140:	e009      	b.n	800c156 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	4413      	add	r3, r2
 800c148:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c14c:	2200      	movs	r2, #0
 800c14e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3301      	adds	r3, #1
 800c154:	60fb      	str	r3, [r7, #12]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c15c:	d3f1      	bcc.n	800c142 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2240      	movs	r2, #64	@ 0x40
 800c182:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2201      	movs	r2, #1
 800c196:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	331c      	adds	r3, #28
 800c1ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f005 f8e4 	bl	8011382 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c1c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f005 f8db 	bl	8011382 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c1d2:	2212      	movs	r2, #18
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f005 f8d3 	bl	8011382 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c1e2:	223e      	movs	r2, #62	@ 0x3e
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f005 f8cb 	bl	8011382 <memset>

  return USBH_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b085      	sub	sp, #20
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c200:	2300      	movs	r3, #0
 800c202:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d016      	beq.n	800c238 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10e      	bne.n	800c232 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c21a:	1c59      	adds	r1, r3, #1
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	33de      	adds	r3, #222	@ 0xde
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	73fb      	strb	r3, [r7, #15]
 800c230:	e004      	b.n	800c23c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c232:	2302      	movs	r3, #2
 800c234:	73fb      	strb	r3, [r7, #15]
 800c236:	e001      	b.n	800c23c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c238:	2302      	movs	r3, #2
 800c23a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c24a:	b480      	push	{r7}
 800c24c:	b085      	sub	sp, #20
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	460b      	mov	r3, r1
 800c254:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c260:	78fa      	ldrb	r2, [r7, #3]
 800c262:	429a      	cmp	r2, r3
 800c264:	d204      	bcs.n	800c270 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	78fa      	ldrb	r2, [r7, #3]
 800c26a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c26e:	e001      	b.n	800c274 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c270:	2302      	movs	r3, #2
 800c272:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c274:	7bfb      	ldrb	r3, [r7, #15]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3714      	adds	r7, #20
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr

0800c282 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c282:	b480      	push	{r7}
 800c284:	b087      	sub	sp, #28
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	4608      	mov	r0, r1
 800c28c:	4611      	mov	r1, r2
 800c28e:	461a      	mov	r2, r3
 800c290:	4603      	mov	r3, r0
 800c292:	70fb      	strb	r3, [r7, #3]
 800c294:	460b      	mov	r3, r1
 800c296:	70bb      	strb	r3, [r7, #2]
 800c298:	4613      	mov	r3, r2
 800c29a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c29c:	2300      	movs	r3, #0
 800c29e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c2aa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c2ac:	e025      	b.n	800c2fa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c2ae:	7dfb      	ldrb	r3, [r7, #23]
 800c2b0:	221a      	movs	r2, #26
 800c2b2:	fb02 f303 	mul.w	r3, r2, r3
 800c2b6:	3308      	adds	r3, #8
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	3302      	adds	r3, #2
 800c2be:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	795b      	ldrb	r3, [r3, #5]
 800c2c4:	78fa      	ldrb	r2, [r7, #3]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d002      	beq.n	800c2d0 <USBH_FindInterface+0x4e>
 800c2ca:	78fb      	ldrb	r3, [r7, #3]
 800c2cc:	2bff      	cmp	r3, #255	@ 0xff
 800c2ce:	d111      	bne.n	800c2f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c2d4:	78ba      	ldrb	r2, [r7, #2]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d002      	beq.n	800c2e0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c2da:	78bb      	ldrb	r3, [r7, #2]
 800c2dc:	2bff      	cmp	r3, #255	@ 0xff
 800c2de:	d109      	bne.n	800c2f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c2e4:	787a      	ldrb	r2, [r7, #1]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d002      	beq.n	800c2f0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c2ea:	787b      	ldrb	r3, [r7, #1]
 800c2ec:	2bff      	cmp	r3, #255	@ 0xff
 800c2ee:	d101      	bne.n	800c2f4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c2f0:	7dfb      	ldrb	r3, [r7, #23]
 800c2f2:	e006      	b.n	800c302 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c2fa:	7dfb      	ldrb	r3, [r7, #23]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d9d6      	bls.n	800c2ae <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c300:	23ff      	movs	r3, #255	@ 0xff
}
 800c302:	4618      	mov	r0, r3
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b082      	sub	sp, #8
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f001 fcd0 	bl	800dcbc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c31c:	2101      	movs	r1, #1
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f001 fde9 	bl	800def6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
	...

0800c330 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af04      	add	r7, sp, #16
 800c336:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c338:	2302      	movs	r3, #2
 800c33a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c33c:	2300      	movs	r3, #0
 800c33e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d102      	bne.n	800c352 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2203      	movs	r2, #3
 800c350:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	b2db      	uxtb	r3, r3
 800c358:	2b0b      	cmp	r3, #11
 800c35a:	f200 81bb 	bhi.w	800c6d4 <USBH_Process+0x3a4>
 800c35e:	a201      	add	r2, pc, #4	@ (adr r2, 800c364 <USBH_Process+0x34>)
 800c360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c364:	0800c395 	.word	0x0800c395
 800c368:	0800c3c7 	.word	0x0800c3c7
 800c36c:	0800c42f 	.word	0x0800c42f
 800c370:	0800c66f 	.word	0x0800c66f
 800c374:	0800c6d5 	.word	0x0800c6d5
 800c378:	0800c4cf 	.word	0x0800c4cf
 800c37c:	0800c615 	.word	0x0800c615
 800c380:	0800c505 	.word	0x0800c505
 800c384:	0800c525 	.word	0x0800c525
 800c388:	0800c543 	.word	0x0800c543
 800c38c:	0800c587 	.word	0x0800c587
 800c390:	0800c657 	.word	0x0800c657
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f000 819b 	beq.w	800c6d8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c3a8:	20c8      	movs	r0, #200	@ 0xc8
 800c3aa:	f001 fdee 	bl	800df8a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f001 fce1 	bl	800dd76 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c3c4:	e188      	b.n	800c6d8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d107      	bne.n	800c3e0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2202      	movs	r2, #2
 800c3dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c3de:	e18a      	b.n	800c6f6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c3e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c3ea:	d914      	bls.n	800c416 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	b2da      	uxtb	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c402:	2b03      	cmp	r3, #3
 800c404:	d903      	bls.n	800c40e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	220d      	movs	r2, #13
 800c40a:	701a      	strb	r2, [r3, #0]
      break;
 800c40c:	e173      	b.n	800c6f6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	701a      	strb	r2, [r3, #0]
      break;
 800c414:	e16f      	b.n	800c6f6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c41c:	f103 020a 	add.w	r2, r3, #10
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c426:	200a      	movs	r0, #10
 800c428:	f001 fdaf 	bl	800df8a <USBH_Delay>
      break;
 800c42c:	e163      	b.n	800c6f6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c434:	2b00      	cmp	r3, #0
 800c436:	d005      	beq.n	800c444 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c43e:	2104      	movs	r1, #4
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c444:	2064      	movs	r0, #100	@ 0x64
 800c446:	f001 fda0 	bl	800df8a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 fc6c 	bl	800dd28 <USBH_LL_GetSpeed>
 800c450:	4603      	mov	r3, r0
 800c452:	461a      	mov	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2205      	movs	r2, #5
 800c45e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c460:	2100      	movs	r1, #0
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f001 fa77 	bl	800d956 <USBH_AllocPipe>
 800c468:	4603      	mov	r3, r0
 800c46a:	461a      	mov	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c470:	2180      	movs	r1, #128	@ 0x80
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f001 fa6f 	bl	800d956 <USBH_AllocPipe>
 800c478:	4603      	mov	r3, r0
 800c47a:	461a      	mov	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	7919      	ldrb	r1, [r3, #4]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c494:	9202      	str	r2, [sp, #8]
 800c496:	2200      	movs	r2, #0
 800c498:	9201      	str	r2, [sp, #4]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	4603      	mov	r3, r0
 800c49e:	2280      	movs	r2, #128	@ 0x80
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f001 fa29 	bl	800d8f8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	7959      	ldrb	r1, [r3, #5]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c4ba:	9202      	str	r2, [sp, #8]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	9201      	str	r2, [sp, #4]
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f001 fa16 	bl	800d8f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c4cc:	e113      	b.n	800c6f6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f916 	bl	800c700 <USBH_HandleEnum>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f040 80fd 	bne.w	800c6dc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d103      	bne.n	800c4fc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2208      	movs	r2, #8
 800c4f8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c4fa:	e0ef      	b.n	800c6dc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2207      	movs	r2, #7
 800c500:	701a      	strb	r2, [r3, #0]
      break;
 800c502:	e0eb      	b.n	800c6dc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 80e8 	beq.w	800c6e0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c516:	2101      	movs	r1, #1
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2208      	movs	r2, #8
 800c520:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c522:	e0dd      	b.n	800c6e0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800c52a:	4619      	mov	r1, r3
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fc3a 	bl	800cda6 <USBH_SetCfg>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	f040 80d5 	bne.w	800c6e4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2209      	movs	r2, #9
 800c53e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c540:	e0d0      	b.n	800c6e4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800c548:	f003 0320 	and.w	r3, r3, #32
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d016      	beq.n	800c57e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c550:	2101      	movs	r1, #1
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fc4a 	bl	800cdec <USBH_SetFeature>
 800c558:	4603      	mov	r3, r0
 800c55a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c55c:	7bbb      	ldrb	r3, [r7, #14]
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b00      	cmp	r3, #0
 800c562:	d103      	bne.n	800c56c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	220a      	movs	r2, #10
 800c568:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c56a:	e0bd      	b.n	800c6e8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800c56c:	7bbb      	ldrb	r3, [r7, #14]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b03      	cmp	r3, #3
 800c572:	f040 80b9 	bne.w	800c6e8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	220a      	movs	r2, #10
 800c57a:	701a      	strb	r2, [r3, #0]
      break;
 800c57c:	e0b4      	b.n	800c6e8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	220a      	movs	r2, #10
 800c582:	701a      	strb	r2, [r3, #0]
      break;
 800c584:	e0b0      	b.n	800c6e8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 80ad 	beq.w	800c6ec <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c59a:	2300      	movs	r3, #0
 800c59c:	73fb      	strb	r3, [r7, #15]
 800c59e:	e016      	b.n	800c5ce <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c5a0:	7bfa      	ldrb	r2, [r7, #15]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	32de      	adds	r2, #222	@ 0xde
 800c5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5aa:	791a      	ldrb	r2, [r3, #4]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d108      	bne.n	800c5c8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c5b6:	7bfa      	ldrb	r2, [r7, #15]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	32de      	adds	r2, #222	@ 0xde
 800c5bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800c5c6:	e005      	b.n	800c5d4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	73fb      	strb	r3, [r7, #15]
 800c5ce:	7bfb      	ldrb	r3, [r7, #15]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d0e5      	beq.n	800c5a0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d016      	beq.n	800c60c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	4798      	blx	r3
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d109      	bne.n	800c604 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2206      	movs	r2, #6
 800c5f4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c5fc:	2103      	movs	r1, #3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c602:	e073      	b.n	800c6ec <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	220d      	movs	r2, #13
 800c608:	701a      	strb	r2, [r3, #0]
      break;
 800c60a:	e06f      	b.n	800c6ec <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	220d      	movs	r2, #13
 800c610:	701a      	strb	r2, [r3, #0]
      break;
 800c612:	e06b      	b.n	800c6ec <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d017      	beq.n	800c64e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	4798      	blx	r3
 800c62a:	4603      	mov	r3, r0
 800c62c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b00      	cmp	r3, #0
 800c634:	d103      	bne.n	800c63e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	220b      	movs	r2, #11
 800c63a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c63c:	e058      	b.n	800c6f0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800c63e:	7bbb      	ldrb	r3, [r7, #14]
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b02      	cmp	r3, #2
 800c644:	d154      	bne.n	800c6f0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	220d      	movs	r2, #13
 800c64a:	701a      	strb	r2, [r3, #0]
      break;
 800c64c:	e050      	b.n	800c6f0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	220d      	movs	r2, #13
 800c652:	701a      	strb	r2, [r3, #0]
      break;
 800c654:	e04c      	b.n	800c6f0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d049      	beq.n	800c6f4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c666:	695b      	ldr	r3, [r3, #20]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	4798      	blx	r3
      }
      break;
 800c66c:	e042      	b.n	800c6f4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff fd4a 	bl	800c110 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c682:	2b00      	cmp	r3, #0
 800c684:	d009      	beq.n	800c69a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d005      	beq.n	800c6b0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c6aa:	2105      	movs	r1, #5
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d107      	bne.n	800c6cc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7ff fe22 	bl	800c30e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c6ca:	e014      	b.n	800c6f6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f001 faf5 	bl	800dcbc <USBH_LL_Start>
      break;
 800c6d2:	e010      	b.n	800c6f6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c6d4:	bf00      	nop
 800c6d6:	e00e      	b.n	800c6f6 <USBH_Process+0x3c6>
      break;
 800c6d8:	bf00      	nop
 800c6da:	e00c      	b.n	800c6f6 <USBH_Process+0x3c6>
      break;
 800c6dc:	bf00      	nop
 800c6de:	e00a      	b.n	800c6f6 <USBH_Process+0x3c6>
    break;
 800c6e0:	bf00      	nop
 800c6e2:	e008      	b.n	800c6f6 <USBH_Process+0x3c6>
      break;
 800c6e4:	bf00      	nop
 800c6e6:	e006      	b.n	800c6f6 <USBH_Process+0x3c6>
      break;
 800c6e8:	bf00      	nop
 800c6ea:	e004      	b.n	800c6f6 <USBH_Process+0x3c6>
      break;
 800c6ec:	bf00      	nop
 800c6ee:	e002      	b.n	800c6f6 <USBH_Process+0x3c6>
      break;
 800c6f0:	bf00      	nop
 800c6f2:	e000      	b.n	800c6f6 <USBH_Process+0x3c6>
      break;
 800c6f4:	bf00      	nop
  }
  return USBH_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b088      	sub	sp, #32
 800c704:	af04      	add	r7, sp, #16
 800c706:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c708:	2301      	movs	r3, #1
 800c70a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c70c:	2301      	movs	r3, #1
 800c70e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	785b      	ldrb	r3, [r3, #1]
 800c714:	2b07      	cmp	r3, #7
 800c716:	f200 81bd 	bhi.w	800ca94 <USBH_HandleEnum+0x394>
 800c71a:	a201      	add	r2, pc, #4	@ (adr r2, 800c720 <USBH_HandleEnum+0x20>)
 800c71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c720:	0800c741 	.word	0x0800c741
 800c724:	0800c7fb 	.word	0x0800c7fb
 800c728:	0800c865 	.word	0x0800c865
 800c72c:	0800c8ef 	.word	0x0800c8ef
 800c730:	0800c959 	.word	0x0800c959
 800c734:	0800c9c9 	.word	0x0800c9c9
 800c738:	0800ca0f 	.word	0x0800ca0f
 800c73c:	0800ca55 	.word	0x0800ca55
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c740:	2108      	movs	r1, #8
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 fa4c 	bl	800cbe0 <USBH_Get_DevDesc>
 800c748:	4603      	mov	r3, r0
 800c74a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c74c:	7bbb      	ldrb	r3, [r7, #14]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d12e      	bne.n	800c7b0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	7919      	ldrb	r1, [r3, #4]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c776:	9202      	str	r2, [sp, #8]
 800c778:	2200      	movs	r2, #0
 800c77a:	9201      	str	r2, [sp, #4]
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	4603      	mov	r3, r0
 800c780:	2280      	movs	r2, #128	@ 0x80
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f001 f8b8 	bl	800d8f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	7959      	ldrb	r1, [r3, #5]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c79c:	9202      	str	r2, [sp, #8]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	9201      	str	r2, [sp, #4]
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f001 f8a5 	bl	800d8f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c7ae:	e173      	b.n	800ca98 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7b0:	7bbb      	ldrb	r3, [r7, #14]
 800c7b2:	2b03      	cmp	r3, #3
 800c7b4:	f040 8170 	bne.w	800ca98 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c7be:	3301      	adds	r3, #1
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d903      	bls.n	800c7da <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	220d      	movs	r2, #13
 800c7d6:	701a      	strb	r2, [r3, #0]
      break;
 800c7d8:	e15e      	b.n	800ca98 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	795b      	ldrb	r3, [r3, #5]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f001 f8d9 	bl	800d998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	791b      	ldrb	r3, [r3, #4]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f001 f8d3 	bl	800d998 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	701a      	strb	r2, [r3, #0]
      break;
 800c7f8:	e14e      	b.n	800ca98 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c7fa:	2112      	movs	r1, #18
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f9ef 	bl	800cbe0 <USBH_Get_DevDesc>
 800c802:	4603      	mov	r3, r0
 800c804:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c806:	7bbb      	ldrb	r3, [r7, #14]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d103      	bne.n	800c814 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2202      	movs	r2, #2
 800c810:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c812:	e143      	b.n	800ca9c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c814:	7bbb      	ldrb	r3, [r7, #14]
 800c816:	2b03      	cmp	r3, #3
 800c818:	f040 8140 	bne.w	800ca9c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c822:	3301      	adds	r3, #1
 800c824:	b2da      	uxtb	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c832:	2b03      	cmp	r3, #3
 800c834:	d903      	bls.n	800c83e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	220d      	movs	r2, #13
 800c83a:	701a      	strb	r2, [r3, #0]
      break;
 800c83c:	e12e      	b.n	800ca9c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	795b      	ldrb	r3, [r3, #5]
 800c842:	4619      	mov	r1, r3
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f001 f8a7 	bl	800d998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	791b      	ldrb	r3, [r3, #4]
 800c84e:	4619      	mov	r1, r3
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f001 f8a1 	bl	800d998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	701a      	strb	r2, [r3, #0]
      break;
 800c862:	e11b      	b.n	800ca9c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c864:	2101      	movs	r1, #1
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fa79 	bl	800cd5e <USBH_SetAddress>
 800c86c:	4603      	mov	r3, r0
 800c86e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c870:	7bbb      	ldrb	r3, [r7, #14]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d130      	bne.n	800c8d8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800c876:	2002      	movs	r0, #2
 800c878:	f001 fb87 	bl	800df8a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2203      	movs	r2, #3
 800c888:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	7919      	ldrb	r1, [r3, #4]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c89e:	9202      	str	r2, [sp, #8]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	9201      	str	r2, [sp, #4]
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2280      	movs	r2, #128	@ 0x80
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f001 f824 	bl	800d8f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	7959      	ldrb	r1, [r3, #5]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c8c4:	9202      	str	r2, [sp, #8]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	9201      	str	r2, [sp, #4]
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f001 f811 	bl	800d8f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c8d6:	e0e3      	b.n	800caa0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8d8:	7bbb      	ldrb	r3, [r7, #14]
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	f040 80e0 	bne.w	800caa0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	220d      	movs	r2, #13
 800c8e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	705a      	strb	r2, [r3, #1]
      break;
 800c8ec:	e0d8      	b.n	800caa0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c8ee:	2109      	movs	r1, #9
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f9a1 	bl	800cc38 <USBH_Get_CfgDesc>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c8fa:	7bbb      	ldrb	r3, [r7, #14]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d103      	bne.n	800c908 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2204      	movs	r2, #4
 800c904:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c906:	e0cd      	b.n	800caa4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c908:	7bbb      	ldrb	r3, [r7, #14]
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	f040 80ca 	bne.w	800caa4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c916:	3301      	adds	r3, #1
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c926:	2b03      	cmp	r3, #3
 800c928:	d903      	bls.n	800c932 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	220d      	movs	r2, #13
 800c92e:	701a      	strb	r2, [r3, #0]
      break;
 800c930:	e0b8      	b.n	800caa4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	795b      	ldrb	r3, [r3, #5]
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f001 f82d 	bl	800d998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	791b      	ldrb	r3, [r3, #4]
 800c942:	4619      	mov	r1, r3
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f001 f827 	bl	800d998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	701a      	strb	r2, [r3, #0]
      break;
 800c956:	e0a5      	b.n	800caa4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 f969 	bl	800cc38 <USBH_Get_CfgDesc>
 800c966:	4603      	mov	r3, r0
 800c968:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c96a:	7bbb      	ldrb	r3, [r7, #14]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d103      	bne.n	800c978 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2205      	movs	r2, #5
 800c974:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c976:	e097      	b.n	800caa8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c978:	7bbb      	ldrb	r3, [r7, #14]
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	f040 8094 	bne.w	800caa8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c986:	3301      	adds	r3, #1
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c996:	2b03      	cmp	r3, #3
 800c998:	d903      	bls.n	800c9a2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	220d      	movs	r2, #13
 800c99e:	701a      	strb	r2, [r3, #0]
      break;
 800c9a0:	e082      	b.n	800caa8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	795b      	ldrb	r3, [r3, #5]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fff5 	bl	800d998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	791b      	ldrb	r3, [r3, #4]
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 ffef 	bl	800d998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	701a      	strb	r2, [r3, #0]
      break;
 800c9c6:	e06f      	b.n	800caa8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d019      	beq.n	800ca06 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c9de:	23ff      	movs	r3, #255	@ 0xff
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 f953 	bl	800cc8c <USBH_Get_StringDesc>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c9ea:	7bbb      	ldrb	r3, [r7, #14]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d103      	bne.n	800c9f8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2206      	movs	r2, #6
 800c9f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c9f6:	e059      	b.n	800caac <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c9f8:	7bbb      	ldrb	r3, [r7, #14]
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d156      	bne.n	800caac <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2206      	movs	r2, #6
 800ca02:	705a      	strb	r2, [r3, #1]
      break;
 800ca04:	e052      	b.n	800caac <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2206      	movs	r2, #6
 800ca0a:	705a      	strb	r2, [r3, #1]
      break;
 800ca0c:	e04e      	b.n	800caac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d019      	beq.n	800ca4c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ca24:	23ff      	movs	r3, #255	@ 0xff
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f930 	bl	800cc8c <USBH_Get_StringDesc>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d103      	bne.n	800ca3e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2207      	movs	r2, #7
 800ca3a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ca3c:	e038      	b.n	800cab0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
 800ca40:	2b03      	cmp	r3, #3
 800ca42:	d135      	bne.n	800cab0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2207      	movs	r2, #7
 800ca48:	705a      	strb	r2, [r3, #1]
      break;
 800ca4a:	e031      	b.n	800cab0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2207      	movs	r2, #7
 800ca50:	705a      	strb	r2, [r3, #1]
      break;
 800ca52:	e02d      	b.n	800cab0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d017      	beq.n	800ca8e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ca6a:	23ff      	movs	r3, #255	@ 0xff
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f90d 	bl	800cc8c <USBH_Get_StringDesc>
 800ca72:	4603      	mov	r3, r0
 800ca74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ca76:	7bbb      	ldrb	r3, [r7, #14]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d102      	bne.n	800ca82 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ca80:	e018      	b.n	800cab4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca82:	7bbb      	ldrb	r3, [r7, #14]
 800ca84:	2b03      	cmp	r3, #3
 800ca86:	d115      	bne.n	800cab4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca8c:	e012      	b.n	800cab4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	73fb      	strb	r3, [r7, #15]
      break;
 800ca92:	e00f      	b.n	800cab4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ca94:	bf00      	nop
 800ca96:	e00e      	b.n	800cab6 <USBH_HandleEnum+0x3b6>
      break;
 800ca98:	bf00      	nop
 800ca9a:	e00c      	b.n	800cab6 <USBH_HandleEnum+0x3b6>
      break;
 800ca9c:	bf00      	nop
 800ca9e:	e00a      	b.n	800cab6 <USBH_HandleEnum+0x3b6>
      break;
 800caa0:	bf00      	nop
 800caa2:	e008      	b.n	800cab6 <USBH_HandleEnum+0x3b6>
      break;
 800caa4:	bf00      	nop
 800caa6:	e006      	b.n	800cab6 <USBH_HandleEnum+0x3b6>
      break;
 800caa8:	bf00      	nop
 800caaa:	e004      	b.n	800cab6 <USBH_HandleEnum+0x3b6>
      break;
 800caac:	bf00      	nop
 800caae:	e002      	b.n	800cab6 <USBH_HandleEnum+0x3b6>
      break;
 800cab0:	bf00      	nop
 800cab2:	e000      	b.n	800cab6 <USBH_HandleEnum+0x3b6>
      break;
 800cab4:	bf00      	nop
  }
  return Status;
 800cab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	683a      	ldr	r2, [r7, #0]
 800cace:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800cad2:	bf00      	nop
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800caec:	1c5a      	adds	r2, r3, #1
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f804 	bl	800cb02 <USBH_HandleSof>
}
 800cafa:	bf00      	nop
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b0b      	cmp	r3, #11
 800cb12:	d10a      	bne.n	800cb2a <USBH_HandleSof+0x28>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d005      	beq.n	800cb2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cb24:	699b      	ldr	r3, [r3, #24]
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	4798      	blx	r3
  }
}
 800cb2a:	bf00      	nop
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cb32:	b480      	push	{r7}
 800cb34:	b083      	sub	sp, #12
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800cb42:	bf00      	nop
}
 800cb44:	370c      	adds	r7, #12
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr

0800cb4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cb4e:	b480      	push	{r7}
 800cb50:	b083      	sub	sp, #12
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800cb5e:	bf00      	nop
}
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cb6a:	b480      	push	{r7}
 800cb6c:	b083      	sub	sp, #12
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2201      	movs	r2, #1
 800cb76:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f001 f89a 	bl	800dcf2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	791b      	ldrb	r3, [r3, #4]
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 fee7 	bl	800d998 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	795b      	ldrb	r3, [r3, #5]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 fee1 	bl	800d998 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cbd6:	2300      	movs	r3, #0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af02      	add	r7, sp, #8
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800cbec:	887b      	ldrh	r3, [r7, #2]
 800cbee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbf2:	d901      	bls.n	800cbf8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e01b      	b.n	800cc30 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cbfe:	887b      	ldrh	r3, [r7, #2]
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	4613      	mov	r3, r2
 800cc04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cc08:	2100      	movs	r1, #0
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f872 	bl	800ccf4 <USBH_GetDescriptor>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d109      	bne.n	800cc2e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cc20:	887a      	ldrh	r2, [r7, #2]
 800cc22:	4619      	mov	r1, r3
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 f929 	bl	800ce7c <USBH_ParseDevDesc>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	460b      	mov	r3, r1
 800cc42:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	331c      	adds	r3, #28
 800cc48:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800cc4a:	887b      	ldrh	r3, [r7, #2]
 800cc4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc50:	d901      	bls.n	800cc56 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cc52:	2303      	movs	r3, #3
 800cc54:	e016      	b.n	800cc84 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cc56:	887b      	ldrh	r3, [r7, #2]
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc60:	2100      	movs	r1, #0
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f846 	bl	800ccf4 <USBH_GetDescriptor>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d107      	bne.n	800cc82 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800cc72:	887b      	ldrh	r3, [r7, #2]
 800cc74:	461a      	mov	r2, r3
 800cc76:	68b9      	ldr	r1, [r7, #8]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f9af 	bl	800cfdc <USBH_ParseCfgDesc>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af02      	add	r7, sp, #8
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	607a      	str	r2, [r7, #4]
 800cc96:	461a      	mov	r2, r3
 800cc98:	460b      	mov	r3, r1
 800cc9a:	72fb      	strb	r3, [r7, #11]
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800cca0:	893b      	ldrh	r3, [r7, #8]
 800cca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cca6:	d802      	bhi.n	800ccae <USBH_Get_StringDesc+0x22>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d101      	bne.n	800ccb2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	e01c      	b.n	800ccec <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ccb2:	7afb      	ldrb	r3, [r7, #11]
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ccba:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ccc2:	893b      	ldrh	r3, [r7, #8]
 800ccc4:	9300      	str	r3, [sp, #0]
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	2100      	movs	r1, #0
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f000 f812 	bl	800ccf4 <USBH_GetDescriptor>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ccd4:	7dfb      	ldrb	r3, [r7, #23]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d107      	bne.n	800ccea <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cce0:	893a      	ldrh	r2, [r7, #8]
 800cce2:	6879      	ldr	r1, [r7, #4]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 fb8d 	bl	800d404 <USBH_ParseStringDesc>
  }

  return status;
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3718      	adds	r7, #24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	607b      	str	r3, [r7, #4]
 800ccfe:	460b      	mov	r3, r1
 800cd00:	72fb      	strb	r3, [r7, #11]
 800cd02:	4613      	mov	r3, r2
 800cd04:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	789b      	ldrb	r3, [r3, #2]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d11c      	bne.n	800cd48 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cd0e:	7afb      	ldrb	r3, [r7, #11]
 800cd10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2206      	movs	r2, #6
 800cd1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	893a      	ldrh	r2, [r7, #8]
 800cd24:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cd26:	893b      	ldrh	r3, [r7, #8]
 800cd28:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cd2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cd30:	d104      	bne.n	800cd3c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f240 4209 	movw	r2, #1033	@ 0x409
 800cd38:	829a      	strh	r2, [r3, #20]
 800cd3a:	e002      	b.n	800cd42 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	8b3a      	ldrh	r2, [r7, #24]
 800cd46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cd48:	8b3b      	ldrh	r3, [r7, #24]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f000 fba5 	bl	800d49e <USBH_CtlReq>
 800cd54:	4603      	mov	r3, r0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b082      	sub	sp, #8
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	460b      	mov	r3, r1
 800cd68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	789b      	ldrb	r3, [r3, #2]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d10f      	bne.n	800cd92 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2205      	movs	r2, #5
 800cd7c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cd7e:	78fb      	ldrb	r3, [r7, #3]
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cd92:	2200      	movs	r2, #0
 800cd94:	2100      	movs	r1, #0
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fb81 	bl	800d49e <USBH_CtlReq>
 800cd9c:	4603      	mov	r3, r0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b082      	sub	sp, #8
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	460b      	mov	r3, r1
 800cdb0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	789b      	ldrb	r3, [r3, #2]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d10e      	bne.n	800cdd8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2209      	movs	r2, #9
 800cdc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	887a      	ldrh	r2, [r7, #2]
 800cdca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cdd8:	2200      	movs	r2, #0
 800cdda:	2100      	movs	r1, #0
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 fb5e 	bl	800d49e <USBH_CtlReq>
 800cde2:	4603      	mov	r3, r0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	789b      	ldrb	r3, [r3, #2]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d10f      	bne.n	800ce20 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2203      	movs	r2, #3
 800ce0a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ce0c:	78fb      	ldrb	r3, [r7, #3]
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ce20:	2200      	movs	r2, #0
 800ce22:	2100      	movs	r1, #0
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fb3a 	bl	800d49e <USBH_CtlReq>
 800ce2a:	4603      	mov	r3, r0
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	789b      	ldrb	r3, [r3, #2]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d10f      	bne.n	800ce68 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ce5a:	78fb      	ldrb	r3, [r7, #3]
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fb16 	bl	800d49e <USBH_CtlReq>
 800ce72:	4603      	mov	r3, r0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b087      	sub	sp, #28
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	4613      	mov	r3, r2
 800ce88:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ce90:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800ce92:	2300      	movs	r3, #0
 800ce94:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800ce9c:	2302      	movs	r3, #2
 800ce9e:	e094      	b.n	800cfca <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	781a      	ldrb	r2, [r3, #0]
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	785a      	ldrb	r2, [r3, #1]
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	3302      	adds	r3, #2
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	3303      	adds	r3, #3
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	021b      	lsls	r3, r3, #8
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	4313      	orrs	r3, r2
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	791a      	ldrb	r2, [r3, #4]
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	795a      	ldrb	r2, [r3, #5]
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	799a      	ldrb	r2, [r3, #6]
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	79da      	ldrb	r2, [r3, #7]
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d004      	beq.n	800cefe <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d11b      	bne.n	800cf36 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	79db      	ldrb	r3, [r3, #7]
 800cf02:	2b20      	cmp	r3, #32
 800cf04:	dc0f      	bgt.n	800cf26 <USBH_ParseDevDesc+0xaa>
 800cf06:	2b08      	cmp	r3, #8
 800cf08:	db0f      	blt.n	800cf2a <USBH_ParseDevDesc+0xae>
 800cf0a:	3b08      	subs	r3, #8
 800cf0c:	4a32      	ldr	r2, [pc, #200]	@ (800cfd8 <USBH_ParseDevDesc+0x15c>)
 800cf0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf12:	f003 0301 	and.w	r3, r3, #1
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	bf14      	ite	ne
 800cf1a:	2301      	movne	r3, #1
 800cf1c:	2300      	moveq	r3, #0
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d106      	bne.n	800cf32 <USBH_ParseDevDesc+0xb6>
 800cf24:	e001      	b.n	800cf2a <USBH_ParseDevDesc+0xae>
 800cf26:	2b40      	cmp	r3, #64	@ 0x40
 800cf28:	d003      	beq.n	800cf32 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	2208      	movs	r2, #8
 800cf2e:	71da      	strb	r2, [r3, #7]
        break;
 800cf30:	e000      	b.n	800cf34 <USBH_ParseDevDesc+0xb8>
        break;
 800cf32:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800cf34:	e00e      	b.n	800cf54 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d107      	bne.n	800cf50 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	79db      	ldrb	r3, [r3, #7]
 800cf44:	2b08      	cmp	r3, #8
 800cf46:	d005      	beq.n	800cf54 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	2208      	movs	r2, #8
 800cf4c:	71da      	strb	r2, [r3, #7]
 800cf4e:	e001      	b.n	800cf54 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800cf50:	2303      	movs	r3, #3
 800cf52:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800cf54:	88fb      	ldrh	r3, [r7, #6]
 800cf56:	2b08      	cmp	r3, #8
 800cf58:	d936      	bls.n	800cfc8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	3308      	adds	r3, #8
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	461a      	mov	r2, r3
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	3309      	adds	r3, #9
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	021b      	lsls	r3, r3, #8
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	330a      	adds	r3, #10
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	330b      	adds	r3, #11
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	021b      	lsls	r3, r3, #8
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	4313      	orrs	r3, r2
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	330c      	adds	r3, #12
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	461a      	mov	r2, r3
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	330d      	adds	r3, #13
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	021b      	lsls	r3, r3, #8
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	7b9a      	ldrb	r2, [r3, #14]
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	7bda      	ldrb	r2, [r3, #15]
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	7c1a      	ldrb	r2, [r3, #16]
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	7c5a      	ldrb	r2, [r3, #17]
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800cfc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	371c      	adds	r7, #28
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	01000101 	.word	0x01000101

0800cfdc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08c      	sub	sp, #48	@ 0x30
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cff0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cff8:	2300      	movs	r3, #0
 800cffa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800cffe:	2300      	movs	r3, #0
 800d000:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d101      	bne.n	800d00e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d00a:	2302      	movs	r3, #2
 800d00c:	e0da      	b.n	800d1c4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	781a      	ldrb	r2, [r3, #0]
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	785a      	ldrb	r2, [r3, #1]
 800d01e:	6a3b      	ldr	r3, [r7, #32]
 800d020:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	3302      	adds	r3, #2
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	461a      	mov	r2, r3
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	3303      	adds	r3, #3
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	021b      	lsls	r3, r3, #8
 800d032:	b29b      	uxth	r3, r3
 800d034:	4313      	orrs	r3, r2
 800d036:	b29b      	uxth	r3, r3
 800d038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d03c:	bf28      	it	cs
 800d03e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d042:	b29a      	uxth	r2, r3
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	791a      	ldrb	r2, [r3, #4]
 800d04c:	6a3b      	ldr	r3, [r7, #32]
 800d04e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	795a      	ldrb	r2, [r3, #5]
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	799a      	ldrb	r2, [r3, #6]
 800d05c:	6a3b      	ldr	r3, [r7, #32]
 800d05e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	79da      	ldrb	r2, [r3, #7]
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	7a1a      	ldrb	r2, [r3, #8]
 800d06c:	6a3b      	ldr	r3, [r7, #32]
 800d06e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	2b09      	cmp	r3, #9
 800d076:	d002      	beq.n	800d07e <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d078:	6a3b      	ldr	r3, [r7, #32]
 800d07a:	2209      	movs	r2, #9
 800d07c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d07e:	88fb      	ldrh	r3, [r7, #6]
 800d080:	2b09      	cmp	r3, #9
 800d082:	f240 809d 	bls.w	800d1c0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d086:	2309      	movs	r3, #9
 800d088:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d08a:	2300      	movs	r3, #0
 800d08c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d08e:	e081      	b.n	800d194 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d090:	f107 0316 	add.w	r3, r7, #22
 800d094:	4619      	mov	r1, r3
 800d096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d098:	f000 f9e7 	bl	800d46a <USBH_GetNextDesc>
 800d09c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a0:	785b      	ldrb	r3, [r3, #1]
 800d0a2:	2b04      	cmp	r3, #4
 800d0a4:	d176      	bne.n	800d194 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b09      	cmp	r3, #9
 800d0ac:	d002      	beq.n	800d0b4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b0:	2209      	movs	r2, #9
 800d0b2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d0b8:	221a      	movs	r2, #26
 800d0ba:	fb02 f303 	mul.w	r3, r2, r3
 800d0be:	3308      	adds	r3, #8
 800d0c0:	6a3a      	ldr	r2, [r7, #32]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	3302      	adds	r3, #2
 800d0c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d0c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0ca:	69f8      	ldr	r0, [r7, #28]
 800d0cc:	f000 f87e 	bl	800d1cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d0da:	e043      	b.n	800d164 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d0dc:	f107 0316 	add.w	r3, r7, #22
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0e4:	f000 f9c1 	bl	800d46a <USBH_GetNextDesc>
 800d0e8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ec:	785b      	ldrb	r3, [r3, #1]
 800d0ee:	2b05      	cmp	r3, #5
 800d0f0:	d138      	bne.n	800d164 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	795b      	ldrb	r3, [r3, #5]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d113      	bne.n	800d122 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	d003      	beq.n	800d10a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	799b      	ldrb	r3, [r3, #6]
 800d106:	2b03      	cmp	r3, #3
 800d108:	d10b      	bne.n	800d122 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	79db      	ldrb	r3, [r3, #7]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10b      	bne.n	800d12a <USBH_ParseCfgDesc+0x14e>
 800d112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	2b09      	cmp	r3, #9
 800d118:	d007      	beq.n	800d12a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11c:	2209      	movs	r2, #9
 800d11e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d120:	e003      	b.n	800d12a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d124:	2207      	movs	r2, #7
 800d126:	701a      	strb	r2, [r3, #0]
 800d128:	e000      	b.n	800d12c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d12a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d12c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d130:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d134:	3201      	adds	r2, #1
 800d136:	00d2      	lsls	r2, r2, #3
 800d138:	211a      	movs	r1, #26
 800d13a:	fb01 f303 	mul.w	r3, r1, r3
 800d13e:	4413      	add	r3, r2
 800d140:	3308      	adds	r3, #8
 800d142:	6a3a      	ldr	r2, [r7, #32]
 800d144:	4413      	add	r3, r2
 800d146:	3304      	adds	r3, #4
 800d148:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d14a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d14c:	69b9      	ldr	r1, [r7, #24]
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f000 f870 	bl	800d234 <USBH_ParseEPDesc>
 800d154:	4603      	mov	r3, r0
 800d156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d15a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d15e:	3301      	adds	r3, #1
 800d160:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	791b      	ldrb	r3, [r3, #4]
 800d168:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d204      	bcs.n	800d17a <USBH_ParseCfgDesc+0x19e>
 800d170:	6a3b      	ldr	r3, [r7, #32]
 800d172:	885a      	ldrh	r2, [r3, #2]
 800d174:	8afb      	ldrh	r3, [r7, #22]
 800d176:	429a      	cmp	r2, r3
 800d178:	d8b0      	bhi.n	800d0dc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	791b      	ldrb	r3, [r3, #4]
 800d17e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d182:	429a      	cmp	r2, r3
 800d184:	d201      	bcs.n	800d18a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d186:	2303      	movs	r3, #3
 800d188:	e01c      	b.n	800d1c4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d18a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d18e:	3301      	adds	r3, #1
 800d190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d805      	bhi.n	800d1a8 <USBH_ParseCfgDesc+0x1cc>
 800d19c:	6a3b      	ldr	r3, [r7, #32]
 800d19e:	885a      	ldrh	r2, [r3, #2]
 800d1a0:	8afb      	ldrh	r3, [r7, #22]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	f63f af74 	bhi.w	800d090 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	791b      	ldrb	r3, [r3, #4]
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	bf28      	it	cs
 800d1b0:	2302      	movcs	r3, #2
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d201      	bcs.n	800d1c0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d1bc:	2303      	movs	r3, #3
 800d1be:	e001      	b.n	800d1c4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d1c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3730      	adds	r7, #48	@ 0x30
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	781a      	ldrb	r2, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	785a      	ldrb	r2, [r3, #1]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	789a      	ldrb	r2, [r3, #2]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	78da      	ldrb	r2, [r3, #3]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	bf28      	it	cs
 800d200:	2302      	movcs	r3, #2
 800d202:	b2da      	uxtb	r2, r3
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	795a      	ldrb	r2, [r3, #5]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	799a      	ldrb	r2, [r3, #6]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	79da      	ldrb	r2, [r3, #7]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	7a1a      	ldrb	r2, [r3, #8]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	721a      	strb	r2, [r3, #8]
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d234:	b480      	push	{r7}
 800d236:	b087      	sub	sp, #28
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	781a      	ldrb	r2, [r3, #0]
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	785a      	ldrb	r2, [r3, #1]
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	789a      	ldrb	r2, [r3, #2]
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	78da      	ldrb	r2, [r3, #3]
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3304      	adds	r3, #4
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	461a      	mov	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	3305      	adds	r3, #5
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	021b      	lsls	r3, r3, #8
 800d274:	b29b      	uxth	r3, r3
 800d276:	4313      	orrs	r3, r2
 800d278:	b29a      	uxth	r2, r3
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	799a      	ldrb	r2, [r3, #6]
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	889b      	ldrh	r3, [r3, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d009      	beq.n	800d2a2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d296:	d804      	bhi.n	800d2a2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d29c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2a0:	d901      	bls.n	800d2a6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d136      	bne.n	800d31e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	78db      	ldrb	r3, [r3, #3]
 800d2b4:	f003 0303 	and.w	r3, r3, #3
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	d108      	bne.n	800d2ce <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	889b      	ldrh	r3, [r3, #4]
 800d2c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2c4:	f240 8097 	bls.w	800d3f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d2c8:	2303      	movs	r3, #3
 800d2ca:	75fb      	strb	r3, [r7, #23]
 800d2cc:	e093      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	78db      	ldrb	r3, [r3, #3]
 800d2d2:	f003 0303 	and.w	r3, r3, #3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d107      	bne.n	800d2ea <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	889b      	ldrh	r3, [r3, #4]
 800d2de:	2b40      	cmp	r3, #64	@ 0x40
 800d2e0:	f240 8089 	bls.w	800d3f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	75fb      	strb	r3, [r7, #23]
 800d2e8:	e085      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	78db      	ldrb	r3, [r3, #3]
 800d2ee:	f003 0303 	and.w	r3, r3, #3
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d005      	beq.n	800d302 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	78db      	ldrb	r3, [r3, #3]
 800d2fa:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	d10a      	bne.n	800d318 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	799b      	ldrb	r3, [r3, #6]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d003      	beq.n	800d312 <USBH_ParseEPDesc+0xde>
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	799b      	ldrb	r3, [r3, #6]
 800d30e:	2b10      	cmp	r3, #16
 800d310:	d970      	bls.n	800d3f4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d312:	2303      	movs	r3, #3
 800d314:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d316:	e06d      	b.n	800d3f4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d318:	2303      	movs	r3, #3
 800d31a:	75fb      	strb	r3, [r7, #23]
 800d31c:	e06b      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d324:	2b01      	cmp	r3, #1
 800d326:	d13c      	bne.n	800d3a2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	78db      	ldrb	r3, [r3, #3]
 800d32c:	f003 0303 	and.w	r3, r3, #3
 800d330:	2b02      	cmp	r3, #2
 800d332:	d005      	beq.n	800d340 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	78db      	ldrb	r3, [r3, #3]
 800d338:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d106      	bne.n	800d34e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	889b      	ldrh	r3, [r3, #4]
 800d344:	2b40      	cmp	r3, #64	@ 0x40
 800d346:	d956      	bls.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d348:	2303      	movs	r3, #3
 800d34a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d34c:	e053      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	78db      	ldrb	r3, [r3, #3]
 800d352:	f003 0303 	and.w	r3, r3, #3
 800d356:	2b01      	cmp	r3, #1
 800d358:	d10e      	bne.n	800d378 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	799b      	ldrb	r3, [r3, #6]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d007      	beq.n	800d372 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d366:	2b10      	cmp	r3, #16
 800d368:	d803      	bhi.n	800d372 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d36e:	2b40      	cmp	r3, #64	@ 0x40
 800d370:	d941      	bls.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d372:	2303      	movs	r3, #3
 800d374:	75fb      	strb	r3, [r7, #23]
 800d376:	e03e      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	78db      	ldrb	r3, [r3, #3]
 800d37c:	f003 0303 	and.w	r3, r3, #3
 800d380:	2b03      	cmp	r3, #3
 800d382:	d10b      	bne.n	800d39c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	799b      	ldrb	r3, [r3, #6]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d004      	beq.n	800d396 <USBH_ParseEPDesc+0x162>
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	889b      	ldrh	r3, [r3, #4]
 800d390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d394:	d32f      	bcc.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d396:	2303      	movs	r3, #3
 800d398:	75fb      	strb	r3, [r7, #23]
 800d39a:	e02c      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d39c:	2303      	movs	r3, #3
 800d39e:	75fb      	strb	r3, [r7, #23]
 800d3a0:	e029      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d120      	bne.n	800d3ee <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	78db      	ldrb	r3, [r3, #3]
 800d3b0:	f003 0303 	and.w	r3, r3, #3
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d106      	bne.n	800d3c6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	889b      	ldrh	r3, [r3, #4]
 800d3bc:	2b08      	cmp	r3, #8
 800d3be:	d01a      	beq.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	75fb      	strb	r3, [r7, #23]
 800d3c4:	e017      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	78db      	ldrb	r3, [r3, #3]
 800d3ca:	f003 0303 	and.w	r3, r3, #3
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	d10a      	bne.n	800d3e8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	799b      	ldrb	r3, [r3, #6]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d003      	beq.n	800d3e2 <USBH_ParseEPDesc+0x1ae>
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	889b      	ldrh	r3, [r3, #4]
 800d3de:	2b08      	cmp	r3, #8
 800d3e0:	d909      	bls.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	75fb      	strb	r3, [r7, #23]
 800d3e6:	e006      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	75fb      	strb	r3, [r7, #23]
 800d3ec:	e003      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	75fb      	strb	r3, [r7, #23]
 800d3f2:	e000      	b.n	800d3f6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d3f4:	bf00      	nop
  }

  return status;
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	371c      	adds	r7, #28
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d404:	b480      	push	{r7}
 800d406:	b087      	sub	sp, #28
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	4613      	mov	r3, r2
 800d410:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	3301      	adds	r3, #1
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	2b03      	cmp	r3, #3
 800d41a:	d120      	bne.n	800d45e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	1e9a      	subs	r2, r3, #2
 800d422:	88fb      	ldrh	r3, [r7, #6]
 800d424:	4293      	cmp	r3, r2
 800d426:	bf28      	it	cs
 800d428:	4613      	movcs	r3, r2
 800d42a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	3302      	adds	r3, #2
 800d430:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d432:	2300      	movs	r3, #0
 800d434:	82fb      	strh	r3, [r7, #22]
 800d436:	e00b      	b.n	800d450 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d438:	8afb      	ldrh	r3, [r7, #22]
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	4413      	add	r3, r2
 800d43e:	781a      	ldrb	r2, [r3, #0]
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	3301      	adds	r3, #1
 800d448:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d44a:	8afb      	ldrh	r3, [r7, #22]
 800d44c:	3302      	adds	r3, #2
 800d44e:	82fb      	strh	r3, [r7, #22]
 800d450:	8afa      	ldrh	r2, [r7, #22]
 800d452:	8abb      	ldrh	r3, [r7, #20]
 800d454:	429a      	cmp	r2, r3
 800d456:	d3ef      	bcc.n	800d438 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	2200      	movs	r2, #0
 800d45c:	701a      	strb	r2, [r3, #0]
  }
}
 800d45e:	bf00      	nop
 800d460:	371c      	adds	r7, #28
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr

0800d46a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d46a:	b480      	push	{r7}
 800d46c:	b085      	sub	sp, #20
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
 800d472:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	881b      	ldrh	r3, [r3, #0]
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	7812      	ldrb	r2, [r2, #0]
 800d47c:	4413      	add	r3, r2
 800d47e:	b29a      	uxth	r2, r3
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4413      	add	r3, r2
 800d48e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d490:	68fb      	ldr	r3, [r7, #12]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3714      	adds	r7, #20
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b086      	sub	sp, #24
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	60f8      	str	r0, [r7, #12]
 800d4a6:	60b9      	str	r1, [r7, #8]
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	789b      	ldrb	r3, [r3, #2]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d002      	beq.n	800d4be <USBH_CtlReq+0x20>
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d00f      	beq.n	800d4dc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d4bc:	e027      	b.n	800d50e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	88fa      	ldrh	r2, [r7, #6]
 800d4c8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	75fb      	strb	r3, [r7, #23]
      break;
 800d4da:	e018      	b.n	800d50e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f000 f81b 	bl	800d518 <USBH_HandleControl>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d4e6:	7dfb      	ldrb	r3, [r7, #23]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d002      	beq.n	800d4f2 <USBH_CtlReq+0x54>
 800d4ec:	7dfb      	ldrb	r3, [r7, #23]
 800d4ee:	2b03      	cmp	r3, #3
 800d4f0:	d106      	bne.n	800d500 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	761a      	strb	r2, [r3, #24]
      break;
 800d4fe:	e005      	b.n	800d50c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d500:	7dfb      	ldrb	r3, [r7, #23]
 800d502:	2b02      	cmp	r3, #2
 800d504:	d102      	bne.n	800d50c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2201      	movs	r2, #1
 800d50a:	709a      	strb	r2, [r3, #2]
      break;
 800d50c:	bf00      	nop
  }
  return status;
 800d50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3718      	adds	r7, #24
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b086      	sub	sp, #24
 800d51c:	af02      	add	r7, sp, #8
 800d51e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d520:	2301      	movs	r3, #1
 800d522:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d524:	2300      	movs	r3, #0
 800d526:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	7e1b      	ldrb	r3, [r3, #24]
 800d52c:	3b01      	subs	r3, #1
 800d52e:	2b0a      	cmp	r3, #10
 800d530:	f200 8156 	bhi.w	800d7e0 <USBH_HandleControl+0x2c8>
 800d534:	a201      	add	r2, pc, #4	@ (adr r2, 800d53c <USBH_HandleControl+0x24>)
 800d536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d53a:	bf00      	nop
 800d53c:	0800d569 	.word	0x0800d569
 800d540:	0800d583 	.word	0x0800d583
 800d544:	0800d5ed 	.word	0x0800d5ed
 800d548:	0800d613 	.word	0x0800d613
 800d54c:	0800d64b 	.word	0x0800d64b
 800d550:	0800d675 	.word	0x0800d675
 800d554:	0800d6c7 	.word	0x0800d6c7
 800d558:	0800d6e9 	.word	0x0800d6e9
 800d55c:	0800d725 	.word	0x0800d725
 800d560:	0800d74b 	.word	0x0800d74b
 800d564:	0800d789 	.word	0x0800d789
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f103 0110 	add.w	r1, r3, #16
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	795b      	ldrb	r3, [r3, #5]
 800d572:	461a      	mov	r2, r3
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f943 	bl	800d800 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2202      	movs	r2, #2
 800d57e:	761a      	strb	r2, [r3, #24]
      break;
 800d580:	e139      	b.n	800d7f6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	795b      	ldrb	r3, [r3, #5]
 800d586:	4619      	mov	r1, r3
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 fca1 	bl	800ded0 <USBH_LL_GetURBState>
 800d58e:	4603      	mov	r3, r0
 800d590:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d592:	7bbb      	ldrb	r3, [r7, #14]
 800d594:	2b01      	cmp	r3, #1
 800d596:	d11e      	bne.n	800d5d6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	7c1b      	ldrb	r3, [r3, #16]
 800d59c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d5a0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	8adb      	ldrh	r3, [r3, #22]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00a      	beq.n	800d5c0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d5aa:	7b7b      	ldrb	r3, [r7, #13]
 800d5ac:	2b80      	cmp	r3, #128	@ 0x80
 800d5ae:	d103      	bne.n	800d5b8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2203      	movs	r2, #3
 800d5b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d5b6:	e115      	b.n	800d7e4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2205      	movs	r2, #5
 800d5bc:	761a      	strb	r2, [r3, #24]
      break;
 800d5be:	e111      	b.n	800d7e4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d5c0:	7b7b      	ldrb	r3, [r7, #13]
 800d5c2:	2b80      	cmp	r3, #128	@ 0x80
 800d5c4:	d103      	bne.n	800d5ce <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2209      	movs	r2, #9
 800d5ca:	761a      	strb	r2, [r3, #24]
      break;
 800d5cc:	e10a      	b.n	800d7e4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2207      	movs	r2, #7
 800d5d2:	761a      	strb	r2, [r3, #24]
      break;
 800d5d4:	e106      	b.n	800d7e4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d5d6:	7bbb      	ldrb	r3, [r7, #14]
 800d5d8:	2b04      	cmp	r3, #4
 800d5da:	d003      	beq.n	800d5e4 <USBH_HandleControl+0xcc>
 800d5dc:	7bbb      	ldrb	r3, [r7, #14]
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	f040 8100 	bne.w	800d7e4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	220b      	movs	r2, #11
 800d5e8:	761a      	strb	r2, [r3, #24]
      break;
 800d5ea:	e0fb      	b.n	800d7e4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6899      	ldr	r1, [r3, #8]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	899a      	ldrh	r2, [r3, #12]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	791b      	ldrb	r3, [r3, #4]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 f93a 	bl	800d87e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2204      	movs	r2, #4
 800d60e:	761a      	strb	r2, [r3, #24]
      break;
 800d610:	e0f1      	b.n	800d7f6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	791b      	ldrb	r3, [r3, #4]
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 fc59 	bl	800ded0 <USBH_LL_GetURBState>
 800d61e:	4603      	mov	r3, r0
 800d620:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d622:	7bbb      	ldrb	r3, [r7, #14]
 800d624:	2b01      	cmp	r3, #1
 800d626:	d102      	bne.n	800d62e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2209      	movs	r2, #9
 800d62c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d62e:	7bbb      	ldrb	r3, [r7, #14]
 800d630:	2b05      	cmp	r3, #5
 800d632:	d102      	bne.n	800d63a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d634:	2303      	movs	r3, #3
 800d636:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d638:	e0d6      	b.n	800d7e8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d63a:	7bbb      	ldrb	r3, [r7, #14]
 800d63c:	2b04      	cmp	r3, #4
 800d63e:	f040 80d3 	bne.w	800d7e8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	220b      	movs	r2, #11
 800d646:	761a      	strb	r2, [r3, #24]
      break;
 800d648:	e0ce      	b.n	800d7e8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6899      	ldr	r1, [r3, #8]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	899a      	ldrh	r2, [r3, #12]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	795b      	ldrb	r3, [r3, #5]
 800d656:	2001      	movs	r0, #1
 800d658:	9000      	str	r0, [sp, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f8ea 	bl	800d834 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d666:	b29a      	uxth	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2206      	movs	r2, #6
 800d670:	761a      	strb	r2, [r3, #24]
      break;
 800d672:	e0c0      	b.n	800d7f6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	795b      	ldrb	r3, [r3, #5]
 800d678:	4619      	mov	r1, r3
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fc28 	bl	800ded0 <USBH_LL_GetURBState>
 800d680:	4603      	mov	r3, r0
 800d682:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d684:	7bbb      	ldrb	r3, [r7, #14]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d103      	bne.n	800d692 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2207      	movs	r2, #7
 800d68e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d690:	e0ac      	b.n	800d7ec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d692:	7bbb      	ldrb	r3, [r7, #14]
 800d694:	2b05      	cmp	r3, #5
 800d696:	d105      	bne.n	800d6a4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	220c      	movs	r2, #12
 800d69c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d69e:	2303      	movs	r3, #3
 800d6a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d6a2:	e0a3      	b.n	800d7ec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d6a4:	7bbb      	ldrb	r3, [r7, #14]
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	d103      	bne.n	800d6b2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2205      	movs	r2, #5
 800d6ae:	761a      	strb	r2, [r3, #24]
      break;
 800d6b0:	e09c      	b.n	800d7ec <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d6b2:	7bbb      	ldrb	r3, [r7, #14]
 800d6b4:	2b04      	cmp	r3, #4
 800d6b6:	f040 8099 	bne.w	800d7ec <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	220b      	movs	r2, #11
 800d6be:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	73fb      	strb	r3, [r7, #15]
      break;
 800d6c4:	e092      	b.n	800d7ec <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	791b      	ldrb	r3, [r3, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f8d5 	bl	800d87e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2208      	movs	r2, #8
 800d6e4:	761a      	strb	r2, [r3, #24]

      break;
 800d6e6:	e086      	b.n	800d7f6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	791b      	ldrb	r3, [r3, #4]
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 fbee 	bl	800ded0 <USBH_LL_GetURBState>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d6f8:	7bbb      	ldrb	r3, [r7, #14]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d105      	bne.n	800d70a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	220d      	movs	r2, #13
 800d702:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d708:	e072      	b.n	800d7f0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d70a:	7bbb      	ldrb	r3, [r7, #14]
 800d70c:	2b04      	cmp	r3, #4
 800d70e:	d103      	bne.n	800d718 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	220b      	movs	r2, #11
 800d714:	761a      	strb	r2, [r3, #24]
      break;
 800d716:	e06b      	b.n	800d7f0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d718:	7bbb      	ldrb	r3, [r7, #14]
 800d71a:	2b05      	cmp	r3, #5
 800d71c:	d168      	bne.n	800d7f0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d71e:	2303      	movs	r3, #3
 800d720:	73fb      	strb	r3, [r7, #15]
      break;
 800d722:	e065      	b.n	800d7f0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	795b      	ldrb	r3, [r3, #5]
 800d728:	2201      	movs	r2, #1
 800d72a:	9200      	str	r2, [sp, #0]
 800d72c:	2200      	movs	r2, #0
 800d72e:	2100      	movs	r1, #0
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 f87f 	bl	800d834 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	220a      	movs	r2, #10
 800d746:	761a      	strb	r2, [r3, #24]
      break;
 800d748:	e055      	b.n	800d7f6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	795b      	ldrb	r3, [r3, #5]
 800d74e:	4619      	mov	r1, r3
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fbbd 	bl	800ded0 <USBH_LL_GetURBState>
 800d756:	4603      	mov	r3, r0
 800d758:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d75a:	7bbb      	ldrb	r3, [r7, #14]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d105      	bne.n	800d76c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d760:	2300      	movs	r3, #0
 800d762:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	220d      	movs	r2, #13
 800d768:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d76a:	e043      	b.n	800d7f4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	2b02      	cmp	r3, #2
 800d770:	d103      	bne.n	800d77a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2209      	movs	r2, #9
 800d776:	761a      	strb	r2, [r3, #24]
      break;
 800d778:	e03c      	b.n	800d7f4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d77a:	7bbb      	ldrb	r3, [r7, #14]
 800d77c:	2b04      	cmp	r3, #4
 800d77e:	d139      	bne.n	800d7f4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	220b      	movs	r2, #11
 800d784:	761a      	strb	r2, [r3, #24]
      break;
 800d786:	e035      	b.n	800d7f4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	7e5b      	ldrb	r3, [r3, #25]
 800d78c:	3301      	adds	r3, #1
 800d78e:	b2da      	uxtb	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	765a      	strb	r2, [r3, #25]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	7e5b      	ldrb	r3, [r3, #25]
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d806      	bhi.n	800d7aa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d7a8:	e025      	b.n	800d7f6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d7b0:	2106      	movs	r1, #6
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	795b      	ldrb	r3, [r3, #5]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 f8e8 	bl	800d998 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	791b      	ldrb	r3, [r3, #4]
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f8e2 	bl	800d998 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d7da:	2302      	movs	r3, #2
 800d7dc:	73fb      	strb	r3, [r7, #15]
      break;
 800d7de:	e00a      	b.n	800d7f6 <USBH_HandleControl+0x2de>

    default:
      break;
 800d7e0:	bf00      	nop
 800d7e2:	e008      	b.n	800d7f6 <USBH_HandleControl+0x2de>
      break;
 800d7e4:	bf00      	nop
 800d7e6:	e006      	b.n	800d7f6 <USBH_HandleControl+0x2de>
      break;
 800d7e8:	bf00      	nop
 800d7ea:	e004      	b.n	800d7f6 <USBH_HandleControl+0x2de>
      break;
 800d7ec:	bf00      	nop
 800d7ee:	e002      	b.n	800d7f6 <USBH_HandleControl+0x2de>
      break;
 800d7f0:	bf00      	nop
 800d7f2:	e000      	b.n	800d7f6 <USBH_HandleControl+0x2de>
      break;
 800d7f4:	bf00      	nop
  }

  return status;
 800d7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af04      	add	r7, sp, #16
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	4613      	mov	r3, r2
 800d80c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d80e:	79f9      	ldrb	r1, [r7, #7]
 800d810:	2300      	movs	r3, #0
 800d812:	9303      	str	r3, [sp, #12]
 800d814:	2308      	movs	r3, #8
 800d816:	9302      	str	r3, [sp, #8]
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	2300      	movs	r3, #0
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	2300      	movs	r3, #0
 800d822:	2200      	movs	r2, #0
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f000 fb22 	bl	800de6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af04      	add	r7, sp, #16
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	4611      	mov	r1, r2
 800d840:	461a      	mov	r2, r3
 800d842:	460b      	mov	r3, r1
 800d844:	80fb      	strh	r3, [r7, #6]
 800d846:	4613      	mov	r3, r2
 800d848:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d850:	2b00      	cmp	r3, #0
 800d852:	d001      	beq.n	800d858 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d854:	2300      	movs	r3, #0
 800d856:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d858:	7979      	ldrb	r1, [r7, #5]
 800d85a:	7e3b      	ldrb	r3, [r7, #24]
 800d85c:	9303      	str	r3, [sp, #12]
 800d85e:	88fb      	ldrh	r3, [r7, #6]
 800d860:	9302      	str	r3, [sp, #8]
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	9301      	str	r3, [sp, #4]
 800d866:	2301      	movs	r3, #1
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	2300      	movs	r3, #0
 800d86c:	2200      	movs	r2, #0
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	f000 fafd 	bl	800de6e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b088      	sub	sp, #32
 800d882:	af04      	add	r7, sp, #16
 800d884:	60f8      	str	r0, [r7, #12]
 800d886:	60b9      	str	r1, [r7, #8]
 800d888:	4611      	mov	r1, r2
 800d88a:	461a      	mov	r2, r3
 800d88c:	460b      	mov	r3, r1
 800d88e:	80fb      	strh	r3, [r7, #6]
 800d890:	4613      	mov	r3, r2
 800d892:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d894:	7979      	ldrb	r1, [r7, #5]
 800d896:	2300      	movs	r3, #0
 800d898:	9303      	str	r3, [sp, #12]
 800d89a:	88fb      	ldrh	r3, [r7, #6]
 800d89c:	9302      	str	r3, [sp, #8]
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	9301      	str	r3, [sp, #4]
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	9300      	str	r3, [sp, #0]
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	f000 fadf 	bl	800de6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d8b0:	2300      	movs	r3, #0

}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b088      	sub	sp, #32
 800d8be:	af04      	add	r7, sp, #16
 800d8c0:	60f8      	str	r0, [r7, #12]
 800d8c2:	60b9      	str	r1, [r7, #8]
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	71fb      	strb	r3, [r7, #7]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d8d0:	79fb      	ldrb	r3, [r7, #7]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	79b9      	ldrb	r1, [r7, #6]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	9203      	str	r2, [sp, #12]
 800d8da:	9302      	str	r3, [sp, #8]
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	2303      	movs	r3, #3
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	f000 fac0 	bl	800de6e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af04      	add	r7, sp, #16
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	4608      	mov	r0, r1
 800d902:	4611      	mov	r1, r2
 800d904:	461a      	mov	r2, r3
 800d906:	4603      	mov	r3, r0
 800d908:	70fb      	strb	r3, [r7, #3]
 800d90a:	460b      	mov	r3, r1
 800d90c:	70bb      	strb	r3, [r7, #2]
 800d90e:	4613      	mov	r3, r2
 800d910:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d912:	7878      	ldrb	r0, [r7, #1]
 800d914:	78ba      	ldrb	r2, [r7, #2]
 800d916:	78f9      	ldrb	r1, [r7, #3]
 800d918:	8b3b      	ldrh	r3, [r7, #24]
 800d91a:	9302      	str	r3, [sp, #8]
 800d91c:	7d3b      	ldrb	r3, [r7, #20]
 800d91e:	9301      	str	r3, [sp, #4]
 800d920:	7c3b      	ldrb	r3, [r7, #16]
 800d922:	9300      	str	r3, [sp, #0]
 800d924:	4603      	mov	r3, r0
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 fa53 	bl	800ddd2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	460b      	mov	r3, r1
 800d940:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d942:	78fb      	ldrb	r3, [r7, #3]
 800d944:	4619      	mov	r1, r3
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fa72 	bl	800de30 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	460b      	mov	r3, r1
 800d960:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 f836 	bl	800d9d4 <USBH_GetFreePipe>
 800d968:	4603      	mov	r3, r0
 800d96a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d96c:	89fb      	ldrh	r3, [r7, #14]
 800d96e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d972:	4293      	cmp	r3, r2
 800d974:	d00a      	beq.n	800d98c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d976:	78fa      	ldrb	r2, [r7, #3]
 800d978:	89fb      	ldrh	r3, [r7, #14]
 800d97a:	f003 030f 	and.w	r3, r3, #15
 800d97e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d982:	6879      	ldr	r1, [r7, #4]
 800d984:	33e0      	adds	r3, #224	@ 0xe0
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	440b      	add	r3, r1
 800d98a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d98c:	89fb      	ldrh	r3, [r7, #14]
 800d98e:	b2db      	uxtb	r3, r3
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d9a4:	78fb      	ldrb	r3, [r7, #3]
 800d9a6:	2b0f      	cmp	r3, #15
 800d9a8:	d80d      	bhi.n	800d9c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d9aa:	78fb      	ldrb	r3, [r7, #3]
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	33e0      	adds	r3, #224	@ 0xe0
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	4413      	add	r3, r2
 800d9b4:	685a      	ldr	r2, [r3, #4]
 800d9b6:	78fb      	ldrb	r3, [r7, #3]
 800d9b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d9bc:	6879      	ldr	r1, [r7, #4]
 800d9be:	33e0      	adds	r3, #224	@ 0xe0
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	440b      	add	r3, r1
 800d9c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	73fb      	strb	r3, [r7, #15]
 800d9e4:	e00f      	b.n	800da06 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d9e6:	7bfb      	ldrb	r3, [r7, #15]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	33e0      	adds	r3, #224	@ 0xe0
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	4413      	add	r3, r2
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d102      	bne.n	800da00 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	e007      	b.n	800da10 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800da00:	7bfb      	ldrb	r3, [r7, #15]
 800da02:	3301      	adds	r3, #1
 800da04:	73fb      	strb	r3, [r7, #15]
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	2b0f      	cmp	r3, #15
 800da0a:	d9ec      	bls.n	800d9e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800da0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800da10:	4618      	mov	r0, r3
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800da20:	2201      	movs	r2, #1
 800da22:	490e      	ldr	r1, [pc, #56]	@ (800da5c <MX_USB_HOST_Init+0x40>)
 800da24:	480e      	ldr	r0, [pc, #56]	@ (800da60 <MX_USB_HOST_Init+0x44>)
 800da26:	f7fe fb39 	bl	800c09c <USBH_Init>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d001      	beq.n	800da34 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800da30:	f7f3 ff74 	bl	800191c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800da34:	490b      	ldr	r1, [pc, #44]	@ (800da64 <MX_USB_HOST_Init+0x48>)
 800da36:	480a      	ldr	r0, [pc, #40]	@ (800da60 <MX_USB_HOST_Init+0x44>)
 800da38:	f7fe fbdd 	bl	800c1f6 <USBH_RegisterClass>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d001      	beq.n	800da46 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800da42:	f7f3 ff6b 	bl	800191c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800da46:	4806      	ldr	r0, [pc, #24]	@ (800da60 <MX_USB_HOST_Init+0x44>)
 800da48:	f7fe fc61 	bl	800c30e <USBH_Start>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d001      	beq.n	800da56 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800da52:	f7f3 ff63 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800da56:	bf00      	nop
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	0800da7d 	.word	0x0800da7d
 800da60:	20000be0 	.word	0x20000be0
 800da64:	2000000c 	.word	0x2000000c

0800da68 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800da6c:	4802      	ldr	r0, [pc, #8]	@ (800da78 <MX_USB_HOST_Process+0x10>)
 800da6e:	f7fe fc5f 	bl	800c330 <USBH_Process>
}
 800da72:	bf00      	nop
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	20000be0 	.word	0x20000be0

0800da7c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	460b      	mov	r3, r1
 800da86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800da88:	78fb      	ldrb	r3, [r7, #3]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	2b04      	cmp	r3, #4
 800da8e:	d819      	bhi.n	800dac4 <USBH_UserProcess+0x48>
 800da90:	a201      	add	r2, pc, #4	@ (adr r2, 800da98 <USBH_UserProcess+0x1c>)
 800da92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da96:	bf00      	nop
 800da98:	0800dac5 	.word	0x0800dac5
 800da9c:	0800dab5 	.word	0x0800dab5
 800daa0:	0800dac5 	.word	0x0800dac5
 800daa4:	0800dabd 	.word	0x0800dabd
 800daa8:	0800daad 	.word	0x0800daad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800daac:	4b09      	ldr	r3, [pc, #36]	@ (800dad4 <USBH_UserProcess+0x58>)
 800daae:	2203      	movs	r2, #3
 800dab0:	701a      	strb	r2, [r3, #0]
  break;
 800dab2:	e008      	b.n	800dac6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dab4:	4b07      	ldr	r3, [pc, #28]	@ (800dad4 <USBH_UserProcess+0x58>)
 800dab6:	2202      	movs	r2, #2
 800dab8:	701a      	strb	r2, [r3, #0]
  break;
 800daba:	e004      	b.n	800dac6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dabc:	4b05      	ldr	r3, [pc, #20]	@ (800dad4 <USBH_UserProcess+0x58>)
 800dabe:	2201      	movs	r2, #1
 800dac0:	701a      	strb	r2, [r3, #0]
  break;
 800dac2:	e000      	b.n	800dac6 <USBH_UserProcess+0x4a>

  default:
  break;
 800dac4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dac6:	bf00      	nop
 800dac8:	370c      	adds	r7, #12
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	20000fb8 	.word	0x20000fb8

0800dad8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b08a      	sub	sp, #40	@ 0x28
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dae0:	f107 0314 	add.w	r3, r7, #20
 800dae4:	2200      	movs	r2, #0
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	605a      	str	r2, [r3, #4]
 800daea:	609a      	str	r2, [r3, #8]
 800daec:	60da      	str	r2, [r3, #12]
 800daee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800daf8:	d147      	bne.n	800db8a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dafa:	2300      	movs	r3, #0
 800dafc:	613b      	str	r3, [r7, #16]
 800dafe:	4b25      	ldr	r3, [pc, #148]	@ (800db94 <HAL_HCD_MspInit+0xbc>)
 800db00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db02:	4a24      	ldr	r2, [pc, #144]	@ (800db94 <HAL_HCD_MspInit+0xbc>)
 800db04:	f043 0301 	orr.w	r3, r3, #1
 800db08:	6313      	str	r3, [r2, #48]	@ 0x30
 800db0a:	4b22      	ldr	r3, [pc, #136]	@ (800db94 <HAL_HCD_MspInit+0xbc>)
 800db0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	613b      	str	r3, [r7, #16]
 800db14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800db16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800db1c:	2300      	movs	r3, #0
 800db1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db20:	2300      	movs	r3, #0
 800db22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db24:	f107 0314 	add.w	r3, r7, #20
 800db28:	4619      	mov	r1, r3
 800db2a:	481b      	ldr	r0, [pc, #108]	@ (800db98 <HAL_HCD_MspInit+0xc0>)
 800db2c:	f7f6 fb2a 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800db30:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800db34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db36:	2302      	movs	r3, #2
 800db38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db3e:	2303      	movs	r3, #3
 800db40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800db42:	230a      	movs	r3, #10
 800db44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db46:	f107 0314 	add.w	r3, r7, #20
 800db4a:	4619      	mov	r1, r3
 800db4c:	4812      	ldr	r0, [pc, #72]	@ (800db98 <HAL_HCD_MspInit+0xc0>)
 800db4e:	f7f6 fb19 	bl	8004184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800db52:	4b10      	ldr	r3, [pc, #64]	@ (800db94 <HAL_HCD_MspInit+0xbc>)
 800db54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db56:	4a0f      	ldr	r2, [pc, #60]	@ (800db94 <HAL_HCD_MspInit+0xbc>)
 800db58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db5c:	6353      	str	r3, [r2, #52]	@ 0x34
 800db5e:	2300      	movs	r3, #0
 800db60:	60fb      	str	r3, [r7, #12]
 800db62:	4b0c      	ldr	r3, [pc, #48]	@ (800db94 <HAL_HCD_MspInit+0xbc>)
 800db64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db66:	4a0b      	ldr	r2, [pc, #44]	@ (800db94 <HAL_HCD_MspInit+0xbc>)
 800db68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800db6c:	6453      	str	r3, [r2, #68]	@ 0x44
 800db6e:	4b09      	ldr	r3, [pc, #36]	@ (800db94 <HAL_HCD_MspInit+0xbc>)
 800db70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db76:	60fb      	str	r3, [r7, #12]
 800db78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800db7a:	2200      	movs	r2, #0
 800db7c:	2100      	movs	r1, #0
 800db7e:	2043      	movs	r0, #67	@ 0x43
 800db80:	f7f5 fc81 	bl	8003486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800db84:	2043      	movs	r0, #67	@ 0x43
 800db86:	f7f5 fc9a 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800db8a:	bf00      	nop
 800db8c:	3728      	adds	r7, #40	@ 0x28
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	40023800 	.word	0x40023800
 800db98:	40020000 	.word	0x40020000

0800db9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fe ff97 	bl	800cade <USBH_LL_IncTimer>
}
 800dbb0:	bf00      	nop
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fe ffcf 	bl	800cb6a <USBH_LL_Connect>
}
 800dbcc:	bf00      	nop
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fe ffd8 	bl	800cb98 <USBH_LL_Disconnect>
}
 800dbe8:	bf00      	nop
 800dbea:	3708      	adds	r7, #8
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	70fb      	strb	r3, [r7, #3]
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dc00:	bf00      	nop
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe ff89 	bl	800cb32 <USBH_LL_PortEnabled>
}
 800dc20:	bf00      	nop
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fe ff89 	bl	800cb4e <USBH_LL_PortDisabled>
}
 800dc3c:	bf00      	nop
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d12a      	bne.n	800dcac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800dc56:	4a18      	ldr	r2, [pc, #96]	@ (800dcb8 <USBH_LL_Init+0x74>)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	4a15      	ldr	r2, [pc, #84]	@ (800dcb8 <USBH_LL_Init+0x74>)
 800dc62:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc66:	4b14      	ldr	r3, [pc, #80]	@ (800dcb8 <USBH_LL_Init+0x74>)
 800dc68:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dc6c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800dc6e:	4b12      	ldr	r3, [pc, #72]	@ (800dcb8 <USBH_LL_Init+0x74>)
 800dc70:	2208      	movs	r2, #8
 800dc72:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800dc74:	4b10      	ldr	r3, [pc, #64]	@ (800dcb8 <USBH_LL_Init+0x74>)
 800dc76:	2201      	movs	r2, #1
 800dc78:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc7a:	4b0f      	ldr	r3, [pc, #60]	@ (800dcb8 <USBH_LL_Init+0x74>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800dc80:	4b0d      	ldr	r3, [pc, #52]	@ (800dcb8 <USBH_LL_Init+0x74>)
 800dc82:	2202      	movs	r2, #2
 800dc84:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc86:	4b0c      	ldr	r3, [pc, #48]	@ (800dcb8 <USBH_LL_Init+0x74>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800dc8c:	480a      	ldr	r0, [pc, #40]	@ (800dcb8 <USBH_LL_Init+0x74>)
 800dc8e:	f7f6 fc5f 	bl	8004550 <HAL_HCD_Init>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800dc98:	f7f3 fe40 	bl	800191c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800dc9c:	4806      	ldr	r0, [pc, #24]	@ (800dcb8 <USBH_LL_Init+0x74>)
 800dc9e:	f7f7 f8bf 	bl	8004e20 <HAL_HCD_GetCurrentFrame>
 800dca2:	4603      	mov	r3, r0
 800dca4:	4619      	mov	r1, r3
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f7fe ff0a 	bl	800cac0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	20000fbc 	.word	0x20000fbc

0800dcbc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7f7 f82c 	bl	8004d30 <HAL_HCD_Start>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dcdc:	7bfb      	ldrb	r3, [r7, #15]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f000 f95e 	bl	800dfa0 <USBH_Get_USB_Status>
 800dce4:	4603      	mov	r3, r0
 800dce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dce8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b084      	sub	sp, #16
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7f7 f834 	bl	8004d76 <HAL_HCD_Stop>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 f943 	bl	800dfa0 <USBH_Get_USB_Status>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3710      	adds	r7, #16
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dd30:	2301      	movs	r3, #1
 800dd32:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7f7 f87e 	bl	8004e3c <HAL_HCD_GetCurrentSpeed>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	d00c      	beq.n	800dd60 <USBH_LL_GetSpeed+0x38>
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d80d      	bhi.n	800dd66 <USBH_LL_GetSpeed+0x3e>
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d002      	beq.n	800dd54 <USBH_LL_GetSpeed+0x2c>
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d003      	beq.n	800dd5a <USBH_LL_GetSpeed+0x32>
 800dd52:	e008      	b.n	800dd66 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dd54:	2300      	movs	r3, #0
 800dd56:	73fb      	strb	r3, [r7, #15]
    break;
 800dd58:	e008      	b.n	800dd6c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd5e:	e005      	b.n	800dd6c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dd60:	2302      	movs	r3, #2
 800dd62:	73fb      	strb	r3, [r7, #15]
    break;
 800dd64:	e002      	b.n	800dd6c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dd66:	2301      	movs	r3, #1
 800dd68:	73fb      	strb	r3, [r7, #15]
    break;
 800dd6a:	bf00      	nop
  }
  return  speed;
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b084      	sub	sp, #16
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7f7 f80f 	bl	8004db0 <HAL_HCD_ResetPort>
 800dd92:	4603      	mov	r3, r0
 800dd94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f000 f901 	bl	800dfa0 <USBH_Get_USB_Status>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dda2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3710      	adds	r7, #16
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ddbe:	78fa      	ldrb	r2, [r7, #3]
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7f7 f817 	bl	8004df6 <HAL_HCD_HC_GetXferCount>
 800ddc8:	4603      	mov	r3, r0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ddd2:	b590      	push	{r4, r7, lr}
 800ddd4:	b089      	sub	sp, #36	@ 0x24
 800ddd6:	af04      	add	r7, sp, #16
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	4608      	mov	r0, r1
 800dddc:	4611      	mov	r1, r2
 800ddde:	461a      	mov	r2, r3
 800dde0:	4603      	mov	r3, r0
 800dde2:	70fb      	strb	r3, [r7, #3]
 800dde4:	460b      	mov	r3, r1
 800dde6:	70bb      	strb	r3, [r7, #2]
 800dde8:	4613      	mov	r3, r2
 800ddea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddec:	2300      	movs	r3, #0
 800ddee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ddfa:	787c      	ldrb	r4, [r7, #1]
 800ddfc:	78ba      	ldrb	r2, [r7, #2]
 800ddfe:	78f9      	ldrb	r1, [r7, #3]
 800de00:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800de02:	9302      	str	r3, [sp, #8]
 800de04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800de08:	9301      	str	r3, [sp, #4]
 800de0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	4623      	mov	r3, r4
 800de12:	f7f6 fc04 	bl	800461e <HAL_HCD_HC_Init>
 800de16:	4603      	mov	r3, r0
 800de18:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800de1a:	7bfb      	ldrb	r3, [r7, #15]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f000 f8bf 	bl	800dfa0 <USBH_Get_USB_Status>
 800de22:	4603      	mov	r3, r0
 800de24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de26:	7bbb      	ldrb	r3, [r7, #14]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3714      	adds	r7, #20
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd90      	pop	{r4, r7, pc}

0800de30 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	460b      	mov	r3, r1
 800de3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de3c:	2300      	movs	r3, #0
 800de3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de40:	2300      	movs	r3, #0
 800de42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800de4a:	78fa      	ldrb	r2, [r7, #3]
 800de4c:	4611      	mov	r1, r2
 800de4e:	4618      	mov	r0, r3
 800de50:	f7f6 fc9d 	bl	800478e <HAL_HCD_HC_Halt>
 800de54:	4603      	mov	r3, r0
 800de56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de58:	7bfb      	ldrb	r3, [r7, #15]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f000 f8a0 	bl	800dfa0 <USBH_Get_USB_Status>
 800de60:	4603      	mov	r3, r0
 800de62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de64:	7bbb      	ldrb	r3, [r7, #14]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800de6e:	b590      	push	{r4, r7, lr}
 800de70:	b089      	sub	sp, #36	@ 0x24
 800de72:	af04      	add	r7, sp, #16
 800de74:	6078      	str	r0, [r7, #4]
 800de76:	4608      	mov	r0, r1
 800de78:	4611      	mov	r1, r2
 800de7a:	461a      	mov	r2, r3
 800de7c:	4603      	mov	r3, r0
 800de7e:	70fb      	strb	r3, [r7, #3]
 800de80:	460b      	mov	r3, r1
 800de82:	70bb      	strb	r3, [r7, #2]
 800de84:	4613      	mov	r3, r2
 800de86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de88:	2300      	movs	r3, #0
 800de8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de8c:	2300      	movs	r3, #0
 800de8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800de96:	787c      	ldrb	r4, [r7, #1]
 800de98:	78ba      	ldrb	r2, [r7, #2]
 800de9a:	78f9      	ldrb	r1, [r7, #3]
 800de9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dea0:	9303      	str	r3, [sp, #12]
 800dea2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dea4:	9302      	str	r3, [sp, #8]
 800dea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea8:	9301      	str	r3, [sp, #4]
 800deaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	4623      	mov	r3, r4
 800deb2:	f7f6 fc8f 	bl	80047d4 <HAL_HCD_HC_SubmitRequest>
 800deb6:	4603      	mov	r3, r0
 800deb8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800deba:	7bfb      	ldrb	r3, [r7, #15]
 800debc:	4618      	mov	r0, r3
 800debe:	f000 f86f 	bl	800dfa0 <USBH_Get_USB_Status>
 800dec2:	4603      	mov	r3, r0
 800dec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dec6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3714      	adds	r7, #20
 800decc:	46bd      	mov	sp, r7
 800dece:	bd90      	pop	{r4, r7, pc}

0800ded0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	460b      	mov	r3, r1
 800deda:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dee2:	78fa      	ldrb	r2, [r7, #3]
 800dee4:	4611      	mov	r1, r2
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7f6 ff70 	bl	8004dcc <HAL_HCD_HC_GetURBState>
 800deec:	4603      	mov	r3, r0
}
 800deee:	4618      	mov	r0, r3
 800def0:	3708      	adds	r7, #8
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800def6:	b580      	push	{r7, lr}
 800def8:	b082      	sub	sp, #8
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
 800defe:	460b      	mov	r3, r1
 800df00:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d103      	bne.n	800df14 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800df0c:	78fb      	ldrb	r3, [r7, #3]
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 f872 	bl	800dff8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800df14:	20c8      	movs	r0, #200	@ 0xc8
 800df16:	f7f4 fda5 	bl	8002a64 <HAL_Delay>
  return USBH_OK;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3708      	adds	r7, #8
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800df24:	b480      	push	{r7}
 800df26:	b085      	sub	sp, #20
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	460b      	mov	r3, r1
 800df2e:	70fb      	strb	r3, [r7, #3]
 800df30:	4613      	mov	r3, r2
 800df32:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800df3a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800df3c:	78fa      	ldrb	r2, [r7, #3]
 800df3e:	68f9      	ldr	r1, [r7, #12]
 800df40:	4613      	mov	r3, r2
 800df42:	011b      	lsls	r3, r3, #4
 800df44:	1a9b      	subs	r3, r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	440b      	add	r3, r1
 800df4a:	3317      	adds	r3, #23
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00a      	beq.n	800df68 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800df52:	78fa      	ldrb	r2, [r7, #3]
 800df54:	68f9      	ldr	r1, [r7, #12]
 800df56:	4613      	mov	r3, r2
 800df58:	011b      	lsls	r3, r3, #4
 800df5a:	1a9b      	subs	r3, r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	440b      	add	r3, r1
 800df60:	333c      	adds	r3, #60	@ 0x3c
 800df62:	78ba      	ldrb	r2, [r7, #2]
 800df64:	701a      	strb	r2, [r3, #0]
 800df66:	e009      	b.n	800df7c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800df68:	78fa      	ldrb	r2, [r7, #3]
 800df6a:	68f9      	ldr	r1, [r7, #12]
 800df6c:	4613      	mov	r3, r2
 800df6e:	011b      	lsls	r3, r3, #4
 800df70:	1a9b      	subs	r3, r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	440b      	add	r3, r1
 800df76:	333d      	adds	r3, #61	@ 0x3d
 800df78:	78ba      	ldrb	r2, [r7, #2]
 800df7a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800df8a:	b580      	push	{r7, lr}
 800df8c:	b082      	sub	sp, #8
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7f4 fd66 	bl	8002a64 <HAL_Delay>
}
 800df98:	bf00      	nop
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	2b03      	cmp	r3, #3
 800dfb2:	d817      	bhi.n	800dfe4 <USBH_Get_USB_Status+0x44>
 800dfb4:	a201      	add	r2, pc, #4	@ (adr r2, 800dfbc <USBH_Get_USB_Status+0x1c>)
 800dfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfba:	bf00      	nop
 800dfbc:	0800dfcd 	.word	0x0800dfcd
 800dfc0:	0800dfd3 	.word	0x0800dfd3
 800dfc4:	0800dfd9 	.word	0x0800dfd9
 800dfc8:	0800dfdf 	.word	0x0800dfdf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73fb      	strb	r3, [r7, #15]
    break;
 800dfd0:	e00b      	b.n	800dfea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dfd2:	2302      	movs	r3, #2
 800dfd4:	73fb      	strb	r3, [r7, #15]
    break;
 800dfd6:	e008      	b.n	800dfea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	73fb      	strb	r3, [r7, #15]
    break;
 800dfdc:	e005      	b.n	800dfea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dfde:	2302      	movs	r3, #2
 800dfe0:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe2:	e002      	b.n	800dfea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dfe4:	2302      	movs	r3, #2
 800dfe6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe8:	bf00      	nop
  }
  return usb_status;
 800dfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3714      	adds	r7, #20
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	4603      	mov	r3, r0
 800e000:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e002:	79fb      	ldrb	r3, [r7, #7]
 800e004:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e006:	79fb      	ldrb	r3, [r7, #7]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d102      	bne.n	800e012 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e00c:	2300      	movs	r3, #0
 800e00e:	73fb      	strb	r3, [r7, #15]
 800e010:	e001      	b.n	800e016 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e012:	2301      	movs	r3, #1
 800e014:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e016:	7bfb      	ldrb	r3, [r7, #15]
 800e018:	461a      	mov	r2, r3
 800e01a:	2101      	movs	r1, #1
 800e01c:	4803      	ldr	r0, [pc, #12]	@ (800e02c <MX_DriverVbusFS+0x34>)
 800e01e:	f7f6 fa65 	bl	80044ec <HAL_GPIO_WritePin>
}
 800e022:	bf00      	nop
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	40020800 	.word	0x40020800

0800e030 <Send_TO_BLE>:

uint32_t readFlashedYEAR[flashIdxNo*flashAddNo];  //49
int YEARindices[7] = {6, 13, 20, 27, 34, 41, 48};
uint32_t extracted_YEAR[7]; // Array to store 7 ID numbers

void Send_TO_BLE(void){			//data to ESP ==> huart3
 800e030:	b580      	push	{r7, lr}
 800e032:	b092      	sub	sp, #72	@ 0x48
 800e034:	af02      	add	r7, sp, #8

	ExtractDATA();          //Extract and read Bil,ID, TIME and YEAR from flash
 800e036:	f000 f8a9 	bl	800e18c <ExtractDATA>

	char Bil_msg[10];  		// Buffer for BIL message
	for (int i = 0; i < 7; i++) {
 800e03a:	2300      	movs	r3, #0
 800e03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e03e:	e025      	b.n	800e08c <Send_TO_BLE+0x5c>
		snprintf(Bil_msg, sizeof(Bil_msg), "%.2f\n", extracted_Bil[i]);
 800e040:	4a4b      	ldr	r2, [pc, #300]	@ (800e170 <Send_TO_BLE+0x140>)
 800e042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e044:	009b      	lsls	r3, r3, #2
 800e046:	4413      	add	r3, r2
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7f2 fa8c 	bl	8000568 <__aeabi_f2d>
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e058:	e9cd 2300 	strd	r2, r3, [sp]
 800e05c:	4a45      	ldr	r2, [pc, #276]	@ (800e174 <Send_TO_BLE+0x144>)
 800e05e:	210a      	movs	r1, #10
 800e060:	f003 f8fe 	bl	8011260 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)Bil_msg, strlen(Bil_msg), HAL_MAX_DELAY);
 800e064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e068:	4618      	mov	r0, r3
 800e06a:	f7f2 f911 	bl	8000290 <strlen>
 800e06e:	4603      	mov	r3, r0
 800e070:	b29a      	uxth	r2, r3
 800e072:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800e076:	f04f 33ff 	mov.w	r3, #4294967295
 800e07a:	483f      	ldr	r0, [pc, #252]	@ (800e178 <Send_TO_BLE+0x148>)
 800e07c:	f7fb fc06 	bl	800988c <HAL_UART_Transmit>
		HAL_Delay(20);  	// Small delay to allow the ESP32 to process the data
 800e080:	2014      	movs	r0, #20
 800e082:	f7f4 fcef 	bl	8002a64 <HAL_Delay>
	for (int i = 0; i < 7; i++) {
 800e086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e088:	3301      	adds	r3, #1
 800e08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e08e:	2b06      	cmp	r3, #6
 800e090:	ddd6      	ble.n	800e040 <Send_TO_BLE+0x10>
	}

	char ID_msg[10];  // Buffer for ID message
	for (int j = 0; j < 7; j++) {
 800e092:	2300      	movs	r3, #0
 800e094:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e096:	e01d      	b.n	800e0d4 <Send_TO_BLE+0xa4>
		snprintf(ID_msg, sizeof(ID_msg), "%lu\n", extracted_ID[j]);
 800e098:	4a38      	ldr	r2, [pc, #224]	@ (800e17c <Send_TO_BLE+0x14c>)
 800e09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0a0:	f107 0018 	add.w	r0, r7, #24
 800e0a4:	4a36      	ldr	r2, [pc, #216]	@ (800e180 <Send_TO_BLE+0x150>)
 800e0a6:	210a      	movs	r1, #10
 800e0a8:	f003 f8da 	bl	8011260 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)ID_msg, strlen(ID_msg), HAL_MAX_DELAY);
 800e0ac:	f107 0318 	add.w	r3, r7, #24
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7f2 f8ed 	bl	8000290 <strlen>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	b29a      	uxth	r2, r3
 800e0ba:	f107 0118 	add.w	r1, r7, #24
 800e0be:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c2:	482d      	ldr	r0, [pc, #180]	@ (800e178 <Send_TO_BLE+0x148>)
 800e0c4:	f7fb fbe2 	bl	800988c <HAL_UART_Transmit>
		HAL_Delay(20);  // Small delay to allow the ESP32 to process the data
 800e0c8:	2014      	movs	r0, #20
 800e0ca:	f7f4 fccb 	bl	8002a64 <HAL_Delay>
	for (int j = 0; j < 7; j++) {
 800e0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d6:	2b06      	cmp	r3, #6
 800e0d8:	ddde      	ble.n	800e098 <Send_TO_BLE+0x68>
	}
	char TIME_msg[12];  // Buffer for TIME message
	for (int m = 0; m < 7; m++) {
 800e0da:	2300      	movs	r3, #0
 800e0dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0de:	e01d      	b.n	800e11c <Send_TO_BLE+0xec>
		//uint8_t month = extracted_TIME[m] & 0xFF;
		snprintf(TIME_msg, sizeof(TIME_msg), "%lu\n", extracted_TIME[m]);   //month
 800e0e0:	4a28      	ldr	r2, [pc, #160]	@ (800e184 <Send_TO_BLE+0x154>)
 800e0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0e8:	f107 000c 	add.w	r0, r7, #12
 800e0ec:	4a24      	ldr	r2, [pc, #144]	@ (800e180 <Send_TO_BLE+0x150>)
 800e0ee:	210c      	movs	r1, #12
 800e0f0:	f003 f8b6 	bl	8011260 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)TIME_msg, strlen(TIME_msg), HAL_MAX_DELAY);
 800e0f4:	f107 030c 	add.w	r3, r7, #12
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7f2 f8c9 	bl	8000290 <strlen>
 800e0fe:	4603      	mov	r3, r0
 800e100:	b29a      	uxth	r2, r3
 800e102:	f107 010c 	add.w	r1, r7, #12
 800e106:	f04f 33ff 	mov.w	r3, #4294967295
 800e10a:	481b      	ldr	r0, [pc, #108]	@ (800e178 <Send_TO_BLE+0x148>)
 800e10c:	f7fb fbbe 	bl	800988c <HAL_UART_Transmit>
		HAL_Delay(20);  // Small delay to allow the ESP32 to process the data
 800e110:	2014      	movs	r0, #20
 800e112:	f7f4 fca7 	bl	8002a64 <HAL_Delay>
	for (int m = 0; m < 7; m++) {
 800e116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e118:	3301      	adds	r3, #1
 800e11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e11c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e11e:	2b06      	cmp	r3, #6
 800e120:	ddde      	ble.n	800e0e0 <Send_TO_BLE+0xb0>
	}
	char YEAR_msg[10];  // Buffer for YEAR message
	for (int n = 0; n < 7; n++) {
 800e122:	2300      	movs	r3, #0
 800e124:	633b      	str	r3, [r7, #48]	@ 0x30
 800e126:	e01a      	b.n	800e15e <Send_TO_BLE+0x12e>
		snprintf(YEAR_msg, sizeof(YEAR_msg), "%lu\n", extracted_YEAR[n]);
 800e128:	4a17      	ldr	r2, [pc, #92]	@ (800e188 <Send_TO_BLE+0x158>)
 800e12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e130:	4638      	mov	r0, r7
 800e132:	4a13      	ldr	r2, [pc, #76]	@ (800e180 <Send_TO_BLE+0x150>)
 800e134:	210a      	movs	r1, #10
 800e136:	f003 f893 	bl	8011260 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)YEAR_msg, strlen(YEAR_msg), HAL_MAX_DELAY);
 800e13a:	463b      	mov	r3, r7
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7f2 f8a7 	bl	8000290 <strlen>
 800e142:	4603      	mov	r3, r0
 800e144:	b29a      	uxth	r2, r3
 800e146:	4639      	mov	r1, r7
 800e148:	f04f 33ff 	mov.w	r3, #4294967295
 800e14c:	480a      	ldr	r0, [pc, #40]	@ (800e178 <Send_TO_BLE+0x148>)
 800e14e:	f7fb fb9d 	bl	800988c <HAL_UART_Transmit>
		HAL_Delay(20);  // Small delay to allow the ESP32 to process the data
 800e152:	2014      	movs	r0, #20
 800e154:	f7f4 fc86 	bl	8002a64 <HAL_Delay>
	for (int n = 0; n < 7; n++) {
 800e158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15a:	3301      	adds	r3, #1
 800e15c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e160:	2b06      	cmp	r3, #6
 800e162:	dde1      	ble.n	800e128 <Send_TO_BLE+0xf8>
	}
}
 800e164:	bf00      	nop
 800e166:	bf00      	nop
 800e168:	3740      	adds	r7, #64	@ 0x40
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	20001460 	.word	0x20001460
 800e174:	080133cc 	.word	0x080133cc
 800e178:	20000670 	.word	0x20000670
 800e17c:	20001540 	.word	0x20001540
 800e180:	080133d4 	.word	0x080133d4
 800e184:	20001620 	.word	0x20001620
 800e188:	20001700 	.word	0x20001700

0800e18c <ExtractDATA>:
uint8_t month = extracted_TIME & 0xFF;           // Extract the least significant 8 bits (month)

 *******************************************************************************************************
 */

void ExtractDATA(void) {
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0

	ReadBilResultsFromFlash(readFlashedBil); // to read BIL _ float
 800e192:	483f      	ldr	r0, [pc, #252]	@ (800e290 <ExtractDATA+0x104>)
 800e194:	f000 faca 	bl	800e72c <ReadBilResultsFromFlash>
	ReadBilResultsFromFlash(readFlashedID);  // to read ID _ char
 800e198:	483e      	ldr	r0, [pc, #248]	@ (800e294 <ExtractDATA+0x108>)
 800e19a:	f000 fac7 	bl	800e72c <ReadBilResultsFromFlash>
	ReadBilResultsFromFlash(readFlashedTIME);  // to read RTC _ uint8_t
 800e19e:	483e      	ldr	r0, [pc, #248]	@ (800e298 <ExtractDATA+0x10c>)
 800e1a0:	f000 fac4 	bl	800e72c <ReadBilResultsFromFlash>
	ReadBilResultsFromFlash(readFlashedYEAR);  // to read RTC _ uint8_t
 800e1a4:	483d      	ldr	r0, [pc, #244]	@ (800e29c <ExtractDATA+0x110>)
 800e1a6:	f000 fac1 	bl	800e72c <ReadBilResultsFromFlash>

	for (int i = 0; i < 7; i++) {
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	617b      	str	r3, [r7, #20]
 800e1ae:	e029      	b.n	800e204 <ExtractDATA+0x78>
		uint32_t tempID = 0;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	613b      	str	r3, [r7, #16]
		//uint32_t temp = 0;
		// Convert the 8 consecutive characters into a number
		for (int j = 0; j < 8; j++) {
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	60fb      	str	r3, [r7, #12]
 800e1b8:	e013      	b.n	800e1e2 <ExtractDATA+0x56>
			tempID = tempID * 10 + (readFlashedID[IDindices[i] + j] - '0'); // Convert char to int
 800e1ba:	693a      	ldr	r2, [r7, #16]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	4413      	add	r3, r2
 800e1c2:	005b      	lsls	r3, r3, #1
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	4a36      	ldr	r2, [pc, #216]	@ (800e2a0 <ExtractDATA+0x114>)
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	4a30      	ldr	r2, [pc, #192]	@ (800e294 <ExtractDATA+0x108>)
 800e1d4:	5cd3      	ldrb	r3, [r2, r3]
 800e1d6:	440b      	add	r3, r1
 800e1d8:	3b30      	subs	r3, #48	@ 0x30
 800e1da:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < 8; j++) {
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	60fb      	str	r3, [r7, #12]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2b07      	cmp	r3, #7
 800e1e6:	dde8      	ble.n	800e1ba <ExtractDATA+0x2e>
		}
		if(tempID==3761633968) tempID = 0;                 // if user didn't scan ID prior the test -> ID=0;
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	4a2e      	ldr	r2, [pc, #184]	@ (800e2a4 <ExtractDATA+0x118>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d101      	bne.n	800e1f4 <ExtractDATA+0x68>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	613b      	str	r3, [r7, #16]
		extracted_ID[i] = tempID; 						   // Store in the ID array
 800e1f4:	492c      	ldr	r1, [pc, #176]	@ (800e2a8 <ExtractDATA+0x11c>)
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 7; i++) {
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	3301      	adds	r3, #1
 800e202:	617b      	str	r3, [r7, #20]
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	2b06      	cmp	r3, #6
 800e208:	ddd2      	ble.n	800e1b0 <ExtractDATA+0x24>
	}

	for (int i = 0; i < 7; i++) {
 800e20a:	2300      	movs	r3, #0
 800e20c:	60bb      	str	r3, [r7, #8]
 800e20e:	e00f      	b.n	800e230 <ExtractDATA+0xa4>
		extracted_Bil[i] = readFlashedBil[BILindices[i]];  // Copy value at the given index
 800e210:	4a26      	ldr	r2, [pc, #152]	@ (800e2ac <ExtractDATA+0x120>)
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e218:	4a1d      	ldr	r2, [pc, #116]	@ (800e290 <ExtractDATA+0x104>)
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	4923      	ldr	r1, [pc, #140]	@ (800e2b0 <ExtractDATA+0x124>)
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	440b      	add	r3, r1
 800e228:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 7; i++) {
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	3301      	adds	r3, #1
 800e22e:	60bb      	str	r3, [r7, #8]
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	2b06      	cmp	r3, #6
 800e234:	ddec      	ble.n	800e210 <ExtractDATA+0x84>
	}
	for (int i = 0; i < 7; i++) {
 800e236:	2300      	movs	r3, #0
 800e238:	607b      	str	r3, [r7, #4]
 800e23a:	e00d      	b.n	800e258 <ExtractDATA+0xcc>
		extracted_TIME[i] = readFlashedTIME[TIMEindices[i]];  // Copy value at the given index
 800e23c:	4a1d      	ldr	r2, [pc, #116]	@ (800e2b4 <ExtractDATA+0x128>)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e244:	4a14      	ldr	r2, [pc, #80]	@ (800e298 <ExtractDATA+0x10c>)
 800e246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e24a:	491b      	ldr	r1, [pc, #108]	@ (800e2b8 <ExtractDATA+0x12c>)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 7; i++) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	3301      	adds	r3, #1
 800e256:	607b      	str	r3, [r7, #4]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2b06      	cmp	r3, #6
 800e25c:	ddee      	ble.n	800e23c <ExtractDATA+0xb0>
	}
	for (int i = 0; i < 7; i++) {
 800e25e:	2300      	movs	r3, #0
 800e260:	603b      	str	r3, [r7, #0]
 800e262:	e00d      	b.n	800e280 <ExtractDATA+0xf4>
		extracted_YEAR[i] = readFlashedYEAR[YEARindices[i]];  // Copy value at the given index
 800e264:	4a15      	ldr	r2, [pc, #84]	@ (800e2bc <ExtractDATA+0x130>)
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e26c:	4a0b      	ldr	r2, [pc, #44]	@ (800e29c <ExtractDATA+0x110>)
 800e26e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e272:	4913      	ldr	r1, [pc, #76]	@ (800e2c0 <ExtractDATA+0x134>)
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 7; i++) {
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	3301      	adds	r3, #1
 800e27e:	603b      	str	r3, [r7, #0]
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b06      	cmp	r3, #6
 800e284:	ddee      	ble.n	800e264 <ExtractDATA+0xd8>
	}
}
 800e286:	bf00      	nop
 800e288:	bf00      	nop
 800e28a:	3718      	adds	r7, #24
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	2000139c 	.word	0x2000139c
 800e294:	2000147c 	.word	0x2000147c
 800e298:	2000155c 	.word	0x2000155c
 800e29c:	2000163c 	.word	0x2000163c
 800e2a0:	20000048 	.word	0x20000048
 800e2a4:	e035fab0 	.word	0xe035fab0
 800e2a8:	20001540 	.word	0x20001540
 800e2ac:	2000002c 	.word	0x2000002c
 800e2b0:	20001460 	.word	0x20001460
 800e2b4:	20000064 	.word	0x20000064
 800e2b8:	20001620 	.word	0x20001620
 800e2bc:	20000080 	.word	0x20000080
 800e2c0:	20001700 	.word	0x20001700

0800e2c4 <USBH_HID_EventCallback>:
char key;
char Buffered_ID[(BcodeIndecesNO*2)+1] = {0};    //17 // 8 characters
int ID_idx = 0;
char ID[8] = {0};

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost){
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_KEYBOARD){
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7fd fbf6 	bl	800babe <USBH_HID_GetDeviceType>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d10c      	bne.n	800e2f2 <USBH_HID_EventCallback+0x2e>
		HID_KEYBD_Info_TypeDef *Keyboard_Info;
		Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f7fd fd27 	bl	800bd2c <USBH_HID_GetKeybdInfo>
 800e2de:	60f8      	str	r0, [r7, #12]
		key = USBH_HID_GetASCIICode(Keyboard_Info);
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f7fd fdcb 	bl	800be7c <USBH_HID_GetASCIICode>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	4b04      	ldr	r3, [pc, #16]	@ (800e2fc <USBH_HID_EventCallback+0x38>)
 800e2ec:	701a      	strb	r2, [r3, #0]
		//int len = sprintf(Uart_Buf, "%c", key);
		//HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, len, 1000);
        process_id();
 800e2ee:	f000 f807 	bl	800e300 <process_id>
	}
}
 800e2f2:	bf00      	nop
 800e2f4:	3710      	adds	r7, #16
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	2000171c 	.word	0x2000171c

0800e300 <process_id>:

void process_id(void){
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
		Buffered_ID[ID_idx++] = key;
 800e306:	4b17      	ldr	r3, [pc, #92]	@ (800e364 <process_id+0x64>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	1c5a      	adds	r2, r3, #1
 800e30c:	4915      	ldr	r1, [pc, #84]	@ (800e364 <process_id+0x64>)
 800e30e:	600a      	str	r2, [r1, #0]
 800e310:	4a15      	ldr	r2, [pc, #84]	@ (800e368 <process_id+0x68>)
 800e312:	7811      	ldrb	r1, [r2, #0]
 800e314:	4a15      	ldr	r2, [pc, #84]	@ (800e36c <process_id+0x6c>)
 800e316:	54d1      	strb	r1, [r2, r3]
		//Buffered_ID[17] = '\0'; // Add null terminator manually	}
		if(ID_idx>=(BcodeIndecesNO*2)+1) ID_idx = 1;
 800e318:	4b12      	ldr	r3, [pc, #72]	@ (800e364 <process_id+0x64>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2b10      	cmp	r3, #16
 800e31e:	dd02      	ble.n	800e326 <process_id+0x26>
 800e320:	4b10      	ldr	r3, [pc, #64]	@ (800e364 <process_id+0x64>)
 800e322:	2201      	movs	r2, #1
 800e324:	601a      	str	r2, [r3, #0]

		for (int i=1,j=0; i < (BcodeIndecesNO*2); i+=2,++j) {
 800e326:	2301      	movs	r3, #1
 800e328:	607b      	str	r3, [r7, #4]
 800e32a:	2300      	movs	r3, #0
 800e32c:	603b      	str	r3, [r7, #0]
 800e32e:	e00e      	b.n	800e34e <process_id+0x4e>
			ID[j] = Buffered_ID[i];
 800e330:	4a0e      	ldr	r2, [pc, #56]	@ (800e36c <process_id+0x6c>)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	4413      	add	r3, r2
 800e336:	7819      	ldrb	r1, [r3, #0]
 800e338:	4a0d      	ldr	r2, [pc, #52]	@ (800e370 <process_id+0x70>)
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	4413      	add	r3, r2
 800e33e:	460a      	mov	r2, r1
 800e340:	701a      	strb	r2, [r3, #0]
		for (int i=1,j=0; i < (BcodeIndecesNO*2); i+=2,++j) {
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	3302      	adds	r3, #2
 800e346:	607b      	str	r3, [r7, #4]
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	3301      	adds	r3, #1
 800e34c:	603b      	str	r3, [r7, #0]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2b0f      	cmp	r3, #15
 800e352:	dded      	ble.n	800e330 <process_id+0x30>
		}
}
 800e354:	bf00      	nop
 800e356:	bf00      	nop
 800e358:	370c      	adds	r7, #12
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	20001734 	.word	0x20001734
 800e368:	2000171c 	.word	0x2000171c
 800e36c:	20001720 	.word	0x20001720
 800e370:	20001738 	.word	0x20001738
 800e374:	00000000 	.word	0x00000000

0800e378 <capture_and_send_data>:
float Bil=0;
float BilResult=0.0;
//uint32_t BilResult =1;

void capture_and_send_data(void)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0

    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 800e37e:	4b4a      	ldr	r3, [pc, #296]	@ (800e4a8 <capture_and_send_data+0x130>)
 800e380:	2200      	movs	r2, #0
 800e382:	601a      	str	r2, [r3, #0]
 800e384:	e020      	b.n	800e3c8 <capture_and_send_data+0x50>
    {
        HAL_ADC_Start_DMA(&hadc3, &adc_value, 1);
 800e386:	2201      	movs	r2, #1
 800e388:	4948      	ldr	r1, [pc, #288]	@ (800e4ac <capture_and_send_data+0x134>)
 800e38a:	4849      	ldr	r0, [pc, #292]	@ (800e4b0 <capture_and_send_data+0x138>)
 800e38c:	f7f4 fbd2 	bl	8002b34 <HAL_ADC_Start_DMA>
        //HAL_Delay(1);
        DWT_Delay(9);
 800e390:	2009      	movs	r0, #9
 800e392:	f001 ffc5 	bl	8010320 <DWT_Delay>
        // Store the adc_value in spectral_data
        spectral_data[idx++] = adc_value;     //- 200; due to Voltage Level difference in ADC on BATT power
 800e396:	4b47      	ldr	r3, [pc, #284]	@ (800e4b4 <capture_and_send_data+0x13c>)
 800e398:	881b      	ldrh	r3, [r3, #0]
 800e39a:	1c5a      	adds	r2, r3, #1
 800e39c:	b291      	uxth	r1, r2
 800e39e:	4a45      	ldr	r2, [pc, #276]	@ (800e4b4 <capture_and_send_data+0x13c>)
 800e3a0:	8011      	strh	r1, [r2, #0]
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	4b41      	ldr	r3, [pc, #260]	@ (800e4ac <capture_and_send_data+0x134>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a43      	ldr	r2, [pc, #268]	@ (800e4b8 <capture_and_send_data+0x140>)
 800e3aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (idx >= NUM_WAVELENGTHS*2) idx=0;
 800e3ae:	4b41      	ldr	r3, [pc, #260]	@ (800e4b4 <capture_and_send_data+0x13c>)
 800e3b0:	881b      	ldrh	r3, [r3, #0]
 800e3b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3b6:	d302      	bcc.n	800e3be <capture_and_send_data+0x46>
 800e3b8:	4b3e      	ldr	r3, [pc, #248]	@ (800e4b4 <capture_and_send_data+0x13c>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 800e3be:	4b3a      	ldr	r3, [pc, #232]	@ (800e4a8 <capture_and_send_data+0x130>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	4a38      	ldr	r2, [pc, #224]	@ (800e4a8 <capture_and_send_data+0x130>)
 800e3c6:	6013      	str	r3, [r2, #0]
 800e3c8:	4b37      	ldr	r3, [pc, #220]	@ (800e4a8 <capture_and_send_data+0x130>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3d0:	dbd9      	blt.n	800e386 <capture_and_send_data+0xe>
			spectral_data_256[index2++] = curr_value;
			if (index2 >= Filtered_Spec_Len) index2=0;
		}
	}*/

	sum_filtered_data=0;
 800e3d2:	4b3a      	ldr	r3, [pc, #232]	@ (800e4bc <capture_and_send_data+0x144>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	601a      	str	r2, [r3, #0]
	average_filtered_data=0;
 800e3d8:	4b39      	ldr	r3, [pc, #228]	@ (800e4c0 <capture_and_send_data+0x148>)
 800e3da:	f04f 0200 	mov.w	r2, #0
 800e3de:	601a      	str	r2, [r3, #0]
	// Calculate the average of the filtered data
	for (int i = main_spec_start; i < main_spec_end; i++)
 800e3e0:	2363      	movs	r3, #99	@ 0x63
 800e3e2:	607b      	str	r3, [r7, #4]
 800e3e4:	e00b      	b.n	800e3fe <capture_and_send_data+0x86>
	{   //45 main samples
		sum_filtered_data += spectral_data[i];
 800e3e6:	4a34      	ldr	r2, [pc, #208]	@ (800e4b8 <capture_and_send_data+0x140>)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e3ee:	4b33      	ldr	r3, [pc, #204]	@ (800e4bc <capture_and_send_data+0x144>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	4a31      	ldr	r2, [pc, #196]	@ (800e4bc <capture_and_send_data+0x144>)
 800e3f6:	6013      	str	r3, [r2, #0]
	for (int i = main_spec_start; i < main_spec_end; i++)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	607b      	str	r3, [r7, #4]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2b90      	cmp	r3, #144	@ 0x90
 800e402:	ddf0      	ble.n	800e3e6 <capture_and_send_data+0x6e>
	}
	//if (index2 > 0)
	{
		average_filtered_data = (float)sum_filtered_data / (main_spec_end-main_spec_start);
 800e404:	4b2d      	ldr	r3, [pc, #180]	@ (800e4bc <capture_and_send_data+0x144>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	ee07 3a90 	vmov	s15, r3
 800e40c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e410:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800e4c4 <capture_and_send_data+0x14c>
 800e414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e418:	4b29      	ldr	r3, [pc, #164]	@ (800e4c0 <capture_and_send_data+0x148>)
 800e41a:	edc3 7a00 	vstr	s15, [r3]
		 average_Reflectance = (float)sum_Reflectance / (main_spec_end-main_spec_start);
	}*/

	//BilResult[0] = average_Reflectance*3;
	//BilResult[0]=(1.7016*average_Reflectance*average_Reflectance)-(20.6755*average_Reflectance)+(66.9023);
	 BilResult = (average_filtered_data-478)/120;     //avgSpecAtBlank_Ref = 478   //CalFactor=56;//80
 800e41e:	4b28      	ldr	r3, [pc, #160]	@ (800e4c0 <capture_and_send_data+0x148>)
 800e420:	edd3 7a00 	vldr	s15, [r3]
 800e424:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800e4c8 <capture_and_send_data+0x150>
 800e428:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e42c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e4cc <capture_and_send_data+0x154>
 800e430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e434:	4b26      	ldr	r3, [pc, #152]	@ (800e4d0 <capture_and_send_data+0x158>)
 800e436:	edc3 7a00 	vstr	s15, [r3]
	 if(BilResult<=0.1) {
 800e43a:	4b25      	ldr	r3, [pc, #148]	@ (800e4d0 <capture_and_send_data+0x158>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4618      	mov	r0, r3
 800e440:	f7f2 f892 	bl	8000568 <__aeabi_f2d>
 800e444:	a316      	add	r3, pc, #88	@ (adr r3, 800e4a0 <capture_and_send_data+0x128>)
 800e446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44a:	f7f2 fb61 	bl	8000b10 <__aeabi_dcmple>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d01b      	beq.n	800e48c <capture_and_send_data+0x114>
		 HAL_GPIO_WritePin(GPIOA, SPEC_LED_Pin, GPIO_PIN_RESET);
 800e454:	2200      	movs	r2, #0
 800e456:	2180      	movs	r1, #128	@ 0x80
 800e458:	481e      	ldr	r0, [pc, #120]	@ (800e4d4 <capture_and_send_data+0x15c>)
 800e45a:	f7f6 f847 	bl	80044ec <HAL_GPIO_WritePin>
		 testDone = 0;
 800e45e:	4b1e      	ldr	r3, [pc, #120]	@ (800e4d8 <capture_and_send_data+0x160>)
 800e460:	2200      	movs	r2, #0
 800e462:	701a      	strb	r2, [r3, #0]
		 BilResult=0;
 800e464:	4b1a      	ldr	r3, [pc, #104]	@ (800e4d0 <capture_and_send_data+0x158>)
 800e466:	f04f 0200 	mov.w	r2, #0
 800e46a:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 800e46c:	2201      	movs	r2, #1
 800e46e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e472:	481a      	ldr	r0, [pc, #104]	@ (800e4dc <capture_and_send_data+0x164>)
 800e474:	f7f6 f83a 	bl	80044ec <HAL_GPIO_WritePin>
		 HAL_Delay(200);
 800e478:	20c8      	movs	r0, #200	@ 0xc8
 800e47a:	f7f4 faf3 	bl	8002a64 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 800e47e:	2200      	movs	r2, #0
 800e480:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e484:	4815      	ldr	r0, [pc, #84]	@ (800e4dc <capture_and_send_data+0x164>)
 800e486:	f7f6 f831 	bl	80044ec <HAL_GPIO_WritePin>
      //len = sizeof(spectral_data[j]);

      HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(spectral_data[j]), HAL_MAX_DELAY);    //to ESP

    }*/
}
 800e48a:	e002      	b.n	800e492 <capture_and_send_data+0x11a>
	 testDone = 1;
 800e48c:	4b12      	ldr	r3, [pc, #72]	@ (800e4d8 <capture_and_send_data+0x160>)
 800e48e:	2201      	movs	r2, #1
 800e490:	701a      	strb	r2, [r3, #0]
}
 800e492:	bf00      	nop
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	f3af 8000 	nop.w
 800e4a0:	9999999a 	.word	0x9999999a
 800e4a4:	3fb99999 	.word	0x3fb99999
 800e4a8:	20001f48 	.word	0x20001f48
 800e4ac:	20001f40 	.word	0x20001f40
 800e4b0:	200002f4 	.word	0x200002f4
 800e4b4:	20001f44 	.word	0x20001f44
 800e4b8:	20001740 	.word	0x20001740
 800e4bc:	20001f4c 	.word	0x20001f4c
 800e4c0:	20001f50 	.word	0x20001f50
 800e4c4:	42380000 	.word	0x42380000
 800e4c8:	43ef0000 	.word	0x43ef0000
 800e4cc:	42f00000 	.word	0x42f00000
 800e4d0:	20001f54 	.word	0x20001f54
 800e4d4:	40020000 	.word	0x40020000
 800e4d8:	20001f46 	.word	0x20001f46
 800e4dc:	40021000 	.word	0x40021000

0800e4e0 <FindLastBilResultIndex>:
// Internal variables
static uint32_t flash_index = 0;  // Index for the circular buffer
static uint32_t sequenceNumber = 0;  // Global sequence number for entries

// Function to find the last valid BIL reading index across multiple sectors
void FindLastBilResultIndex(void) {
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
    uint32_t maxSequence = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60fb      	str	r3, [r7, #12]
    flash_index = 0;
 800e4ea:	4b1a      	ldr	r3, [pc, #104]	@ (800e554 <FindLastBilResultIndex+0x74>)
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	60bb      	str	r3, [r7, #8]
 800e4f4:	e01c      	b.n	800e530 <FindLastBilResultIndex+0x50>
        uint32_t sectorBaseAddress = GetSectorAddress(i + FLASH_START_SECTOR);
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	3305      	adds	r3, #5
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f000 f966 	bl	800e7cc <GetSectorAddress>
 800e500:	6078      	str	r0, [r7, #4]
        FlashEntry* entry = (FlashEntry*)sectorBaseAddress;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	603b      	str	r3, [r7, #0]

        if (entry->magic == MAGIC_NUMBER) {
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 800e50e:	d10c      	bne.n	800e52a <FindLastBilResultIndex+0x4a>
            if (entry->sequence > maxSequence) {
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	429a      	cmp	r2, r3
 800e518:	d207      	bcs.n	800e52a <FindLastBilResultIndex+0x4a>
                maxSequence = entry->sequence;
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	60fb      	str	r3, [r7, #12]
                flash_index = i + 1;
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	3301      	adds	r3, #1
 800e524:	461a      	mov	r2, r3
 800e526:	4b0b      	ldr	r3, [pc, #44]	@ (800e554 <FindLastBilResultIndex+0x74>)
 800e528:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	3301      	adds	r3, #1
 800e52e:	60bb      	str	r3, [r7, #8]
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	2b06      	cmp	r3, #6
 800e534:	dddf      	ble.n	800e4f6 <FindLastBilResultIndex+0x16>
            }
        }
    }

    // Wrap around if the index exceeds the max entries
    if (flash_index >= MAX_BIL_READINGS) {
 800e536:	4b07      	ldr	r3, [pc, #28]	@ (800e554 <FindLastBilResultIndex+0x74>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b06      	cmp	r3, #6
 800e53c:	d902      	bls.n	800e544 <FindLastBilResultIndex+0x64>
        flash_index = 0;
 800e53e:	4b05      	ldr	r3, [pc, #20]	@ (800e554 <FindLastBilResultIndex+0x74>)
 800e540:	2200      	movs	r2, #0
 800e542:	601a      	str	r2, [r3, #0]
    }

    // Set the global sequenceNumber to maxSequence + 1
    sequenceNumber = maxSequence + 1;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	3301      	adds	r3, #1
 800e548:	4a03      	ldr	r2, [pc, #12]	@ (800e558 <FindLastBilResultIndex+0x78>)
 800e54a:	6013      	str	r3, [r2, #0]
}
 800e54c:	bf00      	nop
 800e54e:	3710      	adds	r7, #16
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	20001f58 	.word	0x20001f58
 800e558:	20001f5c 	.word	0x20001f5c

0800e55c <SaveBilResultToFlash>:

// Function to save BIL result to flash at the next sector
void SaveBilResultToFlash(void) {
 800e55c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e560:	b094      	sub	sp, #80	@ 0x50
 800e562:	af04      	add	r7, sp, #16
    uint32_t sector = FLASH_START_SECTOR + flash_index;
 800e564:	4b64      	ldr	r3, [pc, #400]	@ (800e6f8 <SaveBilResultToFlash+0x19c>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	3305      	adds	r3, #5
 800e56a:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Erase the current sector before writing
    EraseFlashSector(sector);
 800e56c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e56e:	f000 f90e 	bl	800e78e <EraseFlashSector>

    RTC_GetTime(&hours, &minutes, &seconds, &day, &date, &month, &year);   //**//
 800e572:	4b62      	ldr	r3, [pc, #392]	@ (800e6fc <SaveBilResultToFlash+0x1a0>)
 800e574:	9302      	str	r3, [sp, #8]
 800e576:	4b62      	ldr	r3, [pc, #392]	@ (800e700 <SaveBilResultToFlash+0x1a4>)
 800e578:	9301      	str	r3, [sp, #4]
 800e57a:	4b62      	ldr	r3, [pc, #392]	@ (800e704 <SaveBilResultToFlash+0x1a8>)
 800e57c:	9300      	str	r3, [sp, #0]
 800e57e:	4b62      	ldr	r3, [pc, #392]	@ (800e708 <SaveBilResultToFlash+0x1ac>)
 800e580:	4a62      	ldr	r2, [pc, #392]	@ (800e70c <SaveBilResultToFlash+0x1b0>)
 800e582:	4963      	ldr	r1, [pc, #396]	@ (800e710 <SaveBilResultToFlash+0x1b4>)
 800e584:	4863      	ldr	r0, [pc, #396]	@ (800e714 <SaveBilResultToFlash+0x1b8>)
 800e586:	f001 fd3f 	bl	8010008 <RTC_GetTime>
    FlashEntry entry;
    entry.magic = MAGIC_NUMBER;
 800e58a:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800e58e:	61bb      	str	r3, [r7, #24]
    entry.sequence = sequenceNumber++;
 800e590:	4b61      	ldr	r3, [pc, #388]	@ (800e718 <SaveBilResultToFlash+0x1bc>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	1c59      	adds	r1, r3, #1
 800e596:	4a60      	ldr	r2, [pc, #384]	@ (800e718 <SaveBilResultToFlash+0x1bc>)
 800e598:	6011      	str	r1, [r2, #0]
 800e59a:	61fb      	str	r3, [r7, #28]
    entry.bilValue = AveragedBil; //BilResult;
 800e59c:	4b5f      	ldr	r3, [pc, #380]	@ (800e71c <SaveBilResultToFlash+0x1c0>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	623b      	str	r3, [r7, #32]
    strncpy(entry.patientID, ID, sizeof(entry.patientID));
 800e5a2:	f107 0318 	add.w	r3, r7, #24
 800e5a6:	330c      	adds	r3, #12
 800e5a8:	2208      	movs	r2, #8
 800e5aa:	495d      	ldr	r1, [pc, #372]	@ (800e720 <SaveBilResultToFlash+0x1c4>)
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f002 fef0 	bl	8011392 <strncpy>
    // Copy RTC values
	entry.hours = hours;
 800e5b2:	4b58      	ldr	r3, [pc, #352]	@ (800e714 <SaveBilResultToFlash+0x1b8>)
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	entry.minutes = minutes;
 800e5ba:	4b55      	ldr	r3, [pc, #340]	@ (800e710 <SaveBilResultToFlash+0x1b4>)
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	entry.date = date;
 800e5c2:	4b50      	ldr	r3, [pc, #320]	@ (800e704 <SaveBilResultToFlash+0x1a8>)
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	entry.month = month;
 800e5ca:	4b4d      	ldr	r3, [pc, #308]	@ (800e700 <SaveBilResultToFlash+0x1a4>)
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	entry.year = year;
 800e5d2:	4b4a      	ldr	r3, [pc, #296]	@ (800e6fc <SaveBilResultToFlash+0x1a0>)
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    uint32_t sectorBaseAddress = GetSectorAddress(sector);
 800e5da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5dc:	f000 f8f6 	bl	800e7cc <GetSectorAddress>
 800e5e0:	6378      	str	r0, [r7, #52]	@ 0x34

    HAL_FLASH_Unlock();
 800e5e2:	f7f5 fb4b 	bl	8003c7c <HAL_FLASH_Unlock>

    // Write the magic number, sequence number, patient ID, and BIL value
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress, entry.magic);
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	461c      	mov	r4, r3
 800e5ec:	4615      	mov	r5, r2
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	462b      	mov	r3, r5
 800e5f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e5f4:	2002      	movs	r0, #2
 800e5f6:	f7f5 faed 	bl	8003bd4 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 4, entry.sequence);
 800e5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5fc:	1d19      	adds	r1, r3, #4
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	2200      	movs	r2, #0
 800e602:	4698      	mov	r8, r3
 800e604:	4691      	mov	r9, r2
 800e606:	4642      	mov	r2, r8
 800e608:	464b      	mov	r3, r9
 800e60a:	2002      	movs	r0, #2
 800e60c:	f7f5 fae2 	bl	8003bd4 <HAL_FLASH_Program>

    for (int i = 0; i < sizeof(entry.patientID); i += 4) {
 800e610:	2300      	movs	r3, #0
 800e612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e614:	e016      	b.n	800e644 <SaveBilResultToFlash+0xe8>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 8 + i, *(uint32_t*)&entry.patientID[i]);
 800e616:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e61a:	4413      	add	r3, r2
 800e61c:	f103 0108 	add.w	r1, r3, #8
 800e620:	f107 0218 	add.w	r2, r7, #24
 800e624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e626:	3308      	adds	r3, #8
 800e628:	4413      	add	r3, r2
 800e62a:	3304      	adds	r3, #4
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2200      	movs	r2, #0
 800e630:	613b      	str	r3, [r7, #16]
 800e632:	617a      	str	r2, [r7, #20]
 800e634:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e638:	2002      	movs	r0, #2
 800e63a:	f7f5 facb 	bl	8003bd4 <HAL_FLASH_Program>
    for (int i = 0; i < sizeof(entry.patientID); i += 4) {
 800e63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e640:	3304      	adds	r3, #4
 800e642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e646:	2b07      	cmp	r3, #7
 800e648:	d9e5      	bls.n	800e616 <SaveBilResultToFlash+0xba>
    }

    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 16, *(uint32_t*)&entry.bilValue);
 800e64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e64c:	f103 0110 	add.w	r1, r3, #16
 800e650:	f107 0318 	add.w	r3, r7, #24
 800e654:	3308      	adds	r3, #8
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2200      	movs	r2, #0
 800e65a:	60bb      	str	r3, [r7, #8]
 800e65c:	60fa      	str	r2, [r7, #12]
 800e65e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e662:	2002      	movs	r0, #2
 800e664:	f7f5 fab6 	bl	8003bd4 <HAL_FLASH_Program>

    // Write RTC values (stored as bytes)
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 20,
 800e668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e66a:	f103 0114 	add.w	r1, r3, #20
					 (entry.hours << 24) | (entry.minutes << 16) | (entry.date << 8) | entry.month);
 800e66e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e672:	061a      	lsls	r2, r3, #24
 800e674:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800e678:	041b      	lsls	r3, r3, #16
 800e67a:	431a      	orrs	r2, r3
 800e67c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e680:	021b      	lsls	r3, r3, #8
 800e682:	4313      	orrs	r3, r2
 800e684:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e688:	4313      	orrs	r3, r2
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 20,
 800e68a:	17da      	asrs	r2, r3, #31
 800e68c:	603b      	str	r3, [r7, #0]
 800e68e:	607a      	str	r2, [r7, #4]
 800e690:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e694:	2002      	movs	r0, #2
 800e696:	f7f5 fa9d 	bl	8003bd4 <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sectorBaseAddress + 24, entry.year);  // year
 800e69a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e69c:	f103 0118 	add.w	r1, r3, #24
 800e6a0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	469a      	mov	sl, r3
 800e6aa:	4693      	mov	fp, r2
 800e6ac:	4652      	mov	r2, sl
 800e6ae:	465b      	mov	r3, fp
 800e6b0:	2002      	movs	r0, #2
 800e6b2:	f7f5 fa8f 	bl	8003bd4 <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 800e6b6:	f7f5 fb03 	bl	8003cc0 <HAL_FLASH_Lock>

    // Update index for the next write
    flash_index = (flash_index + 1) % MAX_BIL_READINGS;
 800e6ba:	4b0f      	ldr	r3, [pc, #60]	@ (800e6f8 <SaveBilResultToFlash+0x19c>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	1c59      	adds	r1, r3, #1
 800e6c0:	4b18      	ldr	r3, [pc, #96]	@ (800e724 <SaveBilResultToFlash+0x1c8>)
 800e6c2:	fba3 2301 	umull	r2, r3, r3, r1
 800e6c6:	1aca      	subs	r2, r1, r3
 800e6c8:	0852      	lsrs	r2, r2, #1
 800e6ca:	4413      	add	r3, r2
 800e6cc:	089a      	lsrs	r2, r3, #2
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	00db      	lsls	r3, r3, #3
 800e6d2:	1a9b      	subs	r3, r3, r2
 800e6d4:	1aca      	subs	r2, r1, r3
 800e6d6:	4b08      	ldr	r3, [pc, #32]	@ (800e6f8 <SaveBilResultToFlash+0x19c>)
 800e6d8:	601a      	str	r2, [r3, #0]
    //for (int i = 0; i < 8; i++) ID[i] = 0;  // Reset ID or // memset(ID, 0, sizeof(ID));
    memset(ID, 0, sizeof(ID));
 800e6da:	2208      	movs	r2, #8
 800e6dc:	2100      	movs	r1, #0
 800e6de:	4810      	ldr	r0, [pc, #64]	@ (800e720 <SaveBilResultToFlash+0x1c4>)
 800e6e0:	f002 fe4f 	bl	8011382 <memset>
    memset(Buffered_ID, 0, sizeof(ID));
 800e6e4:	2208      	movs	r2, #8
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	480f      	ldr	r0, [pc, #60]	@ (800e728 <SaveBilResultToFlash+0x1cc>)
 800e6ea:	f002 fe4a 	bl	8011382 <memset>
}
 800e6ee:	bf00      	nop
 800e6f0:	3740      	adds	r7, #64	@ 0x40
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e6f8:	20001f58 	.word	0x20001f58
 800e6fc:	200000bf 	.word	0x200000bf
 800e700:	200000be 	.word	0x200000be
 800e704:	200000bc 	.word	0x200000bc
 800e708:	200000bd 	.word	0x200000bd
 800e70c:	20001fa6 	.word	0x20001fa6
 800e710:	20001fa5 	.word	0x20001fa5
 800e714:	20001fa4 	.word	0x20001fa4
 800e718:	20001f5c 	.word	0x20001f5c
 800e71c:	20001f94 	.word	0x20001f94
 800e720:	20001738 	.word	0x20001738
 800e724:	24924925 	.word	0x24924925
 800e728:	20001720 	.word	0x20001720

0800e72c <ReadBilResultsFromFlash>:

// Function to read all BIL results from flash into a provided array
void ReadBilResultsFromFlash(FlashEntry* readings) {
 800e72c:	b5b0      	push	{r4, r5, r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 800e734:	2300      	movs	r3, #0
 800e736:	617b      	str	r3, [r7, #20]
 800e738:	e020      	b.n	800e77c <ReadBilResultsFromFlash+0x50>
        uint32_t sectorBaseAddress = GetSectorAddress(i + FLASH_START_SECTOR);
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	3305      	adds	r3, #5
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 f844 	bl	800e7cc <GetSectorAddress>
 800e744:	6138      	str	r0, [r7, #16]
        FlashEntry* entry = (FlashEntry*)sectorBaseAddress;
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	60fb      	str	r3, [r7, #12]

        if (entry->magic != MAGIC_NUMBER) {                //EMPTY flash index
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 800e752:	d117      	bne.n	800e784 <ReadBilResultsFromFlash+0x58>
            break;
        }
        //readings[i] = entry->bilValue;
        readings[i] = *entry;
 800e754:	697a      	ldr	r2, [r7, #20]
 800e756:	4613      	mov	r3, r2
 800e758:	00db      	lsls	r3, r3, #3
 800e75a:	1a9b      	subs	r3, r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	461a      	mov	r2, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	441a      	add	r2, r3
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	4614      	mov	r4, r2
 800e768:	461d      	mov	r5, r3
 800e76a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e76c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e76e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    for (int i = 0; i < MAX_BIL_READINGS; i++) {
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	3301      	adds	r3, #1
 800e77a:	617b      	str	r3, [r7, #20]
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	2b06      	cmp	r3, #6
 800e780:	dddb      	ble.n	800e73a <ReadBilResultsFromFlash+0xe>
    }
}
 800e782:	e000      	b.n	800e786 <ReadBilResultsFromFlash+0x5a>
            break;
 800e784:	bf00      	nop
}
 800e786:	bf00      	nop
 800e788:	3718      	adds	r7, #24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bdb0      	pop	{r4, r5, r7, pc}

0800e78e <EraseFlashSector>:

// Function to erase a specific flash sector
void EraseFlashSector(uint32_t sector) {
 800e78e:	b580      	push	{r7, lr}
 800e790:	b088      	sub	sp, #32
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 800e796:	f7f5 fa71 	bl	8003c7c <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t SectorError = 0;
 800e79a:	2300      	movs	r3, #0
 800e79c:	60bb      	str	r3, [r7, #8]

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60fb      	str	r3, [r7, #12]
    eraseInitStruct.Sector = sector;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	617b      	str	r3, [r7, #20]
    eraseInitStruct.NbSectors = 1;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800e7aa:	2302      	movs	r3, #2
 800e7ac:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &SectorError) != HAL_OK) {
 800e7ae:	f107 0208 	add.w	r2, r7, #8
 800e7b2:	f107 030c 	add.w	r3, r7, #12
 800e7b6:	4611      	mov	r1, r2
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7f5 fbc1 	bl	8003f40 <HAL_FLASHEx_Erase>
        // Handle error
    }
    HAL_FLASH_Lock();
 800e7be:	f7f5 fa7f 	bl	8003cc0 <HAL_FLASH_Lock>
}
 800e7c2:	bf00      	nop
 800e7c4:	3720      	adds	r7, #32
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
	...

0800e7cc <GetSectorAddress>:

// Function to get the base address of a given sector
uint32_t GetSectorAddress(uint32_t sector) {
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
    switch (sector) {
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3b05      	subs	r3, #5
 800e7d8:	2b06      	cmp	r3, #6
 800e7da:	d81f      	bhi.n	800e81c <GetSectorAddress+0x50>
 800e7dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e7e4 <GetSectorAddress+0x18>)
 800e7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e2:	bf00      	nop
 800e7e4:	0800e801 	.word	0x0800e801
 800e7e8:	0800e805 	.word	0x0800e805
 800e7ec:	0800e809 	.word	0x0800e809
 800e7f0:	0800e80d 	.word	0x0800e80d
 800e7f4:	0800e811 	.word	0x0800e811
 800e7f8:	0800e815 	.word	0x0800e815
 800e7fc:	0800e819 	.word	0x0800e819
		//case FLASH_SECTOR_1: return 0x08004001;  // Sector 1 (16 KB)
		//case FLASH_SECTOR_2: return 0x08008001;  // Sector 2 (16 KB)
		//case FLASH_SECTOR_3: return 0x0800C000;  // Sector 3 (16 KB)
		//case FLASH_SECTOR_4: return 0x0801FFFF;  // Sector 4 (64 KB)
	    case FLASH_SECTOR_5: return 0x08020000;  // Sector 5 (128 KB)
 800e800:	4b09      	ldr	r3, [pc, #36]	@ (800e828 <GetSectorAddress+0x5c>)
 800e802:	e00b      	b.n	800e81c <GetSectorAddress+0x50>
		case FLASH_SECTOR_6: return 0x08040000;  // Sector 6 (128 KB)
 800e804:	4b09      	ldr	r3, [pc, #36]	@ (800e82c <GetSectorAddress+0x60>)
 800e806:	e009      	b.n	800e81c <GetSectorAddress+0x50>
		case FLASH_SECTOR_7: return 0x08060000;  // Sector 7 (128 KB)
 800e808:	4b09      	ldr	r3, [pc, #36]	@ (800e830 <GetSectorAddress+0x64>)
 800e80a:	e007      	b.n	800e81c <GetSectorAddress+0x50>
		case FLASH_SECTOR_8: return 0x08080000;  // Sector 8 (128 KB)
 800e80c:	4b09      	ldr	r3, [pc, #36]	@ (800e834 <GetSectorAddress+0x68>)
 800e80e:	e005      	b.n	800e81c <GetSectorAddress+0x50>
		case FLASH_SECTOR_9: return 0x080A0000;  // Sector 9 (128 KB)
 800e810:	4b09      	ldr	r3, [pc, #36]	@ (800e838 <GetSectorAddress+0x6c>)
 800e812:	e003      	b.n	800e81c <GetSectorAddress+0x50>
		case FLASH_SECTOR_10: return 0x080C0000;  // Sector 10 (128 KB)
 800e814:	4b09      	ldr	r3, [pc, #36]	@ (800e83c <GetSectorAddress+0x70>)
 800e816:	e001      	b.n	800e81c <GetSectorAddress+0x50>
		case FLASH_SECTOR_11: return 0x080E0000;  // Sector 11 (128 KB)
 800e818:	4b09      	ldr	r3, [pc, #36]	@ (800e840 <GetSectorAddress+0x74>)
 800e81a:	e7ff      	b.n	800e81c <GetSectorAddress+0x50>
		// Add more sectors based on your memory layout
		//default: return 0x08000000;  // Invalid sector (default fallback)
		////default: return 0xFFFFFFFF;  // Invalid sector
    }
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr
 800e828:	08020000 	.word	0x08020000
 800e82c:	08040000 	.word	0x08040000
 800e830:	08060000 	.word	0x08060000
 800e834:	08080000 	.word	0x08080000
 800e838:	080a0000 	.word	0x080a0000
 800e83c:	080c0000 	.word	0x080c0000
 800e840:	080e0000 	.word	0x080e0000

0800e844 <LCD>:
uint8_t filterIndex = 0;       			 // Current index in the filter array
float filteredVoltage = 0.0;    		 // Filtered voltage value
int displayPercFlag = 0;

void LCD(void)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	af00      	add	r7, sp, #0
	LCD_DisplayMenu();
 800e848:	f000 f804 	bl	800e854 <LCD_DisplayMenu>
    LCD_HandleButtonPress();
 800e84c:	f000 fc60 	bl	800f110 <LCD_HandleButtonPress>
}
 800e850:	bf00      	nop
 800e852:	bd80      	pop	{r7, pc}

0800e854 <LCD_DisplayMenu>:


// Function to display the current menu
void LCD_DisplayMenu(void) {
 800e854:	b580      	push	{r7, lr}
 800e856:	b094      	sub	sp, #80	@ 0x50
 800e858:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800e85a:	2000      	movs	r0, #0
 800e85c:	f7f3 f932 	bl	8001ac4 <ssd1306_Fill>
    HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET); // Turn off Indication LED
 800e860:	2200      	movs	r2, #0
 800e862:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e866:	48a7      	ldr	r0, [pc, #668]	@ (800eb04 <LCD_DisplayMenu+0x2b0>)
 800e868:	f7f5 fe40 	bl	80044ec <HAL_GPIO_WritePin>
    DisplayPercentage();
 800e86c:	f001 f91a 	bl	800faa4 <DisplayPercentage>
    RTC_DisplayTime();
 800e870:	f001 fc2c 	bl	80100cc <RTC_DisplayTime>
    TimeSetDone=0;
 800e874:	4ba4      	ldr	r3, [pc, #656]	@ (800eb08 <LCD_DisplayMenu+0x2b4>)
 800e876:	2200      	movs	r2, #0
 800e878:	601a      	str	r2, [r3, #0]
    //strncpy(entry.patientID, ID, sizeof(entry.patientID));  // Copy the ID
    HAL_GPIO_WritePin(GPIOD, Bcode_INIT_Pin, GPIO_PIN_RESET); 				// Turn off BT
 800e87a:	2200      	movs	r2, #0
 800e87c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800e880:	48a2      	ldr	r0, [pc, #648]	@ (800eb0c <LCD_DisplayMenu+0x2b8>)
 800e882:	f7f5 fe33 	bl	80044ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, BT_INIT_Pin, GPIO_PIN_RESET); 				    // Turn off BT
 800e886:	2200      	movs	r2, #0
 800e888:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e88c:	489f      	ldr	r0, [pc, #636]	@ (800eb0c <LCD_DisplayMenu+0x2b8>)
 800e88e:	f7f5 fe2d 	bl	80044ec <HAL_GPIO_WritePin>

    switch (currentMenu)
 800e892:	4b9f      	ldr	r3, [pc, #636]	@ (800eb10 <LCD_DisplayMenu+0x2bc>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	2b06      	cmp	r3, #6
 800e898:	f200 8402 	bhi.w	800f0a0 <LCD_DisplayMenu+0x84c>
 800e89c:	a201      	add	r2, pc, #4	@ (adr r2, 800e8a4 <LCD_DisplayMenu+0x50>)
 800e89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a2:	bf00      	nop
 800e8a4:	0800e8c1 	.word	0x0800e8c1
 800e8a8:	0800e921 	.word	0x0800e921
 800e8ac:	0800ea01 	.word	0x0800ea01
 800e8b0:	0800ebaf 	.word	0x0800ebaf
 800e8b4:	0800ecf5 	.word	0x0800ecf5
 800e8b8:	0800ef77 	.word	0x0800ef77
 800e8bc:	0800ee2d 	.word	0x0800ee2d
    {
    	case MENU_START_DEV:
			ssd1306_SetCursor(0, 0);
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	f7f3 fa48 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_DrawBitmap(0,0,image_data_logo_text,128,32, White );          //AYMED text
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	9301      	str	r3, [sp, #4]
 800e8cc:	2320      	movs	r3, #32
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	2380      	movs	r3, #128	@ 0x80
 800e8d2:	4a90      	ldr	r2, [pc, #576]	@ (800eb14 <LCD_DisplayMenu+0x2c0>)
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	f7f3 faa4 	bl	8001e24 <ssd1306_DrawBitmap>
			//---------------------------------------------------//
			ssd1306_SetCursor(34, 38);  //48
 800e8dc:	2126      	movs	r1, #38	@ 0x26
 800e8de:	2022      	movs	r0, #34	@ 0x22
 800e8e0:	f7f3 fa3a 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("VISHNE v4", Font_7x10, White);					  //Device's Version
 800e8e4:	4b8c      	ldr	r3, [pc, #560]	@ (800eb18 <LCD_DisplayMenu+0x2c4>)
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	9200      	str	r2, [sp, #0]
 800e8ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e8ec:	488b      	ldr	r0, [pc, #556]	@ (800eb1c <LCD_DisplayMenu+0x2c8>)
 800e8ee:	f7f3 fa0d 	bl	8001d0c <ssd1306_WriteString>
			//---------------------------------------------------//
			ssd1306_SetCursor(5, 55);  //48
 800e8f2:	2137      	movs	r1, #55	@ 0x37
 800e8f4:	2005      	movs	r0, #5
 800e8f6:	f7f3 fa2f 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("EnterID", Font_6x8, White);		         // Prev btn (left) -> with ID
 800e8fa:	4b89      	ldr	r3, [pc, #548]	@ (800eb20 <LCD_DisplayMenu+0x2cc>)
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	9200      	str	r2, [sp, #0]
 800e900:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e902:	4888      	ldr	r0, [pc, #544]	@ (800eb24 <LCD_DisplayMenu+0x2d0>)
 800e904:	f7f3 fa02 	bl	8001d0c <ssd1306_WriteString>
			ssd1306_SetCursor(90, 55);  //48
 800e908:	2137      	movs	r1, #55	@ 0x37
 800e90a:	205a      	movs	r0, #90	@ 0x5a
 800e90c:	f7f3 fa24 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("SkipID", Font_6x8, White);					 // Next btn (right)-> without ID
 800e910:	4b83      	ldr	r3, [pc, #524]	@ (800eb20 <LCD_DisplayMenu+0x2cc>)
 800e912:	2201      	movs	r2, #1
 800e914:	9200      	str	r2, [sp, #0]
 800e916:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e918:	4883      	ldr	r0, [pc, #524]	@ (800eb28 <LCD_DisplayMenu+0x2d4>)
 800e91a:	f7f3 f9f7 	bl	8001d0c <ssd1306_WriteString>

    		break;
 800e91e:	e3bf      	b.n	800f0a0 <LCD_DisplayMenu+0x84c>
      // New menu for scanning patient ID
		case MENU_READ_ID:
			HAL_GPIO_WritePin(GPIOD, Bcode_INIT_Pin, GPIO_PIN_SET); 				// Turn on BT
 800e920:	2201      	movs	r2, #1
 800e922:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800e926:	4879      	ldr	r0, [pc, #484]	@ (800eb0c <LCD_DisplayMenu+0x2b8>)
 800e928:	f7f5 fde0 	bl	80044ec <HAL_GPIO_WritePin>
			ssd1306_SetCursor(5, 56);
 800e92c:	2138      	movs	r1, #56	@ 0x38
 800e92e:	2005      	movs	r0, #5
 800e930:	f7f3 fa12 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800e934:	4b7a      	ldr	r3, [pc, #488]	@ (800eb20 <LCD_DisplayMenu+0x2cc>)
 800e936:	2201      	movs	r2, #1
 800e938:	9200      	str	r2, [sp, #0]
 800e93a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e93c:	487b      	ldr	r0, [pc, #492]	@ (800eb2c <LCD_DisplayMenu+0x2d8>)
 800e93e:	f7f3 f9e5 	bl	8001d0c <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800e942:	2138      	movs	r1, #56	@ 0x38
 800e944:	2066      	movs	r0, #102	@ 0x66
 800e946:	f7f3 fa07 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800e94a:	4b75      	ldr	r3, [pc, #468]	@ (800eb20 <LCD_DisplayMenu+0x2cc>)
 800e94c:	2201      	movs	r2, #1
 800e94e:	9200      	str	r2, [sp, #0]
 800e950:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e952:	4877      	ldr	r0, [pc, #476]	@ (800eb30 <LCD_DisplayMenu+0x2dc>)
 800e954:	f7f3 f9da 	bl	8001d0c <ssd1306_WriteString>
			//ssd1306_SetCursor(10, 0);
			//ssd1306_WriteString("Scan ID", Font_7x10, White);
			ssd1306_SetCursor(10, 15);
 800e958:	210f      	movs	r1, #15
 800e95a:	200a      	movs	r0, #10
 800e95c:	f7f3 f9fc 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("Patient ID:", Font_7x10, White);
 800e960:	4b6d      	ldr	r3, [pc, #436]	@ (800eb18 <LCD_DisplayMenu+0x2c4>)
 800e962:	2201      	movs	r2, #1
 800e964:	9200      	str	r2, [sp, #0]
 800e966:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e968:	4872      	ldr	r0, [pc, #456]	@ (800eb34 <LCD_DisplayMenu+0x2e0>)
 800e96a:	f7f3 f9cf 	bl	8001d0c <ssd1306_WriteString>
			ssd1306_SetCursor(10, 35);
 800e96e:	2123      	movs	r1, #35	@ 0x23
 800e970:	200a      	movs	r0, #10
 800e972:	f7f3 f9f1 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString(ID, Font_11x18, White);  //Font_11x18 // Display scanned ID
 800e976:	4b70      	ldr	r3, [pc, #448]	@ (800eb38 <LCD_DisplayMenu+0x2e4>)
 800e978:	2201      	movs	r2, #1
 800e97a:	9200      	str	r2, [sp, #0]
 800e97c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e97e:	486f      	ldr	r0, [pc, #444]	@ (800eb3c <LCD_DisplayMenu+0x2e8>)
 800e980:	f7f3 f9c4 	bl	8001d0c <ssd1306_WriteString>

			if (strlen(ID) == 0) {
 800e984:	4b6d      	ldr	r3, [pc, #436]	@ (800eb3c <LCD_DisplayMenu+0x2e8>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f040 8384 	bne.w	800f096 <LCD_DisplayMenu+0x842>
				ssd1306_SetCursor(10, 35);
 800e98e:	2123      	movs	r1, #35	@ 0x23
 800e990:	200a      	movs	r0, #10
 800e992:	f7f3 f9e1 	bl	8001d58 <ssd1306_SetCursor>
				//ssd1306_WriteString("Waiting for ID", Font_7x10, White); // Display message if no ID scanned

				// Generate moving dots based on the dotCounter
				switch (dotCounter % 3) {
 800e996:	4b6a      	ldr	r3, [pc, #424]	@ (800eb40 <LCD_DisplayMenu+0x2ec>)
 800e998:	6819      	ldr	r1, [r3, #0]
 800e99a:	4b6a      	ldr	r3, [pc, #424]	@ (800eb44 <LCD_DisplayMenu+0x2f0>)
 800e99c:	fb83 3201 	smull	r3, r2, r3, r1
 800e9a0:	17cb      	asrs	r3, r1, #31
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	0052      	lsls	r2, r2, #1
 800e9a8:	441a      	add	r2, r3
 800e9aa:	1a8b      	subs	r3, r1, r2
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d016      	beq.n	800e9de <LCD_DisplayMenu+0x18a>
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	dc1c      	bgt.n	800e9ee <LCD_DisplayMenu+0x19a>
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d002      	beq.n	800e9be <LCD_DisplayMenu+0x16a>
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d008      	beq.n	800e9ce <LCD_DisplayMenu+0x17a>
 800e9bc:	e017      	b.n	800e9ee <LCD_DisplayMenu+0x19a>
					case 0:
						ssd1306_WriteString("Wait for ID .", Font_7x10, White);  // One dot
 800e9be:	4b56      	ldr	r3, [pc, #344]	@ (800eb18 <LCD_DisplayMenu+0x2c4>)
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	9200      	str	r2, [sp, #0]
 800e9c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9c6:	4860      	ldr	r0, [pc, #384]	@ (800eb48 <LCD_DisplayMenu+0x2f4>)
 800e9c8:	f7f3 f9a0 	bl	8001d0c <ssd1306_WriteString>
						break;
 800e9cc:	e00f      	b.n	800e9ee <LCD_DisplayMenu+0x19a>
					case 1:
						ssd1306_WriteString("Wait for ID ..", Font_7x10, White);  // Two dots
 800e9ce:	4b52      	ldr	r3, [pc, #328]	@ (800eb18 <LCD_DisplayMenu+0x2c4>)
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	9200      	str	r2, [sp, #0]
 800e9d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9d6:	485d      	ldr	r0, [pc, #372]	@ (800eb4c <LCD_DisplayMenu+0x2f8>)
 800e9d8:	f7f3 f998 	bl	8001d0c <ssd1306_WriteString>
						break;
 800e9dc:	e007      	b.n	800e9ee <LCD_DisplayMenu+0x19a>
					case 2:
						ssd1306_WriteString("Wait for ID ...", Font_7x10, White);  // Three dots
 800e9de:	4b4e      	ldr	r3, [pc, #312]	@ (800eb18 <LCD_DisplayMenu+0x2c4>)
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	9200      	str	r2, [sp, #0]
 800e9e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9e6:	485a      	ldr	r0, [pc, #360]	@ (800eb50 <LCD_DisplayMenu+0x2fc>)
 800e9e8:	f7f3 f990 	bl	8001d0c <ssd1306_WriteString>
						break;
 800e9ec:	bf00      	nop
				}
				// Increment dotCounter to cycle through dots
				//dotCounter++;   // TIM10 used
				if (dotCounter >= 60) {  // Reset counter after 60 refresh cycles (arbitrary limit)
 800e9ee:	4b54      	ldr	r3, [pc, #336]	@ (800eb40 <LCD_DisplayMenu+0x2ec>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2b3b      	cmp	r3, #59	@ 0x3b
 800e9f4:	f340 834f 	ble.w	800f096 <LCD_DisplayMenu+0x842>
					dotCounter = 0;
 800e9f8:	4b51      	ldr	r3, [pc, #324]	@ (800eb40 <LCD_DisplayMenu+0x2ec>)
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 800e9fe:	e34a      	b.n	800f096 <LCD_DisplayMenu+0x842>

        case MENU_SET_AVG:
			ssd1306_SetCursor(5, 56);
 800ea00:	2138      	movs	r1, #56	@ 0x38
 800ea02:	2005      	movs	r0, #5
 800ea04:	f7f3 f9a8 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800ea08:	4b45      	ldr	r3, [pc, #276]	@ (800eb20 <LCD_DisplayMenu+0x2cc>)
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	9200      	str	r2, [sp, #0]
 800ea0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ea10:	4846      	ldr	r0, [pc, #280]	@ (800eb2c <LCD_DisplayMenu+0x2d8>)
 800ea12:	f7f3 f97b 	bl	8001d0c <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800ea16:	2138      	movs	r1, #56	@ 0x38
 800ea18:	2066      	movs	r0, #102	@ 0x66
 800ea1a:	f7f3 f99d 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800ea1e:	4b40      	ldr	r3, [pc, #256]	@ (800eb20 <LCD_DisplayMenu+0x2cc>)
 800ea20:	2201      	movs	r2, #1
 800ea22:	9200      	str	r2, [sp, #0]
 800ea24:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ea26:	4842      	ldr	r0, [pc, #264]	@ (800eb30 <LCD_DisplayMenu+0x2dc>)
 800ea28:	f7f3 f970 	bl	8001d0c <ssd1306_WriteString>
        	//ssd1306_FillRectangle(126, 0, 128, 128, Black);
        	DisplayPercentage();
 800ea2c:	f001 f83a 	bl	800faa4 <DisplayPercentage>
        	RTC_DisplayTime();
 800ea30:	f001 fb4c 	bl	80100cc <RTC_DisplayTime>
        	testDone=0;                       // Do not read any result here
 800ea34:	4b47      	ldr	r3, [pc, #284]	@ (800eb54 <LCD_DisplayMenu+0x300>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	701a      	strb	r2, [r3, #0]
        	StartTestMenuFlag = 2;            // Not in StartMenu ==> Don't init Spectrometer
 800ea3a:	4b47      	ldr	r3, [pc, #284]	@ (800eb58 <LCD_DisplayMenu+0x304>)
 800ea3c:	2202      	movs	r2, #2
 800ea3e:	601a      	str	r2, [r3, #0]

        	if (currentCursor == CURSOR_ON_MENU) {
 800ea40:	4b46      	ldr	r3, [pc, #280]	@ (800eb5c <LCD_DisplayMenu+0x308>)
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d121      	bne.n	800ea8c <LCD_DisplayMenu+0x238>
				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 800ea48:	4b45      	ldr	r3, [pc, #276]	@ (800eb60 <LCD_DisplayMenu+0x30c>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	3b05      	subs	r3, #5
 800ea50:	b2d8      	uxtb	r0, r3
 800ea52:	4b44      	ldr	r3, [pc, #272]	@ (800eb64 <LCD_DisplayMenu+0x310>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	3b05      	subs	r3, #5
 800ea5a:	b2d9      	uxtb	r1, r3
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	9300      	str	r3, [sp, #0]
 800ea60:	2323      	movs	r3, #35	@ 0x23
 800ea62:	225a      	movs	r2, #90	@ 0x5a
 800ea64:	f7f3 f990 	bl	8001d88 <ssd1306_FillRectangle>
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800ea68:	4b3d      	ldr	r3, [pc, #244]	@ (800eb60 <LCD_DisplayMenu+0x30c>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	4a3d      	ldr	r2, [pc, #244]	@ (800eb64 <LCD_DisplayMenu+0x310>)
 800ea70:	6812      	ldr	r2, [r2, #0]
 800ea72:	b2d2      	uxtb	r2, r2
 800ea74:	4611      	mov	r1, r2
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7f3 f96e 	bl	8001d58 <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, Black);
 800ea7c:	4b26      	ldr	r3, [pc, #152]	@ (800eb18 <LCD_DisplayMenu+0x2c4>)
 800ea7e:	2200      	movs	r2, #0
 800ea80:	9200      	str	r2, [sp, #0]
 800ea82:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ea84:	4838      	ldr	r0, [pc, #224]	@ (800eb68 <LCD_DisplayMenu+0x314>)
 800ea86:	f7f3 f941 	bl	8001d0c <ssd1306_WriteString>
 800ea8a:	e010      	b.n	800eaae <LCD_DisplayMenu+0x25a>
        	}else{
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800ea8c:	4b34      	ldr	r3, [pc, #208]	@ (800eb60 <LCD_DisplayMenu+0x30c>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	4a34      	ldr	r2, [pc, #208]	@ (800eb64 <LCD_DisplayMenu+0x310>)
 800ea94:	6812      	ldr	r2, [r2, #0]
 800ea96:	b2d2      	uxtb	r2, r2
 800ea98:	4611      	mov	r1, r2
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7f3 f95c 	bl	8001d58 <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, White);
 800eaa0:	4b1d      	ldr	r3, [pc, #116]	@ (800eb18 <LCD_DisplayMenu+0x2c4>)
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	9200      	str	r2, [sp, #0]
 800eaa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eaa8:	482f      	ldr	r0, [pc, #188]	@ (800eb68 <LCD_DisplayMenu+0x314>)
 800eaaa:	f7f3 f92f 	bl	8001d0c <ssd1306_WriteString>
        	}


            if (currentCursor == CURSOR_ON_VALUE) {
 800eaae:	4b2b      	ldr	r3, [pc, #172]	@ (800eb5c <LCD_DisplayMenu+0x308>)
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d162      	bne.n	800eb7c <LCD_DisplayMenu+0x328>
            	ssd1306_FillRectangle(set_line_X, set_line_Y, 72, 52, White);
 800eab6:	4b2d      	ldr	r3, [pc, #180]	@ (800eb6c <LCD_DisplayMenu+0x318>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	b2d8      	uxtb	r0, r3
 800eabc:	4b2c      	ldr	r3, [pc, #176]	@ (800eb70 <LCD_DisplayMenu+0x31c>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	b2d9      	uxtb	r1, r3
 800eac2:	2301      	movs	r3, #1
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	2334      	movs	r3, #52	@ 0x34
 800eac8:	2248      	movs	r2, #72	@ 0x48
 800eaca:	f7f3 f95d 	bl	8001d88 <ssd1306_FillRectangle>
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 800eace:	4b27      	ldr	r3, [pc, #156]	@ (800eb6c <LCD_DisplayMenu+0x318>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	4a26      	ldr	r2, [pc, #152]	@ (800eb70 <LCD_DisplayMenu+0x31c>)
 800ead6:	6812      	ldr	r2, [r2, #0]
 800ead8:	b2d2      	uxtb	r2, r2
 800eada:	4611      	mov	r1, r2
 800eadc:	4618      	mov	r0, r3
 800eade:	f7f3 f93b 	bl	8001d58 <ssd1306_SetCursor>
            	 char avgStr[10];
				 snprintf(avgStr, sizeof(avgStr), "-%d-", avgValue);
 800eae2:	4b24      	ldr	r3, [pc, #144]	@ (800eb74 <LCD_DisplayMenu+0x320>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f107 0010 	add.w	r0, r7, #16
 800eaea:	4a23      	ldr	r2, [pc, #140]	@ (800eb78 <LCD_DisplayMenu+0x324>)
 800eaec:	210a      	movs	r1, #10
 800eaee:	f002 fbb7 	bl	8011260 <sniprintf>
				 ssd1306_WriteString(avgStr, Font_11x18, Black);
 800eaf2:	4b11      	ldr	r3, [pc, #68]	@ (800eb38 <LCD_DisplayMenu+0x2e4>)
 800eaf4:	f107 0010 	add.w	r0, r7, #16
 800eaf8:	2200      	movs	r2, #0
 800eafa:	9200      	str	r2, [sp, #0]
 800eafc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eafe:	f7f3 f905 	bl	8001d0c <ssd1306_WriteString>
            	char avgStr[10];
				snprintf(avgStr, sizeof(avgStr), "-%d-", avgValue);
				ssd1306_WriteString(avgStr, Font_11x18, White);
            }

            break;
 800eb02:	e2cd      	b.n	800f0a0 <LCD_DisplayMenu+0x84c>
 800eb04:	40021000 	.word	0x40021000
 800eb08:	20001fa0 	.word	0x20001fa0
 800eb0c:	40020c00 	.word	0x40020c00
 800eb10:	20001f60 	.word	0x20001f60
 800eb14:	0801531c 	.word	0x0801531c
 800eb18:	08014fd4 	.word	0x08014fd4
 800eb1c:	080133dc 	.word	0x080133dc
 800eb20:	08014fc8 	.word	0x08014fc8
 800eb24:	080133e8 	.word	0x080133e8
 800eb28:	080133f0 	.word	0x080133f0
 800eb2c:	080133f8 	.word	0x080133f8
 800eb30:	08013400 	.word	0x08013400
 800eb34:	08013408 	.word	0x08013408
 800eb38:	08014fe0 	.word	0x08014fe0
 800eb3c:	20001738 	.word	0x20001738
 800eb40:	20001fc8 	.word	0x20001fc8
 800eb44:	55555556 	.word	0x55555556
 800eb48:	08013414 	.word	0x08013414
 800eb4c:	08013424 	.word	0x08013424
 800eb50:	08013434 	.word	0x08013434
 800eb54:	20001f46 	.word	0x20001f46
 800eb58:	20001f9c 	.word	0x20001f9c
 800eb5c:	20001f61 	.word	0x20001f61
 800eb60:	200000ac 	.word	0x200000ac
 800eb64:	200000b0 	.word	0x200000b0
 800eb68:	08013444 	.word	0x08013444
 800eb6c:	200000b4 	.word	0x200000b4
 800eb70:	200000b8 	.word	0x200000b8
 800eb74:	2000009c 	.word	0x2000009c
 800eb78:	0801344c 	.word	0x0801344c
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 800eb7c:	4b90      	ldr	r3, [pc, #576]	@ (800edc0 <LCD_DisplayMenu+0x56c>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	b2db      	uxtb	r3, r3
 800eb82:	4a90      	ldr	r2, [pc, #576]	@ (800edc4 <LCD_DisplayMenu+0x570>)
 800eb84:	6812      	ldr	r2, [r2, #0]
 800eb86:	b2d2      	uxtb	r2, r2
 800eb88:	4611      	mov	r1, r2
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7f3 f8e4 	bl	8001d58 <ssd1306_SetCursor>
				snprintf(avgStr, sizeof(avgStr), "-%d-", avgValue);
 800eb90:	4b8d      	ldr	r3, [pc, #564]	@ (800edc8 <LCD_DisplayMenu+0x574>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	1d38      	adds	r0, r7, #4
 800eb96:	4a8d      	ldr	r2, [pc, #564]	@ (800edcc <LCD_DisplayMenu+0x578>)
 800eb98:	210a      	movs	r1, #10
 800eb9a:	f002 fb61 	bl	8011260 <sniprintf>
				ssd1306_WriteString(avgStr, Font_11x18, White);
 800eb9e:	4b8c      	ldr	r3, [pc, #560]	@ (800edd0 <LCD_DisplayMenu+0x57c>)
 800eba0:	1d38      	adds	r0, r7, #4
 800eba2:	2201      	movs	r2, #1
 800eba4:	9200      	str	r2, [sp, #0]
 800eba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eba8:	f7f3 f8b0 	bl	8001d0c <ssd1306_WriteString>
            break;
 800ebac:	e278      	b.n	800f0a0 <LCD_DisplayMenu+0x84c>

        case MENU_START_TEST:
			ssd1306_SetCursor(5, 56);
 800ebae:	2138      	movs	r1, #56	@ 0x38
 800ebb0:	2005      	movs	r0, #5
 800ebb2:	f7f3 f8d1 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800ebb6:	4b87      	ldr	r3, [pc, #540]	@ (800edd4 <LCD_DisplayMenu+0x580>)
 800ebb8:	2201      	movs	r2, #1
 800ebba:	9200      	str	r2, [sp, #0]
 800ebbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ebbe:	4886      	ldr	r0, [pc, #536]	@ (800edd8 <LCD_DisplayMenu+0x584>)
 800ebc0:	f7f3 f8a4 	bl	8001d0c <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800ebc4:	2138      	movs	r1, #56	@ 0x38
 800ebc6:	2066      	movs	r0, #102	@ 0x66
 800ebc8:	f7f3 f8c6 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800ebcc:	4b81      	ldr	r3, [pc, #516]	@ (800edd4 <LCD_DisplayMenu+0x580>)
 800ebce:	2201      	movs	r2, #1
 800ebd0:	9200      	str	r2, [sp, #0]
 800ebd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ebd4:	4881      	ldr	r0, [pc, #516]	@ (800eddc <LCD_DisplayMenu+0x588>)
 800ebd6:	f7f3 f899 	bl	8001d0c <ssd1306_WriteString>
        	DisplayPercentage();
 800ebda:	f000 ff63 	bl	800faa4 <DisplayPercentage>
        	RTC_DisplayTime();
 800ebde:	f001 fa75 	bl	80100cc <RTC_DisplayTime>
        	StartTestMenuFlag = 1;						//  in StartMenu
 800ebe2:	4b7f      	ldr	r3, [pc, #508]	@ (800ede0 <LCD_DisplayMenu+0x58c>)
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU){
 800ebe8:	4b7e      	ldr	r3, [pc, #504]	@ (800ede4 <LCD_DisplayMenu+0x590>)
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d120      	bne.n	800ec32 <LCD_DisplayMenu+0x3de>
            	ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 100, 35, White);
 800ebf0:	4b7d      	ldr	r3, [pc, #500]	@ (800ede8 <LCD_DisplayMenu+0x594>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	3b05      	subs	r3, #5
 800ebf8:	b2d8      	uxtb	r0, r3
 800ebfa:	4b7c      	ldr	r3, [pc, #496]	@ (800edec <LCD_DisplayMenu+0x598>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	3b05      	subs	r3, #5
 800ec02:	b2d9      	uxtb	r1, r3
 800ec04:	2301      	movs	r3, #1
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	2323      	movs	r3, #35	@ 0x23
 800ec0a:	2264      	movs	r2, #100	@ 0x64
 800ec0c:	f7f3 f8bc 	bl	8001d88 <ssd1306_FillRectangle>
            	ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800ec10:	4b75      	ldr	r3, [pc, #468]	@ (800ede8 <LCD_DisplayMenu+0x594>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	4a75      	ldr	r2, [pc, #468]	@ (800edec <LCD_DisplayMenu+0x598>)
 800ec18:	6812      	ldr	r2, [r2, #0]
 800ec1a:	b2d2      	uxtb	r2, r2
 800ec1c:	4611      	mov	r1, r2
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7f3 f89a 	bl	8001d58 <ssd1306_SetCursor>
				ssd1306_WriteString("StartTest", Font_7x10, Black);
 800ec24:	4b72      	ldr	r3, [pc, #456]	@ (800edf0 <LCD_DisplayMenu+0x59c>)
 800ec26:	2200      	movs	r2, #0
 800ec28:	9200      	str	r2, [sp, #0]
 800ec2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ec2c:	4871      	ldr	r0, [pc, #452]	@ (800edf4 <LCD_DisplayMenu+0x5a0>)
 800ec2e:	f7f3 f86d 	bl	8001d0c <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 10, set_line_Y);
 800ec32:	4b63      	ldr	r3, [pc, #396]	@ (800edc0 <LCD_DisplayMenu+0x56c>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	b2db      	uxtb	r3, r3
 800ec38:	3b0a      	subs	r3, #10
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	4a61      	ldr	r2, [pc, #388]	@ (800edc4 <LCD_DisplayMenu+0x570>)
 800ec3e:	6812      	ldr	r2, [r2, #0]
 800ec40:	b2d2      	uxtb	r2, r2
 800ec42:	4611      	mov	r1, r2
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7f3 f887 	bl	8001d58 <ssd1306_SetCursor>
            char testStr[20];
            snprintf(testStr, sizeof(testStr), "%d of %d", currentTest, avgValue);
 800ec4a:	4b6b      	ldr	r3, [pc, #428]	@ (800edf8 <LCD_DisplayMenu+0x5a4>)
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	4b5e      	ldr	r3, [pc, #376]	@ (800edc8 <LCD_DisplayMenu+0x574>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	4613      	mov	r3, r2
 800ec5a:	4a68      	ldr	r2, [pc, #416]	@ (800edfc <LCD_DisplayMenu+0x5a8>)
 800ec5c:	2114      	movs	r1, #20
 800ec5e:	f002 faff 	bl	8011260 <sniprintf>
            ssd1306_WriteString(testStr, Font_11x18, White);
 800ec62:	4b5b      	ldr	r3, [pc, #364]	@ (800edd0 <LCD_DisplayMenu+0x57c>)
 800ec64:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800ec68:	2201      	movs	r2, #1
 800ec6a:	9200      	str	r2, [sp, #0]
 800ec6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ec6e:	f7f3 f84d 	bl	8001d0c <ssd1306_WriteString>

            DoesTestComplete();            			    // if test btn pressed ==> ++currentTest
 800ec72:	f001 f8b1 	bl	800fdd8 <DoesTestComplete>

            if (currentTest > avgValue){
 800ec76:	4b60      	ldr	r3, [pc, #384]	@ (800edf8 <LCD_DisplayMenu+0x5a4>)
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	4b53      	ldr	r3, [pc, #332]	@ (800edc8 <LCD_DisplayMenu+0x574>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	dd31      	ble.n	800ece6 <LCD_DisplayMenu+0x492>
            	currentTest = 1;
 800ec82:	4b5d      	ldr	r3, [pc, #372]	@ (800edf8 <LCD_DisplayMenu+0x5a4>)
 800ec84:	2201      	movs	r2, #1
 800ec86:	601a      	str	r2, [r3, #0]
            	//*********Bil_AVG and FlashWrite***********//
            	MeasureAverage(); //HAL_Delay(10);
 800ec88:	f001 f81e 	bl	800fcc8 <MeasureAverage>
            	SaveBilResultToFlash();
 800ec8c:	f7ff fc66 	bl	800e55c <SaveBilResultToFlash>
            	//************RESET************************//
				for (int i = 0; i <= 12-1; i++) BilArray[i]=0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec94:	e009      	b.n	800ecaa <LCD_DisplayMenu+0x456>
 800ec96:	4a5a      	ldr	r2, [pc, #360]	@ (800ee00 <LCD_DisplayMenu+0x5ac>)
 800ec98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	4413      	add	r3, r2
 800ec9e:	f04f 0200 	mov.w	r2, #0
 800eca2:	601a      	str	r2, [r3, #0]
 800eca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eca6:	3301      	adds	r3, #1
 800eca8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecac:	2b0b      	cmp	r3, #11
 800ecae:	ddf2      	ble.n	800ec96 <LCD_DisplayMenu+0x442>
				SumBil = 0;
 800ecb0:	4b54      	ldr	r3, [pc, #336]	@ (800ee04 <LCD_DisplayMenu+0x5b0>)
 800ecb2:	f04f 0200 	mov.w	r2, #0
 800ecb6:	601a      	str	r2, [r3, #0]
				//AveragedBil = 0;                 // Flashing done but Displaying on LCD -> can not reset
				BilResult=0;
 800ecb8:	4b53      	ldr	r3, [pc, #332]	@ (800ee08 <LCD_DisplayMenu+0x5b4>)
 800ecba:	f04f 0200 	mov.w	r2, #0
 800ecbe:	601a      	str	r2, [r3, #0]
				memset(ID, 0, sizeof(ID));         //Bcode reset
 800ecc0:	2208      	movs	r2, #8
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	4851      	ldr	r0, [pc, #324]	@ (800ee0c <LCD_DisplayMenu+0x5b8>)
 800ecc6:	f002 fb5c 	bl	8011382 <memset>
				memset(Buffered_ID, 0, sizeof(ID));
 800ecca:	2208      	movs	r2, #8
 800eccc:	2100      	movs	r1, #0
 800ecce:	4850      	ldr	r0, [pc, #320]	@ (800ee10 <LCD_DisplayMenu+0x5bc>)
 800ecd0:	f002 fb57 	bl	8011382 <memset>
				ID_idx=0;
 800ecd4:	4b4f      	ldr	r3, [pc, #316]	@ (800ee14 <LCD_DisplayMenu+0x5c0>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	601a      	str	r2, [r3, #0]
            	//***********************//
                currentMenu = MENU_SHOW_RESULT;
 800ecda:	4b4f      	ldr	r3, [pc, #316]	@ (800ee18 <LCD_DisplayMenu+0x5c4>)
 800ecdc:	2204      	movs	r2, #4
 800ecde:	701a      	strb	r2, [r3, #0]
                LCD_DisplayMenu();
 800ece0:	f7ff fdb8 	bl	800e854 <LCD_DisplayMenu>
            } else {                                   // Test not performed yet
                // Turn on the indication LED (READY)
                HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_SET); 			// IND LED
            }
            break;
 800ece4:	e1dc      	b.n	800f0a0 <LCD_DisplayMenu+0x84c>
                HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_SET); 			// IND LED
 800ece6:	2201      	movs	r2, #1
 800ece8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ecec:	484b      	ldr	r0, [pc, #300]	@ (800ee1c <LCD_DisplayMenu+0x5c8>)
 800ecee:	f7f5 fbfd 	bl	80044ec <HAL_GPIO_WritePin>
            break;
 800ecf2:	e1d5      	b.n	800f0a0 <LCD_DisplayMenu+0x84c>

        case MENU_SHOW_RESULT:
			ssd1306_SetCursor(5, 56);
 800ecf4:	2138      	movs	r1, #56	@ 0x38
 800ecf6:	2005      	movs	r0, #5
 800ecf8:	f7f3 f82e 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800ecfc:	4b35      	ldr	r3, [pc, #212]	@ (800edd4 <LCD_DisplayMenu+0x580>)
 800ecfe:	2201      	movs	r2, #1
 800ed00:	9200      	str	r2, [sp, #0]
 800ed02:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed04:	4834      	ldr	r0, [pc, #208]	@ (800edd8 <LCD_DisplayMenu+0x584>)
 800ed06:	f7f3 f801 	bl	8001d0c <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800ed0a:	2138      	movs	r1, #56	@ 0x38
 800ed0c:	2066      	movs	r0, #102	@ 0x66
 800ed0e:	f7f3 f823 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800ed12:	4b30      	ldr	r3, [pc, #192]	@ (800edd4 <LCD_DisplayMenu+0x580>)
 800ed14:	2201      	movs	r2, #1
 800ed16:	9200      	str	r2, [sp, #0]
 800ed18:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed1a:	4830      	ldr	r0, [pc, #192]	@ (800eddc <LCD_DisplayMenu+0x588>)
 800ed1c:	f7f2 fff6 	bl	8001d0c <ssd1306_WriteString>
        	DisplayPercentage();
 800ed20:	f000 fec0 	bl	800faa4 <DisplayPercentage>
        	RTC_DisplayTime();
 800ed24:	f001 f9d2 	bl	80100cc <RTC_DisplayTime>
        	StartTestMenuFlag = 2;						// Not in StartMenu ==> Don't init Spectrometer
 800ed28:	4b2d      	ldr	r3, [pc, #180]	@ (800ede0 <LCD_DisplayMenu+0x58c>)
 800ed2a:	2202      	movs	r2, #2
 800ed2c:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU){
 800ed2e:	4b2d      	ldr	r3, [pc, #180]	@ (800ede4 <LCD_DisplayMenu+0x590>)
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d120      	bne.n	800ed78 <LCD_DisplayMenu+0x524>
				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 800ed36:	4b2c      	ldr	r3, [pc, #176]	@ (800ede8 <LCD_DisplayMenu+0x594>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	3b05      	subs	r3, #5
 800ed3e:	b2d8      	uxtb	r0, r3
 800ed40:	4b2a      	ldr	r3, [pc, #168]	@ (800edec <LCD_DisplayMenu+0x598>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	3b05      	subs	r3, #5
 800ed48:	b2d9      	uxtb	r1, r3
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	2323      	movs	r3, #35	@ 0x23
 800ed50:	225a      	movs	r2, #90	@ 0x5a
 800ed52:	f7f3 f819 	bl	8001d88 <ssd1306_FillRectangle>
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800ed56:	4b24      	ldr	r3, [pc, #144]	@ (800ede8 <LCD_DisplayMenu+0x594>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	4a23      	ldr	r2, [pc, #140]	@ (800edec <LCD_DisplayMenu+0x598>)
 800ed5e:	6812      	ldr	r2, [r2, #0]
 800ed60:	b2d2      	uxtb	r2, r2
 800ed62:	4611      	mov	r1, r2
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7f2 fff7 	bl	8001d58 <ssd1306_SetCursor>
				ssd1306_WriteString(" Result", Font_7x10, Black);
 800ed6a:	4b21      	ldr	r3, [pc, #132]	@ (800edf0 <LCD_DisplayMenu+0x59c>)
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	9200      	str	r2, [sp, #0]
 800ed70:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed72:	482b      	ldr	r0, [pc, #172]	@ (800ee20 <LCD_DisplayMenu+0x5cc>)
 800ed74:	f7f2 ffca 	bl	8001d0c <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 25, set_line_Y);
 800ed78:	4b11      	ldr	r3, [pc, #68]	@ (800edc0 <LCD_DisplayMenu+0x56c>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	3b19      	subs	r3, #25
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	4a10      	ldr	r2, [pc, #64]	@ (800edc4 <LCD_DisplayMenu+0x570>)
 800ed84:	6812      	ldr	r2, [r2, #0]
 800ed86:	b2d2      	uxtb	r2, r2
 800ed88:	4611      	mov	r1, r2
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7f2 ffe4 	bl	8001d58 <ssd1306_SetCursor>
            char bilStr[20];
            snprintf(bilStr, sizeof(bilStr), "%.2f mg/dL", AveragedBil);
 800ed90:	4b24      	ldr	r3, [pc, #144]	@ (800ee24 <LCD_DisplayMenu+0x5d0>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7f1 fbe7 	bl	8000568 <__aeabi_f2d>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	f107 001c 	add.w	r0, r7, #28
 800eda2:	e9cd 2300 	strd	r2, r3, [sp]
 800eda6:	4a20      	ldr	r2, [pc, #128]	@ (800ee28 <LCD_DisplayMenu+0x5d4>)
 800eda8:	2114      	movs	r1, #20
 800edaa:	f002 fa59 	bl	8011260 <sniprintf>
            ssd1306_WriteString(bilStr, Font_11x18, White);
 800edae:	4b08      	ldr	r3, [pc, #32]	@ (800edd0 <LCD_DisplayMenu+0x57c>)
 800edb0:	f107 001c 	add.w	r0, r7, #28
 800edb4:	2201      	movs	r2, #1
 800edb6:	9200      	str	r2, [sp, #0]
 800edb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800edba:	f7f2 ffa7 	bl	8001d0c <ssd1306_WriteString>
            break;
 800edbe:	e16f      	b.n	800f0a0 <LCD_DisplayMenu+0x84c>
 800edc0:	200000b4 	.word	0x200000b4
 800edc4:	200000b8 	.word	0x200000b8
 800edc8:	2000009c 	.word	0x2000009c
 800edcc:	0801344c 	.word	0x0801344c
 800edd0:	08014fe0 	.word	0x08014fe0
 800edd4:	08014fc8 	.word	0x08014fc8
 800edd8:	080133f8 	.word	0x080133f8
 800eddc:	08013400 	.word	0x08013400
 800ede0:	20001f9c 	.word	0x20001f9c
 800ede4:	20001f61 	.word	0x20001f61
 800ede8:	200000ac 	.word	0x200000ac
 800edec:	200000b0 	.word	0x200000b0
 800edf0:	08014fd4 	.word	0x08014fd4
 800edf4:	08013454 	.word	0x08013454
 800edf8:	200000a0 	.word	0x200000a0
 800edfc:	08013460 	.word	0x08013460
 800ee00:	20001f64 	.word	0x20001f64
 800ee04:	20001f98 	.word	0x20001f98
 800ee08:	20001f54 	.word	0x20001f54
 800ee0c:	20001738 	.word	0x20001738
 800ee10:	20001720 	.word	0x20001720
 800ee14:	20001734 	.word	0x20001734
 800ee18:	20001f60 	.word	0x20001f60
 800ee1c:	40021000 	.word	0x40021000
 800ee20:	0801346c 	.word	0x0801346c
 800ee24:	20001f94 	.word	0x20001f94
 800ee28:	08013474 	.word	0x08013474

        case MENU_EDIT_RTC:
			ssd1306_SetCursor(5, 56);
 800ee2c:	2138      	movs	r1, #56	@ 0x38
 800ee2e:	2005      	movs	r0, #5
 800ee30:	f7f2 ff92 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800ee34:	4b9d      	ldr	r3, [pc, #628]	@ (800f0ac <LCD_DisplayMenu+0x858>)
 800ee36:	2201      	movs	r2, #1
 800ee38:	9200      	str	r2, [sp, #0]
 800ee3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee3c:	489c      	ldr	r0, [pc, #624]	@ (800f0b0 <LCD_DisplayMenu+0x85c>)
 800ee3e:	f7f2 ff65 	bl	8001d0c <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800ee42:	2138      	movs	r1, #56	@ 0x38
 800ee44:	2066      	movs	r0, #102	@ 0x66
 800ee46:	f7f2 ff87 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800ee4a:	4b98      	ldr	r3, [pc, #608]	@ (800f0ac <LCD_DisplayMenu+0x858>)
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	9200      	str	r2, [sp, #0]
 800ee50:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee52:	4898      	ldr	r0, [pc, #608]	@ (800f0b4 <LCD_DisplayMenu+0x860>)
 800ee54:	f7f2 ff5a 	bl	8001d0c <ssd1306_WriteString>

        	DisplayPercentage();
 800ee58:	f000 fe24 	bl	800faa4 <DisplayPercentage>
        	RTC_DisplayTime();
 800ee5c:	f001 f936 	bl	80100cc <RTC_DisplayTime>
        	StartTestMenuFlag = 2;						// Not in StartMenu ==> Don't init Spectrometer
 800ee60:	4b95      	ldr	r3, [pc, #596]	@ (800f0b8 <LCD_DisplayMenu+0x864>)
 800ee62:	2202      	movs	r2, #2
 800ee64:	601a      	str	r2, [r3, #0]
        	if (currentCursor == CURSOR_ON_MENU){
 800ee66:	4b95      	ldr	r3, [pc, #596]	@ (800f0bc <LCD_DisplayMenu+0x868>)
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d167      	bne.n	800ef3e <LCD_DisplayMenu+0x6ea>

				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 34, White);
 800ee6e:	4b94      	ldr	r3, [pc, #592]	@ (800f0c0 <LCD_DisplayMenu+0x86c>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	3b05      	subs	r3, #5
 800ee76:	b2d8      	uxtb	r0, r3
 800ee78:	4b92      	ldr	r3, [pc, #584]	@ (800f0c4 <LCD_DisplayMenu+0x870>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	3b05      	subs	r3, #5
 800ee80:	b2d9      	uxtb	r1, r3
 800ee82:	2301      	movs	r3, #1
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	2322      	movs	r3, #34	@ 0x22
 800ee88:	225a      	movs	r2, #90	@ 0x5a
 800ee8a:	f7f2 ff7d 	bl	8001d88 <ssd1306_FillRectangle>

				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800ee8e:	4b8c      	ldr	r3, [pc, #560]	@ (800f0c0 <LCD_DisplayMenu+0x86c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	b2db      	uxtb	r3, r3
 800ee94:	4a8b      	ldr	r2, [pc, #556]	@ (800f0c4 <LCD_DisplayMenu+0x870>)
 800ee96:	6812      	ldr	r2, [r2, #0]
 800ee98:	b2d2      	uxtb	r2, r2
 800ee9a:	4611      	mov	r1, r2
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7f2 ff5b 	bl	8001d58 <ssd1306_SetCursor>
				ssd1306_WriteString("Edit RTC", Font_7x10, Black);
 800eea2:	4b89      	ldr	r3, [pc, #548]	@ (800f0c8 <LCD_DisplayMenu+0x874>)
 800eea4:	2200      	movs	r2, #0
 800eea6:	9200      	str	r2, [sp, #0]
 800eea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eeaa:	4888      	ldr	r0, [pc, #544]	@ (800f0cc <LCD_DisplayMenu+0x878>)
 800eeac:	f7f2 ff2e 	bl	8001d0c <ssd1306_WriteString>
				//*****************************************//
			    ssd1306_SetCursor(menu_line_X, menu_line_Y+16);
 800eeb0:	4b83      	ldr	r3, [pc, #524]	@ (800f0c0 <LCD_DisplayMenu+0x86c>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	4b83      	ldr	r3, [pc, #524]	@ (800f0c4 <LCD_DisplayMenu+0x870>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	3310      	adds	r3, #16
 800eebe:	b2db      	uxtb	r3, r3
 800eec0:	4619      	mov	r1, r3
 800eec2:	4610      	mov	r0, r2
 800eec4:	f7f2 ff48 	bl	8001d58 <ssd1306_SetCursor>
			    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 800eec8:	4b81      	ldr	r3, [pc, #516]	@ (800f0d0 <LCD_DisplayMenu+0x87c>)
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	4619      	mov	r1, r3
 800eece:	4b81      	ldr	r3, [pc, #516]	@ (800f0d4 <LCD_DisplayMenu+0x880>)
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	461a      	mov	r2, r3
 800eed4:	4b80      	ldr	r3, [pc, #512]	@ (800f0d8 <LCD_DisplayMenu+0x884>)
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	9301      	str	r3, [sp, #4]
 800eeda:	9200      	str	r2, [sp, #0]
 800eedc:	460b      	mov	r3, r1
 800eede:	4a7f      	ldr	r2, [pc, #508]	@ (800f0dc <LCD_DisplayMenu+0x888>)
 800eee0:	2114      	movs	r1, #20
 800eee2:	487f      	ldr	r0, [pc, #508]	@ (800f0e0 <LCD_DisplayMenu+0x88c>)
 800eee4:	f002 f9bc 	bl	8011260 <sniprintf>
			    ssd1306_WriteString(buffer, Font_7x10, White);
 800eee8:	4b77      	ldr	r3, [pc, #476]	@ (800f0c8 <LCD_DisplayMenu+0x874>)
 800eeea:	2201      	movs	r2, #1
 800eeec:	9200      	str	r2, [sp, #0]
 800eeee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eef0:	487b      	ldr	r0, [pc, #492]	@ (800f0e0 <LCD_DisplayMenu+0x88c>)
 800eef2:	f7f2 ff0b 	bl	8001d0c <ssd1306_WriteString>

			    ssd1306_SetCursor(menu_line_X, menu_line_Y+32);
 800eef6:	4b72      	ldr	r3, [pc, #456]	@ (800f0c0 <LCD_DisplayMenu+0x86c>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	b2da      	uxtb	r2, r3
 800eefc:	4b71      	ldr	r3, [pc, #452]	@ (800f0c4 <LCD_DisplayMenu+0x870>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	3320      	adds	r3, #32
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	4619      	mov	r1, r3
 800ef08:	4610      	mov	r0, r2
 800ef0a:	f7f2 ff25 	bl	8001d58 <ssd1306_SetCursor>
			    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", day, month, year);
 800ef0e:	4b75      	ldr	r3, [pc, #468]	@ (800f0e4 <LCD_DisplayMenu+0x890>)
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	4619      	mov	r1, r3
 800ef14:	4b74      	ldr	r3, [pc, #464]	@ (800f0e8 <LCD_DisplayMenu+0x894>)
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	461a      	mov	r2, r3
 800ef1a:	4b74      	ldr	r3, [pc, #464]	@ (800f0ec <LCD_DisplayMenu+0x898>)
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	9301      	str	r3, [sp, #4]
 800ef20:	9200      	str	r2, [sp, #0]
 800ef22:	460b      	mov	r3, r1
 800ef24:	4a72      	ldr	r2, [pc, #456]	@ (800f0f0 <LCD_DisplayMenu+0x89c>)
 800ef26:	2114      	movs	r1, #20
 800ef28:	486d      	ldr	r0, [pc, #436]	@ (800f0e0 <LCD_DisplayMenu+0x88c>)
 800ef2a:	f002 f999 	bl	8011260 <sniprintf>
			    ssd1306_WriteString(buffer, Font_7x10, White);
 800ef2e:	4b66      	ldr	r3, [pc, #408]	@ (800f0c8 <LCD_DisplayMenu+0x874>)
 800ef30:	2201      	movs	r2, #1
 800ef32:	9200      	str	r2, [sp, #0]
 800ef34:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ef36:	486a      	ldr	r0, [pc, #424]	@ (800f0e0 <LCD_DisplayMenu+0x88c>)
 800ef38:	f7f2 fee8 	bl	8001d0c <ssd1306_WriteString>
 800ef3c:	e010      	b.n	800ef60 <LCD_DisplayMenu+0x70c>
				//*****************************************//
			}else{
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800ef3e:	4b60      	ldr	r3, [pc, #384]	@ (800f0c0 <LCD_DisplayMenu+0x86c>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	4a5f      	ldr	r2, [pc, #380]	@ (800f0c4 <LCD_DisplayMenu+0x870>)
 800ef46:	6812      	ldr	r2, [r2, #0]
 800ef48:	b2d2      	uxtb	r2, r2
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f7f2 ff03 	bl	8001d58 <ssd1306_SetCursor>
				ssd1306_WriteString("Edit RTC", Font_7x10, White);
 800ef52:	4b5d      	ldr	r3, [pc, #372]	@ (800f0c8 <LCD_DisplayMenu+0x874>)
 800ef54:	2201      	movs	r2, #1
 800ef56:	9200      	str	r2, [sp, #0]
 800ef58:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ef5a:	485c      	ldr	r0, [pc, #368]	@ (800f0cc <LCD_DisplayMenu+0x878>)
 800ef5c:	f7f2 fed6 	bl	8001d0c <ssd1306_WriteString>
        	}

        	if (currentCursor == CURSOR_ON_VALUE){
 800ef60:	4b56      	ldr	r3, [pc, #344]	@ (800f0bc <LCD_DisplayMenu+0x868>)
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	f040 8098 	bne.w	800f09a <LCD_DisplayMenu+0x846>
        		EditRTC();
 800ef6a:	f000 fa17 	bl	800f39c <EditRTC>
        		currentCursor = CURSOR_ON_MENU;
 800ef6e:	4b53      	ldr	r3, [pc, #332]	@ (800f0bc <LCD_DisplayMenu+0x868>)
 800ef70:	2200      	movs	r2, #0
 800ef72:	701a      	strb	r2, [r3, #0]
        	}

			break;
 800ef74:	e091      	b.n	800f09a <LCD_DisplayMenu+0x846>

        case MENU_SEND_BLE:
        	HAL_GPIO_WritePin(GPIOD, BT_INIT_Pin, GPIO_PIN_SET); 				// Turn on BT
 800ef76:	2201      	movs	r2, #1
 800ef78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ef7c:	485d      	ldr	r0, [pc, #372]	@ (800f0f4 <LCD_DisplayMenu+0x8a0>)
 800ef7e:	f7f5 fab5 	bl	80044ec <HAL_GPIO_WritePin>
        	AveragedBil=0;//to Erase the old test from LCD while applying new one
 800ef82:	4b5d      	ldr	r3, [pc, #372]	@ (800f0f8 <LCD_DisplayMenu+0x8a4>)
 800ef84:	f04f 0200 	mov.w	r2, #0
 800ef88:	601a      	str	r2, [r3, #0]

			ssd1306_SetCursor(5, 56);
 800ef8a:	2138      	movs	r1, #56	@ 0x38
 800ef8c:	2005      	movs	r0, #5
 800ef8e:	f7f2 fee3 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("PREV", Font_6x8, White);		    // Prev btn (left)
 800ef92:	4b46      	ldr	r3, [pc, #280]	@ (800f0ac <LCD_DisplayMenu+0x858>)
 800ef94:	2201      	movs	r2, #1
 800ef96:	9200      	str	r2, [sp, #0]
 800ef98:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ef9a:	4845      	ldr	r0, [pc, #276]	@ (800f0b0 <LCD_DisplayMenu+0x85c>)
 800ef9c:	f7f2 feb6 	bl	8001d0c <ssd1306_WriteString>
			ssd1306_SetCursor(102, 56);
 800efa0:	2138      	movs	r1, #56	@ 0x38
 800efa2:	2066      	movs	r0, #102	@ 0x66
 800efa4:	f7f2 fed8 	bl	8001d58 <ssd1306_SetCursor>
			ssd1306_WriteString("NEXT", Font_6x8, White);			// Next btn (right)
 800efa8:	4b40      	ldr	r3, [pc, #256]	@ (800f0ac <LCD_DisplayMenu+0x858>)
 800efaa:	2201      	movs	r2, #1
 800efac:	9200      	str	r2, [sp, #0]
 800efae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800efb0:	4840      	ldr	r0, [pc, #256]	@ (800f0b4 <LCD_DisplayMenu+0x860>)
 800efb2:	f7f2 feab 	bl	8001d0c <ssd1306_WriteString>
            DisplayPercentage();
 800efb6:	f000 fd75 	bl	800faa4 <DisplayPercentage>
            RTC_DisplayTime();
 800efba:	f001 f887 	bl	80100cc <RTC_DisplayTime>
            StartTestMenuFlag = 2;  // Not in StartMenu ==> Don't init Spectrometer
 800efbe:	4b3e      	ldr	r3, [pc, #248]	@ (800f0b8 <LCD_DisplayMenu+0x864>)
 800efc0:	2202      	movs	r2, #2
 800efc2:	601a      	str	r2, [r3, #0]

            if (currentCursor == CURSOR_ON_MENU) {
 800efc4:	4b3d      	ldr	r3, [pc, #244]	@ (800f0bc <LCD_DisplayMenu+0x868>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d122      	bne.n	800f012 <LCD_DisplayMenu+0x7be>
                ssd1306_FillRectangle(menu_line_X-10, menu_line_Y, 100, 40, White);
 800efcc:	4b3c      	ldr	r3, [pc, #240]	@ (800f0c0 <LCD_DisplayMenu+0x86c>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	3b0a      	subs	r3, #10
 800efd4:	b2d8      	uxtb	r0, r3
 800efd6:	4b3b      	ldr	r3, [pc, #236]	@ (800f0c4 <LCD_DisplayMenu+0x870>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	b2d9      	uxtb	r1, r3
 800efdc:	2301      	movs	r3, #1
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	2328      	movs	r3, #40	@ 0x28
 800efe2:	2264      	movs	r2, #100	@ 0x64
 800efe4:	f7f2 fed0 	bl	8001d88 <ssd1306_FillRectangle>
                ssd1306_SetCursor(menu_line_X-5, menu_line_Y+5);
 800efe8:	4b35      	ldr	r3, [pc, #212]	@ (800f0c0 <LCD_DisplayMenu+0x86c>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	b2db      	uxtb	r3, r3
 800efee:	3b05      	subs	r3, #5
 800eff0:	b2da      	uxtb	r2, r3
 800eff2:	4b34      	ldr	r3, [pc, #208]	@ (800f0c4 <LCD_DisplayMenu+0x870>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	3305      	adds	r3, #5
 800effa:	b2db      	uxtb	r3, r3
 800effc:	4619      	mov	r1, r3
 800effe:	4610      	mov	r0, r2
 800f000:	f7f2 feaa 	bl	8001d58 <ssd1306_SetCursor>
                ssd1306_WriteString("Send to BT", Font_7x10, Black);
 800f004:	4b30      	ldr	r3, [pc, #192]	@ (800f0c8 <LCD_DisplayMenu+0x874>)
 800f006:	2200      	movs	r2, #0
 800f008:	9200      	str	r2, [sp, #0]
 800f00a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f00c:	483b      	ldr	r0, [pc, #236]	@ (800f0fc <LCD_DisplayMenu+0x8a8>)
 800f00e:	f7f2 fe7d 	bl	8001d0c <ssd1306_WriteString>
            }

            // Indicate that the user can press the NAVIGATE button to send data
            ssd1306_SetCursor(set_line_X - 5, menu_line_Y + 23);
 800f012:	4b3b      	ldr	r3, [pc, #236]	@ (800f100 <LCD_DisplayMenu+0x8ac>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	b2db      	uxtb	r3, r3
 800f018:	3b05      	subs	r3, #5
 800f01a:	b2da      	uxtb	r2, r3
 800f01c:	4b29      	ldr	r3, [pc, #164]	@ (800f0c4 <LCD_DisplayMenu+0x870>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	b2db      	uxtb	r3, r3
 800f022:	3317      	adds	r3, #23
 800f024:	b2db      	uxtb	r3, r3
 800f026:	4619      	mov	r1, r3
 800f028:	4610      	mov	r0, r2
 800f02a:	f7f2 fe95 	bl	8001d58 <ssd1306_SetCursor>
            ssd1306_WriteString("Press OK", Font_7x10, White);
 800f02e:	4b26      	ldr	r3, [pc, #152]	@ (800f0c8 <LCD_DisplayMenu+0x874>)
 800f030:	2201      	movs	r2, #1
 800f032:	9200      	str	r2, [sp, #0]
 800f034:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f036:	4833      	ldr	r0, [pc, #204]	@ (800f104 <LCD_DisplayMenu+0x8b0>)
 800f038:	f7f2 fe68 	bl	8001d0c <ssd1306_WriteString>

            // After NAVIGATE is pressed, send data via BLE
            if (sendBLEFlag) {
 800f03c:	4b32      	ldr	r3, [pc, #200]	@ (800f108 <LCD_DisplayMenu+0x8b4>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d02c      	beq.n	800f09e <LCD_DisplayMenu+0x84a>
            	ssd1306_FillRectangle(menu_line_X-5, menu_line_Y, 105, 40, Black);
 800f044:	4b1e      	ldr	r3, [pc, #120]	@ (800f0c0 <LCD_DisplayMenu+0x86c>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	3b05      	subs	r3, #5
 800f04c:	b2d8      	uxtb	r0, r3
 800f04e:	4b1d      	ldr	r3, [pc, #116]	@ (800f0c4 <LCD_DisplayMenu+0x870>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	b2d9      	uxtb	r1, r3
 800f054:	2300      	movs	r3, #0
 800f056:	9300      	str	r3, [sp, #0]
 800f058:	2328      	movs	r3, #40	@ 0x28
 800f05a:	2269      	movs	r2, #105	@ 0x69
 800f05c:	f7f2 fe94 	bl	8001d88 <ssd1306_FillRectangle>
                ssd1306_SetCursor(menu_line_X - 5, menu_line_Y + 30);
 800f060:	4b17      	ldr	r3, [pc, #92]	@ (800f0c0 <LCD_DisplayMenu+0x86c>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	b2db      	uxtb	r3, r3
 800f066:	3b05      	subs	r3, #5
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	4b16      	ldr	r3, [pc, #88]	@ (800f0c4 <LCD_DisplayMenu+0x870>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	b2db      	uxtb	r3, r3
 800f070:	331e      	adds	r3, #30
 800f072:	b2db      	uxtb	r3, r3
 800f074:	4619      	mov	r1, r3
 800f076:	4610      	mov	r0, r2
 800f078:	f7f2 fe6e 	bl	8001d58 <ssd1306_SetCursor>
                ssd1306_WriteString("Sending...", Font_7x10, White);
 800f07c:	4b12      	ldr	r3, [pc, #72]	@ (800f0c8 <LCD_DisplayMenu+0x874>)
 800f07e:	2201      	movs	r2, #1
 800f080:	9200      	str	r2, [sp, #0]
 800f082:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f084:	4821      	ldr	r0, [pc, #132]	@ (800f10c <LCD_DisplayMenu+0x8b8>)
 800f086:	f7f2 fe41 	bl	8001d0c <ssd1306_WriteString>
                Send_TO_BLE();  // Call the function that sends data over BLE
 800f08a:	f7fe ffd1 	bl	800e030 <Send_TO_BLE>
                sendBLEFlag = 0;  // Reset the flag after sending
 800f08e:	4b1e      	ldr	r3, [pc, #120]	@ (800f108 <LCD_DisplayMenu+0x8b4>)
 800f090:	2200      	movs	r2, #0
 800f092:	601a      	str	r2, [r3, #0]
            }

            break;
 800f094:	e003      	b.n	800f09e <LCD_DisplayMenu+0x84a>
			break;
 800f096:	bf00      	nop
 800f098:	e002      	b.n	800f0a0 <LCD_DisplayMenu+0x84c>
			break;
 800f09a:	bf00      	nop
 800f09c:	e000      	b.n	800f0a0 <LCD_DisplayMenu+0x84c>
            break;
 800f09e:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 800f0a0:	f7f2 fd28 	bl	8001af4 <ssd1306_UpdateScreen>
}
 800f0a4:	bf00      	nop
 800f0a6:	3748      	adds	r7, #72	@ 0x48
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	08014fc8 	.word	0x08014fc8
 800f0b0:	080133f8 	.word	0x080133f8
 800f0b4:	08013400 	.word	0x08013400
 800f0b8:	20001f9c 	.word	0x20001f9c
 800f0bc:	20001f61 	.word	0x20001f61
 800f0c0:	200000ac 	.word	0x200000ac
 800f0c4:	200000b0 	.word	0x200000b0
 800f0c8:	08014fd4 	.word	0x08014fd4
 800f0cc:	08013480 	.word	0x08013480
 800f0d0:	20001fa4 	.word	0x20001fa4
 800f0d4:	20001fa5 	.word	0x20001fa5
 800f0d8:	20001fa6 	.word	0x20001fa6
 800f0dc:	0801348c 	.word	0x0801348c
 800f0e0:	20001fa8 	.word	0x20001fa8
 800f0e4:	200000bd 	.word	0x200000bd
 800f0e8:	200000be 	.word	0x200000be
 800f0ec:	200000bf 	.word	0x200000bf
 800f0f0:	0801349c 	.word	0x0801349c
 800f0f4:	40020c00 	.word	0x40020c00
 800f0f8:	20001f94 	.word	0x20001f94
 800f0fc:	080134ac 	.word	0x080134ac
 800f100:	200000b4 	.word	0x200000b4
 800f104:	080134b8 	.word	0x080134b8
 800f108:	20001fcc 	.word	0x20001fcc
 800f10c:	080134c4 	.word	0x080134c4

0800f110 <LCD_HandleButtonPress>:

// Function to handle button presses
void LCD_HandleButtonPress(void) {
 800f110:	b580      	push	{r7, lr}
 800f112:	af00      	add	r7, sp, #0
    // Assume button GPIOs are connected and configured
    if ((HAL_GPIO_ReadPin(GPIOA, NAVIGATE_BTN_Pin) == GPIO_PIN_RESET)) { // Navigate Button
 800f114:	2101      	movs	r1, #1
 800f116:	487a      	ldr	r0, [pc, #488]	@ (800f300 <LCD_HandleButtonPress+0x1f0>)
 800f118:	f7f5 f9d0 	bl	80044bc <HAL_GPIO_ReadPin>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d145      	bne.n	800f1ae <LCD_HandleButtonPress+0x9e>
    	UserAction_Detected();
 800f122:	f000 fe9b 	bl	800fe5c <UserAction_Detected>
    	RTC_DisplayTime();
 800f126:	f000 ffd1 	bl	80100cc <RTC_DisplayTime>
        holdNavigateBtn++;
 800f12a:	4b76      	ldr	r3, [pc, #472]	@ (800f304 <LCD_HandleButtonPress+0x1f4>)
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	3301      	adds	r3, #1
 800f130:	b2da      	uxtb	r2, r3
 800f132:	4b74      	ldr	r3, [pc, #464]	@ (800f304 <LCD_HandleButtonPress+0x1f4>)
 800f134:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Debounce_Delay); // Debounce delay
 800f136:	4b74      	ldr	r3, [pc, #464]	@ (800f308 <LCD_HandleButtonPress+0x1f8>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7f3 fc92 	bl	8002a64 <HAL_Delay>

        if (holdNavigateBtn >= 12) { // Assuming hold for 2000 ms
 800f140:	4b70      	ldr	r3, [pc, #448]	@ (800f304 <LCD_HandleButtonPress+0x1f4>)
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	2b0b      	cmp	r3, #11
 800f146:	d902      	bls.n	800f14e <LCD_HandleButtonPress+0x3e>
            LCD_Reset();
 800f148:	f000 fdf8 	bl	800fd3c <LCD_Reset>
		}

    } else {
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
    }
}
 800f14c:	e0d5      	b.n	800f2fa <LCD_HandleButtonPress+0x1ea>
        	 if (currentMenu == MENU_SET_AVG || currentMenu == MENU_EDIT_RTC)
 800f14e:	4b6f      	ldr	r3, [pc, #444]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	2b02      	cmp	r3, #2
 800f154:	d003      	beq.n	800f15e <LCD_HandleButtonPress+0x4e>
 800f156:	4b6d      	ldr	r3, [pc, #436]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	2b06      	cmp	r3, #6
 800f15c:	d11c      	bne.n	800f198 <LCD_HandleButtonPress+0x88>
				currentCursor = (currentCursor + 1) % CURSOR_TOTAL;
 800f15e:	4b6c      	ldr	r3, [pc, #432]	@ (800f310 <LCD_HandleButtonPress+0x200>)
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	3301      	adds	r3, #1
 800f164:	2b00      	cmp	r3, #0
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	bfb8      	it	lt
 800f16c:	425b      	neglt	r3, r3
 800f16e:	b2da      	uxtb	r2, r3
 800f170:	4b67      	ldr	r3, [pc, #412]	@ (800f310 <LCD_HandleButtonPress+0x200>)
 800f172:	701a      	strb	r2, [r3, #0]
				if(currentCursor>=2)  currentCursor = (currentCursor - 1) % CURSOR_TOTAL;
 800f174:	4b66      	ldr	r3, [pc, #408]	@ (800f310 <LCD_HandleButtonPress+0x200>)
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d90a      	bls.n	800f192 <LCD_HandleButtonPress+0x82>
 800f17c:	4b64      	ldr	r3, [pc, #400]	@ (800f310 <LCD_HandleButtonPress+0x200>)
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	3b01      	subs	r3, #1
 800f182:	2b00      	cmp	r3, #0
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	bfb8      	it	lt
 800f18a:	425b      	neglt	r3, r3
 800f18c:	b2da      	uxtb	r2, r3
 800f18e:	4b60      	ldr	r3, [pc, #384]	@ (800f310 <LCD_HandleButtonPress+0x200>)
 800f190:	701a      	strb	r2, [r3, #0]
				LCD_UpdateMenu();
 800f192:	f000 fd93 	bl	800fcbc <LCD_UpdateMenu>
}
 800f196:	e0b0      	b.n	800f2fa <LCD_HandleButtonPress+0x1ea>
        	 else if (currentMenu == MENU_SEND_BLE) {
 800f198:	4b5c      	ldr	r3, [pc, #368]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	2b05      	cmp	r3, #5
 800f19e:	f040 80ac 	bne.w	800f2fa <LCD_HandleButtonPress+0x1ea>
				 sendBLEFlag = 1;  // Set the flag to send data
 800f1a2:	4b5c      	ldr	r3, [pc, #368]	@ (800f314 <LCD_HandleButtonPress+0x204>)
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	601a      	str	r2, [r3, #0]
				 LCD_UpdateMenu();  // Update display to show sending status
 800f1a8:	f000 fd88 	bl	800fcbc <LCD_UpdateMenu>
}
 800f1ac:	e0a5      	b.n	800f2fa <LCD_HandleButtonPress+0x1ea>
    } else if (HAL_GPIO_ReadPin(GPIOE, NEXT_BTN_Pin) == GPIO_PIN_RESET) { // Next Button
 800f1ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f1b2:	4859      	ldr	r0, [pc, #356]	@ (800f318 <LCD_HandleButtonPress+0x208>)
 800f1b4:	f7f5 f982 	bl	80044bc <HAL_GPIO_ReadPin>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d13f      	bne.n	800f23e <LCD_HandleButtonPress+0x12e>
    	UserAction_Detected();
 800f1be:	f000 fe4d 	bl	800fe5c <UserAction_Detected>
    	RTC_DisplayTime();
 800f1c2:	f000 ff83 	bl	80100cc <RTC_DisplayTime>
        HAL_Delay(Debounce_Delay); // Debounce delay
 800f1c6:	4b50      	ldr	r3, [pc, #320]	@ (800f308 <LCD_HandleButtonPress+0x1f8>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7f3 fc4a 	bl	8002a64 <HAL_Delay>
		if (currentCursor == CURSOR_ON_MENU ) {
 800f1d0:	4b4f      	ldr	r3, [pc, #316]	@ (800f310 <LCD_HandleButtonPress+0x200>)
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d11b      	bne.n	800f210 <LCD_HandleButtonPress+0x100>
			if (currentMenu == MENU_START_DEV) currentMenu = MENU_SET_AVG;
 800f1d8:	4b4c      	ldr	r3, [pc, #304]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d103      	bne.n	800f1e8 <LCD_HandleButtonPress+0xd8>
 800f1e0:	4b4a      	ldr	r3, [pc, #296]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f1e2:	2202      	movs	r2, #2
 800f1e4:	701a      	strb	r2, [r3, #0]
 800f1e6:	e010      	b.n	800f20a <LCD_HandleButtonPress+0xfa>
			else currentMenu = (currentMenu + 1) % MENU_TOTAL;
 800f1e8:	4b48      	ldr	r3, [pc, #288]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	1c5a      	adds	r2, r3, #1
 800f1ee:	4b4b      	ldr	r3, [pc, #300]	@ (800f31c <LCD_HandleButtonPress+0x20c>)
 800f1f0:	fb83 1302 	smull	r1, r3, r3, r2
 800f1f4:	4413      	add	r3, r2
 800f1f6:	1099      	asrs	r1, r3, #2
 800f1f8:	17d3      	asrs	r3, r2, #31
 800f1fa:	1ac9      	subs	r1, r1, r3
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	00db      	lsls	r3, r3, #3
 800f200:	1a5b      	subs	r3, r3, r1
 800f202:	1ad1      	subs	r1, r2, r3
 800f204:	b2ca      	uxtb	r2, r1
 800f206:	4b41      	ldr	r3, [pc, #260]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f208:	701a      	strb	r2, [r3, #0]
			LCD_UpdateMenu();
 800f20a:	f000 fd57 	bl	800fcbc <LCD_UpdateMenu>
}
 800f20e:	e074      	b.n	800f2fa <LCD_HandleButtonPress+0x1ea>
		} else if (currentCursor == CURSOR_ON_VALUE) {
 800f210:	4b3f      	ldr	r3, [pc, #252]	@ (800f310 <LCD_HandleButtonPress+0x200>)
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d170      	bne.n	800f2fa <LCD_HandleButtonPress+0x1ea>
			if (currentMenu == MENU_SET_AVG) {
 800f218:	4b3c      	ldr	r3, [pc, #240]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	2b02      	cmp	r3, #2
 800f21e:	d16c      	bne.n	800f2fa <LCD_HandleButtonPress+0x1ea>
				avgValue++;
 800f220:	4b3f      	ldr	r3, [pc, #252]	@ (800f320 <LCD_HandleButtonPress+0x210>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	3301      	adds	r3, #1
 800f226:	4a3e      	ldr	r2, [pc, #248]	@ (800f320 <LCD_HandleButtonPress+0x210>)
 800f228:	6013      	str	r3, [r2, #0]
				if (avgValue > 9) avgValue = 9; // Max AVG value
 800f22a:	4b3d      	ldr	r3, [pc, #244]	@ (800f320 <LCD_HandleButtonPress+0x210>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2b09      	cmp	r3, #9
 800f230:	dd02      	ble.n	800f238 <LCD_HandleButtonPress+0x128>
 800f232:	4b3b      	ldr	r3, [pc, #236]	@ (800f320 <LCD_HandleButtonPress+0x210>)
 800f234:	2209      	movs	r2, #9
 800f236:	601a      	str	r2, [r3, #0]
				LCD_UpdateMenu();
 800f238:	f000 fd40 	bl	800fcbc <LCD_UpdateMenu>
}
 800f23c:	e05d      	b.n	800f2fa <LCD_HandleButtonPress+0x1ea>
    } else if (HAL_GPIO_ReadPin(GPIOE, PREV_BTN_Pin) == GPIO_PIN_RESET) { // Prev Button
 800f23e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f242:	4835      	ldr	r0, [pc, #212]	@ (800f318 <LCD_HandleButtonPress+0x208>)
 800f244:	f7f5 f93a 	bl	80044bc <HAL_GPIO_ReadPin>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d152      	bne.n	800f2f4 <LCD_HandleButtonPress+0x1e4>
    	UserAction_Detected();
 800f24e:	f000 fe05 	bl	800fe5c <UserAction_Detected>
    	RTC_DisplayTime();
 800f252:	f000 ff3b 	bl	80100cc <RTC_DisplayTime>
        HAL_Delay(Debounce_Delay); // Debounce delay
 800f256:	4b2c      	ldr	r3, [pc, #176]	@ (800f308 <LCD_HandleButtonPress+0x1f8>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7f3 fc02 	bl	8002a64 <HAL_Delay>
		if (currentMenu == MENU_SHOW_RESULT) {SumBil = 0;AveragedBil = 0;BilResult=0;testDone=0;}
 800f260:	4b2a      	ldr	r3, [pc, #168]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	2b04      	cmp	r3, #4
 800f266:	d10e      	bne.n	800f286 <LCD_HandleButtonPress+0x176>
 800f268:	4b2e      	ldr	r3, [pc, #184]	@ (800f324 <LCD_HandleButtonPress+0x214>)
 800f26a:	f04f 0200 	mov.w	r2, #0
 800f26e:	601a      	str	r2, [r3, #0]
 800f270:	4b2d      	ldr	r3, [pc, #180]	@ (800f328 <LCD_HandleButtonPress+0x218>)
 800f272:	f04f 0200 	mov.w	r2, #0
 800f276:	601a      	str	r2, [r3, #0]
 800f278:	4b2c      	ldr	r3, [pc, #176]	@ (800f32c <LCD_HandleButtonPress+0x21c>)
 800f27a:	f04f 0200 	mov.w	r2, #0
 800f27e:	601a      	str	r2, [r3, #0]
 800f280:	4b2b      	ldr	r3, [pc, #172]	@ (800f330 <LCD_HandleButtonPress+0x220>)
 800f282:	2200      	movs	r2, #0
 800f284:	701a      	strb	r2, [r3, #0]
		if (currentCursor == CURSOR_ON_MENU ) {
 800f286:	4b22      	ldr	r3, [pc, #136]	@ (800f310 <LCD_HandleButtonPress+0x200>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d11b      	bne.n	800f2c6 <LCD_HandleButtonPress+0x1b6>
			if (currentMenu == MENU_START_DEV) currentMenu = MENU_READ_ID;
 800f28e:	4b1f      	ldr	r3, [pc, #124]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d103      	bne.n	800f29e <LCD_HandleButtonPress+0x18e>
 800f296:	4b1d      	ldr	r3, [pc, #116]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f298:	2201      	movs	r2, #1
 800f29a:	701a      	strb	r2, [r3, #0]
 800f29c:	e010      	b.n	800f2c0 <LCD_HandleButtonPress+0x1b0>
			else currentMenu = (currentMenu - 1 + MENU_TOTAL) % MENU_TOTAL;
 800f29e:	4b1b      	ldr	r3, [pc, #108]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	1d9a      	adds	r2, r3, #6
 800f2a4:	4b1d      	ldr	r3, [pc, #116]	@ (800f31c <LCD_HandleButtonPress+0x20c>)
 800f2a6:	fb83 1302 	smull	r1, r3, r3, r2
 800f2aa:	4413      	add	r3, r2
 800f2ac:	1099      	asrs	r1, r3, #2
 800f2ae:	17d3      	asrs	r3, r2, #31
 800f2b0:	1ac9      	subs	r1, r1, r3
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	00db      	lsls	r3, r3, #3
 800f2b6:	1a5b      	subs	r3, r3, r1
 800f2b8:	1ad1      	subs	r1, r2, r3
 800f2ba:	b2ca      	uxtb	r2, r1
 800f2bc:	4b13      	ldr	r3, [pc, #76]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f2be:	701a      	strb	r2, [r3, #0]
			LCD_UpdateMenu();
 800f2c0:	f000 fcfc 	bl	800fcbc <LCD_UpdateMenu>
}
 800f2c4:	e019      	b.n	800f2fa <LCD_HandleButtonPress+0x1ea>
		} else if (currentCursor == CURSOR_ON_VALUE) {
 800f2c6:	4b12      	ldr	r3, [pc, #72]	@ (800f310 <LCD_HandleButtonPress+0x200>)
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d115      	bne.n	800f2fa <LCD_HandleButtonPress+0x1ea>
			if (currentMenu == MENU_SET_AVG) {
 800f2ce:	4b0f      	ldr	r3, [pc, #60]	@ (800f30c <LCD_HandleButtonPress+0x1fc>)
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d111      	bne.n	800f2fa <LCD_HandleButtonPress+0x1ea>
				avgValue--;
 800f2d6:	4b12      	ldr	r3, [pc, #72]	@ (800f320 <LCD_HandleButtonPress+0x210>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	3b01      	subs	r3, #1
 800f2dc:	4a10      	ldr	r2, [pc, #64]	@ (800f320 <LCD_HandleButtonPress+0x210>)
 800f2de:	6013      	str	r3, [r2, #0]
				if (avgValue < 1) avgValue = 1; // Min AVG value
 800f2e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f320 <LCD_HandleButtonPress+0x210>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	dc02      	bgt.n	800f2ee <LCD_HandleButtonPress+0x1de>
 800f2e8:	4b0d      	ldr	r3, [pc, #52]	@ (800f320 <LCD_HandleButtonPress+0x210>)
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	601a      	str	r2, [r3, #0]
				LCD_UpdateMenu();
 800f2ee:	f000 fce5 	bl	800fcbc <LCD_UpdateMenu>
}
 800f2f2:	e002      	b.n	800f2fa <LCD_HandleButtonPress+0x1ea>
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
 800f2f4:	4b03      	ldr	r3, [pc, #12]	@ (800f304 <LCD_HandleButtonPress+0x1f4>)
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	701a      	strb	r2, [r3, #0]
}
 800f2fa:	bf00      	nop
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	40020000 	.word	0x40020000
 800f304:	20001f62 	.word	0x20001f62
 800f308:	200000a4 	.word	0x200000a4
 800f30c:	20001f60 	.word	0x20001f60
 800f310:	20001f61 	.word	0x20001f61
 800f314:	20001fcc 	.word	0x20001fcc
 800f318:	40021000 	.word	0x40021000
 800f31c:	92492493 	.word	0x92492493
 800f320:	2000009c 	.word	0x2000009c
 800f324:	20001f98 	.word	0x20001f98
 800f328:	20001f94 	.word	0x20001f94
 800f32c:	20001f54 	.word	0x20001f54
 800f330:	20001f46 	.word	0x20001f46

0800f334 <HighlightNumber>:

//##############################################################################################################

void HighlightNumber(int x, int y, const char* format, int value) {
 800f334:	b590      	push	{r4, r7, lr}
 800f336:	b08b      	sub	sp, #44	@ 0x2c
 800f338:	af02      	add	r7, sp, #8
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
 800f340:	603b      	str	r3, [r7, #0]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), format, value);
 800f342:	f107 0014 	add.w	r0, r7, #20
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	210a      	movs	r1, #10
 800f34c:	f001 ff88 	bl	8011260 <sniprintf>
    ssd1306_SetCursor(x, y);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	b2db      	uxtb	r3, r3
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	b2d2      	uxtb	r2, r2
 800f358:	4611      	mov	r1, r2
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7f2 fcfc 	bl	8001d58 <ssd1306_SetCursor>
    ssd1306_FillRectangle(x, y, x+8 , y+8 , White);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	b2d8      	uxtb	r0, r3
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	b2d9      	uxtb	r1, r3
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	3308      	adds	r3, #8
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	b2db      	uxtb	r3, r3
 800f374:	3308      	adds	r3, #8
 800f376:	b2db      	uxtb	r3, r3
 800f378:	2401      	movs	r4, #1
 800f37a:	9400      	str	r4, [sp, #0]
 800f37c:	f7f2 fd04 	bl	8001d88 <ssd1306_FillRectangle>
    ssd1306_WriteString(buffer, Font_7x10, Black); // Write black text on white background
 800f380:	4b05      	ldr	r3, [pc, #20]	@ (800f398 <HighlightNumber+0x64>)
 800f382:	f107 0014 	add.w	r0, r7, #20
 800f386:	2200      	movs	r2, #0
 800f388:	9200      	str	r2, [sp, #0]
 800f38a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f38c:	f7f2 fcbe 	bl	8001d0c <ssd1306_WriteString>
}
 800f390:	bf00      	nop
 800f392:	3724      	adds	r7, #36	@ 0x24
 800f394:	46bd      	mov	sp, r7
 800f396:	bd90      	pop	{r4, r7, pc}
 800f398:	08014fd4 	.word	0x08014fd4

0800f39c <EditRTC>:

void EditRTC() {
 800f39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f39e:	b085      	sub	sp, #20
 800f3a0:	af04      	add	r7, sp, #16
    // Variables to store user input for the RTC
    static int editIndex = 0; // Index to navigate through time and date components

	while(editIndex<6 && !TimeSetDone)  // && !TimeSetDone
 800f3a2:	e236      	b.n	800f812 <EditRTC+0x476>
	{
		    // Display and highlight the component being edited
		    ssd1306_SetCursor(menu_line_X, menu_line_Y+16);
 800f3a4:	4bad      	ldr	r3, [pc, #692]	@ (800f65c <EditRTC+0x2c0>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	4bad      	ldr	r3, [pc, #692]	@ (800f660 <EditRTC+0x2c4>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	3310      	adds	r3, #16
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	4610      	mov	r0, r2
 800f3b8:	f7f2 fcce 	bl	8001d58 <ssd1306_SetCursor>
		    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 800f3bc:	4ba9      	ldr	r3, [pc, #676]	@ (800f664 <EditRTC+0x2c8>)
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	4ba9      	ldr	r3, [pc, #676]	@ (800f668 <EditRTC+0x2cc>)
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	4ba8      	ldr	r3, [pc, #672]	@ (800f66c <EditRTC+0x2d0>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	9301      	str	r3, [sp, #4]
 800f3ce:	9200      	str	r2, [sp, #0]
 800f3d0:	460b      	mov	r3, r1
 800f3d2:	4aa7      	ldr	r2, [pc, #668]	@ (800f670 <EditRTC+0x2d4>)
 800f3d4:	2114      	movs	r1, #20
 800f3d6:	48a7      	ldr	r0, [pc, #668]	@ (800f674 <EditRTC+0x2d8>)
 800f3d8:	f001 ff42 	bl	8011260 <sniprintf>
		    ssd1306_WriteString(buffer, Font_7x10, White);
 800f3dc:	4ba6      	ldr	r3, [pc, #664]	@ (800f678 <EditRTC+0x2dc>)
 800f3de:	2201      	movs	r2, #1
 800f3e0:	9200      	str	r2, [sp, #0]
 800f3e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f3e4:	48a3      	ldr	r0, [pc, #652]	@ (800f674 <EditRTC+0x2d8>)
 800f3e6:	f7f2 fc91 	bl	8001d0c <ssd1306_WriteString>

		    ssd1306_SetCursor(menu_line_X, menu_line_Y+32);
 800f3ea:	4b9c      	ldr	r3, [pc, #624]	@ (800f65c <EditRTC+0x2c0>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	4b9b      	ldr	r3, [pc, #620]	@ (800f660 <EditRTC+0x2c4>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	3320      	adds	r3, #32
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	f7f2 fcab 	bl	8001d58 <ssd1306_SetCursor>
		    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", day, month, year);
 800f402:	4b9e      	ldr	r3, [pc, #632]	@ (800f67c <EditRTC+0x2e0>)
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	4619      	mov	r1, r3
 800f408:	4b9d      	ldr	r3, [pc, #628]	@ (800f680 <EditRTC+0x2e4>)
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	461a      	mov	r2, r3
 800f40e:	4b9d      	ldr	r3, [pc, #628]	@ (800f684 <EditRTC+0x2e8>)
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	9301      	str	r3, [sp, #4]
 800f414:	9200      	str	r2, [sp, #0]
 800f416:	460b      	mov	r3, r1
 800f418:	4a9b      	ldr	r2, [pc, #620]	@ (800f688 <EditRTC+0x2ec>)
 800f41a:	2114      	movs	r1, #20
 800f41c:	4895      	ldr	r0, [pc, #596]	@ (800f674 <EditRTC+0x2d8>)
 800f41e:	f001 ff1f 	bl	8011260 <sniprintf>
		    ssd1306_WriteString(buffer, Font_7x10, White);
 800f422:	4b95      	ldr	r3, [pc, #596]	@ (800f678 <EditRTC+0x2dc>)
 800f424:	2201      	movs	r2, #1
 800f426:	9200      	str	r2, [sp, #0]
 800f428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f42a:	4892      	ldr	r0, [pc, #584]	@ (800f674 <EditRTC+0x2d8>)
 800f42c:	f7f2 fc6e 	bl	8001d0c <ssd1306_WriteString>


		// Highlight the specific component being edited
		    switch (editIndex) {
 800f430:	4b96      	ldr	r3, [pc, #600]	@ (800f68c <EditRTC+0x2f0>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	2b05      	cmp	r3, #5
 800f436:	d85f      	bhi.n	800f4f8 <EditRTC+0x15c>
 800f438:	a201      	add	r2, pc, #4	@ (adr r2, 800f440 <EditRTC+0xa4>)
 800f43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f43e:	bf00      	nop
 800f440:	0800f459 	.word	0x0800f459
 800f444:	0800f471 	.word	0x0800f471
 800f448:	0800f48d 	.word	0x0800f48d
 800f44c:	0800f4a9 	.word	0x0800f4a9
 800f450:	0800f4c1 	.word	0x0800f4c1
 800f454:	0800f4dd 	.word	0x0800f4dd
		        case 0:
		            HighlightNumber(menu_line_X, menu_line_Y+16, "%02d", hours);
 800f458:	4b80      	ldr	r3, [pc, #512]	@ (800f65c <EditRTC+0x2c0>)
 800f45a:	6818      	ldr	r0, [r3, #0]
 800f45c:	4b80      	ldr	r3, [pc, #512]	@ (800f660 <EditRTC+0x2c4>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f103 0110 	add.w	r1, r3, #16
 800f464:	4b7f      	ldr	r3, [pc, #508]	@ (800f664 <EditRTC+0x2c8>)
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	4a89      	ldr	r2, [pc, #548]	@ (800f690 <EditRTC+0x2f4>)
 800f46a:	f7ff ff63 	bl	800f334 <HighlightNumber>
		            break;
 800f46e:	e043      	b.n	800f4f8 <EditRTC+0x15c>
		        case 1:
		            HighlightNumber(menu_line_X+22, menu_line_Y+16, "%02d", minutes);
 800f470:	4b7a      	ldr	r3, [pc, #488]	@ (800f65c <EditRTC+0x2c0>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f103 0016 	add.w	r0, r3, #22
 800f478:	4b79      	ldr	r3, [pc, #484]	@ (800f660 <EditRTC+0x2c4>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f103 0110 	add.w	r1, r3, #16
 800f480:	4b79      	ldr	r3, [pc, #484]	@ (800f668 <EditRTC+0x2cc>)
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	4a82      	ldr	r2, [pc, #520]	@ (800f690 <EditRTC+0x2f4>)
 800f486:	f7ff ff55 	bl	800f334 <HighlightNumber>
		            break;
 800f48a:	e035      	b.n	800f4f8 <EditRTC+0x15c>
		        case 2:
		            HighlightNumber(menu_line_X+44-2, menu_line_Y+16, "%02d", seconds);
 800f48c:	4b73      	ldr	r3, [pc, #460]	@ (800f65c <EditRTC+0x2c0>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800f494:	4b72      	ldr	r3, [pc, #456]	@ (800f660 <EditRTC+0x2c4>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f103 0110 	add.w	r1, r3, #16
 800f49c:	4b73      	ldr	r3, [pc, #460]	@ (800f66c <EditRTC+0x2d0>)
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	4a7b      	ldr	r2, [pc, #492]	@ (800f690 <EditRTC+0x2f4>)
 800f4a2:	f7ff ff47 	bl	800f334 <HighlightNumber>
		            break;
 800f4a6:	e027      	b.n	800f4f8 <EditRTC+0x15c>
		        case 3:
		            HighlightNumber(menu_line_X, menu_line_Y+32, "%02d", day);
 800f4a8:	4b6c      	ldr	r3, [pc, #432]	@ (800f65c <EditRTC+0x2c0>)
 800f4aa:	6818      	ldr	r0, [r3, #0]
 800f4ac:	4b6c      	ldr	r3, [pc, #432]	@ (800f660 <EditRTC+0x2c4>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f103 0120 	add.w	r1, r3, #32
 800f4b4:	4b71      	ldr	r3, [pc, #452]	@ (800f67c <EditRTC+0x2e0>)
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	4a75      	ldr	r2, [pc, #468]	@ (800f690 <EditRTC+0x2f4>)
 800f4ba:	f7ff ff3b 	bl	800f334 <HighlightNumber>
		            break;
 800f4be:	e01b      	b.n	800f4f8 <EditRTC+0x15c>
		        case 4:
		            HighlightNumber(menu_line_X+22, menu_line_Y+32, "%02d", month);
 800f4c0:	4b66      	ldr	r3, [pc, #408]	@ (800f65c <EditRTC+0x2c0>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f103 0016 	add.w	r0, r3, #22
 800f4c8:	4b65      	ldr	r3, [pc, #404]	@ (800f660 <EditRTC+0x2c4>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f103 0120 	add.w	r1, r3, #32
 800f4d0:	4b6b      	ldr	r3, [pc, #428]	@ (800f680 <EditRTC+0x2e4>)
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	4a6e      	ldr	r2, [pc, #440]	@ (800f690 <EditRTC+0x2f4>)
 800f4d6:	f7ff ff2d 	bl	800f334 <HighlightNumber>
		            break;
 800f4da:	e00d      	b.n	800f4f8 <EditRTC+0x15c>
		        case 5:
		            HighlightNumber(menu_line_X+44-2, menu_line_Y+32, "%02d", year);
 800f4dc:	4b5f      	ldr	r3, [pc, #380]	@ (800f65c <EditRTC+0x2c0>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800f4e4:	4b5e      	ldr	r3, [pc, #376]	@ (800f660 <EditRTC+0x2c4>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f103 0120 	add.w	r1, r3, #32
 800f4ec:	4b65      	ldr	r3, [pc, #404]	@ (800f684 <EditRTC+0x2e8>)
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	4a67      	ldr	r2, [pc, #412]	@ (800f690 <EditRTC+0x2f4>)
 800f4f2:	f7ff ff1f 	bl	800f334 <HighlightNumber>
		            break;
 800f4f6:	bf00      	nop
		    }

		// Handle button presses for editing
		if (HAL_GPIO_ReadPin(GPIOE, NEXT_BTN_Pin) == GPIO_PIN_RESET) {
 800f4f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f4fc:	4865      	ldr	r0, [pc, #404]	@ (800f694 <EditRTC+0x2f8>)
 800f4fe:	f7f4 ffdd 	bl	80044bc <HAL_GPIO_ReadPin>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	f040 8086 	bne.w	800f616 <EditRTC+0x27a>
			HAL_Delay(Debounce_Delay); // Debounce delay
 800f50a:	4b63      	ldr	r3, [pc, #396]	@ (800f698 <EditRTC+0x2fc>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f3 faa8 	bl	8002a64 <HAL_Delay>
			switch (editIndex) {
 800f514:	4b5d      	ldr	r3, [pc, #372]	@ (800f68c <EditRTC+0x2f0>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b05      	cmp	r3, #5
 800f51a:	f200 8178 	bhi.w	800f80e <EditRTC+0x472>
 800f51e:	a201      	add	r2, pc, #4	@ (adr r2, 800f524 <EditRTC+0x188>)
 800f520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f524:	0800f53d 	.word	0x0800f53d
 800f528:	0800f561 	.word	0x0800f561
 800f52c:	0800f587 	.word	0x0800f587
 800f530:	0800f5ad 	.word	0x0800f5ad
 800f534:	0800f5d3 	.word	0x0800f5d3
 800f538:	0800f5f5 	.word	0x0800f5f5
				case 0: hours = (hours + 1) % 24; break;
 800f53c:	4b49      	ldr	r3, [pc, #292]	@ (800f664 <EditRTC+0x2c8>)
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	1c5a      	adds	r2, r3, #1
 800f542:	4b56      	ldr	r3, [pc, #344]	@ (800f69c <EditRTC+0x300>)
 800f544:	fb83 1302 	smull	r1, r3, r3, r2
 800f548:	1099      	asrs	r1, r3, #2
 800f54a:	17d3      	asrs	r3, r2, #31
 800f54c:	1ac9      	subs	r1, r1, r3
 800f54e:	460b      	mov	r3, r1
 800f550:	005b      	lsls	r3, r3, #1
 800f552:	440b      	add	r3, r1
 800f554:	00db      	lsls	r3, r3, #3
 800f556:	1ad1      	subs	r1, r2, r3
 800f558:	b2ca      	uxtb	r2, r1
 800f55a:	4b42      	ldr	r3, [pc, #264]	@ (800f664 <EditRTC+0x2c8>)
 800f55c:	701a      	strb	r2, [r3, #0]
 800f55e:	e156      	b.n	800f80e <EditRTC+0x472>
				case 1: minutes = (minutes + 1) % 60; break;
 800f560:	4b41      	ldr	r3, [pc, #260]	@ (800f668 <EditRTC+0x2cc>)
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	1c5a      	adds	r2, r3, #1
 800f566:	4b4e      	ldr	r3, [pc, #312]	@ (800f6a0 <EditRTC+0x304>)
 800f568:	fb83 1302 	smull	r1, r3, r3, r2
 800f56c:	4413      	add	r3, r2
 800f56e:	1159      	asrs	r1, r3, #5
 800f570:	17d3      	asrs	r3, r2, #31
 800f572:	1ac9      	subs	r1, r1, r3
 800f574:	460b      	mov	r3, r1
 800f576:	011b      	lsls	r3, r3, #4
 800f578:	1a5b      	subs	r3, r3, r1
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	1ad1      	subs	r1, r2, r3
 800f57e:	b2ca      	uxtb	r2, r1
 800f580:	4b39      	ldr	r3, [pc, #228]	@ (800f668 <EditRTC+0x2cc>)
 800f582:	701a      	strb	r2, [r3, #0]
 800f584:	e143      	b.n	800f80e <EditRTC+0x472>
				case 2: seconds = (seconds + 1) % 60; break;
 800f586:	4b39      	ldr	r3, [pc, #228]	@ (800f66c <EditRTC+0x2d0>)
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	1c5a      	adds	r2, r3, #1
 800f58c:	4b44      	ldr	r3, [pc, #272]	@ (800f6a0 <EditRTC+0x304>)
 800f58e:	fb83 1302 	smull	r1, r3, r3, r2
 800f592:	4413      	add	r3, r2
 800f594:	1159      	asrs	r1, r3, #5
 800f596:	17d3      	asrs	r3, r2, #31
 800f598:	1ac9      	subs	r1, r1, r3
 800f59a:	460b      	mov	r3, r1
 800f59c:	011b      	lsls	r3, r3, #4
 800f59e:	1a5b      	subs	r3, r3, r1
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	1ad1      	subs	r1, r2, r3
 800f5a4:	b2ca      	uxtb	r2, r1
 800f5a6:	4b31      	ldr	r3, [pc, #196]	@ (800f66c <EditRTC+0x2d0>)
 800f5a8:	701a      	strb	r2, [r3, #0]
 800f5aa:	e130      	b.n	800f80e <EditRTC+0x472>
				case 3: day = (day % 31) + 1; break;
 800f5ac:	4b33      	ldr	r3, [pc, #204]	@ (800f67c <EditRTC+0x2e0>)
 800f5ae:	781a      	ldrb	r2, [r3, #0]
 800f5b0:	4b3c      	ldr	r3, [pc, #240]	@ (800f6a4 <EditRTC+0x308>)
 800f5b2:	fba3 1302 	umull	r1, r3, r3, r2
 800f5b6:	1ad1      	subs	r1, r2, r3
 800f5b8:	0849      	lsrs	r1, r1, #1
 800f5ba:	440b      	add	r3, r1
 800f5bc:	0919      	lsrs	r1, r3, #4
 800f5be:	460b      	mov	r3, r1
 800f5c0:	015b      	lsls	r3, r3, #5
 800f5c2:	1a5b      	subs	r3, r3, r1
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	b2da      	uxtb	r2, r3
 800f5cc:	4b2b      	ldr	r3, [pc, #172]	@ (800f67c <EditRTC+0x2e0>)
 800f5ce:	701a      	strb	r2, [r3, #0]
 800f5d0:	e11d      	b.n	800f80e <EditRTC+0x472>
				case 4: month = (month % 12) + 1; break;
 800f5d2:	4b2b      	ldr	r3, [pc, #172]	@ (800f680 <EditRTC+0x2e4>)
 800f5d4:	781a      	ldrb	r2, [r3, #0]
 800f5d6:	4b34      	ldr	r3, [pc, #208]	@ (800f6a8 <EditRTC+0x30c>)
 800f5d8:	fba3 1302 	umull	r1, r3, r3, r2
 800f5dc:	08d9      	lsrs	r1, r3, #3
 800f5de:	460b      	mov	r3, r1
 800f5e0:	005b      	lsls	r3, r3, #1
 800f5e2:	440b      	add	r3, r1
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	1ad3      	subs	r3, r2, r3
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	b2da      	uxtb	r2, r3
 800f5ee:	4b24      	ldr	r3, [pc, #144]	@ (800f680 <EditRTC+0x2e4>)
 800f5f0:	701a      	strb	r2, [r3, #0]
 800f5f2:	e10c      	b.n	800f80e <EditRTC+0x472>
				case 5: year = (year + 1) % 100; break;
 800f5f4:	4b23      	ldr	r3, [pc, #140]	@ (800f684 <EditRTC+0x2e8>)
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	4a2c      	ldr	r2, [pc, #176]	@ (800f6ac <EditRTC+0x310>)
 800f5fc:	fb82 1203 	smull	r1, r2, r2, r3
 800f600:	1151      	asrs	r1, r2, #5
 800f602:	17da      	asrs	r2, r3, #31
 800f604:	1a8a      	subs	r2, r1, r2
 800f606:	2164      	movs	r1, #100	@ 0x64
 800f608:	fb01 f202 	mul.w	r2, r1, r2
 800f60c:	1a9a      	subs	r2, r3, r2
 800f60e:	b2d2      	uxtb	r2, r2
 800f610:	4b1c      	ldr	r3, [pc, #112]	@ (800f684 <EditRTC+0x2e8>)
 800f612:	701a      	strb	r2, [r3, #0]
 800f614:	e0fb      	b.n	800f80e <EditRTC+0x472>
			}
		} else if (HAL_GPIO_ReadPin(GPIOE, PREV_BTN_Pin) == GPIO_PIN_RESET) {
 800f616:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f61a:	481e      	ldr	r0, [pc, #120]	@ (800f694 <EditRTC+0x2f8>)
 800f61c:	f7f4 ff4e 	bl	80044bc <HAL_GPIO_ReadPin>
 800f620:	4603      	mov	r3, r0
 800f622:	2b00      	cmp	r3, #0
 800f624:	f040 8092 	bne.w	800f74c <EditRTC+0x3b0>
			HAL_Delay(Debounce_Delay); // Debounce delay
 800f628:	4b1b      	ldr	r3, [pc, #108]	@ (800f698 <EditRTC+0x2fc>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7f3 fa19 	bl	8002a64 <HAL_Delay>
			switch (editIndex) {
 800f632:	4b16      	ldr	r3, [pc, #88]	@ (800f68c <EditRTC+0x2f0>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2b05      	cmp	r3, #5
 800f638:	f200 80e9 	bhi.w	800f80e <EditRTC+0x472>
 800f63c:	a201      	add	r2, pc, #4	@ (adr r2, 800f644 <EditRTC+0x2a8>)
 800f63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f642:	bf00      	nop
 800f644:	0800f6b1 	.word	0x0800f6b1
 800f648:	0800f6cb 	.word	0x0800f6cb
 800f64c:	0800f6e5 	.word	0x0800f6e5
 800f650:	0800f6ff 	.word	0x0800f6ff
 800f654:	0800f719 	.word	0x0800f719
 800f658:	0800f733 	.word	0x0800f733
 800f65c:	200000ac 	.word	0x200000ac
 800f660:	200000b0 	.word	0x200000b0
 800f664:	20001fa4 	.word	0x20001fa4
 800f668:	20001fa5 	.word	0x20001fa5
 800f66c:	20001fa6 	.word	0x20001fa6
 800f670:	0801348c 	.word	0x0801348c
 800f674:	20001fa8 	.word	0x20001fa8
 800f678:	08014fd4 	.word	0x08014fd4
 800f67c:	200000bd 	.word	0x200000bd
 800f680:	200000be 	.word	0x200000be
 800f684:	200000bf 	.word	0x200000bf
 800f688:	0801349c 	.word	0x0801349c
 800f68c:	20001fdc 	.word	0x20001fdc
 800f690:	080134d0 	.word	0x080134d0
 800f694:	40021000 	.word	0x40021000
 800f698:	200000a4 	.word	0x200000a4
 800f69c:	2aaaaaab 	.word	0x2aaaaaab
 800f6a0:	88888889 	.word	0x88888889
 800f6a4:	08421085 	.word	0x08421085
 800f6a8:	aaaaaaab 	.word	0xaaaaaaab
 800f6ac:	51eb851f 	.word	0x51eb851f
				case 0: hours = (hours == 0) ? 23 : hours - 1; break;
 800f6b0:	4b61      	ldr	r3, [pc, #388]	@ (800f838 <EditRTC+0x49c>)
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d004      	beq.n	800f6c2 <EditRTC+0x326>
 800f6b8:	4b5f      	ldr	r3, [pc, #380]	@ (800f838 <EditRTC+0x49c>)
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	e000      	b.n	800f6c4 <EditRTC+0x328>
 800f6c2:	2317      	movs	r3, #23
 800f6c4:	4a5c      	ldr	r2, [pc, #368]	@ (800f838 <EditRTC+0x49c>)
 800f6c6:	7013      	strb	r3, [r2, #0]
 800f6c8:	e0a1      	b.n	800f80e <EditRTC+0x472>
				case 1: minutes = (minutes == 0) ? 59 : minutes - 1; break;
 800f6ca:	4b5c      	ldr	r3, [pc, #368]	@ (800f83c <EditRTC+0x4a0>)
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d004      	beq.n	800f6dc <EditRTC+0x340>
 800f6d2:	4b5a      	ldr	r3, [pc, #360]	@ (800f83c <EditRTC+0x4a0>)
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	3b01      	subs	r3, #1
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	e000      	b.n	800f6de <EditRTC+0x342>
 800f6dc:	233b      	movs	r3, #59	@ 0x3b
 800f6de:	4a57      	ldr	r2, [pc, #348]	@ (800f83c <EditRTC+0x4a0>)
 800f6e0:	7013      	strb	r3, [r2, #0]
 800f6e2:	e094      	b.n	800f80e <EditRTC+0x472>
				case 2: seconds = (seconds == 0) ? 59 : seconds - 1; break;
 800f6e4:	4b56      	ldr	r3, [pc, #344]	@ (800f840 <EditRTC+0x4a4>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d004      	beq.n	800f6f6 <EditRTC+0x35a>
 800f6ec:	4b54      	ldr	r3, [pc, #336]	@ (800f840 <EditRTC+0x4a4>)
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	3b01      	subs	r3, #1
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	e000      	b.n	800f6f8 <EditRTC+0x35c>
 800f6f6:	233b      	movs	r3, #59	@ 0x3b
 800f6f8:	4a51      	ldr	r2, [pc, #324]	@ (800f840 <EditRTC+0x4a4>)
 800f6fa:	7013      	strb	r3, [r2, #0]
 800f6fc:	e087      	b.n	800f80e <EditRTC+0x472>
				case 3: day = (day == 1) ? 31 : day - 1; break;
 800f6fe:	4b51      	ldr	r3, [pc, #324]	@ (800f844 <EditRTC+0x4a8>)
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	2b01      	cmp	r3, #1
 800f704:	d004      	beq.n	800f710 <EditRTC+0x374>
 800f706:	4b4f      	ldr	r3, [pc, #316]	@ (800f844 <EditRTC+0x4a8>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	3b01      	subs	r3, #1
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	e000      	b.n	800f712 <EditRTC+0x376>
 800f710:	231f      	movs	r3, #31
 800f712:	4a4c      	ldr	r2, [pc, #304]	@ (800f844 <EditRTC+0x4a8>)
 800f714:	7013      	strb	r3, [r2, #0]
 800f716:	e07a      	b.n	800f80e <EditRTC+0x472>
				case 4: month = (month == 1) ? 12 : month - 1; break;
 800f718:	4b4b      	ldr	r3, [pc, #300]	@ (800f848 <EditRTC+0x4ac>)
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d004      	beq.n	800f72a <EditRTC+0x38e>
 800f720:	4b49      	ldr	r3, [pc, #292]	@ (800f848 <EditRTC+0x4ac>)
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	3b01      	subs	r3, #1
 800f726:	b2db      	uxtb	r3, r3
 800f728:	e000      	b.n	800f72c <EditRTC+0x390>
 800f72a:	230c      	movs	r3, #12
 800f72c:	4a46      	ldr	r2, [pc, #280]	@ (800f848 <EditRTC+0x4ac>)
 800f72e:	7013      	strb	r3, [r2, #0]
 800f730:	e06d      	b.n	800f80e <EditRTC+0x472>
				case 5: year = (year == 0) ? 99 : year - 1; break;
 800f732:	4b46      	ldr	r3, [pc, #280]	@ (800f84c <EditRTC+0x4b0>)
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d004      	beq.n	800f744 <EditRTC+0x3a8>
 800f73a:	4b44      	ldr	r3, [pc, #272]	@ (800f84c <EditRTC+0x4b0>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	3b01      	subs	r3, #1
 800f740:	b2db      	uxtb	r3, r3
 800f742:	e000      	b.n	800f746 <EditRTC+0x3aa>
 800f744:	2363      	movs	r3, #99	@ 0x63
 800f746:	4a41      	ldr	r2, [pc, #260]	@ (800f84c <EditRTC+0x4b0>)
 800f748:	7013      	strb	r3, [r2, #0]
 800f74a:	e060      	b.n	800f80e <EditRTC+0x472>
			}
		} else if (HAL_GPIO_ReadPin(GPIOA, NAVIGATE_BTN_Pin) == GPIO_PIN_RESET) {
 800f74c:	2101      	movs	r1, #1
 800f74e:	4840      	ldr	r0, [pc, #256]	@ (800f850 <EditRTC+0x4b4>)
 800f750:	f7f4 feb4 	bl	80044bc <HAL_GPIO_ReadPin>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d159      	bne.n	800f80e <EditRTC+0x472>
			HAL_Delay(Debounce_Delay); // Debounce delay
 800f75a:	4b3e      	ldr	r3, [pc, #248]	@ (800f854 <EditRTC+0x4b8>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4618      	mov	r0, r3
 800f760:	f7f3 f980 	bl	8002a64 <HAL_Delay>
			editIndex = (editIndex + 1) % 6;
 800f764:	4b3c      	ldr	r3, [pc, #240]	@ (800f858 <EditRTC+0x4bc>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	1c59      	adds	r1, r3, #1
 800f76a:	4b3c      	ldr	r3, [pc, #240]	@ (800f85c <EditRTC+0x4c0>)
 800f76c:	fb83 3201 	smull	r3, r2, r3, r1
 800f770:	17cb      	asrs	r3, r1, #31
 800f772:	1ad2      	subs	r2, r2, r3
 800f774:	4613      	mov	r3, r2
 800f776:	005b      	lsls	r3, r3, #1
 800f778:	4413      	add	r3, r2
 800f77a:	005b      	lsls	r3, r3, #1
 800f77c:	1aca      	subs	r2, r1, r3
 800f77e:	4b36      	ldr	r3, [pc, #216]	@ (800f858 <EditRTC+0x4bc>)
 800f780:	601a      	str	r2, [r3, #0]
			holdNavigateBtn++;
 800f782:	4b37      	ldr	r3, [pc, #220]	@ (800f860 <EditRTC+0x4c4>)
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	3301      	adds	r3, #1
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	4b35      	ldr	r3, [pc, #212]	@ (800f860 <EditRTC+0x4c4>)
 800f78c:	701a      	strb	r2, [r3, #0]
			ssd1306_UpdateScreen();
 800f78e:	f7f2 f9b1 	bl	8001af4 <ssd1306_UpdateScreen>


			if (editIndex == 0) { // Completed editing all components
 800f792:	4b31      	ldr	r3, [pc, #196]	@ (800f858 <EditRTC+0x4bc>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d139      	bne.n	800f80e <EditRTC+0x472>
				RTC_SetTime(hours, minutes, seconds, date, day, month, year);
 800f79a:	4b27      	ldr	r3, [pc, #156]	@ (800f838 <EditRTC+0x49c>)
 800f79c:	7818      	ldrb	r0, [r3, #0]
 800f79e:	4b27      	ldr	r3, [pc, #156]	@ (800f83c <EditRTC+0x4a0>)
 800f7a0:	781c      	ldrb	r4, [r3, #0]
 800f7a2:	4b27      	ldr	r3, [pc, #156]	@ (800f840 <EditRTC+0x4a4>)
 800f7a4:	781d      	ldrb	r5, [r3, #0]
 800f7a6:	4b2f      	ldr	r3, [pc, #188]	@ (800f864 <EditRTC+0x4c8>)
 800f7a8:	781e      	ldrb	r6, [r3, #0]
 800f7aa:	4b26      	ldr	r3, [pc, #152]	@ (800f844 <EditRTC+0x4a8>)
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	4a26      	ldr	r2, [pc, #152]	@ (800f848 <EditRTC+0x4ac>)
 800f7b0:	7812      	ldrb	r2, [r2, #0]
 800f7b2:	4926      	ldr	r1, [pc, #152]	@ (800f84c <EditRTC+0x4b0>)
 800f7b4:	7809      	ldrb	r1, [r1, #0]
 800f7b6:	9102      	str	r1, [sp, #8]
 800f7b8:	9201      	str	r2, [sp, #4]
 800f7ba:	9300      	str	r3, [sp, #0]
 800f7bc:	4633      	mov	r3, r6
 800f7be:	462a      	mov	r2, r5
 800f7c0:	4621      	mov	r1, r4
 800f7c2:	f000 fbd1 	bl	800ff68 <RTC_SetTime>

				HAL_Delay(10);
 800f7c6:	200a      	movs	r0, #10
 800f7c8:	f7f3 f94c 	bl	8002a64 <HAL_Delay>
				ssd1306_Fill(Black);
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	f7f2 f979 	bl	8001ac4 <ssd1306_Fill>
				ssd1306_SetCursor(menu_line_X+5, menu_line_Y+5);
 800f7d2:	4b25      	ldr	r3, [pc, #148]	@ (800f868 <EditRTC+0x4cc>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	3305      	adds	r3, #5
 800f7da:	b2da      	uxtb	r2, r3
 800f7dc:	4b23      	ldr	r3, [pc, #140]	@ (800f86c <EditRTC+0x4d0>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	3305      	adds	r3, #5
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	4610      	mov	r0, r2
 800f7ea:	f7f2 fab5 	bl	8001d58 <ssd1306_SetCursor>
				ssd1306_WriteString("DONE", Font_11x18, White);
 800f7ee:	4b20      	ldr	r3, [pc, #128]	@ (800f870 <EditRTC+0x4d4>)
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	9200      	str	r2, [sp, #0]
 800f7f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f7f6:	481f      	ldr	r0, [pc, #124]	@ (800f874 <EditRTC+0x4d8>)
 800f7f8:	f7f2 fa88 	bl	8001d0c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 800f7fc:	f7f2 f97a 	bl	8001af4 <ssd1306_UpdateScreen>
				HAL_Delay(2000);
 800f800:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800f804:	f7f3 f92e 	bl	8002a64 <HAL_Delay>

				TimeSetDone=1;
 800f808:	4b1b      	ldr	r3, [pc, #108]	@ (800f878 <EditRTC+0x4dc>)
 800f80a:	2201      	movs	r2, #1
 800f80c:	601a      	str	r2, [r3, #0]
			}
		}

		ssd1306_UpdateScreen();
 800f80e:	f7f2 f971 	bl	8001af4 <ssd1306_UpdateScreen>
	while(editIndex<6 && !TimeSetDone)  // && !TimeSetDone
 800f812:	4b11      	ldr	r3, [pc, #68]	@ (800f858 <EditRTC+0x4bc>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b05      	cmp	r3, #5
 800f818:	dc04      	bgt.n	800f824 <EditRTC+0x488>
 800f81a:	4b17      	ldr	r3, [pc, #92]	@ (800f878 <EditRTC+0x4dc>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f43f adc0 	beq.w	800f3a4 <EditRTC+0x8>
	}  //while

    currentMenu = MENU_SET_AVG;
 800f824:	4b15      	ldr	r3, [pc, #84]	@ (800f87c <EditRTC+0x4e0>)
 800f826:	2202      	movs	r2, #2
 800f828:	701a      	strb	r2, [r3, #0]
	LCD();
 800f82a:	f7ff f80b 	bl	800e844 <LCD>
}
 800f82e:	bf00      	nop
 800f830:	3704      	adds	r7, #4
 800f832:	46bd      	mov	sp, r7
 800f834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f836:	bf00      	nop
 800f838:	20001fa4 	.word	0x20001fa4
 800f83c:	20001fa5 	.word	0x20001fa5
 800f840:	20001fa6 	.word	0x20001fa6
 800f844:	200000bd 	.word	0x200000bd
 800f848:	200000be 	.word	0x200000be
 800f84c:	200000bf 	.word	0x200000bf
 800f850:	40020000 	.word	0x40020000
 800f854:	200000a4 	.word	0x200000a4
 800f858:	20001fdc 	.word	0x20001fdc
 800f85c:	2aaaaaab 	.word	0x2aaaaaab
 800f860:	20001f62 	.word	0x20001f62
 800f864:	200000bc 	.word	0x200000bc
 800f868:	200000ac 	.word	0x200000ac
 800f86c:	200000b0 	.word	0x200000b0
 800f870:	08014fe0 	.word	0x08014fe0
 800f874:	080134d8 	.word	0x080134d8
 800f878:	20001fa0 	.word	0x20001fa0
 800f87c:	20001f60 	.word	0x20001f60

0800f880 <BatteryPercentage>:


// Function to calculate battery percentage
void BatteryPercentage(void) {                  //NOTE: With TMR: Calculate Percenatge Every 5 sec & Filter Window = 5 & UPDATE_THRESHOLD = 5
 800f880:	b580      	push	{r7, lr}
 800f882:	af00      	add	r7, sp, #0

	/*HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	adcValue1 = HAL_ADC_GetValue(&hadc1);*/

    HAL_ADC_Start_DMA(&hadc1, &adcValue1, 1);
 800f884:	2201      	movs	r2, #1
 800f886:	4938      	ldr	r1, [pc, #224]	@ (800f968 <BatteryPercentage+0xe8>)
 800f888:	4838      	ldr	r0, [pc, #224]	@ (800f96c <BatteryPercentage+0xec>)
 800f88a:	f7f3 f953 	bl	8002b34 <HAL_ADC_Start_DMA>

	batteryVoltage = (adcValue1 / 4575.0) * 3.3; //4095.0 // Convert ADC value to voltage
 800f88e:	4b36      	ldr	r3, [pc, #216]	@ (800f968 <BatteryPercentage+0xe8>)
 800f890:	881b      	ldrh	r3, [r3, #0]
 800f892:	4618      	mov	r0, r3
 800f894:	f7f0 fe56 	bl	8000544 <__aeabi_i2d>
 800f898:	a32d      	add	r3, pc, #180	@ (adr r3, 800f950 <BatteryPercentage+0xd0>)
 800f89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89e:	f7f0 ffe5 	bl	800086c <__aeabi_ddiv>
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	460b      	mov	r3, r1
 800f8a6:	4610      	mov	r0, r2
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	a32b      	add	r3, pc, #172	@ (adr r3, 800f958 <BatteryPercentage+0xd8>)
 800f8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b0:	f7f0 feb2 	bl	8000618 <__aeabi_dmul>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	4610      	mov	r0, r2
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	f7f1 f984 	bl	8000bc8 <__aeabi_d2f>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	4a2b      	ldr	r2, [pc, #172]	@ (800f970 <BatteryPercentage+0xf0>)
 800f8c4:	6013      	str	r3, [r2, #0]
	batteryVoltage *= 1.52;    //1.48;  //1.53 = 240927    						//1.67	//2	 //  = (R1 + R2) / R2 = 2
 800f8c6:	4b2a      	ldr	r3, [pc, #168]	@ (800f970 <BatteryPercentage+0xf0>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7f0 fe4c 	bl	8000568 <__aeabi_f2d>
 800f8d0:	a323      	add	r3, pc, #140	@ (adr r3, 800f960 <BatteryPercentage+0xe0>)
 800f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d6:	f7f0 fe9f 	bl	8000618 <__aeabi_dmul>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	4610      	mov	r0, r2
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	f7f1 f971 	bl	8000bc8 <__aeabi_d2f>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	4a21      	ldr	r2, [pc, #132]	@ (800f970 <BatteryPercentage+0xf0>)
 800f8ea:	6013      	str	r3, [r2, #0]

	// Update the filter array with the new reading
	adcReadings[filterIndex] = batteryVoltage;
 800f8ec:	4b21      	ldr	r3, [pc, #132]	@ (800f974 <BatteryPercentage+0xf4>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	4b1f      	ldr	r3, [pc, #124]	@ (800f970 <BatteryPercentage+0xf0>)
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	4920      	ldr	r1, [pc, #128]	@ (800f978 <BatteryPercentage+0xf8>)
 800f8f8:	0083      	lsls	r3, r0, #2
 800f8fa:	440b      	add	r3, r1
 800f8fc:	601a      	str	r2, [r3, #0]
	filterIndex = (filterIndex + 1) % FILTER_SIZE; // Circular buffer index
 800f8fe:	4b1d      	ldr	r3, [pc, #116]	@ (800f974 <BatteryPercentage+0xf4>)
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	4b1d      	ldr	r3, [pc, #116]	@ (800f97c <BatteryPercentage+0xfc>)
 800f906:	fb83 1302 	smull	r1, r3, r3, r2
 800f90a:	1059      	asrs	r1, r3, #1
 800f90c:	17d3      	asrs	r3, r2, #31
 800f90e:	1ac9      	subs	r1, r1, r3
 800f910:	460b      	mov	r3, r1
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	440b      	add	r3, r1
 800f916:	1ad1      	subs	r1, r2, r3
 800f918:	b2ca      	uxtb	r2, r1
 800f91a:	4b16      	ldr	r3, [pc, #88]	@ (800f974 <BatteryPercentage+0xf4>)
 800f91c:	701a      	strb	r2, [r3, #0]

	// Calculate the filtered voltage using the moving average
	filteredVoltage = CalculateAverage(adcReadings, FILTER_SIZE);
 800f91e:	2105      	movs	r1, #5
 800f920:	4815      	ldr	r0, [pc, #84]	@ (800f978 <BatteryPercentage+0xf8>)
 800f922:	f000 f88d 	bl	800fa40 <CalculateAverage>
 800f926:	eef0 7a40 	vmov.f32	s15, s0
 800f92a:	4b15      	ldr	r3, [pc, #84]	@ (800f980 <BatteryPercentage+0x100>)
 800f92c:	edc3 7a00 	vstr	s15, [r3]

    // Calculate battery percentage based on filtered voltage
	percentage = CalculateBatteryPercentage(filteredVoltage);
 800f930:	4b13      	ldr	r3, [pc, #76]	@ (800f980 <BatteryPercentage+0x100>)
 800f932:	edd3 7a00 	vldr	s15, [r3]
 800f936:	eeb0 0a67 	vmov.f32	s0, s15
 800f93a:	f000 f825 	bl	800f988 <CalculateBatteryPercentage>
 800f93e:	eef0 7a40 	vmov.f32	s15, s0
 800f942:	4b10      	ldr	r3, [pc, #64]	@ (800f984 <BatteryPercentage+0x104>)
 800f944:	edc3 7a00 	vstr	s15, [r3]

}
 800f948:	bf00      	nop
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	f3af 8000 	nop.w
 800f950:	00000000 	.word	0x00000000
 800f954:	40b1df00 	.word	0x40b1df00
 800f958:	66666666 	.word	0x66666666
 800f95c:	400a6666 	.word	0x400a6666
 800f960:	851eb852 	.word	0x851eb852
 800f964:	3ff851eb 	.word	0x3ff851eb
 800f968:	20001fbc 	.word	0x20001fbc
 800f96c:	200002ac 	.word	0x200002ac
 800f970:	20001fc4 	.word	0x20001fc4
 800f974:	20001fd4 	.word	0x20001fd4
 800f978:	20001ff8 	.word	0x20001ff8
 800f97c:	66666667 	.word	0x66666667
 800f980:	20001fd8 	.word	0x20001fd8
 800f984:	20001fc0 	.word	0x20001fc0

0800f988 <CalculateBatteryPercentage>:


float CalculateBatteryPercentage(float batteryVoltage) {
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	ed87 0a01 	vstr	s0, [r7, #4]
    float percentage;

    if (batteryVoltage >= 4.20) {  //4.15
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7f0 fde8 	bl	8000568 <__aeabi_f2d>
 800f998:	a327      	add	r3, pc, #156	@ (adr r3, 800fa38 <CalculateBatteryPercentage+0xb0>)
 800f99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99e:	f7f1 f8c1 	bl	8000b24 <__aeabi_dcmpge>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d002      	beq.n	800f9ae <CalculateBatteryPercentage+0x26>
        percentage = 99.0;
 800f9a8:	4b21      	ldr	r3, [pc, #132]	@ (800fa30 <CalculateBatteryPercentage+0xa8>)
 800f9aa:	60fb      	str	r3, [r7, #12]
 800f9ac:	e030      	b.n	800fa10 <CalculateBatteryPercentage+0x88>
    } else if (batteryVoltage <= 3.6) {
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7f0 fdda 	bl	8000568 <__aeabi_f2d>
 800f9b4:	a31a      	add	r3, pc, #104	@ (adr r3, 800fa20 <CalculateBatteryPercentage+0x98>)
 800f9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ba:	f7f1 f8a9 	bl	8000b10 <__aeabi_dcmple>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d003      	beq.n	800f9cc <CalculateBatteryPercentage+0x44>
        percentage = 0.0;
 800f9c4:	f04f 0300 	mov.w	r3, #0
 800f9c8:	60fb      	str	r3, [r7, #12]
 800f9ca:	e021      	b.n	800fa10 <CalculateBatteryPercentage+0x88>
    } else {
        percentage = (batteryVoltage - 3.6) / (4.20 - 3.6) * 100;    //4.15
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7f0 fdcb 	bl	8000568 <__aeabi_f2d>
 800f9d2:	a313      	add	r3, pc, #76	@ (adr r3, 800fa20 <CalculateBatteryPercentage+0x98>)
 800f9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d8:	f7f0 fc66 	bl	80002a8 <__aeabi_dsub>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	460b      	mov	r3, r1
 800f9e0:	4610      	mov	r0, r2
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	a310      	add	r3, pc, #64	@ (adr r3, 800fa28 <CalculateBatteryPercentage+0xa0>)
 800f9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ea:	f7f0 ff3f 	bl	800086c <__aeabi_ddiv>
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	4610      	mov	r0, r2
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	f04f 0200 	mov.w	r2, #0
 800f9fa:	4b0e      	ldr	r3, [pc, #56]	@ (800fa34 <CalculateBatteryPercentage+0xac>)
 800f9fc:	f7f0 fe0c 	bl	8000618 <__aeabi_dmul>
 800fa00:	4602      	mov	r2, r0
 800fa02:	460b      	mov	r3, r1
 800fa04:	4610      	mov	r0, r2
 800fa06:	4619      	mov	r1, r3
 800fa08:	f7f1 f8de 	bl	8000bc8 <__aeabi_d2f>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	60fb      	str	r3, [r7, #12]
    }

    return percentage;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	ee07 3a90 	vmov	s15, r3
}
 800fa16:	eeb0 0a67 	vmov.f32	s0, s15
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	cccccccd 	.word	0xcccccccd
 800fa24:	400ccccc 	.word	0x400ccccc
 800fa28:	33333334 	.word	0x33333334
 800fa2c:	3fe33333 	.word	0x3fe33333
 800fa30:	42c60000 	.word	0x42c60000
 800fa34:	40590000 	.word	0x40590000
 800fa38:	cccccccd 	.word	0xcccccccd
 800fa3c:	4010cccc 	.word	0x4010cccc

0800fa40 <CalculateAverage>:

// Function to calculate the average of an array
float CalculateAverage(float *array, uint8_t size) {
 800fa40:	b480      	push	{r7}
 800fa42:	b085      	sub	sp, #20
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	460b      	mov	r3, r1
 800fa4a:	70fb      	strb	r3, [r7, #3]
    float sum = 0.0;
 800fa4c:	f04f 0300 	mov.w	r3, #0
 800fa50:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < size; i++) {
 800fa52:	2300      	movs	r3, #0
 800fa54:	72fb      	strb	r3, [r7, #11]
 800fa56:	e00e      	b.n	800fa76 <CalculateAverage+0x36>
        sum += array[i];
 800fa58:	7afb      	ldrb	r3, [r7, #11]
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	4413      	add	r3, r2
 800fa60:	edd3 7a00 	vldr	s15, [r3]
 800fa64:	ed97 7a03 	vldr	s14, [r7, #12]
 800fa68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa6c:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint8_t i = 0; i < size; i++) {
 800fa70:	7afb      	ldrb	r3, [r7, #11]
 800fa72:	3301      	adds	r3, #1
 800fa74:	72fb      	strb	r3, [r7, #11]
 800fa76:	7afa      	ldrb	r2, [r7, #11]
 800fa78:	78fb      	ldrb	r3, [r7, #3]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d3ec      	bcc.n	800fa58 <CalculateAverage+0x18>
    }
    return sum / size;
 800fa7e:	78fb      	ldrb	r3, [r7, #3]
 800fa80:	ee07 3a90 	vmov	s15, r3
 800fa84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa88:	ed97 7a03 	vldr	s14, [r7, #12]
 800fa8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fa90:	eef0 7a66 	vmov.f32	s15, s13
}
 800fa94:	eeb0 0a67 	vmov.f32	s0, s15
 800fa98:	3714      	adds	r7, #20
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
	...

0800faa4 <DisplayPercentage>:

void DisplayPercentage(void) {
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b08e      	sub	sp, #56	@ 0x38
 800faa8:	af02      	add	r7, sp, #8

	// Update the display only if there is a significant change in percentage
	if (fabs(percentage - lastPercentage) >= UPDATE_THRESHOLD){
 800faaa:	4b42      	ldr	r3, [pc, #264]	@ (800fbb4 <DisplayPercentage+0x110>)
 800faac:	ed93 7a00 	vldr	s14, [r3]
 800fab0:	4b41      	ldr	r3, [pc, #260]	@ (800fbb8 <DisplayPercentage+0x114>)
 800fab2:	edd3 7a00 	vldr	s15, [r3]
 800fab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800faba:	eef0 7ae7 	vabs.f32	s15, s15
 800fabe:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800fac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faca:	db2f      	blt.n	800fb2c <DisplayPercentage+0x88>
		char buffer1[20];
		snprintf(buffer1, sizeof(buffer1), "%.0f", percentage);
 800facc:	4b39      	ldr	r3, [pc, #228]	@ (800fbb4 <DisplayPercentage+0x110>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7f0 fd49 	bl	8000568 <__aeabi_f2d>
 800fad6:	4602      	mov	r2, r0
 800fad8:	460b      	mov	r3, r1
 800fada:	f107 0014 	add.w	r0, r7, #20
 800fade:	e9cd 2300 	strd	r2, r3, [sp]
 800fae2:	4a36      	ldr	r2, [pc, #216]	@ (800fbbc <DisplayPercentage+0x118>)
 800fae4:	2114      	movs	r1, #20
 800fae6:	f001 fbbb 	bl	8011260 <sniprintf>
		ssd1306_SetCursor(107, 12);
 800faea:	210c      	movs	r1, #12
 800faec:	206b      	movs	r0, #107	@ 0x6b
 800faee:	f7f2 f933 	bl	8001d58 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer1, Font_7x10, White);
 800faf2:	4b33      	ldr	r3, [pc, #204]	@ (800fbc0 <DisplayPercentage+0x11c>)
 800faf4:	f107 0014 	add.w	r0, r7, #20
 800faf8:	2201      	movs	r2, #1
 800fafa:	9200      	str	r2, [sp, #0]
 800fafc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fafe:	f7f2 f905 	bl	8001d0c <ssd1306_WriteString>
		//ssd1306_UpdateScreen();
		lastPercentage = percentage;           // Update the last percentage value
 800fb02:	4b2c      	ldr	r3, [pc, #176]	@ (800fbb4 <DisplayPercentage+0x110>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	4a2c      	ldr	r2, [pc, #176]	@ (800fbb8 <DisplayPercentage+0x114>)
 800fb08:	6013      	str	r3, [r2, #0]
		//***************** BATT ICON *******************************************//
		const uint8_t* batteryIcon = GetBatteryIcon(percentage);
 800fb0a:	4b2a      	ldr	r3, [pc, #168]	@ (800fbb4 <DisplayPercentage+0x110>)
 800fb0c:	edd3 7a00 	vldr	s15, [r3]
 800fb10:	eeb0 0a67 	vmov.f32	s0, s15
 800fb14:	f000 f85a 	bl	800fbcc <GetBatteryIcon>
 800fb18:	62b8      	str	r0, [r7, #40]	@ 0x28
		OLED_DrawBitmap(122, 12, batteryIcon, 16, 8);
 800fb1a:	2308      	movs	r3, #8
 800fb1c:	9300      	str	r3, [sp, #0]
 800fb1e:	2310      	movs	r3, #16
 800fb20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb22:	210c      	movs	r1, #12
 800fb24:	207a      	movs	r0, #122	@ 0x7a
 800fb26:	f7f2 fa09 	bl	8001f3c <OLED_DrawBitmap>
 800fb2a:	e028      	b.n	800fb7e <DisplayPercentage+0xda>
	}
	else{
		char buffer1[20];
		snprintf(buffer1, sizeof(buffer1), "%.0f", lastPercentage);
 800fb2c:	4b22      	ldr	r3, [pc, #136]	@ (800fbb8 <DisplayPercentage+0x114>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7f0 fd19 	bl	8000568 <__aeabi_f2d>
 800fb36:	4602      	mov	r2, r0
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4638      	mov	r0, r7
 800fb3c:	e9cd 2300 	strd	r2, r3, [sp]
 800fb40:	4a1e      	ldr	r2, [pc, #120]	@ (800fbbc <DisplayPercentage+0x118>)
 800fb42:	2114      	movs	r1, #20
 800fb44:	f001 fb8c 	bl	8011260 <sniprintf>
		ssd1306_SetCursor(107, 12);
 800fb48:	210c      	movs	r1, #12
 800fb4a:	206b      	movs	r0, #107	@ 0x6b
 800fb4c:	f7f2 f904 	bl	8001d58 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer1, Font_7x10, White);
 800fb50:	4b1b      	ldr	r3, [pc, #108]	@ (800fbc0 <DisplayPercentage+0x11c>)
 800fb52:	4638      	mov	r0, r7
 800fb54:	2201      	movs	r2, #1
 800fb56:	9200      	str	r2, [sp, #0]
 800fb58:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fb5a:	f7f2 f8d7 	bl	8001d0c <ssd1306_WriteString>
		//***********************************************************************//
		const uint8_t* batteryIcon = GetBatteryIcon(lastPercentage);
 800fb5e:	4b16      	ldr	r3, [pc, #88]	@ (800fbb8 <DisplayPercentage+0x114>)
 800fb60:	edd3 7a00 	vldr	s15, [r3]
 800fb64:	eeb0 0a67 	vmov.f32	s0, s15
 800fb68:	f000 f830 	bl	800fbcc <GetBatteryIcon>
 800fb6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		OLED_DrawBitmap(122, 12, batteryIcon, 16, 8);
 800fb6e:	2308      	movs	r3, #8
 800fb70:	9300      	str	r3, [sp, #0]
 800fb72:	2310      	movs	r3, #16
 800fb74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb76:	210c      	movs	r1, #12
 800fb78:	207a      	movs	r0, #122	@ 0x7a
 800fb7a:	f7f2 f9df 	bl	8001f3c <OLED_DrawBitmap>
	}

	if(isCharging){
 800fb7e:	4b11      	ldr	r3, [pc, #68]	@ (800fbc4 <DisplayPercentage+0x120>)
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d00a      	beq.n	800fb9c <DisplayPercentage+0xf8>
		// Show charging symbol next to battery icon
		ssd1306_DrawBitmap(99, 12, charging_symbol, 8, 8, White);
 800fb86:	2301      	movs	r3, #1
 800fb88:	9301      	str	r3, [sp, #4]
 800fb8a:	2308      	movs	r3, #8
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	2308      	movs	r3, #8
 800fb90:	4a0d      	ldr	r2, [pc, #52]	@ (800fbc8 <DisplayPercentage+0x124>)
 800fb92:	210c      	movs	r1, #12
 800fb94:	2063      	movs	r0, #99	@ 0x63
 800fb96:	f7f2 f945 	bl	8001e24 <ssd1306_DrawBitmap>
	else{
		// Clear the area where the charging symbol would be
		ssd1306_FillRectangle(99, 12, 106, 20, Black);                 //ssd1306_ClearArea
	}

}
 800fb9a:	e007      	b.n	800fbac <DisplayPercentage+0x108>
		ssd1306_FillRectangle(99, 12, 106, 20, Black);                 //ssd1306_ClearArea
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	2314      	movs	r3, #20
 800fba2:	226a      	movs	r2, #106	@ 0x6a
 800fba4:	210c      	movs	r1, #12
 800fba6:	2063      	movs	r0, #99	@ 0x63
 800fba8:	f7f2 f8ee 	bl	8001d88 <ssd1306_FillRectangle>
}
 800fbac:	bf00      	nop
 800fbae:	3730      	adds	r7, #48	@ 0x30
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	20001fc0 	.word	0x20001fc0
 800fbb8:	2000200c 	.word	0x2000200c
 800fbbc:	080134e0 	.word	0x080134e0
 800fbc0:	08014fd4 	.word	0x08014fd4
 800fbc4:	20002010 	.word	0x20002010
 800fbc8:	0801555c 	.word	0x0801555c

0800fbcc <GetBatteryIcon>:


const uint8_t* GetBatteryIcon(float percentage) {
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (percentage >= 75.0) {
 800fbd6:	edd7 7a01 	vldr	s15, [r7, #4]
 800fbda:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800fc28 <GetBatteryIcon+0x5c>
 800fbde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe6:	db01      	blt.n	800fbec <GetBatteryIcon+0x20>
        return battery_full;
 800fbe8:	4b10      	ldr	r3, [pc, #64]	@ (800fc2c <GetBatteryIcon+0x60>)
 800fbea:	e016      	b.n	800fc1a <GetBatteryIcon+0x4e>
    } else if (percentage >= 50.0) {
 800fbec:	edd7 7a01 	vldr	s15, [r7, #4]
 800fbf0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800fc30 <GetBatteryIcon+0x64>
 800fbf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbfc:	db01      	blt.n	800fc02 <GetBatteryIcon+0x36>
        return battery_half;
 800fbfe:	4b0d      	ldr	r3, [pc, #52]	@ (800fc34 <GetBatteryIcon+0x68>)
 800fc00:	e00b      	b.n	800fc1a <GetBatteryIcon+0x4e>
    } else if (percentage >= 25.0) {
 800fc02:	edd7 7a01 	vldr	s15, [r7, #4]
 800fc06:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800fc0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc12:	db01      	blt.n	800fc18 <GetBatteryIcon+0x4c>
        return battery_low;
 800fc14:	4b08      	ldr	r3, [pc, #32]	@ (800fc38 <GetBatteryIcon+0x6c>)
 800fc16:	e000      	b.n	800fc1a <GetBatteryIcon+0x4e>
    } else {
        return battery_empty;
 800fc18:	4b08      	ldr	r3, [pc, #32]	@ (800fc3c <GetBatteryIcon+0x70>)
    }
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	370c      	adds	r7, #12
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	42960000 	.word	0x42960000
 800fc2c:	0801554c 	.word	0x0801554c
 800fc30:	42480000 	.word	0x42480000
 800fc34:	0801553c 	.word	0x0801553c
 800fc38:	0801552c 	.word	0x0801552c
 800fc3c:	0801551c 	.word	0x0801551c

0800fc40 <TIM1_TRG_COM_TIM11_IRQHandler>:


void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 800fc40:	b580      	push	{r7, lr}
 800fc42:	af00      	add	r7, sp, #0
	if (TIM11->SR & TIM_SR_UIF) { // Check interrupt flag
 800fc44:	4b07      	ldr	r3, [pc, #28]	@ (800fc64 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 800fc46:	691b      	ldr	r3, [r3, #16]
 800fc48:	f003 0301 	and.w	r3, r3, #1
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d007      	beq.n	800fc60 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>
		TIM11->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 800fc50:	4b04      	ldr	r3, [pc, #16]	@ (800fc64 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 800fc52:	691b      	ldr	r3, [r3, #16]
 800fc54:	4a03      	ldr	r2, [pc, #12]	@ (800fc64 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 800fc56:	f023 0301 	bic.w	r3, r3, #1
 800fc5a:	6113      	str	r3, [r2, #16]
		BatteryPercentage();      //calculate batt percentage , Every 5 second
 800fc5c:	f7ff fe10 	bl	800f880 <BatteryPercentage>
	}
}
 800fc60:	bf00      	nop
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	40014800 	.word	0x40014800

0800fc68 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void) {
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	af00      	add	r7, sp, #0
	if (TIM10->SR & TIM_SR_UIF) { // Check interrupt flag
 800fc6c:	4b0f      	ldr	r3, [pc, #60]	@ (800fcac <TIM1_UP_TIM10_IRQHandler+0x44>)
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	f003 0301 	and.w	r3, r3, #1
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d017      	beq.n	800fca8 <TIM1_UP_TIM10_IRQHandler+0x40>
		TIM10->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 800fc78:	4b0c      	ldr	r3, [pc, #48]	@ (800fcac <TIM1_UP_TIM10_IRQHandler+0x44>)
 800fc7a:	691b      	ldr	r3, [r3, #16]
 800fc7c:	4a0b      	ldr	r2, [pc, #44]	@ (800fcac <TIM1_UP_TIM10_IRQHandler+0x44>)
 800fc7e:	f023 0301 	bic.w	r3, r3, #1
 800fc82:	6113      	str	r3, [r2, #16]
		dotCounter++;             // dot every 1 sec
 800fc84:	4b0a      	ldr	r3, [pc, #40]	@ (800fcb0 <TIM1_UP_TIM10_IRQHandler+0x48>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3301      	adds	r3, #1
 800fc8a:	4a09      	ldr	r2, [pc, #36]	@ (800fcb0 <TIM1_UP_TIM10_IRQHandler+0x48>)
 800fc8c:	6013      	str	r3, [r2, #0]

		inactivityCounter++;      //StandBy Counter 1 sec
 800fc8e:	4b09      	ldr	r3, [pc, #36]	@ (800fcb4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	3301      	adds	r3, #1
 800fc94:	4a07      	ldr	r2, [pc, #28]	@ (800fcb4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 800fc96:	6013      	str	r3, [r2, #0]
		if (inactivityCounter >= TimeToStandBy){           // standBy after 120 sec
 800fc98:	4b06      	ldr	r3, [pc, #24]	@ (800fcb4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a06      	ldr	r2, [pc, #24]	@ (800fcb8 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800fc9e:	6812      	ldr	r2, [r2, #0]
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d301      	bcc.n	800fca8 <TIM1_UP_TIM10_IRQHandler+0x40>
			Enter_Standby_Mode();
 800fca4:	f000 fc90 	bl	80105c8 <Enter_Standby_Mode>
		}
	}
}
 800fca8:	bf00      	nop
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	40014400 	.word	0x40014400
 800fcb0:	20001fc8 	.word	0x20001fc8
 800fcb4:	20001fd0 	.word	0x20001fd0
 800fcb8:	200000c0 	.word	0x200000c0

0800fcbc <LCD_UpdateMenu>:

//#######################################################################################################################

// Function to handle menu updates
void LCD_UpdateMenu(void) {
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	af00      	add	r7, sp, #0
    LCD_DisplayMenu();
 800fcc0:	f7fe fdc8 	bl	800e854 <LCD_DisplayMenu>
}
 800fcc4:	bf00      	nop
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <MeasureAverage>:

void MeasureAverage(void) {
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
for (int var = 1; var <= avgValue+1; var++)
 800fcce:	2301      	movs	r3, #1
 800fcd0:	607b      	str	r3, [r7, #4]
 800fcd2:	e010      	b.n	800fcf6 <MeasureAverage+0x2e>
{
	SumBil += BilArray[var];
 800fcd4:	4a15      	ldr	r2, [pc, #84]	@ (800fd2c <MeasureAverage+0x64>)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	009b      	lsls	r3, r3, #2
 800fcda:	4413      	add	r3, r2
 800fcdc:	ed93 7a00 	vldr	s14, [r3]
 800fce0:	4b13      	ldr	r3, [pc, #76]	@ (800fd30 <MeasureAverage+0x68>)
 800fce2:	edd3 7a00 	vldr	s15, [r3]
 800fce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcea:	4b11      	ldr	r3, [pc, #68]	@ (800fd30 <MeasureAverage+0x68>)
 800fcec:	edc3 7a00 	vstr	s15, [r3]
for (int var = 1; var <= avgValue+1; var++)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	607b      	str	r3, [r7, #4]
 800fcf6:	4b0f      	ldr	r3, [pc, #60]	@ (800fd34 <MeasureAverage+0x6c>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	dde8      	ble.n	800fcd4 <MeasureAverage+0xc>
}
AveragedBil = SumBil / avgValue;
 800fd02:	4b0b      	ldr	r3, [pc, #44]	@ (800fd30 <MeasureAverage+0x68>)
 800fd04:	edd3 6a00 	vldr	s13, [r3]
 800fd08:	4b0a      	ldr	r3, [pc, #40]	@ (800fd34 <MeasureAverage+0x6c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	ee07 3a90 	vmov	s15, r3
 800fd10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fd14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd18:	4b07      	ldr	r3, [pc, #28]	@ (800fd38 <MeasureAverage+0x70>)
 800fd1a:	edc3 7a00 	vstr	s15, [r3]
}
 800fd1e:	bf00      	nop
 800fd20:	370c      	adds	r7, #12
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr
 800fd2a:	bf00      	nop
 800fd2c:	20001f64 	.word	0x20001f64
 800fd30:	20001f98 	.word	0x20001f98
 800fd34:	2000009c 	.word	0x2000009c
 800fd38:	20001f94 	.word	0x20001f94

0800fd3c <LCD_Reset>:

// Function to reset the menu to the initial state
void LCD_Reset(void) {
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
    currentMenu = MENU_SET_AVG;
 800fd42:	4b1b      	ldr	r3, [pc, #108]	@ (800fdb0 <LCD_Reset+0x74>)
 800fd44:	2202      	movs	r2, #2
 800fd46:	701a      	strb	r2, [r3, #0]
    currentCursor = CURSOR_ON_MENU;
 800fd48:	4b1a      	ldr	r3, [pc, #104]	@ (800fdb4 <LCD_Reset+0x78>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	701a      	strb	r2, [r3, #0]
    avgValue = 1;
 800fd4e:	4b1a      	ldr	r3, [pc, #104]	@ (800fdb8 <LCD_Reset+0x7c>)
 800fd50:	2201      	movs	r2, #1
 800fd52:	601a      	str	r2, [r3, #0]
    currentTest = 1;
 800fd54:	4b19      	ldr	r3, [pc, #100]	@ (800fdbc <LCD_Reset+0x80>)
 800fd56:	2201      	movs	r2, #1
 800fd58:	601a      	str	r2, [r3, #0]
    //************************************//
    for (int i = 0; i <= 12-1; i++) BilArray[i]=0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	607b      	str	r3, [r7, #4]
 800fd5e:	e009      	b.n	800fd74 <LCD_Reset+0x38>
 800fd60:	4a17      	ldr	r2, [pc, #92]	@ (800fdc0 <LCD_Reset+0x84>)
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	4413      	add	r3, r2
 800fd68:	f04f 0200 	mov.w	r2, #0
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	3301      	adds	r3, #1
 800fd72:	607b      	str	r3, [r7, #4]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2b0b      	cmp	r3, #11
 800fd78:	ddf2      	ble.n	800fd60 <LCD_Reset+0x24>
    SumBil = 0;
 800fd7a:	4b12      	ldr	r3, [pc, #72]	@ (800fdc4 <LCD_Reset+0x88>)
 800fd7c:	f04f 0200 	mov.w	r2, #0
 800fd80:	601a      	str	r2, [r3, #0]
    AveragedBil = 0;
 800fd82:	4b11      	ldr	r3, [pc, #68]	@ (800fdc8 <LCD_Reset+0x8c>)
 800fd84:	f04f 0200 	mov.w	r2, #0
 800fd88:	601a      	str	r2, [r3, #0]
    BilResult=0;
 800fd8a:	4b10      	ldr	r3, [pc, #64]	@ (800fdcc <LCD_Reset+0x90>)
 800fd8c:	f04f 0200 	mov.w	r2, #0
 800fd90:	601a      	str	r2, [r3, #0]
    testDone=0;
 800fd92:	4b0f      	ldr	r3, [pc, #60]	@ (800fdd0 <LCD_Reset+0x94>)
 800fd94:	2200      	movs	r2, #0
 800fd96:	701a      	strb	r2, [r3, #0]
    //***********************************//
    HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET); // Turn off the LED
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fd9e:	480d      	ldr	r0, [pc, #52]	@ (800fdd4 <LCD_Reset+0x98>)
 800fda0:	f7f4 fba4 	bl	80044ec <HAL_GPIO_WritePin>
    LCD_UpdateMenu();
 800fda4:	f7ff ff8a 	bl	800fcbc <LCD_UpdateMenu>
}
 800fda8:	bf00      	nop
 800fdaa:	3708      	adds	r7, #8
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	20001f60 	.word	0x20001f60
 800fdb4:	20001f61 	.word	0x20001f61
 800fdb8:	2000009c 	.word	0x2000009c
 800fdbc:	200000a0 	.word	0x200000a0
 800fdc0:	20001f64 	.word	0x20001f64
 800fdc4:	20001f98 	.word	0x20001f98
 800fdc8:	20001f94 	.word	0x20001f94
 800fdcc:	20001f54 	.word	0x20001f54
 800fdd0:	20001f46 	.word	0x20001f46
 800fdd4:	40021000 	.word	0x40021000

0800fdd8 <DoesTestComplete>:

// Call this function after each test
void DoesTestComplete(void) {
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	af00      	add	r7, sp, #0

	if (testDone)    				 // if test btn pressed
 800fddc:	4b17      	ldr	r3, [pc, #92]	@ (800fe3c <DoesTestComplete+0x64>)
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d029      	beq.n	800fe38 <DoesTestComplete+0x60>
	{
		testDone=0;
 800fde4:	4b15      	ldr	r3, [pc, #84]	@ (800fe3c <DoesTestComplete+0x64>)
 800fde6:	2200      	movs	r2, #0
 800fde8:	701a      	strb	r2, [r3, #0]
		BilArray[currentTest]=BilResult;
 800fdea:	4b15      	ldr	r3, [pc, #84]	@ (800fe40 <DoesTestComplete+0x68>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4a15      	ldr	r2, [pc, #84]	@ (800fe44 <DoesTestComplete+0x6c>)
 800fdf0:	6812      	ldr	r2, [r2, #0]
 800fdf2:	4915      	ldr	r1, [pc, #84]	@ (800fe48 <DoesTestComplete+0x70>)
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	440b      	add	r3, r1
 800fdf8:	601a      	str	r2, [r3, #0]
		BilResult=0;
 800fdfa:	4b12      	ldr	r3, [pc, #72]	@ (800fe44 <DoesTestComplete+0x6c>)
 800fdfc:	f04f 0200 	mov.w	r2, #0
 800fe00:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET);
 800fe02:	2200      	movs	r2, #0
 800fe04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fe08:	4810      	ldr	r0, [pc, #64]	@ (800fe4c <DoesTestComplete+0x74>)
 800fe0a:	f7f4 fb6f 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_Delay(Tests_Intratime);     // Time between Tests
 800fe0e:	4b10      	ldr	r3, [pc, #64]	@ (800fe50 <DoesTestComplete+0x78>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7f2 fe26 	bl	8002a64 <HAL_Delay>

		currentTest++;
 800fe18:	4b09      	ldr	r3, [pc, #36]	@ (800fe40 <DoesTestComplete+0x68>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	4a08      	ldr	r2, [pc, #32]	@ (800fe40 <DoesTestComplete+0x68>)
 800fe20:	6013      	str	r3, [r2, #0]
		if (currentTest > avgValue)  currentMenu = MENU_SHOW_RESULT;
 800fe22:	4b07      	ldr	r3, [pc, #28]	@ (800fe40 <DoesTestComplete+0x68>)
 800fe24:	681a      	ldr	r2, [r3, #0]
 800fe26:	4b0b      	ldr	r3, [pc, #44]	@ (800fe54 <DoesTestComplete+0x7c>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	dd02      	ble.n	800fe34 <DoesTestComplete+0x5c>
 800fe2e:	4b0a      	ldr	r3, [pc, #40]	@ (800fe58 <DoesTestComplete+0x80>)
 800fe30:	2204      	movs	r2, #4
 800fe32:	701a      	strb	r2, [r3, #0]
		LCD_UpdateMenu();
 800fe34:	f7ff ff42 	bl	800fcbc <LCD_UpdateMenu>
	}
}
 800fe38:	bf00      	nop
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	20001f46 	.word	0x20001f46
 800fe40:	200000a0 	.word	0x200000a0
 800fe44:	20001f54 	.word	0x20001f54
 800fe48:	20001f64 	.word	0x20001f64
 800fe4c:	40021000 	.word	0x40021000
 800fe50:	200000a8 	.word	0x200000a8
 800fe54:	2000009c 	.word	0x2000009c
 800fe58:	20001f60 	.word	0x20001f60

0800fe5c <UserAction_Detected>:

void UserAction_Detected(void)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	af00      	add	r7, sp, #0
    // Reset inactivity counter to 0 when user performs an action
    inactivityCounter = 0;
 800fe60:	4b03      	ldr	r3, [pc, #12]	@ (800fe70 <UserAction_Detected+0x14>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	601a      	str	r2, [r3, #0]
}
 800fe66:	bf00      	nop
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr
 800fe70:	20001fd0 	.word	0x20001fd0

0800fe74 <decToBcd>:


#define DS1307_ADDRESS 0x68  // DS1307 I2C address

// BCD conversion helper functions
uint8_t decToBcd(int val) {
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
    return (uint8_t)((val / 10 * 16) + (val % 10));
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4a0f      	ldr	r2, [pc, #60]	@ (800febc <decToBcd+0x48>)
 800fe80:	fb82 1203 	smull	r1, r2, r2, r3
 800fe84:	1092      	asrs	r2, r2, #2
 800fe86:	17db      	asrs	r3, r3, #31
 800fe88:	1ad3      	subs	r3, r2, r3
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	011b      	lsls	r3, r3, #4
 800fe8e:	b2d8      	uxtb	r0, r3
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	4b0a      	ldr	r3, [pc, #40]	@ (800febc <decToBcd+0x48>)
 800fe94:	fb83 1302 	smull	r1, r3, r3, r2
 800fe98:	1099      	asrs	r1, r3, #2
 800fe9a:	17d3      	asrs	r3, r2, #31
 800fe9c:	1ac9      	subs	r1, r1, r3
 800fe9e:	460b      	mov	r3, r1
 800fea0:	009b      	lsls	r3, r3, #2
 800fea2:	440b      	add	r3, r1
 800fea4:	005b      	lsls	r3, r3, #1
 800fea6:	1ad1      	subs	r1, r2, r3
 800fea8:	b2cb      	uxtb	r3, r1
 800feaa:	4403      	add	r3, r0
 800feac:	b2db      	uxtb	r3, r3
}
 800feae:	4618      	mov	r0, r3
 800feb0:	370c      	adds	r7, #12
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	66666667 	.word	0x66666667

0800fec0 <bcdToDec>:

int bcdToDec(uint8_t val) {
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	4603      	mov	r3, r0
 800fec8:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 800feca:	79fb      	ldrb	r3, [r7, #7]
 800fecc:	091b      	lsrs	r3, r3, #4
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	461a      	mov	r2, r3
 800fed2:	4613      	mov	r3, r2
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	4413      	add	r3, r2
 800fed8:	005b      	lsls	r3, r3, #1
 800feda:	461a      	mov	r2, r3
 800fedc:	79fb      	ldrb	r3, [r7, #7]
 800fede:	f003 030f 	and.w	r3, r3, #15
 800fee2:	4413      	add	r3, r2
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <DS1307_is_running>:

// Function to check if the DS1307 RTC is running (Clock Halt bit)
uint8_t DS1307_is_running() {
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af02      	add	r7, sp, #8
    uint8_t seconds;
    uint8_t startAddr = 0x00;
 800fef6:	2300      	movs	r3, #0
 800fef8:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, &startAddr, 1, HAL_MAX_DELAY);
 800fefa:	1dba      	adds	r2, r7, #6
 800fefc:	f04f 33ff 	mov.w	r3, #4294967295
 800ff00:	9300      	str	r3, [sp, #0]
 800ff02:	2301      	movs	r3, #1
 800ff04:	21d0      	movs	r1, #208	@ 0xd0
 800ff06:	480b      	ldr	r0, [pc, #44]	@ (800ff34 <DS1307_is_running+0x44>)
 800ff08:	f7f6 fd80 	bl	8006a0c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, DS1307_ADDRESS << 1, &seconds, 1, HAL_MAX_DELAY);
 800ff0c:	1dfa      	adds	r2, r7, #7
 800ff0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	2301      	movs	r3, #1
 800ff16:	21d0      	movs	r1, #208	@ 0xd0
 800ff18:	4806      	ldr	r0, [pc, #24]	@ (800ff34 <DS1307_is_running+0x44>)
 800ff1a:	f7f6 fe75 	bl	8006c08 <HAL_I2C_Master_Receive>

    // Check if the Clock Halt (CH) bit is set (bit 7 of the seconds register)
    return (seconds & 0x80) == 0;
 800ff1e:	79fb      	ldrb	r3, [r7, #7]
 800ff20:	b25b      	sxtb	r3, r3
 800ff22:	43db      	mvns	r3, r3
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	09db      	lsrs	r3, r3, #7
 800ff28:	b2db      	uxtb	r3, r3
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	200003fc 	.word	0x200003fc

0800ff38 <RTC_Init>:
// Function to initialize the DS1307 RTC
void RTC_Init(void) {
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af04      	add	r7, sp, #16
    /*// Ensure the RTC is started by setting the CH (Clock Halt) bit to 0
    uint8_t initData[2] = {0x00, 0x00};
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, initData, 2, HAL_MAX_DELAY);*/
	if (!DS1307_is_running()) {
 800ff3e:	f7ff ffd7 	bl	800fef0 <DS1307_is_running>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d10b      	bne.n	800ff60 <RTC_Init+0x28>
		// If the RTC is not running, set the initial time (e.g., 00:00:00)
		RTC_SetTime(0, 0, 0, 1, 1, 1, 24);  // Set time to 00:00:00, date to 01/01/2021
 800ff48:	2318      	movs	r3, #24
 800ff4a:	9302      	str	r3, [sp, #8]
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	9301      	str	r3, [sp, #4]
 800ff50:	2301      	movs	r3, #1
 800ff52:	9300      	str	r3, [sp, #0]
 800ff54:	2301      	movs	r3, #1
 800ff56:	2200      	movs	r2, #0
 800ff58:	2100      	movs	r1, #0
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	f000 f804 	bl	800ff68 <RTC_SetTime>
	}
}
 800ff60:	bf00      	nop
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
	...

0800ff68 <RTC_SetTime>:

// Function to set the time and date on the DS1307
void RTC_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t day, uint8_t date, uint8_t month, uint8_t year) {
 800ff68:	b590      	push	{r4, r7, lr}
 800ff6a:	b087      	sub	sp, #28
 800ff6c:	af02      	add	r7, sp, #8
 800ff6e:	4604      	mov	r4, r0
 800ff70:	4608      	mov	r0, r1
 800ff72:	4611      	mov	r1, r2
 800ff74:	461a      	mov	r2, r3
 800ff76:	4623      	mov	r3, r4
 800ff78:	71fb      	strb	r3, [r7, #7]
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	71bb      	strb	r3, [r7, #6]
 800ff7e:	460b      	mov	r3, r1
 800ff80:	717b      	strb	r3, [r7, #5]
 800ff82:	4613      	mov	r3, r2
 800ff84:	713b      	strb	r3, [r7, #4]
    uint8_t setData[8];
    setData[0] = 0x00;  // Register address to start with
 800ff86:	2300      	movs	r3, #0
 800ff88:	723b      	strb	r3, [r7, #8]
    setData[1] = decToBcd(seconds & 0x7F);
 800ff8a:	797b      	ldrb	r3, [r7, #5]
 800ff8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7ff ff6f 	bl	800fe74 <decToBcd>
 800ff96:	4603      	mov	r3, r0
 800ff98:	727b      	strb	r3, [r7, #9]
    setData[2] = decToBcd(minutes);
 800ff9a:	79bb      	ldrb	r3, [r7, #6]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7ff ff69 	bl	800fe74 <decToBcd>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	72bb      	strb	r3, [r7, #10]
    setData[3] = decToBcd(hours);
 800ffa6:	79fb      	ldrb	r3, [r7, #7]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7ff ff63 	bl	800fe74 <decToBcd>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	72fb      	strb	r3, [r7, #11]
    setData[4] = decToBcd(day);
 800ffb2:	793b      	ldrb	r3, [r7, #4]
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7ff ff5d 	bl	800fe74 <decToBcd>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	733b      	strb	r3, [r7, #12]
    setData[5] = decToBcd(date);
 800ffbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7ff ff56 	bl	800fe74 <decToBcd>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	737b      	strb	r3, [r7, #13]
    setData[6] = decToBcd(month);
 800ffcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff ff4f 	bl	800fe74 <decToBcd>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	73bb      	strb	r3, [r7, #14]
    setData[7] = decToBcd(year);
 800ffda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7ff ff48 	bl	800fe74 <decToBcd>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, setData, 8, HAL_MAX_DELAY);
 800ffe8:	f107 0208 	add.w	r2, r7, #8
 800ffec:	f04f 33ff 	mov.w	r3, #4294967295
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	2308      	movs	r3, #8
 800fff4:	21d0      	movs	r1, #208	@ 0xd0
 800fff6:	4803      	ldr	r0, [pc, #12]	@ (8010004 <RTC_SetTime+0x9c>)
 800fff8:	f7f6 fd08 	bl	8006a0c <HAL_I2C_Master_Transmit>
}
 800fffc:	bf00      	nop
 800fffe:	3714      	adds	r7, #20
 8010000:	46bd      	mov	sp, r7
 8010002:	bd90      	pop	{r4, r7, pc}
 8010004:	200003fc 	.word	0x200003fc

08010008 <RTC_GetTime>:

// Function to read the current time and date from the DS1307
void RTC_GetTime(uint8_t* hours, uint8_t* minutes, uint8_t* seconds, uint8_t* day, uint8_t* date, uint8_t* month, uint8_t* year) {
 8010008:	b580      	push	{r7, lr}
 801000a:	b08a      	sub	sp, #40	@ 0x28
 801000c:	af02      	add	r7, sp, #8
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
 8010014:	603b      	str	r3, [r7, #0]
    uint8_t readData[7];
    uint8_t startAddr = 0x00;
 8010016:	2300      	movs	r3, #0
 8010018:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(&hi2c3, DS1307_ADDRESS << 1, &startAddr, 1, HAL_MAX_DELAY);
 801001a:	f107 0217 	add.w	r2, r7, #23
 801001e:	f04f 33ff 	mov.w	r3, #4294967295
 8010022:	9300      	str	r3, [sp, #0]
 8010024:	2301      	movs	r3, #1
 8010026:	21d0      	movs	r1, #208	@ 0xd0
 8010028:	4827      	ldr	r0, [pc, #156]	@ (80100c8 <RTC_GetTime+0xc0>)
 801002a:	f7f6 fcef 	bl	8006a0c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, DS1307_ADDRESS << 1, readData, 7, HAL_MAX_DELAY);
 801002e:	f107 0218 	add.w	r2, r7, #24
 8010032:	f04f 33ff 	mov.w	r3, #4294967295
 8010036:	9300      	str	r3, [sp, #0]
 8010038:	2307      	movs	r3, #7
 801003a:	21d0      	movs	r1, #208	@ 0xd0
 801003c:	4822      	ldr	r0, [pc, #136]	@ (80100c8 <RTC_GetTime+0xc0>)
 801003e:	f7f6 fde3 	bl	8006c08 <HAL_I2C_Master_Receive>

    *seconds = bcdToDec(readData[0] & 0x7F);  // Mask to ignore CH bit
 8010042:	7e3b      	ldrb	r3, [r7, #24]
 8010044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010048:	b2db      	uxtb	r3, r3
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff ff38 	bl	800fec0 <bcdToDec>
 8010050:	4603      	mov	r3, r0
 8010052:	b2da      	uxtb	r2, r3
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	701a      	strb	r2, [r3, #0]
    *minutes = bcdToDec(readData[1]);
 8010058:	7e7b      	ldrb	r3, [r7, #25]
 801005a:	4618      	mov	r0, r3
 801005c:	f7ff ff30 	bl	800fec0 <bcdToDec>
 8010060:	4603      	mov	r3, r0
 8010062:	b2da      	uxtb	r2, r3
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	701a      	strb	r2, [r3, #0]
    *hours = bcdToDec(readData[2] & 0x3F);  // 24-hour format
 8010068:	7ebb      	ldrb	r3, [r7, #26]
 801006a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801006e:	b2db      	uxtb	r3, r3
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff ff25 	bl	800fec0 <bcdToDec>
 8010076:	4603      	mov	r3, r0
 8010078:	b2da      	uxtb	r2, r3
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	701a      	strb	r2, [r3, #0]
    *day = bcdToDec(readData[3]);
 801007e:	7efb      	ldrb	r3, [r7, #27]
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff ff1d 	bl	800fec0 <bcdToDec>
 8010086:	4603      	mov	r3, r0
 8010088:	b2da      	uxtb	r2, r3
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	701a      	strb	r2, [r3, #0]
    *date = bcdToDec(readData[4]);
 801008e:	7f3b      	ldrb	r3, [r7, #28]
 8010090:	4618      	mov	r0, r3
 8010092:	f7ff ff15 	bl	800fec0 <bcdToDec>
 8010096:	4603      	mov	r3, r0
 8010098:	b2da      	uxtb	r2, r3
 801009a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801009c:	701a      	strb	r2, [r3, #0]
    *month = bcdToDec(readData[5]);
 801009e:	7f7b      	ldrb	r3, [r7, #29]
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7ff ff0d 	bl	800fec0 <bcdToDec>
 80100a6:	4603      	mov	r3, r0
 80100a8:	b2da      	uxtb	r2, r3
 80100aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ac:	701a      	strb	r2, [r3, #0]
    *year = bcdToDec(readData[6]);
 80100ae:	7fbb      	ldrb	r3, [r7, #30]
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7ff ff05 	bl	800fec0 <bcdToDec>
 80100b6:	4603      	mov	r3, r0
 80100b8:	b2da      	uxtb	r2, r3
 80100ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100bc:	701a      	strb	r2, [r3, #0]
}
 80100be:	bf00      	nop
 80100c0:	3720      	adds	r7, #32
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	200003fc 	.word	0x200003fc

080100cc <RTC_DisplayTime>:

// Function to display the time and date on the OLED
void RTC_DisplayTime(void) {
 80100cc:	b590      	push	{r4, r7, lr}
 80100ce:	b08d      	sub	sp, #52	@ 0x34
 80100d0:	af04      	add	r7, sp, #16
	static char prevBuffer[20] = {0};
    uint8_t hours, minutes, seconds, day, date, month, year;
    char buffer[20];

    RTC_GetTime(&hours, &minutes, &seconds, &day, &date, &month, &year);
 80100d2:	f107 041c 	add.w	r4, r7, #28
 80100d6:	f107 021d 	add.w	r2, r7, #29
 80100da:	f107 011e 	add.w	r1, r7, #30
 80100de:	f107 001f 	add.w	r0, r7, #31
 80100e2:	f107 0319 	add.w	r3, r7, #25
 80100e6:	9302      	str	r3, [sp, #8]
 80100e8:	f107 031a 	add.w	r3, r7, #26
 80100ec:	9301      	str	r3, [sp, #4]
 80100ee:	f107 031b 	add.w	r3, r7, #27
 80100f2:	9300      	str	r3, [sp, #0]
 80100f4:	4623      	mov	r3, r4
 80100f6:	f7ff ff87 	bl	8010008 <RTC_GetTime>

    //ssd1306_Fill(Black);

    // Format time
    snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 80100fa:	7ffb      	ldrb	r3, [r7, #31]
 80100fc:	4619      	mov	r1, r3
 80100fe:	7fbb      	ldrb	r3, [r7, #30]
 8010100:	7f7a      	ldrb	r2, [r7, #29]
 8010102:	1d38      	adds	r0, r7, #4
 8010104:	9201      	str	r2, [sp, #4]
 8010106:	9300      	str	r3, [sp, #0]
 8010108:	460b      	mov	r3, r1
 801010a:	4a22      	ldr	r2, [pc, #136]	@ (8010194 <RTC_DisplayTime+0xc8>)
 801010c:	2114      	movs	r1, #20
 801010e:	f001 f8a7 	bl	8011260 <sniprintf>
    if (strcmp(buffer, prevBuffer) != 0) {
 8010112:	1d3b      	adds	r3, r7, #4
 8010114:	4920      	ldr	r1, [pc, #128]	@ (8010198 <RTC_DisplayTime+0xcc>)
 8010116:	4618      	mov	r0, r3
 8010118:	f7f0 f85a 	bl	80001d0 <strcmp>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d00f      	beq.n	8010142 <RTC_DisplayTime+0x76>
		ssd1306_SetCursor(2, 0);
 8010122:	2100      	movs	r1, #0
 8010124:	2002      	movs	r0, #2
 8010126:	f7f1 fe17 	bl	8001d58 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_6x8 ,White);
 801012a:	4b1c      	ldr	r3, [pc, #112]	@ (801019c <RTC_DisplayTime+0xd0>)
 801012c:	1d38      	adds	r0, r7, #4
 801012e:	2201      	movs	r2, #1
 8010130:	9200      	str	r2, [sp, #0]
 8010132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010134:	f7f1 fdea 	bl	8001d0c <ssd1306_WriteString>
		strcpy(prevBuffer, buffer);
 8010138:	1d3b      	adds	r3, r7, #4
 801013a:	4619      	mov	r1, r3
 801013c:	4816      	ldr	r0, [pc, #88]	@ (8010198 <RTC_DisplayTime+0xcc>)
 801013e:	f001 f9c2 	bl	80114c6 <strcpy>
	}
    //ssd1306_SetCursor(2, 0);
    //ssd1306_WriteString(buffer, Font_6x8 ,White);

    // Format date
    snprintf(buffer, sizeof(buffer), "%02d/%02d/%02d", date, month, year);
 8010142:	7efb      	ldrb	r3, [r7, #27]
 8010144:	4619      	mov	r1, r3
 8010146:	7ebb      	ldrb	r3, [r7, #26]
 8010148:	7e7a      	ldrb	r2, [r7, #25]
 801014a:	1d38      	adds	r0, r7, #4
 801014c:	9201      	str	r2, [sp, #4]
 801014e:	9300      	str	r3, [sp, #0]
 8010150:	460b      	mov	r3, r1
 8010152:	4a13      	ldr	r2, [pc, #76]	@ (80101a0 <RTC_DisplayTime+0xd4>)
 8010154:	2114      	movs	r1, #20
 8010156:	f001 f883 	bl	8011260 <sniprintf>
    if (strcmp(buffer, prevBuffer) != 0) {
 801015a:	1d3b      	adds	r3, r7, #4
 801015c:	490e      	ldr	r1, [pc, #56]	@ (8010198 <RTC_DisplayTime+0xcc>)
 801015e:	4618      	mov	r0, r3
 8010160:	f7f0 f836 	bl	80001d0 <strcmp>
 8010164:	4603      	mov	r3, r0
 8010166:	2b00      	cmp	r3, #0
 8010168:	d00f      	beq.n	801018a <RTC_DisplayTime+0xbe>
	   ssd1306_SetCursor(80, 0);
 801016a:	2100      	movs	r1, #0
 801016c:	2050      	movs	r0, #80	@ 0x50
 801016e:	f7f1 fdf3 	bl	8001d58 <ssd1306_SetCursor>
	   ssd1306_WriteString(buffer, Font_6x8, White);
 8010172:	4b0a      	ldr	r3, [pc, #40]	@ (801019c <RTC_DisplayTime+0xd0>)
 8010174:	1d38      	adds	r0, r7, #4
 8010176:	2201      	movs	r2, #1
 8010178:	9200      	str	r2, [sp, #0]
 801017a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801017c:	f7f1 fdc6 	bl	8001d0c <ssd1306_WriteString>
	   strcpy(prevBuffer, buffer);
 8010180:	1d3b      	adds	r3, r7, #4
 8010182:	4619      	mov	r1, r3
 8010184:	4804      	ldr	r0, [pc, #16]	@ (8010198 <RTC_DisplayTime+0xcc>)
 8010186:	f001 f99e 	bl	80114c6 <strcpy>
   }
    //ssd1306_SetCursor(68, 0);
    //ssd1306_WriteString(buffer,Font_6x8, White);

    //ssd1306_UpdateScreen();
}
 801018a:	bf00      	nop
 801018c:	3724      	adds	r7, #36	@ 0x24
 801018e:	46bd      	mov	sp, r7
 8010190:	bd90      	pop	{r4, r7, pc}
 8010192:	bf00      	nop
 8010194:	080134e8 	.word	0x080134e8
 8010198:	20001fe0 	.word	0x20001fe0
 801019c:	08014fc8 	.word	0x08014fc8
 80101a0:	080134f8 	.word	0x080134f8

080101a4 <spectrometer>:
#include "../INC/generalHeaders.h"

  uint8_t eos_received = 0;  //volatile


void spectrometer(void){
 80101a4:	b580      	push	{r7, lr}
 80101a6:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOA, StartTest_BTN_Pin) == GPIO_PIN_RESET) ){
 80101a8:	2120      	movs	r1, #32
 80101aa:	4813      	ldr	r0, [pc, #76]	@ (80101f8 <spectrometer+0x54>)
 80101ac:	f7f4 f986 	bl	80044bc <HAL_GPIO_ReadPin>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d11e      	bne.n	80101f4 <spectrometer+0x50>
		UserAction_Detected();                    // Reset StandBy mode counter
 80101b6:	f7ff fe51 	bl	800fe5c <UserAction_Detected>
		if(StartTestMenuFlag==1){
 80101ba:	4b10      	ldr	r3, [pc, #64]	@ (80101fc <spectrometer+0x58>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2b01      	cmp	r3, #1
 80101c0:	d104      	bne.n	80101cc <spectrometer+0x28>
			generate_spectrometer_signals();
 80101c2:	f000 f81f 	bl	8010204 <generate_spectrometer_signals>
			Send_SPEC_UART();                                            // Send SPEC to UART           //***//
 80101c6:	f000 f857 	bl	8010278 <Send_SPEC_UART>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
			 HAL_Delay(500);
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
		}
	}
}
 80101ca:	e013      	b.n	80101f4 <spectrometer+0x50>
		}else if (StartTestMenuFlag==2) {                               // if current menu != StartTest
 80101cc:	4b0b      	ldr	r3, [pc, #44]	@ (80101fc <spectrometer+0x58>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	2b02      	cmp	r3, #2
 80101d2:	d10f      	bne.n	80101f4 <spectrometer+0x50>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 80101d4:	2201      	movs	r2, #1
 80101d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80101da:	4809      	ldr	r0, [pc, #36]	@ (8010200 <spectrometer+0x5c>)
 80101dc:	f7f4 f986 	bl	80044ec <HAL_GPIO_WritePin>
			 HAL_Delay(500);
 80101e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80101e4:	f7f2 fc3e 	bl	8002a64 <HAL_Delay>
			 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 80101e8:	2200      	movs	r2, #0
 80101ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80101ee:	4804      	ldr	r0, [pc, #16]	@ (8010200 <spectrometer+0x5c>)
 80101f0:	f7f4 f97c 	bl	80044ec <HAL_GPIO_WritePin>
}
 80101f4:	bf00      	nop
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	40020000 	.word	0x40020000
 80101fc:	20001f9c 	.word	0x20001f9c
 8010200:	40021000 	.word	0x40021000

08010204 <generate_spectrometer_signals>:

void generate_spectrometer_signals(void){
 8010204:	b580      	push	{r7, lr}
 8010206:	af00      	add	r7, sp, #0

	// Button is pressed
	HAL_GPIO_WritePin(GPIOA, SPEC_LED_Pin, GPIO_PIN_SET); 				// Turn on the LED
 8010208:	2201      	movs	r2, #1
 801020a:	2180      	movs	r1, #128	@ 0x80
 801020c:	4817      	ldr	r0, [pc, #92]	@ (801026c <generate_spectrometer_signals+0x68>)
 801020e:	f7f4 f96d 	bl	80044ec <HAL_GPIO_WritePin>
	HAL_Delay(1); // Wait for stabilization
 8010212:	2001      	movs	r0, #1
 8010214:	f7f2 fc26 	bl	8002a64 <HAL_Delay>

	// Generate start signal for the spectrometer
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_RESET);
 8010218:	2200      	movs	r2, #0
 801021a:	2120      	movs	r1, #32
 801021c:	4814      	ldr	r0, [pc, #80]	@ (8010270 <generate_spectrometer_signals+0x6c>)
 801021e:	f7f4 f965 	bl	80044ec <HAL_GPIO_WritePin>
	//DWT_Delay(1);
	HAL_Delay(1);
 8010222:	2001      	movs	r0, #1
 8010224:	f7f2 fc1e 	bl	8002a64 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 8010228:	2201      	movs	r2, #1
 801022a:	2120      	movs	r1, #32
 801022c:	4810      	ldr	r0, [pc, #64]	@ (8010270 <generate_spectrometer_signals+0x6c>)
 801022e:	f7f4 f95d 	bl	80044ec <HAL_GPIO_WritePin>
	HAL_Delay(20); //8//500 									// Higher integration time Higher Spectrum Amplitude
 8010232:	2014      	movs	r0, #20
 8010234:	f7f2 fc16 	bl	8002a64 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_RESET);
 8010238:	2200      	movs	r2, #0
 801023a:	2120      	movs	r1, #32
 801023c:	480c      	ldr	r0, [pc, #48]	@ (8010270 <generate_spectrometer_signals+0x6c>)
 801023e:	f7f4 f955 	bl	80044ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8010242:	2001      	movs	r0, #1
 8010244:	f7f2 fc0e 	bl	8002a64 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 8010248:	2201      	movs	r2, #1
 801024a:	2120      	movs	r1, #32
 801024c:	4808      	ldr	r0, [pc, #32]	@ (8010270 <generate_spectrometer_signals+0x6c>)
 801024e:	f7f4 f94d 	bl	80044ec <HAL_GPIO_WritePin>

	// Wait for EOS signal
	//while (!eos_received) {}
	capture_and_send_data();
 8010252:	f7fe f891 	bl	800e378 <capture_and_send_data>
	HAL_GPIO_WritePin(GPIOA, SPEC_LED_Pin, GPIO_PIN_RESET); 			// Turn off the LED
 8010256:	2200      	movs	r2, #0
 8010258:	2180      	movs	r1, #128	@ 0x80
 801025a:	4804      	ldr	r0, [pc, #16]	@ (801026c <generate_spectrometer_signals+0x68>)
 801025c:	f7f4 f946 	bl	80044ec <HAL_GPIO_WritePin>
	eos_received = 0;
 8010260:	4b04      	ldr	r3, [pc, #16]	@ (8010274 <generate_spectrometer_signals+0x70>)
 8010262:	2200      	movs	r2, #0
 8010264:	701a      	strb	r2, [r3, #0]

}
 8010266:	bf00      	nop
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	40020000 	.word	0x40020000
 8010270:	40020400 	.word	0x40020400
 8010274:	20001ff4 	.word	0x20001ff4

08010278 <Send_SPEC_UART>:


void Send_SPEC_UART(void){
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
	// Format the concentration values as a string
	char message[12];            					//Spectrum to be sent to UART
	for (int j = 0; j < NUM_WAVELENGTHS*2; j++){
 801027e:	2300      	movs	r3, #0
 8010280:	60fb      	str	r3, [r7, #12]
 8010282:	e012      	b.n	80102aa <Send_SPEC_UART+0x32>
	  //printf("%lu\n", spectral_data_256[j]);
	  snprintf(message, sizeof(message), "%lu\n",spectral_data[j]);
 8010284:	4a0d      	ldr	r2, [pc, #52]	@ (80102bc <Send_SPEC_UART+0x44>)
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801028c:	4638      	mov	r0, r7
 801028e:	4a0c      	ldr	r2, [pc, #48]	@ (80102c0 <Send_SPEC_UART+0x48>)
 8010290:	210c      	movs	r1, #12
 8010292:	f000 ffe5 	bl	8011260 <sniprintf>
	  // Send the concentration values via UART
	  HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(spectral_data[j]), HAL_MAX_DELAY);    //to PC
 8010296:	4639      	mov	r1, r7
 8010298:	f04f 33ff 	mov.w	r3, #4294967295
 801029c:	2204      	movs	r2, #4
 801029e:	4809      	ldr	r0, [pc, #36]	@ (80102c4 <Send_SPEC_UART+0x4c>)
 80102a0:	f7f9 faf4 	bl	800988c <HAL_UART_Transmit>
	for (int j = 0; j < NUM_WAVELENGTHS*2; j++){
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	3301      	adds	r3, #1
 80102a8:	60fb      	str	r3, [r7, #12]
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80102b0:	dbe8      	blt.n	8010284 <Send_SPEC_UART+0xc>
	}
	/*char Bil_message[12];
	snprintf(Bil_message, sizeof(Bil_message), "%.2f\n",BilResult);
	HAL_UART_Transmit(&huart3, (uint8_t *)Bil_message, sizeof(Bil_message), HAL_MAX_DELAY);    //BilResult to ESP
	*/
}
 80102b2:	bf00      	nop
 80102b4:	bf00      	nop
 80102b6:	3710      	adds	r7, #16
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	20001740 	.word	0x20001740
 80102c0:	08013508 	.word	0x08013508
 80102c4:	20000628 	.word	0x20000628

080102c8 <EXTI4_IRQHandler>:

/////////////////////////////////////// EOS Interrupt ///////////////////////////////////////////
/* EXTI4 IRQ Handler */
void EXTI4_IRQHandler(void){
 80102c8:	b580      	push	{r7, lr}
 80102ca:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80102cc:	2010      	movs	r0, #16
 80102ce:	f7f4 f927 	bl	8004520 <HAL_GPIO_EXTI_IRQHandler>
}
 80102d2:	bf00      	nop
 80102d4:	bd80      	pop	{r7, pc}
	...

080102d8 <DWT_Init>:
        eos_received = 1;
    }
}*/
/////////////////////////////////////// us Delay Timer ///////////////////////////////////////////
// Function to initialize the DWT unit
void DWT_Init(void) {
 80102d8:	b480      	push	{r7}
 80102da:	af00      	add	r7, sp, #0
    // Enable TRC
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80102dc:	4b08      	ldr	r3, [pc, #32]	@ (8010300 <DWT_Init+0x28>)
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	4a07      	ldr	r2, [pc, #28]	@ (8010300 <DWT_Init+0x28>)
 80102e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80102e6:	60d3      	str	r3, [r2, #12]
    // Unlock DWT access
    //DWT->LAR = 0xC5ACCE55;
    // Enable the cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80102e8:	4b06      	ldr	r3, [pc, #24]	@ (8010304 <DWT_Init+0x2c>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4a05      	ldr	r2, [pc, #20]	@ (8010304 <DWT_Init+0x2c>)
 80102ee:	f043 0301 	orr.w	r3, r3, #1
 80102f2:	6013      	str	r3, [r2, #0]
}
 80102f4:	bf00      	nop
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop
 8010300:	e000edf0 	.word	0xe000edf0
 8010304:	e0001000 	.word	0xe0001000

08010308 <DWT_GetSysClockFreq>:
// Function to get the system clock frequency
uint32_t DWT_GetSysClockFreq(void) {
 8010308:	b480      	push	{r7}
 801030a:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 801030c:	4b03      	ldr	r3, [pc, #12]	@ (801031c <DWT_GetSysClockFreq+0x14>)
 801030e:	681b      	ldr	r3, [r3, #0]
}
 8010310:	4618      	mov	r0, r3
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop
 801031c:	20000000 	.word	0x20000000

08010320 <DWT_Delay>:

// Function to create a microsecond delay
void DWT_Delay(uint32_t us) {
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 8010328:	4b0d      	ldr	r3, [pc, #52]	@ (8010360 <DWT_Delay+0x40>)
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (DWT_GetSysClockFreq() / 1000000);
 801032e:	f7ff ffeb 	bl	8010308 <DWT_GetSysClockFreq>
 8010332:	4603      	mov	r3, r0
 8010334:	4a0b      	ldr	r2, [pc, #44]	@ (8010364 <DWT_Delay+0x44>)
 8010336:	fba2 2303 	umull	r2, r3, r2, r3
 801033a:	0c9a      	lsrs	r2, r3, #18
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	fb02 f303 	mul.w	r3, r2, r3
 8010342:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - startTick) < delayTicks);
 8010344:	bf00      	nop
 8010346:	4b06      	ldr	r3, [pc, #24]	@ (8010360 <DWT_Delay+0x40>)
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	1ad3      	subs	r3, r2, r3
 801034e:	68ba      	ldr	r2, [r7, #8]
 8010350:	429a      	cmp	r2, r3
 8010352:	d8f8      	bhi.n	8010346 <DWT_Delay+0x26>
}
 8010354:	bf00      	nop
 8010356:	bf00      	nop
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	e0001000 	.word	0xe0001000
 8010364:	431bde83 	.word	0x431bde83

08010368 <__NVIC_EnableIRQ>:
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	4603      	mov	r3, r0
 8010370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010376:	2b00      	cmp	r3, #0
 8010378:	db0b      	blt.n	8010392 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801037a:	79fb      	ldrb	r3, [r7, #7]
 801037c:	f003 021f 	and.w	r2, r3, #31
 8010380:	4907      	ldr	r1, [pc, #28]	@ (80103a0 <__NVIC_EnableIRQ+0x38>)
 8010382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010386:	095b      	lsrs	r3, r3, #5
 8010388:	2001      	movs	r0, #1
 801038a:	fa00 f202 	lsl.w	r2, r0, r2
 801038e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010392:	bf00      	nop
 8010394:	370c      	adds	r7, #12
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	e000e100 	.word	0xe000e100

080103a4 <systemLoop>:
float adcReadings[FILTER_SIZE]; // Array to store ADC samples
float lastPercentage;           // Initialize last percentage to an invalid value
bool isCharging = false;

void systemLoop(void)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	af00      	add	r7, sp, #0
	  spectrometer();
 80103a8:	f7ff fefc 	bl	80101a4 <spectrometer>
	  LCD();
 80103ac:	f7fe fa4a 	bl	800e844 <LCD>
	  RTC_DisplayTime();
 80103b0:	f7ff fe8c 	bl	80100cc <RTC_DisplayTime>
}
 80103b4:	bf00      	nop
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <systemSetup>:

void systemSetup(void)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	af00      	add	r7, sp, #0
	  SpectrometerSetup();
 80103bc:	f000 f80c 	bl	80103d8 <SpectrometerSetup>
	  LCD_Setup();
 80103c0:	f000 f82e 	bl	8010420 <LCD_Setup>
	  RTC_Init();
 80103c4:	f7ff fdb8 	bl	800ff38 <RTC_Init>
	  USB_Setup();
 80103c8:	f000 f84e 	bl	8010468 <USB_Setup>
	  FLASH_Setup();
 80103cc:	f000 f858 	bl	8010480 <FLASH_Setup>
	 // ReadBilResultsFromFlash(readFlashedData);
	  Wakeup_Init();      // Check if the system woke up from Standby
 80103d0:	f000 f91a 	bl	8010608 <Wakeup_Init>
}
 80103d4:	bf00      	nop
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <SpectrometerSetup>:

//################################################################################################//

void SpectrometerSetup(void)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	af00      	add	r7, sp, #0
	  TIM1->CCR1=5;  //50   50% Duty Cycle ==> to generate 135khz
 80103dc:	4b0c      	ldr	r3, [pc, #48]	@ (8010410 <SpectrometerSetup+0x38>)
 80103de:	2205      	movs	r2, #5
 80103e0:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80103e2:	2100      	movs	r1, #0
 80103e4:	480b      	ldr	r0, [pc, #44]	@ (8010414 <SpectrometerSetup+0x3c>)
 80103e6:	f7f8 fa33 	bl	8008850 <HAL_TIM_PWM_Start>

	  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 80103ea:	2201      	movs	r2, #1
 80103ec:	2120      	movs	r1, #32
 80103ee:	480a      	ldr	r0, [pc, #40]	@ (8010418 <SpectrometerSetup+0x40>)
 80103f0:	f7f4 f87c 	bl	80044ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 80103f4:	2200      	movs	r2, #0
 80103f6:	f44f 7144 	mov.w	r1, #784	@ 0x310
 80103fa:	4807      	ldr	r0, [pc, #28]	@ (8010418 <SpectrometerSetup+0x40>)
 80103fc:	f7f4 f876 	bl	80044ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SPEC_LED_Pin, GPIO_PIN_RESET); // Turn off the SPEC LED
 8010400:	2200      	movs	r2, #0
 8010402:	2180      	movs	r1, #128	@ 0x80
 8010404:	4805      	ldr	r0, [pc, #20]	@ (801041c <SpectrometerSetup+0x44>)
 8010406:	f7f4 f871 	bl	80044ec <HAL_GPIO_WritePin>
}
 801040a:	bf00      	nop
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	40010000 	.word	0x40010000
 8010414:	200004a8 	.word	0x200004a8
 8010418:	40020400 	.word	0x40020400
 801041c:	40020000 	.word	0x40020000

08010420 <LCD_Setup>:

void LCD_Setup(void)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, SPEC_LED_Pin, GPIO_PIN_RESET); // Turn off the SPEC LED
 8010426:	2200      	movs	r2, #0
 8010428:	2180      	movs	r1, #128	@ 0x80
 801042a:	480e      	ldr	r0, [pc, #56]	@ (8010464 <LCD_Setup+0x44>)
 801042c:	f7f4 f85e 	bl	80044ec <HAL_GPIO_WritePin>
	  ssd1306_Init();
 8010430:	f7f1 fade 	bl	80019f0 <ssd1306_Init>

	  BatteryLevelFilterInit();
 8010434:	f000 f84c 	bl	80104d0 <BatteryLevelFilterInit>
	  TIM11_Init(); 			// Initialize the timer for interrupts ==> for batt level percentage calculation
 8010438:	f000 f86e 	bl	8010518 <TIM11_Init>
	  TIM10_Init();
 801043c:	f000 f898 	bl	8010570 <TIM10_Init>
	  for (int var = 0; var < 5; ++var)  BatteryPercentage();
 8010440:	2300      	movs	r3, #0
 8010442:	607b      	str	r3, [r7, #4]
 8010444:	e004      	b.n	8010450 <LCD_Setup+0x30>
 8010446:	f7ff fa1b 	bl	800f880 <BatteryPercentage>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	3301      	adds	r3, #1
 801044e:	607b      	str	r3, [r7, #4]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b04      	cmp	r3, #4
 8010454:	ddf7      	ble.n	8010446 <LCD_Setup+0x26>

	  //ChargerDetect_Init();

	  Aymed_Logo();
 8010456:	f000 f819 	bl	801048c <Aymed_Logo>
	  //Aymed_Text();      //moved to LCD.c
}
 801045a:	bf00      	nop
 801045c:	3708      	adds	r7, #8
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	40020000 	.word	0x40020000

08010468 <USB_Setup>:

void USB_Setup(void){
 8010468:	b580      	push	{r7, lr}
 801046a:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);          //to open 5 v from PA9
 801046c:	2200      	movs	r2, #0
 801046e:	2101      	movs	r1, #1
 8010470:	4802      	ldr	r0, [pc, #8]	@ (801047c <USB_Setup+0x14>)
 8010472:	f7f4 f83b 	bl	80044ec <HAL_GPIO_WritePin>

}
 8010476:	bf00      	nop
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	40020800 	.word	0x40020800

08010480 <FLASH_Setup>:

void FLASH_Setup(void){
 8010480:	b580      	push	{r7, lr}
 8010482:	af00      	add	r7, sp, #0

	  //EraseAllBilFlashSectors();            // to reset flash

	  FindLastBilResultIndex();// On startup, find the last valid index in the flash memory
 8010484:	f7fe f82c 	bl	800e4e0 <FindLastBilResultIndex>

}
 8010488:	bf00      	nop
 801048a:	bd80      	pop	{r7, pc}

0801048c <Aymed_Logo>:
//################################################################################################//

void Aymed_Logo(void)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af02      	add	r7, sp, #8
	 ssd1306_Fill(Black);
 8010492:	2000      	movs	r0, #0
 8010494:	f7f1 fb16 	bl	8001ac4 <ssd1306_Fill>
	 ssd1306_SetCursor(0, 0);
 8010498:	2100      	movs	r1, #0
 801049a:	2000      	movs	r0, #0
 801049c:	f7f1 fc5c 	bl	8001d58 <ssd1306_SetCursor>
     ssd1306_DrawBitmap(0,0,image_data_ss,128,64, White );
 80104a0:	2301      	movs	r3, #1
 80104a2:	9301      	str	r3, [sp, #4]
 80104a4:	2340      	movs	r3, #64	@ 0x40
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	2380      	movs	r3, #128	@ 0x80
 80104aa:	4a07      	ldr	r2, [pc, #28]	@ (80104c8 <Aymed_Logo+0x3c>)
 80104ac:	2100      	movs	r1, #0
 80104ae:	2000      	movs	r0, #0
 80104b0:	f7f1 fcb8 	bl	8001e24 <ssd1306_DrawBitmap>
     ssd1306_UpdateScreen();
 80104b4:	f7f1 fb1e 	bl	8001af4 <ssd1306_UpdateScreen>
     HAL_Delay(logo_time);
 80104b8:	4b04      	ldr	r3, [pc, #16]	@ (80104cc <Aymed_Logo+0x40>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4618      	mov	r0, r3
 80104be:	f7f2 fad1 	bl	8002a64 <HAL_Delay>
}
 80104c2:	bf00      	nop
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	08015564 	.word	0x08015564
 80104cc:	200000c4 	.word	0x200000c4

080104d0 <BatteryLevelFilterInit>:

    HAL_Delay(text_time);
}

void BatteryLevelFilterInit(void)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
	 lastPercentage = -1.0; // Initialize last percentage to an invalid value
 80104d6:	4b0d      	ldr	r3, [pc, #52]	@ (801050c <BatteryLevelFilterInit+0x3c>)
 80104d8:	4a0d      	ldr	r2, [pc, #52]	@ (8010510 <BatteryLevelFilterInit+0x40>)
 80104da:	601a      	str	r2, [r3, #0]
	  // Initialize the filter array with initial readings
	  for (int i = 0; i < FILTER_SIZE; i++) {
 80104dc:	2300      	movs	r3, #0
 80104de:	607b      	str	r3, [r7, #4]
 80104e0:	e009      	b.n	80104f6 <BatteryLevelFilterInit+0x26>
		  adcReadings[i] = 0;
 80104e2:	4a0c      	ldr	r2, [pc, #48]	@ (8010514 <BatteryLevelFilterInit+0x44>)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	009b      	lsls	r3, r3, #2
 80104e8:	4413      	add	r3, r2
 80104ea:	f04f 0200 	mov.w	r2, #0
 80104ee:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < FILTER_SIZE; i++) {
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	3301      	adds	r3, #1
 80104f4:	607b      	str	r3, [r7, #4]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2b04      	cmp	r3, #4
 80104fa:	ddf2      	ble.n	80104e2 <BatteryLevelFilterInit+0x12>
	  }
}
 80104fc:	bf00      	nop
 80104fe:	bf00      	nop
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr
 801050a:	bf00      	nop
 801050c:	2000200c 	.word	0x2000200c
 8010510:	bf800000 	.word	0xbf800000
 8010514:	20001ff8 	.word	0x20001ff8

08010518 <TIM11_Init>:
// ################################################# TIMERS Configurations ######################################## //
// Timer Interrupt Initialization
void TIM11_Init(void) {                   // Battery calculation
 8010518:	b580      	push	{r7, lr}
 801051a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim11);
 801051c:	4810      	ldr	r0, [pc, #64]	@ (8010560 <TIM11_Init+0x48>)
 801051e:	f7f8 fa5f 	bl	80089e0 <HAL_TIM_IRQHandler>
    // Enable clock for TIM2
    RCC->AHB2ENR |= RCC_APB2ENR_TIM11EN;
 8010522:	4b10      	ldr	r3, [pc, #64]	@ (8010564 <TIM11_Init+0x4c>)
 8010524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010526:	4a0f      	ldr	r2, [pc, #60]	@ (8010564 <TIM11_Init+0x4c>)
 8010528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801052c:	6353      	str	r3, [r2, #52]	@ 0x34

    // Configure TIM2: 1 tick per millisecond (assuming 16 MHz clock with APB1 prescaler 4)
    TIM11->PSC = 168000-1;    //168*5->10 sec //36000 - 1;  // Prescaler: 16 MHz / 16000 = 1 kHz (1 ms period)
 801052e:	4b0e      	ldr	r3, [pc, #56]	@ (8010568 <TIM11_Init+0x50>)
 8010530:	4a0e      	ldr	r2, [pc, #56]	@ (801056c <TIM11_Init+0x54>)
 8010532:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM11->ARR = 20000-1;    //14000 - 1;  //4000=2 sec //50000 = 5 sec
 8010534:	4b0c      	ldr	r3, [pc, #48]	@ (8010568 <TIM11_Init+0x50>)
 8010536:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 801053a:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM11->CR1 |= TIM_CR1_CEN;   // Enable counter
 801053c:	4b0a      	ldr	r3, [pc, #40]	@ (8010568 <TIM11_Init+0x50>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a09      	ldr	r2, [pc, #36]	@ (8010568 <TIM11_Init+0x50>)
 8010542:	f043 0301 	orr.w	r3, r3, #1
 8010546:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt
    TIM11->DIER |= TIM_DIER_UIE;
 8010548:	4b07      	ldr	r3, [pc, #28]	@ (8010568 <TIM11_Init+0x50>)
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	4a06      	ldr	r2, [pc, #24]	@ (8010568 <TIM11_Init+0x50>)
 801054e:	f043 0301 	orr.w	r3, r3, #1
 8010552:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8010554:	201a      	movs	r0, #26
 8010556:	f7ff ff07 	bl	8010368 <__NVIC_EnableIRQ>
}
 801055a:	bf00      	nop
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	20000538 	.word	0x20000538
 8010564:	40023800 	.word	0x40023800
 8010568:	40014800 	.word	0x40014800
 801056c:	0002903f 	.word	0x0002903f

08010570 <TIM10_Init>:
// Timer Interrupt Initialization
void TIM10_Init(void) {                     //dotCounter++; && Standby_Mode ctr
 8010570:	b580      	push	{r7, lr}
 8010572:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim10);
 8010574:	4810      	ldr	r0, [pc, #64]	@ (80105b8 <TIM10_Init+0x48>)
 8010576:	f7f8 fa33 	bl	80089e0 <HAL_TIM_IRQHandler>
    // Enable clock for TIM2
    RCC->AHB2ENR |= RCC_APB2ENR_TIM10EN;
 801057a:	4b10      	ldr	r3, [pc, #64]	@ (80105bc <TIM10_Init+0x4c>)
 801057c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801057e:	4a0f      	ldr	r2, [pc, #60]	@ (80105bc <TIM10_Init+0x4c>)
 8010580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010584:	6353      	str	r3, [r2, #52]	@ 0x34

    // Configure TIM2: 1 tick per millisecond (assuming 16 MHz clock with APB1 prescaler 4)
    TIM10->PSC = 84000 - 1;      // Prescaler: 16 MHz / 16000 = 1 kHz (1 ms period)
 8010586:	4b0e      	ldr	r3, [pc, #56]	@ (80105c0 <TIM10_Init+0x50>)
 8010588:	4a0e      	ldr	r2, [pc, #56]	@ (80105c4 <TIM10_Init+0x54>)
 801058a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM10->ARR = 10000 - 1;      //10000 = 1 sec
 801058c:	4b0c      	ldr	r3, [pc, #48]	@ (80105c0 <TIM10_Init+0x50>)
 801058e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8010592:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM10->CR1 |= TIM_CR1_CEN;   // Enable counter
 8010594:	4b0a      	ldr	r3, [pc, #40]	@ (80105c0 <TIM10_Init+0x50>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	4a09      	ldr	r2, [pc, #36]	@ (80105c0 <TIM10_Init+0x50>)
 801059a:	f043 0301 	orr.w	r3, r3, #1
 801059e:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt
    TIM10->DIER |= TIM_DIER_UIE;
 80105a0:	4b07      	ldr	r3, [pc, #28]	@ (80105c0 <TIM10_Init+0x50>)
 80105a2:	68db      	ldr	r3, [r3, #12]
 80105a4:	4a06      	ldr	r2, [pc, #24]	@ (80105c0 <TIM10_Init+0x50>)
 80105a6:	f043 0301 	orr.w	r3, r3, #1
 80105aa:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80105ac:	2019      	movs	r0, #25
 80105ae:	f7ff fedb 	bl	8010368 <__NVIC_EnableIRQ>
}
 80105b2:	bf00      	nop
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	200004f0 	.word	0x200004f0
 80105bc:	40023800 	.word	0x40023800
 80105c0:	40014400 	.word	0x40014400
 80105c4:	0001481f 	.word	0x0001481f

080105c8 <Enter_Standby_Mode>:
// ################################################# Standby Mode ######################################## //
void Enter_Standby_Mode(void){
 80105c8:	b580      	push	{r7, lr}
 80105ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, Bcode_INIT_Pin, GPIO_PIN_RESET);
 80105cc:	2200      	movs	r2, #0
 80105ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80105d2:	480b      	ldr	r0, [pc, #44]	@ (8010600 <Enter_Standby_Mode+0x38>)
 80105d4:	f7f3 ff8a 	bl	80044ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, BT_INIT_Pin, GPIO_PIN_RESET);
 80105d8:	2200      	movs	r2, #0
 80105da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80105de:	4808      	ldr	r0, [pc, #32]	@ (8010600 <Enter_Standby_Mode+0x38>)
 80105e0:	f7f3 ff84 	bl	80044ec <HAL_GPIO_WritePin>

    // Enable wake-up sources (RTC or external pin)
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);  // Wake-up from PA0 (WKUP pin)
 80105e4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80105e8:	f7f7 f8c6 	bl	8007778 <HAL_PWR_EnableWakeUpPin>

    // Clear the Wake-up flag
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80105ec:	4b05      	ldr	r3, [pc, #20]	@ (8010604 <Enter_Standby_Mode+0x3c>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	4a04      	ldr	r2, [pc, #16]	@ (8010604 <Enter_Standby_Mode+0x3c>)
 80105f2:	f043 0304 	orr.w	r3, r3, #4
 80105f6:	6013      	str	r3, [r2, #0]

    // Enter Standby Mode
    HAL_PWR_EnterSTANDBYMode();
 80105f8:	f7f7 f8d0 	bl	800779c <HAL_PWR_EnterSTANDBYMode>
}
 80105fc:	bf00      	nop
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	40020c00 	.word	0x40020c00
 8010604:	40007000 	.word	0x40007000

08010608 <Wakeup_Init>:

void Wakeup_Init(void){
 8010608:	b480      	push	{r7}
 801060a:	af00      	add	r7, sp, #0
    // Check if the system was reset due to Standby mode wake-up
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET){
 801060c:	4b0b      	ldr	r3, [pc, #44]	@ (801063c <Wakeup_Init+0x34>)
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	f003 0302 	and.w	r3, r3, #2
 8010614:	2b02      	cmp	r3, #2
 8010616:	d10b      	bne.n	8010630 <Wakeup_Init+0x28>
        // Clear the Standby flag
        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8010618:	4b08      	ldr	r3, [pc, #32]	@ (801063c <Wakeup_Init+0x34>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4a07      	ldr	r2, [pc, #28]	@ (801063c <Wakeup_Init+0x34>)
 801061e:	f043 0308 	orr.w	r3, r3, #8
 8010622:	6013      	str	r3, [r2, #0]

        // Clear Wake-up flags
        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8010624:	4b05      	ldr	r3, [pc, #20]	@ (801063c <Wakeup_Init+0x34>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4a04      	ldr	r2, [pc, #16]	@ (801063c <Wakeup_Init+0x34>)
 801062a:	f043 0304 	orr.w	r3, r3, #4
 801062e:	6013      	str	r3, [r2, #0]
    }
}
 8010630:	bf00      	nop
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop
 801063c:	40007000 	.word	0x40007000

08010640 <EXTI0_IRQHandler>:

// ################################################# INTERRUPTS ######################################## //
/* EXTI1 IRQ Handler */
void EXTI0_IRQHandler(void)                 // System Wake-UP
{
 8010640:	b580      	push	{r7, lr}
 8010642:	af00      	add	r7, sp, #0
    // Handle external interrupt (button press on PB1)
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8010644:	2001      	movs	r0, #1
 8010646:	f7f3 ff6b 	bl	8004520 <HAL_GPIO_EXTI_IRQHandler>
    // Clear interrupt and wake up the MCU
}
 801064a:	bf00      	nop
 801064c:	bd80      	pop	{r7, pc}

0801064e <EXTI9_5_IRQHandler>:

/* EXTI4 IRQ Handler */

void EXTI9_5_IRQHandler(void)
{
 801064e:	b580      	push	{r7, lr}
 8010650:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8010652:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8010656:	f7f3 ff63 	bl	8004520 <HAL_GPIO_EXTI_IRQHandler>
}
 801065a:	bf00      	nop
 801065c:	bd80      	pop	{r7, pc}
	...

08010660 <HAL_GPIO_EXTI_Callback>:

// Callback for System interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	4603      	mov	r3, r0
 8010668:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_8) {									// Callback for BattCharger interrupt
 801066a:	88fb      	ldrh	r3, [r7, #6]
 801066c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010670:	d10e      	bne.n	8010690 <HAL_GPIO_EXTI_Callback+0x30>
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET) {
 8010672:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010676:	480b      	ldr	r0, [pc, #44]	@ (80106a4 <HAL_GPIO_EXTI_Callback+0x44>)
 8010678:	f7f3 ff20 	bl	80044bc <HAL_GPIO_ReadPin>
 801067c:	4603      	mov	r3, r0
 801067e:	2b01      	cmp	r3, #1
 8010680:	d103      	bne.n	801068a <HAL_GPIO_EXTI_Callback+0x2a>
			// Charger connected (e.g., voltage detected > threshold)
        	isCharging = true;
 8010682:	4b09      	ldr	r3, [pc, #36]	@ (80106a8 <HAL_GPIO_EXTI_Callback+0x48>)
 8010684:	2201      	movs	r2, #1
 8010686:	701a      	strb	r2, [r3, #0]
 8010688:	e002      	b.n	8010690 <HAL_GPIO_EXTI_Callback+0x30>
		} else {
			// Charger disconnected (e.g., voltage detected < threshold)
			isCharging = false;
 801068a:	4b07      	ldr	r3, [pc, #28]	@ (80106a8 <HAL_GPIO_EXTI_Callback+0x48>)
 801068c:	2200      	movs	r2, #0
 801068e:	701a      	strb	r2, [r3, #0]
		}
    }

    if (GPIO_Pin == GPIO_PIN_4) {         							  // Callback for SPEC_EOS interrupt
 8010690:	88fb      	ldrh	r3, [r7, #6]
 8010692:	2b10      	cmp	r3, #16
 8010694:	d102      	bne.n	801069c <HAL_GPIO_EXTI_Callback+0x3c>
        eos_received = 1;
 8010696:	4b05      	ldr	r3, [pc, #20]	@ (80106ac <HAL_GPIO_EXTI_Callback+0x4c>)
 8010698:	2201      	movs	r2, #1
 801069a:	701a      	strb	r2, [r3, #0]
    }
}
 801069c:	bf00      	nop
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	40020c00 	.word	0x40020c00
 80106a8:	20002010 	.word	0x20002010
 80106ac:	20001ff4 	.word	0x20001ff4

080106b0 <malloc>:
 80106b0:	4b02      	ldr	r3, [pc, #8]	@ (80106bc <malloc+0xc>)
 80106b2:	4601      	mov	r1, r0
 80106b4:	6818      	ldr	r0, [r3, #0]
 80106b6:	f000 b82d 	b.w	8010714 <_malloc_r>
 80106ba:	bf00      	nop
 80106bc:	200000d4 	.word	0x200000d4

080106c0 <free>:
 80106c0:	4b02      	ldr	r3, [pc, #8]	@ (80106cc <free+0xc>)
 80106c2:	4601      	mov	r1, r0
 80106c4:	6818      	ldr	r0, [r3, #0]
 80106c6:	f001 bd63 	b.w	8012190 <_free_r>
 80106ca:	bf00      	nop
 80106cc:	200000d4 	.word	0x200000d4

080106d0 <sbrk_aligned>:
 80106d0:	b570      	push	{r4, r5, r6, lr}
 80106d2:	4e0f      	ldr	r6, [pc, #60]	@ (8010710 <sbrk_aligned+0x40>)
 80106d4:	460c      	mov	r4, r1
 80106d6:	6831      	ldr	r1, [r6, #0]
 80106d8:	4605      	mov	r5, r0
 80106da:	b911      	cbnz	r1, 80106e2 <sbrk_aligned+0x12>
 80106dc:	f000 fea4 	bl	8011428 <_sbrk_r>
 80106e0:	6030      	str	r0, [r6, #0]
 80106e2:	4621      	mov	r1, r4
 80106e4:	4628      	mov	r0, r5
 80106e6:	f000 fe9f 	bl	8011428 <_sbrk_r>
 80106ea:	1c43      	adds	r3, r0, #1
 80106ec:	d103      	bne.n	80106f6 <sbrk_aligned+0x26>
 80106ee:	f04f 34ff 	mov.w	r4, #4294967295
 80106f2:	4620      	mov	r0, r4
 80106f4:	bd70      	pop	{r4, r5, r6, pc}
 80106f6:	1cc4      	adds	r4, r0, #3
 80106f8:	f024 0403 	bic.w	r4, r4, #3
 80106fc:	42a0      	cmp	r0, r4
 80106fe:	d0f8      	beq.n	80106f2 <sbrk_aligned+0x22>
 8010700:	1a21      	subs	r1, r4, r0
 8010702:	4628      	mov	r0, r5
 8010704:	f000 fe90 	bl	8011428 <_sbrk_r>
 8010708:	3001      	adds	r0, #1
 801070a:	d1f2      	bne.n	80106f2 <sbrk_aligned+0x22>
 801070c:	e7ef      	b.n	80106ee <sbrk_aligned+0x1e>
 801070e:	bf00      	nop
 8010710:	20002014 	.word	0x20002014

08010714 <_malloc_r>:
 8010714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010718:	1ccd      	adds	r5, r1, #3
 801071a:	f025 0503 	bic.w	r5, r5, #3
 801071e:	3508      	adds	r5, #8
 8010720:	2d0c      	cmp	r5, #12
 8010722:	bf38      	it	cc
 8010724:	250c      	movcc	r5, #12
 8010726:	2d00      	cmp	r5, #0
 8010728:	4606      	mov	r6, r0
 801072a:	db01      	blt.n	8010730 <_malloc_r+0x1c>
 801072c:	42a9      	cmp	r1, r5
 801072e:	d904      	bls.n	801073a <_malloc_r+0x26>
 8010730:	230c      	movs	r3, #12
 8010732:	6033      	str	r3, [r6, #0]
 8010734:	2000      	movs	r0, #0
 8010736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801073a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010810 <_malloc_r+0xfc>
 801073e:	f000 f869 	bl	8010814 <__malloc_lock>
 8010742:	f8d8 3000 	ldr.w	r3, [r8]
 8010746:	461c      	mov	r4, r3
 8010748:	bb44      	cbnz	r4, 801079c <_malloc_r+0x88>
 801074a:	4629      	mov	r1, r5
 801074c:	4630      	mov	r0, r6
 801074e:	f7ff ffbf 	bl	80106d0 <sbrk_aligned>
 8010752:	1c43      	adds	r3, r0, #1
 8010754:	4604      	mov	r4, r0
 8010756:	d158      	bne.n	801080a <_malloc_r+0xf6>
 8010758:	f8d8 4000 	ldr.w	r4, [r8]
 801075c:	4627      	mov	r7, r4
 801075e:	2f00      	cmp	r7, #0
 8010760:	d143      	bne.n	80107ea <_malloc_r+0xd6>
 8010762:	2c00      	cmp	r4, #0
 8010764:	d04b      	beq.n	80107fe <_malloc_r+0xea>
 8010766:	6823      	ldr	r3, [r4, #0]
 8010768:	4639      	mov	r1, r7
 801076a:	4630      	mov	r0, r6
 801076c:	eb04 0903 	add.w	r9, r4, r3
 8010770:	f000 fe5a 	bl	8011428 <_sbrk_r>
 8010774:	4581      	cmp	r9, r0
 8010776:	d142      	bne.n	80107fe <_malloc_r+0xea>
 8010778:	6821      	ldr	r1, [r4, #0]
 801077a:	1a6d      	subs	r5, r5, r1
 801077c:	4629      	mov	r1, r5
 801077e:	4630      	mov	r0, r6
 8010780:	f7ff ffa6 	bl	80106d0 <sbrk_aligned>
 8010784:	3001      	adds	r0, #1
 8010786:	d03a      	beq.n	80107fe <_malloc_r+0xea>
 8010788:	6823      	ldr	r3, [r4, #0]
 801078a:	442b      	add	r3, r5
 801078c:	6023      	str	r3, [r4, #0]
 801078e:	f8d8 3000 	ldr.w	r3, [r8]
 8010792:	685a      	ldr	r2, [r3, #4]
 8010794:	bb62      	cbnz	r2, 80107f0 <_malloc_r+0xdc>
 8010796:	f8c8 7000 	str.w	r7, [r8]
 801079a:	e00f      	b.n	80107bc <_malloc_r+0xa8>
 801079c:	6822      	ldr	r2, [r4, #0]
 801079e:	1b52      	subs	r2, r2, r5
 80107a0:	d420      	bmi.n	80107e4 <_malloc_r+0xd0>
 80107a2:	2a0b      	cmp	r2, #11
 80107a4:	d917      	bls.n	80107d6 <_malloc_r+0xc2>
 80107a6:	1961      	adds	r1, r4, r5
 80107a8:	42a3      	cmp	r3, r4
 80107aa:	6025      	str	r5, [r4, #0]
 80107ac:	bf18      	it	ne
 80107ae:	6059      	strne	r1, [r3, #4]
 80107b0:	6863      	ldr	r3, [r4, #4]
 80107b2:	bf08      	it	eq
 80107b4:	f8c8 1000 	streq.w	r1, [r8]
 80107b8:	5162      	str	r2, [r4, r5]
 80107ba:	604b      	str	r3, [r1, #4]
 80107bc:	4630      	mov	r0, r6
 80107be:	f000 f82f 	bl	8010820 <__malloc_unlock>
 80107c2:	f104 000b 	add.w	r0, r4, #11
 80107c6:	1d23      	adds	r3, r4, #4
 80107c8:	f020 0007 	bic.w	r0, r0, #7
 80107cc:	1ac2      	subs	r2, r0, r3
 80107ce:	bf1c      	itt	ne
 80107d0:	1a1b      	subne	r3, r3, r0
 80107d2:	50a3      	strne	r3, [r4, r2]
 80107d4:	e7af      	b.n	8010736 <_malloc_r+0x22>
 80107d6:	6862      	ldr	r2, [r4, #4]
 80107d8:	42a3      	cmp	r3, r4
 80107da:	bf0c      	ite	eq
 80107dc:	f8c8 2000 	streq.w	r2, [r8]
 80107e0:	605a      	strne	r2, [r3, #4]
 80107e2:	e7eb      	b.n	80107bc <_malloc_r+0xa8>
 80107e4:	4623      	mov	r3, r4
 80107e6:	6864      	ldr	r4, [r4, #4]
 80107e8:	e7ae      	b.n	8010748 <_malloc_r+0x34>
 80107ea:	463c      	mov	r4, r7
 80107ec:	687f      	ldr	r7, [r7, #4]
 80107ee:	e7b6      	b.n	801075e <_malloc_r+0x4a>
 80107f0:	461a      	mov	r2, r3
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	42a3      	cmp	r3, r4
 80107f6:	d1fb      	bne.n	80107f0 <_malloc_r+0xdc>
 80107f8:	2300      	movs	r3, #0
 80107fa:	6053      	str	r3, [r2, #4]
 80107fc:	e7de      	b.n	80107bc <_malloc_r+0xa8>
 80107fe:	230c      	movs	r3, #12
 8010800:	6033      	str	r3, [r6, #0]
 8010802:	4630      	mov	r0, r6
 8010804:	f000 f80c 	bl	8010820 <__malloc_unlock>
 8010808:	e794      	b.n	8010734 <_malloc_r+0x20>
 801080a:	6005      	str	r5, [r0, #0]
 801080c:	e7d6      	b.n	80107bc <_malloc_r+0xa8>
 801080e:	bf00      	nop
 8010810:	20002018 	.word	0x20002018

08010814 <__malloc_lock>:
 8010814:	4801      	ldr	r0, [pc, #4]	@ (801081c <__malloc_lock+0x8>)
 8010816:	f000 be54 	b.w	80114c2 <__retarget_lock_acquire_recursive>
 801081a:	bf00      	nop
 801081c:	2000215c 	.word	0x2000215c

08010820 <__malloc_unlock>:
 8010820:	4801      	ldr	r0, [pc, #4]	@ (8010828 <__malloc_unlock+0x8>)
 8010822:	f000 be4f 	b.w	80114c4 <__retarget_lock_release_recursive>
 8010826:	bf00      	nop
 8010828:	2000215c 	.word	0x2000215c

0801082c <__cvt>:
 801082c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010830:	ec57 6b10 	vmov	r6, r7, d0
 8010834:	2f00      	cmp	r7, #0
 8010836:	460c      	mov	r4, r1
 8010838:	4619      	mov	r1, r3
 801083a:	463b      	mov	r3, r7
 801083c:	bfbb      	ittet	lt
 801083e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010842:	461f      	movlt	r7, r3
 8010844:	2300      	movge	r3, #0
 8010846:	232d      	movlt	r3, #45	@ 0x2d
 8010848:	700b      	strb	r3, [r1, #0]
 801084a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801084c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010850:	4691      	mov	r9, r2
 8010852:	f023 0820 	bic.w	r8, r3, #32
 8010856:	bfbc      	itt	lt
 8010858:	4632      	movlt	r2, r6
 801085a:	4616      	movlt	r6, r2
 801085c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010860:	d005      	beq.n	801086e <__cvt+0x42>
 8010862:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010866:	d100      	bne.n	801086a <__cvt+0x3e>
 8010868:	3401      	adds	r4, #1
 801086a:	2102      	movs	r1, #2
 801086c:	e000      	b.n	8010870 <__cvt+0x44>
 801086e:	2103      	movs	r1, #3
 8010870:	ab03      	add	r3, sp, #12
 8010872:	9301      	str	r3, [sp, #4]
 8010874:	ab02      	add	r3, sp, #8
 8010876:	9300      	str	r3, [sp, #0]
 8010878:	ec47 6b10 	vmov	d0, r6, r7
 801087c:	4653      	mov	r3, sl
 801087e:	4622      	mov	r2, r4
 8010880:	f000 fec2 	bl	8011608 <_dtoa_r>
 8010884:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010888:	4605      	mov	r5, r0
 801088a:	d119      	bne.n	80108c0 <__cvt+0x94>
 801088c:	f019 0f01 	tst.w	r9, #1
 8010890:	d00e      	beq.n	80108b0 <__cvt+0x84>
 8010892:	eb00 0904 	add.w	r9, r0, r4
 8010896:	2200      	movs	r2, #0
 8010898:	2300      	movs	r3, #0
 801089a:	4630      	mov	r0, r6
 801089c:	4639      	mov	r1, r7
 801089e:	f7f0 f923 	bl	8000ae8 <__aeabi_dcmpeq>
 80108a2:	b108      	cbz	r0, 80108a8 <__cvt+0x7c>
 80108a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80108a8:	2230      	movs	r2, #48	@ 0x30
 80108aa:	9b03      	ldr	r3, [sp, #12]
 80108ac:	454b      	cmp	r3, r9
 80108ae:	d31e      	bcc.n	80108ee <__cvt+0xc2>
 80108b0:	9b03      	ldr	r3, [sp, #12]
 80108b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108b4:	1b5b      	subs	r3, r3, r5
 80108b6:	4628      	mov	r0, r5
 80108b8:	6013      	str	r3, [r2, #0]
 80108ba:	b004      	add	sp, #16
 80108bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80108c4:	eb00 0904 	add.w	r9, r0, r4
 80108c8:	d1e5      	bne.n	8010896 <__cvt+0x6a>
 80108ca:	7803      	ldrb	r3, [r0, #0]
 80108cc:	2b30      	cmp	r3, #48	@ 0x30
 80108ce:	d10a      	bne.n	80108e6 <__cvt+0xba>
 80108d0:	2200      	movs	r2, #0
 80108d2:	2300      	movs	r3, #0
 80108d4:	4630      	mov	r0, r6
 80108d6:	4639      	mov	r1, r7
 80108d8:	f7f0 f906 	bl	8000ae8 <__aeabi_dcmpeq>
 80108dc:	b918      	cbnz	r0, 80108e6 <__cvt+0xba>
 80108de:	f1c4 0401 	rsb	r4, r4, #1
 80108e2:	f8ca 4000 	str.w	r4, [sl]
 80108e6:	f8da 3000 	ldr.w	r3, [sl]
 80108ea:	4499      	add	r9, r3
 80108ec:	e7d3      	b.n	8010896 <__cvt+0x6a>
 80108ee:	1c59      	adds	r1, r3, #1
 80108f0:	9103      	str	r1, [sp, #12]
 80108f2:	701a      	strb	r2, [r3, #0]
 80108f4:	e7d9      	b.n	80108aa <__cvt+0x7e>

080108f6 <__exponent>:
 80108f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108f8:	2900      	cmp	r1, #0
 80108fa:	bfba      	itte	lt
 80108fc:	4249      	neglt	r1, r1
 80108fe:	232d      	movlt	r3, #45	@ 0x2d
 8010900:	232b      	movge	r3, #43	@ 0x2b
 8010902:	2909      	cmp	r1, #9
 8010904:	7002      	strb	r2, [r0, #0]
 8010906:	7043      	strb	r3, [r0, #1]
 8010908:	dd29      	ble.n	801095e <__exponent+0x68>
 801090a:	f10d 0307 	add.w	r3, sp, #7
 801090e:	461d      	mov	r5, r3
 8010910:	270a      	movs	r7, #10
 8010912:	461a      	mov	r2, r3
 8010914:	fbb1 f6f7 	udiv	r6, r1, r7
 8010918:	fb07 1416 	mls	r4, r7, r6, r1
 801091c:	3430      	adds	r4, #48	@ 0x30
 801091e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010922:	460c      	mov	r4, r1
 8010924:	2c63      	cmp	r4, #99	@ 0x63
 8010926:	f103 33ff 	add.w	r3, r3, #4294967295
 801092a:	4631      	mov	r1, r6
 801092c:	dcf1      	bgt.n	8010912 <__exponent+0x1c>
 801092e:	3130      	adds	r1, #48	@ 0x30
 8010930:	1e94      	subs	r4, r2, #2
 8010932:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010936:	1c41      	adds	r1, r0, #1
 8010938:	4623      	mov	r3, r4
 801093a:	42ab      	cmp	r3, r5
 801093c:	d30a      	bcc.n	8010954 <__exponent+0x5e>
 801093e:	f10d 0309 	add.w	r3, sp, #9
 8010942:	1a9b      	subs	r3, r3, r2
 8010944:	42ac      	cmp	r4, r5
 8010946:	bf88      	it	hi
 8010948:	2300      	movhi	r3, #0
 801094a:	3302      	adds	r3, #2
 801094c:	4403      	add	r3, r0
 801094e:	1a18      	subs	r0, r3, r0
 8010950:	b003      	add	sp, #12
 8010952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010954:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010958:	f801 6f01 	strb.w	r6, [r1, #1]!
 801095c:	e7ed      	b.n	801093a <__exponent+0x44>
 801095e:	2330      	movs	r3, #48	@ 0x30
 8010960:	3130      	adds	r1, #48	@ 0x30
 8010962:	7083      	strb	r3, [r0, #2]
 8010964:	70c1      	strb	r1, [r0, #3]
 8010966:	1d03      	adds	r3, r0, #4
 8010968:	e7f1      	b.n	801094e <__exponent+0x58>
	...

0801096c <_printf_float>:
 801096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010970:	b08d      	sub	sp, #52	@ 0x34
 8010972:	460c      	mov	r4, r1
 8010974:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010978:	4616      	mov	r6, r2
 801097a:	461f      	mov	r7, r3
 801097c:	4605      	mov	r5, r0
 801097e:	f000 fd1b 	bl	80113b8 <_localeconv_r>
 8010982:	6803      	ldr	r3, [r0, #0]
 8010984:	9304      	str	r3, [sp, #16]
 8010986:	4618      	mov	r0, r3
 8010988:	f7ef fc82 	bl	8000290 <strlen>
 801098c:	2300      	movs	r3, #0
 801098e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010990:	f8d8 3000 	ldr.w	r3, [r8]
 8010994:	9005      	str	r0, [sp, #20]
 8010996:	3307      	adds	r3, #7
 8010998:	f023 0307 	bic.w	r3, r3, #7
 801099c:	f103 0208 	add.w	r2, r3, #8
 80109a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80109a4:	f8d4 b000 	ldr.w	fp, [r4]
 80109a8:	f8c8 2000 	str.w	r2, [r8]
 80109ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80109b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80109b4:	9307      	str	r3, [sp, #28]
 80109b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80109ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80109be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109c2:	4b9c      	ldr	r3, [pc, #624]	@ (8010c34 <_printf_float+0x2c8>)
 80109c4:	f04f 32ff 	mov.w	r2, #4294967295
 80109c8:	f7f0 f8c0 	bl	8000b4c <__aeabi_dcmpun>
 80109cc:	bb70      	cbnz	r0, 8010a2c <_printf_float+0xc0>
 80109ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109d2:	4b98      	ldr	r3, [pc, #608]	@ (8010c34 <_printf_float+0x2c8>)
 80109d4:	f04f 32ff 	mov.w	r2, #4294967295
 80109d8:	f7f0 f89a 	bl	8000b10 <__aeabi_dcmple>
 80109dc:	bb30      	cbnz	r0, 8010a2c <_printf_float+0xc0>
 80109de:	2200      	movs	r2, #0
 80109e0:	2300      	movs	r3, #0
 80109e2:	4640      	mov	r0, r8
 80109e4:	4649      	mov	r1, r9
 80109e6:	f7f0 f889 	bl	8000afc <__aeabi_dcmplt>
 80109ea:	b110      	cbz	r0, 80109f2 <_printf_float+0x86>
 80109ec:	232d      	movs	r3, #45	@ 0x2d
 80109ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109f2:	4a91      	ldr	r2, [pc, #580]	@ (8010c38 <_printf_float+0x2cc>)
 80109f4:	4b91      	ldr	r3, [pc, #580]	@ (8010c3c <_printf_float+0x2d0>)
 80109f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80109fa:	bf94      	ite	ls
 80109fc:	4690      	movls	r8, r2
 80109fe:	4698      	movhi	r8, r3
 8010a00:	2303      	movs	r3, #3
 8010a02:	6123      	str	r3, [r4, #16]
 8010a04:	f02b 0304 	bic.w	r3, fp, #4
 8010a08:	6023      	str	r3, [r4, #0]
 8010a0a:	f04f 0900 	mov.w	r9, #0
 8010a0e:	9700      	str	r7, [sp, #0]
 8010a10:	4633      	mov	r3, r6
 8010a12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010a14:	4621      	mov	r1, r4
 8010a16:	4628      	mov	r0, r5
 8010a18:	f000 f9d2 	bl	8010dc0 <_printf_common>
 8010a1c:	3001      	adds	r0, #1
 8010a1e:	f040 808d 	bne.w	8010b3c <_printf_float+0x1d0>
 8010a22:	f04f 30ff 	mov.w	r0, #4294967295
 8010a26:	b00d      	add	sp, #52	@ 0x34
 8010a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a2c:	4642      	mov	r2, r8
 8010a2e:	464b      	mov	r3, r9
 8010a30:	4640      	mov	r0, r8
 8010a32:	4649      	mov	r1, r9
 8010a34:	f7f0 f88a 	bl	8000b4c <__aeabi_dcmpun>
 8010a38:	b140      	cbz	r0, 8010a4c <_printf_float+0xe0>
 8010a3a:	464b      	mov	r3, r9
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	bfbc      	itt	lt
 8010a40:	232d      	movlt	r3, #45	@ 0x2d
 8010a42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010a46:	4a7e      	ldr	r2, [pc, #504]	@ (8010c40 <_printf_float+0x2d4>)
 8010a48:	4b7e      	ldr	r3, [pc, #504]	@ (8010c44 <_printf_float+0x2d8>)
 8010a4a:	e7d4      	b.n	80109f6 <_printf_float+0x8a>
 8010a4c:	6863      	ldr	r3, [r4, #4]
 8010a4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010a52:	9206      	str	r2, [sp, #24]
 8010a54:	1c5a      	adds	r2, r3, #1
 8010a56:	d13b      	bne.n	8010ad0 <_printf_float+0x164>
 8010a58:	2306      	movs	r3, #6
 8010a5a:	6063      	str	r3, [r4, #4]
 8010a5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010a60:	2300      	movs	r3, #0
 8010a62:	6022      	str	r2, [r4, #0]
 8010a64:	9303      	str	r3, [sp, #12]
 8010a66:	ab0a      	add	r3, sp, #40	@ 0x28
 8010a68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010a6c:	ab09      	add	r3, sp, #36	@ 0x24
 8010a6e:	9300      	str	r3, [sp, #0]
 8010a70:	6861      	ldr	r1, [r4, #4]
 8010a72:	ec49 8b10 	vmov	d0, r8, r9
 8010a76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	f7ff fed6 	bl	801082c <__cvt>
 8010a80:	9b06      	ldr	r3, [sp, #24]
 8010a82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010a84:	2b47      	cmp	r3, #71	@ 0x47
 8010a86:	4680      	mov	r8, r0
 8010a88:	d129      	bne.n	8010ade <_printf_float+0x172>
 8010a8a:	1cc8      	adds	r0, r1, #3
 8010a8c:	db02      	blt.n	8010a94 <_printf_float+0x128>
 8010a8e:	6863      	ldr	r3, [r4, #4]
 8010a90:	4299      	cmp	r1, r3
 8010a92:	dd41      	ble.n	8010b18 <_printf_float+0x1ac>
 8010a94:	f1aa 0a02 	sub.w	sl, sl, #2
 8010a98:	fa5f fa8a 	uxtb.w	sl, sl
 8010a9c:	3901      	subs	r1, #1
 8010a9e:	4652      	mov	r2, sl
 8010aa0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010aa4:	9109      	str	r1, [sp, #36]	@ 0x24
 8010aa6:	f7ff ff26 	bl	80108f6 <__exponent>
 8010aaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010aac:	1813      	adds	r3, r2, r0
 8010aae:	2a01      	cmp	r2, #1
 8010ab0:	4681      	mov	r9, r0
 8010ab2:	6123      	str	r3, [r4, #16]
 8010ab4:	dc02      	bgt.n	8010abc <_printf_float+0x150>
 8010ab6:	6822      	ldr	r2, [r4, #0]
 8010ab8:	07d2      	lsls	r2, r2, #31
 8010aba:	d501      	bpl.n	8010ac0 <_printf_float+0x154>
 8010abc:	3301      	adds	r3, #1
 8010abe:	6123      	str	r3, [r4, #16]
 8010ac0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d0a2      	beq.n	8010a0e <_printf_float+0xa2>
 8010ac8:	232d      	movs	r3, #45	@ 0x2d
 8010aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ace:	e79e      	b.n	8010a0e <_printf_float+0xa2>
 8010ad0:	9a06      	ldr	r2, [sp, #24]
 8010ad2:	2a47      	cmp	r2, #71	@ 0x47
 8010ad4:	d1c2      	bne.n	8010a5c <_printf_float+0xf0>
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d1c0      	bne.n	8010a5c <_printf_float+0xf0>
 8010ada:	2301      	movs	r3, #1
 8010adc:	e7bd      	b.n	8010a5a <_printf_float+0xee>
 8010ade:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010ae2:	d9db      	bls.n	8010a9c <_printf_float+0x130>
 8010ae4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010ae8:	d118      	bne.n	8010b1c <_printf_float+0x1b0>
 8010aea:	2900      	cmp	r1, #0
 8010aec:	6863      	ldr	r3, [r4, #4]
 8010aee:	dd0b      	ble.n	8010b08 <_printf_float+0x19c>
 8010af0:	6121      	str	r1, [r4, #16]
 8010af2:	b913      	cbnz	r3, 8010afa <_printf_float+0x18e>
 8010af4:	6822      	ldr	r2, [r4, #0]
 8010af6:	07d0      	lsls	r0, r2, #31
 8010af8:	d502      	bpl.n	8010b00 <_printf_float+0x194>
 8010afa:	3301      	adds	r3, #1
 8010afc:	440b      	add	r3, r1
 8010afe:	6123      	str	r3, [r4, #16]
 8010b00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010b02:	f04f 0900 	mov.w	r9, #0
 8010b06:	e7db      	b.n	8010ac0 <_printf_float+0x154>
 8010b08:	b913      	cbnz	r3, 8010b10 <_printf_float+0x1a4>
 8010b0a:	6822      	ldr	r2, [r4, #0]
 8010b0c:	07d2      	lsls	r2, r2, #31
 8010b0e:	d501      	bpl.n	8010b14 <_printf_float+0x1a8>
 8010b10:	3302      	adds	r3, #2
 8010b12:	e7f4      	b.n	8010afe <_printf_float+0x192>
 8010b14:	2301      	movs	r3, #1
 8010b16:	e7f2      	b.n	8010afe <_printf_float+0x192>
 8010b18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b1e:	4299      	cmp	r1, r3
 8010b20:	db05      	blt.n	8010b2e <_printf_float+0x1c2>
 8010b22:	6823      	ldr	r3, [r4, #0]
 8010b24:	6121      	str	r1, [r4, #16]
 8010b26:	07d8      	lsls	r0, r3, #31
 8010b28:	d5ea      	bpl.n	8010b00 <_printf_float+0x194>
 8010b2a:	1c4b      	adds	r3, r1, #1
 8010b2c:	e7e7      	b.n	8010afe <_printf_float+0x192>
 8010b2e:	2900      	cmp	r1, #0
 8010b30:	bfd4      	ite	le
 8010b32:	f1c1 0202 	rsble	r2, r1, #2
 8010b36:	2201      	movgt	r2, #1
 8010b38:	4413      	add	r3, r2
 8010b3a:	e7e0      	b.n	8010afe <_printf_float+0x192>
 8010b3c:	6823      	ldr	r3, [r4, #0]
 8010b3e:	055a      	lsls	r2, r3, #21
 8010b40:	d407      	bmi.n	8010b52 <_printf_float+0x1e6>
 8010b42:	6923      	ldr	r3, [r4, #16]
 8010b44:	4642      	mov	r2, r8
 8010b46:	4631      	mov	r1, r6
 8010b48:	4628      	mov	r0, r5
 8010b4a:	47b8      	blx	r7
 8010b4c:	3001      	adds	r0, #1
 8010b4e:	d12b      	bne.n	8010ba8 <_printf_float+0x23c>
 8010b50:	e767      	b.n	8010a22 <_printf_float+0xb6>
 8010b52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010b56:	f240 80dd 	bls.w	8010d14 <_printf_float+0x3a8>
 8010b5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010b5e:	2200      	movs	r2, #0
 8010b60:	2300      	movs	r3, #0
 8010b62:	f7ef ffc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d033      	beq.n	8010bd2 <_printf_float+0x266>
 8010b6a:	4a37      	ldr	r2, [pc, #220]	@ (8010c48 <_printf_float+0x2dc>)
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	4631      	mov	r1, r6
 8010b70:	4628      	mov	r0, r5
 8010b72:	47b8      	blx	r7
 8010b74:	3001      	adds	r0, #1
 8010b76:	f43f af54 	beq.w	8010a22 <_printf_float+0xb6>
 8010b7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010b7e:	4543      	cmp	r3, r8
 8010b80:	db02      	blt.n	8010b88 <_printf_float+0x21c>
 8010b82:	6823      	ldr	r3, [r4, #0]
 8010b84:	07d8      	lsls	r0, r3, #31
 8010b86:	d50f      	bpl.n	8010ba8 <_printf_float+0x23c>
 8010b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b8c:	4631      	mov	r1, r6
 8010b8e:	4628      	mov	r0, r5
 8010b90:	47b8      	blx	r7
 8010b92:	3001      	adds	r0, #1
 8010b94:	f43f af45 	beq.w	8010a22 <_printf_float+0xb6>
 8010b98:	f04f 0900 	mov.w	r9, #0
 8010b9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ba0:	f104 0a1a 	add.w	sl, r4, #26
 8010ba4:	45c8      	cmp	r8, r9
 8010ba6:	dc09      	bgt.n	8010bbc <_printf_float+0x250>
 8010ba8:	6823      	ldr	r3, [r4, #0]
 8010baa:	079b      	lsls	r3, r3, #30
 8010bac:	f100 8103 	bmi.w	8010db6 <_printf_float+0x44a>
 8010bb0:	68e0      	ldr	r0, [r4, #12]
 8010bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bb4:	4298      	cmp	r0, r3
 8010bb6:	bfb8      	it	lt
 8010bb8:	4618      	movlt	r0, r3
 8010bba:	e734      	b.n	8010a26 <_printf_float+0xba>
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	4652      	mov	r2, sl
 8010bc0:	4631      	mov	r1, r6
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	47b8      	blx	r7
 8010bc6:	3001      	adds	r0, #1
 8010bc8:	f43f af2b 	beq.w	8010a22 <_printf_float+0xb6>
 8010bcc:	f109 0901 	add.w	r9, r9, #1
 8010bd0:	e7e8      	b.n	8010ba4 <_printf_float+0x238>
 8010bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	dc39      	bgt.n	8010c4c <_printf_float+0x2e0>
 8010bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8010c48 <_printf_float+0x2dc>)
 8010bda:	2301      	movs	r3, #1
 8010bdc:	4631      	mov	r1, r6
 8010bde:	4628      	mov	r0, r5
 8010be0:	47b8      	blx	r7
 8010be2:	3001      	adds	r0, #1
 8010be4:	f43f af1d 	beq.w	8010a22 <_printf_float+0xb6>
 8010be8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010bec:	ea59 0303 	orrs.w	r3, r9, r3
 8010bf0:	d102      	bne.n	8010bf8 <_printf_float+0x28c>
 8010bf2:	6823      	ldr	r3, [r4, #0]
 8010bf4:	07d9      	lsls	r1, r3, #31
 8010bf6:	d5d7      	bpl.n	8010ba8 <_printf_float+0x23c>
 8010bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bfc:	4631      	mov	r1, r6
 8010bfe:	4628      	mov	r0, r5
 8010c00:	47b8      	blx	r7
 8010c02:	3001      	adds	r0, #1
 8010c04:	f43f af0d 	beq.w	8010a22 <_printf_float+0xb6>
 8010c08:	f04f 0a00 	mov.w	sl, #0
 8010c0c:	f104 0b1a 	add.w	fp, r4, #26
 8010c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c12:	425b      	negs	r3, r3
 8010c14:	4553      	cmp	r3, sl
 8010c16:	dc01      	bgt.n	8010c1c <_printf_float+0x2b0>
 8010c18:	464b      	mov	r3, r9
 8010c1a:	e793      	b.n	8010b44 <_printf_float+0x1d8>
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	465a      	mov	r2, fp
 8010c20:	4631      	mov	r1, r6
 8010c22:	4628      	mov	r0, r5
 8010c24:	47b8      	blx	r7
 8010c26:	3001      	adds	r0, #1
 8010c28:	f43f aefb 	beq.w	8010a22 <_printf_float+0xb6>
 8010c2c:	f10a 0a01 	add.w	sl, sl, #1
 8010c30:	e7ee      	b.n	8010c10 <_printf_float+0x2a4>
 8010c32:	bf00      	nop
 8010c34:	7fefffff 	.word	0x7fefffff
 8010c38:	08015964 	.word	0x08015964
 8010c3c:	08015968 	.word	0x08015968
 8010c40:	0801596c 	.word	0x0801596c
 8010c44:	08015970 	.word	0x08015970
 8010c48:	08015974 	.word	0x08015974
 8010c4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010c4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010c52:	4553      	cmp	r3, sl
 8010c54:	bfa8      	it	ge
 8010c56:	4653      	movge	r3, sl
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	4699      	mov	r9, r3
 8010c5c:	dc36      	bgt.n	8010ccc <_printf_float+0x360>
 8010c5e:	f04f 0b00 	mov.w	fp, #0
 8010c62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c66:	f104 021a 	add.w	r2, r4, #26
 8010c6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010c6c:	9306      	str	r3, [sp, #24]
 8010c6e:	eba3 0309 	sub.w	r3, r3, r9
 8010c72:	455b      	cmp	r3, fp
 8010c74:	dc31      	bgt.n	8010cda <_printf_float+0x36e>
 8010c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c78:	459a      	cmp	sl, r3
 8010c7a:	dc3a      	bgt.n	8010cf2 <_printf_float+0x386>
 8010c7c:	6823      	ldr	r3, [r4, #0]
 8010c7e:	07da      	lsls	r2, r3, #31
 8010c80:	d437      	bmi.n	8010cf2 <_printf_float+0x386>
 8010c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c84:	ebaa 0903 	sub.w	r9, sl, r3
 8010c88:	9b06      	ldr	r3, [sp, #24]
 8010c8a:	ebaa 0303 	sub.w	r3, sl, r3
 8010c8e:	4599      	cmp	r9, r3
 8010c90:	bfa8      	it	ge
 8010c92:	4699      	movge	r9, r3
 8010c94:	f1b9 0f00 	cmp.w	r9, #0
 8010c98:	dc33      	bgt.n	8010d02 <_printf_float+0x396>
 8010c9a:	f04f 0800 	mov.w	r8, #0
 8010c9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ca2:	f104 0b1a 	add.w	fp, r4, #26
 8010ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ca8:	ebaa 0303 	sub.w	r3, sl, r3
 8010cac:	eba3 0309 	sub.w	r3, r3, r9
 8010cb0:	4543      	cmp	r3, r8
 8010cb2:	f77f af79 	ble.w	8010ba8 <_printf_float+0x23c>
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	465a      	mov	r2, fp
 8010cba:	4631      	mov	r1, r6
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	47b8      	blx	r7
 8010cc0:	3001      	adds	r0, #1
 8010cc2:	f43f aeae 	beq.w	8010a22 <_printf_float+0xb6>
 8010cc6:	f108 0801 	add.w	r8, r8, #1
 8010cca:	e7ec      	b.n	8010ca6 <_printf_float+0x33a>
 8010ccc:	4642      	mov	r2, r8
 8010cce:	4631      	mov	r1, r6
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	47b8      	blx	r7
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	d1c2      	bne.n	8010c5e <_printf_float+0x2f2>
 8010cd8:	e6a3      	b.n	8010a22 <_printf_float+0xb6>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	4631      	mov	r1, r6
 8010cde:	4628      	mov	r0, r5
 8010ce0:	9206      	str	r2, [sp, #24]
 8010ce2:	47b8      	blx	r7
 8010ce4:	3001      	adds	r0, #1
 8010ce6:	f43f ae9c 	beq.w	8010a22 <_printf_float+0xb6>
 8010cea:	9a06      	ldr	r2, [sp, #24]
 8010cec:	f10b 0b01 	add.w	fp, fp, #1
 8010cf0:	e7bb      	b.n	8010c6a <_printf_float+0x2fe>
 8010cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cf6:	4631      	mov	r1, r6
 8010cf8:	4628      	mov	r0, r5
 8010cfa:	47b8      	blx	r7
 8010cfc:	3001      	adds	r0, #1
 8010cfe:	d1c0      	bne.n	8010c82 <_printf_float+0x316>
 8010d00:	e68f      	b.n	8010a22 <_printf_float+0xb6>
 8010d02:	9a06      	ldr	r2, [sp, #24]
 8010d04:	464b      	mov	r3, r9
 8010d06:	4442      	add	r2, r8
 8010d08:	4631      	mov	r1, r6
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	47b8      	blx	r7
 8010d0e:	3001      	adds	r0, #1
 8010d10:	d1c3      	bne.n	8010c9a <_printf_float+0x32e>
 8010d12:	e686      	b.n	8010a22 <_printf_float+0xb6>
 8010d14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010d18:	f1ba 0f01 	cmp.w	sl, #1
 8010d1c:	dc01      	bgt.n	8010d22 <_printf_float+0x3b6>
 8010d1e:	07db      	lsls	r3, r3, #31
 8010d20:	d536      	bpl.n	8010d90 <_printf_float+0x424>
 8010d22:	2301      	movs	r3, #1
 8010d24:	4642      	mov	r2, r8
 8010d26:	4631      	mov	r1, r6
 8010d28:	4628      	mov	r0, r5
 8010d2a:	47b8      	blx	r7
 8010d2c:	3001      	adds	r0, #1
 8010d2e:	f43f ae78 	beq.w	8010a22 <_printf_float+0xb6>
 8010d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d36:	4631      	mov	r1, r6
 8010d38:	4628      	mov	r0, r5
 8010d3a:	47b8      	blx	r7
 8010d3c:	3001      	adds	r0, #1
 8010d3e:	f43f ae70 	beq.w	8010a22 <_printf_float+0xb6>
 8010d42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010d46:	2200      	movs	r2, #0
 8010d48:	2300      	movs	r3, #0
 8010d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d4e:	f7ef fecb 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d52:	b9c0      	cbnz	r0, 8010d86 <_printf_float+0x41a>
 8010d54:	4653      	mov	r3, sl
 8010d56:	f108 0201 	add.w	r2, r8, #1
 8010d5a:	4631      	mov	r1, r6
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	47b8      	blx	r7
 8010d60:	3001      	adds	r0, #1
 8010d62:	d10c      	bne.n	8010d7e <_printf_float+0x412>
 8010d64:	e65d      	b.n	8010a22 <_printf_float+0xb6>
 8010d66:	2301      	movs	r3, #1
 8010d68:	465a      	mov	r2, fp
 8010d6a:	4631      	mov	r1, r6
 8010d6c:	4628      	mov	r0, r5
 8010d6e:	47b8      	blx	r7
 8010d70:	3001      	adds	r0, #1
 8010d72:	f43f ae56 	beq.w	8010a22 <_printf_float+0xb6>
 8010d76:	f108 0801 	add.w	r8, r8, #1
 8010d7a:	45d0      	cmp	r8, sl
 8010d7c:	dbf3      	blt.n	8010d66 <_printf_float+0x3fa>
 8010d7e:	464b      	mov	r3, r9
 8010d80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010d84:	e6df      	b.n	8010b46 <_printf_float+0x1da>
 8010d86:	f04f 0800 	mov.w	r8, #0
 8010d8a:	f104 0b1a 	add.w	fp, r4, #26
 8010d8e:	e7f4      	b.n	8010d7a <_printf_float+0x40e>
 8010d90:	2301      	movs	r3, #1
 8010d92:	4642      	mov	r2, r8
 8010d94:	e7e1      	b.n	8010d5a <_printf_float+0x3ee>
 8010d96:	2301      	movs	r3, #1
 8010d98:	464a      	mov	r2, r9
 8010d9a:	4631      	mov	r1, r6
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	47b8      	blx	r7
 8010da0:	3001      	adds	r0, #1
 8010da2:	f43f ae3e 	beq.w	8010a22 <_printf_float+0xb6>
 8010da6:	f108 0801 	add.w	r8, r8, #1
 8010daa:	68e3      	ldr	r3, [r4, #12]
 8010dac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010dae:	1a5b      	subs	r3, r3, r1
 8010db0:	4543      	cmp	r3, r8
 8010db2:	dcf0      	bgt.n	8010d96 <_printf_float+0x42a>
 8010db4:	e6fc      	b.n	8010bb0 <_printf_float+0x244>
 8010db6:	f04f 0800 	mov.w	r8, #0
 8010dba:	f104 0919 	add.w	r9, r4, #25
 8010dbe:	e7f4      	b.n	8010daa <_printf_float+0x43e>

08010dc0 <_printf_common>:
 8010dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dc4:	4616      	mov	r6, r2
 8010dc6:	4698      	mov	r8, r3
 8010dc8:	688a      	ldr	r2, [r1, #8]
 8010dca:	690b      	ldr	r3, [r1, #16]
 8010dcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	bfb8      	it	lt
 8010dd4:	4613      	movlt	r3, r2
 8010dd6:	6033      	str	r3, [r6, #0]
 8010dd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010ddc:	4607      	mov	r7, r0
 8010dde:	460c      	mov	r4, r1
 8010de0:	b10a      	cbz	r2, 8010de6 <_printf_common+0x26>
 8010de2:	3301      	adds	r3, #1
 8010de4:	6033      	str	r3, [r6, #0]
 8010de6:	6823      	ldr	r3, [r4, #0]
 8010de8:	0699      	lsls	r1, r3, #26
 8010dea:	bf42      	ittt	mi
 8010dec:	6833      	ldrmi	r3, [r6, #0]
 8010dee:	3302      	addmi	r3, #2
 8010df0:	6033      	strmi	r3, [r6, #0]
 8010df2:	6825      	ldr	r5, [r4, #0]
 8010df4:	f015 0506 	ands.w	r5, r5, #6
 8010df8:	d106      	bne.n	8010e08 <_printf_common+0x48>
 8010dfa:	f104 0a19 	add.w	sl, r4, #25
 8010dfe:	68e3      	ldr	r3, [r4, #12]
 8010e00:	6832      	ldr	r2, [r6, #0]
 8010e02:	1a9b      	subs	r3, r3, r2
 8010e04:	42ab      	cmp	r3, r5
 8010e06:	dc26      	bgt.n	8010e56 <_printf_common+0x96>
 8010e08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010e0c:	6822      	ldr	r2, [r4, #0]
 8010e0e:	3b00      	subs	r3, #0
 8010e10:	bf18      	it	ne
 8010e12:	2301      	movne	r3, #1
 8010e14:	0692      	lsls	r2, r2, #26
 8010e16:	d42b      	bmi.n	8010e70 <_printf_common+0xb0>
 8010e18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010e1c:	4641      	mov	r1, r8
 8010e1e:	4638      	mov	r0, r7
 8010e20:	47c8      	blx	r9
 8010e22:	3001      	adds	r0, #1
 8010e24:	d01e      	beq.n	8010e64 <_printf_common+0xa4>
 8010e26:	6823      	ldr	r3, [r4, #0]
 8010e28:	6922      	ldr	r2, [r4, #16]
 8010e2a:	f003 0306 	and.w	r3, r3, #6
 8010e2e:	2b04      	cmp	r3, #4
 8010e30:	bf02      	ittt	eq
 8010e32:	68e5      	ldreq	r5, [r4, #12]
 8010e34:	6833      	ldreq	r3, [r6, #0]
 8010e36:	1aed      	subeq	r5, r5, r3
 8010e38:	68a3      	ldr	r3, [r4, #8]
 8010e3a:	bf0c      	ite	eq
 8010e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e40:	2500      	movne	r5, #0
 8010e42:	4293      	cmp	r3, r2
 8010e44:	bfc4      	itt	gt
 8010e46:	1a9b      	subgt	r3, r3, r2
 8010e48:	18ed      	addgt	r5, r5, r3
 8010e4a:	2600      	movs	r6, #0
 8010e4c:	341a      	adds	r4, #26
 8010e4e:	42b5      	cmp	r5, r6
 8010e50:	d11a      	bne.n	8010e88 <_printf_common+0xc8>
 8010e52:	2000      	movs	r0, #0
 8010e54:	e008      	b.n	8010e68 <_printf_common+0xa8>
 8010e56:	2301      	movs	r3, #1
 8010e58:	4652      	mov	r2, sl
 8010e5a:	4641      	mov	r1, r8
 8010e5c:	4638      	mov	r0, r7
 8010e5e:	47c8      	blx	r9
 8010e60:	3001      	adds	r0, #1
 8010e62:	d103      	bne.n	8010e6c <_printf_common+0xac>
 8010e64:	f04f 30ff 	mov.w	r0, #4294967295
 8010e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e6c:	3501      	adds	r5, #1
 8010e6e:	e7c6      	b.n	8010dfe <_printf_common+0x3e>
 8010e70:	18e1      	adds	r1, r4, r3
 8010e72:	1c5a      	adds	r2, r3, #1
 8010e74:	2030      	movs	r0, #48	@ 0x30
 8010e76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010e7a:	4422      	add	r2, r4
 8010e7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010e80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010e84:	3302      	adds	r3, #2
 8010e86:	e7c7      	b.n	8010e18 <_printf_common+0x58>
 8010e88:	2301      	movs	r3, #1
 8010e8a:	4622      	mov	r2, r4
 8010e8c:	4641      	mov	r1, r8
 8010e8e:	4638      	mov	r0, r7
 8010e90:	47c8      	blx	r9
 8010e92:	3001      	adds	r0, #1
 8010e94:	d0e6      	beq.n	8010e64 <_printf_common+0xa4>
 8010e96:	3601      	adds	r6, #1
 8010e98:	e7d9      	b.n	8010e4e <_printf_common+0x8e>
	...

08010e9c <_printf_i>:
 8010e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ea0:	7e0f      	ldrb	r7, [r1, #24]
 8010ea2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010ea4:	2f78      	cmp	r7, #120	@ 0x78
 8010ea6:	4691      	mov	r9, r2
 8010ea8:	4680      	mov	r8, r0
 8010eaa:	460c      	mov	r4, r1
 8010eac:	469a      	mov	sl, r3
 8010eae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010eb2:	d807      	bhi.n	8010ec4 <_printf_i+0x28>
 8010eb4:	2f62      	cmp	r7, #98	@ 0x62
 8010eb6:	d80a      	bhi.n	8010ece <_printf_i+0x32>
 8010eb8:	2f00      	cmp	r7, #0
 8010eba:	f000 80d2 	beq.w	8011062 <_printf_i+0x1c6>
 8010ebe:	2f58      	cmp	r7, #88	@ 0x58
 8010ec0:	f000 80b9 	beq.w	8011036 <_printf_i+0x19a>
 8010ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ec8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010ecc:	e03a      	b.n	8010f44 <_printf_i+0xa8>
 8010ece:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010ed2:	2b15      	cmp	r3, #21
 8010ed4:	d8f6      	bhi.n	8010ec4 <_printf_i+0x28>
 8010ed6:	a101      	add	r1, pc, #4	@ (adr r1, 8010edc <_printf_i+0x40>)
 8010ed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010edc:	08010f35 	.word	0x08010f35
 8010ee0:	08010f49 	.word	0x08010f49
 8010ee4:	08010ec5 	.word	0x08010ec5
 8010ee8:	08010ec5 	.word	0x08010ec5
 8010eec:	08010ec5 	.word	0x08010ec5
 8010ef0:	08010ec5 	.word	0x08010ec5
 8010ef4:	08010f49 	.word	0x08010f49
 8010ef8:	08010ec5 	.word	0x08010ec5
 8010efc:	08010ec5 	.word	0x08010ec5
 8010f00:	08010ec5 	.word	0x08010ec5
 8010f04:	08010ec5 	.word	0x08010ec5
 8010f08:	08011049 	.word	0x08011049
 8010f0c:	08010f73 	.word	0x08010f73
 8010f10:	08011003 	.word	0x08011003
 8010f14:	08010ec5 	.word	0x08010ec5
 8010f18:	08010ec5 	.word	0x08010ec5
 8010f1c:	0801106b 	.word	0x0801106b
 8010f20:	08010ec5 	.word	0x08010ec5
 8010f24:	08010f73 	.word	0x08010f73
 8010f28:	08010ec5 	.word	0x08010ec5
 8010f2c:	08010ec5 	.word	0x08010ec5
 8010f30:	0801100b 	.word	0x0801100b
 8010f34:	6833      	ldr	r3, [r6, #0]
 8010f36:	1d1a      	adds	r2, r3, #4
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	6032      	str	r2, [r6, #0]
 8010f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010f44:	2301      	movs	r3, #1
 8010f46:	e09d      	b.n	8011084 <_printf_i+0x1e8>
 8010f48:	6833      	ldr	r3, [r6, #0]
 8010f4a:	6820      	ldr	r0, [r4, #0]
 8010f4c:	1d19      	adds	r1, r3, #4
 8010f4e:	6031      	str	r1, [r6, #0]
 8010f50:	0606      	lsls	r6, r0, #24
 8010f52:	d501      	bpl.n	8010f58 <_printf_i+0xbc>
 8010f54:	681d      	ldr	r5, [r3, #0]
 8010f56:	e003      	b.n	8010f60 <_printf_i+0xc4>
 8010f58:	0645      	lsls	r5, r0, #25
 8010f5a:	d5fb      	bpl.n	8010f54 <_printf_i+0xb8>
 8010f5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010f60:	2d00      	cmp	r5, #0
 8010f62:	da03      	bge.n	8010f6c <_printf_i+0xd0>
 8010f64:	232d      	movs	r3, #45	@ 0x2d
 8010f66:	426d      	negs	r5, r5
 8010f68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f6c:	4859      	ldr	r0, [pc, #356]	@ (80110d4 <_printf_i+0x238>)
 8010f6e:	230a      	movs	r3, #10
 8010f70:	e011      	b.n	8010f96 <_printf_i+0xfa>
 8010f72:	6821      	ldr	r1, [r4, #0]
 8010f74:	6833      	ldr	r3, [r6, #0]
 8010f76:	0608      	lsls	r0, r1, #24
 8010f78:	f853 5b04 	ldr.w	r5, [r3], #4
 8010f7c:	d402      	bmi.n	8010f84 <_printf_i+0xe8>
 8010f7e:	0649      	lsls	r1, r1, #25
 8010f80:	bf48      	it	mi
 8010f82:	b2ad      	uxthmi	r5, r5
 8010f84:	2f6f      	cmp	r7, #111	@ 0x6f
 8010f86:	4853      	ldr	r0, [pc, #332]	@ (80110d4 <_printf_i+0x238>)
 8010f88:	6033      	str	r3, [r6, #0]
 8010f8a:	bf14      	ite	ne
 8010f8c:	230a      	movne	r3, #10
 8010f8e:	2308      	moveq	r3, #8
 8010f90:	2100      	movs	r1, #0
 8010f92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010f96:	6866      	ldr	r6, [r4, #4]
 8010f98:	60a6      	str	r6, [r4, #8]
 8010f9a:	2e00      	cmp	r6, #0
 8010f9c:	bfa2      	ittt	ge
 8010f9e:	6821      	ldrge	r1, [r4, #0]
 8010fa0:	f021 0104 	bicge.w	r1, r1, #4
 8010fa4:	6021      	strge	r1, [r4, #0]
 8010fa6:	b90d      	cbnz	r5, 8010fac <_printf_i+0x110>
 8010fa8:	2e00      	cmp	r6, #0
 8010faa:	d04b      	beq.n	8011044 <_printf_i+0x1a8>
 8010fac:	4616      	mov	r6, r2
 8010fae:	fbb5 f1f3 	udiv	r1, r5, r3
 8010fb2:	fb03 5711 	mls	r7, r3, r1, r5
 8010fb6:	5dc7      	ldrb	r7, [r0, r7]
 8010fb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010fbc:	462f      	mov	r7, r5
 8010fbe:	42bb      	cmp	r3, r7
 8010fc0:	460d      	mov	r5, r1
 8010fc2:	d9f4      	bls.n	8010fae <_printf_i+0x112>
 8010fc4:	2b08      	cmp	r3, #8
 8010fc6:	d10b      	bne.n	8010fe0 <_printf_i+0x144>
 8010fc8:	6823      	ldr	r3, [r4, #0]
 8010fca:	07df      	lsls	r7, r3, #31
 8010fcc:	d508      	bpl.n	8010fe0 <_printf_i+0x144>
 8010fce:	6923      	ldr	r3, [r4, #16]
 8010fd0:	6861      	ldr	r1, [r4, #4]
 8010fd2:	4299      	cmp	r1, r3
 8010fd4:	bfde      	ittt	le
 8010fd6:	2330      	movle	r3, #48	@ 0x30
 8010fd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010fdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010fe0:	1b92      	subs	r2, r2, r6
 8010fe2:	6122      	str	r2, [r4, #16]
 8010fe4:	f8cd a000 	str.w	sl, [sp]
 8010fe8:	464b      	mov	r3, r9
 8010fea:	aa03      	add	r2, sp, #12
 8010fec:	4621      	mov	r1, r4
 8010fee:	4640      	mov	r0, r8
 8010ff0:	f7ff fee6 	bl	8010dc0 <_printf_common>
 8010ff4:	3001      	adds	r0, #1
 8010ff6:	d14a      	bne.n	801108e <_printf_i+0x1f2>
 8010ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8010ffc:	b004      	add	sp, #16
 8010ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011002:	6823      	ldr	r3, [r4, #0]
 8011004:	f043 0320 	orr.w	r3, r3, #32
 8011008:	6023      	str	r3, [r4, #0]
 801100a:	4833      	ldr	r0, [pc, #204]	@ (80110d8 <_printf_i+0x23c>)
 801100c:	2778      	movs	r7, #120	@ 0x78
 801100e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011012:	6823      	ldr	r3, [r4, #0]
 8011014:	6831      	ldr	r1, [r6, #0]
 8011016:	061f      	lsls	r7, r3, #24
 8011018:	f851 5b04 	ldr.w	r5, [r1], #4
 801101c:	d402      	bmi.n	8011024 <_printf_i+0x188>
 801101e:	065f      	lsls	r7, r3, #25
 8011020:	bf48      	it	mi
 8011022:	b2ad      	uxthmi	r5, r5
 8011024:	6031      	str	r1, [r6, #0]
 8011026:	07d9      	lsls	r1, r3, #31
 8011028:	bf44      	itt	mi
 801102a:	f043 0320 	orrmi.w	r3, r3, #32
 801102e:	6023      	strmi	r3, [r4, #0]
 8011030:	b11d      	cbz	r5, 801103a <_printf_i+0x19e>
 8011032:	2310      	movs	r3, #16
 8011034:	e7ac      	b.n	8010f90 <_printf_i+0xf4>
 8011036:	4827      	ldr	r0, [pc, #156]	@ (80110d4 <_printf_i+0x238>)
 8011038:	e7e9      	b.n	801100e <_printf_i+0x172>
 801103a:	6823      	ldr	r3, [r4, #0]
 801103c:	f023 0320 	bic.w	r3, r3, #32
 8011040:	6023      	str	r3, [r4, #0]
 8011042:	e7f6      	b.n	8011032 <_printf_i+0x196>
 8011044:	4616      	mov	r6, r2
 8011046:	e7bd      	b.n	8010fc4 <_printf_i+0x128>
 8011048:	6833      	ldr	r3, [r6, #0]
 801104a:	6825      	ldr	r5, [r4, #0]
 801104c:	6961      	ldr	r1, [r4, #20]
 801104e:	1d18      	adds	r0, r3, #4
 8011050:	6030      	str	r0, [r6, #0]
 8011052:	062e      	lsls	r6, r5, #24
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	d501      	bpl.n	801105c <_printf_i+0x1c0>
 8011058:	6019      	str	r1, [r3, #0]
 801105a:	e002      	b.n	8011062 <_printf_i+0x1c6>
 801105c:	0668      	lsls	r0, r5, #25
 801105e:	d5fb      	bpl.n	8011058 <_printf_i+0x1bc>
 8011060:	8019      	strh	r1, [r3, #0]
 8011062:	2300      	movs	r3, #0
 8011064:	6123      	str	r3, [r4, #16]
 8011066:	4616      	mov	r6, r2
 8011068:	e7bc      	b.n	8010fe4 <_printf_i+0x148>
 801106a:	6833      	ldr	r3, [r6, #0]
 801106c:	1d1a      	adds	r2, r3, #4
 801106e:	6032      	str	r2, [r6, #0]
 8011070:	681e      	ldr	r6, [r3, #0]
 8011072:	6862      	ldr	r2, [r4, #4]
 8011074:	2100      	movs	r1, #0
 8011076:	4630      	mov	r0, r6
 8011078:	f7ef f8ba 	bl	80001f0 <memchr>
 801107c:	b108      	cbz	r0, 8011082 <_printf_i+0x1e6>
 801107e:	1b80      	subs	r0, r0, r6
 8011080:	6060      	str	r0, [r4, #4]
 8011082:	6863      	ldr	r3, [r4, #4]
 8011084:	6123      	str	r3, [r4, #16]
 8011086:	2300      	movs	r3, #0
 8011088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801108c:	e7aa      	b.n	8010fe4 <_printf_i+0x148>
 801108e:	6923      	ldr	r3, [r4, #16]
 8011090:	4632      	mov	r2, r6
 8011092:	4649      	mov	r1, r9
 8011094:	4640      	mov	r0, r8
 8011096:	47d0      	blx	sl
 8011098:	3001      	adds	r0, #1
 801109a:	d0ad      	beq.n	8010ff8 <_printf_i+0x15c>
 801109c:	6823      	ldr	r3, [r4, #0]
 801109e:	079b      	lsls	r3, r3, #30
 80110a0:	d413      	bmi.n	80110ca <_printf_i+0x22e>
 80110a2:	68e0      	ldr	r0, [r4, #12]
 80110a4:	9b03      	ldr	r3, [sp, #12]
 80110a6:	4298      	cmp	r0, r3
 80110a8:	bfb8      	it	lt
 80110aa:	4618      	movlt	r0, r3
 80110ac:	e7a6      	b.n	8010ffc <_printf_i+0x160>
 80110ae:	2301      	movs	r3, #1
 80110b0:	4632      	mov	r2, r6
 80110b2:	4649      	mov	r1, r9
 80110b4:	4640      	mov	r0, r8
 80110b6:	47d0      	blx	sl
 80110b8:	3001      	adds	r0, #1
 80110ba:	d09d      	beq.n	8010ff8 <_printf_i+0x15c>
 80110bc:	3501      	adds	r5, #1
 80110be:	68e3      	ldr	r3, [r4, #12]
 80110c0:	9903      	ldr	r1, [sp, #12]
 80110c2:	1a5b      	subs	r3, r3, r1
 80110c4:	42ab      	cmp	r3, r5
 80110c6:	dcf2      	bgt.n	80110ae <_printf_i+0x212>
 80110c8:	e7eb      	b.n	80110a2 <_printf_i+0x206>
 80110ca:	2500      	movs	r5, #0
 80110cc:	f104 0619 	add.w	r6, r4, #25
 80110d0:	e7f5      	b.n	80110be <_printf_i+0x222>
 80110d2:	bf00      	nop
 80110d4:	08015976 	.word	0x08015976
 80110d8:	08015987 	.word	0x08015987

080110dc <std>:
 80110dc:	2300      	movs	r3, #0
 80110de:	b510      	push	{r4, lr}
 80110e0:	4604      	mov	r4, r0
 80110e2:	e9c0 3300 	strd	r3, r3, [r0]
 80110e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80110ea:	6083      	str	r3, [r0, #8]
 80110ec:	8181      	strh	r1, [r0, #12]
 80110ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80110f0:	81c2      	strh	r2, [r0, #14]
 80110f2:	6183      	str	r3, [r0, #24]
 80110f4:	4619      	mov	r1, r3
 80110f6:	2208      	movs	r2, #8
 80110f8:	305c      	adds	r0, #92	@ 0x5c
 80110fa:	f000 f942 	bl	8011382 <memset>
 80110fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011134 <std+0x58>)
 8011100:	6263      	str	r3, [r4, #36]	@ 0x24
 8011102:	4b0d      	ldr	r3, [pc, #52]	@ (8011138 <std+0x5c>)
 8011104:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011106:	4b0d      	ldr	r3, [pc, #52]	@ (801113c <std+0x60>)
 8011108:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801110a:	4b0d      	ldr	r3, [pc, #52]	@ (8011140 <std+0x64>)
 801110c:	6323      	str	r3, [r4, #48]	@ 0x30
 801110e:	4b0d      	ldr	r3, [pc, #52]	@ (8011144 <std+0x68>)
 8011110:	6224      	str	r4, [r4, #32]
 8011112:	429c      	cmp	r4, r3
 8011114:	d006      	beq.n	8011124 <std+0x48>
 8011116:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801111a:	4294      	cmp	r4, r2
 801111c:	d002      	beq.n	8011124 <std+0x48>
 801111e:	33d0      	adds	r3, #208	@ 0xd0
 8011120:	429c      	cmp	r4, r3
 8011122:	d105      	bne.n	8011130 <std+0x54>
 8011124:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801112c:	f000 b9c8 	b.w	80114c0 <__retarget_lock_init_recursive>
 8011130:	bd10      	pop	{r4, pc}
 8011132:	bf00      	nop
 8011134:	080112c9 	.word	0x080112c9
 8011138:	080112eb 	.word	0x080112eb
 801113c:	08011323 	.word	0x08011323
 8011140:	08011347 	.word	0x08011347
 8011144:	2000201c 	.word	0x2000201c

08011148 <stdio_exit_handler>:
 8011148:	4a02      	ldr	r2, [pc, #8]	@ (8011154 <stdio_exit_handler+0xc>)
 801114a:	4903      	ldr	r1, [pc, #12]	@ (8011158 <stdio_exit_handler+0x10>)
 801114c:	4803      	ldr	r0, [pc, #12]	@ (801115c <stdio_exit_handler+0x14>)
 801114e:	f000 b869 	b.w	8011224 <_fwalk_sglue>
 8011152:	bf00      	nop
 8011154:	200000c8 	.word	0x200000c8
 8011158:	08012ce1 	.word	0x08012ce1
 801115c:	200000d8 	.word	0x200000d8

08011160 <cleanup_stdio>:
 8011160:	6841      	ldr	r1, [r0, #4]
 8011162:	4b0c      	ldr	r3, [pc, #48]	@ (8011194 <cleanup_stdio+0x34>)
 8011164:	4299      	cmp	r1, r3
 8011166:	b510      	push	{r4, lr}
 8011168:	4604      	mov	r4, r0
 801116a:	d001      	beq.n	8011170 <cleanup_stdio+0x10>
 801116c:	f001 fdb8 	bl	8012ce0 <_fflush_r>
 8011170:	68a1      	ldr	r1, [r4, #8]
 8011172:	4b09      	ldr	r3, [pc, #36]	@ (8011198 <cleanup_stdio+0x38>)
 8011174:	4299      	cmp	r1, r3
 8011176:	d002      	beq.n	801117e <cleanup_stdio+0x1e>
 8011178:	4620      	mov	r0, r4
 801117a:	f001 fdb1 	bl	8012ce0 <_fflush_r>
 801117e:	68e1      	ldr	r1, [r4, #12]
 8011180:	4b06      	ldr	r3, [pc, #24]	@ (801119c <cleanup_stdio+0x3c>)
 8011182:	4299      	cmp	r1, r3
 8011184:	d004      	beq.n	8011190 <cleanup_stdio+0x30>
 8011186:	4620      	mov	r0, r4
 8011188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801118c:	f001 bda8 	b.w	8012ce0 <_fflush_r>
 8011190:	bd10      	pop	{r4, pc}
 8011192:	bf00      	nop
 8011194:	2000201c 	.word	0x2000201c
 8011198:	20002084 	.word	0x20002084
 801119c:	200020ec 	.word	0x200020ec

080111a0 <global_stdio_init.part.0>:
 80111a0:	b510      	push	{r4, lr}
 80111a2:	4b0b      	ldr	r3, [pc, #44]	@ (80111d0 <global_stdio_init.part.0+0x30>)
 80111a4:	4c0b      	ldr	r4, [pc, #44]	@ (80111d4 <global_stdio_init.part.0+0x34>)
 80111a6:	4a0c      	ldr	r2, [pc, #48]	@ (80111d8 <global_stdio_init.part.0+0x38>)
 80111a8:	601a      	str	r2, [r3, #0]
 80111aa:	4620      	mov	r0, r4
 80111ac:	2200      	movs	r2, #0
 80111ae:	2104      	movs	r1, #4
 80111b0:	f7ff ff94 	bl	80110dc <std>
 80111b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80111b8:	2201      	movs	r2, #1
 80111ba:	2109      	movs	r1, #9
 80111bc:	f7ff ff8e 	bl	80110dc <std>
 80111c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80111c4:	2202      	movs	r2, #2
 80111c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111ca:	2112      	movs	r1, #18
 80111cc:	f7ff bf86 	b.w	80110dc <std>
 80111d0:	20002154 	.word	0x20002154
 80111d4:	2000201c 	.word	0x2000201c
 80111d8:	08011149 	.word	0x08011149

080111dc <__sfp_lock_acquire>:
 80111dc:	4801      	ldr	r0, [pc, #4]	@ (80111e4 <__sfp_lock_acquire+0x8>)
 80111de:	f000 b970 	b.w	80114c2 <__retarget_lock_acquire_recursive>
 80111e2:	bf00      	nop
 80111e4:	2000215d 	.word	0x2000215d

080111e8 <__sfp_lock_release>:
 80111e8:	4801      	ldr	r0, [pc, #4]	@ (80111f0 <__sfp_lock_release+0x8>)
 80111ea:	f000 b96b 	b.w	80114c4 <__retarget_lock_release_recursive>
 80111ee:	bf00      	nop
 80111f0:	2000215d 	.word	0x2000215d

080111f4 <__sinit>:
 80111f4:	b510      	push	{r4, lr}
 80111f6:	4604      	mov	r4, r0
 80111f8:	f7ff fff0 	bl	80111dc <__sfp_lock_acquire>
 80111fc:	6a23      	ldr	r3, [r4, #32]
 80111fe:	b11b      	cbz	r3, 8011208 <__sinit+0x14>
 8011200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011204:	f7ff bff0 	b.w	80111e8 <__sfp_lock_release>
 8011208:	4b04      	ldr	r3, [pc, #16]	@ (801121c <__sinit+0x28>)
 801120a:	6223      	str	r3, [r4, #32]
 801120c:	4b04      	ldr	r3, [pc, #16]	@ (8011220 <__sinit+0x2c>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d1f5      	bne.n	8011200 <__sinit+0xc>
 8011214:	f7ff ffc4 	bl	80111a0 <global_stdio_init.part.0>
 8011218:	e7f2      	b.n	8011200 <__sinit+0xc>
 801121a:	bf00      	nop
 801121c:	08011161 	.word	0x08011161
 8011220:	20002154 	.word	0x20002154

08011224 <_fwalk_sglue>:
 8011224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011228:	4607      	mov	r7, r0
 801122a:	4688      	mov	r8, r1
 801122c:	4614      	mov	r4, r2
 801122e:	2600      	movs	r6, #0
 8011230:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011234:	f1b9 0901 	subs.w	r9, r9, #1
 8011238:	d505      	bpl.n	8011246 <_fwalk_sglue+0x22>
 801123a:	6824      	ldr	r4, [r4, #0]
 801123c:	2c00      	cmp	r4, #0
 801123e:	d1f7      	bne.n	8011230 <_fwalk_sglue+0xc>
 8011240:	4630      	mov	r0, r6
 8011242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011246:	89ab      	ldrh	r3, [r5, #12]
 8011248:	2b01      	cmp	r3, #1
 801124a:	d907      	bls.n	801125c <_fwalk_sglue+0x38>
 801124c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011250:	3301      	adds	r3, #1
 8011252:	d003      	beq.n	801125c <_fwalk_sglue+0x38>
 8011254:	4629      	mov	r1, r5
 8011256:	4638      	mov	r0, r7
 8011258:	47c0      	blx	r8
 801125a:	4306      	orrs	r6, r0
 801125c:	3568      	adds	r5, #104	@ 0x68
 801125e:	e7e9      	b.n	8011234 <_fwalk_sglue+0x10>

08011260 <sniprintf>:
 8011260:	b40c      	push	{r2, r3}
 8011262:	b530      	push	{r4, r5, lr}
 8011264:	4b17      	ldr	r3, [pc, #92]	@ (80112c4 <sniprintf+0x64>)
 8011266:	1e0c      	subs	r4, r1, #0
 8011268:	681d      	ldr	r5, [r3, #0]
 801126a:	b09d      	sub	sp, #116	@ 0x74
 801126c:	da08      	bge.n	8011280 <sniprintf+0x20>
 801126e:	238b      	movs	r3, #139	@ 0x8b
 8011270:	602b      	str	r3, [r5, #0]
 8011272:	f04f 30ff 	mov.w	r0, #4294967295
 8011276:	b01d      	add	sp, #116	@ 0x74
 8011278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801127c:	b002      	add	sp, #8
 801127e:	4770      	bx	lr
 8011280:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011284:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011288:	bf14      	ite	ne
 801128a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801128e:	4623      	moveq	r3, r4
 8011290:	9304      	str	r3, [sp, #16]
 8011292:	9307      	str	r3, [sp, #28]
 8011294:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011298:	9002      	str	r0, [sp, #8]
 801129a:	9006      	str	r0, [sp, #24]
 801129c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80112a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80112a2:	ab21      	add	r3, sp, #132	@ 0x84
 80112a4:	a902      	add	r1, sp, #8
 80112a6:	4628      	mov	r0, r5
 80112a8:	9301      	str	r3, [sp, #4]
 80112aa:	f001 fb99 	bl	80129e0 <_svfiprintf_r>
 80112ae:	1c43      	adds	r3, r0, #1
 80112b0:	bfbc      	itt	lt
 80112b2:	238b      	movlt	r3, #139	@ 0x8b
 80112b4:	602b      	strlt	r3, [r5, #0]
 80112b6:	2c00      	cmp	r4, #0
 80112b8:	d0dd      	beq.n	8011276 <sniprintf+0x16>
 80112ba:	9b02      	ldr	r3, [sp, #8]
 80112bc:	2200      	movs	r2, #0
 80112be:	701a      	strb	r2, [r3, #0]
 80112c0:	e7d9      	b.n	8011276 <sniprintf+0x16>
 80112c2:	bf00      	nop
 80112c4:	200000d4 	.word	0x200000d4

080112c8 <__sread>:
 80112c8:	b510      	push	{r4, lr}
 80112ca:	460c      	mov	r4, r1
 80112cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112d0:	f000 f898 	bl	8011404 <_read_r>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	bfab      	itete	ge
 80112d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80112da:	89a3      	ldrhlt	r3, [r4, #12]
 80112dc:	181b      	addge	r3, r3, r0
 80112de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80112e2:	bfac      	ite	ge
 80112e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80112e6:	81a3      	strhlt	r3, [r4, #12]
 80112e8:	bd10      	pop	{r4, pc}

080112ea <__swrite>:
 80112ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ee:	461f      	mov	r7, r3
 80112f0:	898b      	ldrh	r3, [r1, #12]
 80112f2:	05db      	lsls	r3, r3, #23
 80112f4:	4605      	mov	r5, r0
 80112f6:	460c      	mov	r4, r1
 80112f8:	4616      	mov	r6, r2
 80112fa:	d505      	bpl.n	8011308 <__swrite+0x1e>
 80112fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011300:	2302      	movs	r3, #2
 8011302:	2200      	movs	r2, #0
 8011304:	f000 f86c 	bl	80113e0 <_lseek_r>
 8011308:	89a3      	ldrh	r3, [r4, #12]
 801130a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801130e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011312:	81a3      	strh	r3, [r4, #12]
 8011314:	4632      	mov	r2, r6
 8011316:	463b      	mov	r3, r7
 8011318:	4628      	mov	r0, r5
 801131a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801131e:	f000 b893 	b.w	8011448 <_write_r>

08011322 <__sseek>:
 8011322:	b510      	push	{r4, lr}
 8011324:	460c      	mov	r4, r1
 8011326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801132a:	f000 f859 	bl	80113e0 <_lseek_r>
 801132e:	1c43      	adds	r3, r0, #1
 8011330:	89a3      	ldrh	r3, [r4, #12]
 8011332:	bf15      	itete	ne
 8011334:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011336:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801133a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801133e:	81a3      	strheq	r3, [r4, #12]
 8011340:	bf18      	it	ne
 8011342:	81a3      	strhne	r3, [r4, #12]
 8011344:	bd10      	pop	{r4, pc}

08011346 <__sclose>:
 8011346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801134a:	f000 b839 	b.w	80113c0 <_close_r>

0801134e <memmove>:
 801134e:	4288      	cmp	r0, r1
 8011350:	b510      	push	{r4, lr}
 8011352:	eb01 0402 	add.w	r4, r1, r2
 8011356:	d902      	bls.n	801135e <memmove+0x10>
 8011358:	4284      	cmp	r4, r0
 801135a:	4623      	mov	r3, r4
 801135c:	d807      	bhi.n	801136e <memmove+0x20>
 801135e:	1e43      	subs	r3, r0, #1
 8011360:	42a1      	cmp	r1, r4
 8011362:	d008      	beq.n	8011376 <memmove+0x28>
 8011364:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011368:	f803 2f01 	strb.w	r2, [r3, #1]!
 801136c:	e7f8      	b.n	8011360 <memmove+0x12>
 801136e:	4402      	add	r2, r0
 8011370:	4601      	mov	r1, r0
 8011372:	428a      	cmp	r2, r1
 8011374:	d100      	bne.n	8011378 <memmove+0x2a>
 8011376:	bd10      	pop	{r4, pc}
 8011378:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801137c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011380:	e7f7      	b.n	8011372 <memmove+0x24>

08011382 <memset>:
 8011382:	4402      	add	r2, r0
 8011384:	4603      	mov	r3, r0
 8011386:	4293      	cmp	r3, r2
 8011388:	d100      	bne.n	801138c <memset+0xa>
 801138a:	4770      	bx	lr
 801138c:	f803 1b01 	strb.w	r1, [r3], #1
 8011390:	e7f9      	b.n	8011386 <memset+0x4>

08011392 <strncpy>:
 8011392:	b510      	push	{r4, lr}
 8011394:	3901      	subs	r1, #1
 8011396:	4603      	mov	r3, r0
 8011398:	b132      	cbz	r2, 80113a8 <strncpy+0x16>
 801139a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801139e:	f803 4b01 	strb.w	r4, [r3], #1
 80113a2:	3a01      	subs	r2, #1
 80113a4:	2c00      	cmp	r4, #0
 80113a6:	d1f7      	bne.n	8011398 <strncpy+0x6>
 80113a8:	441a      	add	r2, r3
 80113aa:	2100      	movs	r1, #0
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d100      	bne.n	80113b2 <strncpy+0x20>
 80113b0:	bd10      	pop	{r4, pc}
 80113b2:	f803 1b01 	strb.w	r1, [r3], #1
 80113b6:	e7f9      	b.n	80113ac <strncpy+0x1a>

080113b8 <_localeconv_r>:
 80113b8:	4800      	ldr	r0, [pc, #0]	@ (80113bc <_localeconv_r+0x4>)
 80113ba:	4770      	bx	lr
 80113bc:	20000214 	.word	0x20000214

080113c0 <_close_r>:
 80113c0:	b538      	push	{r3, r4, r5, lr}
 80113c2:	4d06      	ldr	r5, [pc, #24]	@ (80113dc <_close_r+0x1c>)
 80113c4:	2300      	movs	r3, #0
 80113c6:	4604      	mov	r4, r0
 80113c8:	4608      	mov	r0, r1
 80113ca:	602b      	str	r3, [r5, #0]
 80113cc:	f7f1 fa32 	bl	8002834 <_close>
 80113d0:	1c43      	adds	r3, r0, #1
 80113d2:	d102      	bne.n	80113da <_close_r+0x1a>
 80113d4:	682b      	ldr	r3, [r5, #0]
 80113d6:	b103      	cbz	r3, 80113da <_close_r+0x1a>
 80113d8:	6023      	str	r3, [r4, #0]
 80113da:	bd38      	pop	{r3, r4, r5, pc}
 80113dc:	20002158 	.word	0x20002158

080113e0 <_lseek_r>:
 80113e0:	b538      	push	{r3, r4, r5, lr}
 80113e2:	4d07      	ldr	r5, [pc, #28]	@ (8011400 <_lseek_r+0x20>)
 80113e4:	4604      	mov	r4, r0
 80113e6:	4608      	mov	r0, r1
 80113e8:	4611      	mov	r1, r2
 80113ea:	2200      	movs	r2, #0
 80113ec:	602a      	str	r2, [r5, #0]
 80113ee:	461a      	mov	r2, r3
 80113f0:	f7f1 fa47 	bl	8002882 <_lseek>
 80113f4:	1c43      	adds	r3, r0, #1
 80113f6:	d102      	bne.n	80113fe <_lseek_r+0x1e>
 80113f8:	682b      	ldr	r3, [r5, #0]
 80113fa:	b103      	cbz	r3, 80113fe <_lseek_r+0x1e>
 80113fc:	6023      	str	r3, [r4, #0]
 80113fe:	bd38      	pop	{r3, r4, r5, pc}
 8011400:	20002158 	.word	0x20002158

08011404 <_read_r>:
 8011404:	b538      	push	{r3, r4, r5, lr}
 8011406:	4d07      	ldr	r5, [pc, #28]	@ (8011424 <_read_r+0x20>)
 8011408:	4604      	mov	r4, r0
 801140a:	4608      	mov	r0, r1
 801140c:	4611      	mov	r1, r2
 801140e:	2200      	movs	r2, #0
 8011410:	602a      	str	r2, [r5, #0]
 8011412:	461a      	mov	r2, r3
 8011414:	f7f1 f9d5 	bl	80027c2 <_read>
 8011418:	1c43      	adds	r3, r0, #1
 801141a:	d102      	bne.n	8011422 <_read_r+0x1e>
 801141c:	682b      	ldr	r3, [r5, #0]
 801141e:	b103      	cbz	r3, 8011422 <_read_r+0x1e>
 8011420:	6023      	str	r3, [r4, #0]
 8011422:	bd38      	pop	{r3, r4, r5, pc}
 8011424:	20002158 	.word	0x20002158

08011428 <_sbrk_r>:
 8011428:	b538      	push	{r3, r4, r5, lr}
 801142a:	4d06      	ldr	r5, [pc, #24]	@ (8011444 <_sbrk_r+0x1c>)
 801142c:	2300      	movs	r3, #0
 801142e:	4604      	mov	r4, r0
 8011430:	4608      	mov	r0, r1
 8011432:	602b      	str	r3, [r5, #0]
 8011434:	f7f1 fa32 	bl	800289c <_sbrk>
 8011438:	1c43      	adds	r3, r0, #1
 801143a:	d102      	bne.n	8011442 <_sbrk_r+0x1a>
 801143c:	682b      	ldr	r3, [r5, #0]
 801143e:	b103      	cbz	r3, 8011442 <_sbrk_r+0x1a>
 8011440:	6023      	str	r3, [r4, #0]
 8011442:	bd38      	pop	{r3, r4, r5, pc}
 8011444:	20002158 	.word	0x20002158

08011448 <_write_r>:
 8011448:	b538      	push	{r3, r4, r5, lr}
 801144a:	4d07      	ldr	r5, [pc, #28]	@ (8011468 <_write_r+0x20>)
 801144c:	4604      	mov	r4, r0
 801144e:	4608      	mov	r0, r1
 8011450:	4611      	mov	r1, r2
 8011452:	2200      	movs	r2, #0
 8011454:	602a      	str	r2, [r5, #0]
 8011456:	461a      	mov	r2, r3
 8011458:	f7f1 f9d0 	bl	80027fc <_write>
 801145c:	1c43      	adds	r3, r0, #1
 801145e:	d102      	bne.n	8011466 <_write_r+0x1e>
 8011460:	682b      	ldr	r3, [r5, #0]
 8011462:	b103      	cbz	r3, 8011466 <_write_r+0x1e>
 8011464:	6023      	str	r3, [r4, #0]
 8011466:	bd38      	pop	{r3, r4, r5, pc}
 8011468:	20002158 	.word	0x20002158

0801146c <__errno>:
 801146c:	4b01      	ldr	r3, [pc, #4]	@ (8011474 <__errno+0x8>)
 801146e:	6818      	ldr	r0, [r3, #0]
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	200000d4 	.word	0x200000d4

08011478 <__libc_init_array>:
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	4d0d      	ldr	r5, [pc, #52]	@ (80114b0 <__libc_init_array+0x38>)
 801147c:	4c0d      	ldr	r4, [pc, #52]	@ (80114b4 <__libc_init_array+0x3c>)
 801147e:	1b64      	subs	r4, r4, r5
 8011480:	10a4      	asrs	r4, r4, #2
 8011482:	2600      	movs	r6, #0
 8011484:	42a6      	cmp	r6, r4
 8011486:	d109      	bne.n	801149c <__libc_init_array+0x24>
 8011488:	4d0b      	ldr	r5, [pc, #44]	@ (80114b8 <__libc_init_array+0x40>)
 801148a:	4c0c      	ldr	r4, [pc, #48]	@ (80114bc <__libc_init_array+0x44>)
 801148c:	f001 ff8e 	bl	80133ac <_init>
 8011490:	1b64      	subs	r4, r4, r5
 8011492:	10a4      	asrs	r4, r4, #2
 8011494:	2600      	movs	r6, #0
 8011496:	42a6      	cmp	r6, r4
 8011498:	d105      	bne.n	80114a6 <__libc_init_array+0x2e>
 801149a:	bd70      	pop	{r4, r5, r6, pc}
 801149c:	f855 3b04 	ldr.w	r3, [r5], #4
 80114a0:	4798      	blx	r3
 80114a2:	3601      	adds	r6, #1
 80114a4:	e7ee      	b.n	8011484 <__libc_init_array+0xc>
 80114a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80114aa:	4798      	blx	r3
 80114ac:	3601      	adds	r6, #1
 80114ae:	e7f2      	b.n	8011496 <__libc_init_array+0x1e>
 80114b0:	08015ce0 	.word	0x08015ce0
 80114b4:	08015ce0 	.word	0x08015ce0
 80114b8:	08015ce0 	.word	0x08015ce0
 80114bc:	08015ce4 	.word	0x08015ce4

080114c0 <__retarget_lock_init_recursive>:
 80114c0:	4770      	bx	lr

080114c2 <__retarget_lock_acquire_recursive>:
 80114c2:	4770      	bx	lr

080114c4 <__retarget_lock_release_recursive>:
 80114c4:	4770      	bx	lr

080114c6 <strcpy>:
 80114c6:	4603      	mov	r3, r0
 80114c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114cc:	f803 2b01 	strb.w	r2, [r3], #1
 80114d0:	2a00      	cmp	r2, #0
 80114d2:	d1f9      	bne.n	80114c8 <strcpy+0x2>
 80114d4:	4770      	bx	lr

080114d6 <memcpy>:
 80114d6:	440a      	add	r2, r1
 80114d8:	4291      	cmp	r1, r2
 80114da:	f100 33ff 	add.w	r3, r0, #4294967295
 80114de:	d100      	bne.n	80114e2 <memcpy+0xc>
 80114e0:	4770      	bx	lr
 80114e2:	b510      	push	{r4, lr}
 80114e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114ec:	4291      	cmp	r1, r2
 80114ee:	d1f9      	bne.n	80114e4 <memcpy+0xe>
 80114f0:	bd10      	pop	{r4, pc}

080114f2 <quorem>:
 80114f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f6:	6903      	ldr	r3, [r0, #16]
 80114f8:	690c      	ldr	r4, [r1, #16]
 80114fa:	42a3      	cmp	r3, r4
 80114fc:	4607      	mov	r7, r0
 80114fe:	db7e      	blt.n	80115fe <quorem+0x10c>
 8011500:	3c01      	subs	r4, #1
 8011502:	f101 0814 	add.w	r8, r1, #20
 8011506:	00a3      	lsls	r3, r4, #2
 8011508:	f100 0514 	add.w	r5, r0, #20
 801150c:	9300      	str	r3, [sp, #0]
 801150e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011512:	9301      	str	r3, [sp, #4]
 8011514:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801151c:	3301      	adds	r3, #1
 801151e:	429a      	cmp	r2, r3
 8011520:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011524:	fbb2 f6f3 	udiv	r6, r2, r3
 8011528:	d32e      	bcc.n	8011588 <quorem+0x96>
 801152a:	f04f 0a00 	mov.w	sl, #0
 801152e:	46c4      	mov	ip, r8
 8011530:	46ae      	mov	lr, r5
 8011532:	46d3      	mov	fp, sl
 8011534:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011538:	b298      	uxth	r0, r3
 801153a:	fb06 a000 	mla	r0, r6, r0, sl
 801153e:	0c02      	lsrs	r2, r0, #16
 8011540:	0c1b      	lsrs	r3, r3, #16
 8011542:	fb06 2303 	mla	r3, r6, r3, r2
 8011546:	f8de 2000 	ldr.w	r2, [lr]
 801154a:	b280      	uxth	r0, r0
 801154c:	b292      	uxth	r2, r2
 801154e:	1a12      	subs	r2, r2, r0
 8011550:	445a      	add	r2, fp
 8011552:	f8de 0000 	ldr.w	r0, [lr]
 8011556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801155a:	b29b      	uxth	r3, r3
 801155c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011560:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011564:	b292      	uxth	r2, r2
 8011566:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801156a:	45e1      	cmp	r9, ip
 801156c:	f84e 2b04 	str.w	r2, [lr], #4
 8011570:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011574:	d2de      	bcs.n	8011534 <quorem+0x42>
 8011576:	9b00      	ldr	r3, [sp, #0]
 8011578:	58eb      	ldr	r3, [r5, r3]
 801157a:	b92b      	cbnz	r3, 8011588 <quorem+0x96>
 801157c:	9b01      	ldr	r3, [sp, #4]
 801157e:	3b04      	subs	r3, #4
 8011580:	429d      	cmp	r5, r3
 8011582:	461a      	mov	r2, r3
 8011584:	d32f      	bcc.n	80115e6 <quorem+0xf4>
 8011586:	613c      	str	r4, [r7, #16]
 8011588:	4638      	mov	r0, r7
 801158a:	f001 f8c5 	bl	8012718 <__mcmp>
 801158e:	2800      	cmp	r0, #0
 8011590:	db25      	blt.n	80115de <quorem+0xec>
 8011592:	4629      	mov	r1, r5
 8011594:	2000      	movs	r0, #0
 8011596:	f858 2b04 	ldr.w	r2, [r8], #4
 801159a:	f8d1 c000 	ldr.w	ip, [r1]
 801159e:	fa1f fe82 	uxth.w	lr, r2
 80115a2:	fa1f f38c 	uxth.w	r3, ip
 80115a6:	eba3 030e 	sub.w	r3, r3, lr
 80115aa:	4403      	add	r3, r0
 80115ac:	0c12      	lsrs	r2, r2, #16
 80115ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80115b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115bc:	45c1      	cmp	r9, r8
 80115be:	f841 3b04 	str.w	r3, [r1], #4
 80115c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80115c6:	d2e6      	bcs.n	8011596 <quorem+0xa4>
 80115c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115d0:	b922      	cbnz	r2, 80115dc <quorem+0xea>
 80115d2:	3b04      	subs	r3, #4
 80115d4:	429d      	cmp	r5, r3
 80115d6:	461a      	mov	r2, r3
 80115d8:	d30b      	bcc.n	80115f2 <quorem+0x100>
 80115da:	613c      	str	r4, [r7, #16]
 80115dc:	3601      	adds	r6, #1
 80115de:	4630      	mov	r0, r6
 80115e0:	b003      	add	sp, #12
 80115e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e6:	6812      	ldr	r2, [r2, #0]
 80115e8:	3b04      	subs	r3, #4
 80115ea:	2a00      	cmp	r2, #0
 80115ec:	d1cb      	bne.n	8011586 <quorem+0x94>
 80115ee:	3c01      	subs	r4, #1
 80115f0:	e7c6      	b.n	8011580 <quorem+0x8e>
 80115f2:	6812      	ldr	r2, [r2, #0]
 80115f4:	3b04      	subs	r3, #4
 80115f6:	2a00      	cmp	r2, #0
 80115f8:	d1ef      	bne.n	80115da <quorem+0xe8>
 80115fa:	3c01      	subs	r4, #1
 80115fc:	e7ea      	b.n	80115d4 <quorem+0xe2>
 80115fe:	2000      	movs	r0, #0
 8011600:	e7ee      	b.n	80115e0 <quorem+0xee>
 8011602:	0000      	movs	r0, r0
 8011604:	0000      	movs	r0, r0
	...

08011608 <_dtoa_r>:
 8011608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801160c:	69c7      	ldr	r7, [r0, #28]
 801160e:	b099      	sub	sp, #100	@ 0x64
 8011610:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011614:	ec55 4b10 	vmov	r4, r5, d0
 8011618:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801161a:	9109      	str	r1, [sp, #36]	@ 0x24
 801161c:	4683      	mov	fp, r0
 801161e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011620:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011622:	b97f      	cbnz	r7, 8011644 <_dtoa_r+0x3c>
 8011624:	2010      	movs	r0, #16
 8011626:	f7ff f843 	bl	80106b0 <malloc>
 801162a:	4602      	mov	r2, r0
 801162c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011630:	b920      	cbnz	r0, 801163c <_dtoa_r+0x34>
 8011632:	4ba7      	ldr	r3, [pc, #668]	@ (80118d0 <_dtoa_r+0x2c8>)
 8011634:	21ef      	movs	r1, #239	@ 0xef
 8011636:	48a7      	ldr	r0, [pc, #668]	@ (80118d4 <_dtoa_r+0x2cc>)
 8011638:	f001 fb7a 	bl	8012d30 <__assert_func>
 801163c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011640:	6007      	str	r7, [r0, #0]
 8011642:	60c7      	str	r7, [r0, #12]
 8011644:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011648:	6819      	ldr	r1, [r3, #0]
 801164a:	b159      	cbz	r1, 8011664 <_dtoa_r+0x5c>
 801164c:	685a      	ldr	r2, [r3, #4]
 801164e:	604a      	str	r2, [r1, #4]
 8011650:	2301      	movs	r3, #1
 8011652:	4093      	lsls	r3, r2
 8011654:	608b      	str	r3, [r1, #8]
 8011656:	4658      	mov	r0, fp
 8011658:	f000 fe24 	bl	80122a4 <_Bfree>
 801165c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011660:	2200      	movs	r2, #0
 8011662:	601a      	str	r2, [r3, #0]
 8011664:	1e2b      	subs	r3, r5, #0
 8011666:	bfb9      	ittee	lt
 8011668:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801166c:	9303      	strlt	r3, [sp, #12]
 801166e:	2300      	movge	r3, #0
 8011670:	6033      	strge	r3, [r6, #0]
 8011672:	9f03      	ldr	r7, [sp, #12]
 8011674:	4b98      	ldr	r3, [pc, #608]	@ (80118d8 <_dtoa_r+0x2d0>)
 8011676:	bfbc      	itt	lt
 8011678:	2201      	movlt	r2, #1
 801167a:	6032      	strlt	r2, [r6, #0]
 801167c:	43bb      	bics	r3, r7
 801167e:	d112      	bne.n	80116a6 <_dtoa_r+0x9e>
 8011680:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011682:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011686:	6013      	str	r3, [r2, #0]
 8011688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801168c:	4323      	orrs	r3, r4
 801168e:	f000 854d 	beq.w	801212c <_dtoa_r+0xb24>
 8011692:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011694:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80118ec <_dtoa_r+0x2e4>
 8011698:	2b00      	cmp	r3, #0
 801169a:	f000 854f 	beq.w	801213c <_dtoa_r+0xb34>
 801169e:	f10a 0303 	add.w	r3, sl, #3
 80116a2:	f000 bd49 	b.w	8012138 <_dtoa_r+0xb30>
 80116a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80116aa:	2200      	movs	r2, #0
 80116ac:	ec51 0b17 	vmov	r0, r1, d7
 80116b0:	2300      	movs	r3, #0
 80116b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80116b6:	f7ef fa17 	bl	8000ae8 <__aeabi_dcmpeq>
 80116ba:	4680      	mov	r8, r0
 80116bc:	b158      	cbz	r0, 80116d6 <_dtoa_r+0xce>
 80116be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80116c0:	2301      	movs	r3, #1
 80116c2:	6013      	str	r3, [r2, #0]
 80116c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80116c6:	b113      	cbz	r3, 80116ce <_dtoa_r+0xc6>
 80116c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80116ca:	4b84      	ldr	r3, [pc, #528]	@ (80118dc <_dtoa_r+0x2d4>)
 80116cc:	6013      	str	r3, [r2, #0]
 80116ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80118f0 <_dtoa_r+0x2e8>
 80116d2:	f000 bd33 	b.w	801213c <_dtoa_r+0xb34>
 80116d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80116da:	aa16      	add	r2, sp, #88	@ 0x58
 80116dc:	a917      	add	r1, sp, #92	@ 0x5c
 80116de:	4658      	mov	r0, fp
 80116e0:	f001 f8ca 	bl	8012878 <__d2b>
 80116e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80116e8:	4681      	mov	r9, r0
 80116ea:	2e00      	cmp	r6, #0
 80116ec:	d077      	beq.n	80117de <_dtoa_r+0x1d6>
 80116ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80116f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80116f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80116f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80116fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011700:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011704:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011708:	4619      	mov	r1, r3
 801170a:	2200      	movs	r2, #0
 801170c:	4b74      	ldr	r3, [pc, #464]	@ (80118e0 <_dtoa_r+0x2d8>)
 801170e:	f7ee fdcb 	bl	80002a8 <__aeabi_dsub>
 8011712:	a369      	add	r3, pc, #420	@ (adr r3, 80118b8 <_dtoa_r+0x2b0>)
 8011714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011718:	f7ee ff7e 	bl	8000618 <__aeabi_dmul>
 801171c:	a368      	add	r3, pc, #416	@ (adr r3, 80118c0 <_dtoa_r+0x2b8>)
 801171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011722:	f7ee fdc3 	bl	80002ac <__adddf3>
 8011726:	4604      	mov	r4, r0
 8011728:	4630      	mov	r0, r6
 801172a:	460d      	mov	r5, r1
 801172c:	f7ee ff0a 	bl	8000544 <__aeabi_i2d>
 8011730:	a365      	add	r3, pc, #404	@ (adr r3, 80118c8 <_dtoa_r+0x2c0>)
 8011732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011736:	f7ee ff6f 	bl	8000618 <__aeabi_dmul>
 801173a:	4602      	mov	r2, r0
 801173c:	460b      	mov	r3, r1
 801173e:	4620      	mov	r0, r4
 8011740:	4629      	mov	r1, r5
 8011742:	f7ee fdb3 	bl	80002ac <__adddf3>
 8011746:	4604      	mov	r4, r0
 8011748:	460d      	mov	r5, r1
 801174a:	f7ef fa15 	bl	8000b78 <__aeabi_d2iz>
 801174e:	2200      	movs	r2, #0
 8011750:	4607      	mov	r7, r0
 8011752:	2300      	movs	r3, #0
 8011754:	4620      	mov	r0, r4
 8011756:	4629      	mov	r1, r5
 8011758:	f7ef f9d0 	bl	8000afc <__aeabi_dcmplt>
 801175c:	b140      	cbz	r0, 8011770 <_dtoa_r+0x168>
 801175e:	4638      	mov	r0, r7
 8011760:	f7ee fef0 	bl	8000544 <__aeabi_i2d>
 8011764:	4622      	mov	r2, r4
 8011766:	462b      	mov	r3, r5
 8011768:	f7ef f9be 	bl	8000ae8 <__aeabi_dcmpeq>
 801176c:	b900      	cbnz	r0, 8011770 <_dtoa_r+0x168>
 801176e:	3f01      	subs	r7, #1
 8011770:	2f16      	cmp	r7, #22
 8011772:	d851      	bhi.n	8011818 <_dtoa_r+0x210>
 8011774:	4b5b      	ldr	r3, [pc, #364]	@ (80118e4 <_dtoa_r+0x2dc>)
 8011776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011782:	f7ef f9bb 	bl	8000afc <__aeabi_dcmplt>
 8011786:	2800      	cmp	r0, #0
 8011788:	d048      	beq.n	801181c <_dtoa_r+0x214>
 801178a:	3f01      	subs	r7, #1
 801178c:	2300      	movs	r3, #0
 801178e:	9312      	str	r3, [sp, #72]	@ 0x48
 8011790:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011792:	1b9b      	subs	r3, r3, r6
 8011794:	1e5a      	subs	r2, r3, #1
 8011796:	bf44      	itt	mi
 8011798:	f1c3 0801 	rsbmi	r8, r3, #1
 801179c:	2300      	movmi	r3, #0
 801179e:	9208      	str	r2, [sp, #32]
 80117a0:	bf54      	ite	pl
 80117a2:	f04f 0800 	movpl.w	r8, #0
 80117a6:	9308      	strmi	r3, [sp, #32]
 80117a8:	2f00      	cmp	r7, #0
 80117aa:	db39      	blt.n	8011820 <_dtoa_r+0x218>
 80117ac:	9b08      	ldr	r3, [sp, #32]
 80117ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80117b0:	443b      	add	r3, r7
 80117b2:	9308      	str	r3, [sp, #32]
 80117b4:	2300      	movs	r3, #0
 80117b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80117b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117ba:	2b09      	cmp	r3, #9
 80117bc:	d864      	bhi.n	8011888 <_dtoa_r+0x280>
 80117be:	2b05      	cmp	r3, #5
 80117c0:	bfc4      	itt	gt
 80117c2:	3b04      	subgt	r3, #4
 80117c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80117c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117c8:	f1a3 0302 	sub.w	r3, r3, #2
 80117cc:	bfcc      	ite	gt
 80117ce:	2400      	movgt	r4, #0
 80117d0:	2401      	movle	r4, #1
 80117d2:	2b03      	cmp	r3, #3
 80117d4:	d863      	bhi.n	801189e <_dtoa_r+0x296>
 80117d6:	e8df f003 	tbb	[pc, r3]
 80117da:	372a      	.short	0x372a
 80117dc:	5535      	.short	0x5535
 80117de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80117e2:	441e      	add	r6, r3
 80117e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80117e8:	2b20      	cmp	r3, #32
 80117ea:	bfc1      	itttt	gt
 80117ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80117f0:	409f      	lslgt	r7, r3
 80117f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80117f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80117fa:	bfd6      	itet	le
 80117fc:	f1c3 0320 	rsble	r3, r3, #32
 8011800:	ea47 0003 	orrgt.w	r0, r7, r3
 8011804:	fa04 f003 	lslle.w	r0, r4, r3
 8011808:	f7ee fe8c 	bl	8000524 <__aeabi_ui2d>
 801180c:	2201      	movs	r2, #1
 801180e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011812:	3e01      	subs	r6, #1
 8011814:	9214      	str	r2, [sp, #80]	@ 0x50
 8011816:	e777      	b.n	8011708 <_dtoa_r+0x100>
 8011818:	2301      	movs	r3, #1
 801181a:	e7b8      	b.n	801178e <_dtoa_r+0x186>
 801181c:	9012      	str	r0, [sp, #72]	@ 0x48
 801181e:	e7b7      	b.n	8011790 <_dtoa_r+0x188>
 8011820:	427b      	negs	r3, r7
 8011822:	930a      	str	r3, [sp, #40]	@ 0x28
 8011824:	2300      	movs	r3, #0
 8011826:	eba8 0807 	sub.w	r8, r8, r7
 801182a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801182c:	e7c4      	b.n	80117b8 <_dtoa_r+0x1b0>
 801182e:	2300      	movs	r3, #0
 8011830:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011834:	2b00      	cmp	r3, #0
 8011836:	dc35      	bgt.n	80118a4 <_dtoa_r+0x29c>
 8011838:	2301      	movs	r3, #1
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	9307      	str	r3, [sp, #28]
 801183e:	461a      	mov	r2, r3
 8011840:	920e      	str	r2, [sp, #56]	@ 0x38
 8011842:	e00b      	b.n	801185c <_dtoa_r+0x254>
 8011844:	2301      	movs	r3, #1
 8011846:	e7f3      	b.n	8011830 <_dtoa_r+0x228>
 8011848:	2300      	movs	r3, #0
 801184a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801184c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801184e:	18fb      	adds	r3, r7, r3
 8011850:	9300      	str	r3, [sp, #0]
 8011852:	3301      	adds	r3, #1
 8011854:	2b01      	cmp	r3, #1
 8011856:	9307      	str	r3, [sp, #28]
 8011858:	bfb8      	it	lt
 801185a:	2301      	movlt	r3, #1
 801185c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011860:	2100      	movs	r1, #0
 8011862:	2204      	movs	r2, #4
 8011864:	f102 0514 	add.w	r5, r2, #20
 8011868:	429d      	cmp	r5, r3
 801186a:	d91f      	bls.n	80118ac <_dtoa_r+0x2a4>
 801186c:	6041      	str	r1, [r0, #4]
 801186e:	4658      	mov	r0, fp
 8011870:	f000 fcd8 	bl	8012224 <_Balloc>
 8011874:	4682      	mov	sl, r0
 8011876:	2800      	cmp	r0, #0
 8011878:	d13c      	bne.n	80118f4 <_dtoa_r+0x2ec>
 801187a:	4b1b      	ldr	r3, [pc, #108]	@ (80118e8 <_dtoa_r+0x2e0>)
 801187c:	4602      	mov	r2, r0
 801187e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011882:	e6d8      	b.n	8011636 <_dtoa_r+0x2e>
 8011884:	2301      	movs	r3, #1
 8011886:	e7e0      	b.n	801184a <_dtoa_r+0x242>
 8011888:	2401      	movs	r4, #1
 801188a:	2300      	movs	r3, #0
 801188c:	9309      	str	r3, [sp, #36]	@ 0x24
 801188e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011890:	f04f 33ff 	mov.w	r3, #4294967295
 8011894:	9300      	str	r3, [sp, #0]
 8011896:	9307      	str	r3, [sp, #28]
 8011898:	2200      	movs	r2, #0
 801189a:	2312      	movs	r3, #18
 801189c:	e7d0      	b.n	8011840 <_dtoa_r+0x238>
 801189e:	2301      	movs	r3, #1
 80118a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80118a2:	e7f5      	b.n	8011890 <_dtoa_r+0x288>
 80118a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118a6:	9300      	str	r3, [sp, #0]
 80118a8:	9307      	str	r3, [sp, #28]
 80118aa:	e7d7      	b.n	801185c <_dtoa_r+0x254>
 80118ac:	3101      	adds	r1, #1
 80118ae:	0052      	lsls	r2, r2, #1
 80118b0:	e7d8      	b.n	8011864 <_dtoa_r+0x25c>
 80118b2:	bf00      	nop
 80118b4:	f3af 8000 	nop.w
 80118b8:	636f4361 	.word	0x636f4361
 80118bc:	3fd287a7 	.word	0x3fd287a7
 80118c0:	8b60c8b3 	.word	0x8b60c8b3
 80118c4:	3fc68a28 	.word	0x3fc68a28
 80118c8:	509f79fb 	.word	0x509f79fb
 80118cc:	3fd34413 	.word	0x3fd34413
 80118d0:	080159a5 	.word	0x080159a5
 80118d4:	080159bc 	.word	0x080159bc
 80118d8:	7ff00000 	.word	0x7ff00000
 80118dc:	08015975 	.word	0x08015975
 80118e0:	3ff80000 	.word	0x3ff80000
 80118e4:	08015ab8 	.word	0x08015ab8
 80118e8:	08015a14 	.word	0x08015a14
 80118ec:	080159a1 	.word	0x080159a1
 80118f0:	08015974 	.word	0x08015974
 80118f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80118f8:	6018      	str	r0, [r3, #0]
 80118fa:	9b07      	ldr	r3, [sp, #28]
 80118fc:	2b0e      	cmp	r3, #14
 80118fe:	f200 80a4 	bhi.w	8011a4a <_dtoa_r+0x442>
 8011902:	2c00      	cmp	r4, #0
 8011904:	f000 80a1 	beq.w	8011a4a <_dtoa_r+0x442>
 8011908:	2f00      	cmp	r7, #0
 801190a:	dd33      	ble.n	8011974 <_dtoa_r+0x36c>
 801190c:	4bad      	ldr	r3, [pc, #692]	@ (8011bc4 <_dtoa_r+0x5bc>)
 801190e:	f007 020f 	and.w	r2, r7, #15
 8011912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011916:	ed93 7b00 	vldr	d7, [r3]
 801191a:	05f8      	lsls	r0, r7, #23
 801191c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011920:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011924:	d516      	bpl.n	8011954 <_dtoa_r+0x34c>
 8011926:	4ba8      	ldr	r3, [pc, #672]	@ (8011bc8 <_dtoa_r+0x5c0>)
 8011928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801192c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011930:	f7ee ff9c 	bl	800086c <__aeabi_ddiv>
 8011934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011938:	f004 040f 	and.w	r4, r4, #15
 801193c:	2603      	movs	r6, #3
 801193e:	4da2      	ldr	r5, [pc, #648]	@ (8011bc8 <_dtoa_r+0x5c0>)
 8011940:	b954      	cbnz	r4, 8011958 <_dtoa_r+0x350>
 8011942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801194a:	f7ee ff8f 	bl	800086c <__aeabi_ddiv>
 801194e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011952:	e028      	b.n	80119a6 <_dtoa_r+0x39e>
 8011954:	2602      	movs	r6, #2
 8011956:	e7f2      	b.n	801193e <_dtoa_r+0x336>
 8011958:	07e1      	lsls	r1, r4, #31
 801195a:	d508      	bpl.n	801196e <_dtoa_r+0x366>
 801195c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011960:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011964:	f7ee fe58 	bl	8000618 <__aeabi_dmul>
 8011968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801196c:	3601      	adds	r6, #1
 801196e:	1064      	asrs	r4, r4, #1
 8011970:	3508      	adds	r5, #8
 8011972:	e7e5      	b.n	8011940 <_dtoa_r+0x338>
 8011974:	f000 80d2 	beq.w	8011b1c <_dtoa_r+0x514>
 8011978:	427c      	negs	r4, r7
 801197a:	4b92      	ldr	r3, [pc, #584]	@ (8011bc4 <_dtoa_r+0x5bc>)
 801197c:	4d92      	ldr	r5, [pc, #584]	@ (8011bc8 <_dtoa_r+0x5c0>)
 801197e:	f004 020f 	and.w	r2, r4, #15
 8011982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801198e:	f7ee fe43 	bl	8000618 <__aeabi_dmul>
 8011992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011996:	1124      	asrs	r4, r4, #4
 8011998:	2300      	movs	r3, #0
 801199a:	2602      	movs	r6, #2
 801199c:	2c00      	cmp	r4, #0
 801199e:	f040 80b2 	bne.w	8011b06 <_dtoa_r+0x4fe>
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d1d3      	bne.n	801194e <_dtoa_r+0x346>
 80119a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80119a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	f000 80b7 	beq.w	8011b20 <_dtoa_r+0x518>
 80119b2:	4b86      	ldr	r3, [pc, #536]	@ (8011bcc <_dtoa_r+0x5c4>)
 80119b4:	2200      	movs	r2, #0
 80119b6:	4620      	mov	r0, r4
 80119b8:	4629      	mov	r1, r5
 80119ba:	f7ef f89f 	bl	8000afc <__aeabi_dcmplt>
 80119be:	2800      	cmp	r0, #0
 80119c0:	f000 80ae 	beq.w	8011b20 <_dtoa_r+0x518>
 80119c4:	9b07      	ldr	r3, [sp, #28]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	f000 80aa 	beq.w	8011b20 <_dtoa_r+0x518>
 80119cc:	9b00      	ldr	r3, [sp, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	dd37      	ble.n	8011a42 <_dtoa_r+0x43a>
 80119d2:	1e7b      	subs	r3, r7, #1
 80119d4:	9304      	str	r3, [sp, #16]
 80119d6:	4620      	mov	r0, r4
 80119d8:	4b7d      	ldr	r3, [pc, #500]	@ (8011bd0 <_dtoa_r+0x5c8>)
 80119da:	2200      	movs	r2, #0
 80119dc:	4629      	mov	r1, r5
 80119de:	f7ee fe1b 	bl	8000618 <__aeabi_dmul>
 80119e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119e6:	9c00      	ldr	r4, [sp, #0]
 80119e8:	3601      	adds	r6, #1
 80119ea:	4630      	mov	r0, r6
 80119ec:	f7ee fdaa 	bl	8000544 <__aeabi_i2d>
 80119f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119f4:	f7ee fe10 	bl	8000618 <__aeabi_dmul>
 80119f8:	4b76      	ldr	r3, [pc, #472]	@ (8011bd4 <_dtoa_r+0x5cc>)
 80119fa:	2200      	movs	r2, #0
 80119fc:	f7ee fc56 	bl	80002ac <__adddf3>
 8011a00:	4605      	mov	r5, r0
 8011a02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011a06:	2c00      	cmp	r4, #0
 8011a08:	f040 808d 	bne.w	8011b26 <_dtoa_r+0x51e>
 8011a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a10:	4b71      	ldr	r3, [pc, #452]	@ (8011bd8 <_dtoa_r+0x5d0>)
 8011a12:	2200      	movs	r2, #0
 8011a14:	f7ee fc48 	bl	80002a8 <__aeabi_dsub>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a20:	462a      	mov	r2, r5
 8011a22:	4633      	mov	r3, r6
 8011a24:	f7ef f888 	bl	8000b38 <__aeabi_dcmpgt>
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	f040 828b 	bne.w	8011f44 <_dtoa_r+0x93c>
 8011a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a32:	462a      	mov	r2, r5
 8011a34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011a38:	f7ef f860 	bl	8000afc <__aeabi_dcmplt>
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	f040 8128 	bne.w	8011c92 <_dtoa_r+0x68a>
 8011a42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011a46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011a4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	f2c0 815a 	blt.w	8011d06 <_dtoa_r+0x6fe>
 8011a52:	2f0e      	cmp	r7, #14
 8011a54:	f300 8157 	bgt.w	8011d06 <_dtoa_r+0x6fe>
 8011a58:	4b5a      	ldr	r3, [pc, #360]	@ (8011bc4 <_dtoa_r+0x5bc>)
 8011a5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011a5e:	ed93 7b00 	vldr	d7, [r3]
 8011a62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	ed8d 7b00 	vstr	d7, [sp]
 8011a6a:	da03      	bge.n	8011a74 <_dtoa_r+0x46c>
 8011a6c:	9b07      	ldr	r3, [sp, #28]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	f340 8101 	ble.w	8011c76 <_dtoa_r+0x66e>
 8011a74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011a78:	4656      	mov	r6, sl
 8011a7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a7e:	4620      	mov	r0, r4
 8011a80:	4629      	mov	r1, r5
 8011a82:	f7ee fef3 	bl	800086c <__aeabi_ddiv>
 8011a86:	f7ef f877 	bl	8000b78 <__aeabi_d2iz>
 8011a8a:	4680      	mov	r8, r0
 8011a8c:	f7ee fd5a 	bl	8000544 <__aeabi_i2d>
 8011a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a94:	f7ee fdc0 	bl	8000618 <__aeabi_dmul>
 8011a98:	4602      	mov	r2, r0
 8011a9a:	460b      	mov	r3, r1
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	4629      	mov	r1, r5
 8011aa0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011aa4:	f7ee fc00 	bl	80002a8 <__aeabi_dsub>
 8011aa8:	f806 4b01 	strb.w	r4, [r6], #1
 8011aac:	9d07      	ldr	r5, [sp, #28]
 8011aae:	eba6 040a 	sub.w	r4, r6, sl
 8011ab2:	42a5      	cmp	r5, r4
 8011ab4:	4602      	mov	r2, r0
 8011ab6:	460b      	mov	r3, r1
 8011ab8:	f040 8117 	bne.w	8011cea <_dtoa_r+0x6e2>
 8011abc:	f7ee fbf6 	bl	80002ac <__adddf3>
 8011ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ac4:	4604      	mov	r4, r0
 8011ac6:	460d      	mov	r5, r1
 8011ac8:	f7ef f836 	bl	8000b38 <__aeabi_dcmpgt>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	f040 80f9 	bne.w	8011cc4 <_dtoa_r+0x6bc>
 8011ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	4629      	mov	r1, r5
 8011ada:	f7ef f805 	bl	8000ae8 <__aeabi_dcmpeq>
 8011ade:	b118      	cbz	r0, 8011ae8 <_dtoa_r+0x4e0>
 8011ae0:	f018 0f01 	tst.w	r8, #1
 8011ae4:	f040 80ee 	bne.w	8011cc4 <_dtoa_r+0x6bc>
 8011ae8:	4649      	mov	r1, r9
 8011aea:	4658      	mov	r0, fp
 8011aec:	f000 fbda 	bl	80122a4 <_Bfree>
 8011af0:	2300      	movs	r3, #0
 8011af2:	7033      	strb	r3, [r6, #0]
 8011af4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011af6:	3701      	adds	r7, #1
 8011af8:	601f      	str	r7, [r3, #0]
 8011afa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	f000 831d 	beq.w	801213c <_dtoa_r+0xb34>
 8011b02:	601e      	str	r6, [r3, #0]
 8011b04:	e31a      	b.n	801213c <_dtoa_r+0xb34>
 8011b06:	07e2      	lsls	r2, r4, #31
 8011b08:	d505      	bpl.n	8011b16 <_dtoa_r+0x50e>
 8011b0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011b0e:	f7ee fd83 	bl	8000618 <__aeabi_dmul>
 8011b12:	3601      	adds	r6, #1
 8011b14:	2301      	movs	r3, #1
 8011b16:	1064      	asrs	r4, r4, #1
 8011b18:	3508      	adds	r5, #8
 8011b1a:	e73f      	b.n	801199c <_dtoa_r+0x394>
 8011b1c:	2602      	movs	r6, #2
 8011b1e:	e742      	b.n	80119a6 <_dtoa_r+0x39e>
 8011b20:	9c07      	ldr	r4, [sp, #28]
 8011b22:	9704      	str	r7, [sp, #16]
 8011b24:	e761      	b.n	80119ea <_dtoa_r+0x3e2>
 8011b26:	4b27      	ldr	r3, [pc, #156]	@ (8011bc4 <_dtoa_r+0x5bc>)
 8011b28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011b2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011b32:	4454      	add	r4, sl
 8011b34:	2900      	cmp	r1, #0
 8011b36:	d053      	beq.n	8011be0 <_dtoa_r+0x5d8>
 8011b38:	4928      	ldr	r1, [pc, #160]	@ (8011bdc <_dtoa_r+0x5d4>)
 8011b3a:	2000      	movs	r0, #0
 8011b3c:	f7ee fe96 	bl	800086c <__aeabi_ddiv>
 8011b40:	4633      	mov	r3, r6
 8011b42:	462a      	mov	r2, r5
 8011b44:	f7ee fbb0 	bl	80002a8 <__aeabi_dsub>
 8011b48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011b4c:	4656      	mov	r6, sl
 8011b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b52:	f7ef f811 	bl	8000b78 <__aeabi_d2iz>
 8011b56:	4605      	mov	r5, r0
 8011b58:	f7ee fcf4 	bl	8000544 <__aeabi_i2d>
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	460b      	mov	r3, r1
 8011b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b64:	f7ee fba0 	bl	80002a8 <__aeabi_dsub>
 8011b68:	3530      	adds	r5, #48	@ 0x30
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	460b      	mov	r3, r1
 8011b6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011b72:	f806 5b01 	strb.w	r5, [r6], #1
 8011b76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011b7a:	f7ee ffbf 	bl	8000afc <__aeabi_dcmplt>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d171      	bne.n	8011c66 <_dtoa_r+0x65e>
 8011b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011b86:	4911      	ldr	r1, [pc, #68]	@ (8011bcc <_dtoa_r+0x5c4>)
 8011b88:	2000      	movs	r0, #0
 8011b8a:	f7ee fb8d 	bl	80002a8 <__aeabi_dsub>
 8011b8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011b92:	f7ee ffb3 	bl	8000afc <__aeabi_dcmplt>
 8011b96:	2800      	cmp	r0, #0
 8011b98:	f040 8095 	bne.w	8011cc6 <_dtoa_r+0x6be>
 8011b9c:	42a6      	cmp	r6, r4
 8011b9e:	f43f af50 	beq.w	8011a42 <_dtoa_r+0x43a>
 8011ba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8011bd0 <_dtoa_r+0x5c8>)
 8011ba8:	2200      	movs	r2, #0
 8011baa:	f7ee fd35 	bl	8000618 <__aeabi_dmul>
 8011bae:	4b08      	ldr	r3, [pc, #32]	@ (8011bd0 <_dtoa_r+0x5c8>)
 8011bb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bba:	f7ee fd2d 	bl	8000618 <__aeabi_dmul>
 8011bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bc2:	e7c4      	b.n	8011b4e <_dtoa_r+0x546>
 8011bc4:	08015ab8 	.word	0x08015ab8
 8011bc8:	08015a90 	.word	0x08015a90
 8011bcc:	3ff00000 	.word	0x3ff00000
 8011bd0:	40240000 	.word	0x40240000
 8011bd4:	401c0000 	.word	0x401c0000
 8011bd8:	40140000 	.word	0x40140000
 8011bdc:	3fe00000 	.word	0x3fe00000
 8011be0:	4631      	mov	r1, r6
 8011be2:	4628      	mov	r0, r5
 8011be4:	f7ee fd18 	bl	8000618 <__aeabi_dmul>
 8011be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011bec:	9415      	str	r4, [sp, #84]	@ 0x54
 8011bee:	4656      	mov	r6, sl
 8011bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bf4:	f7ee ffc0 	bl	8000b78 <__aeabi_d2iz>
 8011bf8:	4605      	mov	r5, r0
 8011bfa:	f7ee fca3 	bl	8000544 <__aeabi_i2d>
 8011bfe:	4602      	mov	r2, r0
 8011c00:	460b      	mov	r3, r1
 8011c02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c06:	f7ee fb4f 	bl	80002a8 <__aeabi_dsub>
 8011c0a:	3530      	adds	r5, #48	@ 0x30
 8011c0c:	f806 5b01 	strb.w	r5, [r6], #1
 8011c10:	4602      	mov	r2, r0
 8011c12:	460b      	mov	r3, r1
 8011c14:	42a6      	cmp	r6, r4
 8011c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011c1a:	f04f 0200 	mov.w	r2, #0
 8011c1e:	d124      	bne.n	8011c6a <_dtoa_r+0x662>
 8011c20:	4bac      	ldr	r3, [pc, #688]	@ (8011ed4 <_dtoa_r+0x8cc>)
 8011c22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011c26:	f7ee fb41 	bl	80002ac <__adddf3>
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c32:	f7ee ff81 	bl	8000b38 <__aeabi_dcmpgt>
 8011c36:	2800      	cmp	r0, #0
 8011c38:	d145      	bne.n	8011cc6 <_dtoa_r+0x6be>
 8011c3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011c3e:	49a5      	ldr	r1, [pc, #660]	@ (8011ed4 <_dtoa_r+0x8cc>)
 8011c40:	2000      	movs	r0, #0
 8011c42:	f7ee fb31 	bl	80002a8 <__aeabi_dsub>
 8011c46:	4602      	mov	r2, r0
 8011c48:	460b      	mov	r3, r1
 8011c4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c4e:	f7ee ff55 	bl	8000afc <__aeabi_dcmplt>
 8011c52:	2800      	cmp	r0, #0
 8011c54:	f43f aef5 	beq.w	8011a42 <_dtoa_r+0x43a>
 8011c58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011c5a:	1e73      	subs	r3, r6, #1
 8011c5c:	9315      	str	r3, [sp, #84]	@ 0x54
 8011c5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011c62:	2b30      	cmp	r3, #48	@ 0x30
 8011c64:	d0f8      	beq.n	8011c58 <_dtoa_r+0x650>
 8011c66:	9f04      	ldr	r7, [sp, #16]
 8011c68:	e73e      	b.n	8011ae8 <_dtoa_r+0x4e0>
 8011c6a:	4b9b      	ldr	r3, [pc, #620]	@ (8011ed8 <_dtoa_r+0x8d0>)
 8011c6c:	f7ee fcd4 	bl	8000618 <__aeabi_dmul>
 8011c70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c74:	e7bc      	b.n	8011bf0 <_dtoa_r+0x5e8>
 8011c76:	d10c      	bne.n	8011c92 <_dtoa_r+0x68a>
 8011c78:	4b98      	ldr	r3, [pc, #608]	@ (8011edc <_dtoa_r+0x8d4>)
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c80:	f7ee fcca 	bl	8000618 <__aeabi_dmul>
 8011c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c88:	f7ee ff4c 	bl	8000b24 <__aeabi_dcmpge>
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	f000 8157 	beq.w	8011f40 <_dtoa_r+0x938>
 8011c92:	2400      	movs	r4, #0
 8011c94:	4625      	mov	r5, r4
 8011c96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c98:	43db      	mvns	r3, r3
 8011c9a:	9304      	str	r3, [sp, #16]
 8011c9c:	4656      	mov	r6, sl
 8011c9e:	2700      	movs	r7, #0
 8011ca0:	4621      	mov	r1, r4
 8011ca2:	4658      	mov	r0, fp
 8011ca4:	f000 fafe 	bl	80122a4 <_Bfree>
 8011ca8:	2d00      	cmp	r5, #0
 8011caa:	d0dc      	beq.n	8011c66 <_dtoa_r+0x65e>
 8011cac:	b12f      	cbz	r7, 8011cba <_dtoa_r+0x6b2>
 8011cae:	42af      	cmp	r7, r5
 8011cb0:	d003      	beq.n	8011cba <_dtoa_r+0x6b2>
 8011cb2:	4639      	mov	r1, r7
 8011cb4:	4658      	mov	r0, fp
 8011cb6:	f000 faf5 	bl	80122a4 <_Bfree>
 8011cba:	4629      	mov	r1, r5
 8011cbc:	4658      	mov	r0, fp
 8011cbe:	f000 faf1 	bl	80122a4 <_Bfree>
 8011cc2:	e7d0      	b.n	8011c66 <_dtoa_r+0x65e>
 8011cc4:	9704      	str	r7, [sp, #16]
 8011cc6:	4633      	mov	r3, r6
 8011cc8:	461e      	mov	r6, r3
 8011cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cce:	2a39      	cmp	r2, #57	@ 0x39
 8011cd0:	d107      	bne.n	8011ce2 <_dtoa_r+0x6da>
 8011cd2:	459a      	cmp	sl, r3
 8011cd4:	d1f8      	bne.n	8011cc8 <_dtoa_r+0x6c0>
 8011cd6:	9a04      	ldr	r2, [sp, #16]
 8011cd8:	3201      	adds	r2, #1
 8011cda:	9204      	str	r2, [sp, #16]
 8011cdc:	2230      	movs	r2, #48	@ 0x30
 8011cde:	f88a 2000 	strb.w	r2, [sl]
 8011ce2:	781a      	ldrb	r2, [r3, #0]
 8011ce4:	3201      	adds	r2, #1
 8011ce6:	701a      	strb	r2, [r3, #0]
 8011ce8:	e7bd      	b.n	8011c66 <_dtoa_r+0x65e>
 8011cea:	4b7b      	ldr	r3, [pc, #492]	@ (8011ed8 <_dtoa_r+0x8d0>)
 8011cec:	2200      	movs	r2, #0
 8011cee:	f7ee fc93 	bl	8000618 <__aeabi_dmul>
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	460d      	mov	r5, r1
 8011cfa:	f7ee fef5 	bl	8000ae8 <__aeabi_dcmpeq>
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	f43f aebb 	beq.w	8011a7a <_dtoa_r+0x472>
 8011d04:	e6f0      	b.n	8011ae8 <_dtoa_r+0x4e0>
 8011d06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011d08:	2a00      	cmp	r2, #0
 8011d0a:	f000 80db 	beq.w	8011ec4 <_dtoa_r+0x8bc>
 8011d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d10:	2a01      	cmp	r2, #1
 8011d12:	f300 80bf 	bgt.w	8011e94 <_dtoa_r+0x88c>
 8011d16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011d18:	2a00      	cmp	r2, #0
 8011d1a:	f000 80b7 	beq.w	8011e8c <_dtoa_r+0x884>
 8011d1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011d22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011d24:	4646      	mov	r6, r8
 8011d26:	9a08      	ldr	r2, [sp, #32]
 8011d28:	2101      	movs	r1, #1
 8011d2a:	441a      	add	r2, r3
 8011d2c:	4658      	mov	r0, fp
 8011d2e:	4498      	add	r8, r3
 8011d30:	9208      	str	r2, [sp, #32]
 8011d32:	f000 fb6b 	bl	801240c <__i2b>
 8011d36:	4605      	mov	r5, r0
 8011d38:	b15e      	cbz	r6, 8011d52 <_dtoa_r+0x74a>
 8011d3a:	9b08      	ldr	r3, [sp, #32]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	dd08      	ble.n	8011d52 <_dtoa_r+0x74a>
 8011d40:	42b3      	cmp	r3, r6
 8011d42:	9a08      	ldr	r2, [sp, #32]
 8011d44:	bfa8      	it	ge
 8011d46:	4633      	movge	r3, r6
 8011d48:	eba8 0803 	sub.w	r8, r8, r3
 8011d4c:	1af6      	subs	r6, r6, r3
 8011d4e:	1ad3      	subs	r3, r2, r3
 8011d50:	9308      	str	r3, [sp, #32]
 8011d52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d54:	b1f3      	cbz	r3, 8011d94 <_dtoa_r+0x78c>
 8011d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	f000 80b7 	beq.w	8011ecc <_dtoa_r+0x8c4>
 8011d5e:	b18c      	cbz	r4, 8011d84 <_dtoa_r+0x77c>
 8011d60:	4629      	mov	r1, r5
 8011d62:	4622      	mov	r2, r4
 8011d64:	4658      	mov	r0, fp
 8011d66:	f000 fc11 	bl	801258c <__pow5mult>
 8011d6a:	464a      	mov	r2, r9
 8011d6c:	4601      	mov	r1, r0
 8011d6e:	4605      	mov	r5, r0
 8011d70:	4658      	mov	r0, fp
 8011d72:	f000 fb61 	bl	8012438 <__multiply>
 8011d76:	4649      	mov	r1, r9
 8011d78:	9004      	str	r0, [sp, #16]
 8011d7a:	4658      	mov	r0, fp
 8011d7c:	f000 fa92 	bl	80122a4 <_Bfree>
 8011d80:	9b04      	ldr	r3, [sp, #16]
 8011d82:	4699      	mov	r9, r3
 8011d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d86:	1b1a      	subs	r2, r3, r4
 8011d88:	d004      	beq.n	8011d94 <_dtoa_r+0x78c>
 8011d8a:	4649      	mov	r1, r9
 8011d8c:	4658      	mov	r0, fp
 8011d8e:	f000 fbfd 	bl	801258c <__pow5mult>
 8011d92:	4681      	mov	r9, r0
 8011d94:	2101      	movs	r1, #1
 8011d96:	4658      	mov	r0, fp
 8011d98:	f000 fb38 	bl	801240c <__i2b>
 8011d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d9e:	4604      	mov	r4, r0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	f000 81cf 	beq.w	8012144 <_dtoa_r+0xb3c>
 8011da6:	461a      	mov	r2, r3
 8011da8:	4601      	mov	r1, r0
 8011daa:	4658      	mov	r0, fp
 8011dac:	f000 fbee 	bl	801258c <__pow5mult>
 8011db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011db2:	2b01      	cmp	r3, #1
 8011db4:	4604      	mov	r4, r0
 8011db6:	f300 8095 	bgt.w	8011ee4 <_dtoa_r+0x8dc>
 8011dba:	9b02      	ldr	r3, [sp, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	f040 8087 	bne.w	8011ed0 <_dtoa_r+0x8c8>
 8011dc2:	9b03      	ldr	r3, [sp, #12]
 8011dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	f040 8089 	bne.w	8011ee0 <_dtoa_r+0x8d8>
 8011dce:	9b03      	ldr	r3, [sp, #12]
 8011dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011dd4:	0d1b      	lsrs	r3, r3, #20
 8011dd6:	051b      	lsls	r3, r3, #20
 8011dd8:	b12b      	cbz	r3, 8011de6 <_dtoa_r+0x7de>
 8011dda:	9b08      	ldr	r3, [sp, #32]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	9308      	str	r3, [sp, #32]
 8011de0:	f108 0801 	add.w	r8, r8, #1
 8011de4:	2301      	movs	r3, #1
 8011de6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011de8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	f000 81b0 	beq.w	8012150 <_dtoa_r+0xb48>
 8011df0:	6923      	ldr	r3, [r4, #16]
 8011df2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011df6:	6918      	ldr	r0, [r3, #16]
 8011df8:	f000 fabc 	bl	8012374 <__hi0bits>
 8011dfc:	f1c0 0020 	rsb	r0, r0, #32
 8011e00:	9b08      	ldr	r3, [sp, #32]
 8011e02:	4418      	add	r0, r3
 8011e04:	f010 001f 	ands.w	r0, r0, #31
 8011e08:	d077      	beq.n	8011efa <_dtoa_r+0x8f2>
 8011e0a:	f1c0 0320 	rsb	r3, r0, #32
 8011e0e:	2b04      	cmp	r3, #4
 8011e10:	dd6b      	ble.n	8011eea <_dtoa_r+0x8e2>
 8011e12:	9b08      	ldr	r3, [sp, #32]
 8011e14:	f1c0 001c 	rsb	r0, r0, #28
 8011e18:	4403      	add	r3, r0
 8011e1a:	4480      	add	r8, r0
 8011e1c:	4406      	add	r6, r0
 8011e1e:	9308      	str	r3, [sp, #32]
 8011e20:	f1b8 0f00 	cmp.w	r8, #0
 8011e24:	dd05      	ble.n	8011e32 <_dtoa_r+0x82a>
 8011e26:	4649      	mov	r1, r9
 8011e28:	4642      	mov	r2, r8
 8011e2a:	4658      	mov	r0, fp
 8011e2c:	f000 fc08 	bl	8012640 <__lshift>
 8011e30:	4681      	mov	r9, r0
 8011e32:	9b08      	ldr	r3, [sp, #32]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	dd05      	ble.n	8011e44 <_dtoa_r+0x83c>
 8011e38:	4621      	mov	r1, r4
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	4658      	mov	r0, fp
 8011e3e:	f000 fbff 	bl	8012640 <__lshift>
 8011e42:	4604      	mov	r4, r0
 8011e44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d059      	beq.n	8011efe <_dtoa_r+0x8f6>
 8011e4a:	4621      	mov	r1, r4
 8011e4c:	4648      	mov	r0, r9
 8011e4e:	f000 fc63 	bl	8012718 <__mcmp>
 8011e52:	2800      	cmp	r0, #0
 8011e54:	da53      	bge.n	8011efe <_dtoa_r+0x8f6>
 8011e56:	1e7b      	subs	r3, r7, #1
 8011e58:	9304      	str	r3, [sp, #16]
 8011e5a:	4649      	mov	r1, r9
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	220a      	movs	r2, #10
 8011e60:	4658      	mov	r0, fp
 8011e62:	f000 fa41 	bl	80122e8 <__multadd>
 8011e66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e68:	4681      	mov	r9, r0
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f000 8172 	beq.w	8012154 <_dtoa_r+0xb4c>
 8011e70:	2300      	movs	r3, #0
 8011e72:	4629      	mov	r1, r5
 8011e74:	220a      	movs	r2, #10
 8011e76:	4658      	mov	r0, fp
 8011e78:	f000 fa36 	bl	80122e8 <__multadd>
 8011e7c:	9b00      	ldr	r3, [sp, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	4605      	mov	r5, r0
 8011e82:	dc67      	bgt.n	8011f54 <_dtoa_r+0x94c>
 8011e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e86:	2b02      	cmp	r3, #2
 8011e88:	dc41      	bgt.n	8011f0e <_dtoa_r+0x906>
 8011e8a:	e063      	b.n	8011f54 <_dtoa_r+0x94c>
 8011e8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011e8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011e92:	e746      	b.n	8011d22 <_dtoa_r+0x71a>
 8011e94:	9b07      	ldr	r3, [sp, #28]
 8011e96:	1e5c      	subs	r4, r3, #1
 8011e98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e9a:	42a3      	cmp	r3, r4
 8011e9c:	bfbf      	itttt	lt
 8011e9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011ea0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011ea2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011ea4:	1ae3      	sublt	r3, r4, r3
 8011ea6:	bfb4      	ite	lt
 8011ea8:	18d2      	addlt	r2, r2, r3
 8011eaa:	1b1c      	subge	r4, r3, r4
 8011eac:	9b07      	ldr	r3, [sp, #28]
 8011eae:	bfbc      	itt	lt
 8011eb0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011eb2:	2400      	movlt	r4, #0
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	bfb5      	itete	lt
 8011eb8:	eba8 0603 	sublt.w	r6, r8, r3
 8011ebc:	9b07      	ldrge	r3, [sp, #28]
 8011ebe:	2300      	movlt	r3, #0
 8011ec0:	4646      	movge	r6, r8
 8011ec2:	e730      	b.n	8011d26 <_dtoa_r+0x71e>
 8011ec4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011ec6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011ec8:	4646      	mov	r6, r8
 8011eca:	e735      	b.n	8011d38 <_dtoa_r+0x730>
 8011ecc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ece:	e75c      	b.n	8011d8a <_dtoa_r+0x782>
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	e788      	b.n	8011de6 <_dtoa_r+0x7de>
 8011ed4:	3fe00000 	.word	0x3fe00000
 8011ed8:	40240000 	.word	0x40240000
 8011edc:	40140000 	.word	0x40140000
 8011ee0:	9b02      	ldr	r3, [sp, #8]
 8011ee2:	e780      	b.n	8011de6 <_dtoa_r+0x7de>
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ee8:	e782      	b.n	8011df0 <_dtoa_r+0x7e8>
 8011eea:	d099      	beq.n	8011e20 <_dtoa_r+0x818>
 8011eec:	9a08      	ldr	r2, [sp, #32]
 8011eee:	331c      	adds	r3, #28
 8011ef0:	441a      	add	r2, r3
 8011ef2:	4498      	add	r8, r3
 8011ef4:	441e      	add	r6, r3
 8011ef6:	9208      	str	r2, [sp, #32]
 8011ef8:	e792      	b.n	8011e20 <_dtoa_r+0x818>
 8011efa:	4603      	mov	r3, r0
 8011efc:	e7f6      	b.n	8011eec <_dtoa_r+0x8e4>
 8011efe:	9b07      	ldr	r3, [sp, #28]
 8011f00:	9704      	str	r7, [sp, #16]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	dc20      	bgt.n	8011f48 <_dtoa_r+0x940>
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f0a:	2b02      	cmp	r3, #2
 8011f0c:	dd1e      	ble.n	8011f4c <_dtoa_r+0x944>
 8011f0e:	9b00      	ldr	r3, [sp, #0]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	f47f aec0 	bne.w	8011c96 <_dtoa_r+0x68e>
 8011f16:	4621      	mov	r1, r4
 8011f18:	2205      	movs	r2, #5
 8011f1a:	4658      	mov	r0, fp
 8011f1c:	f000 f9e4 	bl	80122e8 <__multadd>
 8011f20:	4601      	mov	r1, r0
 8011f22:	4604      	mov	r4, r0
 8011f24:	4648      	mov	r0, r9
 8011f26:	f000 fbf7 	bl	8012718 <__mcmp>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	f77f aeb3 	ble.w	8011c96 <_dtoa_r+0x68e>
 8011f30:	4656      	mov	r6, sl
 8011f32:	2331      	movs	r3, #49	@ 0x31
 8011f34:	f806 3b01 	strb.w	r3, [r6], #1
 8011f38:	9b04      	ldr	r3, [sp, #16]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	9304      	str	r3, [sp, #16]
 8011f3e:	e6ae      	b.n	8011c9e <_dtoa_r+0x696>
 8011f40:	9c07      	ldr	r4, [sp, #28]
 8011f42:	9704      	str	r7, [sp, #16]
 8011f44:	4625      	mov	r5, r4
 8011f46:	e7f3      	b.n	8011f30 <_dtoa_r+0x928>
 8011f48:	9b07      	ldr	r3, [sp, #28]
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	f000 8104 	beq.w	801215c <_dtoa_r+0xb54>
 8011f54:	2e00      	cmp	r6, #0
 8011f56:	dd05      	ble.n	8011f64 <_dtoa_r+0x95c>
 8011f58:	4629      	mov	r1, r5
 8011f5a:	4632      	mov	r2, r6
 8011f5c:	4658      	mov	r0, fp
 8011f5e:	f000 fb6f 	bl	8012640 <__lshift>
 8011f62:	4605      	mov	r5, r0
 8011f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d05a      	beq.n	8012020 <_dtoa_r+0xa18>
 8011f6a:	6869      	ldr	r1, [r5, #4]
 8011f6c:	4658      	mov	r0, fp
 8011f6e:	f000 f959 	bl	8012224 <_Balloc>
 8011f72:	4606      	mov	r6, r0
 8011f74:	b928      	cbnz	r0, 8011f82 <_dtoa_r+0x97a>
 8011f76:	4b84      	ldr	r3, [pc, #528]	@ (8012188 <_dtoa_r+0xb80>)
 8011f78:	4602      	mov	r2, r0
 8011f7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011f7e:	f7ff bb5a 	b.w	8011636 <_dtoa_r+0x2e>
 8011f82:	692a      	ldr	r2, [r5, #16]
 8011f84:	3202      	adds	r2, #2
 8011f86:	0092      	lsls	r2, r2, #2
 8011f88:	f105 010c 	add.w	r1, r5, #12
 8011f8c:	300c      	adds	r0, #12
 8011f8e:	f7ff faa2 	bl	80114d6 <memcpy>
 8011f92:	2201      	movs	r2, #1
 8011f94:	4631      	mov	r1, r6
 8011f96:	4658      	mov	r0, fp
 8011f98:	f000 fb52 	bl	8012640 <__lshift>
 8011f9c:	f10a 0301 	add.w	r3, sl, #1
 8011fa0:	9307      	str	r3, [sp, #28]
 8011fa2:	9b00      	ldr	r3, [sp, #0]
 8011fa4:	4453      	add	r3, sl
 8011fa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011fa8:	9b02      	ldr	r3, [sp, #8]
 8011faa:	f003 0301 	and.w	r3, r3, #1
 8011fae:	462f      	mov	r7, r5
 8011fb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8011fb2:	4605      	mov	r5, r0
 8011fb4:	9b07      	ldr	r3, [sp, #28]
 8011fb6:	4621      	mov	r1, r4
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	4648      	mov	r0, r9
 8011fbc:	9300      	str	r3, [sp, #0]
 8011fbe:	f7ff fa98 	bl	80114f2 <quorem>
 8011fc2:	4639      	mov	r1, r7
 8011fc4:	9002      	str	r0, [sp, #8]
 8011fc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011fca:	4648      	mov	r0, r9
 8011fcc:	f000 fba4 	bl	8012718 <__mcmp>
 8011fd0:	462a      	mov	r2, r5
 8011fd2:	9008      	str	r0, [sp, #32]
 8011fd4:	4621      	mov	r1, r4
 8011fd6:	4658      	mov	r0, fp
 8011fd8:	f000 fbba 	bl	8012750 <__mdiff>
 8011fdc:	68c2      	ldr	r2, [r0, #12]
 8011fde:	4606      	mov	r6, r0
 8011fe0:	bb02      	cbnz	r2, 8012024 <_dtoa_r+0xa1c>
 8011fe2:	4601      	mov	r1, r0
 8011fe4:	4648      	mov	r0, r9
 8011fe6:	f000 fb97 	bl	8012718 <__mcmp>
 8011fea:	4602      	mov	r2, r0
 8011fec:	4631      	mov	r1, r6
 8011fee:	4658      	mov	r0, fp
 8011ff0:	920e      	str	r2, [sp, #56]	@ 0x38
 8011ff2:	f000 f957 	bl	80122a4 <_Bfree>
 8011ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ff8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ffa:	9e07      	ldr	r6, [sp, #28]
 8011ffc:	ea43 0102 	orr.w	r1, r3, r2
 8012000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012002:	4319      	orrs	r1, r3
 8012004:	d110      	bne.n	8012028 <_dtoa_r+0xa20>
 8012006:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801200a:	d029      	beq.n	8012060 <_dtoa_r+0xa58>
 801200c:	9b08      	ldr	r3, [sp, #32]
 801200e:	2b00      	cmp	r3, #0
 8012010:	dd02      	ble.n	8012018 <_dtoa_r+0xa10>
 8012012:	9b02      	ldr	r3, [sp, #8]
 8012014:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012018:	9b00      	ldr	r3, [sp, #0]
 801201a:	f883 8000 	strb.w	r8, [r3]
 801201e:	e63f      	b.n	8011ca0 <_dtoa_r+0x698>
 8012020:	4628      	mov	r0, r5
 8012022:	e7bb      	b.n	8011f9c <_dtoa_r+0x994>
 8012024:	2201      	movs	r2, #1
 8012026:	e7e1      	b.n	8011fec <_dtoa_r+0x9e4>
 8012028:	9b08      	ldr	r3, [sp, #32]
 801202a:	2b00      	cmp	r3, #0
 801202c:	db04      	blt.n	8012038 <_dtoa_r+0xa30>
 801202e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012030:	430b      	orrs	r3, r1
 8012032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012034:	430b      	orrs	r3, r1
 8012036:	d120      	bne.n	801207a <_dtoa_r+0xa72>
 8012038:	2a00      	cmp	r2, #0
 801203a:	dded      	ble.n	8012018 <_dtoa_r+0xa10>
 801203c:	4649      	mov	r1, r9
 801203e:	2201      	movs	r2, #1
 8012040:	4658      	mov	r0, fp
 8012042:	f000 fafd 	bl	8012640 <__lshift>
 8012046:	4621      	mov	r1, r4
 8012048:	4681      	mov	r9, r0
 801204a:	f000 fb65 	bl	8012718 <__mcmp>
 801204e:	2800      	cmp	r0, #0
 8012050:	dc03      	bgt.n	801205a <_dtoa_r+0xa52>
 8012052:	d1e1      	bne.n	8012018 <_dtoa_r+0xa10>
 8012054:	f018 0f01 	tst.w	r8, #1
 8012058:	d0de      	beq.n	8012018 <_dtoa_r+0xa10>
 801205a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801205e:	d1d8      	bne.n	8012012 <_dtoa_r+0xa0a>
 8012060:	9a00      	ldr	r2, [sp, #0]
 8012062:	2339      	movs	r3, #57	@ 0x39
 8012064:	7013      	strb	r3, [r2, #0]
 8012066:	4633      	mov	r3, r6
 8012068:	461e      	mov	r6, r3
 801206a:	3b01      	subs	r3, #1
 801206c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012070:	2a39      	cmp	r2, #57	@ 0x39
 8012072:	d052      	beq.n	801211a <_dtoa_r+0xb12>
 8012074:	3201      	adds	r2, #1
 8012076:	701a      	strb	r2, [r3, #0]
 8012078:	e612      	b.n	8011ca0 <_dtoa_r+0x698>
 801207a:	2a00      	cmp	r2, #0
 801207c:	dd07      	ble.n	801208e <_dtoa_r+0xa86>
 801207e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012082:	d0ed      	beq.n	8012060 <_dtoa_r+0xa58>
 8012084:	9a00      	ldr	r2, [sp, #0]
 8012086:	f108 0301 	add.w	r3, r8, #1
 801208a:	7013      	strb	r3, [r2, #0]
 801208c:	e608      	b.n	8011ca0 <_dtoa_r+0x698>
 801208e:	9b07      	ldr	r3, [sp, #28]
 8012090:	9a07      	ldr	r2, [sp, #28]
 8012092:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012098:	4293      	cmp	r3, r2
 801209a:	d028      	beq.n	80120ee <_dtoa_r+0xae6>
 801209c:	4649      	mov	r1, r9
 801209e:	2300      	movs	r3, #0
 80120a0:	220a      	movs	r2, #10
 80120a2:	4658      	mov	r0, fp
 80120a4:	f000 f920 	bl	80122e8 <__multadd>
 80120a8:	42af      	cmp	r7, r5
 80120aa:	4681      	mov	r9, r0
 80120ac:	f04f 0300 	mov.w	r3, #0
 80120b0:	f04f 020a 	mov.w	r2, #10
 80120b4:	4639      	mov	r1, r7
 80120b6:	4658      	mov	r0, fp
 80120b8:	d107      	bne.n	80120ca <_dtoa_r+0xac2>
 80120ba:	f000 f915 	bl	80122e8 <__multadd>
 80120be:	4607      	mov	r7, r0
 80120c0:	4605      	mov	r5, r0
 80120c2:	9b07      	ldr	r3, [sp, #28]
 80120c4:	3301      	adds	r3, #1
 80120c6:	9307      	str	r3, [sp, #28]
 80120c8:	e774      	b.n	8011fb4 <_dtoa_r+0x9ac>
 80120ca:	f000 f90d 	bl	80122e8 <__multadd>
 80120ce:	4629      	mov	r1, r5
 80120d0:	4607      	mov	r7, r0
 80120d2:	2300      	movs	r3, #0
 80120d4:	220a      	movs	r2, #10
 80120d6:	4658      	mov	r0, fp
 80120d8:	f000 f906 	bl	80122e8 <__multadd>
 80120dc:	4605      	mov	r5, r0
 80120de:	e7f0      	b.n	80120c2 <_dtoa_r+0xaba>
 80120e0:	9b00      	ldr	r3, [sp, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	bfcc      	ite	gt
 80120e6:	461e      	movgt	r6, r3
 80120e8:	2601      	movle	r6, #1
 80120ea:	4456      	add	r6, sl
 80120ec:	2700      	movs	r7, #0
 80120ee:	4649      	mov	r1, r9
 80120f0:	2201      	movs	r2, #1
 80120f2:	4658      	mov	r0, fp
 80120f4:	f000 faa4 	bl	8012640 <__lshift>
 80120f8:	4621      	mov	r1, r4
 80120fa:	4681      	mov	r9, r0
 80120fc:	f000 fb0c 	bl	8012718 <__mcmp>
 8012100:	2800      	cmp	r0, #0
 8012102:	dcb0      	bgt.n	8012066 <_dtoa_r+0xa5e>
 8012104:	d102      	bne.n	801210c <_dtoa_r+0xb04>
 8012106:	f018 0f01 	tst.w	r8, #1
 801210a:	d1ac      	bne.n	8012066 <_dtoa_r+0xa5e>
 801210c:	4633      	mov	r3, r6
 801210e:	461e      	mov	r6, r3
 8012110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012114:	2a30      	cmp	r2, #48	@ 0x30
 8012116:	d0fa      	beq.n	801210e <_dtoa_r+0xb06>
 8012118:	e5c2      	b.n	8011ca0 <_dtoa_r+0x698>
 801211a:	459a      	cmp	sl, r3
 801211c:	d1a4      	bne.n	8012068 <_dtoa_r+0xa60>
 801211e:	9b04      	ldr	r3, [sp, #16]
 8012120:	3301      	adds	r3, #1
 8012122:	9304      	str	r3, [sp, #16]
 8012124:	2331      	movs	r3, #49	@ 0x31
 8012126:	f88a 3000 	strb.w	r3, [sl]
 801212a:	e5b9      	b.n	8011ca0 <_dtoa_r+0x698>
 801212c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801212e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801218c <_dtoa_r+0xb84>
 8012132:	b11b      	cbz	r3, 801213c <_dtoa_r+0xb34>
 8012134:	f10a 0308 	add.w	r3, sl, #8
 8012138:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801213a:	6013      	str	r3, [r2, #0]
 801213c:	4650      	mov	r0, sl
 801213e:	b019      	add	sp, #100	@ 0x64
 8012140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012146:	2b01      	cmp	r3, #1
 8012148:	f77f ae37 	ble.w	8011dba <_dtoa_r+0x7b2>
 801214c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801214e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012150:	2001      	movs	r0, #1
 8012152:	e655      	b.n	8011e00 <_dtoa_r+0x7f8>
 8012154:	9b00      	ldr	r3, [sp, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	f77f aed6 	ble.w	8011f08 <_dtoa_r+0x900>
 801215c:	4656      	mov	r6, sl
 801215e:	4621      	mov	r1, r4
 8012160:	4648      	mov	r0, r9
 8012162:	f7ff f9c6 	bl	80114f2 <quorem>
 8012166:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801216a:	f806 8b01 	strb.w	r8, [r6], #1
 801216e:	9b00      	ldr	r3, [sp, #0]
 8012170:	eba6 020a 	sub.w	r2, r6, sl
 8012174:	4293      	cmp	r3, r2
 8012176:	ddb3      	ble.n	80120e0 <_dtoa_r+0xad8>
 8012178:	4649      	mov	r1, r9
 801217a:	2300      	movs	r3, #0
 801217c:	220a      	movs	r2, #10
 801217e:	4658      	mov	r0, fp
 8012180:	f000 f8b2 	bl	80122e8 <__multadd>
 8012184:	4681      	mov	r9, r0
 8012186:	e7ea      	b.n	801215e <_dtoa_r+0xb56>
 8012188:	08015a14 	.word	0x08015a14
 801218c:	08015998 	.word	0x08015998

08012190 <_free_r>:
 8012190:	b538      	push	{r3, r4, r5, lr}
 8012192:	4605      	mov	r5, r0
 8012194:	2900      	cmp	r1, #0
 8012196:	d041      	beq.n	801221c <_free_r+0x8c>
 8012198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801219c:	1f0c      	subs	r4, r1, #4
 801219e:	2b00      	cmp	r3, #0
 80121a0:	bfb8      	it	lt
 80121a2:	18e4      	addlt	r4, r4, r3
 80121a4:	f7fe fb36 	bl	8010814 <__malloc_lock>
 80121a8:	4a1d      	ldr	r2, [pc, #116]	@ (8012220 <_free_r+0x90>)
 80121aa:	6813      	ldr	r3, [r2, #0]
 80121ac:	b933      	cbnz	r3, 80121bc <_free_r+0x2c>
 80121ae:	6063      	str	r3, [r4, #4]
 80121b0:	6014      	str	r4, [r2, #0]
 80121b2:	4628      	mov	r0, r5
 80121b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121b8:	f7fe bb32 	b.w	8010820 <__malloc_unlock>
 80121bc:	42a3      	cmp	r3, r4
 80121be:	d908      	bls.n	80121d2 <_free_r+0x42>
 80121c0:	6820      	ldr	r0, [r4, #0]
 80121c2:	1821      	adds	r1, r4, r0
 80121c4:	428b      	cmp	r3, r1
 80121c6:	bf01      	itttt	eq
 80121c8:	6819      	ldreq	r1, [r3, #0]
 80121ca:	685b      	ldreq	r3, [r3, #4]
 80121cc:	1809      	addeq	r1, r1, r0
 80121ce:	6021      	streq	r1, [r4, #0]
 80121d0:	e7ed      	b.n	80121ae <_free_r+0x1e>
 80121d2:	461a      	mov	r2, r3
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	b10b      	cbz	r3, 80121dc <_free_r+0x4c>
 80121d8:	42a3      	cmp	r3, r4
 80121da:	d9fa      	bls.n	80121d2 <_free_r+0x42>
 80121dc:	6811      	ldr	r1, [r2, #0]
 80121de:	1850      	adds	r0, r2, r1
 80121e0:	42a0      	cmp	r0, r4
 80121e2:	d10b      	bne.n	80121fc <_free_r+0x6c>
 80121e4:	6820      	ldr	r0, [r4, #0]
 80121e6:	4401      	add	r1, r0
 80121e8:	1850      	adds	r0, r2, r1
 80121ea:	4283      	cmp	r3, r0
 80121ec:	6011      	str	r1, [r2, #0]
 80121ee:	d1e0      	bne.n	80121b2 <_free_r+0x22>
 80121f0:	6818      	ldr	r0, [r3, #0]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	6053      	str	r3, [r2, #4]
 80121f6:	4408      	add	r0, r1
 80121f8:	6010      	str	r0, [r2, #0]
 80121fa:	e7da      	b.n	80121b2 <_free_r+0x22>
 80121fc:	d902      	bls.n	8012204 <_free_r+0x74>
 80121fe:	230c      	movs	r3, #12
 8012200:	602b      	str	r3, [r5, #0]
 8012202:	e7d6      	b.n	80121b2 <_free_r+0x22>
 8012204:	6820      	ldr	r0, [r4, #0]
 8012206:	1821      	adds	r1, r4, r0
 8012208:	428b      	cmp	r3, r1
 801220a:	bf04      	itt	eq
 801220c:	6819      	ldreq	r1, [r3, #0]
 801220e:	685b      	ldreq	r3, [r3, #4]
 8012210:	6063      	str	r3, [r4, #4]
 8012212:	bf04      	itt	eq
 8012214:	1809      	addeq	r1, r1, r0
 8012216:	6021      	streq	r1, [r4, #0]
 8012218:	6054      	str	r4, [r2, #4]
 801221a:	e7ca      	b.n	80121b2 <_free_r+0x22>
 801221c:	bd38      	pop	{r3, r4, r5, pc}
 801221e:	bf00      	nop
 8012220:	20002018 	.word	0x20002018

08012224 <_Balloc>:
 8012224:	b570      	push	{r4, r5, r6, lr}
 8012226:	69c6      	ldr	r6, [r0, #28]
 8012228:	4604      	mov	r4, r0
 801222a:	460d      	mov	r5, r1
 801222c:	b976      	cbnz	r6, 801224c <_Balloc+0x28>
 801222e:	2010      	movs	r0, #16
 8012230:	f7fe fa3e 	bl	80106b0 <malloc>
 8012234:	4602      	mov	r2, r0
 8012236:	61e0      	str	r0, [r4, #28]
 8012238:	b920      	cbnz	r0, 8012244 <_Balloc+0x20>
 801223a:	4b18      	ldr	r3, [pc, #96]	@ (801229c <_Balloc+0x78>)
 801223c:	4818      	ldr	r0, [pc, #96]	@ (80122a0 <_Balloc+0x7c>)
 801223e:	216b      	movs	r1, #107	@ 0x6b
 8012240:	f000 fd76 	bl	8012d30 <__assert_func>
 8012244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012248:	6006      	str	r6, [r0, #0]
 801224a:	60c6      	str	r6, [r0, #12]
 801224c:	69e6      	ldr	r6, [r4, #28]
 801224e:	68f3      	ldr	r3, [r6, #12]
 8012250:	b183      	cbz	r3, 8012274 <_Balloc+0x50>
 8012252:	69e3      	ldr	r3, [r4, #28]
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801225a:	b9b8      	cbnz	r0, 801228c <_Balloc+0x68>
 801225c:	2101      	movs	r1, #1
 801225e:	fa01 f605 	lsl.w	r6, r1, r5
 8012262:	1d72      	adds	r2, r6, #5
 8012264:	0092      	lsls	r2, r2, #2
 8012266:	4620      	mov	r0, r4
 8012268:	f000 fd80 	bl	8012d6c <_calloc_r>
 801226c:	b160      	cbz	r0, 8012288 <_Balloc+0x64>
 801226e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012272:	e00e      	b.n	8012292 <_Balloc+0x6e>
 8012274:	2221      	movs	r2, #33	@ 0x21
 8012276:	2104      	movs	r1, #4
 8012278:	4620      	mov	r0, r4
 801227a:	f000 fd77 	bl	8012d6c <_calloc_r>
 801227e:	69e3      	ldr	r3, [r4, #28]
 8012280:	60f0      	str	r0, [r6, #12]
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d1e4      	bne.n	8012252 <_Balloc+0x2e>
 8012288:	2000      	movs	r0, #0
 801228a:	bd70      	pop	{r4, r5, r6, pc}
 801228c:	6802      	ldr	r2, [r0, #0]
 801228e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012292:	2300      	movs	r3, #0
 8012294:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012298:	e7f7      	b.n	801228a <_Balloc+0x66>
 801229a:	bf00      	nop
 801229c:	080159a5 	.word	0x080159a5
 80122a0:	08015a25 	.word	0x08015a25

080122a4 <_Bfree>:
 80122a4:	b570      	push	{r4, r5, r6, lr}
 80122a6:	69c6      	ldr	r6, [r0, #28]
 80122a8:	4605      	mov	r5, r0
 80122aa:	460c      	mov	r4, r1
 80122ac:	b976      	cbnz	r6, 80122cc <_Bfree+0x28>
 80122ae:	2010      	movs	r0, #16
 80122b0:	f7fe f9fe 	bl	80106b0 <malloc>
 80122b4:	4602      	mov	r2, r0
 80122b6:	61e8      	str	r0, [r5, #28]
 80122b8:	b920      	cbnz	r0, 80122c4 <_Bfree+0x20>
 80122ba:	4b09      	ldr	r3, [pc, #36]	@ (80122e0 <_Bfree+0x3c>)
 80122bc:	4809      	ldr	r0, [pc, #36]	@ (80122e4 <_Bfree+0x40>)
 80122be:	218f      	movs	r1, #143	@ 0x8f
 80122c0:	f000 fd36 	bl	8012d30 <__assert_func>
 80122c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122c8:	6006      	str	r6, [r0, #0]
 80122ca:	60c6      	str	r6, [r0, #12]
 80122cc:	b13c      	cbz	r4, 80122de <_Bfree+0x3a>
 80122ce:	69eb      	ldr	r3, [r5, #28]
 80122d0:	6862      	ldr	r2, [r4, #4]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122d8:	6021      	str	r1, [r4, #0]
 80122da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122de:	bd70      	pop	{r4, r5, r6, pc}
 80122e0:	080159a5 	.word	0x080159a5
 80122e4:	08015a25 	.word	0x08015a25

080122e8 <__multadd>:
 80122e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ec:	690d      	ldr	r5, [r1, #16]
 80122ee:	4607      	mov	r7, r0
 80122f0:	460c      	mov	r4, r1
 80122f2:	461e      	mov	r6, r3
 80122f4:	f101 0c14 	add.w	ip, r1, #20
 80122f8:	2000      	movs	r0, #0
 80122fa:	f8dc 3000 	ldr.w	r3, [ip]
 80122fe:	b299      	uxth	r1, r3
 8012300:	fb02 6101 	mla	r1, r2, r1, r6
 8012304:	0c1e      	lsrs	r6, r3, #16
 8012306:	0c0b      	lsrs	r3, r1, #16
 8012308:	fb02 3306 	mla	r3, r2, r6, r3
 801230c:	b289      	uxth	r1, r1
 801230e:	3001      	adds	r0, #1
 8012310:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012314:	4285      	cmp	r5, r0
 8012316:	f84c 1b04 	str.w	r1, [ip], #4
 801231a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801231e:	dcec      	bgt.n	80122fa <__multadd+0x12>
 8012320:	b30e      	cbz	r6, 8012366 <__multadd+0x7e>
 8012322:	68a3      	ldr	r3, [r4, #8]
 8012324:	42ab      	cmp	r3, r5
 8012326:	dc19      	bgt.n	801235c <__multadd+0x74>
 8012328:	6861      	ldr	r1, [r4, #4]
 801232a:	4638      	mov	r0, r7
 801232c:	3101      	adds	r1, #1
 801232e:	f7ff ff79 	bl	8012224 <_Balloc>
 8012332:	4680      	mov	r8, r0
 8012334:	b928      	cbnz	r0, 8012342 <__multadd+0x5a>
 8012336:	4602      	mov	r2, r0
 8012338:	4b0c      	ldr	r3, [pc, #48]	@ (801236c <__multadd+0x84>)
 801233a:	480d      	ldr	r0, [pc, #52]	@ (8012370 <__multadd+0x88>)
 801233c:	21ba      	movs	r1, #186	@ 0xba
 801233e:	f000 fcf7 	bl	8012d30 <__assert_func>
 8012342:	6922      	ldr	r2, [r4, #16]
 8012344:	3202      	adds	r2, #2
 8012346:	f104 010c 	add.w	r1, r4, #12
 801234a:	0092      	lsls	r2, r2, #2
 801234c:	300c      	adds	r0, #12
 801234e:	f7ff f8c2 	bl	80114d6 <memcpy>
 8012352:	4621      	mov	r1, r4
 8012354:	4638      	mov	r0, r7
 8012356:	f7ff ffa5 	bl	80122a4 <_Bfree>
 801235a:	4644      	mov	r4, r8
 801235c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012360:	3501      	adds	r5, #1
 8012362:	615e      	str	r6, [r3, #20]
 8012364:	6125      	str	r5, [r4, #16]
 8012366:	4620      	mov	r0, r4
 8012368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801236c:	08015a14 	.word	0x08015a14
 8012370:	08015a25 	.word	0x08015a25

08012374 <__hi0bits>:
 8012374:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012378:	4603      	mov	r3, r0
 801237a:	bf36      	itet	cc
 801237c:	0403      	lslcc	r3, r0, #16
 801237e:	2000      	movcs	r0, #0
 8012380:	2010      	movcc	r0, #16
 8012382:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012386:	bf3c      	itt	cc
 8012388:	021b      	lslcc	r3, r3, #8
 801238a:	3008      	addcc	r0, #8
 801238c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012390:	bf3c      	itt	cc
 8012392:	011b      	lslcc	r3, r3, #4
 8012394:	3004      	addcc	r0, #4
 8012396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801239a:	bf3c      	itt	cc
 801239c:	009b      	lslcc	r3, r3, #2
 801239e:	3002      	addcc	r0, #2
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	db05      	blt.n	80123b0 <__hi0bits+0x3c>
 80123a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80123a8:	f100 0001 	add.w	r0, r0, #1
 80123ac:	bf08      	it	eq
 80123ae:	2020      	moveq	r0, #32
 80123b0:	4770      	bx	lr

080123b2 <__lo0bits>:
 80123b2:	6803      	ldr	r3, [r0, #0]
 80123b4:	4602      	mov	r2, r0
 80123b6:	f013 0007 	ands.w	r0, r3, #7
 80123ba:	d00b      	beq.n	80123d4 <__lo0bits+0x22>
 80123bc:	07d9      	lsls	r1, r3, #31
 80123be:	d421      	bmi.n	8012404 <__lo0bits+0x52>
 80123c0:	0798      	lsls	r0, r3, #30
 80123c2:	bf49      	itett	mi
 80123c4:	085b      	lsrmi	r3, r3, #1
 80123c6:	089b      	lsrpl	r3, r3, #2
 80123c8:	2001      	movmi	r0, #1
 80123ca:	6013      	strmi	r3, [r2, #0]
 80123cc:	bf5c      	itt	pl
 80123ce:	6013      	strpl	r3, [r2, #0]
 80123d0:	2002      	movpl	r0, #2
 80123d2:	4770      	bx	lr
 80123d4:	b299      	uxth	r1, r3
 80123d6:	b909      	cbnz	r1, 80123dc <__lo0bits+0x2a>
 80123d8:	0c1b      	lsrs	r3, r3, #16
 80123da:	2010      	movs	r0, #16
 80123dc:	b2d9      	uxtb	r1, r3
 80123de:	b909      	cbnz	r1, 80123e4 <__lo0bits+0x32>
 80123e0:	3008      	adds	r0, #8
 80123e2:	0a1b      	lsrs	r3, r3, #8
 80123e4:	0719      	lsls	r1, r3, #28
 80123e6:	bf04      	itt	eq
 80123e8:	091b      	lsreq	r3, r3, #4
 80123ea:	3004      	addeq	r0, #4
 80123ec:	0799      	lsls	r1, r3, #30
 80123ee:	bf04      	itt	eq
 80123f0:	089b      	lsreq	r3, r3, #2
 80123f2:	3002      	addeq	r0, #2
 80123f4:	07d9      	lsls	r1, r3, #31
 80123f6:	d403      	bmi.n	8012400 <__lo0bits+0x4e>
 80123f8:	085b      	lsrs	r3, r3, #1
 80123fa:	f100 0001 	add.w	r0, r0, #1
 80123fe:	d003      	beq.n	8012408 <__lo0bits+0x56>
 8012400:	6013      	str	r3, [r2, #0]
 8012402:	4770      	bx	lr
 8012404:	2000      	movs	r0, #0
 8012406:	4770      	bx	lr
 8012408:	2020      	movs	r0, #32
 801240a:	4770      	bx	lr

0801240c <__i2b>:
 801240c:	b510      	push	{r4, lr}
 801240e:	460c      	mov	r4, r1
 8012410:	2101      	movs	r1, #1
 8012412:	f7ff ff07 	bl	8012224 <_Balloc>
 8012416:	4602      	mov	r2, r0
 8012418:	b928      	cbnz	r0, 8012426 <__i2b+0x1a>
 801241a:	4b05      	ldr	r3, [pc, #20]	@ (8012430 <__i2b+0x24>)
 801241c:	4805      	ldr	r0, [pc, #20]	@ (8012434 <__i2b+0x28>)
 801241e:	f240 1145 	movw	r1, #325	@ 0x145
 8012422:	f000 fc85 	bl	8012d30 <__assert_func>
 8012426:	2301      	movs	r3, #1
 8012428:	6144      	str	r4, [r0, #20]
 801242a:	6103      	str	r3, [r0, #16]
 801242c:	bd10      	pop	{r4, pc}
 801242e:	bf00      	nop
 8012430:	08015a14 	.word	0x08015a14
 8012434:	08015a25 	.word	0x08015a25

08012438 <__multiply>:
 8012438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801243c:	4614      	mov	r4, r2
 801243e:	690a      	ldr	r2, [r1, #16]
 8012440:	6923      	ldr	r3, [r4, #16]
 8012442:	429a      	cmp	r2, r3
 8012444:	bfa8      	it	ge
 8012446:	4623      	movge	r3, r4
 8012448:	460f      	mov	r7, r1
 801244a:	bfa4      	itt	ge
 801244c:	460c      	movge	r4, r1
 801244e:	461f      	movge	r7, r3
 8012450:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012454:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012458:	68a3      	ldr	r3, [r4, #8]
 801245a:	6861      	ldr	r1, [r4, #4]
 801245c:	eb0a 0609 	add.w	r6, sl, r9
 8012460:	42b3      	cmp	r3, r6
 8012462:	b085      	sub	sp, #20
 8012464:	bfb8      	it	lt
 8012466:	3101      	addlt	r1, #1
 8012468:	f7ff fedc 	bl	8012224 <_Balloc>
 801246c:	b930      	cbnz	r0, 801247c <__multiply+0x44>
 801246e:	4602      	mov	r2, r0
 8012470:	4b44      	ldr	r3, [pc, #272]	@ (8012584 <__multiply+0x14c>)
 8012472:	4845      	ldr	r0, [pc, #276]	@ (8012588 <__multiply+0x150>)
 8012474:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012478:	f000 fc5a 	bl	8012d30 <__assert_func>
 801247c:	f100 0514 	add.w	r5, r0, #20
 8012480:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012484:	462b      	mov	r3, r5
 8012486:	2200      	movs	r2, #0
 8012488:	4543      	cmp	r3, r8
 801248a:	d321      	bcc.n	80124d0 <__multiply+0x98>
 801248c:	f107 0114 	add.w	r1, r7, #20
 8012490:	f104 0214 	add.w	r2, r4, #20
 8012494:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012498:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801249c:	9302      	str	r3, [sp, #8]
 801249e:	1b13      	subs	r3, r2, r4
 80124a0:	3b15      	subs	r3, #21
 80124a2:	f023 0303 	bic.w	r3, r3, #3
 80124a6:	3304      	adds	r3, #4
 80124a8:	f104 0715 	add.w	r7, r4, #21
 80124ac:	42ba      	cmp	r2, r7
 80124ae:	bf38      	it	cc
 80124b0:	2304      	movcc	r3, #4
 80124b2:	9301      	str	r3, [sp, #4]
 80124b4:	9b02      	ldr	r3, [sp, #8]
 80124b6:	9103      	str	r1, [sp, #12]
 80124b8:	428b      	cmp	r3, r1
 80124ba:	d80c      	bhi.n	80124d6 <__multiply+0x9e>
 80124bc:	2e00      	cmp	r6, #0
 80124be:	dd03      	ble.n	80124c8 <__multiply+0x90>
 80124c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d05b      	beq.n	8012580 <__multiply+0x148>
 80124c8:	6106      	str	r6, [r0, #16]
 80124ca:	b005      	add	sp, #20
 80124cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d0:	f843 2b04 	str.w	r2, [r3], #4
 80124d4:	e7d8      	b.n	8012488 <__multiply+0x50>
 80124d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80124da:	f1ba 0f00 	cmp.w	sl, #0
 80124de:	d024      	beq.n	801252a <__multiply+0xf2>
 80124e0:	f104 0e14 	add.w	lr, r4, #20
 80124e4:	46a9      	mov	r9, r5
 80124e6:	f04f 0c00 	mov.w	ip, #0
 80124ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80124ee:	f8d9 3000 	ldr.w	r3, [r9]
 80124f2:	fa1f fb87 	uxth.w	fp, r7
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80124fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012500:	f8d9 7000 	ldr.w	r7, [r9]
 8012504:	4463      	add	r3, ip
 8012506:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801250a:	fb0a c70b 	mla	r7, sl, fp, ip
 801250e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012512:	b29b      	uxth	r3, r3
 8012514:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012518:	4572      	cmp	r2, lr
 801251a:	f849 3b04 	str.w	r3, [r9], #4
 801251e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012522:	d8e2      	bhi.n	80124ea <__multiply+0xb2>
 8012524:	9b01      	ldr	r3, [sp, #4]
 8012526:	f845 c003 	str.w	ip, [r5, r3]
 801252a:	9b03      	ldr	r3, [sp, #12]
 801252c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012530:	3104      	adds	r1, #4
 8012532:	f1b9 0f00 	cmp.w	r9, #0
 8012536:	d021      	beq.n	801257c <__multiply+0x144>
 8012538:	682b      	ldr	r3, [r5, #0]
 801253a:	f104 0c14 	add.w	ip, r4, #20
 801253e:	46ae      	mov	lr, r5
 8012540:	f04f 0a00 	mov.w	sl, #0
 8012544:	f8bc b000 	ldrh.w	fp, [ip]
 8012548:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801254c:	fb09 770b 	mla	r7, r9, fp, r7
 8012550:	4457      	add	r7, sl
 8012552:	b29b      	uxth	r3, r3
 8012554:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012558:	f84e 3b04 	str.w	r3, [lr], #4
 801255c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012560:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012564:	f8be 3000 	ldrh.w	r3, [lr]
 8012568:	fb09 330a 	mla	r3, r9, sl, r3
 801256c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012570:	4562      	cmp	r2, ip
 8012572:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012576:	d8e5      	bhi.n	8012544 <__multiply+0x10c>
 8012578:	9f01      	ldr	r7, [sp, #4]
 801257a:	51eb      	str	r3, [r5, r7]
 801257c:	3504      	adds	r5, #4
 801257e:	e799      	b.n	80124b4 <__multiply+0x7c>
 8012580:	3e01      	subs	r6, #1
 8012582:	e79b      	b.n	80124bc <__multiply+0x84>
 8012584:	08015a14 	.word	0x08015a14
 8012588:	08015a25 	.word	0x08015a25

0801258c <__pow5mult>:
 801258c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012590:	4615      	mov	r5, r2
 8012592:	f012 0203 	ands.w	r2, r2, #3
 8012596:	4607      	mov	r7, r0
 8012598:	460e      	mov	r6, r1
 801259a:	d007      	beq.n	80125ac <__pow5mult+0x20>
 801259c:	4c25      	ldr	r4, [pc, #148]	@ (8012634 <__pow5mult+0xa8>)
 801259e:	3a01      	subs	r2, #1
 80125a0:	2300      	movs	r3, #0
 80125a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80125a6:	f7ff fe9f 	bl	80122e8 <__multadd>
 80125aa:	4606      	mov	r6, r0
 80125ac:	10ad      	asrs	r5, r5, #2
 80125ae:	d03d      	beq.n	801262c <__pow5mult+0xa0>
 80125b0:	69fc      	ldr	r4, [r7, #28]
 80125b2:	b97c      	cbnz	r4, 80125d4 <__pow5mult+0x48>
 80125b4:	2010      	movs	r0, #16
 80125b6:	f7fe f87b 	bl	80106b0 <malloc>
 80125ba:	4602      	mov	r2, r0
 80125bc:	61f8      	str	r0, [r7, #28]
 80125be:	b928      	cbnz	r0, 80125cc <__pow5mult+0x40>
 80125c0:	4b1d      	ldr	r3, [pc, #116]	@ (8012638 <__pow5mult+0xac>)
 80125c2:	481e      	ldr	r0, [pc, #120]	@ (801263c <__pow5mult+0xb0>)
 80125c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80125c8:	f000 fbb2 	bl	8012d30 <__assert_func>
 80125cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80125d0:	6004      	str	r4, [r0, #0]
 80125d2:	60c4      	str	r4, [r0, #12]
 80125d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80125d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80125dc:	b94c      	cbnz	r4, 80125f2 <__pow5mult+0x66>
 80125de:	f240 2171 	movw	r1, #625	@ 0x271
 80125e2:	4638      	mov	r0, r7
 80125e4:	f7ff ff12 	bl	801240c <__i2b>
 80125e8:	2300      	movs	r3, #0
 80125ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80125ee:	4604      	mov	r4, r0
 80125f0:	6003      	str	r3, [r0, #0]
 80125f2:	f04f 0900 	mov.w	r9, #0
 80125f6:	07eb      	lsls	r3, r5, #31
 80125f8:	d50a      	bpl.n	8012610 <__pow5mult+0x84>
 80125fa:	4631      	mov	r1, r6
 80125fc:	4622      	mov	r2, r4
 80125fe:	4638      	mov	r0, r7
 8012600:	f7ff ff1a 	bl	8012438 <__multiply>
 8012604:	4631      	mov	r1, r6
 8012606:	4680      	mov	r8, r0
 8012608:	4638      	mov	r0, r7
 801260a:	f7ff fe4b 	bl	80122a4 <_Bfree>
 801260e:	4646      	mov	r6, r8
 8012610:	106d      	asrs	r5, r5, #1
 8012612:	d00b      	beq.n	801262c <__pow5mult+0xa0>
 8012614:	6820      	ldr	r0, [r4, #0]
 8012616:	b938      	cbnz	r0, 8012628 <__pow5mult+0x9c>
 8012618:	4622      	mov	r2, r4
 801261a:	4621      	mov	r1, r4
 801261c:	4638      	mov	r0, r7
 801261e:	f7ff ff0b 	bl	8012438 <__multiply>
 8012622:	6020      	str	r0, [r4, #0]
 8012624:	f8c0 9000 	str.w	r9, [r0]
 8012628:	4604      	mov	r4, r0
 801262a:	e7e4      	b.n	80125f6 <__pow5mult+0x6a>
 801262c:	4630      	mov	r0, r6
 801262e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012632:	bf00      	nop
 8012634:	08015a80 	.word	0x08015a80
 8012638:	080159a5 	.word	0x080159a5
 801263c:	08015a25 	.word	0x08015a25

08012640 <__lshift>:
 8012640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012644:	460c      	mov	r4, r1
 8012646:	6849      	ldr	r1, [r1, #4]
 8012648:	6923      	ldr	r3, [r4, #16]
 801264a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801264e:	68a3      	ldr	r3, [r4, #8]
 8012650:	4607      	mov	r7, r0
 8012652:	4691      	mov	r9, r2
 8012654:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012658:	f108 0601 	add.w	r6, r8, #1
 801265c:	42b3      	cmp	r3, r6
 801265e:	db0b      	blt.n	8012678 <__lshift+0x38>
 8012660:	4638      	mov	r0, r7
 8012662:	f7ff fddf 	bl	8012224 <_Balloc>
 8012666:	4605      	mov	r5, r0
 8012668:	b948      	cbnz	r0, 801267e <__lshift+0x3e>
 801266a:	4602      	mov	r2, r0
 801266c:	4b28      	ldr	r3, [pc, #160]	@ (8012710 <__lshift+0xd0>)
 801266e:	4829      	ldr	r0, [pc, #164]	@ (8012714 <__lshift+0xd4>)
 8012670:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012674:	f000 fb5c 	bl	8012d30 <__assert_func>
 8012678:	3101      	adds	r1, #1
 801267a:	005b      	lsls	r3, r3, #1
 801267c:	e7ee      	b.n	801265c <__lshift+0x1c>
 801267e:	2300      	movs	r3, #0
 8012680:	f100 0114 	add.w	r1, r0, #20
 8012684:	f100 0210 	add.w	r2, r0, #16
 8012688:	4618      	mov	r0, r3
 801268a:	4553      	cmp	r3, sl
 801268c:	db33      	blt.n	80126f6 <__lshift+0xb6>
 801268e:	6920      	ldr	r0, [r4, #16]
 8012690:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012694:	f104 0314 	add.w	r3, r4, #20
 8012698:	f019 091f 	ands.w	r9, r9, #31
 801269c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80126a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80126a4:	d02b      	beq.n	80126fe <__lshift+0xbe>
 80126a6:	f1c9 0e20 	rsb	lr, r9, #32
 80126aa:	468a      	mov	sl, r1
 80126ac:	2200      	movs	r2, #0
 80126ae:	6818      	ldr	r0, [r3, #0]
 80126b0:	fa00 f009 	lsl.w	r0, r0, r9
 80126b4:	4310      	orrs	r0, r2
 80126b6:	f84a 0b04 	str.w	r0, [sl], #4
 80126ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80126be:	459c      	cmp	ip, r3
 80126c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80126c4:	d8f3      	bhi.n	80126ae <__lshift+0x6e>
 80126c6:	ebac 0304 	sub.w	r3, ip, r4
 80126ca:	3b15      	subs	r3, #21
 80126cc:	f023 0303 	bic.w	r3, r3, #3
 80126d0:	3304      	adds	r3, #4
 80126d2:	f104 0015 	add.w	r0, r4, #21
 80126d6:	4584      	cmp	ip, r0
 80126d8:	bf38      	it	cc
 80126da:	2304      	movcc	r3, #4
 80126dc:	50ca      	str	r2, [r1, r3]
 80126de:	b10a      	cbz	r2, 80126e4 <__lshift+0xa4>
 80126e0:	f108 0602 	add.w	r6, r8, #2
 80126e4:	3e01      	subs	r6, #1
 80126e6:	4638      	mov	r0, r7
 80126e8:	612e      	str	r6, [r5, #16]
 80126ea:	4621      	mov	r1, r4
 80126ec:	f7ff fdda 	bl	80122a4 <_Bfree>
 80126f0:	4628      	mov	r0, r5
 80126f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80126fa:	3301      	adds	r3, #1
 80126fc:	e7c5      	b.n	801268a <__lshift+0x4a>
 80126fe:	3904      	subs	r1, #4
 8012700:	f853 2b04 	ldr.w	r2, [r3], #4
 8012704:	f841 2f04 	str.w	r2, [r1, #4]!
 8012708:	459c      	cmp	ip, r3
 801270a:	d8f9      	bhi.n	8012700 <__lshift+0xc0>
 801270c:	e7ea      	b.n	80126e4 <__lshift+0xa4>
 801270e:	bf00      	nop
 8012710:	08015a14 	.word	0x08015a14
 8012714:	08015a25 	.word	0x08015a25

08012718 <__mcmp>:
 8012718:	690a      	ldr	r2, [r1, #16]
 801271a:	4603      	mov	r3, r0
 801271c:	6900      	ldr	r0, [r0, #16]
 801271e:	1a80      	subs	r0, r0, r2
 8012720:	b530      	push	{r4, r5, lr}
 8012722:	d10e      	bne.n	8012742 <__mcmp+0x2a>
 8012724:	3314      	adds	r3, #20
 8012726:	3114      	adds	r1, #20
 8012728:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801272c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012730:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012734:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012738:	4295      	cmp	r5, r2
 801273a:	d003      	beq.n	8012744 <__mcmp+0x2c>
 801273c:	d205      	bcs.n	801274a <__mcmp+0x32>
 801273e:	f04f 30ff 	mov.w	r0, #4294967295
 8012742:	bd30      	pop	{r4, r5, pc}
 8012744:	42a3      	cmp	r3, r4
 8012746:	d3f3      	bcc.n	8012730 <__mcmp+0x18>
 8012748:	e7fb      	b.n	8012742 <__mcmp+0x2a>
 801274a:	2001      	movs	r0, #1
 801274c:	e7f9      	b.n	8012742 <__mcmp+0x2a>
	...

08012750 <__mdiff>:
 8012750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012754:	4689      	mov	r9, r1
 8012756:	4606      	mov	r6, r0
 8012758:	4611      	mov	r1, r2
 801275a:	4648      	mov	r0, r9
 801275c:	4614      	mov	r4, r2
 801275e:	f7ff ffdb 	bl	8012718 <__mcmp>
 8012762:	1e05      	subs	r5, r0, #0
 8012764:	d112      	bne.n	801278c <__mdiff+0x3c>
 8012766:	4629      	mov	r1, r5
 8012768:	4630      	mov	r0, r6
 801276a:	f7ff fd5b 	bl	8012224 <_Balloc>
 801276e:	4602      	mov	r2, r0
 8012770:	b928      	cbnz	r0, 801277e <__mdiff+0x2e>
 8012772:	4b3f      	ldr	r3, [pc, #252]	@ (8012870 <__mdiff+0x120>)
 8012774:	f240 2137 	movw	r1, #567	@ 0x237
 8012778:	483e      	ldr	r0, [pc, #248]	@ (8012874 <__mdiff+0x124>)
 801277a:	f000 fad9 	bl	8012d30 <__assert_func>
 801277e:	2301      	movs	r3, #1
 8012780:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012784:	4610      	mov	r0, r2
 8012786:	b003      	add	sp, #12
 8012788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801278c:	bfbc      	itt	lt
 801278e:	464b      	movlt	r3, r9
 8012790:	46a1      	movlt	r9, r4
 8012792:	4630      	mov	r0, r6
 8012794:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012798:	bfba      	itte	lt
 801279a:	461c      	movlt	r4, r3
 801279c:	2501      	movlt	r5, #1
 801279e:	2500      	movge	r5, #0
 80127a0:	f7ff fd40 	bl	8012224 <_Balloc>
 80127a4:	4602      	mov	r2, r0
 80127a6:	b918      	cbnz	r0, 80127b0 <__mdiff+0x60>
 80127a8:	4b31      	ldr	r3, [pc, #196]	@ (8012870 <__mdiff+0x120>)
 80127aa:	f240 2145 	movw	r1, #581	@ 0x245
 80127ae:	e7e3      	b.n	8012778 <__mdiff+0x28>
 80127b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80127b4:	6926      	ldr	r6, [r4, #16]
 80127b6:	60c5      	str	r5, [r0, #12]
 80127b8:	f109 0310 	add.w	r3, r9, #16
 80127bc:	f109 0514 	add.w	r5, r9, #20
 80127c0:	f104 0e14 	add.w	lr, r4, #20
 80127c4:	f100 0b14 	add.w	fp, r0, #20
 80127c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80127cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80127d0:	9301      	str	r3, [sp, #4]
 80127d2:	46d9      	mov	r9, fp
 80127d4:	f04f 0c00 	mov.w	ip, #0
 80127d8:	9b01      	ldr	r3, [sp, #4]
 80127da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80127de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80127e2:	9301      	str	r3, [sp, #4]
 80127e4:	fa1f f38a 	uxth.w	r3, sl
 80127e8:	4619      	mov	r1, r3
 80127ea:	b283      	uxth	r3, r0
 80127ec:	1acb      	subs	r3, r1, r3
 80127ee:	0c00      	lsrs	r0, r0, #16
 80127f0:	4463      	add	r3, ip
 80127f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80127f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012800:	4576      	cmp	r6, lr
 8012802:	f849 3b04 	str.w	r3, [r9], #4
 8012806:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801280a:	d8e5      	bhi.n	80127d8 <__mdiff+0x88>
 801280c:	1b33      	subs	r3, r6, r4
 801280e:	3b15      	subs	r3, #21
 8012810:	f023 0303 	bic.w	r3, r3, #3
 8012814:	3415      	adds	r4, #21
 8012816:	3304      	adds	r3, #4
 8012818:	42a6      	cmp	r6, r4
 801281a:	bf38      	it	cc
 801281c:	2304      	movcc	r3, #4
 801281e:	441d      	add	r5, r3
 8012820:	445b      	add	r3, fp
 8012822:	461e      	mov	r6, r3
 8012824:	462c      	mov	r4, r5
 8012826:	4544      	cmp	r4, r8
 8012828:	d30e      	bcc.n	8012848 <__mdiff+0xf8>
 801282a:	f108 0103 	add.w	r1, r8, #3
 801282e:	1b49      	subs	r1, r1, r5
 8012830:	f021 0103 	bic.w	r1, r1, #3
 8012834:	3d03      	subs	r5, #3
 8012836:	45a8      	cmp	r8, r5
 8012838:	bf38      	it	cc
 801283a:	2100      	movcc	r1, #0
 801283c:	440b      	add	r3, r1
 801283e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012842:	b191      	cbz	r1, 801286a <__mdiff+0x11a>
 8012844:	6117      	str	r7, [r2, #16]
 8012846:	e79d      	b.n	8012784 <__mdiff+0x34>
 8012848:	f854 1b04 	ldr.w	r1, [r4], #4
 801284c:	46e6      	mov	lr, ip
 801284e:	0c08      	lsrs	r0, r1, #16
 8012850:	fa1c fc81 	uxtah	ip, ip, r1
 8012854:	4471      	add	r1, lr
 8012856:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801285a:	b289      	uxth	r1, r1
 801285c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012860:	f846 1b04 	str.w	r1, [r6], #4
 8012864:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012868:	e7dd      	b.n	8012826 <__mdiff+0xd6>
 801286a:	3f01      	subs	r7, #1
 801286c:	e7e7      	b.n	801283e <__mdiff+0xee>
 801286e:	bf00      	nop
 8012870:	08015a14 	.word	0x08015a14
 8012874:	08015a25 	.word	0x08015a25

08012878 <__d2b>:
 8012878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801287c:	460f      	mov	r7, r1
 801287e:	2101      	movs	r1, #1
 8012880:	ec59 8b10 	vmov	r8, r9, d0
 8012884:	4616      	mov	r6, r2
 8012886:	f7ff fccd 	bl	8012224 <_Balloc>
 801288a:	4604      	mov	r4, r0
 801288c:	b930      	cbnz	r0, 801289c <__d2b+0x24>
 801288e:	4602      	mov	r2, r0
 8012890:	4b23      	ldr	r3, [pc, #140]	@ (8012920 <__d2b+0xa8>)
 8012892:	4824      	ldr	r0, [pc, #144]	@ (8012924 <__d2b+0xac>)
 8012894:	f240 310f 	movw	r1, #783	@ 0x30f
 8012898:	f000 fa4a 	bl	8012d30 <__assert_func>
 801289c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80128a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80128a4:	b10d      	cbz	r5, 80128aa <__d2b+0x32>
 80128a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80128aa:	9301      	str	r3, [sp, #4]
 80128ac:	f1b8 0300 	subs.w	r3, r8, #0
 80128b0:	d023      	beq.n	80128fa <__d2b+0x82>
 80128b2:	4668      	mov	r0, sp
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	f7ff fd7c 	bl	80123b2 <__lo0bits>
 80128ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80128be:	b1d0      	cbz	r0, 80128f6 <__d2b+0x7e>
 80128c0:	f1c0 0320 	rsb	r3, r0, #32
 80128c4:	fa02 f303 	lsl.w	r3, r2, r3
 80128c8:	430b      	orrs	r3, r1
 80128ca:	40c2      	lsrs	r2, r0
 80128cc:	6163      	str	r3, [r4, #20]
 80128ce:	9201      	str	r2, [sp, #4]
 80128d0:	9b01      	ldr	r3, [sp, #4]
 80128d2:	61a3      	str	r3, [r4, #24]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	bf0c      	ite	eq
 80128d8:	2201      	moveq	r2, #1
 80128da:	2202      	movne	r2, #2
 80128dc:	6122      	str	r2, [r4, #16]
 80128de:	b1a5      	cbz	r5, 801290a <__d2b+0x92>
 80128e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80128e4:	4405      	add	r5, r0
 80128e6:	603d      	str	r5, [r7, #0]
 80128e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80128ec:	6030      	str	r0, [r6, #0]
 80128ee:	4620      	mov	r0, r4
 80128f0:	b003      	add	sp, #12
 80128f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128f6:	6161      	str	r1, [r4, #20]
 80128f8:	e7ea      	b.n	80128d0 <__d2b+0x58>
 80128fa:	a801      	add	r0, sp, #4
 80128fc:	f7ff fd59 	bl	80123b2 <__lo0bits>
 8012900:	9b01      	ldr	r3, [sp, #4]
 8012902:	6163      	str	r3, [r4, #20]
 8012904:	3020      	adds	r0, #32
 8012906:	2201      	movs	r2, #1
 8012908:	e7e8      	b.n	80128dc <__d2b+0x64>
 801290a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801290e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012912:	6038      	str	r0, [r7, #0]
 8012914:	6918      	ldr	r0, [r3, #16]
 8012916:	f7ff fd2d 	bl	8012374 <__hi0bits>
 801291a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801291e:	e7e5      	b.n	80128ec <__d2b+0x74>
 8012920:	08015a14 	.word	0x08015a14
 8012924:	08015a25 	.word	0x08015a25

08012928 <__ssputs_r>:
 8012928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801292c:	688e      	ldr	r6, [r1, #8]
 801292e:	461f      	mov	r7, r3
 8012930:	42be      	cmp	r6, r7
 8012932:	680b      	ldr	r3, [r1, #0]
 8012934:	4682      	mov	sl, r0
 8012936:	460c      	mov	r4, r1
 8012938:	4690      	mov	r8, r2
 801293a:	d82d      	bhi.n	8012998 <__ssputs_r+0x70>
 801293c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012940:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012944:	d026      	beq.n	8012994 <__ssputs_r+0x6c>
 8012946:	6965      	ldr	r5, [r4, #20]
 8012948:	6909      	ldr	r1, [r1, #16]
 801294a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801294e:	eba3 0901 	sub.w	r9, r3, r1
 8012952:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012956:	1c7b      	adds	r3, r7, #1
 8012958:	444b      	add	r3, r9
 801295a:	106d      	asrs	r5, r5, #1
 801295c:	429d      	cmp	r5, r3
 801295e:	bf38      	it	cc
 8012960:	461d      	movcc	r5, r3
 8012962:	0553      	lsls	r3, r2, #21
 8012964:	d527      	bpl.n	80129b6 <__ssputs_r+0x8e>
 8012966:	4629      	mov	r1, r5
 8012968:	f7fd fed4 	bl	8010714 <_malloc_r>
 801296c:	4606      	mov	r6, r0
 801296e:	b360      	cbz	r0, 80129ca <__ssputs_r+0xa2>
 8012970:	6921      	ldr	r1, [r4, #16]
 8012972:	464a      	mov	r2, r9
 8012974:	f7fe fdaf 	bl	80114d6 <memcpy>
 8012978:	89a3      	ldrh	r3, [r4, #12]
 801297a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801297e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012982:	81a3      	strh	r3, [r4, #12]
 8012984:	6126      	str	r6, [r4, #16]
 8012986:	6165      	str	r5, [r4, #20]
 8012988:	444e      	add	r6, r9
 801298a:	eba5 0509 	sub.w	r5, r5, r9
 801298e:	6026      	str	r6, [r4, #0]
 8012990:	60a5      	str	r5, [r4, #8]
 8012992:	463e      	mov	r6, r7
 8012994:	42be      	cmp	r6, r7
 8012996:	d900      	bls.n	801299a <__ssputs_r+0x72>
 8012998:	463e      	mov	r6, r7
 801299a:	6820      	ldr	r0, [r4, #0]
 801299c:	4632      	mov	r2, r6
 801299e:	4641      	mov	r1, r8
 80129a0:	f7fe fcd5 	bl	801134e <memmove>
 80129a4:	68a3      	ldr	r3, [r4, #8]
 80129a6:	1b9b      	subs	r3, r3, r6
 80129a8:	60a3      	str	r3, [r4, #8]
 80129aa:	6823      	ldr	r3, [r4, #0]
 80129ac:	4433      	add	r3, r6
 80129ae:	6023      	str	r3, [r4, #0]
 80129b0:	2000      	movs	r0, #0
 80129b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129b6:	462a      	mov	r2, r5
 80129b8:	f000 f9fe 	bl	8012db8 <_realloc_r>
 80129bc:	4606      	mov	r6, r0
 80129be:	2800      	cmp	r0, #0
 80129c0:	d1e0      	bne.n	8012984 <__ssputs_r+0x5c>
 80129c2:	6921      	ldr	r1, [r4, #16]
 80129c4:	4650      	mov	r0, sl
 80129c6:	f7ff fbe3 	bl	8012190 <_free_r>
 80129ca:	230c      	movs	r3, #12
 80129cc:	f8ca 3000 	str.w	r3, [sl]
 80129d0:	89a3      	ldrh	r3, [r4, #12]
 80129d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129d6:	81a3      	strh	r3, [r4, #12]
 80129d8:	f04f 30ff 	mov.w	r0, #4294967295
 80129dc:	e7e9      	b.n	80129b2 <__ssputs_r+0x8a>
	...

080129e0 <_svfiprintf_r>:
 80129e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e4:	4698      	mov	r8, r3
 80129e6:	898b      	ldrh	r3, [r1, #12]
 80129e8:	061b      	lsls	r3, r3, #24
 80129ea:	b09d      	sub	sp, #116	@ 0x74
 80129ec:	4607      	mov	r7, r0
 80129ee:	460d      	mov	r5, r1
 80129f0:	4614      	mov	r4, r2
 80129f2:	d510      	bpl.n	8012a16 <_svfiprintf_r+0x36>
 80129f4:	690b      	ldr	r3, [r1, #16]
 80129f6:	b973      	cbnz	r3, 8012a16 <_svfiprintf_r+0x36>
 80129f8:	2140      	movs	r1, #64	@ 0x40
 80129fa:	f7fd fe8b 	bl	8010714 <_malloc_r>
 80129fe:	6028      	str	r0, [r5, #0]
 8012a00:	6128      	str	r0, [r5, #16]
 8012a02:	b930      	cbnz	r0, 8012a12 <_svfiprintf_r+0x32>
 8012a04:	230c      	movs	r3, #12
 8012a06:	603b      	str	r3, [r7, #0]
 8012a08:	f04f 30ff 	mov.w	r0, #4294967295
 8012a0c:	b01d      	add	sp, #116	@ 0x74
 8012a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a12:	2340      	movs	r3, #64	@ 0x40
 8012a14:	616b      	str	r3, [r5, #20]
 8012a16:	2300      	movs	r3, #0
 8012a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a1a:	2320      	movs	r3, #32
 8012a1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a24:	2330      	movs	r3, #48	@ 0x30
 8012a26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012bc4 <_svfiprintf_r+0x1e4>
 8012a2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012a2e:	f04f 0901 	mov.w	r9, #1
 8012a32:	4623      	mov	r3, r4
 8012a34:	469a      	mov	sl, r3
 8012a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a3a:	b10a      	cbz	r2, 8012a40 <_svfiprintf_r+0x60>
 8012a3c:	2a25      	cmp	r2, #37	@ 0x25
 8012a3e:	d1f9      	bne.n	8012a34 <_svfiprintf_r+0x54>
 8012a40:	ebba 0b04 	subs.w	fp, sl, r4
 8012a44:	d00b      	beq.n	8012a5e <_svfiprintf_r+0x7e>
 8012a46:	465b      	mov	r3, fp
 8012a48:	4622      	mov	r2, r4
 8012a4a:	4629      	mov	r1, r5
 8012a4c:	4638      	mov	r0, r7
 8012a4e:	f7ff ff6b 	bl	8012928 <__ssputs_r>
 8012a52:	3001      	adds	r0, #1
 8012a54:	f000 80a7 	beq.w	8012ba6 <_svfiprintf_r+0x1c6>
 8012a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a5a:	445a      	add	r2, fp
 8012a5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f000 809f 	beq.w	8012ba6 <_svfiprintf_r+0x1c6>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8012a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a72:	f10a 0a01 	add.w	sl, sl, #1
 8012a76:	9304      	str	r3, [sp, #16]
 8012a78:	9307      	str	r3, [sp, #28]
 8012a7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a80:	4654      	mov	r4, sl
 8012a82:	2205      	movs	r2, #5
 8012a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a88:	484e      	ldr	r0, [pc, #312]	@ (8012bc4 <_svfiprintf_r+0x1e4>)
 8012a8a:	f7ed fbb1 	bl	80001f0 <memchr>
 8012a8e:	9a04      	ldr	r2, [sp, #16]
 8012a90:	b9d8      	cbnz	r0, 8012aca <_svfiprintf_r+0xea>
 8012a92:	06d0      	lsls	r0, r2, #27
 8012a94:	bf44      	itt	mi
 8012a96:	2320      	movmi	r3, #32
 8012a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a9c:	0711      	lsls	r1, r2, #28
 8012a9e:	bf44      	itt	mi
 8012aa0:	232b      	movmi	r3, #43	@ 0x2b
 8012aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8012aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8012aac:	d015      	beq.n	8012ada <_svfiprintf_r+0xfa>
 8012aae:	9a07      	ldr	r2, [sp, #28]
 8012ab0:	4654      	mov	r4, sl
 8012ab2:	2000      	movs	r0, #0
 8012ab4:	f04f 0c0a 	mov.w	ip, #10
 8012ab8:	4621      	mov	r1, r4
 8012aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012abe:	3b30      	subs	r3, #48	@ 0x30
 8012ac0:	2b09      	cmp	r3, #9
 8012ac2:	d94b      	bls.n	8012b5c <_svfiprintf_r+0x17c>
 8012ac4:	b1b0      	cbz	r0, 8012af4 <_svfiprintf_r+0x114>
 8012ac6:	9207      	str	r2, [sp, #28]
 8012ac8:	e014      	b.n	8012af4 <_svfiprintf_r+0x114>
 8012aca:	eba0 0308 	sub.w	r3, r0, r8
 8012ace:	fa09 f303 	lsl.w	r3, r9, r3
 8012ad2:	4313      	orrs	r3, r2
 8012ad4:	9304      	str	r3, [sp, #16]
 8012ad6:	46a2      	mov	sl, r4
 8012ad8:	e7d2      	b.n	8012a80 <_svfiprintf_r+0xa0>
 8012ada:	9b03      	ldr	r3, [sp, #12]
 8012adc:	1d19      	adds	r1, r3, #4
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	9103      	str	r1, [sp, #12]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	bfbb      	ittet	lt
 8012ae6:	425b      	neglt	r3, r3
 8012ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8012aec:	9307      	strge	r3, [sp, #28]
 8012aee:	9307      	strlt	r3, [sp, #28]
 8012af0:	bfb8      	it	lt
 8012af2:	9204      	strlt	r2, [sp, #16]
 8012af4:	7823      	ldrb	r3, [r4, #0]
 8012af6:	2b2e      	cmp	r3, #46	@ 0x2e
 8012af8:	d10a      	bne.n	8012b10 <_svfiprintf_r+0x130>
 8012afa:	7863      	ldrb	r3, [r4, #1]
 8012afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8012afe:	d132      	bne.n	8012b66 <_svfiprintf_r+0x186>
 8012b00:	9b03      	ldr	r3, [sp, #12]
 8012b02:	1d1a      	adds	r2, r3, #4
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	9203      	str	r2, [sp, #12]
 8012b08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012b0c:	3402      	adds	r4, #2
 8012b0e:	9305      	str	r3, [sp, #20]
 8012b10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012bd4 <_svfiprintf_r+0x1f4>
 8012b14:	7821      	ldrb	r1, [r4, #0]
 8012b16:	2203      	movs	r2, #3
 8012b18:	4650      	mov	r0, sl
 8012b1a:	f7ed fb69 	bl	80001f0 <memchr>
 8012b1e:	b138      	cbz	r0, 8012b30 <_svfiprintf_r+0x150>
 8012b20:	9b04      	ldr	r3, [sp, #16]
 8012b22:	eba0 000a 	sub.w	r0, r0, sl
 8012b26:	2240      	movs	r2, #64	@ 0x40
 8012b28:	4082      	lsls	r2, r0
 8012b2a:	4313      	orrs	r3, r2
 8012b2c:	3401      	adds	r4, #1
 8012b2e:	9304      	str	r3, [sp, #16]
 8012b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b34:	4824      	ldr	r0, [pc, #144]	@ (8012bc8 <_svfiprintf_r+0x1e8>)
 8012b36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012b3a:	2206      	movs	r2, #6
 8012b3c:	f7ed fb58 	bl	80001f0 <memchr>
 8012b40:	2800      	cmp	r0, #0
 8012b42:	d036      	beq.n	8012bb2 <_svfiprintf_r+0x1d2>
 8012b44:	4b21      	ldr	r3, [pc, #132]	@ (8012bcc <_svfiprintf_r+0x1ec>)
 8012b46:	bb1b      	cbnz	r3, 8012b90 <_svfiprintf_r+0x1b0>
 8012b48:	9b03      	ldr	r3, [sp, #12]
 8012b4a:	3307      	adds	r3, #7
 8012b4c:	f023 0307 	bic.w	r3, r3, #7
 8012b50:	3308      	adds	r3, #8
 8012b52:	9303      	str	r3, [sp, #12]
 8012b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b56:	4433      	add	r3, r6
 8012b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b5a:	e76a      	b.n	8012a32 <_svfiprintf_r+0x52>
 8012b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b60:	460c      	mov	r4, r1
 8012b62:	2001      	movs	r0, #1
 8012b64:	e7a8      	b.n	8012ab8 <_svfiprintf_r+0xd8>
 8012b66:	2300      	movs	r3, #0
 8012b68:	3401      	adds	r4, #1
 8012b6a:	9305      	str	r3, [sp, #20]
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	f04f 0c0a 	mov.w	ip, #10
 8012b72:	4620      	mov	r0, r4
 8012b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b78:	3a30      	subs	r2, #48	@ 0x30
 8012b7a:	2a09      	cmp	r2, #9
 8012b7c:	d903      	bls.n	8012b86 <_svfiprintf_r+0x1a6>
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d0c6      	beq.n	8012b10 <_svfiprintf_r+0x130>
 8012b82:	9105      	str	r1, [sp, #20]
 8012b84:	e7c4      	b.n	8012b10 <_svfiprintf_r+0x130>
 8012b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	e7f0      	b.n	8012b72 <_svfiprintf_r+0x192>
 8012b90:	ab03      	add	r3, sp, #12
 8012b92:	9300      	str	r3, [sp, #0]
 8012b94:	462a      	mov	r2, r5
 8012b96:	4b0e      	ldr	r3, [pc, #56]	@ (8012bd0 <_svfiprintf_r+0x1f0>)
 8012b98:	a904      	add	r1, sp, #16
 8012b9a:	4638      	mov	r0, r7
 8012b9c:	f7fd fee6 	bl	801096c <_printf_float>
 8012ba0:	1c42      	adds	r2, r0, #1
 8012ba2:	4606      	mov	r6, r0
 8012ba4:	d1d6      	bne.n	8012b54 <_svfiprintf_r+0x174>
 8012ba6:	89ab      	ldrh	r3, [r5, #12]
 8012ba8:	065b      	lsls	r3, r3, #25
 8012baa:	f53f af2d 	bmi.w	8012a08 <_svfiprintf_r+0x28>
 8012bae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012bb0:	e72c      	b.n	8012a0c <_svfiprintf_r+0x2c>
 8012bb2:	ab03      	add	r3, sp, #12
 8012bb4:	9300      	str	r3, [sp, #0]
 8012bb6:	462a      	mov	r2, r5
 8012bb8:	4b05      	ldr	r3, [pc, #20]	@ (8012bd0 <_svfiprintf_r+0x1f0>)
 8012bba:	a904      	add	r1, sp, #16
 8012bbc:	4638      	mov	r0, r7
 8012bbe:	f7fe f96d 	bl	8010e9c <_printf_i>
 8012bc2:	e7ed      	b.n	8012ba0 <_svfiprintf_r+0x1c0>
 8012bc4:	08015b80 	.word	0x08015b80
 8012bc8:	08015b8a 	.word	0x08015b8a
 8012bcc:	0801096d 	.word	0x0801096d
 8012bd0:	08012929 	.word	0x08012929
 8012bd4:	08015b86 	.word	0x08015b86

08012bd8 <__sflush_r>:
 8012bd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012be0:	0716      	lsls	r6, r2, #28
 8012be2:	4605      	mov	r5, r0
 8012be4:	460c      	mov	r4, r1
 8012be6:	d454      	bmi.n	8012c92 <__sflush_r+0xba>
 8012be8:	684b      	ldr	r3, [r1, #4]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	dc02      	bgt.n	8012bf4 <__sflush_r+0x1c>
 8012bee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	dd48      	ble.n	8012c86 <__sflush_r+0xae>
 8012bf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012bf6:	2e00      	cmp	r6, #0
 8012bf8:	d045      	beq.n	8012c86 <__sflush_r+0xae>
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012c00:	682f      	ldr	r7, [r5, #0]
 8012c02:	6a21      	ldr	r1, [r4, #32]
 8012c04:	602b      	str	r3, [r5, #0]
 8012c06:	d030      	beq.n	8012c6a <__sflush_r+0x92>
 8012c08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012c0a:	89a3      	ldrh	r3, [r4, #12]
 8012c0c:	0759      	lsls	r1, r3, #29
 8012c0e:	d505      	bpl.n	8012c1c <__sflush_r+0x44>
 8012c10:	6863      	ldr	r3, [r4, #4]
 8012c12:	1ad2      	subs	r2, r2, r3
 8012c14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012c16:	b10b      	cbz	r3, 8012c1c <__sflush_r+0x44>
 8012c18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012c1a:	1ad2      	subs	r2, r2, r3
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012c20:	6a21      	ldr	r1, [r4, #32]
 8012c22:	4628      	mov	r0, r5
 8012c24:	47b0      	blx	r6
 8012c26:	1c43      	adds	r3, r0, #1
 8012c28:	89a3      	ldrh	r3, [r4, #12]
 8012c2a:	d106      	bne.n	8012c3a <__sflush_r+0x62>
 8012c2c:	6829      	ldr	r1, [r5, #0]
 8012c2e:	291d      	cmp	r1, #29
 8012c30:	d82b      	bhi.n	8012c8a <__sflush_r+0xb2>
 8012c32:	4a2a      	ldr	r2, [pc, #168]	@ (8012cdc <__sflush_r+0x104>)
 8012c34:	410a      	asrs	r2, r1
 8012c36:	07d6      	lsls	r6, r2, #31
 8012c38:	d427      	bmi.n	8012c8a <__sflush_r+0xb2>
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	6062      	str	r2, [r4, #4]
 8012c3e:	04d9      	lsls	r1, r3, #19
 8012c40:	6922      	ldr	r2, [r4, #16]
 8012c42:	6022      	str	r2, [r4, #0]
 8012c44:	d504      	bpl.n	8012c50 <__sflush_r+0x78>
 8012c46:	1c42      	adds	r2, r0, #1
 8012c48:	d101      	bne.n	8012c4e <__sflush_r+0x76>
 8012c4a:	682b      	ldr	r3, [r5, #0]
 8012c4c:	b903      	cbnz	r3, 8012c50 <__sflush_r+0x78>
 8012c4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c52:	602f      	str	r7, [r5, #0]
 8012c54:	b1b9      	cbz	r1, 8012c86 <__sflush_r+0xae>
 8012c56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c5a:	4299      	cmp	r1, r3
 8012c5c:	d002      	beq.n	8012c64 <__sflush_r+0x8c>
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f7ff fa96 	bl	8012190 <_free_r>
 8012c64:	2300      	movs	r3, #0
 8012c66:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c68:	e00d      	b.n	8012c86 <__sflush_r+0xae>
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	47b0      	blx	r6
 8012c70:	4602      	mov	r2, r0
 8012c72:	1c50      	adds	r0, r2, #1
 8012c74:	d1c9      	bne.n	8012c0a <__sflush_r+0x32>
 8012c76:	682b      	ldr	r3, [r5, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d0c6      	beq.n	8012c0a <__sflush_r+0x32>
 8012c7c:	2b1d      	cmp	r3, #29
 8012c7e:	d001      	beq.n	8012c84 <__sflush_r+0xac>
 8012c80:	2b16      	cmp	r3, #22
 8012c82:	d11e      	bne.n	8012cc2 <__sflush_r+0xea>
 8012c84:	602f      	str	r7, [r5, #0]
 8012c86:	2000      	movs	r0, #0
 8012c88:	e022      	b.n	8012cd0 <__sflush_r+0xf8>
 8012c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c8e:	b21b      	sxth	r3, r3
 8012c90:	e01b      	b.n	8012cca <__sflush_r+0xf2>
 8012c92:	690f      	ldr	r7, [r1, #16]
 8012c94:	2f00      	cmp	r7, #0
 8012c96:	d0f6      	beq.n	8012c86 <__sflush_r+0xae>
 8012c98:	0793      	lsls	r3, r2, #30
 8012c9a:	680e      	ldr	r6, [r1, #0]
 8012c9c:	bf08      	it	eq
 8012c9e:	694b      	ldreq	r3, [r1, #20]
 8012ca0:	600f      	str	r7, [r1, #0]
 8012ca2:	bf18      	it	ne
 8012ca4:	2300      	movne	r3, #0
 8012ca6:	eba6 0807 	sub.w	r8, r6, r7
 8012caa:	608b      	str	r3, [r1, #8]
 8012cac:	f1b8 0f00 	cmp.w	r8, #0
 8012cb0:	dde9      	ble.n	8012c86 <__sflush_r+0xae>
 8012cb2:	6a21      	ldr	r1, [r4, #32]
 8012cb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012cb6:	4643      	mov	r3, r8
 8012cb8:	463a      	mov	r2, r7
 8012cba:	4628      	mov	r0, r5
 8012cbc:	47b0      	blx	r6
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	dc08      	bgt.n	8012cd4 <__sflush_r+0xfc>
 8012cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012cca:	81a3      	strh	r3, [r4, #12]
 8012ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8012cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd4:	4407      	add	r7, r0
 8012cd6:	eba8 0800 	sub.w	r8, r8, r0
 8012cda:	e7e7      	b.n	8012cac <__sflush_r+0xd4>
 8012cdc:	dfbffffe 	.word	0xdfbffffe

08012ce0 <_fflush_r>:
 8012ce0:	b538      	push	{r3, r4, r5, lr}
 8012ce2:	690b      	ldr	r3, [r1, #16]
 8012ce4:	4605      	mov	r5, r0
 8012ce6:	460c      	mov	r4, r1
 8012ce8:	b913      	cbnz	r3, 8012cf0 <_fflush_r+0x10>
 8012cea:	2500      	movs	r5, #0
 8012cec:	4628      	mov	r0, r5
 8012cee:	bd38      	pop	{r3, r4, r5, pc}
 8012cf0:	b118      	cbz	r0, 8012cfa <_fflush_r+0x1a>
 8012cf2:	6a03      	ldr	r3, [r0, #32]
 8012cf4:	b90b      	cbnz	r3, 8012cfa <_fflush_r+0x1a>
 8012cf6:	f7fe fa7d 	bl	80111f4 <__sinit>
 8012cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d0f3      	beq.n	8012cea <_fflush_r+0xa>
 8012d02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012d04:	07d0      	lsls	r0, r2, #31
 8012d06:	d404      	bmi.n	8012d12 <_fflush_r+0x32>
 8012d08:	0599      	lsls	r1, r3, #22
 8012d0a:	d402      	bmi.n	8012d12 <_fflush_r+0x32>
 8012d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d0e:	f7fe fbd8 	bl	80114c2 <__retarget_lock_acquire_recursive>
 8012d12:	4628      	mov	r0, r5
 8012d14:	4621      	mov	r1, r4
 8012d16:	f7ff ff5f 	bl	8012bd8 <__sflush_r>
 8012d1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d1c:	07da      	lsls	r2, r3, #31
 8012d1e:	4605      	mov	r5, r0
 8012d20:	d4e4      	bmi.n	8012cec <_fflush_r+0xc>
 8012d22:	89a3      	ldrh	r3, [r4, #12]
 8012d24:	059b      	lsls	r3, r3, #22
 8012d26:	d4e1      	bmi.n	8012cec <_fflush_r+0xc>
 8012d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d2a:	f7fe fbcb 	bl	80114c4 <__retarget_lock_release_recursive>
 8012d2e:	e7dd      	b.n	8012cec <_fflush_r+0xc>

08012d30 <__assert_func>:
 8012d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d32:	4614      	mov	r4, r2
 8012d34:	461a      	mov	r2, r3
 8012d36:	4b09      	ldr	r3, [pc, #36]	@ (8012d5c <__assert_func+0x2c>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4605      	mov	r5, r0
 8012d3c:	68d8      	ldr	r0, [r3, #12]
 8012d3e:	b954      	cbnz	r4, 8012d56 <__assert_func+0x26>
 8012d40:	4b07      	ldr	r3, [pc, #28]	@ (8012d60 <__assert_func+0x30>)
 8012d42:	461c      	mov	r4, r3
 8012d44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d48:	9100      	str	r1, [sp, #0]
 8012d4a:	462b      	mov	r3, r5
 8012d4c:	4905      	ldr	r1, [pc, #20]	@ (8012d64 <__assert_func+0x34>)
 8012d4e:	f000 f86f 	bl	8012e30 <fiprintf>
 8012d52:	f000 f87f 	bl	8012e54 <abort>
 8012d56:	4b04      	ldr	r3, [pc, #16]	@ (8012d68 <__assert_func+0x38>)
 8012d58:	e7f4      	b.n	8012d44 <__assert_func+0x14>
 8012d5a:	bf00      	nop
 8012d5c:	200000d4 	.word	0x200000d4
 8012d60:	08015bd6 	.word	0x08015bd6
 8012d64:	08015ba8 	.word	0x08015ba8
 8012d68:	08015b9b 	.word	0x08015b9b

08012d6c <_calloc_r>:
 8012d6c:	b570      	push	{r4, r5, r6, lr}
 8012d6e:	fba1 5402 	umull	r5, r4, r1, r2
 8012d72:	b93c      	cbnz	r4, 8012d84 <_calloc_r+0x18>
 8012d74:	4629      	mov	r1, r5
 8012d76:	f7fd fccd 	bl	8010714 <_malloc_r>
 8012d7a:	4606      	mov	r6, r0
 8012d7c:	b928      	cbnz	r0, 8012d8a <_calloc_r+0x1e>
 8012d7e:	2600      	movs	r6, #0
 8012d80:	4630      	mov	r0, r6
 8012d82:	bd70      	pop	{r4, r5, r6, pc}
 8012d84:	220c      	movs	r2, #12
 8012d86:	6002      	str	r2, [r0, #0]
 8012d88:	e7f9      	b.n	8012d7e <_calloc_r+0x12>
 8012d8a:	462a      	mov	r2, r5
 8012d8c:	4621      	mov	r1, r4
 8012d8e:	f7fe faf8 	bl	8011382 <memset>
 8012d92:	e7f5      	b.n	8012d80 <_calloc_r+0x14>

08012d94 <__ascii_mbtowc>:
 8012d94:	b082      	sub	sp, #8
 8012d96:	b901      	cbnz	r1, 8012d9a <__ascii_mbtowc+0x6>
 8012d98:	a901      	add	r1, sp, #4
 8012d9a:	b142      	cbz	r2, 8012dae <__ascii_mbtowc+0x1a>
 8012d9c:	b14b      	cbz	r3, 8012db2 <__ascii_mbtowc+0x1e>
 8012d9e:	7813      	ldrb	r3, [r2, #0]
 8012da0:	600b      	str	r3, [r1, #0]
 8012da2:	7812      	ldrb	r2, [r2, #0]
 8012da4:	1e10      	subs	r0, r2, #0
 8012da6:	bf18      	it	ne
 8012da8:	2001      	movne	r0, #1
 8012daa:	b002      	add	sp, #8
 8012dac:	4770      	bx	lr
 8012dae:	4610      	mov	r0, r2
 8012db0:	e7fb      	b.n	8012daa <__ascii_mbtowc+0x16>
 8012db2:	f06f 0001 	mvn.w	r0, #1
 8012db6:	e7f8      	b.n	8012daa <__ascii_mbtowc+0x16>

08012db8 <_realloc_r>:
 8012db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dbc:	4680      	mov	r8, r0
 8012dbe:	4615      	mov	r5, r2
 8012dc0:	460c      	mov	r4, r1
 8012dc2:	b921      	cbnz	r1, 8012dce <_realloc_r+0x16>
 8012dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dc8:	4611      	mov	r1, r2
 8012dca:	f7fd bca3 	b.w	8010714 <_malloc_r>
 8012dce:	b92a      	cbnz	r2, 8012ddc <_realloc_r+0x24>
 8012dd0:	f7ff f9de 	bl	8012190 <_free_r>
 8012dd4:	2400      	movs	r4, #0
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ddc:	f000 f841 	bl	8012e62 <_malloc_usable_size_r>
 8012de0:	4285      	cmp	r5, r0
 8012de2:	4606      	mov	r6, r0
 8012de4:	d802      	bhi.n	8012dec <_realloc_r+0x34>
 8012de6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012dea:	d8f4      	bhi.n	8012dd6 <_realloc_r+0x1e>
 8012dec:	4629      	mov	r1, r5
 8012dee:	4640      	mov	r0, r8
 8012df0:	f7fd fc90 	bl	8010714 <_malloc_r>
 8012df4:	4607      	mov	r7, r0
 8012df6:	2800      	cmp	r0, #0
 8012df8:	d0ec      	beq.n	8012dd4 <_realloc_r+0x1c>
 8012dfa:	42b5      	cmp	r5, r6
 8012dfc:	462a      	mov	r2, r5
 8012dfe:	4621      	mov	r1, r4
 8012e00:	bf28      	it	cs
 8012e02:	4632      	movcs	r2, r6
 8012e04:	f7fe fb67 	bl	80114d6 <memcpy>
 8012e08:	4621      	mov	r1, r4
 8012e0a:	4640      	mov	r0, r8
 8012e0c:	f7ff f9c0 	bl	8012190 <_free_r>
 8012e10:	463c      	mov	r4, r7
 8012e12:	e7e0      	b.n	8012dd6 <_realloc_r+0x1e>

08012e14 <__ascii_wctomb>:
 8012e14:	4603      	mov	r3, r0
 8012e16:	4608      	mov	r0, r1
 8012e18:	b141      	cbz	r1, 8012e2c <__ascii_wctomb+0x18>
 8012e1a:	2aff      	cmp	r2, #255	@ 0xff
 8012e1c:	d904      	bls.n	8012e28 <__ascii_wctomb+0x14>
 8012e1e:	228a      	movs	r2, #138	@ 0x8a
 8012e20:	601a      	str	r2, [r3, #0]
 8012e22:	f04f 30ff 	mov.w	r0, #4294967295
 8012e26:	4770      	bx	lr
 8012e28:	700a      	strb	r2, [r1, #0]
 8012e2a:	2001      	movs	r0, #1
 8012e2c:	4770      	bx	lr
	...

08012e30 <fiprintf>:
 8012e30:	b40e      	push	{r1, r2, r3}
 8012e32:	b503      	push	{r0, r1, lr}
 8012e34:	4601      	mov	r1, r0
 8012e36:	ab03      	add	r3, sp, #12
 8012e38:	4805      	ldr	r0, [pc, #20]	@ (8012e50 <fiprintf+0x20>)
 8012e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e3e:	6800      	ldr	r0, [r0, #0]
 8012e40:	9301      	str	r3, [sp, #4]
 8012e42:	f000 f83f 	bl	8012ec4 <_vfiprintf_r>
 8012e46:	b002      	add	sp, #8
 8012e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e4c:	b003      	add	sp, #12
 8012e4e:	4770      	bx	lr
 8012e50:	200000d4 	.word	0x200000d4

08012e54 <abort>:
 8012e54:	b508      	push	{r3, lr}
 8012e56:	2006      	movs	r0, #6
 8012e58:	f000 fa08 	bl	801326c <raise>
 8012e5c:	2001      	movs	r0, #1
 8012e5e:	f7ef fca5 	bl	80027ac <_exit>

08012e62 <_malloc_usable_size_r>:
 8012e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e66:	1f18      	subs	r0, r3, #4
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	bfbc      	itt	lt
 8012e6c:	580b      	ldrlt	r3, [r1, r0]
 8012e6e:	18c0      	addlt	r0, r0, r3
 8012e70:	4770      	bx	lr

08012e72 <__sfputc_r>:
 8012e72:	6893      	ldr	r3, [r2, #8]
 8012e74:	3b01      	subs	r3, #1
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	b410      	push	{r4}
 8012e7a:	6093      	str	r3, [r2, #8]
 8012e7c:	da08      	bge.n	8012e90 <__sfputc_r+0x1e>
 8012e7e:	6994      	ldr	r4, [r2, #24]
 8012e80:	42a3      	cmp	r3, r4
 8012e82:	db01      	blt.n	8012e88 <__sfputc_r+0x16>
 8012e84:	290a      	cmp	r1, #10
 8012e86:	d103      	bne.n	8012e90 <__sfputc_r+0x1e>
 8012e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e8c:	f000 b932 	b.w	80130f4 <__swbuf_r>
 8012e90:	6813      	ldr	r3, [r2, #0]
 8012e92:	1c58      	adds	r0, r3, #1
 8012e94:	6010      	str	r0, [r2, #0]
 8012e96:	7019      	strb	r1, [r3, #0]
 8012e98:	4608      	mov	r0, r1
 8012e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e9e:	4770      	bx	lr

08012ea0 <__sfputs_r>:
 8012ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea2:	4606      	mov	r6, r0
 8012ea4:	460f      	mov	r7, r1
 8012ea6:	4614      	mov	r4, r2
 8012ea8:	18d5      	adds	r5, r2, r3
 8012eaa:	42ac      	cmp	r4, r5
 8012eac:	d101      	bne.n	8012eb2 <__sfputs_r+0x12>
 8012eae:	2000      	movs	r0, #0
 8012eb0:	e007      	b.n	8012ec2 <__sfputs_r+0x22>
 8012eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eb6:	463a      	mov	r2, r7
 8012eb8:	4630      	mov	r0, r6
 8012eba:	f7ff ffda 	bl	8012e72 <__sfputc_r>
 8012ebe:	1c43      	adds	r3, r0, #1
 8012ec0:	d1f3      	bne.n	8012eaa <__sfputs_r+0xa>
 8012ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ec4 <_vfiprintf_r>:
 8012ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec8:	460d      	mov	r5, r1
 8012eca:	b09d      	sub	sp, #116	@ 0x74
 8012ecc:	4614      	mov	r4, r2
 8012ece:	4698      	mov	r8, r3
 8012ed0:	4606      	mov	r6, r0
 8012ed2:	b118      	cbz	r0, 8012edc <_vfiprintf_r+0x18>
 8012ed4:	6a03      	ldr	r3, [r0, #32]
 8012ed6:	b90b      	cbnz	r3, 8012edc <_vfiprintf_r+0x18>
 8012ed8:	f7fe f98c 	bl	80111f4 <__sinit>
 8012edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ede:	07d9      	lsls	r1, r3, #31
 8012ee0:	d405      	bmi.n	8012eee <_vfiprintf_r+0x2a>
 8012ee2:	89ab      	ldrh	r3, [r5, #12]
 8012ee4:	059a      	lsls	r2, r3, #22
 8012ee6:	d402      	bmi.n	8012eee <_vfiprintf_r+0x2a>
 8012ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012eea:	f7fe faea 	bl	80114c2 <__retarget_lock_acquire_recursive>
 8012eee:	89ab      	ldrh	r3, [r5, #12]
 8012ef0:	071b      	lsls	r3, r3, #28
 8012ef2:	d501      	bpl.n	8012ef8 <_vfiprintf_r+0x34>
 8012ef4:	692b      	ldr	r3, [r5, #16]
 8012ef6:	b99b      	cbnz	r3, 8012f20 <_vfiprintf_r+0x5c>
 8012ef8:	4629      	mov	r1, r5
 8012efa:	4630      	mov	r0, r6
 8012efc:	f000 f938 	bl	8013170 <__swsetup_r>
 8012f00:	b170      	cbz	r0, 8012f20 <_vfiprintf_r+0x5c>
 8012f02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012f04:	07dc      	lsls	r4, r3, #31
 8012f06:	d504      	bpl.n	8012f12 <_vfiprintf_r+0x4e>
 8012f08:	f04f 30ff 	mov.w	r0, #4294967295
 8012f0c:	b01d      	add	sp, #116	@ 0x74
 8012f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f12:	89ab      	ldrh	r3, [r5, #12]
 8012f14:	0598      	lsls	r0, r3, #22
 8012f16:	d4f7      	bmi.n	8012f08 <_vfiprintf_r+0x44>
 8012f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012f1a:	f7fe fad3 	bl	80114c4 <__retarget_lock_release_recursive>
 8012f1e:	e7f3      	b.n	8012f08 <_vfiprintf_r+0x44>
 8012f20:	2300      	movs	r3, #0
 8012f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f24:	2320      	movs	r3, #32
 8012f26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f2e:	2330      	movs	r3, #48	@ 0x30
 8012f30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80130e0 <_vfiprintf_r+0x21c>
 8012f34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012f38:	f04f 0901 	mov.w	r9, #1
 8012f3c:	4623      	mov	r3, r4
 8012f3e:	469a      	mov	sl, r3
 8012f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f44:	b10a      	cbz	r2, 8012f4a <_vfiprintf_r+0x86>
 8012f46:	2a25      	cmp	r2, #37	@ 0x25
 8012f48:	d1f9      	bne.n	8012f3e <_vfiprintf_r+0x7a>
 8012f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8012f4e:	d00b      	beq.n	8012f68 <_vfiprintf_r+0xa4>
 8012f50:	465b      	mov	r3, fp
 8012f52:	4622      	mov	r2, r4
 8012f54:	4629      	mov	r1, r5
 8012f56:	4630      	mov	r0, r6
 8012f58:	f7ff ffa2 	bl	8012ea0 <__sfputs_r>
 8012f5c:	3001      	adds	r0, #1
 8012f5e:	f000 80a7 	beq.w	80130b0 <_vfiprintf_r+0x1ec>
 8012f62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f64:	445a      	add	r2, fp
 8012f66:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f68:	f89a 3000 	ldrb.w	r3, [sl]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	f000 809f 	beq.w	80130b0 <_vfiprintf_r+0x1ec>
 8012f72:	2300      	movs	r3, #0
 8012f74:	f04f 32ff 	mov.w	r2, #4294967295
 8012f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f7c:	f10a 0a01 	add.w	sl, sl, #1
 8012f80:	9304      	str	r3, [sp, #16]
 8012f82:	9307      	str	r3, [sp, #28]
 8012f84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f88:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f8a:	4654      	mov	r4, sl
 8012f8c:	2205      	movs	r2, #5
 8012f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f92:	4853      	ldr	r0, [pc, #332]	@ (80130e0 <_vfiprintf_r+0x21c>)
 8012f94:	f7ed f92c 	bl	80001f0 <memchr>
 8012f98:	9a04      	ldr	r2, [sp, #16]
 8012f9a:	b9d8      	cbnz	r0, 8012fd4 <_vfiprintf_r+0x110>
 8012f9c:	06d1      	lsls	r1, r2, #27
 8012f9e:	bf44      	itt	mi
 8012fa0:	2320      	movmi	r3, #32
 8012fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012fa6:	0713      	lsls	r3, r2, #28
 8012fa8:	bf44      	itt	mi
 8012faa:	232b      	movmi	r3, #43	@ 0x2b
 8012fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8012fb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8012fb6:	d015      	beq.n	8012fe4 <_vfiprintf_r+0x120>
 8012fb8:	9a07      	ldr	r2, [sp, #28]
 8012fba:	4654      	mov	r4, sl
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	f04f 0c0a 	mov.w	ip, #10
 8012fc2:	4621      	mov	r1, r4
 8012fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fc8:	3b30      	subs	r3, #48	@ 0x30
 8012fca:	2b09      	cmp	r3, #9
 8012fcc:	d94b      	bls.n	8013066 <_vfiprintf_r+0x1a2>
 8012fce:	b1b0      	cbz	r0, 8012ffe <_vfiprintf_r+0x13a>
 8012fd0:	9207      	str	r2, [sp, #28]
 8012fd2:	e014      	b.n	8012ffe <_vfiprintf_r+0x13a>
 8012fd4:	eba0 0308 	sub.w	r3, r0, r8
 8012fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	9304      	str	r3, [sp, #16]
 8012fe0:	46a2      	mov	sl, r4
 8012fe2:	e7d2      	b.n	8012f8a <_vfiprintf_r+0xc6>
 8012fe4:	9b03      	ldr	r3, [sp, #12]
 8012fe6:	1d19      	adds	r1, r3, #4
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	9103      	str	r1, [sp, #12]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	bfbb      	ittet	lt
 8012ff0:	425b      	neglt	r3, r3
 8012ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8012ff6:	9307      	strge	r3, [sp, #28]
 8012ff8:	9307      	strlt	r3, [sp, #28]
 8012ffa:	bfb8      	it	lt
 8012ffc:	9204      	strlt	r2, [sp, #16]
 8012ffe:	7823      	ldrb	r3, [r4, #0]
 8013000:	2b2e      	cmp	r3, #46	@ 0x2e
 8013002:	d10a      	bne.n	801301a <_vfiprintf_r+0x156>
 8013004:	7863      	ldrb	r3, [r4, #1]
 8013006:	2b2a      	cmp	r3, #42	@ 0x2a
 8013008:	d132      	bne.n	8013070 <_vfiprintf_r+0x1ac>
 801300a:	9b03      	ldr	r3, [sp, #12]
 801300c:	1d1a      	adds	r2, r3, #4
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	9203      	str	r2, [sp, #12]
 8013012:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013016:	3402      	adds	r4, #2
 8013018:	9305      	str	r3, [sp, #20]
 801301a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80130f0 <_vfiprintf_r+0x22c>
 801301e:	7821      	ldrb	r1, [r4, #0]
 8013020:	2203      	movs	r2, #3
 8013022:	4650      	mov	r0, sl
 8013024:	f7ed f8e4 	bl	80001f0 <memchr>
 8013028:	b138      	cbz	r0, 801303a <_vfiprintf_r+0x176>
 801302a:	9b04      	ldr	r3, [sp, #16]
 801302c:	eba0 000a 	sub.w	r0, r0, sl
 8013030:	2240      	movs	r2, #64	@ 0x40
 8013032:	4082      	lsls	r2, r0
 8013034:	4313      	orrs	r3, r2
 8013036:	3401      	adds	r4, #1
 8013038:	9304      	str	r3, [sp, #16]
 801303a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801303e:	4829      	ldr	r0, [pc, #164]	@ (80130e4 <_vfiprintf_r+0x220>)
 8013040:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013044:	2206      	movs	r2, #6
 8013046:	f7ed f8d3 	bl	80001f0 <memchr>
 801304a:	2800      	cmp	r0, #0
 801304c:	d03f      	beq.n	80130ce <_vfiprintf_r+0x20a>
 801304e:	4b26      	ldr	r3, [pc, #152]	@ (80130e8 <_vfiprintf_r+0x224>)
 8013050:	bb1b      	cbnz	r3, 801309a <_vfiprintf_r+0x1d6>
 8013052:	9b03      	ldr	r3, [sp, #12]
 8013054:	3307      	adds	r3, #7
 8013056:	f023 0307 	bic.w	r3, r3, #7
 801305a:	3308      	adds	r3, #8
 801305c:	9303      	str	r3, [sp, #12]
 801305e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013060:	443b      	add	r3, r7
 8013062:	9309      	str	r3, [sp, #36]	@ 0x24
 8013064:	e76a      	b.n	8012f3c <_vfiprintf_r+0x78>
 8013066:	fb0c 3202 	mla	r2, ip, r2, r3
 801306a:	460c      	mov	r4, r1
 801306c:	2001      	movs	r0, #1
 801306e:	e7a8      	b.n	8012fc2 <_vfiprintf_r+0xfe>
 8013070:	2300      	movs	r3, #0
 8013072:	3401      	adds	r4, #1
 8013074:	9305      	str	r3, [sp, #20]
 8013076:	4619      	mov	r1, r3
 8013078:	f04f 0c0a 	mov.w	ip, #10
 801307c:	4620      	mov	r0, r4
 801307e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013082:	3a30      	subs	r2, #48	@ 0x30
 8013084:	2a09      	cmp	r2, #9
 8013086:	d903      	bls.n	8013090 <_vfiprintf_r+0x1cc>
 8013088:	2b00      	cmp	r3, #0
 801308a:	d0c6      	beq.n	801301a <_vfiprintf_r+0x156>
 801308c:	9105      	str	r1, [sp, #20]
 801308e:	e7c4      	b.n	801301a <_vfiprintf_r+0x156>
 8013090:	fb0c 2101 	mla	r1, ip, r1, r2
 8013094:	4604      	mov	r4, r0
 8013096:	2301      	movs	r3, #1
 8013098:	e7f0      	b.n	801307c <_vfiprintf_r+0x1b8>
 801309a:	ab03      	add	r3, sp, #12
 801309c:	9300      	str	r3, [sp, #0]
 801309e:	462a      	mov	r2, r5
 80130a0:	4b12      	ldr	r3, [pc, #72]	@ (80130ec <_vfiprintf_r+0x228>)
 80130a2:	a904      	add	r1, sp, #16
 80130a4:	4630      	mov	r0, r6
 80130a6:	f7fd fc61 	bl	801096c <_printf_float>
 80130aa:	4607      	mov	r7, r0
 80130ac:	1c78      	adds	r0, r7, #1
 80130ae:	d1d6      	bne.n	801305e <_vfiprintf_r+0x19a>
 80130b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130b2:	07d9      	lsls	r1, r3, #31
 80130b4:	d405      	bmi.n	80130c2 <_vfiprintf_r+0x1fe>
 80130b6:	89ab      	ldrh	r3, [r5, #12]
 80130b8:	059a      	lsls	r2, r3, #22
 80130ba:	d402      	bmi.n	80130c2 <_vfiprintf_r+0x1fe>
 80130bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130be:	f7fe fa01 	bl	80114c4 <__retarget_lock_release_recursive>
 80130c2:	89ab      	ldrh	r3, [r5, #12]
 80130c4:	065b      	lsls	r3, r3, #25
 80130c6:	f53f af1f 	bmi.w	8012f08 <_vfiprintf_r+0x44>
 80130ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80130cc:	e71e      	b.n	8012f0c <_vfiprintf_r+0x48>
 80130ce:	ab03      	add	r3, sp, #12
 80130d0:	9300      	str	r3, [sp, #0]
 80130d2:	462a      	mov	r2, r5
 80130d4:	4b05      	ldr	r3, [pc, #20]	@ (80130ec <_vfiprintf_r+0x228>)
 80130d6:	a904      	add	r1, sp, #16
 80130d8:	4630      	mov	r0, r6
 80130da:	f7fd fedf 	bl	8010e9c <_printf_i>
 80130de:	e7e4      	b.n	80130aa <_vfiprintf_r+0x1e6>
 80130e0:	08015b80 	.word	0x08015b80
 80130e4:	08015b8a 	.word	0x08015b8a
 80130e8:	0801096d 	.word	0x0801096d
 80130ec:	08012ea1 	.word	0x08012ea1
 80130f0:	08015b86 	.word	0x08015b86

080130f4 <__swbuf_r>:
 80130f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130f6:	460e      	mov	r6, r1
 80130f8:	4614      	mov	r4, r2
 80130fa:	4605      	mov	r5, r0
 80130fc:	b118      	cbz	r0, 8013106 <__swbuf_r+0x12>
 80130fe:	6a03      	ldr	r3, [r0, #32]
 8013100:	b90b      	cbnz	r3, 8013106 <__swbuf_r+0x12>
 8013102:	f7fe f877 	bl	80111f4 <__sinit>
 8013106:	69a3      	ldr	r3, [r4, #24]
 8013108:	60a3      	str	r3, [r4, #8]
 801310a:	89a3      	ldrh	r3, [r4, #12]
 801310c:	071a      	lsls	r2, r3, #28
 801310e:	d501      	bpl.n	8013114 <__swbuf_r+0x20>
 8013110:	6923      	ldr	r3, [r4, #16]
 8013112:	b943      	cbnz	r3, 8013126 <__swbuf_r+0x32>
 8013114:	4621      	mov	r1, r4
 8013116:	4628      	mov	r0, r5
 8013118:	f000 f82a 	bl	8013170 <__swsetup_r>
 801311c:	b118      	cbz	r0, 8013126 <__swbuf_r+0x32>
 801311e:	f04f 37ff 	mov.w	r7, #4294967295
 8013122:	4638      	mov	r0, r7
 8013124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013126:	6823      	ldr	r3, [r4, #0]
 8013128:	6922      	ldr	r2, [r4, #16]
 801312a:	1a98      	subs	r0, r3, r2
 801312c:	6963      	ldr	r3, [r4, #20]
 801312e:	b2f6      	uxtb	r6, r6
 8013130:	4283      	cmp	r3, r0
 8013132:	4637      	mov	r7, r6
 8013134:	dc05      	bgt.n	8013142 <__swbuf_r+0x4e>
 8013136:	4621      	mov	r1, r4
 8013138:	4628      	mov	r0, r5
 801313a:	f7ff fdd1 	bl	8012ce0 <_fflush_r>
 801313e:	2800      	cmp	r0, #0
 8013140:	d1ed      	bne.n	801311e <__swbuf_r+0x2a>
 8013142:	68a3      	ldr	r3, [r4, #8]
 8013144:	3b01      	subs	r3, #1
 8013146:	60a3      	str	r3, [r4, #8]
 8013148:	6823      	ldr	r3, [r4, #0]
 801314a:	1c5a      	adds	r2, r3, #1
 801314c:	6022      	str	r2, [r4, #0]
 801314e:	701e      	strb	r6, [r3, #0]
 8013150:	6962      	ldr	r2, [r4, #20]
 8013152:	1c43      	adds	r3, r0, #1
 8013154:	429a      	cmp	r2, r3
 8013156:	d004      	beq.n	8013162 <__swbuf_r+0x6e>
 8013158:	89a3      	ldrh	r3, [r4, #12]
 801315a:	07db      	lsls	r3, r3, #31
 801315c:	d5e1      	bpl.n	8013122 <__swbuf_r+0x2e>
 801315e:	2e0a      	cmp	r6, #10
 8013160:	d1df      	bne.n	8013122 <__swbuf_r+0x2e>
 8013162:	4621      	mov	r1, r4
 8013164:	4628      	mov	r0, r5
 8013166:	f7ff fdbb 	bl	8012ce0 <_fflush_r>
 801316a:	2800      	cmp	r0, #0
 801316c:	d0d9      	beq.n	8013122 <__swbuf_r+0x2e>
 801316e:	e7d6      	b.n	801311e <__swbuf_r+0x2a>

08013170 <__swsetup_r>:
 8013170:	b538      	push	{r3, r4, r5, lr}
 8013172:	4b29      	ldr	r3, [pc, #164]	@ (8013218 <__swsetup_r+0xa8>)
 8013174:	4605      	mov	r5, r0
 8013176:	6818      	ldr	r0, [r3, #0]
 8013178:	460c      	mov	r4, r1
 801317a:	b118      	cbz	r0, 8013184 <__swsetup_r+0x14>
 801317c:	6a03      	ldr	r3, [r0, #32]
 801317e:	b90b      	cbnz	r3, 8013184 <__swsetup_r+0x14>
 8013180:	f7fe f838 	bl	80111f4 <__sinit>
 8013184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013188:	0719      	lsls	r1, r3, #28
 801318a:	d422      	bmi.n	80131d2 <__swsetup_r+0x62>
 801318c:	06da      	lsls	r2, r3, #27
 801318e:	d407      	bmi.n	80131a0 <__swsetup_r+0x30>
 8013190:	2209      	movs	r2, #9
 8013192:	602a      	str	r2, [r5, #0]
 8013194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013198:	81a3      	strh	r3, [r4, #12]
 801319a:	f04f 30ff 	mov.w	r0, #4294967295
 801319e:	e033      	b.n	8013208 <__swsetup_r+0x98>
 80131a0:	0758      	lsls	r0, r3, #29
 80131a2:	d512      	bpl.n	80131ca <__swsetup_r+0x5a>
 80131a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80131a6:	b141      	cbz	r1, 80131ba <__swsetup_r+0x4a>
 80131a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80131ac:	4299      	cmp	r1, r3
 80131ae:	d002      	beq.n	80131b6 <__swsetup_r+0x46>
 80131b0:	4628      	mov	r0, r5
 80131b2:	f7fe ffed 	bl	8012190 <_free_r>
 80131b6:	2300      	movs	r3, #0
 80131b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80131ba:	89a3      	ldrh	r3, [r4, #12]
 80131bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80131c0:	81a3      	strh	r3, [r4, #12]
 80131c2:	2300      	movs	r3, #0
 80131c4:	6063      	str	r3, [r4, #4]
 80131c6:	6923      	ldr	r3, [r4, #16]
 80131c8:	6023      	str	r3, [r4, #0]
 80131ca:	89a3      	ldrh	r3, [r4, #12]
 80131cc:	f043 0308 	orr.w	r3, r3, #8
 80131d0:	81a3      	strh	r3, [r4, #12]
 80131d2:	6923      	ldr	r3, [r4, #16]
 80131d4:	b94b      	cbnz	r3, 80131ea <__swsetup_r+0x7a>
 80131d6:	89a3      	ldrh	r3, [r4, #12]
 80131d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80131dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80131e0:	d003      	beq.n	80131ea <__swsetup_r+0x7a>
 80131e2:	4621      	mov	r1, r4
 80131e4:	4628      	mov	r0, r5
 80131e6:	f000 f883 	bl	80132f0 <__smakebuf_r>
 80131ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131ee:	f013 0201 	ands.w	r2, r3, #1
 80131f2:	d00a      	beq.n	801320a <__swsetup_r+0x9a>
 80131f4:	2200      	movs	r2, #0
 80131f6:	60a2      	str	r2, [r4, #8]
 80131f8:	6962      	ldr	r2, [r4, #20]
 80131fa:	4252      	negs	r2, r2
 80131fc:	61a2      	str	r2, [r4, #24]
 80131fe:	6922      	ldr	r2, [r4, #16]
 8013200:	b942      	cbnz	r2, 8013214 <__swsetup_r+0xa4>
 8013202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013206:	d1c5      	bne.n	8013194 <__swsetup_r+0x24>
 8013208:	bd38      	pop	{r3, r4, r5, pc}
 801320a:	0799      	lsls	r1, r3, #30
 801320c:	bf58      	it	pl
 801320e:	6962      	ldrpl	r2, [r4, #20]
 8013210:	60a2      	str	r2, [r4, #8]
 8013212:	e7f4      	b.n	80131fe <__swsetup_r+0x8e>
 8013214:	2000      	movs	r0, #0
 8013216:	e7f7      	b.n	8013208 <__swsetup_r+0x98>
 8013218:	200000d4 	.word	0x200000d4

0801321c <_raise_r>:
 801321c:	291f      	cmp	r1, #31
 801321e:	b538      	push	{r3, r4, r5, lr}
 8013220:	4605      	mov	r5, r0
 8013222:	460c      	mov	r4, r1
 8013224:	d904      	bls.n	8013230 <_raise_r+0x14>
 8013226:	2316      	movs	r3, #22
 8013228:	6003      	str	r3, [r0, #0]
 801322a:	f04f 30ff 	mov.w	r0, #4294967295
 801322e:	bd38      	pop	{r3, r4, r5, pc}
 8013230:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013232:	b112      	cbz	r2, 801323a <_raise_r+0x1e>
 8013234:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013238:	b94b      	cbnz	r3, 801324e <_raise_r+0x32>
 801323a:	4628      	mov	r0, r5
 801323c:	f000 f830 	bl	80132a0 <_getpid_r>
 8013240:	4622      	mov	r2, r4
 8013242:	4601      	mov	r1, r0
 8013244:	4628      	mov	r0, r5
 8013246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801324a:	f000 b817 	b.w	801327c <_kill_r>
 801324e:	2b01      	cmp	r3, #1
 8013250:	d00a      	beq.n	8013268 <_raise_r+0x4c>
 8013252:	1c59      	adds	r1, r3, #1
 8013254:	d103      	bne.n	801325e <_raise_r+0x42>
 8013256:	2316      	movs	r3, #22
 8013258:	6003      	str	r3, [r0, #0]
 801325a:	2001      	movs	r0, #1
 801325c:	e7e7      	b.n	801322e <_raise_r+0x12>
 801325e:	2100      	movs	r1, #0
 8013260:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013264:	4620      	mov	r0, r4
 8013266:	4798      	blx	r3
 8013268:	2000      	movs	r0, #0
 801326a:	e7e0      	b.n	801322e <_raise_r+0x12>

0801326c <raise>:
 801326c:	4b02      	ldr	r3, [pc, #8]	@ (8013278 <raise+0xc>)
 801326e:	4601      	mov	r1, r0
 8013270:	6818      	ldr	r0, [r3, #0]
 8013272:	f7ff bfd3 	b.w	801321c <_raise_r>
 8013276:	bf00      	nop
 8013278:	200000d4 	.word	0x200000d4

0801327c <_kill_r>:
 801327c:	b538      	push	{r3, r4, r5, lr}
 801327e:	4d07      	ldr	r5, [pc, #28]	@ (801329c <_kill_r+0x20>)
 8013280:	2300      	movs	r3, #0
 8013282:	4604      	mov	r4, r0
 8013284:	4608      	mov	r0, r1
 8013286:	4611      	mov	r1, r2
 8013288:	602b      	str	r3, [r5, #0]
 801328a:	f7ef fa7f 	bl	800278c <_kill>
 801328e:	1c43      	adds	r3, r0, #1
 8013290:	d102      	bne.n	8013298 <_kill_r+0x1c>
 8013292:	682b      	ldr	r3, [r5, #0]
 8013294:	b103      	cbz	r3, 8013298 <_kill_r+0x1c>
 8013296:	6023      	str	r3, [r4, #0]
 8013298:	bd38      	pop	{r3, r4, r5, pc}
 801329a:	bf00      	nop
 801329c:	20002158 	.word	0x20002158

080132a0 <_getpid_r>:
 80132a0:	f7ef ba6c 	b.w	800277c <_getpid>

080132a4 <__swhatbuf_r>:
 80132a4:	b570      	push	{r4, r5, r6, lr}
 80132a6:	460c      	mov	r4, r1
 80132a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132ac:	2900      	cmp	r1, #0
 80132ae:	b096      	sub	sp, #88	@ 0x58
 80132b0:	4615      	mov	r5, r2
 80132b2:	461e      	mov	r6, r3
 80132b4:	da0d      	bge.n	80132d2 <__swhatbuf_r+0x2e>
 80132b6:	89a3      	ldrh	r3, [r4, #12]
 80132b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80132bc:	f04f 0100 	mov.w	r1, #0
 80132c0:	bf14      	ite	ne
 80132c2:	2340      	movne	r3, #64	@ 0x40
 80132c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80132c8:	2000      	movs	r0, #0
 80132ca:	6031      	str	r1, [r6, #0]
 80132cc:	602b      	str	r3, [r5, #0]
 80132ce:	b016      	add	sp, #88	@ 0x58
 80132d0:	bd70      	pop	{r4, r5, r6, pc}
 80132d2:	466a      	mov	r2, sp
 80132d4:	f000 f848 	bl	8013368 <_fstat_r>
 80132d8:	2800      	cmp	r0, #0
 80132da:	dbec      	blt.n	80132b6 <__swhatbuf_r+0x12>
 80132dc:	9901      	ldr	r1, [sp, #4]
 80132de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80132e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80132e6:	4259      	negs	r1, r3
 80132e8:	4159      	adcs	r1, r3
 80132ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80132ee:	e7eb      	b.n	80132c8 <__swhatbuf_r+0x24>

080132f0 <__smakebuf_r>:
 80132f0:	898b      	ldrh	r3, [r1, #12]
 80132f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80132f4:	079d      	lsls	r5, r3, #30
 80132f6:	4606      	mov	r6, r0
 80132f8:	460c      	mov	r4, r1
 80132fa:	d507      	bpl.n	801330c <__smakebuf_r+0x1c>
 80132fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013300:	6023      	str	r3, [r4, #0]
 8013302:	6123      	str	r3, [r4, #16]
 8013304:	2301      	movs	r3, #1
 8013306:	6163      	str	r3, [r4, #20]
 8013308:	b003      	add	sp, #12
 801330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801330c:	ab01      	add	r3, sp, #4
 801330e:	466a      	mov	r2, sp
 8013310:	f7ff ffc8 	bl	80132a4 <__swhatbuf_r>
 8013314:	9f00      	ldr	r7, [sp, #0]
 8013316:	4605      	mov	r5, r0
 8013318:	4639      	mov	r1, r7
 801331a:	4630      	mov	r0, r6
 801331c:	f7fd f9fa 	bl	8010714 <_malloc_r>
 8013320:	b948      	cbnz	r0, 8013336 <__smakebuf_r+0x46>
 8013322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013326:	059a      	lsls	r2, r3, #22
 8013328:	d4ee      	bmi.n	8013308 <__smakebuf_r+0x18>
 801332a:	f023 0303 	bic.w	r3, r3, #3
 801332e:	f043 0302 	orr.w	r3, r3, #2
 8013332:	81a3      	strh	r3, [r4, #12]
 8013334:	e7e2      	b.n	80132fc <__smakebuf_r+0xc>
 8013336:	89a3      	ldrh	r3, [r4, #12]
 8013338:	6020      	str	r0, [r4, #0]
 801333a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801333e:	81a3      	strh	r3, [r4, #12]
 8013340:	9b01      	ldr	r3, [sp, #4]
 8013342:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013346:	b15b      	cbz	r3, 8013360 <__smakebuf_r+0x70>
 8013348:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801334c:	4630      	mov	r0, r6
 801334e:	f000 f81d 	bl	801338c <_isatty_r>
 8013352:	b128      	cbz	r0, 8013360 <__smakebuf_r+0x70>
 8013354:	89a3      	ldrh	r3, [r4, #12]
 8013356:	f023 0303 	bic.w	r3, r3, #3
 801335a:	f043 0301 	orr.w	r3, r3, #1
 801335e:	81a3      	strh	r3, [r4, #12]
 8013360:	89a3      	ldrh	r3, [r4, #12]
 8013362:	431d      	orrs	r5, r3
 8013364:	81a5      	strh	r5, [r4, #12]
 8013366:	e7cf      	b.n	8013308 <__smakebuf_r+0x18>

08013368 <_fstat_r>:
 8013368:	b538      	push	{r3, r4, r5, lr}
 801336a:	4d07      	ldr	r5, [pc, #28]	@ (8013388 <_fstat_r+0x20>)
 801336c:	2300      	movs	r3, #0
 801336e:	4604      	mov	r4, r0
 8013370:	4608      	mov	r0, r1
 8013372:	4611      	mov	r1, r2
 8013374:	602b      	str	r3, [r5, #0]
 8013376:	f7ef fa69 	bl	800284c <_fstat>
 801337a:	1c43      	adds	r3, r0, #1
 801337c:	d102      	bne.n	8013384 <_fstat_r+0x1c>
 801337e:	682b      	ldr	r3, [r5, #0]
 8013380:	b103      	cbz	r3, 8013384 <_fstat_r+0x1c>
 8013382:	6023      	str	r3, [r4, #0]
 8013384:	bd38      	pop	{r3, r4, r5, pc}
 8013386:	bf00      	nop
 8013388:	20002158 	.word	0x20002158

0801338c <_isatty_r>:
 801338c:	b538      	push	{r3, r4, r5, lr}
 801338e:	4d06      	ldr	r5, [pc, #24]	@ (80133a8 <_isatty_r+0x1c>)
 8013390:	2300      	movs	r3, #0
 8013392:	4604      	mov	r4, r0
 8013394:	4608      	mov	r0, r1
 8013396:	602b      	str	r3, [r5, #0]
 8013398:	f7ef fa68 	bl	800286c <_isatty>
 801339c:	1c43      	adds	r3, r0, #1
 801339e:	d102      	bne.n	80133a6 <_isatty_r+0x1a>
 80133a0:	682b      	ldr	r3, [r5, #0]
 80133a2:	b103      	cbz	r3, 80133a6 <_isatty_r+0x1a>
 80133a4:	6023      	str	r3, [r4, #0]
 80133a6:	bd38      	pop	{r3, r4, r5, pc}
 80133a8:	20002158 	.word	0x20002158

080133ac <_init>:
 80133ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ae:	bf00      	nop
 80133b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133b2:	bc08      	pop	{r3}
 80133b4:	469e      	mov	lr, r3
 80133b6:	4770      	bx	lr

080133b8 <_fini>:
 80133b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ba:	bf00      	nop
 80133bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133be:	bc08      	pop	{r3}
 80133c0:	469e      	mov	lr, r3
 80133c2:	4770      	bx	lr
