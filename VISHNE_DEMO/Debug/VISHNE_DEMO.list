
VISHNE_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec0  08009d70  08009d70  0000ad70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc30  0800bc30  0000d1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc30  0800bc30  0000cc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc38  0800bc38  0000d1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc38  0800bc38  0000cc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc3c  0800bc3c  0000cc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800bc40  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1fc  2**0
                  CONTENTS
 10 .bss          00001134  200001fc  200001fc  0000d1fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001330  20001330  0000d1fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013c2a  00000000  00000000  0000d22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa3  00000000  00000000  00020e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  00023e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcf  00000000  00000000  00024fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cbe  00000000  00000000  00025daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b93  00000000  00000000  0004aa6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcba4  00000000  00000000  00061600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e1a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b68  00000000  00000000  0013e1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00143d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d58 	.word	0x08009d58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08009d58 	.word	0x08009d58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 f96a 	bl	8002174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f814 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fa0c 	bl	80012c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f000 f9cc 	bl	8001244 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 f9a0 	bl	80011f0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f8fe 	bl	80010b0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000eb4:	f000 f874 	bl	8000fa0 <MX_ADC3_Init>
  MX_SPI3_Init();
 8000eb8:	f000 f8c4 	bl	8001044 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8000ebc:	f006 f816 	bl	8006eec <DWT_Init>

  //ssd1306_Init();
  systemSetup();
 8000ec0:	f006 f864 	bl	8006f8c <systemSetup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  systemLoop();
 8000ec4:	f006 f85a 	bl	8006f7c <systemLoop>
  {
 8000ec8:	bf00      	nop
 8000eca:	e7fb      	b.n	8000ec4 <main+0x2c>

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	@ 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2230      	movs	r2, #48	@ 0x30
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f006 fe8b 	bl	8007bf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f00:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f32:	2302      	movs	r3, #2
 8000f34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f40:	2348      	movs	r3, #72	@ 0x48
 8000f42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fcb1 	bl	80038b8 <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f5c:	f000 faa8 	bl	80014b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2302      	movs	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 ff12 	bl	8003da8 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f8a:	f000 fa91 	bl	80014b0 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3750      	adds	r7, #80	@ 0x50
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000fb2:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000fb4:	4a21      	ldr	r2, [pc, #132]	@ (800103c <MX_ADC3_Init+0x9c>)
 8000fb6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000fba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fbe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000fe2:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <MX_ADC3_Init+0xa0>)
 8000fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_ADC3_Init+0x98>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001000:	480d      	ldr	r0, [pc, #52]	@ (8001038 <MX_ADC3_Init+0x98>)
 8001002:	f001 f94d 	bl	80022a0 <HAL_ADC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800100c:	f000 fa50 	bl	80014b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001010:	2301      	movs	r3, #1
 8001012:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_ADC3_Init+0x98>)
 8001022:	f001 faaf 	bl	8002584 <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800102c:	f000 fa40 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000218 	.word	0x20000218
 800103c:	40012200 	.word	0x40012200
 8001040:	0f000001 	.word	0x0f000001

08001044 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_SPI3_Init+0x64>)
 800104a:	4a18      	ldr	r2, [pc, #96]	@ (80010ac <MX_SPI3_Init+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <MX_SPI3_Init+0x64>)
 8001050:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001054:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_SPI3_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_SPI3_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_SPI3_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <MX_SPI3_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_SPI3_Init+0x64>)
 8001070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001074:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001076:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <MX_SPI3_Init+0x64>)
 8001078:	2218      	movs	r2, #24
 800107a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <MX_SPI3_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_SPI3_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <MX_SPI3_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_SPI3_Init+0x64>)
 8001090:	220a      	movs	r2, #10
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <MX_SPI3_Init+0x64>)
 8001096:	f003 f8a7 	bl	80041e8 <HAL_SPI_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80010a0:	f000 fa06 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200002c0 	.word	0x200002c0
 80010ac:	40003c00 	.word	0x40003c00

080010b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	@ 0x58
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f006 fd84 	bl	8007bf6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ee:	4b3e      	ldr	r3, [pc, #248]	@ (80011e8 <MX_TIM1_Init+0x138>)
 80010f0:	4a3e      	ldr	r2, [pc, #248]	@ (80011ec <MX_TIM1_Init+0x13c>)
 80010f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 53-1;
 80010f4:	4b3c      	ldr	r3, [pc, #240]	@ (80011e8 <MX_TIM1_Init+0x138>)
 80010f6:	2234      	movs	r2, #52	@ 0x34
 80010f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b3b      	ldr	r3, [pc, #236]	@ (80011e8 <MX_TIM1_Init+0x138>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8001100:	4b39      	ldr	r3, [pc, #228]	@ (80011e8 <MX_TIM1_Init+0x138>)
 8001102:	2209      	movs	r2, #9
 8001104:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b38      	ldr	r3, [pc, #224]	@ (80011e8 <MX_TIM1_Init+0x138>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800110c:	4b36      	ldr	r3, [pc, #216]	@ (80011e8 <MX_TIM1_Init+0x138>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b35      	ldr	r3, [pc, #212]	@ (80011e8 <MX_TIM1_Init+0x138>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001118:	4833      	ldr	r0, [pc, #204]	@ (80011e8 <MX_TIM1_Init+0x138>)
 800111a:	f003 fb0d 	bl	8004738 <HAL_TIM_Base_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001124:	f000 f9c4 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800112e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001132:	4619      	mov	r1, r3
 8001134:	482c      	ldr	r0, [pc, #176]	@ (80011e8 <MX_TIM1_Init+0x138>)
 8001136:	f003 fd31 	bl	8004b9c <HAL_TIM_ConfigClockSource>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001140:	f000 f9b6 	bl	80014b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001144:	4828      	ldr	r0, [pc, #160]	@ (80011e8 <MX_TIM1_Init+0x138>)
 8001146:	f003 fb46 	bl	80047d6 <HAL_TIM_PWM_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001150:	f000 f9ae 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001160:	4619      	mov	r1, r3
 8001162:	4821      	ldr	r0, [pc, #132]	@ (80011e8 <MX_TIM1_Init+0x138>)
 8001164:	f004 f8fe 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800116e:	f000 f99f 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001172:	2360      	movs	r3, #96	@ 0x60
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4814      	ldr	r0, [pc, #80]	@ (80011e8 <MX_TIM1_Init+0x138>)
 8001198:	f003 fc3e 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80011a2:	f000 f985 	bl	80014b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	@ (80011e8 <MX_TIM1_Init+0x138>)
 80011ca:	f004 f947 	bl	800545c <HAL_TIMEx_ConfigBreakDeadTime>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80011d4:	f000 f96c 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011d8:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <MX_TIM1_Init+0x138>)
 80011da:	f000 fdb5 	bl	8001d48 <HAL_TIM_MspPostInit>

}
 80011de:	bf00      	nop
 80011e0:	3758      	adds	r7, #88	@ 0x58
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000318 	.word	0x20000318
 80011ec:	40010000 	.word	0x40010000

080011f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_USART2_UART_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <MX_USART2_UART_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <MX_USART2_UART_Init+0x4c>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_USART2_UART_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_USART2_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_USART2_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_USART2_UART_Init+0x4c>)
 8001228:	f004 f96a 	bl	8005500 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001232:	f000 f93d 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200003c0 	.word	0x200003c0
 8001240:	40004400 	.word	0x40004400

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <MX_DMA_Init+0x78>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a1a      	ldr	r2, [pc, #104]	@ (80012bc <MX_DMA_Init+0x78>)
 8001254:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <MX_DMA_Init+0x78>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <MX_DMA_Init+0x78>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a13      	ldr	r2, [pc, #76]	@ (80012bc <MX_DMA_Init+0x78>)
 8001270:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_DMA_Init+0x78>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2010      	movs	r0, #16
 8001288:	f001 fcf7 	bl	8002c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800128c:	2010      	movs	r0, #16
 800128e:	f001 fd10 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2038      	movs	r0, #56	@ 0x38
 8001298:	f001 fcef 	bl	8002c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800129c:	2038      	movs	r0, #56	@ 0x38
 800129e:	f001 fd08 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2039      	movs	r0, #57	@ 0x39
 80012a8:	f001 fce7 	bl	8002c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012ac:	2039      	movs	r0, #57	@ 0x39
 80012ae:	f001 fd00 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	@ 0x30
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	4b70      	ldr	r3, [pc, #448]	@ (800149c <MX_GPIO_Init+0x1dc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a6f      	ldr	r2, [pc, #444]	@ (800149c <MX_GPIO_Init+0x1dc>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b6d      	ldr	r3, [pc, #436]	@ (800149c <MX_GPIO_Init+0x1dc>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	4b69      	ldr	r3, [pc, #420]	@ (800149c <MX_GPIO_Init+0x1dc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a68      	ldr	r2, [pc, #416]	@ (800149c <MX_GPIO_Init+0x1dc>)
 80012fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b66      	ldr	r3, [pc, #408]	@ (800149c <MX_GPIO_Init+0x1dc>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b62      	ldr	r3, [pc, #392]	@ (800149c <MX_GPIO_Init+0x1dc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a61      	ldr	r2, [pc, #388]	@ (800149c <MX_GPIO_Init+0x1dc>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b5f      	ldr	r3, [pc, #380]	@ (800149c <MX_GPIO_Init+0x1dc>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b5b      	ldr	r3, [pc, #364]	@ (800149c <MX_GPIO_Init+0x1dc>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a5a      	ldr	r2, [pc, #360]	@ (800149c <MX_GPIO_Init+0x1dc>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b58      	ldr	r3, [pc, #352]	@ (800149c <MX_GPIO_Init+0x1dc>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b54      	ldr	r3, [pc, #336]	@ (800149c <MX_GPIO_Init+0x1dc>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a53      	ldr	r2, [pc, #332]	@ (800149c <MX_GPIO_Init+0x1dc>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b51      	ldr	r3, [pc, #324]	@ (800149c <MX_GPIO_Init+0x1dc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b4d      	ldr	r3, [pc, #308]	@ (800149c <MX_GPIO_Init+0x1dc>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a4c      	ldr	r2, [pc, #304]	@ (800149c <MX_GPIO_Init+0x1dc>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b4a      	ldr	r3, [pc, #296]	@ (800149c <MX_GPIO_Init+0x1dc>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2140      	movs	r1, #64	@ 0x40
 8001382:	4847      	ldr	r0, [pc, #284]	@ (80014a0 <MX_GPIO_Init+0x1e0>)
 8001384:	f002 fa66 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin|READY_LED_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800138e:	4845      	ldr	r0, [pc, #276]	@ (80014a4 <MX_GPIO_Init+0x1e4>)
 8001390:	f002 fa60 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CE_Pin|LCD_DC_Pin|LCD_RST_Pin|LCD_BL_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	210f      	movs	r1, #15
 8001398:	4843      	ldr	r0, [pc, #268]	@ (80014a8 <MX_GPIO_Init+0x1e8>)
 800139a:	f002 fa5b 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin|SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80013a4:	4841      	ldr	r0, [pc, #260]	@ (80014ac <MX_GPIO_Init+0x1ec>)
 80013a6:	f002 fa55 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EOS_Pin */
  GPIO_InitStruct.Pin = EOS_Pin;
 80013aa:	2310      	movs	r3, #16
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EOS_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4838      	ldr	r0, [pc, #224]	@ (80014a0 <MX_GPIO_Init+0x1e0>)
 80013c0:	f002 f894 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80013c4:	2320      	movs	r3, #32
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4832      	ldr	r0, [pc, #200]	@ (80014a0 <MX_GPIO_Init+0x1e0>)
 80013d8:	f002 f888 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013dc:	2340      	movs	r3, #64	@ 0x40
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	482b      	ldr	r0, [pc, #172]	@ (80014a0 <MX_GPIO_Init+0x1e0>)
 80013f4:	f002 f87a 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ERR_BUZZER_Pin READY_LED_Pin */
  GPIO_InitStruct.Pin = ERR_BUZZER_Pin|READY_LED_Pin;
 80013f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	4824      	ldr	r0, [pc, #144]	@ (80014a4 <MX_GPIO_Init+0x1e4>)
 8001412:	f002 f86b 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pins : NEXT_BTN_Pin PREV_BTN_Pin */
  GPIO_InitStruct.Pin = NEXT_BTN_Pin|PREV_BTN_Pin;
 8001416:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	481e      	ldr	r0, [pc, #120]	@ (80014a4 <MX_GPIO_Init+0x1e4>)
 800142c:	f002 f85e 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pin : NAVIGATE_BTN_Pin */
  GPIO_InitStruct.Pin = NAVIGATE_BTN_Pin;
 8001430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NAVIGATE_BTN_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4819      	ldr	r0, [pc, #100]	@ (80014ac <MX_GPIO_Init+0x1ec>)
 8001446:	f002 f851 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CE_Pin LCD_DC_Pin LCD_RST_Pin LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_DC_Pin|LCD_RST_Pin|LCD_BL_Pin;
 800144a:	230f      	movs	r3, #15
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4811      	ldr	r0, [pc, #68]	@ (80014a8 <MX_GPIO_Init+0x1e8>)
 8001462:	f002 f843 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEC_START_Pin SPEC_CLK_Pin SPEC_EOS_Pin SPEC_GAIN_Pin */
  GPIO_InitStruct.Pin = SPEC_START_Pin|SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin;
 8001466:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	480b      	ldr	r0, [pc, #44]	@ (80014ac <MX_GPIO_Init+0x1ec>)
 8001480:	f002 f834 	bl	80034ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* EXTI interrupt init */
      HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2102      	movs	r1, #2
 8001488:	200a      	movs	r0, #10
 800148a:	f001 fbf6 	bl	8002c7a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800148e:	200a      	movs	r0, #10
 8001490:	f001 fc0f 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

     // HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin, GPIO_PIN_SET);
/* USER CODE END MX_GPIO_Init_2 */
}
 8001494:	bf00      	nop
 8001496:	3730      	adds	r7, #48	@ 0x30
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40020400 	.word	0x40020400

080014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <Error_Handler+0x8>

080014bc <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2101      	movs	r1, #1
 80014c4:	480a      	ldr	r0, [pc, #40]	@ (80014f0 <ssd1306_Reset+0x34>)
 80014c6:	f002 f9c5 	bl	8003854 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2104      	movs	r1, #4
 80014ce:	4808      	ldr	r0, [pc, #32]	@ (80014f0 <ssd1306_Reset+0x34>)
 80014d0:	f002 f9c0 	bl	8003854 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80014d4:	200a      	movs	r0, #10
 80014d6:	f000 febf 	bl	8002258 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2104      	movs	r1, #4
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <ssd1306_Reset+0x34>)
 80014e0:	f002 f9b8 	bl	8003854 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80014e4:	200a      	movs	r0, #10
 80014e6:	f000 feb7 	bl	8002258 <HAL_Delay>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40020c00 	.word	0x40020c00

080014f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80014fe:	2200      	movs	r2, #0
 8001500:	2101      	movs	r1, #1
 8001502:	480c      	ldr	r0, [pc, #48]	@ (8001534 <ssd1306_WriteCommand+0x40>)
 8001504:	f002 f9a6 	bl	8003854 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001508:	2200      	movs	r2, #0
 800150a:	2102      	movs	r1, #2
 800150c:	4809      	ldr	r0, [pc, #36]	@ (8001534 <ssd1306_WriteCommand+0x40>)
 800150e:	f002 f9a1 	bl	8003854 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001512:	1df9      	adds	r1, r7, #7
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	2201      	movs	r2, #1
 800151a:	4807      	ldr	r0, [pc, #28]	@ (8001538 <ssd1306_WriteCommand+0x44>)
 800151c:	f002 feed 	bl	80042fa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001520:	2201      	movs	r2, #1
 8001522:	2101      	movs	r1, #1
 8001524:	4803      	ldr	r0, [pc, #12]	@ (8001534 <ssd1306_WriteCommand+0x40>)
 8001526:	f002 f995 	bl	8003854 <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40020c00 	.word	0x40020c00
 8001538:	200002c0 	.word	0x200002c0

0800153c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001546:	2200      	movs	r2, #0
 8001548:	2101      	movs	r1, #1
 800154a:	480c      	ldr	r0, [pc, #48]	@ (800157c <ssd1306_WriteData+0x40>)
 800154c:	f002 f982 	bl	8003854 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001550:	2201      	movs	r2, #1
 8001552:	2102      	movs	r1, #2
 8001554:	4809      	ldr	r0, [pc, #36]	@ (800157c <ssd1306_WriteData+0x40>)
 8001556:	f002 f97d 	bl	8003854 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b29a      	uxth	r2, r3
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4806      	ldr	r0, [pc, #24]	@ (8001580 <ssd1306_WriteData+0x44>)
 8001566:	f002 fec8 	bl	80042fa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800156a:	2201      	movs	r2, #1
 800156c:	2101      	movs	r1, #1
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <ssd1306_WriteData+0x40>)
 8001570:	f002 f970 	bl	8003854 <HAL_GPIO_WritePin>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40020c00 	.word	0x40020c00
 8001580:	200002c0 	.word	0x200002c0

08001584 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001588:	f7ff ff98 	bl	80014bc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800158c:	2064      	movs	r0, #100	@ 0x64
 800158e:	f000 fe63 	bl	8002258 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001592:	2000      	movs	r0, #0
 8001594:	f000 fa7e 	bl	8001a94 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001598:	2020      	movs	r0, #32
 800159a:	f7ff ffab 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff ffa8 	bl	80014f4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015a4:	20b0      	movs	r0, #176	@ 0xb0
 80015a6:	f7ff ffa5 	bl	80014f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80015aa:	20c8      	movs	r0, #200	@ 0xc8
 80015ac:	f7ff ffa2 	bl	80014f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ff9f 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80015b6:	2010      	movs	r0, #16
 80015b8:	f7ff ff9c 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80015bc:	2040      	movs	r0, #64	@ 0x40
 80015be:	f7ff ff99 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80015c2:	20ff      	movs	r0, #255	@ 0xff
 80015c4:	f000 fa53 	bl	8001a6e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80015c8:	20a1      	movs	r0, #161	@ 0xa1
 80015ca:	f7ff ff93 	bl	80014f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80015ce:	20a6      	movs	r0, #166	@ 0xa6
 80015d0:	f7ff ff90 	bl	80014f4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80015d4:	20a8      	movs	r0, #168	@ 0xa8
 80015d6:	f7ff ff8d 	bl	80014f4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80015da:	203f      	movs	r0, #63	@ 0x3f
 80015dc:	f7ff ff8a 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015e0:	20a4      	movs	r0, #164	@ 0xa4
 80015e2:	f7ff ff87 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80015e6:	20d3      	movs	r0, #211	@ 0xd3
 80015e8:	f7ff ff84 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff ff81 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80015f2:	20d5      	movs	r0, #213	@ 0xd5
 80015f4:	f7ff ff7e 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80015f8:	20f0      	movs	r0, #240	@ 0xf0
 80015fa:	f7ff ff7b 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80015fe:	20d9      	movs	r0, #217	@ 0xd9
 8001600:	f7ff ff78 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001604:	2022      	movs	r0, #34	@ 0x22
 8001606:	f7ff ff75 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800160a:	20da      	movs	r0, #218	@ 0xda
 800160c:	f7ff ff72 	bl	80014f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001610:	2012      	movs	r0, #18
 8001612:	f7ff ff6f 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001616:	20db      	movs	r0, #219	@ 0xdb
 8001618:	f7ff ff6c 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800161c:	2020      	movs	r0, #32
 800161e:	f7ff ff69 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001622:	208d      	movs	r0, #141	@ 0x8d
 8001624:	f7ff ff66 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001628:	2014      	movs	r0, #20
 800162a:	f7ff ff63 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800162e:	2001      	movs	r0, #1
 8001630:	f000 fa30 	bl	8001a94 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001634:	2000      	movs	r0, #0
 8001636:	f000 f80f 	bl	8001658 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800163a:	f000 f825 	bl	8001688 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <ssd1306_Init+0xd0>)
 8001640:	2200      	movs	r2, #0
 8001642:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <ssd1306_Init+0xd0>)
 8001646:	2200      	movs	r2, #0
 8001648:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800164a:	4b02      	ldr	r3, [pc, #8]	@ (8001654 <ssd1306_Init+0xd0>)
 800164c:	2201      	movs	r2, #1
 800164e:	711a      	strb	r2, [r3, #4]
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000868 	.word	0x20000868

08001658 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <ssd1306_Fill+0x14>
 8001668:	2300      	movs	r3, #0
 800166a:	e000      	b.n	800166e <ssd1306_Fill+0x16>
 800166c:	23ff      	movs	r3, #255	@ 0xff
 800166e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001672:	4619      	mov	r1, r3
 8001674:	4803      	ldr	r0, [pc, #12]	@ (8001684 <ssd1306_Fill+0x2c>)
 8001676:	f006 fabe 	bl	8007bf6 <memset>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000468 	.word	0x20000468

08001688 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	e016      	b.n	80016c2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	3b50      	subs	r3, #80	@ 0x50
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff2a 	bl	80014f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff ff27 	bl	80014f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80016a6:	2010      	movs	r0, #16
 80016a8:	f7ff ff24 	bl	80014f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	01db      	lsls	r3, r3, #7
 80016b0:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <ssd1306_UpdateScreen+0x4c>)
 80016b2:	4413      	add	r3, r2
 80016b4:	2180      	movs	r1, #128	@ 0x80
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff40 	bl	800153c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	3301      	adds	r3, #1
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b07      	cmp	r3, #7
 80016c6:	d9e5      	bls.n	8001694 <ssd1306_UpdateScreen+0xc>
    }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000468 	.word	0x20000468

080016d8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	460b      	mov	r3, r1
 80016e4:	71bb      	strb	r3, [r7, #6]
 80016e6:	4613      	mov	r3, r2
 80016e8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db3d      	blt.n	800176e <ssd1306_DrawPixel+0x96>
 80016f2:	79bb      	ldrb	r3, [r7, #6]
 80016f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80016f6:	d83a      	bhi.n	800176e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80016f8:	797b      	ldrb	r3, [r7, #5]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d11a      	bne.n	8001734 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016fe:	79fa      	ldrb	r2, [r7, #7]
 8001700:	79bb      	ldrb	r3, [r7, #6]
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	b2d8      	uxtb	r0, r3
 8001706:	4603      	mov	r3, r0
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	4413      	add	r3, r2
 800170c:	4a1b      	ldr	r2, [pc, #108]	@ (800177c <ssd1306_DrawPixel+0xa4>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	b25a      	sxtb	r2, r3
 8001712:	79bb      	ldrb	r3, [r7, #6]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	2101      	movs	r1, #1
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	b25b      	sxtb	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b259      	sxtb	r1, r3
 8001724:	79fa      	ldrb	r2, [r7, #7]
 8001726:	4603      	mov	r3, r0
 8001728:	01db      	lsls	r3, r3, #7
 800172a:	4413      	add	r3, r2
 800172c:	b2c9      	uxtb	r1, r1
 800172e:	4a13      	ldr	r2, [pc, #76]	@ (800177c <ssd1306_DrawPixel+0xa4>)
 8001730:	54d1      	strb	r1, [r2, r3]
 8001732:	e01d      	b.n	8001770 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001734:	79fa      	ldrb	r2, [r7, #7]
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	08db      	lsrs	r3, r3, #3
 800173a:	b2d8      	uxtb	r0, r3
 800173c:	4603      	mov	r3, r0
 800173e:	01db      	lsls	r3, r3, #7
 8001740:	4413      	add	r3, r2
 8001742:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <ssd1306_DrawPixel+0xa4>)
 8001744:	5cd3      	ldrb	r3, [r2, r3]
 8001746:	b25a      	sxtb	r2, r3
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	b25b      	sxtb	r3, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	b25b      	sxtb	r3, r3
 800175a:	4013      	ands	r3, r2
 800175c:	b259      	sxtb	r1, r3
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	4603      	mov	r3, r0
 8001762:	01db      	lsls	r3, r3, #7
 8001764:	4413      	add	r3, r2
 8001766:	b2c9      	uxtb	r1, r1
 8001768:	4a04      	ldr	r2, [pc, #16]	@ (800177c <ssd1306_DrawPixel+0xa4>)
 800176a:	54d1      	strb	r1, [r2, r3]
 800176c:	e000      	b.n	8001770 <ssd1306_DrawPixel+0x98>
        return;
 800176e:	bf00      	nop
    }
}
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000468 	.word	0x20000468

08001780 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b089      	sub	sp, #36	@ 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	4604      	mov	r4, r0
 8001788:	4638      	mov	r0, r7
 800178a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800178e:	4623      	mov	r3, r4
 8001790:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	2b1f      	cmp	r3, #31
 8001796:	d902      	bls.n	800179e <ssd1306_WriteChar+0x1e>
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b7e      	cmp	r3, #126	@ 0x7e
 800179c:	d901      	bls.n	80017a2 <ssd1306_WriteChar+0x22>
        return 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	e077      	b.n	8001892 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80017a2:	4b3e      	ldr	r3, [pc, #248]	@ (800189c <ssd1306_WriteChar+0x11c>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	783b      	ldrb	r3, [r7, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	2b80      	cmp	r3, #128	@ 0x80
 80017ae:	dc06      	bgt.n	80017be <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80017b0:	4b3a      	ldr	r3, [pc, #232]	@ (800189c <ssd1306_WriteChar+0x11c>)
 80017b2:	885b      	ldrh	r3, [r3, #2]
 80017b4:	461a      	mov	r2, r3
 80017b6:	787b      	ldrb	r3, [r7, #1]
 80017b8:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80017ba:	2b40      	cmp	r3, #64	@ 0x40
 80017bc:	dd01      	ble.n	80017c2 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	e067      	b.n	8001892 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	e04e      	b.n	8001866 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	3b20      	subs	r3, #32
 80017ce:	7879      	ldrb	r1, [r7, #1]
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4619      	mov	r1, r3
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	440b      	add	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	e036      	b.n	8001856 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80017f8:	4b28      	ldr	r3, [pc, #160]	@ (800189c <ssd1306_WriteChar+0x11c>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b2d8      	uxtb	r0, r3
 8001806:	4b25      	ldr	r3, [pc, #148]	@ (800189c <ssd1306_WriteChar+0x11c>)
 8001808:	885b      	ldrh	r3, [r3, #2]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4413      	add	r3, r2
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff ff5d 	bl	80016d8 <ssd1306_DrawPixel>
 800181e:	e017      	b.n	8001850 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001820:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <ssd1306_WriteChar+0x11c>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b2d8      	uxtb	r0, r3
 800182e:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <ssd1306_WriteChar+0x11c>)
 8001830:	885b      	ldrh	r3, [r3, #2]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	b2d9      	uxtb	r1, r3
 800183c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	f7ff ff44 	bl	80016d8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	3301      	adds	r3, #1
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	783b      	ldrb	r3, [r7, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4293      	cmp	r3, r2
 800185e:	d3c3      	bcc.n	80017e8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	3301      	adds	r3, #1
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	787b      	ldrb	r3, [r7, #1]
 8001868:	461a      	mov	r2, r3
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	4293      	cmp	r3, r2
 800186e:	d3ab      	bcc.n	80017c8 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001870:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <ssd1306_WriteChar+0x11c>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	2a00      	cmp	r2, #0
 8001878:	d005      	beq.n	8001886 <ssd1306_WriteChar+0x106>
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	3a20      	subs	r2, #32
 8001880:	440a      	add	r2, r1
 8001882:	7812      	ldrb	r2, [r2, #0]
 8001884:	e000      	b.n	8001888 <ssd1306_WriteChar+0x108>
 8001886:	783a      	ldrb	r2, [r7, #0]
 8001888:	4413      	add	r3, r2
 800188a:	b29a      	uxth	r2, r3
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <ssd1306_WriteChar+0x11c>)
 800188e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	bf00      	nop
 800189c:	20000868 	.word	0x20000868

080018a0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	4638      	mov	r0, r7
 80018aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80018ae:	e013      	b.n	80018d8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	7818      	ldrb	r0, [r3, #0]
 80018b4:	7e3b      	ldrb	r3, [r7, #24]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	463b      	mov	r3, r7
 80018ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018bc:	f7ff ff60 	bl	8001780 <ssd1306_WriteChar>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d002      	beq.n	80018d2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	e008      	b.n	80018e4 <ssd1306_WriteString+0x44>
        }
        str++;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e7      	bne.n	80018b0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	781b      	ldrb	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	460a      	mov	r2, r1
 80018f6:	71fb      	strb	r3, [r7, #7]
 80018f8:	4613      	mov	r3, r2
 80018fa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <ssd1306_SetCursor+0x2c>)
 8001902:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <ssd1306_SetCursor+0x2c>)
 800190a:	805a      	strh	r2, [r3, #2]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	20000868 	.word	0x20000868

0800191c <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	4604      	mov	r4, r0
 8001924:	4608      	mov	r0, r1
 8001926:	4611      	mov	r1, r2
 8001928:	461a      	mov	r2, r3
 800192a:	4623      	mov	r3, r4
 800192c:	71fb      	strb	r3, [r7, #7]
 800192e:	4603      	mov	r3, r0
 8001930:	71bb      	strb	r3, [r7, #6]
 8001932:	460b      	mov	r3, r1
 8001934:	717b      	strb	r3, [r7, #5]
 8001936:	4613      	mov	r3, r2
 8001938:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	797b      	ldrb	r3, [r7, #5]
 800193e:	4293      	cmp	r3, r2
 8001940:	bf28      	it	cs
 8001942:	4613      	movcs	r3, r2
 8001944:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001946:	797a      	ldrb	r2, [r7, #5]
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	4293      	cmp	r3, r2
 800194c:	bf38      	it	cc
 800194e:	4613      	movcc	r3, r2
 8001950:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001952:	79ba      	ldrb	r2, [r7, #6]
 8001954:	793b      	ldrb	r3, [r7, #4]
 8001956:	4293      	cmp	r3, r2
 8001958:	bf28      	it	cs
 800195a:	4613      	movcs	r3, r2
 800195c:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800195e:	793a      	ldrb	r2, [r7, #4]
 8001960:	79bb      	ldrb	r3, [r7, #6]
 8001962:	4293      	cmp	r3, r2
 8001964:	bf38      	it	cc
 8001966:	4613      	movcc	r3, r2
 8001968:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	e017      	b.n	80019a0 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001970:	7b7b      	ldrb	r3, [r7, #13]
 8001972:	73bb      	strb	r3, [r7, #14]
 8001974:	e009      	b.n	800198a <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001976:	f897 2020 	ldrb.w	r2, [r7, #32]
 800197a:	7bf9      	ldrb	r1, [r7, #15]
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff feaa 	bl	80016d8 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	3301      	adds	r3, #1
 8001988:	73bb      	strb	r3, [r7, #14]
 800198a:	7bba      	ldrb	r2, [r7, #14]
 800198c:	7b3b      	ldrb	r3, [r7, #12]
 800198e:	429a      	cmp	r2, r3
 8001990:	d803      	bhi.n	800199a <ssd1306_FillRectangle+0x7e>
 8001992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001996:	2b00      	cmp	r3, #0
 8001998:	daed      	bge.n	8001976 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	3301      	adds	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	7abb      	ldrb	r3, [r7, #10]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d803      	bhi.n	80019b0 <ssd1306_FillRectangle+0x94>
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80019ac:	d9e0      	bls.n	8001970 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
}
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}

080019b8 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	603a      	str	r2, [r7, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	460b      	mov	r3, r1
 80019c8:	71bb      	strb	r3, [r7, #6]
 80019ca:	4613      	mov	r3, r2
 80019cc:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	3307      	adds	r3, #7
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da00      	bge.n	80019d8 <ssd1306_DrawBitmap+0x20>
 80019d6:	3307      	adds	r3, #7
 80019d8:	10db      	asrs	r3, r3, #3
 80019da:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db3e      	blt.n	8001a66 <ssd1306_DrawBitmap+0xae>
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80019ec:	d83b      	bhi.n	8001a66 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	73bb      	strb	r3, [r7, #14]
 80019f2:	e033      	b.n	8001a5c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80019f4:	2300      	movs	r3, #0
 80019f6:	737b      	strb	r3, [r7, #13]
 80019f8:	e026      	b.n	8001a48 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80019fa:	7b7b      	ldrb	r3, [r7, #13]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	e00d      	b.n	8001a28 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	7b7a      	ldrb	r2, [r7, #13]
 8001a18:	08d2      	lsrs	r2, r2, #3
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	da08      	bge.n	8001a42 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001a30:	79fa      	ldrb	r2, [r7, #7]
 8001a32:	7b7b      	ldrb	r3, [r7, #13]
 8001a34:	4413      	add	r3, r2
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	7f3a      	ldrb	r2, [r7, #28]
 8001a3a:	79b9      	ldrb	r1, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe4b 	bl	80016d8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001a42:	7b7b      	ldrb	r3, [r7, #13]
 8001a44:	3301      	adds	r3, #1
 8001a46:	737b      	strb	r3, [r7, #13]
 8001a48:	7b7a      	ldrb	r2, [r7, #13]
 8001a4a:	797b      	ldrb	r3, [r7, #5]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3d4      	bcc.n	80019fa <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001a50:	7bbb      	ldrb	r3, [r7, #14]
 8001a52:	3301      	adds	r3, #1
 8001a54:	73bb      	strb	r3, [r7, #14]
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	71bb      	strb	r3, [r7, #6]
 8001a5c:	7bba      	ldrb	r2, [r7, #14]
 8001a5e:	7e3b      	ldrb	r3, [r7, #24]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3c7      	bcc.n	80019f4 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001a64:	e000      	b.n	8001a68 <ssd1306_DrawBitmap+0xb0>
        return;
 8001a66:	bf00      	nop
}
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001a78:	2381      	movs	r3, #129	@ 0x81
 8001a7a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fd38 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fd34 	bl	80014f4 <ssd1306_WriteCommand>
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001aa4:	23af      	movs	r3, #175	@ 0xaf
 8001aa6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <ssd1306_SetDisplayOn+0x38>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	715a      	strb	r2, [r3, #5]
 8001aae:	e004      	b.n	8001aba <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ab0:	23ae      	movs	r3, #174	@ 0xae
 8001ab2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <ssd1306_SetDisplayOn+0x38>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fd19 	bl	80014f4 <ssd1306_WriteCommand>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000868 	.word	0x20000868

08001ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	4a0f      	ldr	r2, [pc, #60]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001bfc <HAL_ADC_MspInit+0xdc>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d158      	bne.n	8001bf4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <HAL_ADC_MspInit+0xe0>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c00 <HAL_ADC_MspInit+0xe0>)
 8001b4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b52:	4b2b      	ldr	r3, [pc, #172]	@ (8001c00 <HAL_ADC_MspInit+0xe0>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <HAL_ADC_MspInit+0xe0>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a26      	ldr	r2, [pc, #152]	@ (8001c00 <HAL_ADC_MspInit+0xe0>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <HAL_ADC_MspInit+0xe0>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = VIDEO_Pin;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VIDEO_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	481d      	ldr	r0, [pc, #116]	@ (8001c04 <HAL_ADC_MspInit+0xe4>)
 8001b8e:	f001 fcad 	bl	80034ec <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001b92:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001b94:	4a1d      	ldr	r2, [pc, #116]	@ (8001c0c <HAL_ADC_MspInit+0xec>)
 8001b96:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001b9a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b9e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba0:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001bac:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bb2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bb4:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001bb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bba:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001bbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001bc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bca:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001bd8:	480b      	ldr	r0, [pc, #44]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001bda:	f001 f885 	bl	8002ce8 <HAL_DMA_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001be4:	f7ff fc64 	bl	80014b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a07      	ldr	r2, [pc, #28]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001bec:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bee:	4a06      	ldr	r2, [pc, #24]	@ (8001c08 <HAL_ADC_MspInit+0xe8>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	@ 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40012200 	.word	0x40012200
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	20000260 	.word	0x20000260
 8001c0c:	40026410 	.word	0x40026410

08001c10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a19      	ldr	r2, [pc, #100]	@ (8001c94 <HAL_SPI_MspInit+0x84>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d12c      	bne.n	8001c8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <HAL_SPI_MspInit+0x88>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4a17      	ldr	r2, [pc, #92]	@ (8001c98 <HAL_SPI_MspInit+0x88>)
 8001c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_SPI_MspInit+0x88>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_SPI_MspInit+0x88>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <HAL_SPI_MspInit+0x88>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_SPI_MspInit+0x88>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c6a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <HAL_SPI_MspInit+0x8c>)
 8001c88:	f001 fc30 	bl	80034ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	@ 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40003c00 	.word	0x40003c00
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020800 	.word	0x40020800

08001ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a22      	ldr	r2, [pc, #136]	@ (8001d38 <HAL_TIM_Base_MspInit+0x98>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d13d      	bne.n	8001d2e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <HAL_TIM_Base_MspInit+0x9c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	4a20      	ldr	r2, [pc, #128]	@ (8001d3c <HAL_TIM_Base_MspInit+0x9c>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <HAL_TIM_Base_MspInit+0x9c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d44 <HAL_TIM_Base_MspInit+0xa4>)
 8001cd2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001cd6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001cda:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001cde:	2240      	movs	r2, #64	@ 0x40
 8001ce0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001cea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cee:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cf6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001cfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cfe:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d12:	480b      	ldr	r0, [pc, #44]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001d14:	f000 ffe8 	bl	8002ce8 <HAL_DMA_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001d1e:	f7ff fbc7 	bl	80014b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a06      	ldr	r2, [pc, #24]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d28:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa0>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	20000360 	.word	0x20000360
 8001d44:	40026428 	.word	0x40026428

08001d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a12      	ldr	r2, [pc, #72]	@ (8001db0 <HAL_TIM_MspPostInit+0x68>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d11e      	bne.n	8001da8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <HAL_TIM_MspPostInit+0x6c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a10      	ldr	r2, [pc, #64]	@ (8001db4 <HAL_TIM_MspPostInit+0x6c>)
 8001d74:	f043 0310 	orr.w	r3, r3, #16
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_TIM_MspPostInit+0x6c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	4619      	mov	r1, r3
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <HAL_TIM_MspPostInit+0x70>)
 8001da4:	f001 fba2 	bl	80034ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40010000 	.word	0x40010000
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a34      	ldr	r2, [pc, #208]	@ (8001eac <HAL_UART_MspInit+0xf0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d161      	bne.n	8001ea2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b33      	ldr	r3, [pc, #204]	@ (8001eb0 <HAL_UART_MspInit+0xf4>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a32      	ldr	r2, [pc, #200]	@ (8001eb0 <HAL_UART_MspInit+0xf4>)
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b30      	ldr	r3, [pc, #192]	@ (8001eb0 <HAL_UART_MspInit+0xf4>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb0 <HAL_UART_MspInit+0xf4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb0 <HAL_UART_MspInit+0xf4>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b29      	ldr	r3, [pc, #164]	@ (8001eb0 <HAL_UART_MspInit+0xf4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e16:	230c      	movs	r3, #12
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e26:	2307      	movs	r3, #7
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4820      	ldr	r0, [pc, #128]	@ (8001eb4 <HAL_UART_MspInit+0xf8>)
 8001e32:	f001 fb5b 	bl	80034ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e38:	4a20      	ldr	r2, [pc, #128]	@ (8001ebc <HAL_UART_MspInit+0x100>)
 8001e3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e3e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e42:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e44:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e56:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e58:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e64:	4b14      	ldr	r3, [pc, #80]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e76:	4810      	ldr	r0, [pc, #64]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e78:	f000 ff36 	bl	8002ce8 <HAL_DMA_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001e82:	f7ff fb15 	bl	80014b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <HAL_UART_MspInit+0xfc>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2026      	movs	r0, #38	@ 0x26
 8001e98:	f000 feef 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e9c:	2026      	movs	r0, #38	@ 0x26
 8001e9e:	f000 ff08 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3728      	adds	r7, #40	@ 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40004400 	.word	0x40004400
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	20000408 	.word	0x20000408
 8001ebc:	40026088 	.word	0x40026088

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f16:	f000 f97f 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f24:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <DMA1_Stream5_IRQHandler+0x10>)
 8001f26:	f001 f877 	bl	8003018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000408 	.word	0x20000408

08001f34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <USART2_IRQHandler+0x10>)
 8001f3a:	f003 fbbd 	bl	80056b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200003c0 	.word	0x200003c0

08001f48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <DMA2_Stream0_IRQHandler+0x10>)
 8001f4e:	f001 f863 	bl	8003018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000260 	.word	0x20000260

08001f5c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f60:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <DMA2_Stream1_IRQHandler+0x10>)
 8001f62:	f001 f859 	bl	8003018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000360 	.word	0x20000360

08001f70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return 1;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_kill>:

int _kill(int pid, int sig)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f8a:	f005 fe87 	bl	8007c9c <__errno>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2216      	movs	r2, #22
 8001f92:	601a      	str	r2, [r3, #0]
  return -1;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_exit>:

void _exit (int status)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ffe7 	bl	8001f80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fb2:	bf00      	nop
 8001fb4:	e7fd      	b.n	8001fb2 <_exit+0x12>

08001fb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e00a      	b.n	8001fde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fc8:	f3af 8000 	nop.w
 8001fcc:	4601      	mov	r1, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	60ba      	str	r2, [r7, #8]
 8001fd4:	b2ca      	uxtb	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	dbf0      	blt.n	8001fc8 <_read+0x12>
  }

  return len;
 8001fe6:	687b      	ldr	r3, [r7, #4]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e009      	b.n	8002016 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	60ba      	str	r2, [r7, #8]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	dbf1      	blt.n	8002002 <_write+0x12>
  }
  return len;
 800201e:	687b      	ldr	r3, [r7, #4]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <_close>:

int _close(int file)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002050:	605a      	str	r2, [r3, #4]
  return 0;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_isatty>:

int _isatty(int file)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002098:	4a14      	ldr	r2, [pc, #80]	@ (80020ec <_sbrk+0x5c>)
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <_sbrk+0x60>)
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a4:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ac:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <_sbrk+0x64>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	@ (80020f8 <_sbrk+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d207      	bcs.n	80020d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c0:	f005 fdec 	bl	8007c9c <__errno>
 80020c4:	4603      	mov	r3, r0
 80020c6:	220c      	movs	r2, #12
 80020c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	e009      	b.n	80020e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a05      	ldr	r2, [pc, #20]	@ (80020f4 <_sbrk+0x64>)
 80020e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20020000 	.word	0x20020000
 80020f0:	00000400 	.word	0x00000400
 80020f4:	20000870 	.word	0x20000870
 80020f8:	20001330 	.word	0x20001330

080020fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <SystemInit+0x20>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	4a05      	ldr	r2, [pc, #20]	@ (800211c <SystemInit+0x20>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002158 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002124:	f7ff ffea 	bl	80020fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800212a:	490d      	ldr	r1, [pc, #52]	@ (8002160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002140:	4c0a      	ldr	r4, [pc, #40]	@ (800216c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214e:	f005 fdab 	bl	8007ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002152:	f7fe fea1 	bl	8000e98 <main>
  bx  lr    
 8002156:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002164:	0800bc40 	.word	0x0800bc40
  ldr r2, =_sbss
 8002168:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800216c:	20001330 	.word	0x20001330

08002170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC_IRQHandler>
	...

08002174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002178:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <HAL_Init+0x40>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <HAL_Init+0x40>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800218e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	@ (80021b4 <HAL_Init+0x40>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 fd61 	bl	8002c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	200f      	movs	r0, #15
 80021a4:	f000 f808 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fc92 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fd79 	bl	8002cce <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 fd41 	bl	8002c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	@ (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000000 	.word	0x20000000
 8002210:	20000008 	.word	0x20000008
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_IncTick+0x20>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_IncTick+0x24>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_IncTick+0x24>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000008 	.word	0x20000008
 800223c:	20000874 	.word	0x20000874

08002240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_GetTick+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000874 	.word	0x20000874

08002258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff ffee 	bl	8002240 <HAL_GetTick>
 8002264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d005      	beq.n	800227e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_Delay+0x44>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227e:	bf00      	nop
 8002280:	f7ff ffde 	bl	8002240 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <HAL_Delay+0x28>
  {
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008

080022a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e033      	b.n	800231e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fc2e 	bl	8001b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022e6:	f023 0302 	bic.w	r3, r3, #2
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fa68 	bl	80027c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
 800230e:	e001      	b.n	8002314 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Start_DMA+0x1e>
 8002342:	2302      	movs	r3, #2
 8002344:	e0e9      	b.n	800251a <HAL_ADC_Start_DMA+0x1f2>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d018      	beq.n	800238e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800236c:	4b6d      	ldr	r3, [pc, #436]	@ (8002524 <HAL_ADC_Start_DMA+0x1fc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a6d      	ldr	r2, [pc, #436]	@ (8002528 <HAL_ADC_Start_DMA+0x200>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0c9a      	lsrs	r2, r3, #18
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	3b01      	subs	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800239c:	d107      	bne.n	80023ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023ac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	f040 80a1 	bne.w	8002500 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023fc:	d106      	bne.n	800240c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f023 0206 	bic.w	r2, r3, #6
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
 800240a:	e002      	b.n	8002412 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800241a:	4b44      	ldr	r3, [pc, #272]	@ (800252c <HAL_ADC_Start_DMA+0x204>)
 800241c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002422:	4a43      	ldr	r2, [pc, #268]	@ (8002530 <HAL_ADC_Start_DMA+0x208>)
 8002424:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242a:	4a42      	ldr	r2, [pc, #264]	@ (8002534 <HAL_ADC_Start_DMA+0x20c>)
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002432:	4a41      	ldr	r2, [pc, #260]	@ (8002538 <HAL_ADC_Start_DMA+0x210>)
 8002434:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800243e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800244e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800245e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	334c      	adds	r3, #76	@ 0x4c
 800246a:	4619      	mov	r1, r3
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f000 fce8 	bl	8002e44 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	2b00      	cmp	r3, #0
 800247e:	d12a      	bne.n	80024d6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a2d      	ldr	r2, [pc, #180]	@ (800253c <HAL_ADC_Start_DMA+0x214>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d015      	beq.n	80024b6 <HAL_ADC_Start_DMA+0x18e>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a2c      	ldr	r2, [pc, #176]	@ (8002540 <HAL_ADC_Start_DMA+0x218>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_Start_DMA+0x178>
 8002494:	4b25      	ldr	r3, [pc, #148]	@ (800252c <HAL_ADC_Start_DMA+0x204>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a27      	ldr	r2, [pc, #156]	@ (8002544 <HAL_ADC_Start_DMA+0x21c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d136      	bne.n	8002518 <HAL_ADC_Start_DMA+0x1f0>
 80024aa:	4b20      	ldr	r3, [pc, #128]	@ (800252c <HAL_ADC_Start_DMA+0x204>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d130      	bne.n	8002518 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d129      	bne.n	8002518 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e020      	b.n	8002518 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a18      	ldr	r2, [pc, #96]	@ (800253c <HAL_ADC_Start_DMA+0x214>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d11b      	bne.n	8002518 <HAL_ADC_Start_DMA+0x1f0>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d114      	bne.n	8002518 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	e00b      	b.n	8002518 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f043 0210 	orr.w	r2, r3, #16
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000
 8002528:	431bde83 	.word	0x431bde83
 800252c:	40012300 	.word	0x40012300
 8002530:	080029c1 	.word	0x080029c1
 8002534:	08002a7b 	.word	0x08002a7b
 8002538:	08002a97 	.word	0x08002a97
 800253c:	40012000 	.word	0x40012000
 8002540:	40012100 	.word	0x40012100
 8002544:	40012200 	.word	0x40012200

08002548 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x1c>
 800259c:	2302      	movs	r3, #2
 800259e:	e105      	b.n	80027ac <HAL_ADC_ConfigChannel+0x228>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b09      	cmp	r3, #9
 80025ae:	d925      	bls.n	80025fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68d9      	ldr	r1, [r3, #12]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	3b1e      	subs	r3, #30
 80025c6:	2207      	movs	r2, #7
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43da      	mvns	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	400a      	ands	r2, r1
 80025d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68d9      	ldr	r1, [r3, #12]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4403      	add	r3, r0
 80025ee:	3b1e      	subs	r3, #30
 80025f0:	409a      	lsls	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	e022      	b.n	8002642 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6919      	ldr	r1, [r3, #16]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	2207      	movs	r2, #7
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	400a      	ands	r2, r1
 800261e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6919      	ldr	r1, [r3, #16]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	4618      	mov	r0, r3
 8002632:	4603      	mov	r3, r0
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4403      	add	r3, r0
 8002638:	409a      	lsls	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b06      	cmp	r3, #6
 8002648:	d824      	bhi.n	8002694 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	3b05      	subs	r3, #5
 800265c:	221f      	movs	r2, #31
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	400a      	ands	r2, r1
 800266a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	4618      	mov	r0, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	3b05      	subs	r3, #5
 8002686:	fa00 f203 	lsl.w	r2, r0, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	635a      	str	r2, [r3, #52]	@ 0x34
 8002692:	e04c      	b.n	800272e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b0c      	cmp	r3, #12
 800269a:	d824      	bhi.n	80026e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	3b23      	subs	r3, #35	@ 0x23
 80026ae:	221f      	movs	r2, #31
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43da      	mvns	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	400a      	ands	r2, r1
 80026bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	3b23      	subs	r3, #35	@ 0x23
 80026d8:	fa00 f203 	lsl.w	r2, r0, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026e4:	e023      	b.n	800272e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	3b41      	subs	r3, #65	@ 0x41
 80026f8:	221f      	movs	r2, #31
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	400a      	ands	r2, r1
 8002706:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	3b41      	subs	r3, #65	@ 0x41
 8002722:	fa00 f203 	lsl.w	r2, r0, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800272e:	4b22      	ldr	r3, [pc, #136]	@ (80027b8 <HAL_ADC_ConfigChannel+0x234>)
 8002730:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a21      	ldr	r2, [pc, #132]	@ (80027bc <HAL_ADC_ConfigChannel+0x238>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d109      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x1cc>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b12      	cmp	r3, #18
 8002742:	d105      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a19      	ldr	r2, [pc, #100]	@ (80027bc <HAL_ADC_ConfigChannel+0x238>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d123      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x21e>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b10      	cmp	r3, #16
 8002760:	d003      	beq.n	800276a <HAL_ADC_ConfigChannel+0x1e6>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b11      	cmp	r3, #17
 8002768:	d11b      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b10      	cmp	r3, #16
 800277c:	d111      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800277e:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <HAL_ADC_ConfigChannel+0x23c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a10      	ldr	r2, [pc, #64]	@ (80027c4 <HAL_ADC_ConfigChannel+0x240>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	0c9a      	lsrs	r2, r3, #18
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002794:	e002      	b.n	800279c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	3b01      	subs	r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f9      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40012300 	.word	0x40012300
 80027bc:	40012000 	.word	0x40012000
 80027c0:	20000000 	.word	0x20000000
 80027c4:	431bde83 	.word	0x431bde83

080027c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027d0:	4b79      	ldr	r3, [pc, #484]	@ (80029b8 <ADC_Init+0x1f0>)
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	021a      	lsls	r2, r3, #8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6899      	ldr	r1, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	4a58      	ldr	r2, [pc, #352]	@ (80029bc <ADC_Init+0x1f4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d022      	beq.n	80028a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800286e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002890:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	e00f      	b.n	80028c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0202 	bic.w	r2, r2, #2
 80028d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6899      	ldr	r1, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7e1b      	ldrb	r3, [r3, #24]
 80028e0:	005a      	lsls	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01b      	beq.n	800292c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002902:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002912:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	3b01      	subs	r3, #1
 8002920:	035a      	lsls	r2, r3, #13
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	e007      	b.n	800293c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800293a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800294a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	3b01      	subs	r3, #1
 8002958:	051a      	lsls	r2, r3, #20
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6899      	ldr	r1, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800297e:	025a      	lsls	r2, r3, #9
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002996:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	029a      	lsls	r2, r3, #10
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40012300 	.word	0x40012300
 80029bc:	0f000001 	.word	0x0f000001

080029c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d13c      	bne.n	8002a54 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d12b      	bne.n	8002a4c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d127      	bne.n	8002a4c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d119      	bne.n	8002a4c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0220 	bic.w	r2, r2, #32
 8002a26:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	f043 0201 	orr.w	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f7ff fd7b 	bl	8002548 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a52:	e00e      	b.n	8002a72 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff fd85 	bl	8002570 <HAL_ADC_ErrorCallback>
}
 8002a66:	e004      	b.n	8002a72 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff fd67 	bl	800255c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2240      	movs	r2, #64	@ 0x40
 8002aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	f043 0204 	orr.w	r2, r3, #4
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff fd5a 	bl	8002570 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002abc:	bf00      	nop
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af6:	4a04      	ldr	r2, [pc, #16]	@ (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	60d3      	str	r3, [r2, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b10:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <__NVIC_GetPriorityGrouping+0x18>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	db0b      	blt.n	8002b52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4907      	ldr	r1, [pc, #28]	@ (8002b60 <__NVIC_EnableIRQ+0x38>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2001      	movs	r0, #1
 8002b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000e100 	.word	0xe000e100

08002b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db0a      	blt.n	8002b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	490c      	ldr	r1, [pc, #48]	@ (8002bb0 <__NVIC_SetPriority+0x4c>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	440b      	add	r3, r1
 8002b88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b8c:	e00a      	b.n	8002ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4908      	ldr	r1, [pc, #32]	@ (8002bb4 <__NVIC_SetPriority+0x50>)
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	761a      	strb	r2, [r3, #24]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000e100 	.word	0xe000e100
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	@ 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f1c3 0307 	rsb	r3, r3, #7
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf28      	it	cs
 8002bd6:	2304      	movcs	r3, #4
 8002bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d902      	bls.n	8002be8 <NVIC_EncodePriority+0x30>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3b03      	subs	r3, #3
 8002be6:	e000      	b.n	8002bea <NVIC_EncodePriority+0x32>
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43d9      	mvns	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	4313      	orrs	r3, r2
         );
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3724      	adds	r7, #36	@ 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c30:	d301      	bcc.n	8002c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00f      	b.n	8002c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c36:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <SysTick_Config+0x40>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3e:	210f      	movs	r1, #15
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	f7ff ff8e 	bl	8002b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <SysTick_Config+0x40>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <SysTick_Config+0x40>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	e000e010 	.word	0xe000e010

08002c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ff29 	bl	8002ac4 <__NVIC_SetPriorityGrouping>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8c:	f7ff ff3e 	bl	8002b0c <__NVIC_GetPriorityGrouping>
 8002c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff8e 	bl	8002bb8 <NVIC_EncodePriority>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff5d 	bl	8002b64 <__NVIC_SetPriority>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff31 	bl	8002b28 <__NVIC_EnableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ffa2 	bl	8002c20 <SysTick_Config>
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cf4:	f7ff faa4 	bl	8002240 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e099      	b.n	8002e38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d24:	e00f      	b.n	8002d46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d26:	f7ff fa8b 	bl	8002240 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d908      	bls.n	8002d46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e078      	b.n	8002e38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e8      	bne.n	8002d26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4b38      	ldr	r3, [pc, #224]	@ (8002e40 <HAL_DMA_Init+0x158>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d107      	bne.n	8002db0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da8:	4313      	orrs	r3, r2
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f023 0307 	bic.w	r3, r3, #7
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d117      	bne.n	8002e0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00e      	beq.n	8002e0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fb01 	bl	80033f4 <DMA_CheckFifoParam>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2240      	movs	r2, #64	@ 0x40
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e06:	2301      	movs	r3, #1
 8002e08:	e016      	b.n	8002e38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fab8 	bl	8003388 <DMA_CalcBaseAndBitshift>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e20:	223f      	movs	r2, #63	@ 0x3f
 8002e22:	409a      	lsls	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	f010803f 	.word	0xf010803f

08002e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_DMA_Start_IT+0x26>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e040      	b.n	8002eec <HAL_DMA_Start_IT+0xa8>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d12f      	bne.n	8002ede <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa4a 	bl	800332c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9c:	223f      	movs	r2, #63	@ 0x3f
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0216 	orr.w	r2, r2, #22
 8002eb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0208 	orr.w	r2, r2, #8
 8002eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e005      	b.n	8002eea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f02:	f7ff f99d 	bl	8002240 <HAL_GetTick>
 8002f06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d008      	beq.n	8002f26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2280      	movs	r2, #128	@ 0x80
 8002f18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e052      	b.n	8002fcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0216 	bic.w	r2, r2, #22
 8002f34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <HAL_DMA_Abort+0x62>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0208 	bic.w	r2, r2, #8
 8002f64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f76:	e013      	b.n	8002fa0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f78:	f7ff f962 	bl	8002240 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d90c      	bls.n	8002fa0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2203      	movs	r2, #3
 8002f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e015      	b.n	8002fcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e4      	bne.n	8002f78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	223f      	movs	r2, #63	@ 0x3f
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2280      	movs	r2, #128	@ 0x80
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00c      	b.n	800300c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2205      	movs	r2, #5
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003024:	4b8e      	ldr	r3, [pc, #568]	@ (8003260 <HAL_DMA_IRQHandler+0x248>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a8e      	ldr	r2, [pc, #568]	@ (8003264 <HAL_DMA_IRQHandler+0x24c>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0a9b      	lsrs	r3, r3, #10
 8003030:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	2208      	movs	r2, #8
 8003044:	409a      	lsls	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01a      	beq.n	8003084 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0204 	bic.w	r2, r2, #4
 800306a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	2208      	movs	r2, #8
 8003072:	409a      	lsls	r2, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003088:	2201      	movs	r2, #1
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d012      	beq.n	80030ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a6:	2201      	movs	r2, #1
 80030a8:	409a      	lsls	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b2:	f043 0202 	orr.w	r2, r3, #2
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030be:	2204      	movs	r2, #4
 80030c0:	409a      	lsls	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d012      	beq.n	80030f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030dc:	2204      	movs	r2, #4
 80030de:	409a      	lsls	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	2210      	movs	r2, #16
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d043      	beq.n	8003188 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d03c      	beq.n	8003188 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003112:	2210      	movs	r2, #16
 8003114:	409a      	lsls	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d018      	beq.n	800315a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d108      	bne.n	8003148 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d024      	beq.n	8003188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
 8003146:	e01f      	b.n	8003188 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
 8003158:	e016      	b.n	8003188 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0208 	bic.w	r2, r2, #8
 8003176:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	2220      	movs	r2, #32
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 808f 	beq.w	80032b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8087 	beq.w	80032b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ae:	2220      	movs	r2, #32
 80031b0:	409a      	lsls	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d136      	bne.n	8003230 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0216 	bic.w	r2, r2, #22
 80031d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_DMA_IRQHandler+0x1da>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0208 	bic.w	r2, r2, #8
 8003200:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	223f      	movs	r2, #63	@ 0x3f
 8003208:	409a      	lsls	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d07e      	beq.n	8003324 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
        }
        return;
 800322e:	e079      	b.n	8003324 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01d      	beq.n	800327a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10d      	bne.n	8003268 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003250:	2b00      	cmp	r3, #0
 8003252:	d031      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4798      	blx	r3
 800325c:	e02c      	b.n	80032b8 <HAL_DMA_IRQHandler+0x2a0>
 800325e:	bf00      	nop
 8003260:	20000000 	.word	0x20000000
 8003264:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d023      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
 8003278:	e01e      	b.n	80032b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10f      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0210 	bic.w	r2, r2, #16
 8003296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d032      	beq.n	8003326 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d022      	beq.n	8003312 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2205      	movs	r2, #5
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	3301      	adds	r3, #1
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d307      	bcc.n	8003300 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f2      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x2cc>
 80032fe:	e000      	b.n	8003302 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003300:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
 8003322:	e000      	b.n	8003326 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003324:	bf00      	nop
    }
  }
}
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003348:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b40      	cmp	r3, #64	@ 0x40
 8003358:	d108      	bne.n	800336c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800336a:	e007      	b.n	800337c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3b10      	subs	r3, #16
 8003398:	4a14      	ldr	r2, [pc, #80]	@ (80033ec <DMA_CalcBaseAndBitshift+0x64>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033a2:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <DMA_CalcBaseAndBitshift+0x68>)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d909      	bls.n	80033ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033be:	f023 0303 	bic.w	r3, r3, #3
 80033c2:	1d1a      	adds	r2, r3, #4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80033c8:	e007      	b.n	80033da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	aaaaaaab 	.word	0xaaaaaaab
 80033f0:	0800b2b8 	.word	0x0800b2b8

080033f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003404:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11f      	bne.n	800344e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d856      	bhi.n	80034c2 <DMA_CheckFifoParam+0xce>
 8003414:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <DMA_CheckFifoParam+0x28>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	0800342d 	.word	0x0800342d
 8003420:	0800343f 	.word	0x0800343f
 8003424:	0800342d 	.word	0x0800342d
 8003428:	080034c3 	.word	0x080034c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d046      	beq.n	80034c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343c:	e043      	b.n	80034c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003446:	d140      	bne.n	80034ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344c:	e03d      	b.n	80034ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003456:	d121      	bne.n	800349c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d837      	bhi.n	80034ce <DMA_CheckFifoParam+0xda>
 800345e:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <DMA_CheckFifoParam+0x70>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003475 	.word	0x08003475
 8003468:	0800347b 	.word	0x0800347b
 800346c:	08003475 	.word	0x08003475
 8003470:	0800348d 	.word	0x0800348d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      break;
 8003478:	e030      	b.n	80034dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d025      	beq.n	80034d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348a:	e022      	b.n	80034d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003490:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003494:	d11f      	bne.n	80034d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800349a:	e01c      	b.n	80034d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d903      	bls.n	80034aa <DMA_CheckFifoParam+0xb6>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d003      	beq.n	80034b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034a8:	e018      	b.n	80034dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
      break;
 80034ae:	e015      	b.n	80034dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00e      	beq.n	80034da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      break;
 80034c0:	e00b      	b.n	80034da <DMA_CheckFifoParam+0xe6>
      break;
 80034c2:	bf00      	nop
 80034c4:	e00a      	b.n	80034dc <DMA_CheckFifoParam+0xe8>
      break;
 80034c6:	bf00      	nop
 80034c8:	e008      	b.n	80034dc <DMA_CheckFifoParam+0xe8>
      break;
 80034ca:	bf00      	nop
 80034cc:	e006      	b.n	80034dc <DMA_CheckFifoParam+0xe8>
      break;
 80034ce:	bf00      	nop
 80034d0:	e004      	b.n	80034dc <DMA_CheckFifoParam+0xe8>
      break;
 80034d2:	bf00      	nop
 80034d4:	e002      	b.n	80034dc <DMA_CheckFifoParam+0xe8>
      break;   
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <DMA_CheckFifoParam+0xe8>
      break;
 80034da:	bf00      	nop
    }
  } 
  
  return status; 
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop

080034ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	@ 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	e16b      	b.n	80037e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003508:	2201      	movs	r2, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	429a      	cmp	r2, r3
 8003522:	f040 815a 	bne.w	80037da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d005      	beq.n	800353e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800353a:	2b02      	cmp	r3, #2
 800353c:	d130      	bne.n	80035a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003574:	2201      	movs	r2, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 0201 	and.w	r2, r3, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d017      	beq.n	80035dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d123      	bne.n	8003630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	69b9      	ldr	r1, [r7, #24]
 800362c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80b4 	beq.w	80037da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	4b60      	ldr	r3, [pc, #384]	@ (80037f8 <HAL_GPIO_Init+0x30c>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	4a5f      	ldr	r2, [pc, #380]	@ (80037f8 <HAL_GPIO_Init+0x30c>)
 800367c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003680:	6453      	str	r3, [r2, #68]	@ 0x44
 8003682:	4b5d      	ldr	r3, [pc, #372]	@ (80037f8 <HAL_GPIO_Init+0x30c>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800368e:	4a5b      	ldr	r2, [pc, #364]	@ (80037fc <HAL_GPIO_Init+0x310>)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	3302      	adds	r3, #2
 8003696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	220f      	movs	r2, #15
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a52      	ldr	r2, [pc, #328]	@ (8003800 <HAL_GPIO_Init+0x314>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02b      	beq.n	8003712 <HAL_GPIO_Init+0x226>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a51      	ldr	r2, [pc, #324]	@ (8003804 <HAL_GPIO_Init+0x318>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d025      	beq.n	800370e <HAL_GPIO_Init+0x222>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a50      	ldr	r2, [pc, #320]	@ (8003808 <HAL_GPIO_Init+0x31c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01f      	beq.n	800370a <HAL_GPIO_Init+0x21e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4f      	ldr	r2, [pc, #316]	@ (800380c <HAL_GPIO_Init+0x320>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d019      	beq.n	8003706 <HAL_GPIO_Init+0x21a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003810 <HAL_GPIO_Init+0x324>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <HAL_GPIO_Init+0x216>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003814 <HAL_GPIO_Init+0x328>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00d      	beq.n	80036fe <HAL_GPIO_Init+0x212>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003818 <HAL_GPIO_Init+0x32c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <HAL_GPIO_Init+0x20e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4b      	ldr	r2, [pc, #300]	@ (800381c <HAL_GPIO_Init+0x330>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_GPIO_Init+0x20a>
 80036f2:	2307      	movs	r3, #7
 80036f4:	e00e      	b.n	8003714 <HAL_GPIO_Init+0x228>
 80036f6:	2308      	movs	r3, #8
 80036f8:	e00c      	b.n	8003714 <HAL_GPIO_Init+0x228>
 80036fa:	2306      	movs	r3, #6
 80036fc:	e00a      	b.n	8003714 <HAL_GPIO_Init+0x228>
 80036fe:	2305      	movs	r3, #5
 8003700:	e008      	b.n	8003714 <HAL_GPIO_Init+0x228>
 8003702:	2304      	movs	r3, #4
 8003704:	e006      	b.n	8003714 <HAL_GPIO_Init+0x228>
 8003706:	2303      	movs	r3, #3
 8003708:	e004      	b.n	8003714 <HAL_GPIO_Init+0x228>
 800370a:	2302      	movs	r3, #2
 800370c:	e002      	b.n	8003714 <HAL_GPIO_Init+0x228>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_GPIO_Init+0x228>
 8003712:	2300      	movs	r3, #0
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	f002 0203 	and.w	r2, r2, #3
 800371a:	0092      	lsls	r2, r2, #2
 800371c:	4093      	lsls	r3, r2
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003724:	4935      	ldr	r1, [pc, #212]	@ (80037fc <HAL_GPIO_Init+0x310>)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3302      	adds	r3, #2
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003732:	4b3b      	ldr	r3, [pc, #236]	@ (8003820 <HAL_GPIO_Init+0x334>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003756:	4a32      	ldr	r2, [pc, #200]	@ (8003820 <HAL_GPIO_Init+0x334>)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800375c:	4b30      	ldr	r3, [pc, #192]	@ (8003820 <HAL_GPIO_Init+0x334>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003780:	4a27      	ldr	r2, [pc, #156]	@ (8003820 <HAL_GPIO_Init+0x334>)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003786:	4b26      	ldr	r3, [pc, #152]	@ (8003820 <HAL_GPIO_Init+0x334>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	43db      	mvns	r3, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4013      	ands	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003820 <HAL_GPIO_Init+0x334>)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <HAL_GPIO_Init+0x334>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037d4:	4a12      	ldr	r2, [pc, #72]	@ (8003820 <HAL_GPIO_Init+0x334>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	3301      	adds	r3, #1
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b0f      	cmp	r3, #15
 80037e4:	f67f ae90 	bls.w	8003508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3724      	adds	r7, #36	@ 0x24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40013800 	.word	0x40013800
 8003800:	40020000 	.word	0x40020000
 8003804:	40020400 	.word	0x40020400
 8003808:	40020800 	.word	0x40020800
 800380c:	40020c00 	.word	0x40020c00
 8003810:	40021000 	.word	0x40021000
 8003814:	40021400 	.word	0x40021400
 8003818:	40021800 	.word	0x40021800
 800381c:	40021c00 	.word	0x40021c00
 8003820:	40013c00 	.word	0x40013c00

08003824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e001      	b.n	8003846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
 8003860:	4613      	mov	r3, r2
 8003862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003864:	787b      	ldrb	r3, [r7, #1]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003870:	e003      	b.n	800387a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003872:	887b      	ldrh	r3, [r7, #2]
 8003874:	041a      	lsls	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	619a      	str	r2, [r3, #24]
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003892:	4b08      	ldr	r3, [pc, #32]	@ (80038b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800389e:	4a05      	ldr	r2, [pc, #20]	@ (80038b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f003 fb0c 	bl	8006ec4 <HAL_GPIO_EXTI_Callback>
  }
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40013c00 	.word	0x40013c00

080038b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e267      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d075      	beq.n	80039c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d6:	4b88      	ldr	r3, [pc, #544]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d00c      	beq.n	80038fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e2:	4b85      	ldr	r3, [pc, #532]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d112      	bne.n	8003914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ee:	4b82      	ldr	r3, [pc, #520]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038fa:	d10b      	bne.n	8003914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fc:	4b7e      	ldr	r3, [pc, #504]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d05b      	beq.n	80039c0 <HAL_RCC_OscConfig+0x108>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d157      	bne.n	80039c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e242      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800391c:	d106      	bne.n	800392c <HAL_RCC_OscConfig+0x74>
 800391e:	4b76      	ldr	r3, [pc, #472]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a75      	ldr	r2, [pc, #468]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e01d      	b.n	8003968 <HAL_RCC_OscConfig+0xb0>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x98>
 8003936:	4b70      	ldr	r3, [pc, #448]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a6f      	ldr	r2, [pc, #444]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 800393c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	4b6d      	ldr	r3, [pc, #436]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6c      	ldr	r2, [pc, #432]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e00b      	b.n	8003968 <HAL_RCC_OscConfig+0xb0>
 8003950:	4b69      	ldr	r3, [pc, #420]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a68      	ldr	r2, [pc, #416]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b66      	ldr	r3, [pc, #408]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a65      	ldr	r2, [pc, #404]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fe fc66 	bl	8002240 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003978:	f7fe fc62 	bl	8002240 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	@ 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e207      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	4b5b      	ldr	r3, [pc, #364]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0xc0>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe fc52 	bl	8002240 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fe fc4e 	bl	8002240 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	@ 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e1f3      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	4b51      	ldr	r3, [pc, #324]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0xe8>
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d063      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ce:	4b4a      	ldr	r3, [pc, #296]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039da:	4b47      	ldr	r3, [pc, #284]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d11c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e6:	4b44      	ldr	r3, [pc, #272]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d116      	bne.n	8003a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	4b41      	ldr	r3, [pc, #260]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_RCC_OscConfig+0x152>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e1c7      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4937      	ldr	r1, [pc, #220]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1e:	e03a      	b.n	8003a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a28:	4b34      	ldr	r3, [pc, #208]	@ (8003afc <HAL_RCC_OscConfig+0x244>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fe fc07 	bl	8002240 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a36:	f7fe fc03 	bl	8002240 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e1a8      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	4b2b      	ldr	r3, [pc, #172]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a54:	4b28      	ldr	r3, [pc, #160]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4925      	ldr	r1, [pc, #148]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]
 8003a68:	e015      	b.n	8003a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6a:	4b24      	ldr	r3, [pc, #144]	@ (8003afc <HAL_RCC_OscConfig+0x244>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fe fbe6 	bl	8002240 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a78:	f7fe fbe2 	bl	8002240 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e187      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d036      	beq.n	8003b10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d016      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aaa:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <HAL_RCC_OscConfig+0x248>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab0:	f7fe fbc6 	bl	8002240 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab8:	f7fe fbc2 	bl	8002240 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e167      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	4b0b      	ldr	r3, [pc, #44]	@ (8003af8 <HAL_RCC_OscConfig+0x240>)
 8003acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x200>
 8003ad6:	e01b      	b.n	8003b10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad8:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <HAL_RCC_OscConfig+0x248>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ade:	f7fe fbaf 	bl	8002240 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae4:	e00e      	b.n	8003b04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae6:	f7fe fbab 	bl	8002240 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d907      	bls.n	8003b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e150      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
 8003af8:	40023800 	.word	0x40023800
 8003afc:	42470000 	.word	0x42470000
 8003b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	4b88      	ldr	r3, [pc, #544]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ea      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8097 	beq.w	8003c4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b22:	4b81      	ldr	r3, [pc, #516]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	4b7d      	ldr	r3, [pc, #500]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	4a7c      	ldr	r2, [pc, #496]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4e:	4b77      	ldr	r3, [pc, #476]	@ (8003d2c <HAL_RCC_OscConfig+0x474>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d118      	bne.n	8003b8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5a:	4b74      	ldr	r3, [pc, #464]	@ (8003d2c <HAL_RCC_OscConfig+0x474>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a73      	ldr	r2, [pc, #460]	@ (8003d2c <HAL_RCC_OscConfig+0x474>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b66:	f7fe fb6b 	bl	8002240 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6e:	f7fe fb67 	bl	8002240 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e10c      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	4b6a      	ldr	r3, [pc, #424]	@ (8003d2c <HAL_RCC_OscConfig+0x474>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x2ea>
 8003b94:	4b64      	ldr	r3, [pc, #400]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	4a63      	ldr	r2, [pc, #396]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba0:	e01c      	b.n	8003bdc <HAL_RCC_OscConfig+0x324>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x30c>
 8003baa:	4b5f      	ldr	r3, [pc, #380]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	4a5e      	ldr	r2, [pc, #376]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	4a5b      	ldr	r2, [pc, #364]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0x324>
 8003bc4:	4b58      	ldr	r3, [pc, #352]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	4a57      	ldr	r2, [pc, #348]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd0:	4b55      	ldr	r3, [pc, #340]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd4:	4a54      	ldr	r2, [pc, #336]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f023 0304 	bic.w	r3, r3, #4
 8003bda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d015      	beq.n	8003c10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fe fb2c 	bl	8002240 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bec:	f7fe fb28 	bl	8002240 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e0cb      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c02:	4b49      	ldr	r3, [pc, #292]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0ee      	beq.n	8003bec <HAL_RCC_OscConfig+0x334>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c10:	f7fe fb16 	bl	8002240 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c18:	f7fe fb12 	bl	8002240 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e0b5      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ee      	bne.n	8003c18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c40:	4b39      	ldr	r3, [pc, #228]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	4a38      	ldr	r2, [pc, #224]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003c46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a1 	beq.w	8003d98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c56:	4b34      	ldr	r3, [pc, #208]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d05c      	beq.n	8003d1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d141      	bne.n	8003cee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6a:	4b31      	ldr	r3, [pc, #196]	@ (8003d30 <HAL_RCC_OscConfig+0x478>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe fae6 	bl	8002240 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fe fae2 	bl	8002240 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e087      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	4b27      	ldr	r3, [pc, #156]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	019b      	lsls	r3, r3, #6
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	085b      	lsrs	r3, r3, #1
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	041b      	lsls	r3, r3, #16
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb8:	061b      	lsls	r3, r3, #24
 8003cba:	491b      	ldr	r1, [pc, #108]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <HAL_RCC_OscConfig+0x478>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fe fabb 	bl	8002240 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cce:	f7fe fab7 	bl	8002240 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e05c      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce0:	4b11      	ldr	r3, [pc, #68]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x416>
 8003cec:	e054      	b.n	8003d98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <HAL_RCC_OscConfig+0x478>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe faa4 	bl	8002240 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fe faa0 	bl	8002240 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e045      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_RCC_OscConfig+0x470>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x444>
 8003d1a:	e03d      	b.n	8003d98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e038      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d34:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <HAL_RCC_OscConfig+0x4ec>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d028      	beq.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d121      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d11a      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d64:	4013      	ands	r3, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d111      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800

08003da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0cc      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b68      	ldr	r3, [pc, #416]	@ (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d90c      	bls.n	8003de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b65      	ldr	r3, [pc, #404]	@ (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b63      	ldr	r3, [pc, #396]	@ (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0b8      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d020      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dfc:	4b59      	ldr	r3, [pc, #356]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	4a58      	ldr	r2, [pc, #352]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e14:	4b53      	ldr	r3, [pc, #332]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a52      	ldr	r2, [pc, #328]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e20:	4b50      	ldr	r3, [pc, #320]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	494d      	ldr	r1, [pc, #308]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d044      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	4b47      	ldr	r3, [pc, #284]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d119      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e07f      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d107      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e66:	4b3f      	ldr	r3, [pc, #252]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e06f      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e76:	4b3b      	ldr	r3, [pc, #236]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e067      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e86:	4b37      	ldr	r3, [pc, #220]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 0203 	bic.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4934      	ldr	r1, [pc, #208]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e98:	f7fe f9d2 	bl	8002240 <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea0:	f7fe f9ce 	bl	8002240 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e04f      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 020c 	and.w	r2, r3, #12
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d1eb      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b25      	ldr	r3, [pc, #148]	@ (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d20c      	bcs.n	8003ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b22      	ldr	r3, [pc, #136]	@ (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b20      	ldr	r3, [pc, #128]	@ (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e032      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003efc:	4b19      	ldr	r3, [pc, #100]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4916      	ldr	r1, [pc, #88]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1a:	4b12      	ldr	r3, [pc, #72]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	490e      	ldr	r1, [pc, #56]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f2e:	f000 f821 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8003f32:	4602      	mov	r2, r0
 8003f34:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	490a      	ldr	r1, [pc, #40]	@ (8003f68 <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	5ccb      	ldrb	r3, [r1, r3]
 8003f42:	fa22 f303 	lsr.w	r3, r2, r3
 8003f46:	4a09      	ldr	r2, [pc, #36]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f4a:	4b09      	ldr	r3, [pc, #36]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe f932 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40023c00 	.word	0x40023c00
 8003f64:	40023800 	.word	0x40023800
 8003f68:	0800b2a0 	.word	0x0800b2a0
 8003f6c:	20000000 	.word	0x20000000
 8003f70:	20000004 	.word	0x20000004

08003f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f78:	b094      	sub	sp, #80	@ 0x50
 8003f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f80:	2300      	movs	r3, #0
 8003f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f84:	2300      	movs	r3, #0
 8003f86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f8c:	4b79      	ldr	r3, [pc, #484]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d00d      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	f200 80e1 	bhi.w	8004160 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d003      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x3a>
 8003fa6:	e0db      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa8:	4b73      	ldr	r3, [pc, #460]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x204>)
 8003faa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003fac:	e0db      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fae:	4b73      	ldr	r3, [pc, #460]	@ (800417c <HAL_RCC_GetSysClockFreq+0x208>)
 8003fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fb2:	e0d8      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d063      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fca:	4b6a      	ldr	r3, [pc, #424]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	099b      	lsrs	r3, r3, #6
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fde:	2300      	movs	r3, #0
 8003fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	462b      	mov	r3, r5
 8003fea:	f04f 0000 	mov.w	r0, #0
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	0159      	lsls	r1, r3, #5
 8003ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff8:	0150      	lsls	r0, r2, #5
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4621      	mov	r1, r4
 8004000:	1a51      	subs	r1, r2, r1
 8004002:	6139      	str	r1, [r7, #16]
 8004004:	4629      	mov	r1, r5
 8004006:	eb63 0301 	sbc.w	r3, r3, r1
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004018:	4659      	mov	r1, fp
 800401a:	018b      	lsls	r3, r1, #6
 800401c:	4651      	mov	r1, sl
 800401e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004022:	4651      	mov	r1, sl
 8004024:	018a      	lsls	r2, r1, #6
 8004026:	4651      	mov	r1, sl
 8004028:	ebb2 0801 	subs.w	r8, r2, r1
 800402c:	4659      	mov	r1, fp
 800402e:	eb63 0901 	sbc.w	r9, r3, r1
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800403e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004046:	4690      	mov	r8, r2
 8004048:	4699      	mov	r9, r3
 800404a:	4623      	mov	r3, r4
 800404c:	eb18 0303 	adds.w	r3, r8, r3
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	462b      	mov	r3, r5
 8004054:	eb49 0303 	adc.w	r3, r9, r3
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004066:	4629      	mov	r1, r5
 8004068:	024b      	lsls	r3, r1, #9
 800406a:	4621      	mov	r1, r4
 800406c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004070:	4621      	mov	r1, r4
 8004072:	024a      	lsls	r2, r1, #9
 8004074:	4610      	mov	r0, r2
 8004076:	4619      	mov	r1, r3
 8004078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800407a:	2200      	movs	r2, #0
 800407c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800407e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004080:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004084:	f7fc fd90 	bl	8000ba8 <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4613      	mov	r3, r2
 800408e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004090:	e058      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004092:	4b38      	ldr	r3, [pc, #224]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x200>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	2200      	movs	r2, #0
 800409a:	4618      	mov	r0, r3
 800409c:	4611      	mov	r1, r2
 800409e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	2300      	movs	r3, #0
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040ac:	4642      	mov	r2, r8
 80040ae:	464b      	mov	r3, r9
 80040b0:	f04f 0000 	mov.w	r0, #0
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	0159      	lsls	r1, r3, #5
 80040ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040be:	0150      	lsls	r0, r2, #5
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4641      	mov	r1, r8
 80040c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80040ca:	4649      	mov	r1, r9
 80040cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040e4:	ebb2 040a 	subs.w	r4, r2, sl
 80040e8:	eb63 050b 	sbc.w	r5, r3, fp
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	00eb      	lsls	r3, r5, #3
 80040f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040fa:	00e2      	lsls	r2, r4, #3
 80040fc:	4614      	mov	r4, r2
 80040fe:	461d      	mov	r5, r3
 8004100:	4643      	mov	r3, r8
 8004102:	18e3      	adds	r3, r4, r3
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	464b      	mov	r3, r9
 8004108:	eb45 0303 	adc.w	r3, r5, r3
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800411a:	4629      	mov	r1, r5
 800411c:	028b      	lsls	r3, r1, #10
 800411e:	4621      	mov	r1, r4
 8004120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004124:	4621      	mov	r1, r4
 8004126:	028a      	lsls	r2, r1, #10
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412e:	2200      	movs	r2, #0
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	61fa      	str	r2, [r7, #28]
 8004134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004138:	f7fc fd36 	bl	8000ba8 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4613      	mov	r3, r2
 8004142:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004144:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x200>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	3301      	adds	r3, #1
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004154:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800415e:	e002      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004160:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x204>)
 8004162:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004168:	4618      	mov	r0, r3
 800416a:	3750      	adds	r7, #80	@ 0x50
 800416c:	46bd      	mov	sp, r7
 800416e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	00f42400 	.word	0x00f42400
 800417c:	007a1200 	.word	0x007a1200

08004180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004184:	4b03      	ldr	r3, [pc, #12]	@ (8004194 <HAL_RCC_GetHCLKFreq+0x14>)
 8004186:	681b      	ldr	r3, [r3, #0]
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000000 	.word	0x20000000

08004198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800419c:	f7ff fff0 	bl	8004180 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	0a9b      	lsrs	r3, r3, #10
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4903      	ldr	r1, [pc, #12]	@ (80041bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	0800b2b0 	.word	0x0800b2b0

080041c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041c4:	f7ff ffdc 	bl	8004180 <HAL_RCC_GetHCLKFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	0b5b      	lsrs	r3, r3, #13
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	4903      	ldr	r1, [pc, #12]	@ (80041e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	0800b2b0 	.word	0x0800b2b0

080041e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e07b      	b.n	80042f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800420a:	d009      	beq.n	8004220 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	61da      	str	r2, [r3, #28]
 8004212:	e005      	b.n	8004220 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd fce8 	bl	8001c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a4:	ea42 0103 	orr.w	r1, r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0104 	and.w	r1, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	f003 0210 	and.w	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b088      	sub	sp, #32
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_SPI_Transmit+0x22>
 8004318:	2302      	movs	r3, #2
 800431a:	e12d      	b.n	8004578 <HAL_SPI_Transmit+0x27e>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004324:	f7fd ff8c 	bl	8002240 <HAL_GetTick>
 8004328:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d002      	beq.n	8004340 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800433a:	2302      	movs	r3, #2
 800433c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800433e:	e116      	b.n	800456e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_SPI_Transmit+0x52>
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004350:	e10d      	b.n	800456e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2203      	movs	r2, #3
 8004356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	88fa      	ldrh	r2, [r7, #6]
 800436a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004398:	d10f      	bne.n	80043ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b40      	cmp	r3, #64	@ 0x40
 80043c6:	d007      	beq.n	80043d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e0:	d14f      	bne.n	8004482 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_SPI_Transmit+0xf6>
 80043ea:	8afb      	ldrh	r3, [r7, #22]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d142      	bne.n	8004476 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	881a      	ldrh	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	1c9a      	adds	r2, r3, #2
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004414:	e02f      	b.n	8004476 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d112      	bne.n	800444a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004428:	881a      	ldrh	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004434:	1c9a      	adds	r2, r3, #2
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004448:	e015      	b.n	8004476 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800444a:	f7fd fef9 	bl	8002240 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d803      	bhi.n	8004462 <HAL_SPI_Transmit+0x168>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d102      	bne.n	8004468 <HAL_SPI_Transmit+0x16e>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004474:	e07b      	b.n	800456e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ca      	bne.n	8004416 <HAL_SPI_Transmit+0x11c>
 8004480:	e050      	b.n	8004524 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_SPI_Transmit+0x196>
 800448a:	8afb      	ldrh	r3, [r7, #22]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d144      	bne.n	800451a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044b6:	e030      	b.n	800451a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d113      	bne.n	80044ee <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	7812      	ldrb	r2, [r2, #0]
 80044d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044ec:	e015      	b.n	800451a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ee:	f7fd fea7 	bl	8002240 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d803      	bhi.n	8004506 <HAL_SPI_Transmit+0x20c>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d102      	bne.n	800450c <HAL_SPI_Transmit+0x212>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004518:	e029      	b.n	800456e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1c9      	bne.n	80044b8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	6839      	ldr	r1, [r7, #0]
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f8b1 	bl	8004690 <SPI_EndRxTxTransaction>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e003      	b.n	800456e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004576:	7ffb      	ldrb	r3, [r7, #31]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004590:	f7fd fe56 	bl	8002240 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	4413      	add	r3, r2
 800459e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045a0:	f7fd fe4e 	bl	8002240 <HAL_GetTick>
 80045a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045a6:	4b39      	ldr	r3, [pc, #228]	@ (800468c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	015b      	lsls	r3, r3, #5
 80045ac:	0d1b      	lsrs	r3, r3, #20
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045b6:	e054      	b.n	8004662 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d050      	beq.n	8004662 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045c0:	f7fd fe3e 	bl	8002240 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d902      	bls.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d13d      	bne.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ee:	d111      	bne.n	8004614 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f8:	d004      	beq.n	8004604 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004602:	d107      	bne.n	8004614 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004612:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800461c:	d10f      	bne.n	800463e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800463c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e017      	b.n	8004682 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	3b01      	subs	r3, #1
 8004660:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	429a      	cmp	r2, r3
 800467e:	d19b      	bne.n	80045b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000000 	.word	0x20000000

08004690 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2201      	movs	r2, #1
 80046a4:	2102      	movs	r1, #2
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff ff6a 	bl	8004580 <SPI_WaitFlagStateUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b6:	f043 0220 	orr.w	r2, r3, #32
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e032      	b.n	8004728 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004730 <SPI_EndRxTxTransaction+0xa0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004734 <SPI_EndRxTxTransaction+0xa4>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	0d5b      	lsrs	r3, r3, #21
 80046ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046e0:	d112      	bne.n	8004708 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2200      	movs	r2, #0
 80046ea:	2180      	movs	r1, #128	@ 0x80
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7ff ff47 	bl	8004580 <SPI_WaitFlagStateUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d016      	beq.n	8004726 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e00f      	b.n	8004728 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3b01      	subs	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471e:	2b80      	cmp	r3, #128	@ 0x80
 8004720:	d0f2      	beq.n	8004708 <SPI_EndRxTxTransaction+0x78>
 8004722:	e000      	b.n	8004726 <SPI_EndRxTxTransaction+0x96>
        break;
 8004724:	bf00      	nop
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000000 	.word	0x20000000
 8004734:	165e9f81 	.word	0x165e9f81

08004738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e041      	b.n	80047ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd fa9e 	bl	8001ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f000 fad8 	bl	8004d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e041      	b.n	800486c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f839 	bl	8004874 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f000 fa89 	bl	8004d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_TIM_PWM_Start+0x24>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e022      	b.n	80048f2 <HAL_TIM_PWM_Start+0x6a>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d109      	bne.n	80048c6 <HAL_TIM_PWM_Start+0x3e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	e015      	b.n	80048f2 <HAL_TIM_PWM_Start+0x6a>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d109      	bne.n	80048e0 <HAL_TIM_PWM_Start+0x58>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e008      	b.n	80048f2 <HAL_TIM_PWM_Start+0x6a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	bf14      	ite	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	2300      	moveq	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e07c      	b.n	80049f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0x82>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004908:	e013      	b.n	8004932 <HAL_TIM_PWM_Start+0xaa>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d104      	bne.n	800491a <HAL_TIM_PWM_Start+0x92>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004918:	e00b      	b.n	8004932 <HAL_TIM_PWM_Start+0xaa>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0xa2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004928:	e003      	b.n	8004932 <HAL_TIM_PWM_Start+0xaa>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fcec 	bl	8005318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2d      	ldr	r2, [pc, #180]	@ (80049fc <HAL_TIM_PWM_Start+0x174>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d004      	beq.n	8004954 <HAL_TIM_PWM_Start+0xcc>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a00 <HAL_TIM_PWM_Start+0x178>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d101      	bne.n	8004958 <HAL_TIM_PWM_Start+0xd0>
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <HAL_TIM_PWM_Start+0xd2>
 8004958:	2300      	movs	r3, #0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a22      	ldr	r2, [pc, #136]	@ (80049fc <HAL_TIM_PWM_Start+0x174>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_TIM_PWM_Start+0x136>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004980:	d01d      	beq.n	80049be <HAL_TIM_PWM_Start+0x136>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1f      	ldr	r2, [pc, #124]	@ (8004a04 <HAL_TIM_PWM_Start+0x17c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d018      	beq.n	80049be <HAL_TIM_PWM_Start+0x136>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1d      	ldr	r2, [pc, #116]	@ (8004a08 <HAL_TIM_PWM_Start+0x180>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_TIM_PWM_Start+0x136>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <HAL_TIM_PWM_Start+0x184>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_TIM_PWM_Start+0x136>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a16      	ldr	r2, [pc, #88]	@ (8004a00 <HAL_TIM_PWM_Start+0x178>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_TIM_PWM_Start+0x136>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <HAL_TIM_PWM_Start+0x188>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_TIM_PWM_Start+0x136>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a16      	ldr	r2, [pc, #88]	@ (8004a14 <HAL_TIM_PWM_Start+0x18c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d111      	bne.n	80049e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d010      	beq.n	80049f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e0:	e007      	b.n	80049f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40010400 	.word	0x40010400
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40001800 	.word	0x40001800

08004a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e0ae      	b.n	8004b94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b0c      	cmp	r3, #12
 8004a42:	f200 809f 	bhi.w	8004b84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a46:	a201      	add	r2, pc, #4	@ (adr r2, 8004a4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004a81 	.word	0x08004a81
 8004a50:	08004b85 	.word	0x08004b85
 8004a54:	08004b85 	.word	0x08004b85
 8004a58:	08004b85 	.word	0x08004b85
 8004a5c:	08004ac1 	.word	0x08004ac1
 8004a60:	08004b85 	.word	0x08004b85
 8004a64:	08004b85 	.word	0x08004b85
 8004a68:	08004b85 	.word	0x08004b85
 8004a6c:	08004b03 	.word	0x08004b03
 8004a70:	08004b85 	.word	0x08004b85
 8004a74:	08004b85 	.word	0x08004b85
 8004a78:	08004b85 	.word	0x08004b85
 8004a7c:	08004b43 	.word	0x08004b43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f9fc 	bl	8004e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0208 	orr.w	r2, r2, #8
 8004a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0204 	bic.w	r2, r2, #4
 8004aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6999      	ldr	r1, [r3, #24]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	619a      	str	r2, [r3, #24]
      break;
 8004abe:	e064      	b.n	8004b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fa4c 	bl	8004f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6999      	ldr	r1, [r3, #24]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	021a      	lsls	r2, r3, #8
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	619a      	str	r2, [r3, #24]
      break;
 8004b00:	e043      	b.n	8004b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 faa1 	bl	8005050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0208 	orr.w	r2, r2, #8
 8004b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0204 	bic.w	r2, r2, #4
 8004b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69d9      	ldr	r1, [r3, #28]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	61da      	str	r2, [r3, #28]
      break;
 8004b40:	e023      	b.n	8004b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 faf5 	bl	8005138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69d9      	ldr	r1, [r3, #28]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	021a      	lsls	r2, r3, #8
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	61da      	str	r2, [r3, #28]
      break;
 8004b82:	e002      	b.n	8004b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	75fb      	strb	r3, [r7, #23]
      break;
 8004b88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e0b4      	b.n	8004d22 <HAL_TIM_ConfigClockSource+0x186>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf0:	d03e      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0xd4>
 8004bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf6:	f200 8087 	bhi.w	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfe:	f000 8086 	beq.w	8004d0e <HAL_TIM_ConfigClockSource+0x172>
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c06:	d87f      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b70      	cmp	r3, #112	@ 0x70
 8004c0a:	d01a      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0xa6>
 8004c0c:	2b70      	cmp	r3, #112	@ 0x70
 8004c0e:	d87b      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b60      	cmp	r3, #96	@ 0x60
 8004c12:	d050      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c14:	2b60      	cmp	r3, #96	@ 0x60
 8004c16:	d877      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b50      	cmp	r3, #80	@ 0x50
 8004c1a:	d03c      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0xfa>
 8004c1c:	2b50      	cmp	r3, #80	@ 0x50
 8004c1e:	d873      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b40      	cmp	r3, #64	@ 0x40
 8004c22:	d058      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c24:	2b40      	cmp	r3, #64	@ 0x40
 8004c26:	d86f      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b30      	cmp	r3, #48	@ 0x30
 8004c2a:	d064      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c2c:	2b30      	cmp	r3, #48	@ 0x30
 8004c2e:	d86b      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d060      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d867      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d05c      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d05a      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c40:	e062      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c52:	f000 fb41 	bl	80052d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
      break;
 8004c6e:	e04f      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c80:	f000 fb2a 	bl	80052d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c92:	609a      	str	r2, [r3, #8]
      break;
 8004c94:	e03c      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f000 fa9e 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2150      	movs	r1, #80	@ 0x50
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 faf7 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004cb4:	e02c      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f000 fabd 	bl	8005242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2160      	movs	r1, #96	@ 0x60
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fae7 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004cd4:	e01c      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f000 fa7e 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2140      	movs	r1, #64	@ 0x40
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fad7 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004cf4:	e00c      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f000 face 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 8004d06:	e003      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0c:	e000      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a46      	ldr	r2, [pc, #280]	@ (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d013      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4a:	d00f      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a43      	ldr	r2, [pc, #268]	@ (8004e5c <TIM_Base_SetConfig+0x130>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a42      	ldr	r2, [pc, #264]	@ (8004e60 <TIM_Base_SetConfig+0x134>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a41      	ldr	r2, [pc, #260]	@ (8004e64 <TIM_Base_SetConfig+0x138>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a40      	ldr	r2, [pc, #256]	@ (8004e68 <TIM_Base_SetConfig+0x13c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a35      	ldr	r2, [pc, #212]	@ (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d02b      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8c:	d027      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a32      	ldr	r2, [pc, #200]	@ (8004e5c <TIM_Base_SetConfig+0x130>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d023      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a31      	ldr	r2, [pc, #196]	@ (8004e60 <TIM_Base_SetConfig+0x134>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01f      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a30      	ldr	r2, [pc, #192]	@ (8004e64 <TIM_Base_SetConfig+0x138>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01b      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2f      	ldr	r2, [pc, #188]	@ (8004e68 <TIM_Base_SetConfig+0x13c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d017      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e6c <TIM_Base_SetConfig+0x140>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a2d      	ldr	r2, [pc, #180]	@ (8004e70 <TIM_Base_SetConfig+0x144>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e74 <TIM_Base_SetConfig+0x148>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e78 <TIM_Base_SetConfig+0x14c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e7c <TIM_Base_SetConfig+0x150>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a29      	ldr	r2, [pc, #164]	@ (8004e80 <TIM_Base_SetConfig+0x154>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a10      	ldr	r2, [pc, #64]	@ (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_Base_SetConfig+0xf8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a12      	ldr	r2, [pc, #72]	@ (8004e68 <TIM_Base_SetConfig+0x13c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d103      	bne.n	8004e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d105      	bne.n	8004e4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	611a      	str	r2, [r3, #16]
  }
}
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40000c00 	.word	0x40000c00
 8004e68:	40010400 	.word	0x40010400
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40014400 	.word	0x40014400
 8004e74:	40014800 	.word	0x40014800
 8004e78:	40001800 	.word	0x40001800
 8004e7c:	40001c00 	.word	0x40001c00
 8004e80:	40002000 	.word	0x40002000

08004e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f023 0201 	bic.w	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 0302 	bic.w	r3, r3, #2
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a20      	ldr	r2, [pc, #128]	@ (8004f5c <TIM_OC1_SetConfig+0xd8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_OC1_SetConfig+0x64>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f60 <TIM_OC1_SetConfig+0xdc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10c      	bne.n	8004f02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 0308 	bic.w	r3, r3, #8
 8004eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f023 0304 	bic.w	r3, r3, #4
 8004f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a15      	ldr	r2, [pc, #84]	@ (8004f5c <TIM_OC1_SetConfig+0xd8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d003      	beq.n	8004f12 <TIM_OC1_SetConfig+0x8e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a14      	ldr	r2, [pc, #80]	@ (8004f60 <TIM_OC1_SetConfig+0xdc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d111      	bne.n	8004f36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	621a      	str	r2, [r3, #32]
}
 8004f50:	bf00      	nop
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40010400 	.word	0x40010400

08004f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f023 0210 	bic.w	r2, r3, #16
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 0320 	bic.w	r3, r3, #32
 8004fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a22      	ldr	r2, [pc, #136]	@ (8005048 <TIM_OC2_SetConfig+0xe4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_OC2_SetConfig+0x68>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a21      	ldr	r2, [pc, #132]	@ (800504c <TIM_OC2_SetConfig+0xe8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d10d      	bne.n	8004fe8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fe6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <TIM_OC2_SetConfig+0xe4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_OC2_SetConfig+0x94>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a16      	ldr	r2, [pc, #88]	@ (800504c <TIM_OC2_SetConfig+0xe8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d113      	bne.n	8005020 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40010000 	.word	0x40010000
 800504c:	40010400 	.word	0x40010400

08005050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a21      	ldr	r2, [pc, #132]	@ (8005130 <TIM_OC3_SetConfig+0xe0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_OC3_SetConfig+0x66>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a20      	ldr	r2, [pc, #128]	@ (8005134 <TIM_OC3_SetConfig+0xe4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d10d      	bne.n	80050d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a16      	ldr	r2, [pc, #88]	@ (8005130 <TIM_OC3_SetConfig+0xe0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d003      	beq.n	80050e2 <TIM_OC3_SetConfig+0x92>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a15      	ldr	r2, [pc, #84]	@ (8005134 <TIM_OC3_SetConfig+0xe4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d113      	bne.n	800510a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40010000 	.word	0x40010000
 8005134:	40010400 	.word	0x40010400

08005138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	031b      	lsls	r3, r3, #12
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a12      	ldr	r2, [pc, #72]	@ (80051dc <TIM_OC4_SetConfig+0xa4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_OC4_SetConfig+0x68>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a11      	ldr	r2, [pc, #68]	@ (80051e0 <TIM_OC4_SetConfig+0xa8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d109      	bne.n	80051b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	019b      	lsls	r3, r3, #6
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40010400 	.word	0x40010400

080051e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800520e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 030a 	bic.w	r3, r3, #10
 8005220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005242:	b480      	push	{r7}
 8005244:	b087      	sub	sp, #28
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f023 0210 	bic.w	r2, r3, #16
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800526c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	031b      	lsls	r3, r3, #12
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800527e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	f043 0307 	orr.w	r3, r3, #7
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	021a      	lsls	r2, r3, #8
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2201      	movs	r2, #1
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005378:	2302      	movs	r3, #2
 800537a:	e05a      	b.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a21      	ldr	r2, [pc, #132]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c8:	d01d      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d018      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1a      	ldr	r2, [pc, #104]	@ (800544c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a18      	ldr	r2, [pc, #96]	@ (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a17      	ldr	r2, [pc, #92]	@ (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a15      	ldr	r2, [pc, #84]	@ (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10c      	bne.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800540c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	4313      	orrs	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40010000 	.word	0x40010000
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40000c00 	.word	0x40000c00
 8005450:	40010400 	.word	0x40010400
 8005454:	40014000 	.word	0x40014000
 8005458:	40001800 	.word	0x40001800

0800545c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005474:	2302      	movs	r3, #2
 8005476:	e03d      	b.n	80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e042      	b.n	8005598 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fc fc48 	bl	8001dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	@ 0x24
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fd69 	bl	800601c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	@ 0x28
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d175      	bne.n	80056ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_UART_Transmit+0x2c>
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e06e      	b.n	80056ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2221      	movs	r2, #33	@ 0x21
 80055da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055de:	f7fc fe2f 	bl	8002240 <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f8:	d108      	bne.n	800560c <HAL_UART_Transmit+0x6c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e003      	b.n	8005614 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005614:	e02e      	b.n	8005674 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2200      	movs	r2, #0
 800561e:	2180      	movs	r1, #128	@ 0x80
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fb05 	bl	8005c30 <UART_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e03a      	b.n	80056ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800564c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	3302      	adds	r3, #2
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	e007      	b.n	8005666 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	781a      	ldrb	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	3301      	adds	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1cb      	bne.n	8005616 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	2140      	movs	r1, #64	@ 0x40
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fad1 	bl	8005c30 <UART_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e006      	b.n	80056ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b0ba      	sub	sp, #232	@ 0xe8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80056de:	2300      	movs	r3, #0
 80056e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10f      	bne.n	800571e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d009      	beq.n	800571e <HAL_UART_IRQHandler+0x66>
 800570a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fbc2 	bl	8005ea0 <UART_Receive_IT>
      return;
 800571c:	e25b      	b.n	8005bd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800571e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 80de 	beq.w	80058e4 <HAL_UART_IRQHandler+0x22c>
 8005728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005738:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80d1 	beq.w	80058e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_UART_IRQHandler+0xae>
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <HAL_UART_IRQHandler+0xd2>
 8005772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005782:	f043 0202 	orr.w	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00b      	beq.n	80057ae <HAL_UART_IRQHandler+0xf6>
 8005796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	f043 0204 	orr.w	r2, r3, #4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d011      	beq.n	80057de <HAL_UART_IRQHandler+0x126>
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	f043 0208 	orr.w	r2, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 81f2 	beq.w	8005bcc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_UART_IRQHandler+0x14e>
 80057f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fb4d 	bl	8005ea0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b40      	cmp	r3, #64	@ 0x40
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <HAL_UART_IRQHandler+0x17a>
 800582a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d04f      	beq.n	80058d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa55 	bl	8005ce2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005842:	2b40      	cmp	r3, #64	@ 0x40
 8005844:	d141      	bne.n	80058ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800585c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005872:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800587e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800588a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1d9      	bne.n	8005846 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d013      	beq.n	80058c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a98 <HAL_UART_IRQHandler+0x3e0>)
 80058a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fd fb94 	bl	8002fd4 <HAL_DMA_Abort_IT>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d016      	beq.n	80058e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058bc:	4610      	mov	r0, r2
 80058be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	e00e      	b.n	80058e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f99e 	bl	8005c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	e00a      	b.n	80058e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f99a 	bl	8005c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d0:	e006      	b.n	80058e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f996 	bl	8005c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80058de:	e175      	b.n	8005bcc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	bf00      	nop
    return;
 80058e2:	e173      	b.n	8005bcc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	f040 814f 	bne.w	8005b8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8148 	beq.w	8005b8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8141 	beq.w	8005b8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592a:	2b40      	cmp	r3, #64	@ 0x40
 800592c:	f040 80b6 	bne.w	8005a9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800593c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8145 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800594a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800594e:	429a      	cmp	r2, r3
 8005950:	f080 813e 	bcs.w	8005bd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800595a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005966:	f000 8088 	beq.w	8005a7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005980:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005988:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005996:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800599a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1d9      	bne.n	800596a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3314      	adds	r3, #20
 80059d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e1      	bne.n	80059b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3314      	adds	r3, #20
 80059f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3314      	adds	r3, #20
 8005a12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e3      	bne.n	80059f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a4a:	f023 0310 	bic.w	r3, r3, #16
 8005a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e3      	bne.n	8005a38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fd fa3d 	bl	8002ef4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f8c1 	bl	8005c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a96:	e09b      	b.n	8005bd0 <HAL_UART_IRQHandler+0x518>
 8005a98:	08005da9 	.word	0x08005da9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 808e 	beq.w	8005bd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8089 	beq.w	8005bd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ae6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ae8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e3      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3314      	adds	r3, #20
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	623b      	str	r3, [r7, #32]
   return(result);
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3314      	adds	r3, #20
 8005b1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e3      	bne.n	8005afa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0310 	bic.w	r3, r3, #16
 8005b56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b64:	61fa      	str	r2, [r7, #28]
 8005b66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	69b9      	ldr	r1, [r7, #24]
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	617b      	str	r3, [r7, #20]
   return(result);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e3      	bne.n	8005b40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f847 	bl	8005c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b8a:	e023      	b.n	8005bd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <HAL_UART_IRQHandler+0x4f4>
 8005b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f913 	bl	8005dd0 <UART_Transmit_IT>
    return;
 8005baa:	e014      	b.n	8005bd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x51e>
 8005bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f953 	bl	8005e70 <UART_EndTransmit_IT>
    return;
 8005bca:	e004      	b.n	8005bd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005bcc:	bf00      	nop
 8005bce:	e002      	b.n	8005bd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005bd0:	bf00      	nop
 8005bd2:	e000      	b.n	8005bd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005bd4:	bf00      	nop
  }
}
 8005bd6:	37e8      	adds	r7, #232	@ 0xe8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c40:	e03b      	b.n	8005cba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d037      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7fc faf9 	bl	8002240 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	6a3a      	ldr	r2, [r7, #32]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d302      	bcc.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e03a      	b.n	8005cda <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d023      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b80      	cmp	r3, #128	@ 0x80
 8005c76:	d020      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b40      	cmp	r3, #64	@ 0x40
 8005c7c:	d01d      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d116      	bne.n	8005cba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f81d 	bl	8005ce2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2208      	movs	r2, #8
 8005cac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e00f      	b.n	8005cda <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	bf0c      	ite	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	2300      	movne	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d0b4      	beq.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b095      	sub	sp, #84	@ 0x54
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e5      	bne.n	8005cea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3314      	adds	r3, #20
 8005d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3314      	adds	r3, #20
 8005d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e5      	bne.n	8005d1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d119      	bne.n	8005d8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	330c      	adds	r3, #12
 8005d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f023 0310 	bic.w	r3, r3, #16
 8005d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d7a:	61ba      	str	r2, [r7, #24]
 8005d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6979      	ldr	r1, [r7, #20]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	613b      	str	r3, [r7, #16]
   return(result);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e5      	bne.n	8005d5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d9c:	bf00      	nop
 8005d9e:	3754      	adds	r7, #84	@ 0x54
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f7ff ff1e 	bl	8005c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b21      	cmp	r3, #33	@ 0x21
 8005de2:	d13e      	bne.n	8005e62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dec:	d114      	bne.n	8005e18 <UART_Transmit_IT+0x48>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d110      	bne.n	8005e18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	1c9a      	adds	r2, r3, #2
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	621a      	str	r2, [r3, #32]
 8005e16:	e008      	b.n	8005e2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	1c59      	adds	r1, r3, #1
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6211      	str	r1, [r2, #32]
 8005e22:	781a      	ldrb	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	4619      	mov	r1, r3
 8005e38:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10f      	bne.n	8005e5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e000      	b.n	8005e64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e62:	2302      	movs	r3, #2
  }
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fea3 	bl	8005bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08c      	sub	sp, #48	@ 0x30
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b22      	cmp	r3, #34	@ 0x22
 8005eb2:	f040 80ae 	bne.w	8006012 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ebe:	d117      	bne.n	8005ef0 <UART_Receive_IT+0x50>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d113      	bne.n	8005ef0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	1c9a      	adds	r2, r3, #2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	629a      	str	r2, [r3, #40]	@ 0x28
 8005eee:	e026      	b.n	8005f3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f02:	d007      	beq.n	8005f14 <UART_Receive_IT+0x74>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <UART_Receive_IT+0x82>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d106      	bne.n	8005f22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e008      	b.n	8005f34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d15d      	bne.n	800600e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0220 	bic.w	r2, r2, #32
 8005f60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0201 	bic.w	r2, r2, #1
 8005f80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d135      	bne.n	8006004 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	613b      	str	r3, [r7, #16]
   return(result);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f023 0310 	bic.w	r3, r3, #16
 8005fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	330c      	adds	r3, #12
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fbe:	623a      	str	r2, [r7, #32]
 8005fc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	69f9      	ldr	r1, [r7, #28]
 8005fc4:	6a3a      	ldr	r2, [r7, #32]
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e5      	bne.n	8005f9e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d10a      	bne.n	8005ff6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff fe0b 	bl	8005c18 <HAL_UARTEx_RxEventCallback>
 8006002:	e002      	b.n	800600a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff fdf3 	bl	8005bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	e002      	b.n	8006014 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e000      	b.n	8006014 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006012:	2302      	movs	r3, #2
  }
}
 8006014:	4618      	mov	r0, r3
 8006016:	3730      	adds	r7, #48	@ 0x30
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800601c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006020:	b0c0      	sub	sp, #256	@ 0x100
 8006022:	af00      	add	r7, sp, #0
 8006024:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006038:	68d9      	ldr	r1, [r3, #12]
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	ea40 0301 	orr.w	r3, r0, r1
 8006044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	431a      	orrs	r2, r3
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	431a      	orrs	r2, r3
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006074:	f021 010c 	bic.w	r1, r1, #12
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006082:	430b      	orrs	r3, r1
 8006084:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006096:	6999      	ldr	r1, [r3, #24]
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	ea40 0301 	orr.w	r3, r0, r1
 80060a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b8f      	ldr	r3, [pc, #572]	@ (80062e8 <UART_SetConfig+0x2cc>)
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d005      	beq.n	80060bc <UART_SetConfig+0xa0>
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	4b8d      	ldr	r3, [pc, #564]	@ (80062ec <UART_SetConfig+0x2d0>)
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d104      	bne.n	80060c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060bc:	f7fe f880 	bl	80041c0 <HAL_RCC_GetPCLK2Freq>
 80060c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060c4:	e003      	b.n	80060ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060c6:	f7fe f867 	bl	8004198 <HAL_RCC_GetPCLK1Freq>
 80060ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060d8:	f040 810c 	bne.w	80062f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80060ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80060ee:	4622      	mov	r2, r4
 80060f0:	462b      	mov	r3, r5
 80060f2:	1891      	adds	r1, r2, r2
 80060f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80060f6:	415b      	adcs	r3, r3
 80060f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80060fe:	4621      	mov	r1, r4
 8006100:	eb12 0801 	adds.w	r8, r2, r1
 8006104:	4629      	mov	r1, r5
 8006106:	eb43 0901 	adc.w	r9, r3, r1
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800611a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800611e:	4690      	mov	r8, r2
 8006120:	4699      	mov	r9, r3
 8006122:	4623      	mov	r3, r4
 8006124:	eb18 0303 	adds.w	r3, r8, r3
 8006128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800612c:	462b      	mov	r3, r5
 800612e:	eb49 0303 	adc.w	r3, r9, r3
 8006132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006142:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006146:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800614a:	460b      	mov	r3, r1
 800614c:	18db      	adds	r3, r3, r3
 800614e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006150:	4613      	mov	r3, r2
 8006152:	eb42 0303 	adc.w	r3, r2, r3
 8006156:	657b      	str	r3, [r7, #84]	@ 0x54
 8006158:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800615c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006160:	f7fa fd22 	bl	8000ba8 <__aeabi_uldivmod>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4b61      	ldr	r3, [pc, #388]	@ (80062f0 <UART_SetConfig+0x2d4>)
 800616a:	fba3 2302 	umull	r2, r3, r3, r2
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	011c      	lsls	r4, r3, #4
 8006172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006176:	2200      	movs	r2, #0
 8006178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800617c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006180:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006184:	4642      	mov	r2, r8
 8006186:	464b      	mov	r3, r9
 8006188:	1891      	adds	r1, r2, r2
 800618a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800618c:	415b      	adcs	r3, r3
 800618e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006190:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006194:	4641      	mov	r1, r8
 8006196:	eb12 0a01 	adds.w	sl, r2, r1
 800619a:	4649      	mov	r1, r9
 800619c:	eb43 0b01 	adc.w	fp, r3, r1
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061b4:	4692      	mov	sl, r2
 80061b6:	469b      	mov	fp, r3
 80061b8:	4643      	mov	r3, r8
 80061ba:	eb1a 0303 	adds.w	r3, sl, r3
 80061be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061c2:	464b      	mov	r3, r9
 80061c4:	eb4b 0303 	adc.w	r3, fp, r3
 80061c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061e0:	460b      	mov	r3, r1
 80061e2:	18db      	adds	r3, r3, r3
 80061e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80061e6:	4613      	mov	r3, r2
 80061e8:	eb42 0303 	adc.w	r3, r2, r3
 80061ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80061f6:	f7fa fcd7 	bl	8000ba8 <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	4b3b      	ldr	r3, [pc, #236]	@ (80062f0 <UART_SetConfig+0x2d4>)
 8006202:	fba3 2301 	umull	r2, r3, r3, r1
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2264      	movs	r2, #100	@ 0x64
 800620a:	fb02 f303 	mul.w	r3, r2, r3
 800620e:	1acb      	subs	r3, r1, r3
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006216:	4b36      	ldr	r3, [pc, #216]	@ (80062f0 <UART_SetConfig+0x2d4>)
 8006218:	fba3 2302 	umull	r2, r3, r3, r2
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006224:	441c      	add	r4, r3
 8006226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800622a:	2200      	movs	r2, #0
 800622c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006230:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006234:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006238:	4642      	mov	r2, r8
 800623a:	464b      	mov	r3, r9
 800623c:	1891      	adds	r1, r2, r2
 800623e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006240:	415b      	adcs	r3, r3
 8006242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006248:	4641      	mov	r1, r8
 800624a:	1851      	adds	r1, r2, r1
 800624c:	6339      	str	r1, [r7, #48]	@ 0x30
 800624e:	4649      	mov	r1, r9
 8006250:	414b      	adcs	r3, r1
 8006252:	637b      	str	r3, [r7, #52]	@ 0x34
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006260:	4659      	mov	r1, fp
 8006262:	00cb      	lsls	r3, r1, #3
 8006264:	4651      	mov	r1, sl
 8006266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800626a:	4651      	mov	r1, sl
 800626c:	00ca      	lsls	r2, r1, #3
 800626e:	4610      	mov	r0, r2
 8006270:	4619      	mov	r1, r3
 8006272:	4603      	mov	r3, r0
 8006274:	4642      	mov	r2, r8
 8006276:	189b      	adds	r3, r3, r2
 8006278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800627c:	464b      	mov	r3, r9
 800627e:	460a      	mov	r2, r1
 8006280:	eb42 0303 	adc.w	r3, r2, r3
 8006284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006294:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006298:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800629c:	460b      	mov	r3, r1
 800629e:	18db      	adds	r3, r3, r3
 80062a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062a2:	4613      	mov	r3, r2
 80062a4:	eb42 0303 	adc.w	r3, r2, r3
 80062a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062b2:	f7fa fc79 	bl	8000ba8 <__aeabi_uldivmod>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4b0d      	ldr	r3, [pc, #52]	@ (80062f0 <UART_SetConfig+0x2d4>)
 80062bc:	fba3 1302 	umull	r1, r3, r3, r2
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	2164      	movs	r1, #100	@ 0x64
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	3332      	adds	r3, #50	@ 0x32
 80062ce:	4a08      	ldr	r2, [pc, #32]	@ (80062f0 <UART_SetConfig+0x2d4>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	f003 0207 	and.w	r2, r3, #7
 80062da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4422      	add	r2, r4
 80062e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062e4:	e106      	b.n	80064f4 <UART_SetConfig+0x4d8>
 80062e6:	bf00      	nop
 80062e8:	40011000 	.word	0x40011000
 80062ec:	40011400 	.word	0x40011400
 80062f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006302:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006306:	4642      	mov	r2, r8
 8006308:	464b      	mov	r3, r9
 800630a:	1891      	adds	r1, r2, r2
 800630c:	6239      	str	r1, [r7, #32]
 800630e:	415b      	adcs	r3, r3
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
 8006312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006316:	4641      	mov	r1, r8
 8006318:	1854      	adds	r4, r2, r1
 800631a:	4649      	mov	r1, r9
 800631c:	eb43 0501 	adc.w	r5, r3, r1
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	00eb      	lsls	r3, r5, #3
 800632a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800632e:	00e2      	lsls	r2, r4, #3
 8006330:	4614      	mov	r4, r2
 8006332:	461d      	mov	r5, r3
 8006334:	4643      	mov	r3, r8
 8006336:	18e3      	adds	r3, r4, r3
 8006338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800633c:	464b      	mov	r3, r9
 800633e:	eb45 0303 	adc.w	r3, r5, r3
 8006342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006352:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006362:	4629      	mov	r1, r5
 8006364:	008b      	lsls	r3, r1, #2
 8006366:	4621      	mov	r1, r4
 8006368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800636c:	4621      	mov	r1, r4
 800636e:	008a      	lsls	r2, r1, #2
 8006370:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006374:	f7fa fc18 	bl	8000ba8 <__aeabi_uldivmod>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4b60      	ldr	r3, [pc, #384]	@ (8006500 <UART_SetConfig+0x4e4>)
 800637e:	fba3 2302 	umull	r2, r3, r3, r2
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	011c      	lsls	r4, r3, #4
 8006386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800638a:	2200      	movs	r2, #0
 800638c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006390:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006394:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006398:	4642      	mov	r2, r8
 800639a:	464b      	mov	r3, r9
 800639c:	1891      	adds	r1, r2, r2
 800639e:	61b9      	str	r1, [r7, #24]
 80063a0:	415b      	adcs	r3, r3
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063a8:	4641      	mov	r1, r8
 80063aa:	1851      	adds	r1, r2, r1
 80063ac:	6139      	str	r1, [r7, #16]
 80063ae:	4649      	mov	r1, r9
 80063b0:	414b      	adcs	r3, r1
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063c0:	4659      	mov	r1, fp
 80063c2:	00cb      	lsls	r3, r1, #3
 80063c4:	4651      	mov	r1, sl
 80063c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ca:	4651      	mov	r1, sl
 80063cc:	00ca      	lsls	r2, r1, #3
 80063ce:	4610      	mov	r0, r2
 80063d0:	4619      	mov	r1, r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	4642      	mov	r2, r8
 80063d6:	189b      	adds	r3, r3, r2
 80063d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063dc:	464b      	mov	r3, r9
 80063de:	460a      	mov	r2, r1
 80063e0:	eb42 0303 	adc.w	r3, r2, r3
 80063e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006400:	4649      	mov	r1, r9
 8006402:	008b      	lsls	r3, r1, #2
 8006404:	4641      	mov	r1, r8
 8006406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800640a:	4641      	mov	r1, r8
 800640c:	008a      	lsls	r2, r1, #2
 800640e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006412:	f7fa fbc9 	bl	8000ba8 <__aeabi_uldivmod>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4611      	mov	r1, r2
 800641c:	4b38      	ldr	r3, [pc, #224]	@ (8006500 <UART_SetConfig+0x4e4>)
 800641e:	fba3 2301 	umull	r2, r3, r3, r1
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	2264      	movs	r2, #100	@ 0x64
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	1acb      	subs	r3, r1, r3
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	3332      	adds	r3, #50	@ 0x32
 8006430:	4a33      	ldr	r2, [pc, #204]	@ (8006500 <UART_SetConfig+0x4e4>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800643c:	441c      	add	r4, r3
 800643e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006442:	2200      	movs	r2, #0
 8006444:	673b      	str	r3, [r7, #112]	@ 0x70
 8006446:	677a      	str	r2, [r7, #116]	@ 0x74
 8006448:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800644c:	4642      	mov	r2, r8
 800644e:	464b      	mov	r3, r9
 8006450:	1891      	adds	r1, r2, r2
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	415b      	adcs	r3, r3
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800645c:	4641      	mov	r1, r8
 800645e:	1851      	adds	r1, r2, r1
 8006460:	6039      	str	r1, [r7, #0]
 8006462:	4649      	mov	r1, r9
 8006464:	414b      	adcs	r3, r1
 8006466:	607b      	str	r3, [r7, #4]
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006474:	4659      	mov	r1, fp
 8006476:	00cb      	lsls	r3, r1, #3
 8006478:	4651      	mov	r1, sl
 800647a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647e:	4651      	mov	r1, sl
 8006480:	00ca      	lsls	r2, r1, #3
 8006482:	4610      	mov	r0, r2
 8006484:	4619      	mov	r1, r3
 8006486:	4603      	mov	r3, r0
 8006488:	4642      	mov	r2, r8
 800648a:	189b      	adds	r3, r3, r2
 800648c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800648e:	464b      	mov	r3, r9
 8006490:	460a      	mov	r2, r1
 8006492:	eb42 0303 	adc.w	r3, r2, r3
 8006496:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80064a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064b0:	4649      	mov	r1, r9
 80064b2:	008b      	lsls	r3, r1, #2
 80064b4:	4641      	mov	r1, r8
 80064b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ba:	4641      	mov	r1, r8
 80064bc:	008a      	lsls	r2, r1, #2
 80064be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064c2:	f7fa fb71 	bl	8000ba8 <__aeabi_uldivmod>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <UART_SetConfig+0x4e4>)
 80064cc:	fba3 1302 	umull	r1, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	2164      	movs	r1, #100	@ 0x64
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	3332      	adds	r3, #50	@ 0x32
 80064de:	4a08      	ldr	r2, [pc, #32]	@ (8006500 <UART_SetConfig+0x4e4>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	f003 020f 	and.w	r2, r3, #15
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4422      	add	r2, r4
 80064f2:	609a      	str	r2, [r3, #8]
}
 80064f4:	bf00      	nop
 80064f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80064fa:	46bd      	mov	sp, r7
 80064fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006500:	51eb851f 	.word	0x51eb851f
 8006504:	00000000 	.word	0x00000000

08006508 <capture_and_send_data>:
//};
float Bil=0;
float BilResult=0;

void capture_and_send_data(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08c      	sub	sp, #48	@ 0x30
 800650c:	af00      	add	r7, sp, #0

    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 800650e:	4b9c      	ldr	r3, [pc, #624]	@ (8006780 <capture_and_send_data+0x278>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	e020      	b.n	8006558 <capture_and_send_data+0x50>
    {
        HAL_ADC_Start_DMA(&hadc3, &adc_value, 1);
 8006516:	2201      	movs	r2, #1
 8006518:	499a      	ldr	r1, [pc, #616]	@ (8006784 <capture_and_send_data+0x27c>)
 800651a:	489b      	ldr	r0, [pc, #620]	@ (8006788 <capture_and_send_data+0x280>)
 800651c:	f7fb ff04 	bl	8002328 <HAL_ADC_Start_DMA>
        //HAL_Delay(1);
        DWT_Delay(9);
 8006520:	2009      	movs	r0, #9
 8006522:	f000 fd07 	bl	8006f34 <DWT_Delay>
        // Store the adc_value in spectral_data
        spectral_data[idx++] = adc_value;
 8006526:	4b99      	ldr	r3, [pc, #612]	@ (800678c <capture_and_send_data+0x284>)
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	b291      	uxth	r1, r2
 800652e:	4a97      	ldr	r2, [pc, #604]	@ (800678c <capture_and_send_data+0x284>)
 8006530:	8011      	strh	r1, [r2, #0]
 8006532:	4619      	mov	r1, r3
 8006534:	4b93      	ldr	r3, [pc, #588]	@ (8006784 <capture_and_send_data+0x27c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a95      	ldr	r2, [pc, #596]	@ (8006790 <capture_and_send_data+0x288>)
 800653a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (idx >= NUM_WAVELENGTHS*2) idx=0;
 800653e:	4b93      	ldr	r3, [pc, #588]	@ (800678c <capture_and_send_data+0x284>)
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006546:	d302      	bcc.n	800654e <capture_and_send_data+0x46>
 8006548:	4b90      	ldr	r3, [pc, #576]	@ (800678c <capture_and_send_data+0x284>)
 800654a:	2200      	movs	r2, #0
 800654c:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < NUM_WAVELENGTHS*2; i++)
 800654e:	4b8c      	ldr	r3, [pc, #560]	@ (8006780 <capture_and_send_data+0x278>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3301      	adds	r3, #1
 8006554:	4a8a      	ldr	r2, [pc, #552]	@ (8006780 <capture_and_send_data+0x278>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	4b89      	ldr	r3, [pc, #548]	@ (8006780 <capture_and_send_data+0x278>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006560:	dbd9      	blt.n	8006516 <capture_and_send_data+0xe>
    }
    // Filter out baseline values
	index2=0;
 8006562:	4b8c      	ldr	r3, [pc, #560]	@ (8006794 <capture_and_send_data+0x28c>)
 8006564:	2200      	movs	r2, #0
 8006566:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < Filtered_Spec_Len; i++) spectral_data_256[i] = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800656c:	e007      	b.n	800657e <capture_and_send_data+0x76>
 800656e:	4a8a      	ldr	r2, [pc, #552]	@ (8006798 <capture_and_send_data+0x290>)
 8006570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006572:	2100      	movs	r1, #0
 8006574:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8006578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657a:	3301      	adds	r3, #1
 800657c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800657e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006580:	2b13      	cmp	r3, #19
 8006582:	ddf4      	ble.n	800656e <capture_and_send_data+0x66>

	for (int i = 1; i < NUM_WAVELENGTHS * 2; i++)
 8006584:	2301      	movs	r3, #1
 8006586:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006588:	e029      	b.n	80065de <capture_and_send_data+0xd6>
	{
		uint32_t prev_value = spectral_data[i - 1];
 800658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658c:	3b01      	subs	r3, #1
 800658e:	4a80      	ldr	r2, [pc, #512]	@ (8006790 <capture_and_send_data+0x288>)
 8006590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006594:	617b      	str	r3, [r7, #20]
		uint32_t curr_value = spectral_data[i];
 8006596:	4a7e      	ldr	r2, [pc, #504]	@ (8006790 <capture_and_send_data+0x288>)
 8006598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659e:	613b      	str	r3, [r7, #16]

		// Consider a value as high if it's significantly higher than the previous one
		if (curr_value > prev_value + (prev_value / 10))       // Lower threshold Less indeces (4-only 600's)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	4a7e      	ldr	r2, [pc, #504]	@ (800679c <capture_and_send_data+0x294>)
 80065a4:	fba2 2303 	umull	r2, r3, r2, r3
 80065a8:	08da      	lsrs	r2, r3, #3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	4413      	add	r3, r2
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d911      	bls.n	80065d8 <capture_and_send_data+0xd0>
		{
			spectral_data_256[index2++] = curr_value;
 80065b4:	4b77      	ldr	r3, [pc, #476]	@ (8006794 <capture_and_send_data+0x28c>)
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	b291      	uxth	r1, r2
 80065bc:	4a75      	ldr	r2, [pc, #468]	@ (8006794 <capture_and_send_data+0x28c>)
 80065be:	8011      	strh	r1, [r2, #0]
 80065c0:	4619      	mov	r1, r3
 80065c2:	4a75      	ldr	r2, [pc, #468]	@ (8006798 <capture_and_send_data+0x290>)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			if (index2 >= Filtered_Spec_Len) index2=0;
 80065ca:	4b72      	ldr	r3, [pc, #456]	@ (8006794 <capture_and_send_data+0x28c>)
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	2b13      	cmp	r3, #19
 80065d0:	d902      	bls.n	80065d8 <capture_and_send_data+0xd0>
 80065d2:	4b70      	ldr	r3, [pc, #448]	@ (8006794 <capture_and_send_data+0x28c>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < NUM_WAVELENGTHS * 2; i++)
 80065d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065da:	3301      	adds	r3, #1
 80065dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065e4:	dbd1      	blt.n	800658a <capture_and_send_data+0x82>
		}
	}

	sum_filtered_data=0;
 80065e6:	4b6e      	ldr	r3, [pc, #440]	@ (80067a0 <capture_and_send_data+0x298>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
	average_filtered_data=0;
 80065ec:	4b6d      	ldr	r3, [pc, #436]	@ (80067a4 <capture_and_send_data+0x29c>)
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
	// Calculate the average of the filtered data
	for (int i = main_spec_start; i < main_spec_end; i++)
 80065f4:	2363      	movs	r3, #99	@ 0x63
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f8:	e00b      	b.n	8006612 <capture_and_send_data+0x10a>
	{   //45 main samples
		sum_filtered_data += spectral_data[i];
 80065fa:	4a65      	ldr	r2, [pc, #404]	@ (8006790 <capture_and_send_data+0x288>)
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006602:	4b67      	ldr	r3, [pc, #412]	@ (80067a0 <capture_and_send_data+0x298>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4413      	add	r3, r2
 8006608:	4a65      	ldr	r2, [pc, #404]	@ (80067a0 <capture_and_send_data+0x298>)
 800660a:	6013      	str	r3, [r2, #0]
	for (int i = main_spec_start; i < main_spec_end; i++)
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	3301      	adds	r3, #1
 8006610:	627b      	str	r3, [r7, #36]	@ 0x24
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	2b90      	cmp	r3, #144	@ 0x90
 8006616:	ddf0      	ble.n	80065fa <capture_and_send_data+0xf2>
	}
	//if (index2 > 0)
	{
		average_filtered_data = (float)sum_filtered_data / (main_spec_end-main_spec_start);
 8006618:	4b61      	ldr	r3, [pc, #388]	@ (80067a0 <capture_and_send_data+0x298>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006624:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80067a8 <capture_and_send_data+0x2a0>
 8006628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800662c:	4b5d      	ldr	r3, [pc, #372]	@ (80067a4 <capture_and_send_data+0x29c>)
 800662e:	edc3 7a00 	vstr	s15, [r3]
	}

	for(int r=0; r<(main_spec_end-main_spec_start); r++)
 8006632:	2300      	movs	r3, #0
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	e016      	b.n	8006666 <capture_and_send_data+0x15e>
	{
		Reflectance[r]=spectral_data[r+99]/average_filtered_data;
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	3363      	adds	r3, #99	@ 0x63
 800663c:	4a54      	ldr	r2, [pc, #336]	@ (8006790 <capture_and_send_data+0x288>)
 800663e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664a:	4b56      	ldr	r3, [pc, #344]	@ (80067a4 <capture_and_send_data+0x29c>)
 800664c:	ed93 7a00 	vldr	s14, [r3]
 8006650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006654:	4a55      	ldr	r2, [pc, #340]	@ (80067ac <capture_and_send_data+0x2a4>)
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	edc3 7a00 	vstr	s15, [r3]
	for(int r=0; r<(main_spec_end-main_spec_start); r++)
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	3301      	adds	r3, #1
 8006664:	623b      	str	r3, [r7, #32]
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	2b2d      	cmp	r3, #45	@ 0x2d
 800666a:	dde5      	ble.n	8006638 <capture_and_send_data+0x130>
	{
		Bil+=Reflectance[r];
	}
	BilResult[0]=(1.7016*Bil*Bil)-(20.6755*Bil)+(66.9023);
*/
	BilResult=0;sum_Reflectance=0;average_Reflectance=0;
 800666c:	4b50      	ldr	r3, [pc, #320]	@ (80067b0 <capture_and_send_data+0x2a8>)
 800666e:	f04f 0200 	mov.w	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	4b4f      	ldr	r3, [pc, #316]	@ (80067b4 <capture_and_send_data+0x2ac>)
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	4b4e      	ldr	r3, [pc, #312]	@ (80067b8 <capture_and_send_data+0x2b0>)
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < (main_spec_end-main_spec_start); i++)
 8006684:	2300      	movs	r3, #0
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	e01a      	b.n	80066c0 <capture_and_send_data+0x1b8>
	{
		 sum_Reflectance += Reflectance[i];
 800668a:	4a48      	ldr	r2, [pc, #288]	@ (80067ac <capture_and_send_data+0x2a4>)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	ed93 7a00 	vldr	s14, [r3]
 8006696:	4b47      	ldr	r3, [pc, #284]	@ (80067b4 <capture_and_send_data+0x2ac>)
 8006698:	edd3 7a00 	vldr	s15, [r3]
 800669c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066a0:	4b44      	ldr	r3, [pc, #272]	@ (80067b4 <capture_and_send_data+0x2ac>)
 80066a2:	edc3 7a00 	vstr	s15, [r3]
		 average_Reflectance = (float)sum_Reflectance / (main_spec_end-main_spec_start);
 80066a6:	4b43      	ldr	r3, [pc, #268]	@ (80067b4 <capture_and_send_data+0x2ac>)
 80066a8:	ed93 7a00 	vldr	s14, [r3]
 80066ac:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80067a8 <capture_and_send_data+0x2a0>
 80066b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066b4:	4b40      	ldr	r3, [pc, #256]	@ (80067b8 <capture_and_send_data+0x2b0>)
 80066b6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < (main_spec_end-main_spec_start); i++)
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	3301      	adds	r3, #1
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80066c4:	dde1      	ble.n	800668a <capture_and_send_data+0x182>
	}
	//BilResult[0] = average_Reflectance*3;
	//BilResult[0]=(1.7016*average_Reflectance*average_Reflectance)-(20.6755*average_Reflectance)+(66.9023);
	 BilResult = (average_filtered_data-478)/120;     //avgSpecAtBlank_Ref = 478   //CalFactor=56;//80
 80066c6:	4b37      	ldr	r3, [pc, #220]	@ (80067a4 <capture_and_send_data+0x29c>)
 80066c8:	edd3 7a00 	vldr	s15, [r3]
 80066cc:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80067bc <capture_and_send_data+0x2b4>
 80066d0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80066d4:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80067c0 <capture_and_send_data+0x2b8>
 80066d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066dc:	4b34      	ldr	r3, [pc, #208]	@ (80067b0 <capture_and_send_data+0x2a8>)
 80066de:	edc3 7a00 	vstr	s15, [r3]
	 if(BilResult<=0.1) {
 80066e2:	4b33      	ldr	r3, [pc, #204]	@ (80067b0 <capture_and_send_data+0x2a8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7f9 ff2e 	bl	8000548 <__aeabi_f2d>
 80066ec:	a322      	add	r3, pc, #136	@ (adr r3, 8006778 <capture_and_send_data+0x270>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f7fa f9fd 	bl	8000af0 <__aeabi_dcmple>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d017      	beq.n	800672c <capture_and_send_data+0x224>
		 testDone = 0;
 80066fc:	4b31      	ldr	r3, [pc, #196]	@ (80067c4 <capture_and_send_data+0x2bc>)
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
		 BilResult=0;
 8006702:	4b2b      	ldr	r3, [pc, #172]	@ (80067b0 <capture_and_send_data+0x2a8>)
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_SET);   // ***** ERROR Buzzer ***//
 800670a:	2201      	movs	r2, #1
 800670c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006710:	482d      	ldr	r0, [pc, #180]	@ (80067c8 <capture_and_send_data+0x2c0>)
 8006712:	f7fd f89f 	bl	8003854 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 8006716:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800671a:	f7fb fd9d 	bl	8002258 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOE, ERR_BUZZER_Pin, GPIO_PIN_RESET); // ***** ERROR Buzzer ***//
 800671e:	2200      	movs	r2, #0
 8006720:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006724:	4828      	ldr	r0, [pc, #160]	@ (80067c8 <capture_and_send_data+0x2c0>)
 8006726:	f7fd f895 	bl	8003854 <HAL_GPIO_WritePin>
 800672a:	e002      	b.n	8006732 <capture_and_send_data+0x22a>
	 }
	 else
	 {
	 testDone = 1;
 800672c:	4b25      	ldr	r3, [pc, #148]	@ (80067c4 <capture_and_send_data+0x2bc>)
 800672e:	2201      	movs	r2, #1
 8006730:	701a      	strb	r2, [r3, #0]
	 }
	 //if(currentTest<=avgValue) testDone = 1;

    // Format the concentration values as a string
	char message[10];            					//Result to be sent to UART and LCD
    for (int j = 0; j < NUM_WAVELENGTHS*2; j++)
 8006732:	2300      	movs	r3, #0
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e015      	b.n	8006764 <capture_and_send_data+0x25c>
    {
      //printf("%lu\n", spectral_data_256[j]);
      snprintf(message, sizeof(message), "%lu\n",spectral_data[j]);
 8006738:	4a15      	ldr	r2, [pc, #84]	@ (8006790 <capture_and_send_data+0x288>)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006740:	1d38      	adds	r0, r7, #4
 8006742:	4a22      	ldr	r2, [pc, #136]	@ (80067cc <capture_and_send_data+0x2c4>)
 8006744:	210a      	movs	r1, #10
 8006746:	f001 f9c5 	bl	8007ad4 <sniprintf>
      // Send the concentration values via UART
      HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(spectral_data[j]), HAL_MAX_DELAY);
 800674a:	1d39      	adds	r1, r7, #4
 800674c:	f04f 33ff 	mov.w	r3, #4294967295
 8006750:	2204      	movs	r2, #4
 8006752:	481f      	ldr	r0, [pc, #124]	@ (80067d0 <capture_and_send_data+0x2c8>)
 8006754:	f7fe ff24 	bl	80055a0 <HAL_UART_Transmit>
      len = sizeof(spectral_data[j]);
 8006758:	4b1e      	ldr	r3, [pc, #120]	@ (80067d4 <capture_and_send_data+0x2cc>)
 800675a:	2204      	movs	r2, #4
 800675c:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < NUM_WAVELENGTHS*2; j++)
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	3301      	adds	r3, #1
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800676a:	dbe5      	blt.n	8006738 <capture_and_send_data+0x230>
      //send_uart_message(message);

      //LCD_WriteString("Hello, World!"); // Writing to LCD
    }
}
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	3730      	adds	r7, #48	@ 0x30
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	9999999a 	.word	0x9999999a
 800677c:	3fb99999 	.word	0x3fb99999
 8006780:	200010d4 	.word	0x200010d4
 8006784:	200010c8 	.word	0x200010c8
 8006788:	20000218 	.word	0x20000218
 800678c:	200010cc 	.word	0x200010cc
 8006790:	20000878 	.word	0x20000878
 8006794:	200010ce 	.word	0x200010ce
 8006798:	20001078 	.word	0x20001078
 800679c:	cccccccd 	.word	0xcccccccd
 80067a0:	200010d8 	.word	0x200010d8
 80067a4:	200010dc 	.word	0x200010dc
 80067a8:	42380000 	.word	0x42380000
 80067ac:	200010e8 	.word	0x200010e8
 80067b0:	200011a0 	.word	0x200011a0
 80067b4:	200010e0 	.word	0x200010e0
 80067b8:	200010e4 	.word	0x200010e4
 80067bc:	43ef0000 	.word	0x43ef0000
 80067c0:	42f00000 	.word	0x42f00000
 80067c4:	200010d1 	.word	0x200010d1
 80067c8:	40021000 	.word	0x40021000
 80067cc:	08009d70 	.word	0x08009d70
 80067d0:	200003c0 	.word	0x200003c0
 80067d4:	200010d0 	.word	0x200010d0

080067d8 <LCD>:
int set_line_X = 40;
int set_line_Y = 44;   //30


void LCD(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
	//LCD_Init();      //LOGO
	LCD_DisplayMenu();
 80067dc:	f000 f804 	bl	80067e8 <LCD_DisplayMenu>
    LCD_HandleButtonPress();
 80067e0:	f000 f970 	bl	8006ac4 <LCD_HandleButtonPress>
}
 80067e4:	bf00      	nop
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <LCD_DisplayMenu>:
    //ssd1306_UpdateScreen();
    LCD_DisplayMenu();
}*/

// Function to display the current menu
void LCD_DisplayMenu(void) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b092      	sub	sp, #72	@ 0x48
 80067ec:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80067ee:	2000      	movs	r0, #0
 80067f0:	f7fa ff32 	bl	8001658 <ssd1306_Fill>
    HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET); // Turn off Indication LED
 80067f4:	2200      	movs	r2, #0
 80067f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80067fa:	489f      	ldr	r0, [pc, #636]	@ (8006a78 <LCD_DisplayMenu+0x290>)
 80067fc:	f7fd f82a 	bl	8003854 <HAL_GPIO_WritePin>

    switch (currentMenu)
 8006800:	4b9e      	ldr	r3, [pc, #632]	@ (8006a7c <LCD_DisplayMenu+0x294>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b02      	cmp	r3, #2
 8006806:	f000 80e8 	beq.w	80069da <LCD_DisplayMenu+0x1f2>
 800680a:	2b02      	cmp	r3, #2
 800680c:	f300 812e 	bgt.w	8006a6c <LCD_DisplayMenu+0x284>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <LCD_DisplayMenu+0x32>
 8006814:	2b01      	cmp	r3, #1
 8006816:	d07e      	beq.n	8006916 <LCD_DisplayMenu+0x12e>
 8006818:	e128      	b.n	8006a6c <LCD_DisplayMenu+0x284>
    {
        case MENU_SET_AVG:
        	testDone=0;                       // Do not read any result here
 800681a:	4b99      	ldr	r3, [pc, #612]	@ (8006a80 <LCD_DisplayMenu+0x298>)
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]

        	if (currentCursor == CURSOR_ON_MENU) {
 8006820:	4b98      	ldr	r3, [pc, #608]	@ (8006a84 <LCD_DisplayMenu+0x29c>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d121      	bne.n	800686c <LCD_DisplayMenu+0x84>
				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 8006828:	4b97      	ldr	r3, [pc, #604]	@ (8006a88 <LCD_DisplayMenu+0x2a0>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	3b05      	subs	r3, #5
 8006830:	b2d8      	uxtb	r0, r3
 8006832:	4b96      	ldr	r3, [pc, #600]	@ (8006a8c <LCD_DisplayMenu+0x2a4>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	3b05      	subs	r3, #5
 800683a:	b2d9      	uxtb	r1, r3
 800683c:	2301      	movs	r3, #1
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2323      	movs	r3, #35	@ 0x23
 8006842:	225a      	movs	r2, #90	@ 0x5a
 8006844:	f7fb f86a 	bl	800191c <ssd1306_FillRectangle>
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8006848:	4b8f      	ldr	r3, [pc, #572]	@ (8006a88 <LCD_DisplayMenu+0x2a0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	4a8f      	ldr	r2, [pc, #572]	@ (8006a8c <LCD_DisplayMenu+0x2a4>)
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f7fb f848 	bl	80018ec <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, Black);
 800685c:	4b8c      	ldr	r3, [pc, #560]	@ (8006a90 <LCD_DisplayMenu+0x2a8>)
 800685e:	2200      	movs	r2, #0
 8006860:	9200      	str	r2, [sp, #0]
 8006862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006864:	488b      	ldr	r0, [pc, #556]	@ (8006a94 <LCD_DisplayMenu+0x2ac>)
 8006866:	f7fb f81b 	bl	80018a0 <ssd1306_WriteString>
 800686a:	e010      	b.n	800688e <LCD_DisplayMenu+0xa6>
        	}else{
				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800686c:	4b86      	ldr	r3, [pc, #536]	@ (8006a88 <LCD_DisplayMenu+0x2a0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	4a86      	ldr	r2, [pc, #536]	@ (8006a8c <LCD_DisplayMenu+0x2a4>)
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	4611      	mov	r1, r2
 800687a:	4618      	mov	r0, r3
 800687c:	f7fb f836 	bl	80018ec <ssd1306_SetCursor>
				ssd1306_WriteString("Set AVG", Font_7x10, White);
 8006880:	4b83      	ldr	r3, [pc, #524]	@ (8006a90 <LCD_DisplayMenu+0x2a8>)
 8006882:	2201      	movs	r2, #1
 8006884:	9200      	str	r2, [sp, #0]
 8006886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006888:	4882      	ldr	r0, [pc, #520]	@ (8006a94 <LCD_DisplayMenu+0x2ac>)
 800688a:	f7fb f809 	bl	80018a0 <ssd1306_WriteString>
        	}


            if (currentCursor == CURSOR_ON_VALUE) {
 800688e:	4b7d      	ldr	r3, [pc, #500]	@ (8006a84 <LCD_DisplayMenu+0x29c>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d126      	bne.n	80068e4 <LCD_DisplayMenu+0xfc>
            	ssd1306_FillRectangle(set_line_X, set_line_Y, 75, 52, White);
 8006896:	4b80      	ldr	r3, [pc, #512]	@ (8006a98 <LCD_DisplayMenu+0x2b0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	b2d8      	uxtb	r0, r3
 800689c:	4b7f      	ldr	r3, [pc, #508]	@ (8006a9c <LCD_DisplayMenu+0x2b4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	b2d9      	uxtb	r1, r3
 80068a2:	2301      	movs	r3, #1
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	2334      	movs	r3, #52	@ 0x34
 80068a8:	224b      	movs	r2, #75	@ 0x4b
 80068aa:	f7fb f837 	bl	800191c <ssd1306_FillRectangle>
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 80068ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006a98 <LCD_DisplayMenu+0x2b0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	4a79      	ldr	r2, [pc, #484]	@ (8006a9c <LCD_DisplayMenu+0x2b4>)
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	4611      	mov	r1, r2
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fb f815 	bl	80018ec <ssd1306_SetCursor>

            	 char avgStr[10];
				 snprintf(avgStr, sizeof(avgStr), "-%02d-", avgValue);
 80068c2:	4b77      	ldr	r3, [pc, #476]	@ (8006aa0 <LCD_DisplayMenu+0x2b8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f107 000c 	add.w	r0, r7, #12
 80068ca:	4a76      	ldr	r2, [pc, #472]	@ (8006aa4 <LCD_DisplayMenu+0x2bc>)
 80068cc:	210a      	movs	r1, #10
 80068ce:	f001 f901 	bl	8007ad4 <sniprintf>
				 ssd1306_WriteString(avgStr, Font_11x18, Black);
 80068d2:	4b75      	ldr	r3, [pc, #468]	@ (8006aa8 <LCD_DisplayMenu+0x2c0>)
 80068d4:	f107 000c 	add.w	r0, r7, #12
 80068d8:	2200      	movs	r2, #0
 80068da:	9200      	str	r2, [sp, #0]
 80068dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068de:	f7fa ffdf 	bl	80018a0 <ssd1306_WriteString>

            //ssd1306_SetCursor(set_line_X, set_line_Y);
            /*char avgStr[10];
            snprintf(avgStr, sizeof(avgStr), "-%02d-", avgValue);
            ssd1306_WriteString(avgStr, Font_11x18, White);*/
            break;
 80068e2:	e0c3      	b.n	8006a6c <LCD_DisplayMenu+0x284>
            	ssd1306_SetCursor(set_line_X , set_line_Y);
 80068e4:	4b6c      	ldr	r3, [pc, #432]	@ (8006a98 <LCD_DisplayMenu+0x2b0>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	4a6c      	ldr	r2, [pc, #432]	@ (8006a9c <LCD_DisplayMenu+0x2b4>)
 80068ec:	6812      	ldr	r2, [r2, #0]
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	4611      	mov	r1, r2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fa fffa 	bl	80018ec <ssd1306_SetCursor>
				snprintf(avgStr, sizeof(avgStr), "-%02d-", avgValue);
 80068f8:	4b69      	ldr	r3, [pc, #420]	@ (8006aa0 <LCD_DisplayMenu+0x2b8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4638      	mov	r0, r7
 80068fe:	4a69      	ldr	r2, [pc, #420]	@ (8006aa4 <LCD_DisplayMenu+0x2bc>)
 8006900:	210a      	movs	r1, #10
 8006902:	f001 f8e7 	bl	8007ad4 <sniprintf>
				ssd1306_WriteString(avgStr, Font_11x18, White);
 8006906:	4b68      	ldr	r3, [pc, #416]	@ (8006aa8 <LCD_DisplayMenu+0x2c0>)
 8006908:	4638      	mov	r0, r7
 800690a:	2201      	movs	r2, #1
 800690c:	9200      	str	r2, [sp, #0]
 800690e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006910:	f7fa ffc6 	bl	80018a0 <ssd1306_WriteString>
            break;
 8006914:	e0aa      	b.n	8006a6c <LCD_DisplayMenu+0x284>

            /*if (currentCursor == CURSOR_ON_VALUE) {
            	ssd1306_SetCursor(100, 14);
                ssd1306_WriteString("<-", Font_7x10, White);
            }*/
            if (currentCursor == CURSOR_ON_MENU){
 8006916:	4b5b      	ldr	r3, [pc, #364]	@ (8006a84 <LCD_DisplayMenu+0x29c>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d120      	bne.n	8006960 <LCD_DisplayMenu+0x178>
				//ssd1306_SetCursor(menu_line_X+70 , menu_line_Y);
				//ssd1306_WriteString("<-", Font_7x10, White);
            	ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 100, 35, White);
 800691e:	4b5a      	ldr	r3, [pc, #360]	@ (8006a88 <LCD_DisplayMenu+0x2a0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	3b05      	subs	r3, #5
 8006926:	b2d8      	uxtb	r0, r3
 8006928:	4b58      	ldr	r3, [pc, #352]	@ (8006a8c <LCD_DisplayMenu+0x2a4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	3b05      	subs	r3, #5
 8006930:	b2d9      	uxtb	r1, r3
 8006932:	2301      	movs	r3, #1
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	2323      	movs	r3, #35	@ 0x23
 8006938:	2264      	movs	r2, #100	@ 0x64
 800693a:	f7fa ffef 	bl	800191c <ssd1306_FillRectangle>

            	ssd1306_SetCursor(menu_line_X, menu_line_Y);
 800693e:	4b52      	ldr	r3, [pc, #328]	@ (8006a88 <LCD_DisplayMenu+0x2a0>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	4a51      	ldr	r2, [pc, #324]	@ (8006a8c <LCD_DisplayMenu+0x2a4>)
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	4611      	mov	r1, r2
 800694c:	4618      	mov	r0, r3
 800694e:	f7fa ffcd 	bl	80018ec <ssd1306_SetCursor>
				ssd1306_WriteString("StartTest", Font_7x10, Black);
 8006952:	4b4f      	ldr	r3, [pc, #316]	@ (8006a90 <LCD_DisplayMenu+0x2a8>)
 8006954:	2200      	movs	r2, #0
 8006956:	9200      	str	r2, [sp, #0]
 8006958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800695a:	4854      	ldr	r0, [pc, #336]	@ (8006aac <LCD_DisplayMenu+0x2c4>)
 800695c:	f7fa ffa0 	bl	80018a0 <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 10, set_line_Y);
 8006960:	4b4d      	ldr	r3, [pc, #308]	@ (8006a98 <LCD_DisplayMenu+0x2b0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	3b0a      	subs	r3, #10
 8006968:	b2db      	uxtb	r3, r3
 800696a:	4a4c      	ldr	r2, [pc, #304]	@ (8006a9c <LCD_DisplayMenu+0x2b4>)
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f7fa ffba 	bl	80018ec <ssd1306_SetCursor>
            char testStr[20];
            snprintf(testStr, sizeof(testStr), "%d of %d", currentTest, avgValue);
 8006978:	4b4d      	ldr	r3, [pc, #308]	@ (8006ab0 <LCD_DisplayMenu+0x2c8>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b48      	ldr	r3, [pc, #288]	@ (8006aa0 <LCD_DisplayMenu+0x2b8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	4613      	mov	r3, r2
 8006988:	4a4a      	ldr	r2, [pc, #296]	@ (8006ab4 <LCD_DisplayMenu+0x2cc>)
 800698a:	2114      	movs	r1, #20
 800698c:	f001 f8a2 	bl	8007ad4 <sniprintf>
            ssd1306_WriteString(testStr, Font_11x18, White);
 8006990:	4b45      	ldr	r3, [pc, #276]	@ (8006aa8 <LCD_DisplayMenu+0x2c0>)
 8006992:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8006996:	2201      	movs	r2, #1
 8006998:	9200      	str	r2, [sp, #0]
 800699a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800699c:	f7fa ff80 	bl	80018a0 <ssd1306_WriteString>

            DoesTestComplete();             // **if test btn pressed ==> ++currentTest****//
 80069a0:	f000 fa00 	bl	8006da4 <DoesTestComplete>

            if (currentTest > avgValue){
 80069a4:	4b42      	ldr	r3, [pc, #264]	@ (8006ab0 <LCD_DisplayMenu+0x2c8>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	4b3d      	ldr	r3, [pc, #244]	@ (8006aa0 <LCD_DisplayMenu+0x2b8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	dd0d      	ble.n	80069cc <LCD_DisplayMenu+0x1e4>
            	currentTest = 1;
 80069b0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ab0 <LCD_DisplayMenu+0x2c8>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	601a      	str	r2, [r3, #0]
            	//********************//
            	MeasureAverage();
 80069b6:	f000 f96d 	bl	8006c94 <MeasureAverage>
            	HAL_Delay(10);
 80069ba:	200a      	movs	r0, #10
 80069bc:	f7fb fc4c 	bl	8002258 <HAL_Delay>
            	//********************//
                currentMenu = MENU_SHOW_RESULT;
 80069c0:	4b2e      	ldr	r3, [pc, #184]	@ (8006a7c <LCD_DisplayMenu+0x294>)
 80069c2:	2202      	movs	r2, #2
 80069c4:	701a      	strb	r2, [r3, #0]
                LCD_DisplayMenu();
 80069c6:	f7ff ff0f 	bl	80067e8 <LCD_DisplayMenu>
            } else {
                // Turn on the indication LED (READY)
                HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_SET); // ***** IND LED ***//
            }
            break;
 80069ca:	e04f      	b.n	8006a6c <LCD_DisplayMenu+0x284>
                HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_SET); // ***** IND LED ***//
 80069cc:	2201      	movs	r2, #1
 80069ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80069d2:	4829      	ldr	r0, [pc, #164]	@ (8006a78 <LCD_DisplayMenu+0x290>)
 80069d4:	f7fc ff3e 	bl	8003854 <HAL_GPIO_WritePin>
            break;
 80069d8:	e048      	b.n	8006a6c <LCD_DisplayMenu+0x284>

        case MENU_SHOW_RESULT:
            //ssd1306_SetCursor(menu_line_X, menu_line_Y);
            //ssd1306_WriteString("Result", Font_7x10, White);
            if (currentCursor == CURSOR_ON_MENU){
 80069da:	4b2a      	ldr	r3, [pc, #168]	@ (8006a84 <LCD_DisplayMenu+0x29c>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d120      	bne.n	8006a24 <LCD_DisplayMenu+0x23c>
				//ssd1306_SetCursor(menu_line_X+70, menu_line_Y);
				//ssd1306_WriteString("<-", Font_7x10, White);

				ssd1306_FillRectangle(menu_line_X-5, menu_line_Y-5, 90, 35, White);
 80069e2:	4b29      	ldr	r3, [pc, #164]	@ (8006a88 <LCD_DisplayMenu+0x2a0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	3b05      	subs	r3, #5
 80069ea:	b2d8      	uxtb	r0, r3
 80069ec:	4b27      	ldr	r3, [pc, #156]	@ (8006a8c <LCD_DisplayMenu+0x2a4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	3b05      	subs	r3, #5
 80069f4:	b2d9      	uxtb	r1, r3
 80069f6:	2301      	movs	r3, #1
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	2323      	movs	r3, #35	@ 0x23
 80069fc:	225a      	movs	r2, #90	@ 0x5a
 80069fe:	f7fa ff8d 	bl	800191c <ssd1306_FillRectangle>

				ssd1306_SetCursor(menu_line_X, menu_line_Y);
 8006a02:	4b21      	ldr	r3, [pc, #132]	@ (8006a88 <LCD_DisplayMenu+0x2a0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	4a20      	ldr	r2, [pc, #128]	@ (8006a8c <LCD_DisplayMenu+0x2a4>)
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	4611      	mov	r1, r2
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fa ff6b 	bl	80018ec <ssd1306_SetCursor>
				ssd1306_WriteString(" Result", Font_7x10, Black);
 8006a16:	4b1e      	ldr	r3, [pc, #120]	@ (8006a90 <LCD_DisplayMenu+0x2a8>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	9200      	str	r2, [sp, #0]
 8006a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a1e:	4826      	ldr	r0, [pc, #152]	@ (8006ab8 <LCD_DisplayMenu+0x2d0>)
 8006a20:	f7fa ff3e 	bl	80018a0 <ssd1306_WriteString>
			}

            ssd1306_SetCursor(set_line_X - 25, set_line_Y);
 8006a24:	4b1c      	ldr	r3, [pc, #112]	@ (8006a98 <LCD_DisplayMenu+0x2b0>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	3b19      	subs	r3, #25
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8006a9c <LCD_DisplayMenu+0x2b4>)
 8006a30:	6812      	ldr	r2, [r2, #0]
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	4611      	mov	r1, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fa ff58 	bl	80018ec <ssd1306_SetCursor>
            char bilStr[20];
            snprintf(bilStr, sizeof(bilStr), "%.2f mg/dL", AveragedBil);
 8006a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8006abc <LCD_DisplayMenu+0x2d4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7f9 fd81 	bl	8000548 <__aeabi_f2d>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	f107 0018 	add.w	r0, r7, #24
 8006a4e:	e9cd 2300 	strd	r2, r3, [sp]
 8006a52:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac0 <LCD_DisplayMenu+0x2d8>)
 8006a54:	2114      	movs	r1, #20
 8006a56:	f001 f83d 	bl	8007ad4 <sniprintf>
            ssd1306_WriteString(bilStr, Font_11x18, White);
 8006a5a:	4b13      	ldr	r3, [pc, #76]	@ (8006aa8 <LCD_DisplayMenu+0x2c0>)
 8006a5c:	f107 0018 	add.w	r0, r7, #24
 8006a60:	2201      	movs	r2, #1
 8006a62:	9200      	str	r2, [sp, #0]
 8006a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a66:	f7fa ff1b 	bl	80018a0 <ssd1306_WriteString>
            break;
 8006a6a:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 8006a6c:	f7fa fe0c 	bl	8001688 <ssd1306_UpdateScreen>
}
 8006a70:	bf00      	nop
 8006a72:	3740      	adds	r7, #64	@ 0x40
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	200011a4 	.word	0x200011a4
 8006a80:	200010d1 	.word	0x200010d1
 8006a84:	200011a5 	.word	0x200011a5
 8006a88:	2000001c 	.word	0x2000001c
 8006a8c:	20000020 	.word	0x20000020
 8006a90:	0800b288 	.word	0x0800b288
 8006a94:	08009d78 	.word	0x08009d78
 8006a98:	20000024 	.word	0x20000024
 8006a9c:	20000028 	.word	0x20000028
 8006aa0:	2000000c 	.word	0x2000000c
 8006aa4:	08009d80 	.word	0x08009d80
 8006aa8:	0800b294 	.word	0x0800b294
 8006aac:	08009d88 	.word	0x08009d88
 8006ab0:	20000010 	.word	0x20000010
 8006ab4:	08009d94 	.word	0x08009d94
 8006ab8:	08009da0 	.word	0x08009da0
 8006abc:	200011d8 	.word	0x200011d8
 8006ac0:	08009da8 	.word	0x08009da8

08006ac4 <LCD_HandleButtonPress>:

// Function to handle button presses
void LCD_HandleButtonPress(void) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
    // Assume button GPIOs are connected and configured
    if (HAL_GPIO_ReadPin(GPIOB, NAVIGATE_BTN_Pin) == GPIO_PIN_RESET) { // Navigate Button
 8006ac8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006acc:	4862      	ldr	r0, [pc, #392]	@ (8006c58 <LCD_HandleButtonPress+0x194>)
 8006ace:	f7fc fea9 	bl	8003824 <HAL_GPIO_ReadPin>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d133      	bne.n	8006b40 <LCD_HandleButtonPress+0x7c>
        holdNavigateBtn++;
 8006ad8:	4b60      	ldr	r3, [pc, #384]	@ (8006c5c <LCD_HandleButtonPress+0x198>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	3301      	adds	r3, #1
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	4b5e      	ldr	r3, [pc, #376]	@ (8006c5c <LCD_HandleButtonPress+0x198>)
 8006ae2:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Debounce_Delay); // Debounce delay
 8006ae4:	4b5e      	ldr	r3, [pc, #376]	@ (8006c60 <LCD_HandleButtonPress+0x19c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fb fbb5 	bl	8002258 <HAL_Delay>

        if (holdNavigateBtn >= 12) { // Assuming hold for 2000 ms
 8006aee:	4b5b      	ldr	r3, [pc, #364]	@ (8006c5c <LCD_HandleButtonPress+0x198>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b0b      	cmp	r3, #11
 8006af4:	d902      	bls.n	8006afc <LCD_HandleButtonPress+0x38>
            LCD_Reset();
 8006af6:	f000 f907 	bl	8006d08 <LCD_Reset>
        }

    } else {
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
    }
}
 8006afa:	e0ab      	b.n	8006c54 <LCD_HandleButtonPress+0x190>
        	 if (currentMenu == MENU_SET_AVG)
 8006afc:	4b59      	ldr	r3, [pc, #356]	@ (8006c64 <LCD_HandleButtonPress+0x1a0>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f040 80a7 	bne.w	8006c54 <LCD_HandleButtonPress+0x190>
				currentCursor = (currentCursor + 1) % CURSOR_TOTAL;
 8006b06:	4b58      	ldr	r3, [pc, #352]	@ (8006c68 <LCD_HandleButtonPress+0x1a4>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	bfb8      	it	lt
 8006b14:	425b      	neglt	r3, r3
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	4b53      	ldr	r3, [pc, #332]	@ (8006c68 <LCD_HandleButtonPress+0x1a4>)
 8006b1a:	701a      	strb	r2, [r3, #0]
				if(currentCursor>=2)  currentCursor = (currentCursor - 1) % CURSOR_TOTAL;
 8006b1c:	4b52      	ldr	r3, [pc, #328]	@ (8006c68 <LCD_HandleButtonPress+0x1a4>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d90a      	bls.n	8006b3a <LCD_HandleButtonPress+0x76>
 8006b24:	4b50      	ldr	r3, [pc, #320]	@ (8006c68 <LCD_HandleButtonPress+0x1a4>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	bfb8      	it	lt
 8006b32:	425b      	neglt	r3, r3
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	4b4c      	ldr	r3, [pc, #304]	@ (8006c68 <LCD_HandleButtonPress+0x1a4>)
 8006b38:	701a      	strb	r2, [r3, #0]
				LCD_UpdateMenu();
 8006b3a:	f000 f8a5 	bl	8006c88 <LCD_UpdateMenu>
}
 8006b3e:	e089      	b.n	8006c54 <LCD_HandleButtonPress+0x190>
    } else if (HAL_GPIO_ReadPin(GPIOE, NEXT_BTN_Pin) == GPIO_PIN_RESET) { // Next Button
 8006b40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006b44:	4849      	ldr	r0, [pc, #292]	@ (8006c6c <LCD_HandleButtonPress+0x1a8>)
 8006b46:	f7fc fe6d 	bl	8003824 <HAL_GPIO_ReadPin>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d131      	bne.n	8006bb4 <LCD_HandleButtonPress+0xf0>
        HAL_Delay(Debounce_Delay); // Debounce delay
 8006b50:	4b43      	ldr	r3, [pc, #268]	@ (8006c60 <LCD_HandleButtonPress+0x19c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fb fb7f 	bl	8002258 <HAL_Delay>
        if (currentCursor == CURSOR_ON_MENU) {
 8006b5a:	4b43      	ldr	r3, [pc, #268]	@ (8006c68 <LCD_HandleButtonPress+0x1a4>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d111      	bne.n	8006b86 <LCD_HandleButtonPress+0xc2>
            currentMenu = (currentMenu + 1) % MENU_TOTAL;
 8006b62:	4b40      	ldr	r3, [pc, #256]	@ (8006c64 <LCD_HandleButtonPress+0x1a0>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	4b41      	ldr	r3, [pc, #260]	@ (8006c70 <LCD_HandleButtonPress+0x1ac>)
 8006b6a:	fb83 3102 	smull	r3, r1, r3, r2
 8006b6e:	17d3      	asrs	r3, r2, #31
 8006b70:	1ac9      	subs	r1, r1, r3
 8006b72:	460b      	mov	r3, r1
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	440b      	add	r3, r1
 8006b78:	1ad1      	subs	r1, r2, r3
 8006b7a:	b2ca      	uxtb	r2, r1
 8006b7c:	4b39      	ldr	r3, [pc, #228]	@ (8006c64 <LCD_HandleButtonPress+0x1a0>)
 8006b7e:	701a      	strb	r2, [r3, #0]
            LCD_UpdateMenu();
 8006b80:	f000 f882 	bl	8006c88 <LCD_UpdateMenu>
}
 8006b84:	e066      	b.n	8006c54 <LCD_HandleButtonPress+0x190>
        } else if (currentCursor == CURSOR_ON_VALUE) {
 8006b86:	4b38      	ldr	r3, [pc, #224]	@ (8006c68 <LCD_HandleButtonPress+0x1a4>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d162      	bne.n	8006c54 <LCD_HandleButtonPress+0x190>
            if (currentMenu == MENU_SET_AVG) {
 8006b8e:	4b35      	ldr	r3, [pc, #212]	@ (8006c64 <LCD_HandleButtonPress+0x1a0>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d15e      	bne.n	8006c54 <LCD_HandleButtonPress+0x190>
                avgValue++;
 8006b96:	4b37      	ldr	r3, [pc, #220]	@ (8006c74 <LCD_HandleButtonPress+0x1b0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	4a35      	ldr	r2, [pc, #212]	@ (8006c74 <LCD_HandleButtonPress+0x1b0>)
 8006b9e:	6013      	str	r3, [r2, #0]
                if (avgValue > 9) avgValue = 9; // Max AVG value
 8006ba0:	4b34      	ldr	r3, [pc, #208]	@ (8006c74 <LCD_HandleButtonPress+0x1b0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b09      	cmp	r3, #9
 8006ba6:	dd02      	ble.n	8006bae <LCD_HandleButtonPress+0xea>
 8006ba8:	4b32      	ldr	r3, [pc, #200]	@ (8006c74 <LCD_HandleButtonPress+0x1b0>)
 8006baa:	2209      	movs	r2, #9
 8006bac:	601a      	str	r2, [r3, #0]
                LCD_UpdateMenu();
 8006bae:	f000 f86b 	bl	8006c88 <LCD_UpdateMenu>
}
 8006bb2:	e04f      	b.n	8006c54 <LCD_HandleButtonPress+0x190>
    } else if (HAL_GPIO_ReadPin(GPIOE, PREV_BTN_Pin) == GPIO_PIN_RESET) { // Prev Button
 8006bb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006bb8:	482c      	ldr	r0, [pc, #176]	@ (8006c6c <LCD_HandleButtonPress+0x1a8>)
 8006bba:	f7fc fe33 	bl	8003824 <HAL_GPIO_ReadPin>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d144      	bne.n	8006c4e <LCD_HandleButtonPress+0x18a>
        HAL_Delay(Debounce_Delay); // Debounce delay
 8006bc4:	4b26      	ldr	r3, [pc, #152]	@ (8006c60 <LCD_HandleButtonPress+0x19c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fb fb45 	bl	8002258 <HAL_Delay>
        if (currentMenu == MENU_SHOW_RESULT) {SumBil = 0;AveragedBil = 0;BilResult=0;testDone=0;}  //*//
 8006bce:	4b25      	ldr	r3, [pc, #148]	@ (8006c64 <LCD_HandleButtonPress+0x1a0>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d10e      	bne.n	8006bf4 <LCD_HandleButtonPress+0x130>
 8006bd6:	4b28      	ldr	r3, [pc, #160]	@ (8006c78 <LCD_HandleButtonPress+0x1b4>)
 8006bd8:	f04f 0200 	mov.w	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	4b27      	ldr	r3, [pc, #156]	@ (8006c7c <LCD_HandleButtonPress+0x1b8>)
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	4b26      	ldr	r3, [pc, #152]	@ (8006c80 <LCD_HandleButtonPress+0x1bc>)
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	4b25      	ldr	r3, [pc, #148]	@ (8006c84 <LCD_HandleButtonPress+0x1c0>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
        if (currentCursor == CURSOR_ON_MENU) {
 8006bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c68 <LCD_HandleButtonPress+0x1a4>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d111      	bne.n	8006c20 <LCD_HandleButtonPress+0x15c>
            currentMenu = (currentMenu - 1 + MENU_TOTAL) % MENU_TOTAL;
 8006bfc:	4b19      	ldr	r3, [pc, #100]	@ (8006c64 <LCD_HandleButtonPress+0x1a0>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	1c9a      	adds	r2, r3, #2
 8006c02:	4b1b      	ldr	r3, [pc, #108]	@ (8006c70 <LCD_HandleButtonPress+0x1ac>)
 8006c04:	fb83 3102 	smull	r3, r1, r3, r2
 8006c08:	17d3      	asrs	r3, r2, #31
 8006c0a:	1ac9      	subs	r1, r1, r3
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	440b      	add	r3, r1
 8006c12:	1ad1      	subs	r1, r2, r3
 8006c14:	b2ca      	uxtb	r2, r1
 8006c16:	4b13      	ldr	r3, [pc, #76]	@ (8006c64 <LCD_HandleButtonPress+0x1a0>)
 8006c18:	701a      	strb	r2, [r3, #0]
            LCD_UpdateMenu();
 8006c1a:	f000 f835 	bl	8006c88 <LCD_UpdateMenu>
}
 8006c1e:	e019      	b.n	8006c54 <LCD_HandleButtonPress+0x190>
        } else if (currentCursor == CURSOR_ON_VALUE) {
 8006c20:	4b11      	ldr	r3, [pc, #68]	@ (8006c68 <LCD_HandleButtonPress+0x1a4>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d115      	bne.n	8006c54 <LCD_HandleButtonPress+0x190>
            if (currentMenu == MENU_SET_AVG) {
 8006c28:	4b0e      	ldr	r3, [pc, #56]	@ (8006c64 <LCD_HandleButtonPress+0x1a0>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d111      	bne.n	8006c54 <LCD_HandleButtonPress+0x190>
                avgValue--;
 8006c30:	4b10      	ldr	r3, [pc, #64]	@ (8006c74 <LCD_HandleButtonPress+0x1b0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	4a0f      	ldr	r2, [pc, #60]	@ (8006c74 <LCD_HandleButtonPress+0x1b0>)
 8006c38:	6013      	str	r3, [r2, #0]
                if (avgValue < 1) avgValue = 1; // Min AVG value
 8006c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c74 <LCD_HandleButtonPress+0x1b0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	dc02      	bgt.n	8006c48 <LCD_HandleButtonPress+0x184>
 8006c42:	4b0c      	ldr	r3, [pc, #48]	@ (8006c74 <LCD_HandleButtonPress+0x1b0>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
                LCD_UpdateMenu();
 8006c48:	f000 f81e 	bl	8006c88 <LCD_UpdateMenu>
}
 8006c4c:	e002      	b.n	8006c54 <LCD_HandleButtonPress+0x190>
        holdNavigateBtn = 0; // Reset hold counter if no button is pressed
 8006c4e:	4b03      	ldr	r3, [pc, #12]	@ (8006c5c <LCD_HandleButtonPress+0x198>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
}
 8006c54:	bf00      	nop
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40020400 	.word	0x40020400
 8006c5c:	200011a6 	.word	0x200011a6
 8006c60:	20000014 	.word	0x20000014
 8006c64:	200011a4 	.word	0x200011a4
 8006c68:	200011a5 	.word	0x200011a5
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	55555556 	.word	0x55555556
 8006c74:	2000000c 	.word	0x2000000c
 8006c78:	200011dc 	.word	0x200011dc
 8006c7c:	200011d8 	.word	0x200011d8
 8006c80:	200011a0 	.word	0x200011a0
 8006c84:	200010d1 	.word	0x200010d1

08006c88 <LCD_UpdateMenu>:

// Function to handle menu updates
void LCD_UpdateMenu(void) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
    LCD_DisplayMenu();
 8006c8c:	f7ff fdac 	bl	80067e8 <LCD_DisplayMenu>
}
 8006c90:	bf00      	nop
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <MeasureAverage>:

void MeasureAverage(void) {
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
for (int var = 1; var <= avgValue+1; var++)
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	e010      	b.n	8006cc2 <MeasureAverage+0x2e>
{
	SumBil += BilArray[var];
 8006ca0:	4a15      	ldr	r2, [pc, #84]	@ (8006cf8 <MeasureAverage+0x64>)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	ed93 7a00 	vldr	s14, [r3]
 8006cac:	4b13      	ldr	r3, [pc, #76]	@ (8006cfc <MeasureAverage+0x68>)
 8006cae:	edd3 7a00 	vldr	s15, [r3]
 8006cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cb6:	4b11      	ldr	r3, [pc, #68]	@ (8006cfc <MeasureAverage+0x68>)
 8006cb8:	edc3 7a00 	vstr	s15, [r3]
for (int var = 1; var <= avgValue+1; var++)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	607b      	str	r3, [r7, #4]
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d00 <MeasureAverage+0x6c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	dde8      	ble.n	8006ca0 <MeasureAverage+0xc>
}
AveragedBil = SumBil / avgValue;
 8006cce:	4b0b      	ldr	r3, [pc, #44]	@ (8006cfc <MeasureAverage+0x68>)
 8006cd0:	edd3 6a00 	vldr	s13, [r3]
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <MeasureAverage+0x6c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	ee07 3a90 	vmov	s15, r3
 8006cdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce4:	4b07      	ldr	r3, [pc, #28]	@ (8006d04 <MeasureAverage+0x70>)
 8006ce6:	edc3 7a00 	vstr	s15, [r3]
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	200011a8 	.word	0x200011a8
 8006cfc:	200011dc 	.word	0x200011dc
 8006d00:	2000000c 	.word	0x2000000c
 8006d04:	200011d8 	.word	0x200011d8

08006d08 <LCD_Reset>:

// Function to reset the menu to the initial state
void LCD_Reset(void) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
    currentMenu = MENU_SET_AVG;
 8006d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8006d7c <LCD_Reset+0x74>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
    currentCursor = CURSOR_ON_MENU;
 8006d14:	4b1a      	ldr	r3, [pc, #104]	@ (8006d80 <LCD_Reset+0x78>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
    avgValue = 1;
 8006d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006d84 <LCD_Reset+0x7c>)
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
    currentTest = 1;
 8006d20:	4b19      	ldr	r3, [pc, #100]	@ (8006d88 <LCD_Reset+0x80>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
    //************************************//
    for (int i = 0; i <= 12-1; i++) BilArray[i]=0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	607b      	str	r3, [r7, #4]
 8006d2a:	e009      	b.n	8006d40 <LCD_Reset+0x38>
 8006d2c:	4a17      	ldr	r2, [pc, #92]	@ (8006d8c <LCD_Reset+0x84>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	607b      	str	r3, [r7, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b0b      	cmp	r3, #11
 8006d44:	ddf2      	ble.n	8006d2c <LCD_Reset+0x24>
    SumBil = 0;
 8006d46:	4b12      	ldr	r3, [pc, #72]	@ (8006d90 <LCD_Reset+0x88>)
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
    AveragedBil = 0;
 8006d4e:	4b11      	ldr	r3, [pc, #68]	@ (8006d94 <LCD_Reset+0x8c>)
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
    BilResult=0;
 8006d56:	4b10      	ldr	r3, [pc, #64]	@ (8006d98 <LCD_Reset+0x90>)
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
    testDone=0;
 8006d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d9c <LCD_Reset+0x94>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	701a      	strb	r2, [r3, #0]
    //***********************************//
    HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET); // Turn off the LED
 8006d64:	2200      	movs	r2, #0
 8006d66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006d6a:	480d      	ldr	r0, [pc, #52]	@ (8006da0 <LCD_Reset+0x98>)
 8006d6c:	f7fc fd72 	bl	8003854 <HAL_GPIO_WritePin>
    LCD_UpdateMenu();
 8006d70:	f7ff ff8a 	bl	8006c88 <LCD_UpdateMenu>
}
 8006d74:	bf00      	nop
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	200011a4 	.word	0x200011a4
 8006d80:	200011a5 	.word	0x200011a5
 8006d84:	2000000c 	.word	0x2000000c
 8006d88:	20000010 	.word	0x20000010
 8006d8c:	200011a8 	.word	0x200011a8
 8006d90:	200011dc 	.word	0x200011dc
 8006d94:	200011d8 	.word	0x200011d8
 8006d98:	200011a0 	.word	0x200011a0
 8006d9c:	200010d1 	.word	0x200010d1
 8006da0:	40021000 	.word	0x40021000

08006da4 <DoesTestComplete>:

// Call this function after each test
void DoesTestComplete(void) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0

	if (testDone)    				 // if test btn pressed
 8006da8:	4b15      	ldr	r3, [pc, #84]	@ (8006e00 <DoesTestComplete+0x5c>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d025      	beq.n	8006dfc <DoesTestComplete+0x58>
	{
		testDone=0;
 8006db0:	4b13      	ldr	r3, [pc, #76]	@ (8006e00 <DoesTestComplete+0x5c>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
		BilArray[currentTest]=BilResult;
 8006db6:	4b13      	ldr	r3, [pc, #76]	@ (8006e04 <DoesTestComplete+0x60>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a13      	ldr	r2, [pc, #76]	@ (8006e08 <DoesTestComplete+0x64>)
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	4913      	ldr	r1, [pc, #76]	@ (8006e0c <DoesTestComplete+0x68>)
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOE, READY_LED_Pin, GPIO_PIN_RESET);
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006dcc:	4810      	ldr	r0, [pc, #64]	@ (8006e10 <DoesTestComplete+0x6c>)
 8006dce:	f7fc fd41 	bl	8003854 <HAL_GPIO_WritePin>
		HAL_Delay(Tests_Intratime);     // Time between Tests
 8006dd2:	4b10      	ldr	r3, [pc, #64]	@ (8006e14 <DoesTestComplete+0x70>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fb fa3e 	bl	8002258 <HAL_Delay>

		currentTest++;
 8006ddc:	4b09      	ldr	r3, [pc, #36]	@ (8006e04 <DoesTestComplete+0x60>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3301      	adds	r3, #1
 8006de2:	4a08      	ldr	r2, [pc, #32]	@ (8006e04 <DoesTestComplete+0x60>)
 8006de4:	6013      	str	r3, [r2, #0]
		if (currentTest > avgValue)  currentMenu = MENU_SHOW_RESULT;
 8006de6:	4b07      	ldr	r3, [pc, #28]	@ (8006e04 <DoesTestComplete+0x60>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <DoesTestComplete+0x74>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	dd02      	ble.n	8006df8 <DoesTestComplete+0x54>
 8006df2:	4b0a      	ldr	r3, [pc, #40]	@ (8006e1c <DoesTestComplete+0x78>)
 8006df4:	2202      	movs	r2, #2
 8006df6:	701a      	strb	r2, [r3, #0]
		LCD_UpdateMenu();
 8006df8:	f7ff ff46 	bl	8006c88 <LCD_UpdateMenu>
	}
}
 8006dfc:	bf00      	nop
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200010d1 	.word	0x200010d1
 8006e04:	20000010 	.word	0x20000010
 8006e08:	200011a0 	.word	0x200011a0
 8006e0c:	200011a8 	.word	0x200011a8
 8006e10:	40021000 	.word	0x40021000
 8006e14:	20000018 	.word	0x20000018
 8006e18:	2000000c 	.word	0x2000000c
 8006e1c:	200011a4 	.word	0x200011a4

08006e20 <spectrometer>:
#include "../INC/generalHeaders.h"

volatile uint8_t eos_received = 0;

void spectrometer(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin) == GPIO_PIN_RESET) )
 8006e24:	2120      	movs	r1, #32
 8006e26:	4805      	ldr	r0, [pc, #20]	@ (8006e3c <spectrometer+0x1c>)
 8006e28:	f7fc fcfc 	bl	8003824 <HAL_GPIO_ReadPin>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <spectrometer+0x16>
	{
			generate_spectrometer_signals();
 8006e32:	f000 f805 	bl	8006e40 <generate_spectrometer_signals>
	}
}
 8006e36:	bf00      	nop
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40020000 	.word	0x40020000

08006e40 <generate_spectrometer_signals>:

void generate_spectrometer_signals(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0

	// Button is pressed
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET); // Turn on the LED
 8006e44:	2201      	movs	r2, #1
 8006e46:	2140      	movs	r1, #64	@ 0x40
 8006e48:	4817      	ldr	r0, [pc, #92]	@ (8006ea8 <generate_spectrometer_signals+0x68>)
 8006e4a:	f7fc fd03 	bl	8003854 <HAL_GPIO_WritePin>
	HAL_Delay(1); // Wait for stabilization
 8006e4e:	2001      	movs	r0, #1
 8006e50:	f7fb fa02 	bl	8002258 <HAL_Delay>

	// Generate start signal for the spectrometer
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_RESET);
 8006e54:	2200      	movs	r2, #0
 8006e56:	2120      	movs	r1, #32
 8006e58:	4814      	ldr	r0, [pc, #80]	@ (8006eac <generate_spectrometer_signals+0x6c>)
 8006e5a:	f7fc fcfb 	bl	8003854 <HAL_GPIO_WritePin>
	//DWT_Delay(1);
	HAL_Delay(1);
 8006e5e:	2001      	movs	r0, #1
 8006e60:	f7fb f9fa 	bl	8002258 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 8006e64:	2201      	movs	r2, #1
 8006e66:	2120      	movs	r1, #32
 8006e68:	4810      	ldr	r0, [pc, #64]	@ (8006eac <generate_spectrometer_signals+0x6c>)
 8006e6a:	f7fc fcf3 	bl	8003854 <HAL_GPIO_WritePin>
	HAL_Delay(20); //8//500 									// Higher integration time Higher Spectrum Amplitude
 8006e6e:	2014      	movs	r0, #20
 8006e70:	f7fb f9f2 	bl	8002258 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_RESET);
 8006e74:	2200      	movs	r2, #0
 8006e76:	2120      	movs	r1, #32
 8006e78:	480c      	ldr	r0, [pc, #48]	@ (8006eac <generate_spectrometer_signals+0x6c>)
 8006e7a:	f7fc fceb 	bl	8003854 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006e7e:	2001      	movs	r0, #1
 8006e80:	f7fb f9ea 	bl	8002258 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 8006e84:	2201      	movs	r2, #1
 8006e86:	2120      	movs	r1, #32
 8006e88:	4808      	ldr	r0, [pc, #32]	@ (8006eac <generate_spectrometer_signals+0x6c>)
 8006e8a:	f7fc fce3 	bl	8003854 <HAL_GPIO_WritePin>

	// Wait for EOS signal
	//while (!eos_received) {}
	capture_and_send_data();
 8006e8e:	f7ff fb3b 	bl	8006508 <capture_and_send_data>
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET); 			// Turn off the LED
 8006e92:	2200      	movs	r2, #0
 8006e94:	2140      	movs	r1, #64	@ 0x40
 8006e96:	4804      	ldr	r0, [pc, #16]	@ (8006ea8 <generate_spectrometer_signals+0x68>)
 8006e98:	f7fc fcdc 	bl	8003854 <HAL_GPIO_WritePin>
	eos_received = 0;
 8006e9c:	4b04      	ldr	r3, [pc, #16]	@ (8006eb0 <generate_spectrometer_signals+0x70>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	701a      	strb	r2, [r3, #0]

}
 8006ea2:	bf00      	nop
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40020000 	.word	0x40020000
 8006eac:	40020400 	.word	0x40020400
 8006eb0:	200011e0 	.word	0x200011e0

08006eb4 <EXTI4_IRQHandler>:

/////////////////////////////////////// EOS Interrupt ///////////////////////////////////////////
/* EXTI4 IRQ Handler */
void EXTI4_IRQHandler(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006eb8:	2010      	movs	r0, #16
 8006eba:	f7fc fce5 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
}
 8006ebe:	bf00      	nop
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <HAL_GPIO_EXTI_Callback>:

// Callback for EOS interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4) {
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	2b10      	cmp	r3, #16
 8006ed2:	d102      	bne.n	8006eda <HAL_GPIO_EXTI_Callback+0x16>
        eos_received = 1;
 8006ed4:	4b04      	ldr	r3, [pc, #16]	@ (8006ee8 <HAL_GPIO_EXTI_Callback+0x24>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	701a      	strb	r2, [r3, #0]
    }
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	200011e0 	.word	0x200011e0

08006eec <DWT_Init>:
/////////////////////////////////////// us Delay Timer ///////////////////////////////////////////
// Function to initialize the DWT unit
void DWT_Init(void) {
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
    // Enable TRC
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006ef0:	4b08      	ldr	r3, [pc, #32]	@ (8006f14 <DWT_Init+0x28>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	4a07      	ldr	r2, [pc, #28]	@ (8006f14 <DWT_Init+0x28>)
 8006ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006efa:	60d3      	str	r3, [r2, #12]
    // Unlock DWT access
    //DWT->LAR = 0xC5ACCE55;
    // Enable the cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006efc:	4b06      	ldr	r3, [pc, #24]	@ (8006f18 <DWT_Init+0x2c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a05      	ldr	r2, [pc, #20]	@ (8006f18 <DWT_Init+0x2c>)
 8006f02:	f043 0301 	orr.w	r3, r3, #1
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	e000edf0 	.word	0xe000edf0
 8006f18:	e0001000 	.word	0xe0001000

08006f1c <DWT_GetSysClockFreq>:
// Function to get the system clock frequency
uint32_t DWT_GetSysClockFreq(void) {
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 8006f20:	4b03      	ldr	r3, [pc, #12]	@ (8006f30 <DWT_GetSysClockFreq+0x14>)
 8006f22:	681b      	ldr	r3, [r3, #0]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	20000000 	.word	0x20000000

08006f34 <DWT_Delay>:

// Function to create a microsecond delay
void DWT_Delay(uint32_t us) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 8006f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f74 <DWT_Delay+0x40>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (DWT_GetSysClockFreq() / 1000000);
 8006f42:	f7ff ffeb 	bl	8006f1c <DWT_GetSysClockFreq>
 8006f46:	4603      	mov	r3, r0
 8006f48:	4a0b      	ldr	r2, [pc, #44]	@ (8006f78 <DWT_Delay+0x44>)
 8006f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4e:	0c9a      	lsrs	r2, r3, #18
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	fb02 f303 	mul.w	r3, r2, r3
 8006f56:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - startTick) < delayTicks);
 8006f58:	bf00      	nop
 8006f5a:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <DWT_Delay+0x40>)
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d8f8      	bhi.n	8006f5a <DWT_Delay+0x26>
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	e0001000 	.word	0xe0001000
 8006f78:	431bde83 	.word	0x431bde83

08006f7c <systemLoop>:
int logo_time = 2500;    //2500
int text_time = 2500;    //2000


void systemLoop(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
	  spectrometer();
 8006f80:	f7ff ff4e 	bl	8006e20 <spectrometer>
	  LCD();
 8006f84:	f7ff fc28 	bl	80067d8 <LCD>
}
 8006f88:	bf00      	nop
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <systemSetup>:

void systemSetup(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
	   SpectrometerSetup();
 8006f90:	f000 f804 	bl	8006f9c <SpectrometerSetup>
	   LCD_Setup();
 8006f94:	f000 f826 	bl	8006fe4 <LCD_Setup>
}
 8006f98:	bf00      	nop
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <SpectrometerSetup>:

//################################################################################################//

void SpectrometerSetup(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
	  TIM1->CCR1=5;  //50   50% Duty Cycle ==> to generate 135khz
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd4 <SpectrometerSetup+0x38>)
 8006fa2:	2205      	movs	r2, #5
 8006fa4:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	480b      	ldr	r0, [pc, #44]	@ (8006fd8 <SpectrometerSetup+0x3c>)
 8006faa:	f7fd fc6d 	bl	8004888 <HAL_TIM_PWM_Start>

	  HAL_GPIO_WritePin(GPIOB, SPEC_START_Pin, GPIO_PIN_SET);
 8006fae:	2201      	movs	r2, #1
 8006fb0:	2120      	movs	r1, #32
 8006fb2:	480a      	ldr	r0, [pc, #40]	@ (8006fdc <SpectrometerSetup+0x40>)
 8006fb4:	f7fc fc4e 	bl	8003854 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SPEC_CLK_Pin|SPEC_EOS_Pin|SPEC_GAIN_Pin, GPIO_PIN_RESET);
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8006fbe:	4807      	ldr	r0, [pc, #28]	@ (8006fdc <SpectrometerSetup+0x40>)
 8006fc0:	f7fc fc48 	bl	8003854 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET); // Turn off the LED
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2140      	movs	r1, #64	@ 0x40
 8006fc8:	4805      	ldr	r0, [pc, #20]	@ (8006fe0 <SpectrometerSetup+0x44>)
 8006fca:	f7fc fc43 	bl	8003854 <HAL_GPIO_WritePin>
}
 8006fce:	bf00      	nop
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	20000318 	.word	0x20000318
 8006fdc:	40020400 	.word	0x40020400
 8006fe0:	40020000 	.word	0x40020000

08006fe4 <LCD_Setup>:

void LCD_Setup(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
	  ssd1306_Init();
 8006fe8:	f7fa facc 	bl	8001584 <ssd1306_Init>
	  Aymed_Logo();
 8006fec:	f000 f804 	bl	8006ff8 <Aymed_Logo>
	  Aymed_Text();
 8006ff0:	f000 f824 	bl	800703c <Aymed_Text>

}
 8006ff4:	bf00      	nop
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <Aymed_Logo>:

void Aymed_Logo(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af02      	add	r7, sp, #8
	 ssd1306_Fill(Black);
 8006ffe:	2000      	movs	r0, #0
 8007000:	f7fa fb2a 	bl	8001658 <ssd1306_Fill>
	 ssd1306_SetCursor(0, 0);
 8007004:	2100      	movs	r1, #0
 8007006:	2000      	movs	r0, #0
 8007008:	f7fa fc70 	bl	80018ec <ssd1306_SetCursor>
     ssd1306_DrawBitmap(0,0,image_data_ss,128,64, White );
 800700c:	2301      	movs	r3, #1
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	2340      	movs	r3, #64	@ 0x40
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2380      	movs	r3, #128	@ 0x80
 8007016:	4a07      	ldr	r2, [pc, #28]	@ (8007034 <Aymed_Logo+0x3c>)
 8007018:	2100      	movs	r1, #0
 800701a:	2000      	movs	r0, #0
 800701c:	f7fa fccc 	bl	80019b8 <ssd1306_DrawBitmap>
     ssd1306_UpdateScreen();
 8007020:	f7fa fb32 	bl	8001688 <ssd1306_UpdateScreen>
     HAL_Delay(logo_time);
 8007024:	4b04      	ldr	r3, [pc, #16]	@ (8007038 <Aymed_Logo+0x40>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f7fb f915 	bl	8002258 <HAL_Delay>
}
 800702e:	bf00      	nop
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	0800b2c0 	.word	0x0800b2c0
 8007038:	2000002c 	.word	0x2000002c

0800703c <Aymed_Text>:

void Aymed_Text(void)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8007042:	2000      	movs	r0, #0
 8007044:	f7fa fb08 	bl	8001658 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8007048:	2100      	movs	r1, #0
 800704a:	2000      	movs	r0, #0
 800704c:	f7fa fc4e 	bl	80018ec <ssd1306_SetCursor>
    ssd1306_DrawBitmap(0,0,image_data_logo_text,128,32, White );          //AYMED text
 8007050:	2301      	movs	r3, #1
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	2320      	movs	r3, #32
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	2380      	movs	r3, #128	@ 0x80
 800705a:	4a0d      	ldr	r2, [pc, #52]	@ (8007090 <Aymed_Text+0x54>)
 800705c:	2100      	movs	r1, #0
 800705e:	2000      	movs	r0, #0
 8007060:	f7fa fcaa 	bl	80019b8 <ssd1306_DrawBitmap>
    //---------------------------------------------------//
    ssd1306_SetCursor(34, 48);
 8007064:	2130      	movs	r1, #48	@ 0x30
 8007066:	2022      	movs	r0, #34	@ 0x22
 8007068:	f7fa fc40 	bl	80018ec <ssd1306_SetCursor>
    ssd1306_WriteString("VISHNE v4", Font_7x10, White);					  //Device's Version
 800706c:	4b09      	ldr	r3, [pc, #36]	@ (8007094 <Aymed_Text+0x58>)
 800706e:	2201      	movs	r2, #1
 8007070:	9200      	str	r2, [sp, #0]
 8007072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007074:	4808      	ldr	r0, [pc, #32]	@ (8007098 <Aymed_Text+0x5c>)
 8007076:	f7fa fc13 	bl	80018a0 <ssd1306_WriteString>
    //---------------------------------------------------//
    ssd1306_UpdateScreen();
 800707a:	f7fa fb05 	bl	8001688 <ssd1306_UpdateScreen>

    HAL_Delay(text_time);
 800707e:	4b07      	ldr	r3, [pc, #28]	@ (800709c <Aymed_Text+0x60>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f7fb f8e8 	bl	8002258 <HAL_Delay>

}
 8007088:	bf00      	nop
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	0800b6c0 	.word	0x0800b6c0
 8007094:	0800b288 	.word	0x0800b288
 8007098:	08009db4 	.word	0x08009db4
 800709c:	20000030 	.word	0x20000030

080070a0 <__cvt>:
 80070a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070a4:	ec57 6b10 	vmov	r6, r7, d0
 80070a8:	2f00      	cmp	r7, #0
 80070aa:	460c      	mov	r4, r1
 80070ac:	4619      	mov	r1, r3
 80070ae:	463b      	mov	r3, r7
 80070b0:	bfbb      	ittet	lt
 80070b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80070b6:	461f      	movlt	r7, r3
 80070b8:	2300      	movge	r3, #0
 80070ba:	232d      	movlt	r3, #45	@ 0x2d
 80070bc:	700b      	strb	r3, [r1, #0]
 80070be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80070c4:	4691      	mov	r9, r2
 80070c6:	f023 0820 	bic.w	r8, r3, #32
 80070ca:	bfbc      	itt	lt
 80070cc:	4632      	movlt	r2, r6
 80070ce:	4616      	movlt	r6, r2
 80070d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070d4:	d005      	beq.n	80070e2 <__cvt+0x42>
 80070d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80070da:	d100      	bne.n	80070de <__cvt+0x3e>
 80070dc:	3401      	adds	r4, #1
 80070de:	2102      	movs	r1, #2
 80070e0:	e000      	b.n	80070e4 <__cvt+0x44>
 80070e2:	2103      	movs	r1, #3
 80070e4:	ab03      	add	r3, sp, #12
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	ab02      	add	r3, sp, #8
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	ec47 6b10 	vmov	d0, r6, r7
 80070f0:	4653      	mov	r3, sl
 80070f2:	4622      	mov	r2, r4
 80070f4:	f000 fe98 	bl	8007e28 <_dtoa_r>
 80070f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80070fc:	4605      	mov	r5, r0
 80070fe:	d119      	bne.n	8007134 <__cvt+0x94>
 8007100:	f019 0f01 	tst.w	r9, #1
 8007104:	d00e      	beq.n	8007124 <__cvt+0x84>
 8007106:	eb00 0904 	add.w	r9, r0, r4
 800710a:	2200      	movs	r2, #0
 800710c:	2300      	movs	r3, #0
 800710e:	4630      	mov	r0, r6
 8007110:	4639      	mov	r1, r7
 8007112:	f7f9 fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007116:	b108      	cbz	r0, 800711c <__cvt+0x7c>
 8007118:	f8cd 900c 	str.w	r9, [sp, #12]
 800711c:	2230      	movs	r2, #48	@ 0x30
 800711e:	9b03      	ldr	r3, [sp, #12]
 8007120:	454b      	cmp	r3, r9
 8007122:	d31e      	bcc.n	8007162 <__cvt+0xc2>
 8007124:	9b03      	ldr	r3, [sp, #12]
 8007126:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007128:	1b5b      	subs	r3, r3, r5
 800712a:	4628      	mov	r0, r5
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	b004      	add	sp, #16
 8007130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007134:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007138:	eb00 0904 	add.w	r9, r0, r4
 800713c:	d1e5      	bne.n	800710a <__cvt+0x6a>
 800713e:	7803      	ldrb	r3, [r0, #0]
 8007140:	2b30      	cmp	r3, #48	@ 0x30
 8007142:	d10a      	bne.n	800715a <__cvt+0xba>
 8007144:	2200      	movs	r2, #0
 8007146:	2300      	movs	r3, #0
 8007148:	4630      	mov	r0, r6
 800714a:	4639      	mov	r1, r7
 800714c:	f7f9 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007150:	b918      	cbnz	r0, 800715a <__cvt+0xba>
 8007152:	f1c4 0401 	rsb	r4, r4, #1
 8007156:	f8ca 4000 	str.w	r4, [sl]
 800715a:	f8da 3000 	ldr.w	r3, [sl]
 800715e:	4499      	add	r9, r3
 8007160:	e7d3      	b.n	800710a <__cvt+0x6a>
 8007162:	1c59      	adds	r1, r3, #1
 8007164:	9103      	str	r1, [sp, #12]
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	e7d9      	b.n	800711e <__cvt+0x7e>

0800716a <__exponent>:
 800716a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800716c:	2900      	cmp	r1, #0
 800716e:	bfba      	itte	lt
 8007170:	4249      	neglt	r1, r1
 8007172:	232d      	movlt	r3, #45	@ 0x2d
 8007174:	232b      	movge	r3, #43	@ 0x2b
 8007176:	2909      	cmp	r1, #9
 8007178:	7002      	strb	r2, [r0, #0]
 800717a:	7043      	strb	r3, [r0, #1]
 800717c:	dd29      	ble.n	80071d2 <__exponent+0x68>
 800717e:	f10d 0307 	add.w	r3, sp, #7
 8007182:	461d      	mov	r5, r3
 8007184:	270a      	movs	r7, #10
 8007186:	461a      	mov	r2, r3
 8007188:	fbb1 f6f7 	udiv	r6, r1, r7
 800718c:	fb07 1416 	mls	r4, r7, r6, r1
 8007190:	3430      	adds	r4, #48	@ 0x30
 8007192:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007196:	460c      	mov	r4, r1
 8007198:	2c63      	cmp	r4, #99	@ 0x63
 800719a:	f103 33ff 	add.w	r3, r3, #4294967295
 800719e:	4631      	mov	r1, r6
 80071a0:	dcf1      	bgt.n	8007186 <__exponent+0x1c>
 80071a2:	3130      	adds	r1, #48	@ 0x30
 80071a4:	1e94      	subs	r4, r2, #2
 80071a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80071aa:	1c41      	adds	r1, r0, #1
 80071ac:	4623      	mov	r3, r4
 80071ae:	42ab      	cmp	r3, r5
 80071b0:	d30a      	bcc.n	80071c8 <__exponent+0x5e>
 80071b2:	f10d 0309 	add.w	r3, sp, #9
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	42ac      	cmp	r4, r5
 80071ba:	bf88      	it	hi
 80071bc:	2300      	movhi	r3, #0
 80071be:	3302      	adds	r3, #2
 80071c0:	4403      	add	r3, r0
 80071c2:	1a18      	subs	r0, r3, r0
 80071c4:	b003      	add	sp, #12
 80071c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80071cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80071d0:	e7ed      	b.n	80071ae <__exponent+0x44>
 80071d2:	2330      	movs	r3, #48	@ 0x30
 80071d4:	3130      	adds	r1, #48	@ 0x30
 80071d6:	7083      	strb	r3, [r0, #2]
 80071d8:	70c1      	strb	r1, [r0, #3]
 80071da:	1d03      	adds	r3, r0, #4
 80071dc:	e7f1      	b.n	80071c2 <__exponent+0x58>
	...

080071e0 <_printf_float>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	b08d      	sub	sp, #52	@ 0x34
 80071e6:	460c      	mov	r4, r1
 80071e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80071ec:	4616      	mov	r6, r2
 80071ee:	461f      	mov	r7, r3
 80071f0:	4605      	mov	r5, r0
 80071f2:	f000 fd09 	bl	8007c08 <_localeconv_r>
 80071f6:	6803      	ldr	r3, [r0, #0]
 80071f8:	9304      	str	r3, [sp, #16]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7f9 f838 	bl	8000270 <strlen>
 8007200:	2300      	movs	r3, #0
 8007202:	930a      	str	r3, [sp, #40]	@ 0x28
 8007204:	f8d8 3000 	ldr.w	r3, [r8]
 8007208:	9005      	str	r0, [sp, #20]
 800720a:	3307      	adds	r3, #7
 800720c:	f023 0307 	bic.w	r3, r3, #7
 8007210:	f103 0208 	add.w	r2, r3, #8
 8007214:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007218:	f8d4 b000 	ldr.w	fp, [r4]
 800721c:	f8c8 2000 	str.w	r2, [r8]
 8007220:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007224:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007228:	9307      	str	r3, [sp, #28]
 800722a:	f8cd 8018 	str.w	r8, [sp, #24]
 800722e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007236:	4b9c      	ldr	r3, [pc, #624]	@ (80074a8 <_printf_float+0x2c8>)
 8007238:	f04f 32ff 	mov.w	r2, #4294967295
 800723c:	f7f9 fc76 	bl	8000b2c <__aeabi_dcmpun>
 8007240:	bb70      	cbnz	r0, 80072a0 <_printf_float+0xc0>
 8007242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007246:	4b98      	ldr	r3, [pc, #608]	@ (80074a8 <_printf_float+0x2c8>)
 8007248:	f04f 32ff 	mov.w	r2, #4294967295
 800724c:	f7f9 fc50 	bl	8000af0 <__aeabi_dcmple>
 8007250:	bb30      	cbnz	r0, 80072a0 <_printf_float+0xc0>
 8007252:	2200      	movs	r2, #0
 8007254:	2300      	movs	r3, #0
 8007256:	4640      	mov	r0, r8
 8007258:	4649      	mov	r1, r9
 800725a:	f7f9 fc3f 	bl	8000adc <__aeabi_dcmplt>
 800725e:	b110      	cbz	r0, 8007266 <_printf_float+0x86>
 8007260:	232d      	movs	r3, #45	@ 0x2d
 8007262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007266:	4a91      	ldr	r2, [pc, #580]	@ (80074ac <_printf_float+0x2cc>)
 8007268:	4b91      	ldr	r3, [pc, #580]	@ (80074b0 <_printf_float+0x2d0>)
 800726a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800726e:	bf94      	ite	ls
 8007270:	4690      	movls	r8, r2
 8007272:	4698      	movhi	r8, r3
 8007274:	2303      	movs	r3, #3
 8007276:	6123      	str	r3, [r4, #16]
 8007278:	f02b 0304 	bic.w	r3, fp, #4
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	f04f 0900 	mov.w	r9, #0
 8007282:	9700      	str	r7, [sp, #0]
 8007284:	4633      	mov	r3, r6
 8007286:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007288:	4621      	mov	r1, r4
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f9d2 	bl	8007634 <_printf_common>
 8007290:	3001      	adds	r0, #1
 8007292:	f040 808d 	bne.w	80073b0 <_printf_float+0x1d0>
 8007296:	f04f 30ff 	mov.w	r0, #4294967295
 800729a:	b00d      	add	sp, #52	@ 0x34
 800729c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a0:	4642      	mov	r2, r8
 80072a2:	464b      	mov	r3, r9
 80072a4:	4640      	mov	r0, r8
 80072a6:	4649      	mov	r1, r9
 80072a8:	f7f9 fc40 	bl	8000b2c <__aeabi_dcmpun>
 80072ac:	b140      	cbz	r0, 80072c0 <_printf_float+0xe0>
 80072ae:	464b      	mov	r3, r9
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bfbc      	itt	lt
 80072b4:	232d      	movlt	r3, #45	@ 0x2d
 80072b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80072ba:	4a7e      	ldr	r2, [pc, #504]	@ (80074b4 <_printf_float+0x2d4>)
 80072bc:	4b7e      	ldr	r3, [pc, #504]	@ (80074b8 <_printf_float+0x2d8>)
 80072be:	e7d4      	b.n	800726a <_printf_float+0x8a>
 80072c0:	6863      	ldr	r3, [r4, #4]
 80072c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80072c6:	9206      	str	r2, [sp, #24]
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	d13b      	bne.n	8007344 <_printf_float+0x164>
 80072cc:	2306      	movs	r3, #6
 80072ce:	6063      	str	r3, [r4, #4]
 80072d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80072d4:	2300      	movs	r3, #0
 80072d6:	6022      	str	r2, [r4, #0]
 80072d8:	9303      	str	r3, [sp, #12]
 80072da:	ab0a      	add	r3, sp, #40	@ 0x28
 80072dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80072e0:	ab09      	add	r3, sp, #36	@ 0x24
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	6861      	ldr	r1, [r4, #4]
 80072e6:	ec49 8b10 	vmov	d0, r8, r9
 80072ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80072ee:	4628      	mov	r0, r5
 80072f0:	f7ff fed6 	bl	80070a0 <__cvt>
 80072f4:	9b06      	ldr	r3, [sp, #24]
 80072f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072f8:	2b47      	cmp	r3, #71	@ 0x47
 80072fa:	4680      	mov	r8, r0
 80072fc:	d129      	bne.n	8007352 <_printf_float+0x172>
 80072fe:	1cc8      	adds	r0, r1, #3
 8007300:	db02      	blt.n	8007308 <_printf_float+0x128>
 8007302:	6863      	ldr	r3, [r4, #4]
 8007304:	4299      	cmp	r1, r3
 8007306:	dd41      	ble.n	800738c <_printf_float+0x1ac>
 8007308:	f1aa 0a02 	sub.w	sl, sl, #2
 800730c:	fa5f fa8a 	uxtb.w	sl, sl
 8007310:	3901      	subs	r1, #1
 8007312:	4652      	mov	r2, sl
 8007314:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007318:	9109      	str	r1, [sp, #36]	@ 0x24
 800731a:	f7ff ff26 	bl	800716a <__exponent>
 800731e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007320:	1813      	adds	r3, r2, r0
 8007322:	2a01      	cmp	r2, #1
 8007324:	4681      	mov	r9, r0
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	dc02      	bgt.n	8007330 <_printf_float+0x150>
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	07d2      	lsls	r2, r2, #31
 800732e:	d501      	bpl.n	8007334 <_printf_float+0x154>
 8007330:	3301      	adds	r3, #1
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0a2      	beq.n	8007282 <_printf_float+0xa2>
 800733c:	232d      	movs	r3, #45	@ 0x2d
 800733e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007342:	e79e      	b.n	8007282 <_printf_float+0xa2>
 8007344:	9a06      	ldr	r2, [sp, #24]
 8007346:	2a47      	cmp	r2, #71	@ 0x47
 8007348:	d1c2      	bne.n	80072d0 <_printf_float+0xf0>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1c0      	bne.n	80072d0 <_printf_float+0xf0>
 800734e:	2301      	movs	r3, #1
 8007350:	e7bd      	b.n	80072ce <_printf_float+0xee>
 8007352:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007356:	d9db      	bls.n	8007310 <_printf_float+0x130>
 8007358:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800735c:	d118      	bne.n	8007390 <_printf_float+0x1b0>
 800735e:	2900      	cmp	r1, #0
 8007360:	6863      	ldr	r3, [r4, #4]
 8007362:	dd0b      	ble.n	800737c <_printf_float+0x19c>
 8007364:	6121      	str	r1, [r4, #16]
 8007366:	b913      	cbnz	r3, 800736e <_printf_float+0x18e>
 8007368:	6822      	ldr	r2, [r4, #0]
 800736a:	07d0      	lsls	r0, r2, #31
 800736c:	d502      	bpl.n	8007374 <_printf_float+0x194>
 800736e:	3301      	adds	r3, #1
 8007370:	440b      	add	r3, r1
 8007372:	6123      	str	r3, [r4, #16]
 8007374:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007376:	f04f 0900 	mov.w	r9, #0
 800737a:	e7db      	b.n	8007334 <_printf_float+0x154>
 800737c:	b913      	cbnz	r3, 8007384 <_printf_float+0x1a4>
 800737e:	6822      	ldr	r2, [r4, #0]
 8007380:	07d2      	lsls	r2, r2, #31
 8007382:	d501      	bpl.n	8007388 <_printf_float+0x1a8>
 8007384:	3302      	adds	r3, #2
 8007386:	e7f4      	b.n	8007372 <_printf_float+0x192>
 8007388:	2301      	movs	r3, #1
 800738a:	e7f2      	b.n	8007372 <_printf_float+0x192>
 800738c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007392:	4299      	cmp	r1, r3
 8007394:	db05      	blt.n	80073a2 <_printf_float+0x1c2>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	6121      	str	r1, [r4, #16]
 800739a:	07d8      	lsls	r0, r3, #31
 800739c:	d5ea      	bpl.n	8007374 <_printf_float+0x194>
 800739e:	1c4b      	adds	r3, r1, #1
 80073a0:	e7e7      	b.n	8007372 <_printf_float+0x192>
 80073a2:	2900      	cmp	r1, #0
 80073a4:	bfd4      	ite	le
 80073a6:	f1c1 0202 	rsble	r2, r1, #2
 80073aa:	2201      	movgt	r2, #1
 80073ac:	4413      	add	r3, r2
 80073ae:	e7e0      	b.n	8007372 <_printf_float+0x192>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	055a      	lsls	r2, r3, #21
 80073b4:	d407      	bmi.n	80073c6 <_printf_float+0x1e6>
 80073b6:	6923      	ldr	r3, [r4, #16]
 80073b8:	4642      	mov	r2, r8
 80073ba:	4631      	mov	r1, r6
 80073bc:	4628      	mov	r0, r5
 80073be:	47b8      	blx	r7
 80073c0:	3001      	adds	r0, #1
 80073c2:	d12b      	bne.n	800741c <_printf_float+0x23c>
 80073c4:	e767      	b.n	8007296 <_printf_float+0xb6>
 80073c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073ca:	f240 80dd 	bls.w	8007588 <_printf_float+0x3a8>
 80073ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073d2:	2200      	movs	r2, #0
 80073d4:	2300      	movs	r3, #0
 80073d6:	f7f9 fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d033      	beq.n	8007446 <_printf_float+0x266>
 80073de:	4a37      	ldr	r2, [pc, #220]	@ (80074bc <_printf_float+0x2dc>)
 80073e0:	2301      	movs	r3, #1
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f af54 	beq.w	8007296 <_printf_float+0xb6>
 80073ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80073f2:	4543      	cmp	r3, r8
 80073f4:	db02      	blt.n	80073fc <_printf_float+0x21c>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	07d8      	lsls	r0, r3, #31
 80073fa:	d50f      	bpl.n	800741c <_printf_float+0x23c>
 80073fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	f43f af45 	beq.w	8007296 <_printf_float+0xb6>
 800740c:	f04f 0900 	mov.w	r9, #0
 8007410:	f108 38ff 	add.w	r8, r8, #4294967295
 8007414:	f104 0a1a 	add.w	sl, r4, #26
 8007418:	45c8      	cmp	r8, r9
 800741a:	dc09      	bgt.n	8007430 <_printf_float+0x250>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	079b      	lsls	r3, r3, #30
 8007420:	f100 8103 	bmi.w	800762a <_printf_float+0x44a>
 8007424:	68e0      	ldr	r0, [r4, #12]
 8007426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007428:	4298      	cmp	r0, r3
 800742a:	bfb8      	it	lt
 800742c:	4618      	movlt	r0, r3
 800742e:	e734      	b.n	800729a <_printf_float+0xba>
 8007430:	2301      	movs	r3, #1
 8007432:	4652      	mov	r2, sl
 8007434:	4631      	mov	r1, r6
 8007436:	4628      	mov	r0, r5
 8007438:	47b8      	blx	r7
 800743a:	3001      	adds	r0, #1
 800743c:	f43f af2b 	beq.w	8007296 <_printf_float+0xb6>
 8007440:	f109 0901 	add.w	r9, r9, #1
 8007444:	e7e8      	b.n	8007418 <_printf_float+0x238>
 8007446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007448:	2b00      	cmp	r3, #0
 800744a:	dc39      	bgt.n	80074c0 <_printf_float+0x2e0>
 800744c:	4a1b      	ldr	r2, [pc, #108]	@ (80074bc <_printf_float+0x2dc>)
 800744e:	2301      	movs	r3, #1
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	f43f af1d 	beq.w	8007296 <_printf_float+0xb6>
 800745c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007460:	ea59 0303 	orrs.w	r3, r9, r3
 8007464:	d102      	bne.n	800746c <_printf_float+0x28c>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	07d9      	lsls	r1, r3, #31
 800746a:	d5d7      	bpl.n	800741c <_printf_float+0x23c>
 800746c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007470:	4631      	mov	r1, r6
 8007472:	4628      	mov	r0, r5
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	f43f af0d 	beq.w	8007296 <_printf_float+0xb6>
 800747c:	f04f 0a00 	mov.w	sl, #0
 8007480:	f104 0b1a 	add.w	fp, r4, #26
 8007484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007486:	425b      	negs	r3, r3
 8007488:	4553      	cmp	r3, sl
 800748a:	dc01      	bgt.n	8007490 <_printf_float+0x2b0>
 800748c:	464b      	mov	r3, r9
 800748e:	e793      	b.n	80073b8 <_printf_float+0x1d8>
 8007490:	2301      	movs	r3, #1
 8007492:	465a      	mov	r2, fp
 8007494:	4631      	mov	r1, r6
 8007496:	4628      	mov	r0, r5
 8007498:	47b8      	blx	r7
 800749a:	3001      	adds	r0, #1
 800749c:	f43f aefb 	beq.w	8007296 <_printf_float+0xb6>
 80074a0:	f10a 0a01 	add.w	sl, sl, #1
 80074a4:	e7ee      	b.n	8007484 <_printf_float+0x2a4>
 80074a6:	bf00      	nop
 80074a8:	7fefffff 	.word	0x7fefffff
 80074ac:	0800b8c0 	.word	0x0800b8c0
 80074b0:	0800b8c4 	.word	0x0800b8c4
 80074b4:	0800b8c8 	.word	0x0800b8c8
 80074b8:	0800b8cc 	.word	0x0800b8cc
 80074bc:	0800b8d0 	.word	0x0800b8d0
 80074c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074c6:	4553      	cmp	r3, sl
 80074c8:	bfa8      	it	ge
 80074ca:	4653      	movge	r3, sl
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	4699      	mov	r9, r3
 80074d0:	dc36      	bgt.n	8007540 <_printf_float+0x360>
 80074d2:	f04f 0b00 	mov.w	fp, #0
 80074d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074da:	f104 021a 	add.w	r2, r4, #26
 80074de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074e0:	9306      	str	r3, [sp, #24]
 80074e2:	eba3 0309 	sub.w	r3, r3, r9
 80074e6:	455b      	cmp	r3, fp
 80074e8:	dc31      	bgt.n	800754e <_printf_float+0x36e>
 80074ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ec:	459a      	cmp	sl, r3
 80074ee:	dc3a      	bgt.n	8007566 <_printf_float+0x386>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	07da      	lsls	r2, r3, #31
 80074f4:	d437      	bmi.n	8007566 <_printf_float+0x386>
 80074f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f8:	ebaa 0903 	sub.w	r9, sl, r3
 80074fc:	9b06      	ldr	r3, [sp, #24]
 80074fe:	ebaa 0303 	sub.w	r3, sl, r3
 8007502:	4599      	cmp	r9, r3
 8007504:	bfa8      	it	ge
 8007506:	4699      	movge	r9, r3
 8007508:	f1b9 0f00 	cmp.w	r9, #0
 800750c:	dc33      	bgt.n	8007576 <_printf_float+0x396>
 800750e:	f04f 0800 	mov.w	r8, #0
 8007512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007516:	f104 0b1a 	add.w	fp, r4, #26
 800751a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800751c:	ebaa 0303 	sub.w	r3, sl, r3
 8007520:	eba3 0309 	sub.w	r3, r3, r9
 8007524:	4543      	cmp	r3, r8
 8007526:	f77f af79 	ble.w	800741c <_printf_float+0x23c>
 800752a:	2301      	movs	r3, #1
 800752c:	465a      	mov	r2, fp
 800752e:	4631      	mov	r1, r6
 8007530:	4628      	mov	r0, r5
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	f43f aeae 	beq.w	8007296 <_printf_float+0xb6>
 800753a:	f108 0801 	add.w	r8, r8, #1
 800753e:	e7ec      	b.n	800751a <_printf_float+0x33a>
 8007540:	4642      	mov	r2, r8
 8007542:	4631      	mov	r1, r6
 8007544:	4628      	mov	r0, r5
 8007546:	47b8      	blx	r7
 8007548:	3001      	adds	r0, #1
 800754a:	d1c2      	bne.n	80074d2 <_printf_float+0x2f2>
 800754c:	e6a3      	b.n	8007296 <_printf_float+0xb6>
 800754e:	2301      	movs	r3, #1
 8007550:	4631      	mov	r1, r6
 8007552:	4628      	mov	r0, r5
 8007554:	9206      	str	r2, [sp, #24]
 8007556:	47b8      	blx	r7
 8007558:	3001      	adds	r0, #1
 800755a:	f43f ae9c 	beq.w	8007296 <_printf_float+0xb6>
 800755e:	9a06      	ldr	r2, [sp, #24]
 8007560:	f10b 0b01 	add.w	fp, fp, #1
 8007564:	e7bb      	b.n	80074de <_printf_float+0x2fe>
 8007566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800756a:	4631      	mov	r1, r6
 800756c:	4628      	mov	r0, r5
 800756e:	47b8      	blx	r7
 8007570:	3001      	adds	r0, #1
 8007572:	d1c0      	bne.n	80074f6 <_printf_float+0x316>
 8007574:	e68f      	b.n	8007296 <_printf_float+0xb6>
 8007576:	9a06      	ldr	r2, [sp, #24]
 8007578:	464b      	mov	r3, r9
 800757a:	4442      	add	r2, r8
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	d1c3      	bne.n	800750e <_printf_float+0x32e>
 8007586:	e686      	b.n	8007296 <_printf_float+0xb6>
 8007588:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800758c:	f1ba 0f01 	cmp.w	sl, #1
 8007590:	dc01      	bgt.n	8007596 <_printf_float+0x3b6>
 8007592:	07db      	lsls	r3, r3, #31
 8007594:	d536      	bpl.n	8007604 <_printf_float+0x424>
 8007596:	2301      	movs	r3, #1
 8007598:	4642      	mov	r2, r8
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	f43f ae78 	beq.w	8007296 <_printf_float+0xb6>
 80075a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075aa:	4631      	mov	r1, r6
 80075ac:	4628      	mov	r0, r5
 80075ae:	47b8      	blx	r7
 80075b0:	3001      	adds	r0, #1
 80075b2:	f43f ae70 	beq.w	8007296 <_printf_float+0xb6>
 80075b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075ba:	2200      	movs	r2, #0
 80075bc:	2300      	movs	r3, #0
 80075be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075c2:	f7f9 fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80075c6:	b9c0      	cbnz	r0, 80075fa <_printf_float+0x41a>
 80075c8:	4653      	mov	r3, sl
 80075ca:	f108 0201 	add.w	r2, r8, #1
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	d10c      	bne.n	80075f2 <_printf_float+0x412>
 80075d8:	e65d      	b.n	8007296 <_printf_float+0xb6>
 80075da:	2301      	movs	r3, #1
 80075dc:	465a      	mov	r2, fp
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	f43f ae56 	beq.w	8007296 <_printf_float+0xb6>
 80075ea:	f108 0801 	add.w	r8, r8, #1
 80075ee:	45d0      	cmp	r8, sl
 80075f0:	dbf3      	blt.n	80075da <_printf_float+0x3fa>
 80075f2:	464b      	mov	r3, r9
 80075f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80075f8:	e6df      	b.n	80073ba <_printf_float+0x1da>
 80075fa:	f04f 0800 	mov.w	r8, #0
 80075fe:	f104 0b1a 	add.w	fp, r4, #26
 8007602:	e7f4      	b.n	80075ee <_printf_float+0x40e>
 8007604:	2301      	movs	r3, #1
 8007606:	4642      	mov	r2, r8
 8007608:	e7e1      	b.n	80075ce <_printf_float+0x3ee>
 800760a:	2301      	movs	r3, #1
 800760c:	464a      	mov	r2, r9
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	f43f ae3e 	beq.w	8007296 <_printf_float+0xb6>
 800761a:	f108 0801 	add.w	r8, r8, #1
 800761e:	68e3      	ldr	r3, [r4, #12]
 8007620:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007622:	1a5b      	subs	r3, r3, r1
 8007624:	4543      	cmp	r3, r8
 8007626:	dcf0      	bgt.n	800760a <_printf_float+0x42a>
 8007628:	e6fc      	b.n	8007424 <_printf_float+0x244>
 800762a:	f04f 0800 	mov.w	r8, #0
 800762e:	f104 0919 	add.w	r9, r4, #25
 8007632:	e7f4      	b.n	800761e <_printf_float+0x43e>

08007634 <_printf_common>:
 8007634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007638:	4616      	mov	r6, r2
 800763a:	4698      	mov	r8, r3
 800763c:	688a      	ldr	r2, [r1, #8]
 800763e:	690b      	ldr	r3, [r1, #16]
 8007640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007644:	4293      	cmp	r3, r2
 8007646:	bfb8      	it	lt
 8007648:	4613      	movlt	r3, r2
 800764a:	6033      	str	r3, [r6, #0]
 800764c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007650:	4607      	mov	r7, r0
 8007652:	460c      	mov	r4, r1
 8007654:	b10a      	cbz	r2, 800765a <_printf_common+0x26>
 8007656:	3301      	adds	r3, #1
 8007658:	6033      	str	r3, [r6, #0]
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	0699      	lsls	r1, r3, #26
 800765e:	bf42      	ittt	mi
 8007660:	6833      	ldrmi	r3, [r6, #0]
 8007662:	3302      	addmi	r3, #2
 8007664:	6033      	strmi	r3, [r6, #0]
 8007666:	6825      	ldr	r5, [r4, #0]
 8007668:	f015 0506 	ands.w	r5, r5, #6
 800766c:	d106      	bne.n	800767c <_printf_common+0x48>
 800766e:	f104 0a19 	add.w	sl, r4, #25
 8007672:	68e3      	ldr	r3, [r4, #12]
 8007674:	6832      	ldr	r2, [r6, #0]
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	42ab      	cmp	r3, r5
 800767a:	dc26      	bgt.n	80076ca <_printf_common+0x96>
 800767c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007680:	6822      	ldr	r2, [r4, #0]
 8007682:	3b00      	subs	r3, #0
 8007684:	bf18      	it	ne
 8007686:	2301      	movne	r3, #1
 8007688:	0692      	lsls	r2, r2, #26
 800768a:	d42b      	bmi.n	80076e4 <_printf_common+0xb0>
 800768c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007690:	4641      	mov	r1, r8
 8007692:	4638      	mov	r0, r7
 8007694:	47c8      	blx	r9
 8007696:	3001      	adds	r0, #1
 8007698:	d01e      	beq.n	80076d8 <_printf_common+0xa4>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	6922      	ldr	r2, [r4, #16]
 800769e:	f003 0306 	and.w	r3, r3, #6
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	bf02      	ittt	eq
 80076a6:	68e5      	ldreq	r5, [r4, #12]
 80076a8:	6833      	ldreq	r3, [r6, #0]
 80076aa:	1aed      	subeq	r5, r5, r3
 80076ac:	68a3      	ldr	r3, [r4, #8]
 80076ae:	bf0c      	ite	eq
 80076b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076b4:	2500      	movne	r5, #0
 80076b6:	4293      	cmp	r3, r2
 80076b8:	bfc4      	itt	gt
 80076ba:	1a9b      	subgt	r3, r3, r2
 80076bc:	18ed      	addgt	r5, r5, r3
 80076be:	2600      	movs	r6, #0
 80076c0:	341a      	adds	r4, #26
 80076c2:	42b5      	cmp	r5, r6
 80076c4:	d11a      	bne.n	80076fc <_printf_common+0xc8>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e008      	b.n	80076dc <_printf_common+0xa8>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4652      	mov	r2, sl
 80076ce:	4641      	mov	r1, r8
 80076d0:	4638      	mov	r0, r7
 80076d2:	47c8      	blx	r9
 80076d4:	3001      	adds	r0, #1
 80076d6:	d103      	bne.n	80076e0 <_printf_common+0xac>
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295
 80076dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e0:	3501      	adds	r5, #1
 80076e2:	e7c6      	b.n	8007672 <_printf_common+0x3e>
 80076e4:	18e1      	adds	r1, r4, r3
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	2030      	movs	r0, #48	@ 0x30
 80076ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076ee:	4422      	add	r2, r4
 80076f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076f8:	3302      	adds	r3, #2
 80076fa:	e7c7      	b.n	800768c <_printf_common+0x58>
 80076fc:	2301      	movs	r3, #1
 80076fe:	4622      	mov	r2, r4
 8007700:	4641      	mov	r1, r8
 8007702:	4638      	mov	r0, r7
 8007704:	47c8      	blx	r9
 8007706:	3001      	adds	r0, #1
 8007708:	d0e6      	beq.n	80076d8 <_printf_common+0xa4>
 800770a:	3601      	adds	r6, #1
 800770c:	e7d9      	b.n	80076c2 <_printf_common+0x8e>
	...

08007710 <_printf_i>:
 8007710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	7e0f      	ldrb	r7, [r1, #24]
 8007716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007718:	2f78      	cmp	r7, #120	@ 0x78
 800771a:	4691      	mov	r9, r2
 800771c:	4680      	mov	r8, r0
 800771e:	460c      	mov	r4, r1
 8007720:	469a      	mov	sl, r3
 8007722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007726:	d807      	bhi.n	8007738 <_printf_i+0x28>
 8007728:	2f62      	cmp	r7, #98	@ 0x62
 800772a:	d80a      	bhi.n	8007742 <_printf_i+0x32>
 800772c:	2f00      	cmp	r7, #0
 800772e:	f000 80d2 	beq.w	80078d6 <_printf_i+0x1c6>
 8007732:	2f58      	cmp	r7, #88	@ 0x58
 8007734:	f000 80b9 	beq.w	80078aa <_printf_i+0x19a>
 8007738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800773c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007740:	e03a      	b.n	80077b8 <_printf_i+0xa8>
 8007742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007746:	2b15      	cmp	r3, #21
 8007748:	d8f6      	bhi.n	8007738 <_printf_i+0x28>
 800774a:	a101      	add	r1, pc, #4	@ (adr r1, 8007750 <_printf_i+0x40>)
 800774c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007750:	080077a9 	.word	0x080077a9
 8007754:	080077bd 	.word	0x080077bd
 8007758:	08007739 	.word	0x08007739
 800775c:	08007739 	.word	0x08007739
 8007760:	08007739 	.word	0x08007739
 8007764:	08007739 	.word	0x08007739
 8007768:	080077bd 	.word	0x080077bd
 800776c:	08007739 	.word	0x08007739
 8007770:	08007739 	.word	0x08007739
 8007774:	08007739 	.word	0x08007739
 8007778:	08007739 	.word	0x08007739
 800777c:	080078bd 	.word	0x080078bd
 8007780:	080077e7 	.word	0x080077e7
 8007784:	08007877 	.word	0x08007877
 8007788:	08007739 	.word	0x08007739
 800778c:	08007739 	.word	0x08007739
 8007790:	080078df 	.word	0x080078df
 8007794:	08007739 	.word	0x08007739
 8007798:	080077e7 	.word	0x080077e7
 800779c:	08007739 	.word	0x08007739
 80077a0:	08007739 	.word	0x08007739
 80077a4:	0800787f 	.word	0x0800787f
 80077a8:	6833      	ldr	r3, [r6, #0]
 80077aa:	1d1a      	adds	r2, r3, #4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6032      	str	r2, [r6, #0]
 80077b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077b8:	2301      	movs	r3, #1
 80077ba:	e09d      	b.n	80078f8 <_printf_i+0x1e8>
 80077bc:	6833      	ldr	r3, [r6, #0]
 80077be:	6820      	ldr	r0, [r4, #0]
 80077c0:	1d19      	adds	r1, r3, #4
 80077c2:	6031      	str	r1, [r6, #0]
 80077c4:	0606      	lsls	r6, r0, #24
 80077c6:	d501      	bpl.n	80077cc <_printf_i+0xbc>
 80077c8:	681d      	ldr	r5, [r3, #0]
 80077ca:	e003      	b.n	80077d4 <_printf_i+0xc4>
 80077cc:	0645      	lsls	r5, r0, #25
 80077ce:	d5fb      	bpl.n	80077c8 <_printf_i+0xb8>
 80077d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077d4:	2d00      	cmp	r5, #0
 80077d6:	da03      	bge.n	80077e0 <_printf_i+0xd0>
 80077d8:	232d      	movs	r3, #45	@ 0x2d
 80077da:	426d      	negs	r5, r5
 80077dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077e0:	4859      	ldr	r0, [pc, #356]	@ (8007948 <_printf_i+0x238>)
 80077e2:	230a      	movs	r3, #10
 80077e4:	e011      	b.n	800780a <_printf_i+0xfa>
 80077e6:	6821      	ldr	r1, [r4, #0]
 80077e8:	6833      	ldr	r3, [r6, #0]
 80077ea:	0608      	lsls	r0, r1, #24
 80077ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80077f0:	d402      	bmi.n	80077f8 <_printf_i+0xe8>
 80077f2:	0649      	lsls	r1, r1, #25
 80077f4:	bf48      	it	mi
 80077f6:	b2ad      	uxthmi	r5, r5
 80077f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80077fa:	4853      	ldr	r0, [pc, #332]	@ (8007948 <_printf_i+0x238>)
 80077fc:	6033      	str	r3, [r6, #0]
 80077fe:	bf14      	ite	ne
 8007800:	230a      	movne	r3, #10
 8007802:	2308      	moveq	r3, #8
 8007804:	2100      	movs	r1, #0
 8007806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800780a:	6866      	ldr	r6, [r4, #4]
 800780c:	60a6      	str	r6, [r4, #8]
 800780e:	2e00      	cmp	r6, #0
 8007810:	bfa2      	ittt	ge
 8007812:	6821      	ldrge	r1, [r4, #0]
 8007814:	f021 0104 	bicge.w	r1, r1, #4
 8007818:	6021      	strge	r1, [r4, #0]
 800781a:	b90d      	cbnz	r5, 8007820 <_printf_i+0x110>
 800781c:	2e00      	cmp	r6, #0
 800781e:	d04b      	beq.n	80078b8 <_printf_i+0x1a8>
 8007820:	4616      	mov	r6, r2
 8007822:	fbb5 f1f3 	udiv	r1, r5, r3
 8007826:	fb03 5711 	mls	r7, r3, r1, r5
 800782a:	5dc7      	ldrb	r7, [r0, r7]
 800782c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007830:	462f      	mov	r7, r5
 8007832:	42bb      	cmp	r3, r7
 8007834:	460d      	mov	r5, r1
 8007836:	d9f4      	bls.n	8007822 <_printf_i+0x112>
 8007838:	2b08      	cmp	r3, #8
 800783a:	d10b      	bne.n	8007854 <_printf_i+0x144>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	07df      	lsls	r7, r3, #31
 8007840:	d508      	bpl.n	8007854 <_printf_i+0x144>
 8007842:	6923      	ldr	r3, [r4, #16]
 8007844:	6861      	ldr	r1, [r4, #4]
 8007846:	4299      	cmp	r1, r3
 8007848:	bfde      	ittt	le
 800784a:	2330      	movle	r3, #48	@ 0x30
 800784c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007850:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007854:	1b92      	subs	r2, r2, r6
 8007856:	6122      	str	r2, [r4, #16]
 8007858:	f8cd a000 	str.w	sl, [sp]
 800785c:	464b      	mov	r3, r9
 800785e:	aa03      	add	r2, sp, #12
 8007860:	4621      	mov	r1, r4
 8007862:	4640      	mov	r0, r8
 8007864:	f7ff fee6 	bl	8007634 <_printf_common>
 8007868:	3001      	adds	r0, #1
 800786a:	d14a      	bne.n	8007902 <_printf_i+0x1f2>
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	b004      	add	sp, #16
 8007872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	f043 0320 	orr.w	r3, r3, #32
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	4833      	ldr	r0, [pc, #204]	@ (800794c <_printf_i+0x23c>)
 8007880:	2778      	movs	r7, #120	@ 0x78
 8007882:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	6831      	ldr	r1, [r6, #0]
 800788a:	061f      	lsls	r7, r3, #24
 800788c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007890:	d402      	bmi.n	8007898 <_printf_i+0x188>
 8007892:	065f      	lsls	r7, r3, #25
 8007894:	bf48      	it	mi
 8007896:	b2ad      	uxthmi	r5, r5
 8007898:	6031      	str	r1, [r6, #0]
 800789a:	07d9      	lsls	r1, r3, #31
 800789c:	bf44      	itt	mi
 800789e:	f043 0320 	orrmi.w	r3, r3, #32
 80078a2:	6023      	strmi	r3, [r4, #0]
 80078a4:	b11d      	cbz	r5, 80078ae <_printf_i+0x19e>
 80078a6:	2310      	movs	r3, #16
 80078a8:	e7ac      	b.n	8007804 <_printf_i+0xf4>
 80078aa:	4827      	ldr	r0, [pc, #156]	@ (8007948 <_printf_i+0x238>)
 80078ac:	e7e9      	b.n	8007882 <_printf_i+0x172>
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	f023 0320 	bic.w	r3, r3, #32
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	e7f6      	b.n	80078a6 <_printf_i+0x196>
 80078b8:	4616      	mov	r6, r2
 80078ba:	e7bd      	b.n	8007838 <_printf_i+0x128>
 80078bc:	6833      	ldr	r3, [r6, #0]
 80078be:	6825      	ldr	r5, [r4, #0]
 80078c0:	6961      	ldr	r1, [r4, #20]
 80078c2:	1d18      	adds	r0, r3, #4
 80078c4:	6030      	str	r0, [r6, #0]
 80078c6:	062e      	lsls	r6, r5, #24
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	d501      	bpl.n	80078d0 <_printf_i+0x1c0>
 80078cc:	6019      	str	r1, [r3, #0]
 80078ce:	e002      	b.n	80078d6 <_printf_i+0x1c6>
 80078d0:	0668      	lsls	r0, r5, #25
 80078d2:	d5fb      	bpl.n	80078cc <_printf_i+0x1bc>
 80078d4:	8019      	strh	r1, [r3, #0]
 80078d6:	2300      	movs	r3, #0
 80078d8:	6123      	str	r3, [r4, #16]
 80078da:	4616      	mov	r6, r2
 80078dc:	e7bc      	b.n	8007858 <_printf_i+0x148>
 80078de:	6833      	ldr	r3, [r6, #0]
 80078e0:	1d1a      	adds	r2, r3, #4
 80078e2:	6032      	str	r2, [r6, #0]
 80078e4:	681e      	ldr	r6, [r3, #0]
 80078e6:	6862      	ldr	r2, [r4, #4]
 80078e8:	2100      	movs	r1, #0
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7f8 fc70 	bl	80001d0 <memchr>
 80078f0:	b108      	cbz	r0, 80078f6 <_printf_i+0x1e6>
 80078f2:	1b80      	subs	r0, r0, r6
 80078f4:	6060      	str	r0, [r4, #4]
 80078f6:	6863      	ldr	r3, [r4, #4]
 80078f8:	6123      	str	r3, [r4, #16]
 80078fa:	2300      	movs	r3, #0
 80078fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007900:	e7aa      	b.n	8007858 <_printf_i+0x148>
 8007902:	6923      	ldr	r3, [r4, #16]
 8007904:	4632      	mov	r2, r6
 8007906:	4649      	mov	r1, r9
 8007908:	4640      	mov	r0, r8
 800790a:	47d0      	blx	sl
 800790c:	3001      	adds	r0, #1
 800790e:	d0ad      	beq.n	800786c <_printf_i+0x15c>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	079b      	lsls	r3, r3, #30
 8007914:	d413      	bmi.n	800793e <_printf_i+0x22e>
 8007916:	68e0      	ldr	r0, [r4, #12]
 8007918:	9b03      	ldr	r3, [sp, #12]
 800791a:	4298      	cmp	r0, r3
 800791c:	bfb8      	it	lt
 800791e:	4618      	movlt	r0, r3
 8007920:	e7a6      	b.n	8007870 <_printf_i+0x160>
 8007922:	2301      	movs	r3, #1
 8007924:	4632      	mov	r2, r6
 8007926:	4649      	mov	r1, r9
 8007928:	4640      	mov	r0, r8
 800792a:	47d0      	blx	sl
 800792c:	3001      	adds	r0, #1
 800792e:	d09d      	beq.n	800786c <_printf_i+0x15c>
 8007930:	3501      	adds	r5, #1
 8007932:	68e3      	ldr	r3, [r4, #12]
 8007934:	9903      	ldr	r1, [sp, #12]
 8007936:	1a5b      	subs	r3, r3, r1
 8007938:	42ab      	cmp	r3, r5
 800793a:	dcf2      	bgt.n	8007922 <_printf_i+0x212>
 800793c:	e7eb      	b.n	8007916 <_printf_i+0x206>
 800793e:	2500      	movs	r5, #0
 8007940:	f104 0619 	add.w	r6, r4, #25
 8007944:	e7f5      	b.n	8007932 <_printf_i+0x222>
 8007946:	bf00      	nop
 8007948:	0800b8d2 	.word	0x0800b8d2
 800794c:	0800b8e3 	.word	0x0800b8e3

08007950 <std>:
 8007950:	2300      	movs	r3, #0
 8007952:	b510      	push	{r4, lr}
 8007954:	4604      	mov	r4, r0
 8007956:	e9c0 3300 	strd	r3, r3, [r0]
 800795a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800795e:	6083      	str	r3, [r0, #8]
 8007960:	8181      	strh	r1, [r0, #12]
 8007962:	6643      	str	r3, [r0, #100]	@ 0x64
 8007964:	81c2      	strh	r2, [r0, #14]
 8007966:	6183      	str	r3, [r0, #24]
 8007968:	4619      	mov	r1, r3
 800796a:	2208      	movs	r2, #8
 800796c:	305c      	adds	r0, #92	@ 0x5c
 800796e:	f000 f942 	bl	8007bf6 <memset>
 8007972:	4b0d      	ldr	r3, [pc, #52]	@ (80079a8 <std+0x58>)
 8007974:	6263      	str	r3, [r4, #36]	@ 0x24
 8007976:	4b0d      	ldr	r3, [pc, #52]	@ (80079ac <std+0x5c>)
 8007978:	62a3      	str	r3, [r4, #40]	@ 0x28
 800797a:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <std+0x60>)
 800797c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800797e:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <std+0x64>)
 8007980:	6323      	str	r3, [r4, #48]	@ 0x30
 8007982:	4b0d      	ldr	r3, [pc, #52]	@ (80079b8 <std+0x68>)
 8007984:	6224      	str	r4, [r4, #32]
 8007986:	429c      	cmp	r4, r3
 8007988:	d006      	beq.n	8007998 <std+0x48>
 800798a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800798e:	4294      	cmp	r4, r2
 8007990:	d002      	beq.n	8007998 <std+0x48>
 8007992:	33d0      	adds	r3, #208	@ 0xd0
 8007994:	429c      	cmp	r4, r3
 8007996:	d105      	bne.n	80079a4 <std+0x54>
 8007998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800799c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a0:	f000 b9a6 	b.w	8007cf0 <__retarget_lock_init_recursive>
 80079a4:	bd10      	pop	{r4, pc}
 80079a6:	bf00      	nop
 80079a8:	08007b3d 	.word	0x08007b3d
 80079ac:	08007b5f 	.word	0x08007b5f
 80079b0:	08007b97 	.word	0x08007b97
 80079b4:	08007bbb 	.word	0x08007bbb
 80079b8:	200011e4 	.word	0x200011e4

080079bc <stdio_exit_handler>:
 80079bc:	4a02      	ldr	r2, [pc, #8]	@ (80079c8 <stdio_exit_handler+0xc>)
 80079be:	4903      	ldr	r1, [pc, #12]	@ (80079cc <stdio_exit_handler+0x10>)
 80079c0:	4803      	ldr	r0, [pc, #12]	@ (80079d0 <stdio_exit_handler+0x14>)
 80079c2:	f000 b869 	b.w	8007a98 <_fwalk_sglue>
 80079c6:	bf00      	nop
 80079c8:	20000034 	.word	0x20000034
 80079cc:	0800966d 	.word	0x0800966d
 80079d0:	20000044 	.word	0x20000044

080079d4 <cleanup_stdio>:
 80079d4:	6841      	ldr	r1, [r0, #4]
 80079d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a08 <cleanup_stdio+0x34>)
 80079d8:	4299      	cmp	r1, r3
 80079da:	b510      	push	{r4, lr}
 80079dc:	4604      	mov	r4, r0
 80079de:	d001      	beq.n	80079e4 <cleanup_stdio+0x10>
 80079e0:	f001 fe44 	bl	800966c <_fflush_r>
 80079e4:	68a1      	ldr	r1, [r4, #8]
 80079e6:	4b09      	ldr	r3, [pc, #36]	@ (8007a0c <cleanup_stdio+0x38>)
 80079e8:	4299      	cmp	r1, r3
 80079ea:	d002      	beq.n	80079f2 <cleanup_stdio+0x1e>
 80079ec:	4620      	mov	r0, r4
 80079ee:	f001 fe3d 	bl	800966c <_fflush_r>
 80079f2:	68e1      	ldr	r1, [r4, #12]
 80079f4:	4b06      	ldr	r3, [pc, #24]	@ (8007a10 <cleanup_stdio+0x3c>)
 80079f6:	4299      	cmp	r1, r3
 80079f8:	d004      	beq.n	8007a04 <cleanup_stdio+0x30>
 80079fa:	4620      	mov	r0, r4
 80079fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a00:	f001 be34 	b.w	800966c <_fflush_r>
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	bf00      	nop
 8007a08:	200011e4 	.word	0x200011e4
 8007a0c:	2000124c 	.word	0x2000124c
 8007a10:	200012b4 	.word	0x200012b4

08007a14 <global_stdio_init.part.0>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	4b0b      	ldr	r3, [pc, #44]	@ (8007a44 <global_stdio_init.part.0+0x30>)
 8007a18:	4c0b      	ldr	r4, [pc, #44]	@ (8007a48 <global_stdio_init.part.0+0x34>)
 8007a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a4c <global_stdio_init.part.0+0x38>)
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	2200      	movs	r2, #0
 8007a22:	2104      	movs	r1, #4
 8007a24:	f7ff ff94 	bl	8007950 <std>
 8007a28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	2109      	movs	r1, #9
 8007a30:	f7ff ff8e 	bl	8007950 <std>
 8007a34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a38:	2202      	movs	r2, #2
 8007a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a3e:	2112      	movs	r1, #18
 8007a40:	f7ff bf86 	b.w	8007950 <std>
 8007a44:	2000131c 	.word	0x2000131c
 8007a48:	200011e4 	.word	0x200011e4
 8007a4c:	080079bd 	.word	0x080079bd

08007a50 <__sfp_lock_acquire>:
 8007a50:	4801      	ldr	r0, [pc, #4]	@ (8007a58 <__sfp_lock_acquire+0x8>)
 8007a52:	f000 b94e 	b.w	8007cf2 <__retarget_lock_acquire_recursive>
 8007a56:	bf00      	nop
 8007a58:	20001325 	.word	0x20001325

08007a5c <__sfp_lock_release>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	@ (8007a64 <__sfp_lock_release+0x8>)
 8007a5e:	f000 b949 	b.w	8007cf4 <__retarget_lock_release_recursive>
 8007a62:	bf00      	nop
 8007a64:	20001325 	.word	0x20001325

08007a68 <__sinit>:
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	f7ff fff0 	bl	8007a50 <__sfp_lock_acquire>
 8007a70:	6a23      	ldr	r3, [r4, #32]
 8007a72:	b11b      	cbz	r3, 8007a7c <__sinit+0x14>
 8007a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a78:	f7ff bff0 	b.w	8007a5c <__sfp_lock_release>
 8007a7c:	4b04      	ldr	r3, [pc, #16]	@ (8007a90 <__sinit+0x28>)
 8007a7e:	6223      	str	r3, [r4, #32]
 8007a80:	4b04      	ldr	r3, [pc, #16]	@ (8007a94 <__sinit+0x2c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f5      	bne.n	8007a74 <__sinit+0xc>
 8007a88:	f7ff ffc4 	bl	8007a14 <global_stdio_init.part.0>
 8007a8c:	e7f2      	b.n	8007a74 <__sinit+0xc>
 8007a8e:	bf00      	nop
 8007a90:	080079d5 	.word	0x080079d5
 8007a94:	2000131c 	.word	0x2000131c

08007a98 <_fwalk_sglue>:
 8007a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	4688      	mov	r8, r1
 8007aa0:	4614      	mov	r4, r2
 8007aa2:	2600      	movs	r6, #0
 8007aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8007aac:	d505      	bpl.n	8007aba <_fwalk_sglue+0x22>
 8007aae:	6824      	ldr	r4, [r4, #0]
 8007ab0:	2c00      	cmp	r4, #0
 8007ab2:	d1f7      	bne.n	8007aa4 <_fwalk_sglue+0xc>
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aba:	89ab      	ldrh	r3, [r5, #12]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d907      	bls.n	8007ad0 <_fwalk_sglue+0x38>
 8007ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	d003      	beq.n	8007ad0 <_fwalk_sglue+0x38>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4638      	mov	r0, r7
 8007acc:	47c0      	blx	r8
 8007ace:	4306      	orrs	r6, r0
 8007ad0:	3568      	adds	r5, #104	@ 0x68
 8007ad2:	e7e9      	b.n	8007aa8 <_fwalk_sglue+0x10>

08007ad4 <sniprintf>:
 8007ad4:	b40c      	push	{r2, r3}
 8007ad6:	b530      	push	{r4, r5, lr}
 8007ad8:	4b17      	ldr	r3, [pc, #92]	@ (8007b38 <sniprintf+0x64>)
 8007ada:	1e0c      	subs	r4, r1, #0
 8007adc:	681d      	ldr	r5, [r3, #0]
 8007ade:	b09d      	sub	sp, #116	@ 0x74
 8007ae0:	da08      	bge.n	8007af4 <sniprintf+0x20>
 8007ae2:	238b      	movs	r3, #139	@ 0x8b
 8007ae4:	602b      	str	r3, [r5, #0]
 8007ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aea:	b01d      	add	sp, #116	@ 0x74
 8007aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af0:	b002      	add	sp, #8
 8007af2:	4770      	bx	lr
 8007af4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007af8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007afc:	bf14      	ite	ne
 8007afe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b02:	4623      	moveq	r3, r4
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b0c:	9002      	str	r0, [sp, #8]
 8007b0e:	9006      	str	r0, [sp, #24]
 8007b10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b16:	ab21      	add	r3, sp, #132	@ 0x84
 8007b18:	a902      	add	r1, sp, #8
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	f001 fc25 	bl	800936c <_svfiprintf_r>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	bfbc      	itt	lt
 8007b26:	238b      	movlt	r3, #139	@ 0x8b
 8007b28:	602b      	strlt	r3, [r5, #0]
 8007b2a:	2c00      	cmp	r4, #0
 8007b2c:	d0dd      	beq.n	8007aea <sniprintf+0x16>
 8007b2e:	9b02      	ldr	r3, [sp, #8]
 8007b30:	2200      	movs	r2, #0
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	e7d9      	b.n	8007aea <sniprintf+0x16>
 8007b36:	bf00      	nop
 8007b38:	20000040 	.word	0x20000040

08007b3c <__sread>:
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	460c      	mov	r4, r1
 8007b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b44:	f000 f886 	bl	8007c54 <_read_r>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	bfab      	itete	ge
 8007b4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b50:	181b      	addge	r3, r3, r0
 8007b52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b56:	bfac      	ite	ge
 8007b58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b5a:	81a3      	strhlt	r3, [r4, #12]
 8007b5c:	bd10      	pop	{r4, pc}

08007b5e <__swrite>:
 8007b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	461f      	mov	r7, r3
 8007b64:	898b      	ldrh	r3, [r1, #12]
 8007b66:	05db      	lsls	r3, r3, #23
 8007b68:	4605      	mov	r5, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	4616      	mov	r6, r2
 8007b6e:	d505      	bpl.n	8007b7c <__swrite+0x1e>
 8007b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b74:	2302      	movs	r3, #2
 8007b76:	2200      	movs	r2, #0
 8007b78:	f000 f85a 	bl	8007c30 <_lseek_r>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	4632      	mov	r2, r6
 8007b8a:	463b      	mov	r3, r7
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b92:	f000 b871 	b.w	8007c78 <_write_r>

08007b96 <__sseek>:
 8007b96:	b510      	push	{r4, lr}
 8007b98:	460c      	mov	r4, r1
 8007b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9e:	f000 f847 	bl	8007c30 <_lseek_r>
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	bf15      	itete	ne
 8007ba8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007baa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bb2:	81a3      	strheq	r3, [r4, #12]
 8007bb4:	bf18      	it	ne
 8007bb6:	81a3      	strhne	r3, [r4, #12]
 8007bb8:	bd10      	pop	{r4, pc}

08007bba <__sclose>:
 8007bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bbe:	f000 b827 	b.w	8007c10 <_close_r>

08007bc2 <memmove>:
 8007bc2:	4288      	cmp	r0, r1
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	eb01 0402 	add.w	r4, r1, r2
 8007bca:	d902      	bls.n	8007bd2 <memmove+0x10>
 8007bcc:	4284      	cmp	r4, r0
 8007bce:	4623      	mov	r3, r4
 8007bd0:	d807      	bhi.n	8007be2 <memmove+0x20>
 8007bd2:	1e43      	subs	r3, r0, #1
 8007bd4:	42a1      	cmp	r1, r4
 8007bd6:	d008      	beq.n	8007bea <memmove+0x28>
 8007bd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bdc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007be0:	e7f8      	b.n	8007bd4 <memmove+0x12>
 8007be2:	4402      	add	r2, r0
 8007be4:	4601      	mov	r1, r0
 8007be6:	428a      	cmp	r2, r1
 8007be8:	d100      	bne.n	8007bec <memmove+0x2a>
 8007bea:	bd10      	pop	{r4, pc}
 8007bec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bf0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bf4:	e7f7      	b.n	8007be6 <memmove+0x24>

08007bf6 <memset>:
 8007bf6:	4402      	add	r2, r0
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d100      	bne.n	8007c00 <memset+0xa>
 8007bfe:	4770      	bx	lr
 8007c00:	f803 1b01 	strb.w	r1, [r3], #1
 8007c04:	e7f9      	b.n	8007bfa <memset+0x4>
	...

08007c08 <_localeconv_r>:
 8007c08:	4800      	ldr	r0, [pc, #0]	@ (8007c0c <_localeconv_r+0x4>)
 8007c0a:	4770      	bx	lr
 8007c0c:	20000180 	.word	0x20000180

08007c10 <_close_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d06      	ldr	r5, [pc, #24]	@ (8007c2c <_close_r+0x1c>)
 8007c14:	2300      	movs	r3, #0
 8007c16:	4604      	mov	r4, r0
 8007c18:	4608      	mov	r0, r1
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	f7fa fa04 	bl	8002028 <_close>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_close_r+0x1a>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_close_r+0x1a>
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	20001320 	.word	0x20001320

08007c30 <_lseek_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d07      	ldr	r5, [pc, #28]	@ (8007c50 <_lseek_r+0x20>)
 8007c34:	4604      	mov	r4, r0
 8007c36:	4608      	mov	r0, r1
 8007c38:	4611      	mov	r1, r2
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	602a      	str	r2, [r5, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f7fa fa19 	bl	8002076 <_lseek>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_lseek_r+0x1e>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_lseek_r+0x1e>
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	20001320 	.word	0x20001320

08007c54 <_read_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d07      	ldr	r5, [pc, #28]	@ (8007c74 <_read_r+0x20>)
 8007c58:	4604      	mov	r4, r0
 8007c5a:	4608      	mov	r0, r1
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	602a      	str	r2, [r5, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	f7fa f9a7 	bl	8001fb6 <_read>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_read_r+0x1e>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_read_r+0x1e>
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	20001320 	.word	0x20001320

08007c78 <_write_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d07      	ldr	r5, [pc, #28]	@ (8007c98 <_write_r+0x20>)
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	4608      	mov	r0, r1
 8007c80:	4611      	mov	r1, r2
 8007c82:	2200      	movs	r2, #0
 8007c84:	602a      	str	r2, [r5, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f7fa f9b2 	bl	8001ff0 <_write>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_write_r+0x1e>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_write_r+0x1e>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	20001320 	.word	0x20001320

08007c9c <__errno>:
 8007c9c:	4b01      	ldr	r3, [pc, #4]	@ (8007ca4 <__errno+0x8>)
 8007c9e:	6818      	ldr	r0, [r3, #0]
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20000040 	.word	0x20000040

08007ca8 <__libc_init_array>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	4d0d      	ldr	r5, [pc, #52]	@ (8007ce0 <__libc_init_array+0x38>)
 8007cac:	4c0d      	ldr	r4, [pc, #52]	@ (8007ce4 <__libc_init_array+0x3c>)
 8007cae:	1b64      	subs	r4, r4, r5
 8007cb0:	10a4      	asrs	r4, r4, #2
 8007cb2:	2600      	movs	r6, #0
 8007cb4:	42a6      	cmp	r6, r4
 8007cb6:	d109      	bne.n	8007ccc <__libc_init_array+0x24>
 8007cb8:	4d0b      	ldr	r5, [pc, #44]	@ (8007ce8 <__libc_init_array+0x40>)
 8007cba:	4c0c      	ldr	r4, [pc, #48]	@ (8007cec <__libc_init_array+0x44>)
 8007cbc:	f002 f84c 	bl	8009d58 <_init>
 8007cc0:	1b64      	subs	r4, r4, r5
 8007cc2:	10a4      	asrs	r4, r4, #2
 8007cc4:	2600      	movs	r6, #0
 8007cc6:	42a6      	cmp	r6, r4
 8007cc8:	d105      	bne.n	8007cd6 <__libc_init_array+0x2e>
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd0:	4798      	blx	r3
 8007cd2:	3601      	adds	r6, #1
 8007cd4:	e7ee      	b.n	8007cb4 <__libc_init_array+0xc>
 8007cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cda:	4798      	blx	r3
 8007cdc:	3601      	adds	r6, #1
 8007cde:	e7f2      	b.n	8007cc6 <__libc_init_array+0x1e>
 8007ce0:	0800bc38 	.word	0x0800bc38
 8007ce4:	0800bc38 	.word	0x0800bc38
 8007ce8:	0800bc38 	.word	0x0800bc38
 8007cec:	0800bc3c 	.word	0x0800bc3c

08007cf0 <__retarget_lock_init_recursive>:
 8007cf0:	4770      	bx	lr

08007cf2 <__retarget_lock_acquire_recursive>:
 8007cf2:	4770      	bx	lr

08007cf4 <__retarget_lock_release_recursive>:
 8007cf4:	4770      	bx	lr

08007cf6 <memcpy>:
 8007cf6:	440a      	add	r2, r1
 8007cf8:	4291      	cmp	r1, r2
 8007cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cfe:	d100      	bne.n	8007d02 <memcpy+0xc>
 8007d00:	4770      	bx	lr
 8007d02:	b510      	push	{r4, lr}
 8007d04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d0c:	4291      	cmp	r1, r2
 8007d0e:	d1f9      	bne.n	8007d04 <memcpy+0xe>
 8007d10:	bd10      	pop	{r4, pc}

08007d12 <quorem>:
 8007d12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d16:	6903      	ldr	r3, [r0, #16]
 8007d18:	690c      	ldr	r4, [r1, #16]
 8007d1a:	42a3      	cmp	r3, r4
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	db7e      	blt.n	8007e1e <quorem+0x10c>
 8007d20:	3c01      	subs	r4, #1
 8007d22:	f101 0814 	add.w	r8, r1, #20
 8007d26:	00a3      	lsls	r3, r4, #2
 8007d28:	f100 0514 	add.w	r5, r0, #20
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d44:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d48:	d32e      	bcc.n	8007da8 <quorem+0x96>
 8007d4a:	f04f 0a00 	mov.w	sl, #0
 8007d4e:	46c4      	mov	ip, r8
 8007d50:	46ae      	mov	lr, r5
 8007d52:	46d3      	mov	fp, sl
 8007d54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d58:	b298      	uxth	r0, r3
 8007d5a:	fb06 a000 	mla	r0, r6, r0, sl
 8007d5e:	0c02      	lsrs	r2, r0, #16
 8007d60:	0c1b      	lsrs	r3, r3, #16
 8007d62:	fb06 2303 	mla	r3, r6, r3, r2
 8007d66:	f8de 2000 	ldr.w	r2, [lr]
 8007d6a:	b280      	uxth	r0, r0
 8007d6c:	b292      	uxth	r2, r2
 8007d6e:	1a12      	subs	r2, r2, r0
 8007d70:	445a      	add	r2, fp
 8007d72:	f8de 0000 	ldr.w	r0, [lr]
 8007d76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d84:	b292      	uxth	r2, r2
 8007d86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d8a:	45e1      	cmp	r9, ip
 8007d8c:	f84e 2b04 	str.w	r2, [lr], #4
 8007d90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d94:	d2de      	bcs.n	8007d54 <quorem+0x42>
 8007d96:	9b00      	ldr	r3, [sp, #0]
 8007d98:	58eb      	ldr	r3, [r5, r3]
 8007d9a:	b92b      	cbnz	r3, 8007da8 <quorem+0x96>
 8007d9c:	9b01      	ldr	r3, [sp, #4]
 8007d9e:	3b04      	subs	r3, #4
 8007da0:	429d      	cmp	r5, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	d32f      	bcc.n	8007e06 <quorem+0xf4>
 8007da6:	613c      	str	r4, [r7, #16]
 8007da8:	4638      	mov	r0, r7
 8007daa:	f001 f97b 	bl	80090a4 <__mcmp>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	db25      	blt.n	8007dfe <quorem+0xec>
 8007db2:	4629      	mov	r1, r5
 8007db4:	2000      	movs	r0, #0
 8007db6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dba:	f8d1 c000 	ldr.w	ip, [r1]
 8007dbe:	fa1f fe82 	uxth.w	lr, r2
 8007dc2:	fa1f f38c 	uxth.w	r3, ip
 8007dc6:	eba3 030e 	sub.w	r3, r3, lr
 8007dca:	4403      	add	r3, r0
 8007dcc:	0c12      	lsrs	r2, r2, #16
 8007dce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007dd2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ddc:	45c1      	cmp	r9, r8
 8007dde:	f841 3b04 	str.w	r3, [r1], #4
 8007de2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007de6:	d2e6      	bcs.n	8007db6 <quorem+0xa4>
 8007de8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007df0:	b922      	cbnz	r2, 8007dfc <quorem+0xea>
 8007df2:	3b04      	subs	r3, #4
 8007df4:	429d      	cmp	r5, r3
 8007df6:	461a      	mov	r2, r3
 8007df8:	d30b      	bcc.n	8007e12 <quorem+0x100>
 8007dfa:	613c      	str	r4, [r7, #16]
 8007dfc:	3601      	adds	r6, #1
 8007dfe:	4630      	mov	r0, r6
 8007e00:	b003      	add	sp, #12
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	3b04      	subs	r3, #4
 8007e0a:	2a00      	cmp	r2, #0
 8007e0c:	d1cb      	bne.n	8007da6 <quorem+0x94>
 8007e0e:	3c01      	subs	r4, #1
 8007e10:	e7c6      	b.n	8007da0 <quorem+0x8e>
 8007e12:	6812      	ldr	r2, [r2, #0]
 8007e14:	3b04      	subs	r3, #4
 8007e16:	2a00      	cmp	r2, #0
 8007e18:	d1ef      	bne.n	8007dfa <quorem+0xe8>
 8007e1a:	3c01      	subs	r4, #1
 8007e1c:	e7ea      	b.n	8007df4 <quorem+0xe2>
 8007e1e:	2000      	movs	r0, #0
 8007e20:	e7ee      	b.n	8007e00 <quorem+0xee>
 8007e22:	0000      	movs	r0, r0
 8007e24:	0000      	movs	r0, r0
	...

08007e28 <_dtoa_r>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	69c7      	ldr	r7, [r0, #28]
 8007e2e:	b099      	sub	sp, #100	@ 0x64
 8007e30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e34:	ec55 4b10 	vmov	r4, r5, d0
 8007e38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007e3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e3c:	4683      	mov	fp, r0
 8007e3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e42:	b97f      	cbnz	r7, 8007e64 <_dtoa_r+0x3c>
 8007e44:	2010      	movs	r0, #16
 8007e46:	f000 fdfd 	bl	8008a44 <malloc>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007e50:	b920      	cbnz	r0, 8007e5c <_dtoa_r+0x34>
 8007e52:	4ba7      	ldr	r3, [pc, #668]	@ (80080f0 <_dtoa_r+0x2c8>)
 8007e54:	21ef      	movs	r1, #239	@ 0xef
 8007e56:	48a7      	ldr	r0, [pc, #668]	@ (80080f4 <_dtoa_r+0x2cc>)
 8007e58:	f001 fc40 	bl	80096dc <__assert_func>
 8007e5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e60:	6007      	str	r7, [r0, #0]
 8007e62:	60c7      	str	r7, [r0, #12]
 8007e64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e68:	6819      	ldr	r1, [r3, #0]
 8007e6a:	b159      	cbz	r1, 8007e84 <_dtoa_r+0x5c>
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	604a      	str	r2, [r1, #4]
 8007e70:	2301      	movs	r3, #1
 8007e72:	4093      	lsls	r3, r2
 8007e74:	608b      	str	r3, [r1, #8]
 8007e76:	4658      	mov	r0, fp
 8007e78:	f000 feda 	bl	8008c30 <_Bfree>
 8007e7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	1e2b      	subs	r3, r5, #0
 8007e86:	bfb9      	ittee	lt
 8007e88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e8c:	9303      	strlt	r3, [sp, #12]
 8007e8e:	2300      	movge	r3, #0
 8007e90:	6033      	strge	r3, [r6, #0]
 8007e92:	9f03      	ldr	r7, [sp, #12]
 8007e94:	4b98      	ldr	r3, [pc, #608]	@ (80080f8 <_dtoa_r+0x2d0>)
 8007e96:	bfbc      	itt	lt
 8007e98:	2201      	movlt	r2, #1
 8007e9a:	6032      	strlt	r2, [r6, #0]
 8007e9c:	43bb      	bics	r3, r7
 8007e9e:	d112      	bne.n	8007ec6 <_dtoa_r+0x9e>
 8007ea0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ea2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007eac:	4323      	orrs	r3, r4
 8007eae:	f000 854d 	beq.w	800894c <_dtoa_r+0xb24>
 8007eb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007eb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800810c <_dtoa_r+0x2e4>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 854f 	beq.w	800895c <_dtoa_r+0xb34>
 8007ebe:	f10a 0303 	add.w	r3, sl, #3
 8007ec2:	f000 bd49 	b.w	8008958 <_dtoa_r+0xb30>
 8007ec6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	ec51 0b17 	vmov	r0, r1, d7
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007ed6:	f7f8 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eda:	4680      	mov	r8, r0
 8007edc:	b158      	cbz	r0, 8007ef6 <_dtoa_r+0xce>
 8007ede:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ee6:	b113      	cbz	r3, 8007eee <_dtoa_r+0xc6>
 8007ee8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007eea:	4b84      	ldr	r3, [pc, #528]	@ (80080fc <_dtoa_r+0x2d4>)
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008110 <_dtoa_r+0x2e8>
 8007ef2:	f000 bd33 	b.w	800895c <_dtoa_r+0xb34>
 8007ef6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007efa:	aa16      	add	r2, sp, #88	@ 0x58
 8007efc:	a917      	add	r1, sp, #92	@ 0x5c
 8007efe:	4658      	mov	r0, fp
 8007f00:	f001 f980 	bl	8009204 <__d2b>
 8007f04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f08:	4681      	mov	r9, r0
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	d077      	beq.n	8007ffe <_dtoa_r+0x1d6>
 8007f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f28:	4619      	mov	r1, r3
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	4b74      	ldr	r3, [pc, #464]	@ (8008100 <_dtoa_r+0x2d8>)
 8007f2e:	f7f8 f9ab 	bl	8000288 <__aeabi_dsub>
 8007f32:	a369      	add	r3, pc, #420	@ (adr r3, 80080d8 <_dtoa_r+0x2b0>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 fb5e 	bl	80005f8 <__aeabi_dmul>
 8007f3c:	a368      	add	r3, pc, #416	@ (adr r3, 80080e0 <_dtoa_r+0x2b8>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f7f8 f9a3 	bl	800028c <__adddf3>
 8007f46:	4604      	mov	r4, r0
 8007f48:	4630      	mov	r0, r6
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	f7f8 faea 	bl	8000524 <__aeabi_i2d>
 8007f50:	a365      	add	r3, pc, #404	@ (adr r3, 80080e8 <_dtoa_r+0x2c0>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7f8 f993 	bl	800028c <__adddf3>
 8007f66:	4604      	mov	r4, r0
 8007f68:	460d      	mov	r5, r1
 8007f6a:	f7f8 fdf5 	bl	8000b58 <__aeabi_d2iz>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4607      	mov	r7, r0
 8007f72:	2300      	movs	r3, #0
 8007f74:	4620      	mov	r0, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7f8 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8007f7c:	b140      	cbz	r0, 8007f90 <_dtoa_r+0x168>
 8007f7e:	4638      	mov	r0, r7
 8007f80:	f7f8 fad0 	bl	8000524 <__aeabi_i2d>
 8007f84:	4622      	mov	r2, r4
 8007f86:	462b      	mov	r3, r5
 8007f88:	f7f8 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f8c:	b900      	cbnz	r0, 8007f90 <_dtoa_r+0x168>
 8007f8e:	3f01      	subs	r7, #1
 8007f90:	2f16      	cmp	r7, #22
 8007f92:	d851      	bhi.n	8008038 <_dtoa_r+0x210>
 8007f94:	4b5b      	ldr	r3, [pc, #364]	@ (8008104 <_dtoa_r+0x2dc>)
 8007f96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fa2:	f7f8 fd9b 	bl	8000adc <__aeabi_dcmplt>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d048      	beq.n	800803c <_dtoa_r+0x214>
 8007faa:	3f01      	subs	r7, #1
 8007fac:	2300      	movs	r3, #0
 8007fae:	9312      	str	r3, [sp, #72]	@ 0x48
 8007fb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fb2:	1b9b      	subs	r3, r3, r6
 8007fb4:	1e5a      	subs	r2, r3, #1
 8007fb6:	bf44      	itt	mi
 8007fb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007fbc:	2300      	movmi	r3, #0
 8007fbe:	9208      	str	r2, [sp, #32]
 8007fc0:	bf54      	ite	pl
 8007fc2:	f04f 0800 	movpl.w	r8, #0
 8007fc6:	9308      	strmi	r3, [sp, #32]
 8007fc8:	2f00      	cmp	r7, #0
 8007fca:	db39      	blt.n	8008040 <_dtoa_r+0x218>
 8007fcc:	9b08      	ldr	r3, [sp, #32]
 8007fce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007fd0:	443b      	add	r3, r7
 8007fd2:	9308      	str	r3, [sp, #32]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fda:	2b09      	cmp	r3, #9
 8007fdc:	d864      	bhi.n	80080a8 <_dtoa_r+0x280>
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	bfc4      	itt	gt
 8007fe2:	3b04      	subgt	r3, #4
 8007fe4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe8:	f1a3 0302 	sub.w	r3, r3, #2
 8007fec:	bfcc      	ite	gt
 8007fee:	2400      	movgt	r4, #0
 8007ff0:	2401      	movle	r4, #1
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d863      	bhi.n	80080be <_dtoa_r+0x296>
 8007ff6:	e8df f003 	tbb	[pc, r3]
 8007ffa:	372a      	.short	0x372a
 8007ffc:	5535      	.short	0x5535
 8007ffe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008002:	441e      	add	r6, r3
 8008004:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008008:	2b20      	cmp	r3, #32
 800800a:	bfc1      	itttt	gt
 800800c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008010:	409f      	lslgt	r7, r3
 8008012:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008016:	fa24 f303 	lsrgt.w	r3, r4, r3
 800801a:	bfd6      	itet	le
 800801c:	f1c3 0320 	rsble	r3, r3, #32
 8008020:	ea47 0003 	orrgt.w	r0, r7, r3
 8008024:	fa04 f003 	lslle.w	r0, r4, r3
 8008028:	f7f8 fa6c 	bl	8000504 <__aeabi_ui2d>
 800802c:	2201      	movs	r2, #1
 800802e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008032:	3e01      	subs	r6, #1
 8008034:	9214      	str	r2, [sp, #80]	@ 0x50
 8008036:	e777      	b.n	8007f28 <_dtoa_r+0x100>
 8008038:	2301      	movs	r3, #1
 800803a:	e7b8      	b.n	8007fae <_dtoa_r+0x186>
 800803c:	9012      	str	r0, [sp, #72]	@ 0x48
 800803e:	e7b7      	b.n	8007fb0 <_dtoa_r+0x188>
 8008040:	427b      	negs	r3, r7
 8008042:	930a      	str	r3, [sp, #40]	@ 0x28
 8008044:	2300      	movs	r3, #0
 8008046:	eba8 0807 	sub.w	r8, r8, r7
 800804a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800804c:	e7c4      	b.n	8007fd8 <_dtoa_r+0x1b0>
 800804e:	2300      	movs	r3, #0
 8008050:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008054:	2b00      	cmp	r3, #0
 8008056:	dc35      	bgt.n	80080c4 <_dtoa_r+0x29c>
 8008058:	2301      	movs	r3, #1
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	9307      	str	r3, [sp, #28]
 800805e:	461a      	mov	r2, r3
 8008060:	920e      	str	r2, [sp, #56]	@ 0x38
 8008062:	e00b      	b.n	800807c <_dtoa_r+0x254>
 8008064:	2301      	movs	r3, #1
 8008066:	e7f3      	b.n	8008050 <_dtoa_r+0x228>
 8008068:	2300      	movs	r3, #0
 800806a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800806c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800806e:	18fb      	adds	r3, r7, r3
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	3301      	adds	r3, #1
 8008074:	2b01      	cmp	r3, #1
 8008076:	9307      	str	r3, [sp, #28]
 8008078:	bfb8      	it	lt
 800807a:	2301      	movlt	r3, #1
 800807c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008080:	2100      	movs	r1, #0
 8008082:	2204      	movs	r2, #4
 8008084:	f102 0514 	add.w	r5, r2, #20
 8008088:	429d      	cmp	r5, r3
 800808a:	d91f      	bls.n	80080cc <_dtoa_r+0x2a4>
 800808c:	6041      	str	r1, [r0, #4]
 800808e:	4658      	mov	r0, fp
 8008090:	f000 fd8e 	bl	8008bb0 <_Balloc>
 8008094:	4682      	mov	sl, r0
 8008096:	2800      	cmp	r0, #0
 8008098:	d13c      	bne.n	8008114 <_dtoa_r+0x2ec>
 800809a:	4b1b      	ldr	r3, [pc, #108]	@ (8008108 <_dtoa_r+0x2e0>)
 800809c:	4602      	mov	r2, r0
 800809e:	f240 11af 	movw	r1, #431	@ 0x1af
 80080a2:	e6d8      	b.n	8007e56 <_dtoa_r+0x2e>
 80080a4:	2301      	movs	r3, #1
 80080a6:	e7e0      	b.n	800806a <_dtoa_r+0x242>
 80080a8:	2401      	movs	r4, #1
 80080aa:	2300      	movs	r3, #0
 80080ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80080b0:	f04f 33ff 	mov.w	r3, #4294967295
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	9307      	str	r3, [sp, #28]
 80080b8:	2200      	movs	r2, #0
 80080ba:	2312      	movs	r3, #18
 80080bc:	e7d0      	b.n	8008060 <_dtoa_r+0x238>
 80080be:	2301      	movs	r3, #1
 80080c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080c2:	e7f5      	b.n	80080b0 <_dtoa_r+0x288>
 80080c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	9307      	str	r3, [sp, #28]
 80080ca:	e7d7      	b.n	800807c <_dtoa_r+0x254>
 80080cc:	3101      	adds	r1, #1
 80080ce:	0052      	lsls	r2, r2, #1
 80080d0:	e7d8      	b.n	8008084 <_dtoa_r+0x25c>
 80080d2:	bf00      	nop
 80080d4:	f3af 8000 	nop.w
 80080d8:	636f4361 	.word	0x636f4361
 80080dc:	3fd287a7 	.word	0x3fd287a7
 80080e0:	8b60c8b3 	.word	0x8b60c8b3
 80080e4:	3fc68a28 	.word	0x3fc68a28
 80080e8:	509f79fb 	.word	0x509f79fb
 80080ec:	3fd34413 	.word	0x3fd34413
 80080f0:	0800b901 	.word	0x0800b901
 80080f4:	0800b918 	.word	0x0800b918
 80080f8:	7ff00000 	.word	0x7ff00000
 80080fc:	0800b8d1 	.word	0x0800b8d1
 8008100:	3ff80000 	.word	0x3ff80000
 8008104:	0800ba10 	.word	0x0800ba10
 8008108:	0800b970 	.word	0x0800b970
 800810c:	0800b8fd 	.word	0x0800b8fd
 8008110:	0800b8d0 	.word	0x0800b8d0
 8008114:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008118:	6018      	str	r0, [r3, #0]
 800811a:	9b07      	ldr	r3, [sp, #28]
 800811c:	2b0e      	cmp	r3, #14
 800811e:	f200 80a4 	bhi.w	800826a <_dtoa_r+0x442>
 8008122:	2c00      	cmp	r4, #0
 8008124:	f000 80a1 	beq.w	800826a <_dtoa_r+0x442>
 8008128:	2f00      	cmp	r7, #0
 800812a:	dd33      	ble.n	8008194 <_dtoa_r+0x36c>
 800812c:	4bad      	ldr	r3, [pc, #692]	@ (80083e4 <_dtoa_r+0x5bc>)
 800812e:	f007 020f 	and.w	r2, r7, #15
 8008132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008136:	ed93 7b00 	vldr	d7, [r3]
 800813a:	05f8      	lsls	r0, r7, #23
 800813c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008140:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008144:	d516      	bpl.n	8008174 <_dtoa_r+0x34c>
 8008146:	4ba8      	ldr	r3, [pc, #672]	@ (80083e8 <_dtoa_r+0x5c0>)
 8008148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800814c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008150:	f7f8 fb7c 	bl	800084c <__aeabi_ddiv>
 8008154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008158:	f004 040f 	and.w	r4, r4, #15
 800815c:	2603      	movs	r6, #3
 800815e:	4da2      	ldr	r5, [pc, #648]	@ (80083e8 <_dtoa_r+0x5c0>)
 8008160:	b954      	cbnz	r4, 8008178 <_dtoa_r+0x350>
 8008162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800816a:	f7f8 fb6f 	bl	800084c <__aeabi_ddiv>
 800816e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008172:	e028      	b.n	80081c6 <_dtoa_r+0x39e>
 8008174:	2602      	movs	r6, #2
 8008176:	e7f2      	b.n	800815e <_dtoa_r+0x336>
 8008178:	07e1      	lsls	r1, r4, #31
 800817a:	d508      	bpl.n	800818e <_dtoa_r+0x366>
 800817c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008180:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008184:	f7f8 fa38 	bl	80005f8 <__aeabi_dmul>
 8008188:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800818c:	3601      	adds	r6, #1
 800818e:	1064      	asrs	r4, r4, #1
 8008190:	3508      	adds	r5, #8
 8008192:	e7e5      	b.n	8008160 <_dtoa_r+0x338>
 8008194:	f000 80d2 	beq.w	800833c <_dtoa_r+0x514>
 8008198:	427c      	negs	r4, r7
 800819a:	4b92      	ldr	r3, [pc, #584]	@ (80083e4 <_dtoa_r+0x5bc>)
 800819c:	4d92      	ldr	r5, [pc, #584]	@ (80083e8 <_dtoa_r+0x5c0>)
 800819e:	f004 020f 	and.w	r2, r4, #15
 80081a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081ae:	f7f8 fa23 	bl	80005f8 <__aeabi_dmul>
 80081b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081b6:	1124      	asrs	r4, r4, #4
 80081b8:	2300      	movs	r3, #0
 80081ba:	2602      	movs	r6, #2
 80081bc:	2c00      	cmp	r4, #0
 80081be:	f040 80b2 	bne.w	8008326 <_dtoa_r+0x4fe>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1d3      	bne.n	800816e <_dtoa_r+0x346>
 80081c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 80b7 	beq.w	8008340 <_dtoa_r+0x518>
 80081d2:	4b86      	ldr	r3, [pc, #536]	@ (80083ec <_dtoa_r+0x5c4>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	4620      	mov	r0, r4
 80081d8:	4629      	mov	r1, r5
 80081da:	f7f8 fc7f 	bl	8000adc <__aeabi_dcmplt>
 80081de:	2800      	cmp	r0, #0
 80081e0:	f000 80ae 	beq.w	8008340 <_dtoa_r+0x518>
 80081e4:	9b07      	ldr	r3, [sp, #28]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 80aa 	beq.w	8008340 <_dtoa_r+0x518>
 80081ec:	9b00      	ldr	r3, [sp, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	dd37      	ble.n	8008262 <_dtoa_r+0x43a>
 80081f2:	1e7b      	subs	r3, r7, #1
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	4620      	mov	r0, r4
 80081f8:	4b7d      	ldr	r3, [pc, #500]	@ (80083f0 <_dtoa_r+0x5c8>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	4629      	mov	r1, r5
 80081fe:	f7f8 f9fb 	bl	80005f8 <__aeabi_dmul>
 8008202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008206:	9c00      	ldr	r4, [sp, #0]
 8008208:	3601      	adds	r6, #1
 800820a:	4630      	mov	r0, r6
 800820c:	f7f8 f98a 	bl	8000524 <__aeabi_i2d>
 8008210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008214:	f7f8 f9f0 	bl	80005f8 <__aeabi_dmul>
 8008218:	4b76      	ldr	r3, [pc, #472]	@ (80083f4 <_dtoa_r+0x5cc>)
 800821a:	2200      	movs	r2, #0
 800821c:	f7f8 f836 	bl	800028c <__adddf3>
 8008220:	4605      	mov	r5, r0
 8008222:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008226:	2c00      	cmp	r4, #0
 8008228:	f040 808d 	bne.w	8008346 <_dtoa_r+0x51e>
 800822c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008230:	4b71      	ldr	r3, [pc, #452]	@ (80083f8 <_dtoa_r+0x5d0>)
 8008232:	2200      	movs	r2, #0
 8008234:	f7f8 f828 	bl	8000288 <__aeabi_dsub>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008240:	462a      	mov	r2, r5
 8008242:	4633      	mov	r3, r6
 8008244:	f7f8 fc68 	bl	8000b18 <__aeabi_dcmpgt>
 8008248:	2800      	cmp	r0, #0
 800824a:	f040 828b 	bne.w	8008764 <_dtoa_r+0x93c>
 800824e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008252:	462a      	mov	r2, r5
 8008254:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008258:	f7f8 fc40 	bl	8000adc <__aeabi_dcmplt>
 800825c:	2800      	cmp	r0, #0
 800825e:	f040 8128 	bne.w	80084b2 <_dtoa_r+0x68a>
 8008262:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008266:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800826a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800826c:	2b00      	cmp	r3, #0
 800826e:	f2c0 815a 	blt.w	8008526 <_dtoa_r+0x6fe>
 8008272:	2f0e      	cmp	r7, #14
 8008274:	f300 8157 	bgt.w	8008526 <_dtoa_r+0x6fe>
 8008278:	4b5a      	ldr	r3, [pc, #360]	@ (80083e4 <_dtoa_r+0x5bc>)
 800827a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800827e:	ed93 7b00 	vldr	d7, [r3]
 8008282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008284:	2b00      	cmp	r3, #0
 8008286:	ed8d 7b00 	vstr	d7, [sp]
 800828a:	da03      	bge.n	8008294 <_dtoa_r+0x46c>
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	2b00      	cmp	r3, #0
 8008290:	f340 8101 	ble.w	8008496 <_dtoa_r+0x66e>
 8008294:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008298:	4656      	mov	r6, sl
 800829a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f8 fad3 	bl	800084c <__aeabi_ddiv>
 80082a6:	f7f8 fc57 	bl	8000b58 <__aeabi_d2iz>
 80082aa:	4680      	mov	r8, r0
 80082ac:	f7f8 f93a 	bl	8000524 <__aeabi_i2d>
 80082b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082b4:	f7f8 f9a0 	bl	80005f8 <__aeabi_dmul>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4620      	mov	r0, r4
 80082be:	4629      	mov	r1, r5
 80082c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80082c4:	f7f7 ffe0 	bl	8000288 <__aeabi_dsub>
 80082c8:	f806 4b01 	strb.w	r4, [r6], #1
 80082cc:	9d07      	ldr	r5, [sp, #28]
 80082ce:	eba6 040a 	sub.w	r4, r6, sl
 80082d2:	42a5      	cmp	r5, r4
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	f040 8117 	bne.w	800850a <_dtoa_r+0x6e2>
 80082dc:	f7f7 ffd6 	bl	800028c <__adddf3>
 80082e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082e4:	4604      	mov	r4, r0
 80082e6:	460d      	mov	r5, r1
 80082e8:	f7f8 fc16 	bl	8000b18 <__aeabi_dcmpgt>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	f040 80f9 	bne.w	80084e4 <_dtoa_r+0x6bc>
 80082f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082f6:	4620      	mov	r0, r4
 80082f8:	4629      	mov	r1, r5
 80082fa:	f7f8 fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80082fe:	b118      	cbz	r0, 8008308 <_dtoa_r+0x4e0>
 8008300:	f018 0f01 	tst.w	r8, #1
 8008304:	f040 80ee 	bne.w	80084e4 <_dtoa_r+0x6bc>
 8008308:	4649      	mov	r1, r9
 800830a:	4658      	mov	r0, fp
 800830c:	f000 fc90 	bl	8008c30 <_Bfree>
 8008310:	2300      	movs	r3, #0
 8008312:	7033      	strb	r3, [r6, #0]
 8008314:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008316:	3701      	adds	r7, #1
 8008318:	601f      	str	r7, [r3, #0]
 800831a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 831d 	beq.w	800895c <_dtoa_r+0xb34>
 8008322:	601e      	str	r6, [r3, #0]
 8008324:	e31a      	b.n	800895c <_dtoa_r+0xb34>
 8008326:	07e2      	lsls	r2, r4, #31
 8008328:	d505      	bpl.n	8008336 <_dtoa_r+0x50e>
 800832a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800832e:	f7f8 f963 	bl	80005f8 <__aeabi_dmul>
 8008332:	3601      	adds	r6, #1
 8008334:	2301      	movs	r3, #1
 8008336:	1064      	asrs	r4, r4, #1
 8008338:	3508      	adds	r5, #8
 800833a:	e73f      	b.n	80081bc <_dtoa_r+0x394>
 800833c:	2602      	movs	r6, #2
 800833e:	e742      	b.n	80081c6 <_dtoa_r+0x39e>
 8008340:	9c07      	ldr	r4, [sp, #28]
 8008342:	9704      	str	r7, [sp, #16]
 8008344:	e761      	b.n	800820a <_dtoa_r+0x3e2>
 8008346:	4b27      	ldr	r3, [pc, #156]	@ (80083e4 <_dtoa_r+0x5bc>)
 8008348:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800834a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800834e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008352:	4454      	add	r4, sl
 8008354:	2900      	cmp	r1, #0
 8008356:	d053      	beq.n	8008400 <_dtoa_r+0x5d8>
 8008358:	4928      	ldr	r1, [pc, #160]	@ (80083fc <_dtoa_r+0x5d4>)
 800835a:	2000      	movs	r0, #0
 800835c:	f7f8 fa76 	bl	800084c <__aeabi_ddiv>
 8008360:	4633      	mov	r3, r6
 8008362:	462a      	mov	r2, r5
 8008364:	f7f7 ff90 	bl	8000288 <__aeabi_dsub>
 8008368:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800836c:	4656      	mov	r6, sl
 800836e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008372:	f7f8 fbf1 	bl	8000b58 <__aeabi_d2iz>
 8008376:	4605      	mov	r5, r0
 8008378:	f7f8 f8d4 	bl	8000524 <__aeabi_i2d>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008384:	f7f7 ff80 	bl	8000288 <__aeabi_dsub>
 8008388:	3530      	adds	r5, #48	@ 0x30
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008392:	f806 5b01 	strb.w	r5, [r6], #1
 8008396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800839a:	f7f8 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d171      	bne.n	8008486 <_dtoa_r+0x65e>
 80083a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083a6:	4911      	ldr	r1, [pc, #68]	@ (80083ec <_dtoa_r+0x5c4>)
 80083a8:	2000      	movs	r0, #0
 80083aa:	f7f7 ff6d 	bl	8000288 <__aeabi_dsub>
 80083ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083b2:	f7f8 fb93 	bl	8000adc <__aeabi_dcmplt>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f040 8095 	bne.w	80084e6 <_dtoa_r+0x6be>
 80083bc:	42a6      	cmp	r6, r4
 80083be:	f43f af50 	beq.w	8008262 <_dtoa_r+0x43a>
 80083c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083c6:	4b0a      	ldr	r3, [pc, #40]	@ (80083f0 <_dtoa_r+0x5c8>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	f7f8 f915 	bl	80005f8 <__aeabi_dmul>
 80083ce:	4b08      	ldr	r3, [pc, #32]	@ (80083f0 <_dtoa_r+0x5c8>)
 80083d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083d4:	2200      	movs	r2, #0
 80083d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083da:	f7f8 f90d 	bl	80005f8 <__aeabi_dmul>
 80083de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083e2:	e7c4      	b.n	800836e <_dtoa_r+0x546>
 80083e4:	0800ba10 	.word	0x0800ba10
 80083e8:	0800b9e8 	.word	0x0800b9e8
 80083ec:	3ff00000 	.word	0x3ff00000
 80083f0:	40240000 	.word	0x40240000
 80083f4:	401c0000 	.word	0x401c0000
 80083f8:	40140000 	.word	0x40140000
 80083fc:	3fe00000 	.word	0x3fe00000
 8008400:	4631      	mov	r1, r6
 8008402:	4628      	mov	r0, r5
 8008404:	f7f8 f8f8 	bl	80005f8 <__aeabi_dmul>
 8008408:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800840c:	9415      	str	r4, [sp, #84]	@ 0x54
 800840e:	4656      	mov	r6, sl
 8008410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008414:	f7f8 fba0 	bl	8000b58 <__aeabi_d2iz>
 8008418:	4605      	mov	r5, r0
 800841a:	f7f8 f883 	bl	8000524 <__aeabi_i2d>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008426:	f7f7 ff2f 	bl	8000288 <__aeabi_dsub>
 800842a:	3530      	adds	r5, #48	@ 0x30
 800842c:	f806 5b01 	strb.w	r5, [r6], #1
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	42a6      	cmp	r6, r4
 8008436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	d124      	bne.n	800848a <_dtoa_r+0x662>
 8008440:	4bac      	ldr	r3, [pc, #688]	@ (80086f4 <_dtoa_r+0x8cc>)
 8008442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008446:	f7f7 ff21 	bl	800028c <__adddf3>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008452:	f7f8 fb61 	bl	8000b18 <__aeabi_dcmpgt>
 8008456:	2800      	cmp	r0, #0
 8008458:	d145      	bne.n	80084e6 <_dtoa_r+0x6be>
 800845a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800845e:	49a5      	ldr	r1, [pc, #660]	@ (80086f4 <_dtoa_r+0x8cc>)
 8008460:	2000      	movs	r0, #0
 8008462:	f7f7 ff11 	bl	8000288 <__aeabi_dsub>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800846e:	f7f8 fb35 	bl	8000adc <__aeabi_dcmplt>
 8008472:	2800      	cmp	r0, #0
 8008474:	f43f aef5 	beq.w	8008262 <_dtoa_r+0x43a>
 8008478:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800847a:	1e73      	subs	r3, r6, #1
 800847c:	9315      	str	r3, [sp, #84]	@ 0x54
 800847e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008482:	2b30      	cmp	r3, #48	@ 0x30
 8008484:	d0f8      	beq.n	8008478 <_dtoa_r+0x650>
 8008486:	9f04      	ldr	r7, [sp, #16]
 8008488:	e73e      	b.n	8008308 <_dtoa_r+0x4e0>
 800848a:	4b9b      	ldr	r3, [pc, #620]	@ (80086f8 <_dtoa_r+0x8d0>)
 800848c:	f7f8 f8b4 	bl	80005f8 <__aeabi_dmul>
 8008490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008494:	e7bc      	b.n	8008410 <_dtoa_r+0x5e8>
 8008496:	d10c      	bne.n	80084b2 <_dtoa_r+0x68a>
 8008498:	4b98      	ldr	r3, [pc, #608]	@ (80086fc <_dtoa_r+0x8d4>)
 800849a:	2200      	movs	r2, #0
 800849c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084a0:	f7f8 f8aa 	bl	80005f8 <__aeabi_dmul>
 80084a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084a8:	f7f8 fb2c 	bl	8000b04 <__aeabi_dcmpge>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	f000 8157 	beq.w	8008760 <_dtoa_r+0x938>
 80084b2:	2400      	movs	r4, #0
 80084b4:	4625      	mov	r5, r4
 80084b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084b8:	43db      	mvns	r3, r3
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	4656      	mov	r6, sl
 80084be:	2700      	movs	r7, #0
 80084c0:	4621      	mov	r1, r4
 80084c2:	4658      	mov	r0, fp
 80084c4:	f000 fbb4 	bl	8008c30 <_Bfree>
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	d0dc      	beq.n	8008486 <_dtoa_r+0x65e>
 80084cc:	b12f      	cbz	r7, 80084da <_dtoa_r+0x6b2>
 80084ce:	42af      	cmp	r7, r5
 80084d0:	d003      	beq.n	80084da <_dtoa_r+0x6b2>
 80084d2:	4639      	mov	r1, r7
 80084d4:	4658      	mov	r0, fp
 80084d6:	f000 fbab 	bl	8008c30 <_Bfree>
 80084da:	4629      	mov	r1, r5
 80084dc:	4658      	mov	r0, fp
 80084de:	f000 fba7 	bl	8008c30 <_Bfree>
 80084e2:	e7d0      	b.n	8008486 <_dtoa_r+0x65e>
 80084e4:	9704      	str	r7, [sp, #16]
 80084e6:	4633      	mov	r3, r6
 80084e8:	461e      	mov	r6, r3
 80084ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084ee:	2a39      	cmp	r2, #57	@ 0x39
 80084f0:	d107      	bne.n	8008502 <_dtoa_r+0x6da>
 80084f2:	459a      	cmp	sl, r3
 80084f4:	d1f8      	bne.n	80084e8 <_dtoa_r+0x6c0>
 80084f6:	9a04      	ldr	r2, [sp, #16]
 80084f8:	3201      	adds	r2, #1
 80084fa:	9204      	str	r2, [sp, #16]
 80084fc:	2230      	movs	r2, #48	@ 0x30
 80084fe:	f88a 2000 	strb.w	r2, [sl]
 8008502:	781a      	ldrb	r2, [r3, #0]
 8008504:	3201      	adds	r2, #1
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	e7bd      	b.n	8008486 <_dtoa_r+0x65e>
 800850a:	4b7b      	ldr	r3, [pc, #492]	@ (80086f8 <_dtoa_r+0x8d0>)
 800850c:	2200      	movs	r2, #0
 800850e:	f7f8 f873 	bl	80005f8 <__aeabi_dmul>
 8008512:	2200      	movs	r2, #0
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	460d      	mov	r5, r1
 800851a:	f7f8 fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 800851e:	2800      	cmp	r0, #0
 8008520:	f43f aebb 	beq.w	800829a <_dtoa_r+0x472>
 8008524:	e6f0      	b.n	8008308 <_dtoa_r+0x4e0>
 8008526:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008528:	2a00      	cmp	r2, #0
 800852a:	f000 80db 	beq.w	80086e4 <_dtoa_r+0x8bc>
 800852e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008530:	2a01      	cmp	r2, #1
 8008532:	f300 80bf 	bgt.w	80086b4 <_dtoa_r+0x88c>
 8008536:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008538:	2a00      	cmp	r2, #0
 800853a:	f000 80b7 	beq.w	80086ac <_dtoa_r+0x884>
 800853e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008542:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008544:	4646      	mov	r6, r8
 8008546:	9a08      	ldr	r2, [sp, #32]
 8008548:	2101      	movs	r1, #1
 800854a:	441a      	add	r2, r3
 800854c:	4658      	mov	r0, fp
 800854e:	4498      	add	r8, r3
 8008550:	9208      	str	r2, [sp, #32]
 8008552:	f000 fc21 	bl	8008d98 <__i2b>
 8008556:	4605      	mov	r5, r0
 8008558:	b15e      	cbz	r6, 8008572 <_dtoa_r+0x74a>
 800855a:	9b08      	ldr	r3, [sp, #32]
 800855c:	2b00      	cmp	r3, #0
 800855e:	dd08      	ble.n	8008572 <_dtoa_r+0x74a>
 8008560:	42b3      	cmp	r3, r6
 8008562:	9a08      	ldr	r2, [sp, #32]
 8008564:	bfa8      	it	ge
 8008566:	4633      	movge	r3, r6
 8008568:	eba8 0803 	sub.w	r8, r8, r3
 800856c:	1af6      	subs	r6, r6, r3
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	9308      	str	r3, [sp, #32]
 8008572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008574:	b1f3      	cbz	r3, 80085b4 <_dtoa_r+0x78c>
 8008576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 80b7 	beq.w	80086ec <_dtoa_r+0x8c4>
 800857e:	b18c      	cbz	r4, 80085a4 <_dtoa_r+0x77c>
 8008580:	4629      	mov	r1, r5
 8008582:	4622      	mov	r2, r4
 8008584:	4658      	mov	r0, fp
 8008586:	f000 fcc7 	bl	8008f18 <__pow5mult>
 800858a:	464a      	mov	r2, r9
 800858c:	4601      	mov	r1, r0
 800858e:	4605      	mov	r5, r0
 8008590:	4658      	mov	r0, fp
 8008592:	f000 fc17 	bl	8008dc4 <__multiply>
 8008596:	4649      	mov	r1, r9
 8008598:	9004      	str	r0, [sp, #16]
 800859a:	4658      	mov	r0, fp
 800859c:	f000 fb48 	bl	8008c30 <_Bfree>
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	4699      	mov	r9, r3
 80085a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085a6:	1b1a      	subs	r2, r3, r4
 80085a8:	d004      	beq.n	80085b4 <_dtoa_r+0x78c>
 80085aa:	4649      	mov	r1, r9
 80085ac:	4658      	mov	r0, fp
 80085ae:	f000 fcb3 	bl	8008f18 <__pow5mult>
 80085b2:	4681      	mov	r9, r0
 80085b4:	2101      	movs	r1, #1
 80085b6:	4658      	mov	r0, fp
 80085b8:	f000 fbee 	bl	8008d98 <__i2b>
 80085bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085be:	4604      	mov	r4, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 81cf 	beq.w	8008964 <_dtoa_r+0xb3c>
 80085c6:	461a      	mov	r2, r3
 80085c8:	4601      	mov	r1, r0
 80085ca:	4658      	mov	r0, fp
 80085cc:	f000 fca4 	bl	8008f18 <__pow5mult>
 80085d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	4604      	mov	r4, r0
 80085d6:	f300 8095 	bgt.w	8008704 <_dtoa_r+0x8dc>
 80085da:	9b02      	ldr	r3, [sp, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f040 8087 	bne.w	80086f0 <_dtoa_r+0x8c8>
 80085e2:	9b03      	ldr	r3, [sp, #12]
 80085e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f040 8089 	bne.w	8008700 <_dtoa_r+0x8d8>
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085f4:	0d1b      	lsrs	r3, r3, #20
 80085f6:	051b      	lsls	r3, r3, #20
 80085f8:	b12b      	cbz	r3, 8008606 <_dtoa_r+0x7de>
 80085fa:	9b08      	ldr	r3, [sp, #32]
 80085fc:	3301      	adds	r3, #1
 80085fe:	9308      	str	r3, [sp, #32]
 8008600:	f108 0801 	add.w	r8, r8, #1
 8008604:	2301      	movs	r3, #1
 8008606:	930a      	str	r3, [sp, #40]	@ 0x28
 8008608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 81b0 	beq.w	8008970 <_dtoa_r+0xb48>
 8008610:	6923      	ldr	r3, [r4, #16]
 8008612:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008616:	6918      	ldr	r0, [r3, #16]
 8008618:	f000 fb72 	bl	8008d00 <__hi0bits>
 800861c:	f1c0 0020 	rsb	r0, r0, #32
 8008620:	9b08      	ldr	r3, [sp, #32]
 8008622:	4418      	add	r0, r3
 8008624:	f010 001f 	ands.w	r0, r0, #31
 8008628:	d077      	beq.n	800871a <_dtoa_r+0x8f2>
 800862a:	f1c0 0320 	rsb	r3, r0, #32
 800862e:	2b04      	cmp	r3, #4
 8008630:	dd6b      	ble.n	800870a <_dtoa_r+0x8e2>
 8008632:	9b08      	ldr	r3, [sp, #32]
 8008634:	f1c0 001c 	rsb	r0, r0, #28
 8008638:	4403      	add	r3, r0
 800863a:	4480      	add	r8, r0
 800863c:	4406      	add	r6, r0
 800863e:	9308      	str	r3, [sp, #32]
 8008640:	f1b8 0f00 	cmp.w	r8, #0
 8008644:	dd05      	ble.n	8008652 <_dtoa_r+0x82a>
 8008646:	4649      	mov	r1, r9
 8008648:	4642      	mov	r2, r8
 800864a:	4658      	mov	r0, fp
 800864c:	f000 fcbe 	bl	8008fcc <__lshift>
 8008650:	4681      	mov	r9, r0
 8008652:	9b08      	ldr	r3, [sp, #32]
 8008654:	2b00      	cmp	r3, #0
 8008656:	dd05      	ble.n	8008664 <_dtoa_r+0x83c>
 8008658:	4621      	mov	r1, r4
 800865a:	461a      	mov	r2, r3
 800865c:	4658      	mov	r0, fp
 800865e:	f000 fcb5 	bl	8008fcc <__lshift>
 8008662:	4604      	mov	r4, r0
 8008664:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008666:	2b00      	cmp	r3, #0
 8008668:	d059      	beq.n	800871e <_dtoa_r+0x8f6>
 800866a:	4621      	mov	r1, r4
 800866c:	4648      	mov	r0, r9
 800866e:	f000 fd19 	bl	80090a4 <__mcmp>
 8008672:	2800      	cmp	r0, #0
 8008674:	da53      	bge.n	800871e <_dtoa_r+0x8f6>
 8008676:	1e7b      	subs	r3, r7, #1
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	4649      	mov	r1, r9
 800867c:	2300      	movs	r3, #0
 800867e:	220a      	movs	r2, #10
 8008680:	4658      	mov	r0, fp
 8008682:	f000 faf7 	bl	8008c74 <__multadd>
 8008686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008688:	4681      	mov	r9, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 8172 	beq.w	8008974 <_dtoa_r+0xb4c>
 8008690:	2300      	movs	r3, #0
 8008692:	4629      	mov	r1, r5
 8008694:	220a      	movs	r2, #10
 8008696:	4658      	mov	r0, fp
 8008698:	f000 faec 	bl	8008c74 <__multadd>
 800869c:	9b00      	ldr	r3, [sp, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	4605      	mov	r5, r0
 80086a2:	dc67      	bgt.n	8008774 <_dtoa_r+0x94c>
 80086a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	dc41      	bgt.n	800872e <_dtoa_r+0x906>
 80086aa:	e063      	b.n	8008774 <_dtoa_r+0x94c>
 80086ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80086b2:	e746      	b.n	8008542 <_dtoa_r+0x71a>
 80086b4:	9b07      	ldr	r3, [sp, #28]
 80086b6:	1e5c      	subs	r4, r3, #1
 80086b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ba:	42a3      	cmp	r3, r4
 80086bc:	bfbf      	itttt	lt
 80086be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80086c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80086c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80086c4:	1ae3      	sublt	r3, r4, r3
 80086c6:	bfb4      	ite	lt
 80086c8:	18d2      	addlt	r2, r2, r3
 80086ca:	1b1c      	subge	r4, r3, r4
 80086cc:	9b07      	ldr	r3, [sp, #28]
 80086ce:	bfbc      	itt	lt
 80086d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80086d2:	2400      	movlt	r4, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	bfb5      	itete	lt
 80086d8:	eba8 0603 	sublt.w	r6, r8, r3
 80086dc:	9b07      	ldrge	r3, [sp, #28]
 80086de:	2300      	movlt	r3, #0
 80086e0:	4646      	movge	r6, r8
 80086e2:	e730      	b.n	8008546 <_dtoa_r+0x71e>
 80086e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80086e8:	4646      	mov	r6, r8
 80086ea:	e735      	b.n	8008558 <_dtoa_r+0x730>
 80086ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086ee:	e75c      	b.n	80085aa <_dtoa_r+0x782>
 80086f0:	2300      	movs	r3, #0
 80086f2:	e788      	b.n	8008606 <_dtoa_r+0x7de>
 80086f4:	3fe00000 	.word	0x3fe00000
 80086f8:	40240000 	.word	0x40240000
 80086fc:	40140000 	.word	0x40140000
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	e780      	b.n	8008606 <_dtoa_r+0x7de>
 8008704:	2300      	movs	r3, #0
 8008706:	930a      	str	r3, [sp, #40]	@ 0x28
 8008708:	e782      	b.n	8008610 <_dtoa_r+0x7e8>
 800870a:	d099      	beq.n	8008640 <_dtoa_r+0x818>
 800870c:	9a08      	ldr	r2, [sp, #32]
 800870e:	331c      	adds	r3, #28
 8008710:	441a      	add	r2, r3
 8008712:	4498      	add	r8, r3
 8008714:	441e      	add	r6, r3
 8008716:	9208      	str	r2, [sp, #32]
 8008718:	e792      	b.n	8008640 <_dtoa_r+0x818>
 800871a:	4603      	mov	r3, r0
 800871c:	e7f6      	b.n	800870c <_dtoa_r+0x8e4>
 800871e:	9b07      	ldr	r3, [sp, #28]
 8008720:	9704      	str	r7, [sp, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	dc20      	bgt.n	8008768 <_dtoa_r+0x940>
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872a:	2b02      	cmp	r3, #2
 800872c:	dd1e      	ble.n	800876c <_dtoa_r+0x944>
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f47f aec0 	bne.w	80084b6 <_dtoa_r+0x68e>
 8008736:	4621      	mov	r1, r4
 8008738:	2205      	movs	r2, #5
 800873a:	4658      	mov	r0, fp
 800873c:	f000 fa9a 	bl	8008c74 <__multadd>
 8008740:	4601      	mov	r1, r0
 8008742:	4604      	mov	r4, r0
 8008744:	4648      	mov	r0, r9
 8008746:	f000 fcad 	bl	80090a4 <__mcmp>
 800874a:	2800      	cmp	r0, #0
 800874c:	f77f aeb3 	ble.w	80084b6 <_dtoa_r+0x68e>
 8008750:	4656      	mov	r6, sl
 8008752:	2331      	movs	r3, #49	@ 0x31
 8008754:	f806 3b01 	strb.w	r3, [r6], #1
 8008758:	9b04      	ldr	r3, [sp, #16]
 800875a:	3301      	adds	r3, #1
 800875c:	9304      	str	r3, [sp, #16]
 800875e:	e6ae      	b.n	80084be <_dtoa_r+0x696>
 8008760:	9c07      	ldr	r4, [sp, #28]
 8008762:	9704      	str	r7, [sp, #16]
 8008764:	4625      	mov	r5, r4
 8008766:	e7f3      	b.n	8008750 <_dtoa_r+0x928>
 8008768:	9b07      	ldr	r3, [sp, #28]
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 8104 	beq.w	800897c <_dtoa_r+0xb54>
 8008774:	2e00      	cmp	r6, #0
 8008776:	dd05      	ble.n	8008784 <_dtoa_r+0x95c>
 8008778:	4629      	mov	r1, r5
 800877a:	4632      	mov	r2, r6
 800877c:	4658      	mov	r0, fp
 800877e:	f000 fc25 	bl	8008fcc <__lshift>
 8008782:	4605      	mov	r5, r0
 8008784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008786:	2b00      	cmp	r3, #0
 8008788:	d05a      	beq.n	8008840 <_dtoa_r+0xa18>
 800878a:	6869      	ldr	r1, [r5, #4]
 800878c:	4658      	mov	r0, fp
 800878e:	f000 fa0f 	bl	8008bb0 <_Balloc>
 8008792:	4606      	mov	r6, r0
 8008794:	b928      	cbnz	r0, 80087a2 <_dtoa_r+0x97a>
 8008796:	4b84      	ldr	r3, [pc, #528]	@ (80089a8 <_dtoa_r+0xb80>)
 8008798:	4602      	mov	r2, r0
 800879a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800879e:	f7ff bb5a 	b.w	8007e56 <_dtoa_r+0x2e>
 80087a2:	692a      	ldr	r2, [r5, #16]
 80087a4:	3202      	adds	r2, #2
 80087a6:	0092      	lsls	r2, r2, #2
 80087a8:	f105 010c 	add.w	r1, r5, #12
 80087ac:	300c      	adds	r0, #12
 80087ae:	f7ff faa2 	bl	8007cf6 <memcpy>
 80087b2:	2201      	movs	r2, #1
 80087b4:	4631      	mov	r1, r6
 80087b6:	4658      	mov	r0, fp
 80087b8:	f000 fc08 	bl	8008fcc <__lshift>
 80087bc:	f10a 0301 	add.w	r3, sl, #1
 80087c0:	9307      	str	r3, [sp, #28]
 80087c2:	9b00      	ldr	r3, [sp, #0]
 80087c4:	4453      	add	r3, sl
 80087c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087c8:	9b02      	ldr	r3, [sp, #8]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	462f      	mov	r7, r5
 80087d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80087d2:	4605      	mov	r5, r0
 80087d4:	9b07      	ldr	r3, [sp, #28]
 80087d6:	4621      	mov	r1, r4
 80087d8:	3b01      	subs	r3, #1
 80087da:	4648      	mov	r0, r9
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	f7ff fa98 	bl	8007d12 <quorem>
 80087e2:	4639      	mov	r1, r7
 80087e4:	9002      	str	r0, [sp, #8]
 80087e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087ea:	4648      	mov	r0, r9
 80087ec:	f000 fc5a 	bl	80090a4 <__mcmp>
 80087f0:	462a      	mov	r2, r5
 80087f2:	9008      	str	r0, [sp, #32]
 80087f4:	4621      	mov	r1, r4
 80087f6:	4658      	mov	r0, fp
 80087f8:	f000 fc70 	bl	80090dc <__mdiff>
 80087fc:	68c2      	ldr	r2, [r0, #12]
 80087fe:	4606      	mov	r6, r0
 8008800:	bb02      	cbnz	r2, 8008844 <_dtoa_r+0xa1c>
 8008802:	4601      	mov	r1, r0
 8008804:	4648      	mov	r0, r9
 8008806:	f000 fc4d 	bl	80090a4 <__mcmp>
 800880a:	4602      	mov	r2, r0
 800880c:	4631      	mov	r1, r6
 800880e:	4658      	mov	r0, fp
 8008810:	920e      	str	r2, [sp, #56]	@ 0x38
 8008812:	f000 fa0d 	bl	8008c30 <_Bfree>
 8008816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008818:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800881a:	9e07      	ldr	r6, [sp, #28]
 800881c:	ea43 0102 	orr.w	r1, r3, r2
 8008820:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008822:	4319      	orrs	r1, r3
 8008824:	d110      	bne.n	8008848 <_dtoa_r+0xa20>
 8008826:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800882a:	d029      	beq.n	8008880 <_dtoa_r+0xa58>
 800882c:	9b08      	ldr	r3, [sp, #32]
 800882e:	2b00      	cmp	r3, #0
 8008830:	dd02      	ble.n	8008838 <_dtoa_r+0xa10>
 8008832:	9b02      	ldr	r3, [sp, #8]
 8008834:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008838:	9b00      	ldr	r3, [sp, #0]
 800883a:	f883 8000 	strb.w	r8, [r3]
 800883e:	e63f      	b.n	80084c0 <_dtoa_r+0x698>
 8008840:	4628      	mov	r0, r5
 8008842:	e7bb      	b.n	80087bc <_dtoa_r+0x994>
 8008844:	2201      	movs	r2, #1
 8008846:	e7e1      	b.n	800880c <_dtoa_r+0x9e4>
 8008848:	9b08      	ldr	r3, [sp, #32]
 800884a:	2b00      	cmp	r3, #0
 800884c:	db04      	blt.n	8008858 <_dtoa_r+0xa30>
 800884e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008850:	430b      	orrs	r3, r1
 8008852:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008854:	430b      	orrs	r3, r1
 8008856:	d120      	bne.n	800889a <_dtoa_r+0xa72>
 8008858:	2a00      	cmp	r2, #0
 800885a:	dded      	ble.n	8008838 <_dtoa_r+0xa10>
 800885c:	4649      	mov	r1, r9
 800885e:	2201      	movs	r2, #1
 8008860:	4658      	mov	r0, fp
 8008862:	f000 fbb3 	bl	8008fcc <__lshift>
 8008866:	4621      	mov	r1, r4
 8008868:	4681      	mov	r9, r0
 800886a:	f000 fc1b 	bl	80090a4 <__mcmp>
 800886e:	2800      	cmp	r0, #0
 8008870:	dc03      	bgt.n	800887a <_dtoa_r+0xa52>
 8008872:	d1e1      	bne.n	8008838 <_dtoa_r+0xa10>
 8008874:	f018 0f01 	tst.w	r8, #1
 8008878:	d0de      	beq.n	8008838 <_dtoa_r+0xa10>
 800887a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800887e:	d1d8      	bne.n	8008832 <_dtoa_r+0xa0a>
 8008880:	9a00      	ldr	r2, [sp, #0]
 8008882:	2339      	movs	r3, #57	@ 0x39
 8008884:	7013      	strb	r3, [r2, #0]
 8008886:	4633      	mov	r3, r6
 8008888:	461e      	mov	r6, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008890:	2a39      	cmp	r2, #57	@ 0x39
 8008892:	d052      	beq.n	800893a <_dtoa_r+0xb12>
 8008894:	3201      	adds	r2, #1
 8008896:	701a      	strb	r2, [r3, #0]
 8008898:	e612      	b.n	80084c0 <_dtoa_r+0x698>
 800889a:	2a00      	cmp	r2, #0
 800889c:	dd07      	ble.n	80088ae <_dtoa_r+0xa86>
 800889e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088a2:	d0ed      	beq.n	8008880 <_dtoa_r+0xa58>
 80088a4:	9a00      	ldr	r2, [sp, #0]
 80088a6:	f108 0301 	add.w	r3, r8, #1
 80088aa:	7013      	strb	r3, [r2, #0]
 80088ac:	e608      	b.n	80084c0 <_dtoa_r+0x698>
 80088ae:	9b07      	ldr	r3, [sp, #28]
 80088b0:	9a07      	ldr	r2, [sp, #28]
 80088b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80088b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d028      	beq.n	800890e <_dtoa_r+0xae6>
 80088bc:	4649      	mov	r1, r9
 80088be:	2300      	movs	r3, #0
 80088c0:	220a      	movs	r2, #10
 80088c2:	4658      	mov	r0, fp
 80088c4:	f000 f9d6 	bl	8008c74 <__multadd>
 80088c8:	42af      	cmp	r7, r5
 80088ca:	4681      	mov	r9, r0
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	f04f 020a 	mov.w	r2, #10
 80088d4:	4639      	mov	r1, r7
 80088d6:	4658      	mov	r0, fp
 80088d8:	d107      	bne.n	80088ea <_dtoa_r+0xac2>
 80088da:	f000 f9cb 	bl	8008c74 <__multadd>
 80088de:	4607      	mov	r7, r0
 80088e0:	4605      	mov	r5, r0
 80088e2:	9b07      	ldr	r3, [sp, #28]
 80088e4:	3301      	adds	r3, #1
 80088e6:	9307      	str	r3, [sp, #28]
 80088e8:	e774      	b.n	80087d4 <_dtoa_r+0x9ac>
 80088ea:	f000 f9c3 	bl	8008c74 <__multadd>
 80088ee:	4629      	mov	r1, r5
 80088f0:	4607      	mov	r7, r0
 80088f2:	2300      	movs	r3, #0
 80088f4:	220a      	movs	r2, #10
 80088f6:	4658      	mov	r0, fp
 80088f8:	f000 f9bc 	bl	8008c74 <__multadd>
 80088fc:	4605      	mov	r5, r0
 80088fe:	e7f0      	b.n	80088e2 <_dtoa_r+0xaba>
 8008900:	9b00      	ldr	r3, [sp, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	bfcc      	ite	gt
 8008906:	461e      	movgt	r6, r3
 8008908:	2601      	movle	r6, #1
 800890a:	4456      	add	r6, sl
 800890c:	2700      	movs	r7, #0
 800890e:	4649      	mov	r1, r9
 8008910:	2201      	movs	r2, #1
 8008912:	4658      	mov	r0, fp
 8008914:	f000 fb5a 	bl	8008fcc <__lshift>
 8008918:	4621      	mov	r1, r4
 800891a:	4681      	mov	r9, r0
 800891c:	f000 fbc2 	bl	80090a4 <__mcmp>
 8008920:	2800      	cmp	r0, #0
 8008922:	dcb0      	bgt.n	8008886 <_dtoa_r+0xa5e>
 8008924:	d102      	bne.n	800892c <_dtoa_r+0xb04>
 8008926:	f018 0f01 	tst.w	r8, #1
 800892a:	d1ac      	bne.n	8008886 <_dtoa_r+0xa5e>
 800892c:	4633      	mov	r3, r6
 800892e:	461e      	mov	r6, r3
 8008930:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008934:	2a30      	cmp	r2, #48	@ 0x30
 8008936:	d0fa      	beq.n	800892e <_dtoa_r+0xb06>
 8008938:	e5c2      	b.n	80084c0 <_dtoa_r+0x698>
 800893a:	459a      	cmp	sl, r3
 800893c:	d1a4      	bne.n	8008888 <_dtoa_r+0xa60>
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	3301      	adds	r3, #1
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	2331      	movs	r3, #49	@ 0x31
 8008946:	f88a 3000 	strb.w	r3, [sl]
 800894a:	e5b9      	b.n	80084c0 <_dtoa_r+0x698>
 800894c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800894e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80089ac <_dtoa_r+0xb84>
 8008952:	b11b      	cbz	r3, 800895c <_dtoa_r+0xb34>
 8008954:	f10a 0308 	add.w	r3, sl, #8
 8008958:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	4650      	mov	r0, sl
 800895e:	b019      	add	sp, #100	@ 0x64
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008966:	2b01      	cmp	r3, #1
 8008968:	f77f ae37 	ble.w	80085da <_dtoa_r+0x7b2>
 800896c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800896e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008970:	2001      	movs	r0, #1
 8008972:	e655      	b.n	8008620 <_dtoa_r+0x7f8>
 8008974:	9b00      	ldr	r3, [sp, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f77f aed6 	ble.w	8008728 <_dtoa_r+0x900>
 800897c:	4656      	mov	r6, sl
 800897e:	4621      	mov	r1, r4
 8008980:	4648      	mov	r0, r9
 8008982:	f7ff f9c6 	bl	8007d12 <quorem>
 8008986:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800898a:	f806 8b01 	strb.w	r8, [r6], #1
 800898e:	9b00      	ldr	r3, [sp, #0]
 8008990:	eba6 020a 	sub.w	r2, r6, sl
 8008994:	4293      	cmp	r3, r2
 8008996:	ddb3      	ble.n	8008900 <_dtoa_r+0xad8>
 8008998:	4649      	mov	r1, r9
 800899a:	2300      	movs	r3, #0
 800899c:	220a      	movs	r2, #10
 800899e:	4658      	mov	r0, fp
 80089a0:	f000 f968 	bl	8008c74 <__multadd>
 80089a4:	4681      	mov	r9, r0
 80089a6:	e7ea      	b.n	800897e <_dtoa_r+0xb56>
 80089a8:	0800b970 	.word	0x0800b970
 80089ac:	0800b8f4 	.word	0x0800b8f4

080089b0 <_free_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4605      	mov	r5, r0
 80089b4:	2900      	cmp	r1, #0
 80089b6:	d041      	beq.n	8008a3c <_free_r+0x8c>
 80089b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089bc:	1f0c      	subs	r4, r1, #4
 80089be:	2b00      	cmp	r3, #0
 80089c0:	bfb8      	it	lt
 80089c2:	18e4      	addlt	r4, r4, r3
 80089c4:	f000 f8e8 	bl	8008b98 <__malloc_lock>
 80089c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a40 <_free_r+0x90>)
 80089ca:	6813      	ldr	r3, [r2, #0]
 80089cc:	b933      	cbnz	r3, 80089dc <_free_r+0x2c>
 80089ce:	6063      	str	r3, [r4, #4]
 80089d0:	6014      	str	r4, [r2, #0]
 80089d2:	4628      	mov	r0, r5
 80089d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089d8:	f000 b8e4 	b.w	8008ba4 <__malloc_unlock>
 80089dc:	42a3      	cmp	r3, r4
 80089de:	d908      	bls.n	80089f2 <_free_r+0x42>
 80089e0:	6820      	ldr	r0, [r4, #0]
 80089e2:	1821      	adds	r1, r4, r0
 80089e4:	428b      	cmp	r3, r1
 80089e6:	bf01      	itttt	eq
 80089e8:	6819      	ldreq	r1, [r3, #0]
 80089ea:	685b      	ldreq	r3, [r3, #4]
 80089ec:	1809      	addeq	r1, r1, r0
 80089ee:	6021      	streq	r1, [r4, #0]
 80089f0:	e7ed      	b.n	80089ce <_free_r+0x1e>
 80089f2:	461a      	mov	r2, r3
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	b10b      	cbz	r3, 80089fc <_free_r+0x4c>
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	d9fa      	bls.n	80089f2 <_free_r+0x42>
 80089fc:	6811      	ldr	r1, [r2, #0]
 80089fe:	1850      	adds	r0, r2, r1
 8008a00:	42a0      	cmp	r0, r4
 8008a02:	d10b      	bne.n	8008a1c <_free_r+0x6c>
 8008a04:	6820      	ldr	r0, [r4, #0]
 8008a06:	4401      	add	r1, r0
 8008a08:	1850      	adds	r0, r2, r1
 8008a0a:	4283      	cmp	r3, r0
 8008a0c:	6011      	str	r1, [r2, #0]
 8008a0e:	d1e0      	bne.n	80089d2 <_free_r+0x22>
 8008a10:	6818      	ldr	r0, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	6053      	str	r3, [r2, #4]
 8008a16:	4408      	add	r0, r1
 8008a18:	6010      	str	r0, [r2, #0]
 8008a1a:	e7da      	b.n	80089d2 <_free_r+0x22>
 8008a1c:	d902      	bls.n	8008a24 <_free_r+0x74>
 8008a1e:	230c      	movs	r3, #12
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	e7d6      	b.n	80089d2 <_free_r+0x22>
 8008a24:	6820      	ldr	r0, [r4, #0]
 8008a26:	1821      	adds	r1, r4, r0
 8008a28:	428b      	cmp	r3, r1
 8008a2a:	bf04      	itt	eq
 8008a2c:	6819      	ldreq	r1, [r3, #0]
 8008a2e:	685b      	ldreq	r3, [r3, #4]
 8008a30:	6063      	str	r3, [r4, #4]
 8008a32:	bf04      	itt	eq
 8008a34:	1809      	addeq	r1, r1, r0
 8008a36:	6021      	streq	r1, [r4, #0]
 8008a38:	6054      	str	r4, [r2, #4]
 8008a3a:	e7ca      	b.n	80089d2 <_free_r+0x22>
 8008a3c:	bd38      	pop	{r3, r4, r5, pc}
 8008a3e:	bf00      	nop
 8008a40:	2000132c 	.word	0x2000132c

08008a44 <malloc>:
 8008a44:	4b02      	ldr	r3, [pc, #8]	@ (8008a50 <malloc+0xc>)
 8008a46:	4601      	mov	r1, r0
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	f000 b825 	b.w	8008a98 <_malloc_r>
 8008a4e:	bf00      	nop
 8008a50:	20000040 	.word	0x20000040

08008a54 <sbrk_aligned>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	4e0f      	ldr	r6, [pc, #60]	@ (8008a94 <sbrk_aligned+0x40>)
 8008a58:	460c      	mov	r4, r1
 8008a5a:	6831      	ldr	r1, [r6, #0]
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	b911      	cbnz	r1, 8008a66 <sbrk_aligned+0x12>
 8008a60:	f000 fe2c 	bl	80096bc <_sbrk_r>
 8008a64:	6030      	str	r0, [r6, #0]
 8008a66:	4621      	mov	r1, r4
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f000 fe27 	bl	80096bc <_sbrk_r>
 8008a6e:	1c43      	adds	r3, r0, #1
 8008a70:	d103      	bne.n	8008a7a <sbrk_aligned+0x26>
 8008a72:	f04f 34ff 	mov.w	r4, #4294967295
 8008a76:	4620      	mov	r0, r4
 8008a78:	bd70      	pop	{r4, r5, r6, pc}
 8008a7a:	1cc4      	adds	r4, r0, #3
 8008a7c:	f024 0403 	bic.w	r4, r4, #3
 8008a80:	42a0      	cmp	r0, r4
 8008a82:	d0f8      	beq.n	8008a76 <sbrk_aligned+0x22>
 8008a84:	1a21      	subs	r1, r4, r0
 8008a86:	4628      	mov	r0, r5
 8008a88:	f000 fe18 	bl	80096bc <_sbrk_r>
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d1f2      	bne.n	8008a76 <sbrk_aligned+0x22>
 8008a90:	e7ef      	b.n	8008a72 <sbrk_aligned+0x1e>
 8008a92:	bf00      	nop
 8008a94:	20001328 	.word	0x20001328

08008a98 <_malloc_r>:
 8008a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a9c:	1ccd      	adds	r5, r1, #3
 8008a9e:	f025 0503 	bic.w	r5, r5, #3
 8008aa2:	3508      	adds	r5, #8
 8008aa4:	2d0c      	cmp	r5, #12
 8008aa6:	bf38      	it	cc
 8008aa8:	250c      	movcc	r5, #12
 8008aaa:	2d00      	cmp	r5, #0
 8008aac:	4606      	mov	r6, r0
 8008aae:	db01      	blt.n	8008ab4 <_malloc_r+0x1c>
 8008ab0:	42a9      	cmp	r1, r5
 8008ab2:	d904      	bls.n	8008abe <_malloc_r+0x26>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	6033      	str	r3, [r6, #0]
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008abe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b94 <_malloc_r+0xfc>
 8008ac2:	f000 f869 	bl	8008b98 <__malloc_lock>
 8008ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8008aca:	461c      	mov	r4, r3
 8008acc:	bb44      	cbnz	r4, 8008b20 <_malloc_r+0x88>
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f7ff ffbf 	bl	8008a54 <sbrk_aligned>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	4604      	mov	r4, r0
 8008ada:	d158      	bne.n	8008b8e <_malloc_r+0xf6>
 8008adc:	f8d8 4000 	ldr.w	r4, [r8]
 8008ae0:	4627      	mov	r7, r4
 8008ae2:	2f00      	cmp	r7, #0
 8008ae4:	d143      	bne.n	8008b6e <_malloc_r+0xd6>
 8008ae6:	2c00      	cmp	r4, #0
 8008ae8:	d04b      	beq.n	8008b82 <_malloc_r+0xea>
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	4639      	mov	r1, r7
 8008aee:	4630      	mov	r0, r6
 8008af0:	eb04 0903 	add.w	r9, r4, r3
 8008af4:	f000 fde2 	bl	80096bc <_sbrk_r>
 8008af8:	4581      	cmp	r9, r0
 8008afa:	d142      	bne.n	8008b82 <_malloc_r+0xea>
 8008afc:	6821      	ldr	r1, [r4, #0]
 8008afe:	1a6d      	subs	r5, r5, r1
 8008b00:	4629      	mov	r1, r5
 8008b02:	4630      	mov	r0, r6
 8008b04:	f7ff ffa6 	bl	8008a54 <sbrk_aligned>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d03a      	beq.n	8008b82 <_malloc_r+0xea>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	442b      	add	r3, r5
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	f8d8 3000 	ldr.w	r3, [r8]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	bb62      	cbnz	r2, 8008b74 <_malloc_r+0xdc>
 8008b1a:	f8c8 7000 	str.w	r7, [r8]
 8008b1e:	e00f      	b.n	8008b40 <_malloc_r+0xa8>
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	1b52      	subs	r2, r2, r5
 8008b24:	d420      	bmi.n	8008b68 <_malloc_r+0xd0>
 8008b26:	2a0b      	cmp	r2, #11
 8008b28:	d917      	bls.n	8008b5a <_malloc_r+0xc2>
 8008b2a:	1961      	adds	r1, r4, r5
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	6025      	str	r5, [r4, #0]
 8008b30:	bf18      	it	ne
 8008b32:	6059      	strne	r1, [r3, #4]
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	bf08      	it	eq
 8008b38:	f8c8 1000 	streq.w	r1, [r8]
 8008b3c:	5162      	str	r2, [r4, r5]
 8008b3e:	604b      	str	r3, [r1, #4]
 8008b40:	4630      	mov	r0, r6
 8008b42:	f000 f82f 	bl	8008ba4 <__malloc_unlock>
 8008b46:	f104 000b 	add.w	r0, r4, #11
 8008b4a:	1d23      	adds	r3, r4, #4
 8008b4c:	f020 0007 	bic.w	r0, r0, #7
 8008b50:	1ac2      	subs	r2, r0, r3
 8008b52:	bf1c      	itt	ne
 8008b54:	1a1b      	subne	r3, r3, r0
 8008b56:	50a3      	strne	r3, [r4, r2]
 8008b58:	e7af      	b.n	8008aba <_malloc_r+0x22>
 8008b5a:	6862      	ldr	r2, [r4, #4]
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	bf0c      	ite	eq
 8008b60:	f8c8 2000 	streq.w	r2, [r8]
 8008b64:	605a      	strne	r2, [r3, #4]
 8008b66:	e7eb      	b.n	8008b40 <_malloc_r+0xa8>
 8008b68:	4623      	mov	r3, r4
 8008b6a:	6864      	ldr	r4, [r4, #4]
 8008b6c:	e7ae      	b.n	8008acc <_malloc_r+0x34>
 8008b6e:	463c      	mov	r4, r7
 8008b70:	687f      	ldr	r7, [r7, #4]
 8008b72:	e7b6      	b.n	8008ae2 <_malloc_r+0x4a>
 8008b74:	461a      	mov	r2, r3
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	d1fb      	bne.n	8008b74 <_malloc_r+0xdc>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	6053      	str	r3, [r2, #4]
 8008b80:	e7de      	b.n	8008b40 <_malloc_r+0xa8>
 8008b82:	230c      	movs	r3, #12
 8008b84:	6033      	str	r3, [r6, #0]
 8008b86:	4630      	mov	r0, r6
 8008b88:	f000 f80c 	bl	8008ba4 <__malloc_unlock>
 8008b8c:	e794      	b.n	8008ab8 <_malloc_r+0x20>
 8008b8e:	6005      	str	r5, [r0, #0]
 8008b90:	e7d6      	b.n	8008b40 <_malloc_r+0xa8>
 8008b92:	bf00      	nop
 8008b94:	2000132c 	.word	0x2000132c

08008b98 <__malloc_lock>:
 8008b98:	4801      	ldr	r0, [pc, #4]	@ (8008ba0 <__malloc_lock+0x8>)
 8008b9a:	f7ff b8aa 	b.w	8007cf2 <__retarget_lock_acquire_recursive>
 8008b9e:	bf00      	nop
 8008ba0:	20001324 	.word	0x20001324

08008ba4 <__malloc_unlock>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	@ (8008bac <__malloc_unlock+0x8>)
 8008ba6:	f7ff b8a5 	b.w	8007cf4 <__retarget_lock_release_recursive>
 8008baa:	bf00      	nop
 8008bac:	20001324 	.word	0x20001324

08008bb0 <_Balloc>:
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	69c6      	ldr	r6, [r0, #28]
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	460d      	mov	r5, r1
 8008bb8:	b976      	cbnz	r6, 8008bd8 <_Balloc+0x28>
 8008bba:	2010      	movs	r0, #16
 8008bbc:	f7ff ff42 	bl	8008a44 <malloc>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	61e0      	str	r0, [r4, #28]
 8008bc4:	b920      	cbnz	r0, 8008bd0 <_Balloc+0x20>
 8008bc6:	4b18      	ldr	r3, [pc, #96]	@ (8008c28 <_Balloc+0x78>)
 8008bc8:	4818      	ldr	r0, [pc, #96]	@ (8008c2c <_Balloc+0x7c>)
 8008bca:	216b      	movs	r1, #107	@ 0x6b
 8008bcc:	f000 fd86 	bl	80096dc <__assert_func>
 8008bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bd4:	6006      	str	r6, [r0, #0]
 8008bd6:	60c6      	str	r6, [r0, #12]
 8008bd8:	69e6      	ldr	r6, [r4, #28]
 8008bda:	68f3      	ldr	r3, [r6, #12]
 8008bdc:	b183      	cbz	r3, 8008c00 <_Balloc+0x50>
 8008bde:	69e3      	ldr	r3, [r4, #28]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008be6:	b9b8      	cbnz	r0, 8008c18 <_Balloc+0x68>
 8008be8:	2101      	movs	r1, #1
 8008bea:	fa01 f605 	lsl.w	r6, r1, r5
 8008bee:	1d72      	adds	r2, r6, #5
 8008bf0:	0092      	lsls	r2, r2, #2
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 fd90 	bl	8009718 <_calloc_r>
 8008bf8:	b160      	cbz	r0, 8008c14 <_Balloc+0x64>
 8008bfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bfe:	e00e      	b.n	8008c1e <_Balloc+0x6e>
 8008c00:	2221      	movs	r2, #33	@ 0x21
 8008c02:	2104      	movs	r1, #4
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 fd87 	bl	8009718 <_calloc_r>
 8008c0a:	69e3      	ldr	r3, [r4, #28]
 8008c0c:	60f0      	str	r0, [r6, #12]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e4      	bne.n	8008bde <_Balloc+0x2e>
 8008c14:	2000      	movs	r0, #0
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	6802      	ldr	r2, [r0, #0]
 8008c1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c24:	e7f7      	b.n	8008c16 <_Balloc+0x66>
 8008c26:	bf00      	nop
 8008c28:	0800b901 	.word	0x0800b901
 8008c2c:	0800b981 	.word	0x0800b981

08008c30 <_Bfree>:
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	69c6      	ldr	r6, [r0, #28]
 8008c34:	4605      	mov	r5, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	b976      	cbnz	r6, 8008c58 <_Bfree+0x28>
 8008c3a:	2010      	movs	r0, #16
 8008c3c:	f7ff ff02 	bl	8008a44 <malloc>
 8008c40:	4602      	mov	r2, r0
 8008c42:	61e8      	str	r0, [r5, #28]
 8008c44:	b920      	cbnz	r0, 8008c50 <_Bfree+0x20>
 8008c46:	4b09      	ldr	r3, [pc, #36]	@ (8008c6c <_Bfree+0x3c>)
 8008c48:	4809      	ldr	r0, [pc, #36]	@ (8008c70 <_Bfree+0x40>)
 8008c4a:	218f      	movs	r1, #143	@ 0x8f
 8008c4c:	f000 fd46 	bl	80096dc <__assert_func>
 8008c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c54:	6006      	str	r6, [r0, #0]
 8008c56:	60c6      	str	r6, [r0, #12]
 8008c58:	b13c      	cbz	r4, 8008c6a <_Bfree+0x3a>
 8008c5a:	69eb      	ldr	r3, [r5, #28]
 8008c5c:	6862      	ldr	r2, [r4, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c64:	6021      	str	r1, [r4, #0]
 8008c66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
 8008c6c:	0800b901 	.word	0x0800b901
 8008c70:	0800b981 	.word	0x0800b981

08008c74 <__multadd>:
 8008c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c78:	690d      	ldr	r5, [r1, #16]
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	461e      	mov	r6, r3
 8008c80:	f101 0c14 	add.w	ip, r1, #20
 8008c84:	2000      	movs	r0, #0
 8008c86:	f8dc 3000 	ldr.w	r3, [ip]
 8008c8a:	b299      	uxth	r1, r3
 8008c8c:	fb02 6101 	mla	r1, r2, r1, r6
 8008c90:	0c1e      	lsrs	r6, r3, #16
 8008c92:	0c0b      	lsrs	r3, r1, #16
 8008c94:	fb02 3306 	mla	r3, r2, r6, r3
 8008c98:	b289      	uxth	r1, r1
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ca0:	4285      	cmp	r5, r0
 8008ca2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008caa:	dcec      	bgt.n	8008c86 <__multadd+0x12>
 8008cac:	b30e      	cbz	r6, 8008cf2 <__multadd+0x7e>
 8008cae:	68a3      	ldr	r3, [r4, #8]
 8008cb0:	42ab      	cmp	r3, r5
 8008cb2:	dc19      	bgt.n	8008ce8 <__multadd+0x74>
 8008cb4:	6861      	ldr	r1, [r4, #4]
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	3101      	adds	r1, #1
 8008cba:	f7ff ff79 	bl	8008bb0 <_Balloc>
 8008cbe:	4680      	mov	r8, r0
 8008cc0:	b928      	cbnz	r0, 8008cce <__multadd+0x5a>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf8 <__multadd+0x84>)
 8008cc6:	480d      	ldr	r0, [pc, #52]	@ (8008cfc <__multadd+0x88>)
 8008cc8:	21ba      	movs	r1, #186	@ 0xba
 8008cca:	f000 fd07 	bl	80096dc <__assert_func>
 8008cce:	6922      	ldr	r2, [r4, #16]
 8008cd0:	3202      	adds	r2, #2
 8008cd2:	f104 010c 	add.w	r1, r4, #12
 8008cd6:	0092      	lsls	r2, r2, #2
 8008cd8:	300c      	adds	r0, #12
 8008cda:	f7ff f80c 	bl	8007cf6 <memcpy>
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f7ff ffa5 	bl	8008c30 <_Bfree>
 8008ce6:	4644      	mov	r4, r8
 8008ce8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cec:	3501      	adds	r5, #1
 8008cee:	615e      	str	r6, [r3, #20]
 8008cf0:	6125      	str	r5, [r4, #16]
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf8:	0800b970 	.word	0x0800b970
 8008cfc:	0800b981 	.word	0x0800b981

08008d00 <__hi0bits>:
 8008d00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d04:	4603      	mov	r3, r0
 8008d06:	bf36      	itet	cc
 8008d08:	0403      	lslcc	r3, r0, #16
 8008d0a:	2000      	movcs	r0, #0
 8008d0c:	2010      	movcc	r0, #16
 8008d0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d12:	bf3c      	itt	cc
 8008d14:	021b      	lslcc	r3, r3, #8
 8008d16:	3008      	addcc	r0, #8
 8008d18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d1c:	bf3c      	itt	cc
 8008d1e:	011b      	lslcc	r3, r3, #4
 8008d20:	3004      	addcc	r0, #4
 8008d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d26:	bf3c      	itt	cc
 8008d28:	009b      	lslcc	r3, r3, #2
 8008d2a:	3002      	addcc	r0, #2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	db05      	blt.n	8008d3c <__hi0bits+0x3c>
 8008d30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d34:	f100 0001 	add.w	r0, r0, #1
 8008d38:	bf08      	it	eq
 8008d3a:	2020      	moveq	r0, #32
 8008d3c:	4770      	bx	lr

08008d3e <__lo0bits>:
 8008d3e:	6803      	ldr	r3, [r0, #0]
 8008d40:	4602      	mov	r2, r0
 8008d42:	f013 0007 	ands.w	r0, r3, #7
 8008d46:	d00b      	beq.n	8008d60 <__lo0bits+0x22>
 8008d48:	07d9      	lsls	r1, r3, #31
 8008d4a:	d421      	bmi.n	8008d90 <__lo0bits+0x52>
 8008d4c:	0798      	lsls	r0, r3, #30
 8008d4e:	bf49      	itett	mi
 8008d50:	085b      	lsrmi	r3, r3, #1
 8008d52:	089b      	lsrpl	r3, r3, #2
 8008d54:	2001      	movmi	r0, #1
 8008d56:	6013      	strmi	r3, [r2, #0]
 8008d58:	bf5c      	itt	pl
 8008d5a:	6013      	strpl	r3, [r2, #0]
 8008d5c:	2002      	movpl	r0, #2
 8008d5e:	4770      	bx	lr
 8008d60:	b299      	uxth	r1, r3
 8008d62:	b909      	cbnz	r1, 8008d68 <__lo0bits+0x2a>
 8008d64:	0c1b      	lsrs	r3, r3, #16
 8008d66:	2010      	movs	r0, #16
 8008d68:	b2d9      	uxtb	r1, r3
 8008d6a:	b909      	cbnz	r1, 8008d70 <__lo0bits+0x32>
 8008d6c:	3008      	adds	r0, #8
 8008d6e:	0a1b      	lsrs	r3, r3, #8
 8008d70:	0719      	lsls	r1, r3, #28
 8008d72:	bf04      	itt	eq
 8008d74:	091b      	lsreq	r3, r3, #4
 8008d76:	3004      	addeq	r0, #4
 8008d78:	0799      	lsls	r1, r3, #30
 8008d7a:	bf04      	itt	eq
 8008d7c:	089b      	lsreq	r3, r3, #2
 8008d7e:	3002      	addeq	r0, #2
 8008d80:	07d9      	lsls	r1, r3, #31
 8008d82:	d403      	bmi.n	8008d8c <__lo0bits+0x4e>
 8008d84:	085b      	lsrs	r3, r3, #1
 8008d86:	f100 0001 	add.w	r0, r0, #1
 8008d8a:	d003      	beq.n	8008d94 <__lo0bits+0x56>
 8008d8c:	6013      	str	r3, [r2, #0]
 8008d8e:	4770      	bx	lr
 8008d90:	2000      	movs	r0, #0
 8008d92:	4770      	bx	lr
 8008d94:	2020      	movs	r0, #32
 8008d96:	4770      	bx	lr

08008d98 <__i2b>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	f7ff ff07 	bl	8008bb0 <_Balloc>
 8008da2:	4602      	mov	r2, r0
 8008da4:	b928      	cbnz	r0, 8008db2 <__i2b+0x1a>
 8008da6:	4b05      	ldr	r3, [pc, #20]	@ (8008dbc <__i2b+0x24>)
 8008da8:	4805      	ldr	r0, [pc, #20]	@ (8008dc0 <__i2b+0x28>)
 8008daa:	f240 1145 	movw	r1, #325	@ 0x145
 8008dae:	f000 fc95 	bl	80096dc <__assert_func>
 8008db2:	2301      	movs	r3, #1
 8008db4:	6144      	str	r4, [r0, #20]
 8008db6:	6103      	str	r3, [r0, #16]
 8008db8:	bd10      	pop	{r4, pc}
 8008dba:	bf00      	nop
 8008dbc:	0800b970 	.word	0x0800b970
 8008dc0:	0800b981 	.word	0x0800b981

08008dc4 <__multiply>:
 8008dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	4614      	mov	r4, r2
 8008dca:	690a      	ldr	r2, [r1, #16]
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	bfa8      	it	ge
 8008dd2:	4623      	movge	r3, r4
 8008dd4:	460f      	mov	r7, r1
 8008dd6:	bfa4      	itt	ge
 8008dd8:	460c      	movge	r4, r1
 8008dda:	461f      	movge	r7, r3
 8008ddc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008de0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008de4:	68a3      	ldr	r3, [r4, #8]
 8008de6:	6861      	ldr	r1, [r4, #4]
 8008de8:	eb0a 0609 	add.w	r6, sl, r9
 8008dec:	42b3      	cmp	r3, r6
 8008dee:	b085      	sub	sp, #20
 8008df0:	bfb8      	it	lt
 8008df2:	3101      	addlt	r1, #1
 8008df4:	f7ff fedc 	bl	8008bb0 <_Balloc>
 8008df8:	b930      	cbnz	r0, 8008e08 <__multiply+0x44>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	4b44      	ldr	r3, [pc, #272]	@ (8008f10 <__multiply+0x14c>)
 8008dfe:	4845      	ldr	r0, [pc, #276]	@ (8008f14 <__multiply+0x150>)
 8008e00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e04:	f000 fc6a 	bl	80096dc <__assert_func>
 8008e08:	f100 0514 	add.w	r5, r0, #20
 8008e0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e10:	462b      	mov	r3, r5
 8008e12:	2200      	movs	r2, #0
 8008e14:	4543      	cmp	r3, r8
 8008e16:	d321      	bcc.n	8008e5c <__multiply+0x98>
 8008e18:	f107 0114 	add.w	r1, r7, #20
 8008e1c:	f104 0214 	add.w	r2, r4, #20
 8008e20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e28:	9302      	str	r3, [sp, #8]
 8008e2a:	1b13      	subs	r3, r2, r4
 8008e2c:	3b15      	subs	r3, #21
 8008e2e:	f023 0303 	bic.w	r3, r3, #3
 8008e32:	3304      	adds	r3, #4
 8008e34:	f104 0715 	add.w	r7, r4, #21
 8008e38:	42ba      	cmp	r2, r7
 8008e3a:	bf38      	it	cc
 8008e3c:	2304      	movcc	r3, #4
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	9b02      	ldr	r3, [sp, #8]
 8008e42:	9103      	str	r1, [sp, #12]
 8008e44:	428b      	cmp	r3, r1
 8008e46:	d80c      	bhi.n	8008e62 <__multiply+0x9e>
 8008e48:	2e00      	cmp	r6, #0
 8008e4a:	dd03      	ble.n	8008e54 <__multiply+0x90>
 8008e4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d05b      	beq.n	8008f0c <__multiply+0x148>
 8008e54:	6106      	str	r6, [r0, #16]
 8008e56:	b005      	add	sp, #20
 8008e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5c:	f843 2b04 	str.w	r2, [r3], #4
 8008e60:	e7d8      	b.n	8008e14 <__multiply+0x50>
 8008e62:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e66:	f1ba 0f00 	cmp.w	sl, #0
 8008e6a:	d024      	beq.n	8008eb6 <__multiply+0xf2>
 8008e6c:	f104 0e14 	add.w	lr, r4, #20
 8008e70:	46a9      	mov	r9, r5
 8008e72:	f04f 0c00 	mov.w	ip, #0
 8008e76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e7a:	f8d9 3000 	ldr.w	r3, [r9]
 8008e7e:	fa1f fb87 	uxth.w	fp, r7
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008e8c:	f8d9 7000 	ldr.w	r7, [r9]
 8008e90:	4463      	add	r3, ip
 8008e92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e96:	fb0a c70b 	mla	r7, sl, fp, ip
 8008e9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ea4:	4572      	cmp	r2, lr
 8008ea6:	f849 3b04 	str.w	r3, [r9], #4
 8008eaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008eae:	d8e2      	bhi.n	8008e76 <__multiply+0xb2>
 8008eb0:	9b01      	ldr	r3, [sp, #4]
 8008eb2:	f845 c003 	str.w	ip, [r5, r3]
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ebc:	3104      	adds	r1, #4
 8008ebe:	f1b9 0f00 	cmp.w	r9, #0
 8008ec2:	d021      	beq.n	8008f08 <__multiply+0x144>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	f104 0c14 	add.w	ip, r4, #20
 8008eca:	46ae      	mov	lr, r5
 8008ecc:	f04f 0a00 	mov.w	sl, #0
 8008ed0:	f8bc b000 	ldrh.w	fp, [ip]
 8008ed4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008ed8:	fb09 770b 	mla	r7, r9, fp, r7
 8008edc:	4457      	add	r7, sl
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ee4:	f84e 3b04 	str.w	r3, [lr], #4
 8008ee8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008eec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ef0:	f8be 3000 	ldrh.w	r3, [lr]
 8008ef4:	fb09 330a 	mla	r3, r9, sl, r3
 8008ef8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008efc:	4562      	cmp	r2, ip
 8008efe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f02:	d8e5      	bhi.n	8008ed0 <__multiply+0x10c>
 8008f04:	9f01      	ldr	r7, [sp, #4]
 8008f06:	51eb      	str	r3, [r5, r7]
 8008f08:	3504      	adds	r5, #4
 8008f0a:	e799      	b.n	8008e40 <__multiply+0x7c>
 8008f0c:	3e01      	subs	r6, #1
 8008f0e:	e79b      	b.n	8008e48 <__multiply+0x84>
 8008f10:	0800b970 	.word	0x0800b970
 8008f14:	0800b981 	.word	0x0800b981

08008f18 <__pow5mult>:
 8008f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f1c:	4615      	mov	r5, r2
 8008f1e:	f012 0203 	ands.w	r2, r2, #3
 8008f22:	4607      	mov	r7, r0
 8008f24:	460e      	mov	r6, r1
 8008f26:	d007      	beq.n	8008f38 <__pow5mult+0x20>
 8008f28:	4c25      	ldr	r4, [pc, #148]	@ (8008fc0 <__pow5mult+0xa8>)
 8008f2a:	3a01      	subs	r2, #1
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f32:	f7ff fe9f 	bl	8008c74 <__multadd>
 8008f36:	4606      	mov	r6, r0
 8008f38:	10ad      	asrs	r5, r5, #2
 8008f3a:	d03d      	beq.n	8008fb8 <__pow5mult+0xa0>
 8008f3c:	69fc      	ldr	r4, [r7, #28]
 8008f3e:	b97c      	cbnz	r4, 8008f60 <__pow5mult+0x48>
 8008f40:	2010      	movs	r0, #16
 8008f42:	f7ff fd7f 	bl	8008a44 <malloc>
 8008f46:	4602      	mov	r2, r0
 8008f48:	61f8      	str	r0, [r7, #28]
 8008f4a:	b928      	cbnz	r0, 8008f58 <__pow5mult+0x40>
 8008f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc4 <__pow5mult+0xac>)
 8008f4e:	481e      	ldr	r0, [pc, #120]	@ (8008fc8 <__pow5mult+0xb0>)
 8008f50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f54:	f000 fbc2 	bl	80096dc <__assert_func>
 8008f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f5c:	6004      	str	r4, [r0, #0]
 8008f5e:	60c4      	str	r4, [r0, #12]
 8008f60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f68:	b94c      	cbnz	r4, 8008f7e <__pow5mult+0x66>
 8008f6a:	f240 2171 	movw	r1, #625	@ 0x271
 8008f6e:	4638      	mov	r0, r7
 8008f70:	f7ff ff12 	bl	8008d98 <__i2b>
 8008f74:	2300      	movs	r3, #0
 8008f76:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	6003      	str	r3, [r0, #0]
 8008f7e:	f04f 0900 	mov.w	r9, #0
 8008f82:	07eb      	lsls	r3, r5, #31
 8008f84:	d50a      	bpl.n	8008f9c <__pow5mult+0x84>
 8008f86:	4631      	mov	r1, r6
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	f7ff ff1a 	bl	8008dc4 <__multiply>
 8008f90:	4631      	mov	r1, r6
 8008f92:	4680      	mov	r8, r0
 8008f94:	4638      	mov	r0, r7
 8008f96:	f7ff fe4b 	bl	8008c30 <_Bfree>
 8008f9a:	4646      	mov	r6, r8
 8008f9c:	106d      	asrs	r5, r5, #1
 8008f9e:	d00b      	beq.n	8008fb8 <__pow5mult+0xa0>
 8008fa0:	6820      	ldr	r0, [r4, #0]
 8008fa2:	b938      	cbnz	r0, 8008fb4 <__pow5mult+0x9c>
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f7ff ff0b 	bl	8008dc4 <__multiply>
 8008fae:	6020      	str	r0, [r4, #0]
 8008fb0:	f8c0 9000 	str.w	r9, [r0]
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	e7e4      	b.n	8008f82 <__pow5mult+0x6a>
 8008fb8:	4630      	mov	r0, r6
 8008fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fbe:	bf00      	nop
 8008fc0:	0800b9dc 	.word	0x0800b9dc
 8008fc4:	0800b901 	.word	0x0800b901
 8008fc8:	0800b981 	.word	0x0800b981

08008fcc <__lshift>:
 8008fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	6849      	ldr	r1, [r1, #4]
 8008fd4:	6923      	ldr	r3, [r4, #16]
 8008fd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fda:	68a3      	ldr	r3, [r4, #8]
 8008fdc:	4607      	mov	r7, r0
 8008fde:	4691      	mov	r9, r2
 8008fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fe4:	f108 0601 	add.w	r6, r8, #1
 8008fe8:	42b3      	cmp	r3, r6
 8008fea:	db0b      	blt.n	8009004 <__lshift+0x38>
 8008fec:	4638      	mov	r0, r7
 8008fee:	f7ff fddf 	bl	8008bb0 <_Balloc>
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	b948      	cbnz	r0, 800900a <__lshift+0x3e>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	4b28      	ldr	r3, [pc, #160]	@ (800909c <__lshift+0xd0>)
 8008ffa:	4829      	ldr	r0, [pc, #164]	@ (80090a0 <__lshift+0xd4>)
 8008ffc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009000:	f000 fb6c 	bl	80096dc <__assert_func>
 8009004:	3101      	adds	r1, #1
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	e7ee      	b.n	8008fe8 <__lshift+0x1c>
 800900a:	2300      	movs	r3, #0
 800900c:	f100 0114 	add.w	r1, r0, #20
 8009010:	f100 0210 	add.w	r2, r0, #16
 8009014:	4618      	mov	r0, r3
 8009016:	4553      	cmp	r3, sl
 8009018:	db33      	blt.n	8009082 <__lshift+0xb6>
 800901a:	6920      	ldr	r0, [r4, #16]
 800901c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009020:	f104 0314 	add.w	r3, r4, #20
 8009024:	f019 091f 	ands.w	r9, r9, #31
 8009028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800902c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009030:	d02b      	beq.n	800908a <__lshift+0xbe>
 8009032:	f1c9 0e20 	rsb	lr, r9, #32
 8009036:	468a      	mov	sl, r1
 8009038:	2200      	movs	r2, #0
 800903a:	6818      	ldr	r0, [r3, #0]
 800903c:	fa00 f009 	lsl.w	r0, r0, r9
 8009040:	4310      	orrs	r0, r2
 8009042:	f84a 0b04 	str.w	r0, [sl], #4
 8009046:	f853 2b04 	ldr.w	r2, [r3], #4
 800904a:	459c      	cmp	ip, r3
 800904c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009050:	d8f3      	bhi.n	800903a <__lshift+0x6e>
 8009052:	ebac 0304 	sub.w	r3, ip, r4
 8009056:	3b15      	subs	r3, #21
 8009058:	f023 0303 	bic.w	r3, r3, #3
 800905c:	3304      	adds	r3, #4
 800905e:	f104 0015 	add.w	r0, r4, #21
 8009062:	4584      	cmp	ip, r0
 8009064:	bf38      	it	cc
 8009066:	2304      	movcc	r3, #4
 8009068:	50ca      	str	r2, [r1, r3]
 800906a:	b10a      	cbz	r2, 8009070 <__lshift+0xa4>
 800906c:	f108 0602 	add.w	r6, r8, #2
 8009070:	3e01      	subs	r6, #1
 8009072:	4638      	mov	r0, r7
 8009074:	612e      	str	r6, [r5, #16]
 8009076:	4621      	mov	r1, r4
 8009078:	f7ff fdda 	bl	8008c30 <_Bfree>
 800907c:	4628      	mov	r0, r5
 800907e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009082:	f842 0f04 	str.w	r0, [r2, #4]!
 8009086:	3301      	adds	r3, #1
 8009088:	e7c5      	b.n	8009016 <__lshift+0x4a>
 800908a:	3904      	subs	r1, #4
 800908c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009090:	f841 2f04 	str.w	r2, [r1, #4]!
 8009094:	459c      	cmp	ip, r3
 8009096:	d8f9      	bhi.n	800908c <__lshift+0xc0>
 8009098:	e7ea      	b.n	8009070 <__lshift+0xa4>
 800909a:	bf00      	nop
 800909c:	0800b970 	.word	0x0800b970
 80090a0:	0800b981 	.word	0x0800b981

080090a4 <__mcmp>:
 80090a4:	690a      	ldr	r2, [r1, #16]
 80090a6:	4603      	mov	r3, r0
 80090a8:	6900      	ldr	r0, [r0, #16]
 80090aa:	1a80      	subs	r0, r0, r2
 80090ac:	b530      	push	{r4, r5, lr}
 80090ae:	d10e      	bne.n	80090ce <__mcmp+0x2a>
 80090b0:	3314      	adds	r3, #20
 80090b2:	3114      	adds	r1, #20
 80090b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090c4:	4295      	cmp	r5, r2
 80090c6:	d003      	beq.n	80090d0 <__mcmp+0x2c>
 80090c8:	d205      	bcs.n	80090d6 <__mcmp+0x32>
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	bd30      	pop	{r4, r5, pc}
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	d3f3      	bcc.n	80090bc <__mcmp+0x18>
 80090d4:	e7fb      	b.n	80090ce <__mcmp+0x2a>
 80090d6:	2001      	movs	r0, #1
 80090d8:	e7f9      	b.n	80090ce <__mcmp+0x2a>
	...

080090dc <__mdiff>:
 80090dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e0:	4689      	mov	r9, r1
 80090e2:	4606      	mov	r6, r0
 80090e4:	4611      	mov	r1, r2
 80090e6:	4648      	mov	r0, r9
 80090e8:	4614      	mov	r4, r2
 80090ea:	f7ff ffdb 	bl	80090a4 <__mcmp>
 80090ee:	1e05      	subs	r5, r0, #0
 80090f0:	d112      	bne.n	8009118 <__mdiff+0x3c>
 80090f2:	4629      	mov	r1, r5
 80090f4:	4630      	mov	r0, r6
 80090f6:	f7ff fd5b 	bl	8008bb0 <_Balloc>
 80090fa:	4602      	mov	r2, r0
 80090fc:	b928      	cbnz	r0, 800910a <__mdiff+0x2e>
 80090fe:	4b3f      	ldr	r3, [pc, #252]	@ (80091fc <__mdiff+0x120>)
 8009100:	f240 2137 	movw	r1, #567	@ 0x237
 8009104:	483e      	ldr	r0, [pc, #248]	@ (8009200 <__mdiff+0x124>)
 8009106:	f000 fae9 	bl	80096dc <__assert_func>
 800910a:	2301      	movs	r3, #1
 800910c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009110:	4610      	mov	r0, r2
 8009112:	b003      	add	sp, #12
 8009114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009118:	bfbc      	itt	lt
 800911a:	464b      	movlt	r3, r9
 800911c:	46a1      	movlt	r9, r4
 800911e:	4630      	mov	r0, r6
 8009120:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009124:	bfba      	itte	lt
 8009126:	461c      	movlt	r4, r3
 8009128:	2501      	movlt	r5, #1
 800912a:	2500      	movge	r5, #0
 800912c:	f7ff fd40 	bl	8008bb0 <_Balloc>
 8009130:	4602      	mov	r2, r0
 8009132:	b918      	cbnz	r0, 800913c <__mdiff+0x60>
 8009134:	4b31      	ldr	r3, [pc, #196]	@ (80091fc <__mdiff+0x120>)
 8009136:	f240 2145 	movw	r1, #581	@ 0x245
 800913a:	e7e3      	b.n	8009104 <__mdiff+0x28>
 800913c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009140:	6926      	ldr	r6, [r4, #16]
 8009142:	60c5      	str	r5, [r0, #12]
 8009144:	f109 0310 	add.w	r3, r9, #16
 8009148:	f109 0514 	add.w	r5, r9, #20
 800914c:	f104 0e14 	add.w	lr, r4, #20
 8009150:	f100 0b14 	add.w	fp, r0, #20
 8009154:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009158:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	46d9      	mov	r9, fp
 8009160:	f04f 0c00 	mov.w	ip, #0
 8009164:	9b01      	ldr	r3, [sp, #4]
 8009166:	f85e 0b04 	ldr.w	r0, [lr], #4
 800916a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	fa1f f38a 	uxth.w	r3, sl
 8009174:	4619      	mov	r1, r3
 8009176:	b283      	uxth	r3, r0
 8009178:	1acb      	subs	r3, r1, r3
 800917a:	0c00      	lsrs	r0, r0, #16
 800917c:	4463      	add	r3, ip
 800917e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009182:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009186:	b29b      	uxth	r3, r3
 8009188:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800918c:	4576      	cmp	r6, lr
 800918e:	f849 3b04 	str.w	r3, [r9], #4
 8009192:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009196:	d8e5      	bhi.n	8009164 <__mdiff+0x88>
 8009198:	1b33      	subs	r3, r6, r4
 800919a:	3b15      	subs	r3, #21
 800919c:	f023 0303 	bic.w	r3, r3, #3
 80091a0:	3415      	adds	r4, #21
 80091a2:	3304      	adds	r3, #4
 80091a4:	42a6      	cmp	r6, r4
 80091a6:	bf38      	it	cc
 80091a8:	2304      	movcc	r3, #4
 80091aa:	441d      	add	r5, r3
 80091ac:	445b      	add	r3, fp
 80091ae:	461e      	mov	r6, r3
 80091b0:	462c      	mov	r4, r5
 80091b2:	4544      	cmp	r4, r8
 80091b4:	d30e      	bcc.n	80091d4 <__mdiff+0xf8>
 80091b6:	f108 0103 	add.w	r1, r8, #3
 80091ba:	1b49      	subs	r1, r1, r5
 80091bc:	f021 0103 	bic.w	r1, r1, #3
 80091c0:	3d03      	subs	r5, #3
 80091c2:	45a8      	cmp	r8, r5
 80091c4:	bf38      	it	cc
 80091c6:	2100      	movcc	r1, #0
 80091c8:	440b      	add	r3, r1
 80091ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091ce:	b191      	cbz	r1, 80091f6 <__mdiff+0x11a>
 80091d0:	6117      	str	r7, [r2, #16]
 80091d2:	e79d      	b.n	8009110 <__mdiff+0x34>
 80091d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80091d8:	46e6      	mov	lr, ip
 80091da:	0c08      	lsrs	r0, r1, #16
 80091dc:	fa1c fc81 	uxtah	ip, ip, r1
 80091e0:	4471      	add	r1, lr
 80091e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80091e6:	b289      	uxth	r1, r1
 80091e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80091ec:	f846 1b04 	str.w	r1, [r6], #4
 80091f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091f4:	e7dd      	b.n	80091b2 <__mdiff+0xd6>
 80091f6:	3f01      	subs	r7, #1
 80091f8:	e7e7      	b.n	80091ca <__mdiff+0xee>
 80091fa:	bf00      	nop
 80091fc:	0800b970 	.word	0x0800b970
 8009200:	0800b981 	.word	0x0800b981

08009204 <__d2b>:
 8009204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009208:	460f      	mov	r7, r1
 800920a:	2101      	movs	r1, #1
 800920c:	ec59 8b10 	vmov	r8, r9, d0
 8009210:	4616      	mov	r6, r2
 8009212:	f7ff fccd 	bl	8008bb0 <_Balloc>
 8009216:	4604      	mov	r4, r0
 8009218:	b930      	cbnz	r0, 8009228 <__d2b+0x24>
 800921a:	4602      	mov	r2, r0
 800921c:	4b23      	ldr	r3, [pc, #140]	@ (80092ac <__d2b+0xa8>)
 800921e:	4824      	ldr	r0, [pc, #144]	@ (80092b0 <__d2b+0xac>)
 8009220:	f240 310f 	movw	r1, #783	@ 0x30f
 8009224:	f000 fa5a 	bl	80096dc <__assert_func>
 8009228:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800922c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009230:	b10d      	cbz	r5, 8009236 <__d2b+0x32>
 8009232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	f1b8 0300 	subs.w	r3, r8, #0
 800923c:	d023      	beq.n	8009286 <__d2b+0x82>
 800923e:	4668      	mov	r0, sp
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	f7ff fd7c 	bl	8008d3e <__lo0bits>
 8009246:	e9dd 1200 	ldrd	r1, r2, [sp]
 800924a:	b1d0      	cbz	r0, 8009282 <__d2b+0x7e>
 800924c:	f1c0 0320 	rsb	r3, r0, #32
 8009250:	fa02 f303 	lsl.w	r3, r2, r3
 8009254:	430b      	orrs	r3, r1
 8009256:	40c2      	lsrs	r2, r0
 8009258:	6163      	str	r3, [r4, #20]
 800925a:	9201      	str	r2, [sp, #4]
 800925c:	9b01      	ldr	r3, [sp, #4]
 800925e:	61a3      	str	r3, [r4, #24]
 8009260:	2b00      	cmp	r3, #0
 8009262:	bf0c      	ite	eq
 8009264:	2201      	moveq	r2, #1
 8009266:	2202      	movne	r2, #2
 8009268:	6122      	str	r2, [r4, #16]
 800926a:	b1a5      	cbz	r5, 8009296 <__d2b+0x92>
 800926c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009270:	4405      	add	r5, r0
 8009272:	603d      	str	r5, [r7, #0]
 8009274:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009278:	6030      	str	r0, [r6, #0]
 800927a:	4620      	mov	r0, r4
 800927c:	b003      	add	sp, #12
 800927e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009282:	6161      	str	r1, [r4, #20]
 8009284:	e7ea      	b.n	800925c <__d2b+0x58>
 8009286:	a801      	add	r0, sp, #4
 8009288:	f7ff fd59 	bl	8008d3e <__lo0bits>
 800928c:	9b01      	ldr	r3, [sp, #4]
 800928e:	6163      	str	r3, [r4, #20]
 8009290:	3020      	adds	r0, #32
 8009292:	2201      	movs	r2, #1
 8009294:	e7e8      	b.n	8009268 <__d2b+0x64>
 8009296:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800929a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800929e:	6038      	str	r0, [r7, #0]
 80092a0:	6918      	ldr	r0, [r3, #16]
 80092a2:	f7ff fd2d 	bl	8008d00 <__hi0bits>
 80092a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092aa:	e7e5      	b.n	8009278 <__d2b+0x74>
 80092ac:	0800b970 	.word	0x0800b970
 80092b0:	0800b981 	.word	0x0800b981

080092b4 <__ssputs_r>:
 80092b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b8:	688e      	ldr	r6, [r1, #8]
 80092ba:	461f      	mov	r7, r3
 80092bc:	42be      	cmp	r6, r7
 80092be:	680b      	ldr	r3, [r1, #0]
 80092c0:	4682      	mov	sl, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	4690      	mov	r8, r2
 80092c6:	d82d      	bhi.n	8009324 <__ssputs_r+0x70>
 80092c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80092d0:	d026      	beq.n	8009320 <__ssputs_r+0x6c>
 80092d2:	6965      	ldr	r5, [r4, #20]
 80092d4:	6909      	ldr	r1, [r1, #16]
 80092d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092da:	eba3 0901 	sub.w	r9, r3, r1
 80092de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092e2:	1c7b      	adds	r3, r7, #1
 80092e4:	444b      	add	r3, r9
 80092e6:	106d      	asrs	r5, r5, #1
 80092e8:	429d      	cmp	r5, r3
 80092ea:	bf38      	it	cc
 80092ec:	461d      	movcc	r5, r3
 80092ee:	0553      	lsls	r3, r2, #21
 80092f0:	d527      	bpl.n	8009342 <__ssputs_r+0x8e>
 80092f2:	4629      	mov	r1, r5
 80092f4:	f7ff fbd0 	bl	8008a98 <_malloc_r>
 80092f8:	4606      	mov	r6, r0
 80092fa:	b360      	cbz	r0, 8009356 <__ssputs_r+0xa2>
 80092fc:	6921      	ldr	r1, [r4, #16]
 80092fe:	464a      	mov	r2, r9
 8009300:	f7fe fcf9 	bl	8007cf6 <memcpy>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800930a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	6126      	str	r6, [r4, #16]
 8009312:	6165      	str	r5, [r4, #20]
 8009314:	444e      	add	r6, r9
 8009316:	eba5 0509 	sub.w	r5, r5, r9
 800931a:	6026      	str	r6, [r4, #0]
 800931c:	60a5      	str	r5, [r4, #8]
 800931e:	463e      	mov	r6, r7
 8009320:	42be      	cmp	r6, r7
 8009322:	d900      	bls.n	8009326 <__ssputs_r+0x72>
 8009324:	463e      	mov	r6, r7
 8009326:	6820      	ldr	r0, [r4, #0]
 8009328:	4632      	mov	r2, r6
 800932a:	4641      	mov	r1, r8
 800932c:	f7fe fc49 	bl	8007bc2 <memmove>
 8009330:	68a3      	ldr	r3, [r4, #8]
 8009332:	1b9b      	subs	r3, r3, r6
 8009334:	60a3      	str	r3, [r4, #8]
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	4433      	add	r3, r6
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	2000      	movs	r0, #0
 800933e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009342:	462a      	mov	r2, r5
 8009344:	f000 fa0e 	bl	8009764 <_realloc_r>
 8009348:	4606      	mov	r6, r0
 800934a:	2800      	cmp	r0, #0
 800934c:	d1e0      	bne.n	8009310 <__ssputs_r+0x5c>
 800934e:	6921      	ldr	r1, [r4, #16]
 8009350:	4650      	mov	r0, sl
 8009352:	f7ff fb2d 	bl	80089b0 <_free_r>
 8009356:	230c      	movs	r3, #12
 8009358:	f8ca 3000 	str.w	r3, [sl]
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009362:	81a3      	strh	r3, [r4, #12]
 8009364:	f04f 30ff 	mov.w	r0, #4294967295
 8009368:	e7e9      	b.n	800933e <__ssputs_r+0x8a>
	...

0800936c <_svfiprintf_r>:
 800936c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009370:	4698      	mov	r8, r3
 8009372:	898b      	ldrh	r3, [r1, #12]
 8009374:	061b      	lsls	r3, r3, #24
 8009376:	b09d      	sub	sp, #116	@ 0x74
 8009378:	4607      	mov	r7, r0
 800937a:	460d      	mov	r5, r1
 800937c:	4614      	mov	r4, r2
 800937e:	d510      	bpl.n	80093a2 <_svfiprintf_r+0x36>
 8009380:	690b      	ldr	r3, [r1, #16]
 8009382:	b973      	cbnz	r3, 80093a2 <_svfiprintf_r+0x36>
 8009384:	2140      	movs	r1, #64	@ 0x40
 8009386:	f7ff fb87 	bl	8008a98 <_malloc_r>
 800938a:	6028      	str	r0, [r5, #0]
 800938c:	6128      	str	r0, [r5, #16]
 800938e:	b930      	cbnz	r0, 800939e <_svfiprintf_r+0x32>
 8009390:	230c      	movs	r3, #12
 8009392:	603b      	str	r3, [r7, #0]
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	b01d      	add	sp, #116	@ 0x74
 800939a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939e:	2340      	movs	r3, #64	@ 0x40
 80093a0:	616b      	str	r3, [r5, #20]
 80093a2:	2300      	movs	r3, #0
 80093a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093a6:	2320      	movs	r3, #32
 80093a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80093b0:	2330      	movs	r3, #48	@ 0x30
 80093b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009550 <_svfiprintf_r+0x1e4>
 80093b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093ba:	f04f 0901 	mov.w	r9, #1
 80093be:	4623      	mov	r3, r4
 80093c0:	469a      	mov	sl, r3
 80093c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093c6:	b10a      	cbz	r2, 80093cc <_svfiprintf_r+0x60>
 80093c8:	2a25      	cmp	r2, #37	@ 0x25
 80093ca:	d1f9      	bne.n	80093c0 <_svfiprintf_r+0x54>
 80093cc:	ebba 0b04 	subs.w	fp, sl, r4
 80093d0:	d00b      	beq.n	80093ea <_svfiprintf_r+0x7e>
 80093d2:	465b      	mov	r3, fp
 80093d4:	4622      	mov	r2, r4
 80093d6:	4629      	mov	r1, r5
 80093d8:	4638      	mov	r0, r7
 80093da:	f7ff ff6b 	bl	80092b4 <__ssputs_r>
 80093de:	3001      	adds	r0, #1
 80093e0:	f000 80a7 	beq.w	8009532 <_svfiprintf_r+0x1c6>
 80093e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093e6:	445a      	add	r2, fp
 80093e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80093ea:	f89a 3000 	ldrb.w	r3, [sl]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 809f 	beq.w	8009532 <_svfiprintf_r+0x1c6>
 80093f4:	2300      	movs	r3, #0
 80093f6:	f04f 32ff 	mov.w	r2, #4294967295
 80093fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093fe:	f10a 0a01 	add.w	sl, sl, #1
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	9307      	str	r3, [sp, #28]
 8009406:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800940a:	931a      	str	r3, [sp, #104]	@ 0x68
 800940c:	4654      	mov	r4, sl
 800940e:	2205      	movs	r2, #5
 8009410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009414:	484e      	ldr	r0, [pc, #312]	@ (8009550 <_svfiprintf_r+0x1e4>)
 8009416:	f7f6 fedb 	bl	80001d0 <memchr>
 800941a:	9a04      	ldr	r2, [sp, #16]
 800941c:	b9d8      	cbnz	r0, 8009456 <_svfiprintf_r+0xea>
 800941e:	06d0      	lsls	r0, r2, #27
 8009420:	bf44      	itt	mi
 8009422:	2320      	movmi	r3, #32
 8009424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009428:	0711      	lsls	r1, r2, #28
 800942a:	bf44      	itt	mi
 800942c:	232b      	movmi	r3, #43	@ 0x2b
 800942e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009432:	f89a 3000 	ldrb.w	r3, [sl]
 8009436:	2b2a      	cmp	r3, #42	@ 0x2a
 8009438:	d015      	beq.n	8009466 <_svfiprintf_r+0xfa>
 800943a:	9a07      	ldr	r2, [sp, #28]
 800943c:	4654      	mov	r4, sl
 800943e:	2000      	movs	r0, #0
 8009440:	f04f 0c0a 	mov.w	ip, #10
 8009444:	4621      	mov	r1, r4
 8009446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800944a:	3b30      	subs	r3, #48	@ 0x30
 800944c:	2b09      	cmp	r3, #9
 800944e:	d94b      	bls.n	80094e8 <_svfiprintf_r+0x17c>
 8009450:	b1b0      	cbz	r0, 8009480 <_svfiprintf_r+0x114>
 8009452:	9207      	str	r2, [sp, #28]
 8009454:	e014      	b.n	8009480 <_svfiprintf_r+0x114>
 8009456:	eba0 0308 	sub.w	r3, r0, r8
 800945a:	fa09 f303 	lsl.w	r3, r9, r3
 800945e:	4313      	orrs	r3, r2
 8009460:	9304      	str	r3, [sp, #16]
 8009462:	46a2      	mov	sl, r4
 8009464:	e7d2      	b.n	800940c <_svfiprintf_r+0xa0>
 8009466:	9b03      	ldr	r3, [sp, #12]
 8009468:	1d19      	adds	r1, r3, #4
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	9103      	str	r1, [sp, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	bfbb      	ittet	lt
 8009472:	425b      	neglt	r3, r3
 8009474:	f042 0202 	orrlt.w	r2, r2, #2
 8009478:	9307      	strge	r3, [sp, #28]
 800947a:	9307      	strlt	r3, [sp, #28]
 800947c:	bfb8      	it	lt
 800947e:	9204      	strlt	r2, [sp, #16]
 8009480:	7823      	ldrb	r3, [r4, #0]
 8009482:	2b2e      	cmp	r3, #46	@ 0x2e
 8009484:	d10a      	bne.n	800949c <_svfiprintf_r+0x130>
 8009486:	7863      	ldrb	r3, [r4, #1]
 8009488:	2b2a      	cmp	r3, #42	@ 0x2a
 800948a:	d132      	bne.n	80094f2 <_svfiprintf_r+0x186>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	1d1a      	adds	r2, r3, #4
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	9203      	str	r2, [sp, #12]
 8009494:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009498:	3402      	adds	r4, #2
 800949a:	9305      	str	r3, [sp, #20]
 800949c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009560 <_svfiprintf_r+0x1f4>
 80094a0:	7821      	ldrb	r1, [r4, #0]
 80094a2:	2203      	movs	r2, #3
 80094a4:	4650      	mov	r0, sl
 80094a6:	f7f6 fe93 	bl	80001d0 <memchr>
 80094aa:	b138      	cbz	r0, 80094bc <_svfiprintf_r+0x150>
 80094ac:	9b04      	ldr	r3, [sp, #16]
 80094ae:	eba0 000a 	sub.w	r0, r0, sl
 80094b2:	2240      	movs	r2, #64	@ 0x40
 80094b4:	4082      	lsls	r2, r0
 80094b6:	4313      	orrs	r3, r2
 80094b8:	3401      	adds	r4, #1
 80094ba:	9304      	str	r3, [sp, #16]
 80094bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c0:	4824      	ldr	r0, [pc, #144]	@ (8009554 <_svfiprintf_r+0x1e8>)
 80094c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094c6:	2206      	movs	r2, #6
 80094c8:	f7f6 fe82 	bl	80001d0 <memchr>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d036      	beq.n	800953e <_svfiprintf_r+0x1d2>
 80094d0:	4b21      	ldr	r3, [pc, #132]	@ (8009558 <_svfiprintf_r+0x1ec>)
 80094d2:	bb1b      	cbnz	r3, 800951c <_svfiprintf_r+0x1b0>
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	3307      	adds	r3, #7
 80094d8:	f023 0307 	bic.w	r3, r3, #7
 80094dc:	3308      	adds	r3, #8
 80094de:	9303      	str	r3, [sp, #12]
 80094e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e2:	4433      	add	r3, r6
 80094e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094e6:	e76a      	b.n	80093be <_svfiprintf_r+0x52>
 80094e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80094ec:	460c      	mov	r4, r1
 80094ee:	2001      	movs	r0, #1
 80094f0:	e7a8      	b.n	8009444 <_svfiprintf_r+0xd8>
 80094f2:	2300      	movs	r3, #0
 80094f4:	3401      	adds	r4, #1
 80094f6:	9305      	str	r3, [sp, #20]
 80094f8:	4619      	mov	r1, r3
 80094fa:	f04f 0c0a 	mov.w	ip, #10
 80094fe:	4620      	mov	r0, r4
 8009500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009504:	3a30      	subs	r2, #48	@ 0x30
 8009506:	2a09      	cmp	r2, #9
 8009508:	d903      	bls.n	8009512 <_svfiprintf_r+0x1a6>
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0c6      	beq.n	800949c <_svfiprintf_r+0x130>
 800950e:	9105      	str	r1, [sp, #20]
 8009510:	e7c4      	b.n	800949c <_svfiprintf_r+0x130>
 8009512:	fb0c 2101 	mla	r1, ip, r1, r2
 8009516:	4604      	mov	r4, r0
 8009518:	2301      	movs	r3, #1
 800951a:	e7f0      	b.n	80094fe <_svfiprintf_r+0x192>
 800951c:	ab03      	add	r3, sp, #12
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	462a      	mov	r2, r5
 8009522:	4b0e      	ldr	r3, [pc, #56]	@ (800955c <_svfiprintf_r+0x1f0>)
 8009524:	a904      	add	r1, sp, #16
 8009526:	4638      	mov	r0, r7
 8009528:	f7fd fe5a 	bl	80071e0 <_printf_float>
 800952c:	1c42      	adds	r2, r0, #1
 800952e:	4606      	mov	r6, r0
 8009530:	d1d6      	bne.n	80094e0 <_svfiprintf_r+0x174>
 8009532:	89ab      	ldrh	r3, [r5, #12]
 8009534:	065b      	lsls	r3, r3, #25
 8009536:	f53f af2d 	bmi.w	8009394 <_svfiprintf_r+0x28>
 800953a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800953c:	e72c      	b.n	8009398 <_svfiprintf_r+0x2c>
 800953e:	ab03      	add	r3, sp, #12
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	462a      	mov	r2, r5
 8009544:	4b05      	ldr	r3, [pc, #20]	@ (800955c <_svfiprintf_r+0x1f0>)
 8009546:	a904      	add	r1, sp, #16
 8009548:	4638      	mov	r0, r7
 800954a:	f7fe f8e1 	bl	8007710 <_printf_i>
 800954e:	e7ed      	b.n	800952c <_svfiprintf_r+0x1c0>
 8009550:	0800bad8 	.word	0x0800bad8
 8009554:	0800bae2 	.word	0x0800bae2
 8009558:	080071e1 	.word	0x080071e1
 800955c:	080092b5 	.word	0x080092b5
 8009560:	0800bade 	.word	0x0800bade

08009564 <__sflush_r>:
 8009564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956c:	0716      	lsls	r6, r2, #28
 800956e:	4605      	mov	r5, r0
 8009570:	460c      	mov	r4, r1
 8009572:	d454      	bmi.n	800961e <__sflush_r+0xba>
 8009574:	684b      	ldr	r3, [r1, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	dc02      	bgt.n	8009580 <__sflush_r+0x1c>
 800957a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800957c:	2b00      	cmp	r3, #0
 800957e:	dd48      	ble.n	8009612 <__sflush_r+0xae>
 8009580:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009582:	2e00      	cmp	r6, #0
 8009584:	d045      	beq.n	8009612 <__sflush_r+0xae>
 8009586:	2300      	movs	r3, #0
 8009588:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800958c:	682f      	ldr	r7, [r5, #0]
 800958e:	6a21      	ldr	r1, [r4, #32]
 8009590:	602b      	str	r3, [r5, #0]
 8009592:	d030      	beq.n	80095f6 <__sflush_r+0x92>
 8009594:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	0759      	lsls	r1, r3, #29
 800959a:	d505      	bpl.n	80095a8 <__sflush_r+0x44>
 800959c:	6863      	ldr	r3, [r4, #4]
 800959e:	1ad2      	subs	r2, r2, r3
 80095a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095a2:	b10b      	cbz	r3, 80095a8 <__sflush_r+0x44>
 80095a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095a6:	1ad2      	subs	r2, r2, r3
 80095a8:	2300      	movs	r3, #0
 80095aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095ac:	6a21      	ldr	r1, [r4, #32]
 80095ae:	4628      	mov	r0, r5
 80095b0:	47b0      	blx	r6
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	d106      	bne.n	80095c6 <__sflush_r+0x62>
 80095b8:	6829      	ldr	r1, [r5, #0]
 80095ba:	291d      	cmp	r1, #29
 80095bc:	d82b      	bhi.n	8009616 <__sflush_r+0xb2>
 80095be:	4a2a      	ldr	r2, [pc, #168]	@ (8009668 <__sflush_r+0x104>)
 80095c0:	410a      	asrs	r2, r1
 80095c2:	07d6      	lsls	r6, r2, #31
 80095c4:	d427      	bmi.n	8009616 <__sflush_r+0xb2>
 80095c6:	2200      	movs	r2, #0
 80095c8:	6062      	str	r2, [r4, #4]
 80095ca:	04d9      	lsls	r1, r3, #19
 80095cc:	6922      	ldr	r2, [r4, #16]
 80095ce:	6022      	str	r2, [r4, #0]
 80095d0:	d504      	bpl.n	80095dc <__sflush_r+0x78>
 80095d2:	1c42      	adds	r2, r0, #1
 80095d4:	d101      	bne.n	80095da <__sflush_r+0x76>
 80095d6:	682b      	ldr	r3, [r5, #0]
 80095d8:	b903      	cbnz	r3, 80095dc <__sflush_r+0x78>
 80095da:	6560      	str	r0, [r4, #84]	@ 0x54
 80095dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095de:	602f      	str	r7, [r5, #0]
 80095e0:	b1b9      	cbz	r1, 8009612 <__sflush_r+0xae>
 80095e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095e6:	4299      	cmp	r1, r3
 80095e8:	d002      	beq.n	80095f0 <__sflush_r+0x8c>
 80095ea:	4628      	mov	r0, r5
 80095ec:	f7ff f9e0 	bl	80089b0 <_free_r>
 80095f0:	2300      	movs	r3, #0
 80095f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80095f4:	e00d      	b.n	8009612 <__sflush_r+0xae>
 80095f6:	2301      	movs	r3, #1
 80095f8:	4628      	mov	r0, r5
 80095fa:	47b0      	blx	r6
 80095fc:	4602      	mov	r2, r0
 80095fe:	1c50      	adds	r0, r2, #1
 8009600:	d1c9      	bne.n	8009596 <__sflush_r+0x32>
 8009602:	682b      	ldr	r3, [r5, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d0c6      	beq.n	8009596 <__sflush_r+0x32>
 8009608:	2b1d      	cmp	r3, #29
 800960a:	d001      	beq.n	8009610 <__sflush_r+0xac>
 800960c:	2b16      	cmp	r3, #22
 800960e:	d11e      	bne.n	800964e <__sflush_r+0xea>
 8009610:	602f      	str	r7, [r5, #0]
 8009612:	2000      	movs	r0, #0
 8009614:	e022      	b.n	800965c <__sflush_r+0xf8>
 8009616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800961a:	b21b      	sxth	r3, r3
 800961c:	e01b      	b.n	8009656 <__sflush_r+0xf2>
 800961e:	690f      	ldr	r7, [r1, #16]
 8009620:	2f00      	cmp	r7, #0
 8009622:	d0f6      	beq.n	8009612 <__sflush_r+0xae>
 8009624:	0793      	lsls	r3, r2, #30
 8009626:	680e      	ldr	r6, [r1, #0]
 8009628:	bf08      	it	eq
 800962a:	694b      	ldreq	r3, [r1, #20]
 800962c:	600f      	str	r7, [r1, #0]
 800962e:	bf18      	it	ne
 8009630:	2300      	movne	r3, #0
 8009632:	eba6 0807 	sub.w	r8, r6, r7
 8009636:	608b      	str	r3, [r1, #8]
 8009638:	f1b8 0f00 	cmp.w	r8, #0
 800963c:	dde9      	ble.n	8009612 <__sflush_r+0xae>
 800963e:	6a21      	ldr	r1, [r4, #32]
 8009640:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009642:	4643      	mov	r3, r8
 8009644:	463a      	mov	r2, r7
 8009646:	4628      	mov	r0, r5
 8009648:	47b0      	blx	r6
 800964a:	2800      	cmp	r0, #0
 800964c:	dc08      	bgt.n	8009660 <__sflush_r+0xfc>
 800964e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009656:	81a3      	strh	r3, [r4, #12]
 8009658:	f04f 30ff 	mov.w	r0, #4294967295
 800965c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009660:	4407      	add	r7, r0
 8009662:	eba8 0800 	sub.w	r8, r8, r0
 8009666:	e7e7      	b.n	8009638 <__sflush_r+0xd4>
 8009668:	dfbffffe 	.word	0xdfbffffe

0800966c <_fflush_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	690b      	ldr	r3, [r1, #16]
 8009670:	4605      	mov	r5, r0
 8009672:	460c      	mov	r4, r1
 8009674:	b913      	cbnz	r3, 800967c <_fflush_r+0x10>
 8009676:	2500      	movs	r5, #0
 8009678:	4628      	mov	r0, r5
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	b118      	cbz	r0, 8009686 <_fflush_r+0x1a>
 800967e:	6a03      	ldr	r3, [r0, #32]
 8009680:	b90b      	cbnz	r3, 8009686 <_fflush_r+0x1a>
 8009682:	f7fe f9f1 	bl	8007a68 <__sinit>
 8009686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d0f3      	beq.n	8009676 <_fflush_r+0xa>
 800968e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009690:	07d0      	lsls	r0, r2, #31
 8009692:	d404      	bmi.n	800969e <_fflush_r+0x32>
 8009694:	0599      	lsls	r1, r3, #22
 8009696:	d402      	bmi.n	800969e <_fflush_r+0x32>
 8009698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800969a:	f7fe fb2a 	bl	8007cf2 <__retarget_lock_acquire_recursive>
 800969e:	4628      	mov	r0, r5
 80096a0:	4621      	mov	r1, r4
 80096a2:	f7ff ff5f 	bl	8009564 <__sflush_r>
 80096a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096a8:	07da      	lsls	r2, r3, #31
 80096aa:	4605      	mov	r5, r0
 80096ac:	d4e4      	bmi.n	8009678 <_fflush_r+0xc>
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	059b      	lsls	r3, r3, #22
 80096b2:	d4e1      	bmi.n	8009678 <_fflush_r+0xc>
 80096b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096b6:	f7fe fb1d 	bl	8007cf4 <__retarget_lock_release_recursive>
 80096ba:	e7dd      	b.n	8009678 <_fflush_r+0xc>

080096bc <_sbrk_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d06      	ldr	r5, [pc, #24]	@ (80096d8 <_sbrk_r+0x1c>)
 80096c0:	2300      	movs	r3, #0
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	602b      	str	r3, [r5, #0]
 80096c8:	f7f8 fce2 	bl	8002090 <_sbrk>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d102      	bne.n	80096d6 <_sbrk_r+0x1a>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	b103      	cbz	r3, 80096d6 <_sbrk_r+0x1a>
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	20001320 	.word	0x20001320

080096dc <__assert_func>:
 80096dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096de:	4614      	mov	r4, r2
 80096e0:	461a      	mov	r2, r3
 80096e2:	4b09      	ldr	r3, [pc, #36]	@ (8009708 <__assert_func+0x2c>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4605      	mov	r5, r0
 80096e8:	68d8      	ldr	r0, [r3, #12]
 80096ea:	b954      	cbnz	r4, 8009702 <__assert_func+0x26>
 80096ec:	4b07      	ldr	r3, [pc, #28]	@ (800970c <__assert_func+0x30>)
 80096ee:	461c      	mov	r4, r3
 80096f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096f4:	9100      	str	r1, [sp, #0]
 80096f6:	462b      	mov	r3, r5
 80096f8:	4905      	ldr	r1, [pc, #20]	@ (8009710 <__assert_func+0x34>)
 80096fa:	f000 f86f 	bl	80097dc <fiprintf>
 80096fe:	f000 f87f 	bl	8009800 <abort>
 8009702:	4b04      	ldr	r3, [pc, #16]	@ (8009714 <__assert_func+0x38>)
 8009704:	e7f4      	b.n	80096f0 <__assert_func+0x14>
 8009706:	bf00      	nop
 8009708:	20000040 	.word	0x20000040
 800970c:	0800bb2e 	.word	0x0800bb2e
 8009710:	0800bb00 	.word	0x0800bb00
 8009714:	0800baf3 	.word	0x0800baf3

08009718 <_calloc_r>:
 8009718:	b570      	push	{r4, r5, r6, lr}
 800971a:	fba1 5402 	umull	r5, r4, r1, r2
 800971e:	b93c      	cbnz	r4, 8009730 <_calloc_r+0x18>
 8009720:	4629      	mov	r1, r5
 8009722:	f7ff f9b9 	bl	8008a98 <_malloc_r>
 8009726:	4606      	mov	r6, r0
 8009728:	b928      	cbnz	r0, 8009736 <_calloc_r+0x1e>
 800972a:	2600      	movs	r6, #0
 800972c:	4630      	mov	r0, r6
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	220c      	movs	r2, #12
 8009732:	6002      	str	r2, [r0, #0]
 8009734:	e7f9      	b.n	800972a <_calloc_r+0x12>
 8009736:	462a      	mov	r2, r5
 8009738:	4621      	mov	r1, r4
 800973a:	f7fe fa5c 	bl	8007bf6 <memset>
 800973e:	e7f5      	b.n	800972c <_calloc_r+0x14>

08009740 <__ascii_mbtowc>:
 8009740:	b082      	sub	sp, #8
 8009742:	b901      	cbnz	r1, 8009746 <__ascii_mbtowc+0x6>
 8009744:	a901      	add	r1, sp, #4
 8009746:	b142      	cbz	r2, 800975a <__ascii_mbtowc+0x1a>
 8009748:	b14b      	cbz	r3, 800975e <__ascii_mbtowc+0x1e>
 800974a:	7813      	ldrb	r3, [r2, #0]
 800974c:	600b      	str	r3, [r1, #0]
 800974e:	7812      	ldrb	r2, [r2, #0]
 8009750:	1e10      	subs	r0, r2, #0
 8009752:	bf18      	it	ne
 8009754:	2001      	movne	r0, #1
 8009756:	b002      	add	sp, #8
 8009758:	4770      	bx	lr
 800975a:	4610      	mov	r0, r2
 800975c:	e7fb      	b.n	8009756 <__ascii_mbtowc+0x16>
 800975e:	f06f 0001 	mvn.w	r0, #1
 8009762:	e7f8      	b.n	8009756 <__ascii_mbtowc+0x16>

08009764 <_realloc_r>:
 8009764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009768:	4680      	mov	r8, r0
 800976a:	4615      	mov	r5, r2
 800976c:	460c      	mov	r4, r1
 800976e:	b921      	cbnz	r1, 800977a <_realloc_r+0x16>
 8009770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009774:	4611      	mov	r1, r2
 8009776:	f7ff b98f 	b.w	8008a98 <_malloc_r>
 800977a:	b92a      	cbnz	r2, 8009788 <_realloc_r+0x24>
 800977c:	f7ff f918 	bl	80089b0 <_free_r>
 8009780:	2400      	movs	r4, #0
 8009782:	4620      	mov	r0, r4
 8009784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009788:	f000 f841 	bl	800980e <_malloc_usable_size_r>
 800978c:	4285      	cmp	r5, r0
 800978e:	4606      	mov	r6, r0
 8009790:	d802      	bhi.n	8009798 <_realloc_r+0x34>
 8009792:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009796:	d8f4      	bhi.n	8009782 <_realloc_r+0x1e>
 8009798:	4629      	mov	r1, r5
 800979a:	4640      	mov	r0, r8
 800979c:	f7ff f97c 	bl	8008a98 <_malloc_r>
 80097a0:	4607      	mov	r7, r0
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d0ec      	beq.n	8009780 <_realloc_r+0x1c>
 80097a6:	42b5      	cmp	r5, r6
 80097a8:	462a      	mov	r2, r5
 80097aa:	4621      	mov	r1, r4
 80097ac:	bf28      	it	cs
 80097ae:	4632      	movcs	r2, r6
 80097b0:	f7fe faa1 	bl	8007cf6 <memcpy>
 80097b4:	4621      	mov	r1, r4
 80097b6:	4640      	mov	r0, r8
 80097b8:	f7ff f8fa 	bl	80089b0 <_free_r>
 80097bc:	463c      	mov	r4, r7
 80097be:	e7e0      	b.n	8009782 <_realloc_r+0x1e>

080097c0 <__ascii_wctomb>:
 80097c0:	4603      	mov	r3, r0
 80097c2:	4608      	mov	r0, r1
 80097c4:	b141      	cbz	r1, 80097d8 <__ascii_wctomb+0x18>
 80097c6:	2aff      	cmp	r2, #255	@ 0xff
 80097c8:	d904      	bls.n	80097d4 <__ascii_wctomb+0x14>
 80097ca:	228a      	movs	r2, #138	@ 0x8a
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	f04f 30ff 	mov.w	r0, #4294967295
 80097d2:	4770      	bx	lr
 80097d4:	700a      	strb	r2, [r1, #0]
 80097d6:	2001      	movs	r0, #1
 80097d8:	4770      	bx	lr
	...

080097dc <fiprintf>:
 80097dc:	b40e      	push	{r1, r2, r3}
 80097de:	b503      	push	{r0, r1, lr}
 80097e0:	4601      	mov	r1, r0
 80097e2:	ab03      	add	r3, sp, #12
 80097e4:	4805      	ldr	r0, [pc, #20]	@ (80097fc <fiprintf+0x20>)
 80097e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ea:	6800      	ldr	r0, [r0, #0]
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	f000 f83f 	bl	8009870 <_vfiprintf_r>
 80097f2:	b002      	add	sp, #8
 80097f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097f8:	b003      	add	sp, #12
 80097fa:	4770      	bx	lr
 80097fc:	20000040 	.word	0x20000040

08009800 <abort>:
 8009800:	b508      	push	{r3, lr}
 8009802:	2006      	movs	r0, #6
 8009804:	f000 fa08 	bl	8009c18 <raise>
 8009808:	2001      	movs	r0, #1
 800980a:	f7f8 fbc9 	bl	8001fa0 <_exit>

0800980e <_malloc_usable_size_r>:
 800980e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009812:	1f18      	subs	r0, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	bfbc      	itt	lt
 8009818:	580b      	ldrlt	r3, [r1, r0]
 800981a:	18c0      	addlt	r0, r0, r3
 800981c:	4770      	bx	lr

0800981e <__sfputc_r>:
 800981e:	6893      	ldr	r3, [r2, #8]
 8009820:	3b01      	subs	r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	b410      	push	{r4}
 8009826:	6093      	str	r3, [r2, #8]
 8009828:	da08      	bge.n	800983c <__sfputc_r+0x1e>
 800982a:	6994      	ldr	r4, [r2, #24]
 800982c:	42a3      	cmp	r3, r4
 800982e:	db01      	blt.n	8009834 <__sfputc_r+0x16>
 8009830:	290a      	cmp	r1, #10
 8009832:	d103      	bne.n	800983c <__sfputc_r+0x1e>
 8009834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009838:	f000 b932 	b.w	8009aa0 <__swbuf_r>
 800983c:	6813      	ldr	r3, [r2, #0]
 800983e:	1c58      	adds	r0, r3, #1
 8009840:	6010      	str	r0, [r2, #0]
 8009842:	7019      	strb	r1, [r3, #0]
 8009844:	4608      	mov	r0, r1
 8009846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800984a:	4770      	bx	lr

0800984c <__sfputs_r>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	4606      	mov	r6, r0
 8009850:	460f      	mov	r7, r1
 8009852:	4614      	mov	r4, r2
 8009854:	18d5      	adds	r5, r2, r3
 8009856:	42ac      	cmp	r4, r5
 8009858:	d101      	bne.n	800985e <__sfputs_r+0x12>
 800985a:	2000      	movs	r0, #0
 800985c:	e007      	b.n	800986e <__sfputs_r+0x22>
 800985e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009862:	463a      	mov	r2, r7
 8009864:	4630      	mov	r0, r6
 8009866:	f7ff ffda 	bl	800981e <__sfputc_r>
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	d1f3      	bne.n	8009856 <__sfputs_r+0xa>
 800986e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009870 <_vfiprintf_r>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	460d      	mov	r5, r1
 8009876:	b09d      	sub	sp, #116	@ 0x74
 8009878:	4614      	mov	r4, r2
 800987a:	4698      	mov	r8, r3
 800987c:	4606      	mov	r6, r0
 800987e:	b118      	cbz	r0, 8009888 <_vfiprintf_r+0x18>
 8009880:	6a03      	ldr	r3, [r0, #32]
 8009882:	b90b      	cbnz	r3, 8009888 <_vfiprintf_r+0x18>
 8009884:	f7fe f8f0 	bl	8007a68 <__sinit>
 8009888:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800988a:	07d9      	lsls	r1, r3, #31
 800988c:	d405      	bmi.n	800989a <_vfiprintf_r+0x2a>
 800988e:	89ab      	ldrh	r3, [r5, #12]
 8009890:	059a      	lsls	r2, r3, #22
 8009892:	d402      	bmi.n	800989a <_vfiprintf_r+0x2a>
 8009894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009896:	f7fe fa2c 	bl	8007cf2 <__retarget_lock_acquire_recursive>
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	071b      	lsls	r3, r3, #28
 800989e:	d501      	bpl.n	80098a4 <_vfiprintf_r+0x34>
 80098a0:	692b      	ldr	r3, [r5, #16]
 80098a2:	b99b      	cbnz	r3, 80098cc <_vfiprintf_r+0x5c>
 80098a4:	4629      	mov	r1, r5
 80098a6:	4630      	mov	r0, r6
 80098a8:	f000 f938 	bl	8009b1c <__swsetup_r>
 80098ac:	b170      	cbz	r0, 80098cc <_vfiprintf_r+0x5c>
 80098ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098b0:	07dc      	lsls	r4, r3, #31
 80098b2:	d504      	bpl.n	80098be <_vfiprintf_r+0x4e>
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	b01d      	add	sp, #116	@ 0x74
 80098ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098be:	89ab      	ldrh	r3, [r5, #12]
 80098c0:	0598      	lsls	r0, r3, #22
 80098c2:	d4f7      	bmi.n	80098b4 <_vfiprintf_r+0x44>
 80098c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098c6:	f7fe fa15 	bl	8007cf4 <__retarget_lock_release_recursive>
 80098ca:	e7f3      	b.n	80098b4 <_vfiprintf_r+0x44>
 80098cc:	2300      	movs	r3, #0
 80098ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80098d0:	2320      	movs	r3, #32
 80098d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098da:	2330      	movs	r3, #48	@ 0x30
 80098dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a8c <_vfiprintf_r+0x21c>
 80098e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098e4:	f04f 0901 	mov.w	r9, #1
 80098e8:	4623      	mov	r3, r4
 80098ea:	469a      	mov	sl, r3
 80098ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098f0:	b10a      	cbz	r2, 80098f6 <_vfiprintf_r+0x86>
 80098f2:	2a25      	cmp	r2, #37	@ 0x25
 80098f4:	d1f9      	bne.n	80098ea <_vfiprintf_r+0x7a>
 80098f6:	ebba 0b04 	subs.w	fp, sl, r4
 80098fa:	d00b      	beq.n	8009914 <_vfiprintf_r+0xa4>
 80098fc:	465b      	mov	r3, fp
 80098fe:	4622      	mov	r2, r4
 8009900:	4629      	mov	r1, r5
 8009902:	4630      	mov	r0, r6
 8009904:	f7ff ffa2 	bl	800984c <__sfputs_r>
 8009908:	3001      	adds	r0, #1
 800990a:	f000 80a7 	beq.w	8009a5c <_vfiprintf_r+0x1ec>
 800990e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009910:	445a      	add	r2, fp
 8009912:	9209      	str	r2, [sp, #36]	@ 0x24
 8009914:	f89a 3000 	ldrb.w	r3, [sl]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 809f 	beq.w	8009a5c <_vfiprintf_r+0x1ec>
 800991e:	2300      	movs	r3, #0
 8009920:	f04f 32ff 	mov.w	r2, #4294967295
 8009924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009928:	f10a 0a01 	add.w	sl, sl, #1
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	9307      	str	r3, [sp, #28]
 8009930:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009934:	931a      	str	r3, [sp, #104]	@ 0x68
 8009936:	4654      	mov	r4, sl
 8009938:	2205      	movs	r2, #5
 800993a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993e:	4853      	ldr	r0, [pc, #332]	@ (8009a8c <_vfiprintf_r+0x21c>)
 8009940:	f7f6 fc46 	bl	80001d0 <memchr>
 8009944:	9a04      	ldr	r2, [sp, #16]
 8009946:	b9d8      	cbnz	r0, 8009980 <_vfiprintf_r+0x110>
 8009948:	06d1      	lsls	r1, r2, #27
 800994a:	bf44      	itt	mi
 800994c:	2320      	movmi	r3, #32
 800994e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009952:	0713      	lsls	r3, r2, #28
 8009954:	bf44      	itt	mi
 8009956:	232b      	movmi	r3, #43	@ 0x2b
 8009958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800995c:	f89a 3000 	ldrb.w	r3, [sl]
 8009960:	2b2a      	cmp	r3, #42	@ 0x2a
 8009962:	d015      	beq.n	8009990 <_vfiprintf_r+0x120>
 8009964:	9a07      	ldr	r2, [sp, #28]
 8009966:	4654      	mov	r4, sl
 8009968:	2000      	movs	r0, #0
 800996a:	f04f 0c0a 	mov.w	ip, #10
 800996e:	4621      	mov	r1, r4
 8009970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009974:	3b30      	subs	r3, #48	@ 0x30
 8009976:	2b09      	cmp	r3, #9
 8009978:	d94b      	bls.n	8009a12 <_vfiprintf_r+0x1a2>
 800997a:	b1b0      	cbz	r0, 80099aa <_vfiprintf_r+0x13a>
 800997c:	9207      	str	r2, [sp, #28]
 800997e:	e014      	b.n	80099aa <_vfiprintf_r+0x13a>
 8009980:	eba0 0308 	sub.w	r3, r0, r8
 8009984:	fa09 f303 	lsl.w	r3, r9, r3
 8009988:	4313      	orrs	r3, r2
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	46a2      	mov	sl, r4
 800998e:	e7d2      	b.n	8009936 <_vfiprintf_r+0xc6>
 8009990:	9b03      	ldr	r3, [sp, #12]
 8009992:	1d19      	adds	r1, r3, #4
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	9103      	str	r1, [sp, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	bfbb      	ittet	lt
 800999c:	425b      	neglt	r3, r3
 800999e:	f042 0202 	orrlt.w	r2, r2, #2
 80099a2:	9307      	strge	r3, [sp, #28]
 80099a4:	9307      	strlt	r3, [sp, #28]
 80099a6:	bfb8      	it	lt
 80099a8:	9204      	strlt	r2, [sp, #16]
 80099aa:	7823      	ldrb	r3, [r4, #0]
 80099ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80099ae:	d10a      	bne.n	80099c6 <_vfiprintf_r+0x156>
 80099b0:	7863      	ldrb	r3, [r4, #1]
 80099b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80099b4:	d132      	bne.n	8009a1c <_vfiprintf_r+0x1ac>
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	1d1a      	adds	r2, r3, #4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	9203      	str	r2, [sp, #12]
 80099be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099c2:	3402      	adds	r4, #2
 80099c4:	9305      	str	r3, [sp, #20]
 80099c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a9c <_vfiprintf_r+0x22c>
 80099ca:	7821      	ldrb	r1, [r4, #0]
 80099cc:	2203      	movs	r2, #3
 80099ce:	4650      	mov	r0, sl
 80099d0:	f7f6 fbfe 	bl	80001d0 <memchr>
 80099d4:	b138      	cbz	r0, 80099e6 <_vfiprintf_r+0x176>
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	eba0 000a 	sub.w	r0, r0, sl
 80099dc:	2240      	movs	r2, #64	@ 0x40
 80099de:	4082      	lsls	r2, r0
 80099e0:	4313      	orrs	r3, r2
 80099e2:	3401      	adds	r4, #1
 80099e4:	9304      	str	r3, [sp, #16]
 80099e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ea:	4829      	ldr	r0, [pc, #164]	@ (8009a90 <_vfiprintf_r+0x220>)
 80099ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099f0:	2206      	movs	r2, #6
 80099f2:	f7f6 fbed 	bl	80001d0 <memchr>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d03f      	beq.n	8009a7a <_vfiprintf_r+0x20a>
 80099fa:	4b26      	ldr	r3, [pc, #152]	@ (8009a94 <_vfiprintf_r+0x224>)
 80099fc:	bb1b      	cbnz	r3, 8009a46 <_vfiprintf_r+0x1d6>
 80099fe:	9b03      	ldr	r3, [sp, #12]
 8009a00:	3307      	adds	r3, #7
 8009a02:	f023 0307 	bic.w	r3, r3, #7
 8009a06:	3308      	adds	r3, #8
 8009a08:	9303      	str	r3, [sp, #12]
 8009a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a0c:	443b      	add	r3, r7
 8009a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a10:	e76a      	b.n	80098e8 <_vfiprintf_r+0x78>
 8009a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a16:	460c      	mov	r4, r1
 8009a18:	2001      	movs	r0, #1
 8009a1a:	e7a8      	b.n	800996e <_vfiprintf_r+0xfe>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	3401      	adds	r4, #1
 8009a20:	9305      	str	r3, [sp, #20]
 8009a22:	4619      	mov	r1, r3
 8009a24:	f04f 0c0a 	mov.w	ip, #10
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a2e:	3a30      	subs	r2, #48	@ 0x30
 8009a30:	2a09      	cmp	r2, #9
 8009a32:	d903      	bls.n	8009a3c <_vfiprintf_r+0x1cc>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0c6      	beq.n	80099c6 <_vfiprintf_r+0x156>
 8009a38:	9105      	str	r1, [sp, #20]
 8009a3a:	e7c4      	b.n	80099c6 <_vfiprintf_r+0x156>
 8009a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a40:	4604      	mov	r4, r0
 8009a42:	2301      	movs	r3, #1
 8009a44:	e7f0      	b.n	8009a28 <_vfiprintf_r+0x1b8>
 8009a46:	ab03      	add	r3, sp, #12
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	4b12      	ldr	r3, [pc, #72]	@ (8009a98 <_vfiprintf_r+0x228>)
 8009a4e:	a904      	add	r1, sp, #16
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7fd fbc5 	bl	80071e0 <_printf_float>
 8009a56:	4607      	mov	r7, r0
 8009a58:	1c78      	adds	r0, r7, #1
 8009a5a:	d1d6      	bne.n	8009a0a <_vfiprintf_r+0x19a>
 8009a5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a5e:	07d9      	lsls	r1, r3, #31
 8009a60:	d405      	bmi.n	8009a6e <_vfiprintf_r+0x1fe>
 8009a62:	89ab      	ldrh	r3, [r5, #12]
 8009a64:	059a      	lsls	r2, r3, #22
 8009a66:	d402      	bmi.n	8009a6e <_vfiprintf_r+0x1fe>
 8009a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a6a:	f7fe f943 	bl	8007cf4 <__retarget_lock_release_recursive>
 8009a6e:	89ab      	ldrh	r3, [r5, #12]
 8009a70:	065b      	lsls	r3, r3, #25
 8009a72:	f53f af1f 	bmi.w	80098b4 <_vfiprintf_r+0x44>
 8009a76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a78:	e71e      	b.n	80098b8 <_vfiprintf_r+0x48>
 8009a7a:	ab03      	add	r3, sp, #12
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	462a      	mov	r2, r5
 8009a80:	4b05      	ldr	r3, [pc, #20]	@ (8009a98 <_vfiprintf_r+0x228>)
 8009a82:	a904      	add	r1, sp, #16
 8009a84:	4630      	mov	r0, r6
 8009a86:	f7fd fe43 	bl	8007710 <_printf_i>
 8009a8a:	e7e4      	b.n	8009a56 <_vfiprintf_r+0x1e6>
 8009a8c:	0800bad8 	.word	0x0800bad8
 8009a90:	0800bae2 	.word	0x0800bae2
 8009a94:	080071e1 	.word	0x080071e1
 8009a98:	0800984d 	.word	0x0800984d
 8009a9c:	0800bade 	.word	0x0800bade

08009aa0 <__swbuf_r>:
 8009aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa2:	460e      	mov	r6, r1
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	b118      	cbz	r0, 8009ab2 <__swbuf_r+0x12>
 8009aaa:	6a03      	ldr	r3, [r0, #32]
 8009aac:	b90b      	cbnz	r3, 8009ab2 <__swbuf_r+0x12>
 8009aae:	f7fd ffdb 	bl	8007a68 <__sinit>
 8009ab2:	69a3      	ldr	r3, [r4, #24]
 8009ab4:	60a3      	str	r3, [r4, #8]
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	071a      	lsls	r2, r3, #28
 8009aba:	d501      	bpl.n	8009ac0 <__swbuf_r+0x20>
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	b943      	cbnz	r3, 8009ad2 <__swbuf_r+0x32>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	f000 f82a 	bl	8009b1c <__swsetup_r>
 8009ac8:	b118      	cbz	r0, 8009ad2 <__swbuf_r+0x32>
 8009aca:	f04f 37ff 	mov.w	r7, #4294967295
 8009ace:	4638      	mov	r0, r7
 8009ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	6922      	ldr	r2, [r4, #16]
 8009ad6:	1a98      	subs	r0, r3, r2
 8009ad8:	6963      	ldr	r3, [r4, #20]
 8009ada:	b2f6      	uxtb	r6, r6
 8009adc:	4283      	cmp	r3, r0
 8009ade:	4637      	mov	r7, r6
 8009ae0:	dc05      	bgt.n	8009aee <__swbuf_r+0x4e>
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f7ff fdc1 	bl	800966c <_fflush_r>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d1ed      	bne.n	8009aca <__swbuf_r+0x2a>
 8009aee:	68a3      	ldr	r3, [r4, #8]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	60a3      	str	r3, [r4, #8]
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	6022      	str	r2, [r4, #0]
 8009afa:	701e      	strb	r6, [r3, #0]
 8009afc:	6962      	ldr	r2, [r4, #20]
 8009afe:	1c43      	adds	r3, r0, #1
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d004      	beq.n	8009b0e <__swbuf_r+0x6e>
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	07db      	lsls	r3, r3, #31
 8009b08:	d5e1      	bpl.n	8009ace <__swbuf_r+0x2e>
 8009b0a:	2e0a      	cmp	r6, #10
 8009b0c:	d1df      	bne.n	8009ace <__swbuf_r+0x2e>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4628      	mov	r0, r5
 8009b12:	f7ff fdab 	bl	800966c <_fflush_r>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d0d9      	beq.n	8009ace <__swbuf_r+0x2e>
 8009b1a:	e7d6      	b.n	8009aca <__swbuf_r+0x2a>

08009b1c <__swsetup_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4b29      	ldr	r3, [pc, #164]	@ (8009bc4 <__swsetup_r+0xa8>)
 8009b20:	4605      	mov	r5, r0
 8009b22:	6818      	ldr	r0, [r3, #0]
 8009b24:	460c      	mov	r4, r1
 8009b26:	b118      	cbz	r0, 8009b30 <__swsetup_r+0x14>
 8009b28:	6a03      	ldr	r3, [r0, #32]
 8009b2a:	b90b      	cbnz	r3, 8009b30 <__swsetup_r+0x14>
 8009b2c:	f7fd ff9c 	bl	8007a68 <__sinit>
 8009b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b34:	0719      	lsls	r1, r3, #28
 8009b36:	d422      	bmi.n	8009b7e <__swsetup_r+0x62>
 8009b38:	06da      	lsls	r2, r3, #27
 8009b3a:	d407      	bmi.n	8009b4c <__swsetup_r+0x30>
 8009b3c:	2209      	movs	r2, #9
 8009b3e:	602a      	str	r2, [r5, #0]
 8009b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b44:	81a3      	strh	r3, [r4, #12]
 8009b46:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4a:	e033      	b.n	8009bb4 <__swsetup_r+0x98>
 8009b4c:	0758      	lsls	r0, r3, #29
 8009b4e:	d512      	bpl.n	8009b76 <__swsetup_r+0x5a>
 8009b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b52:	b141      	cbz	r1, 8009b66 <__swsetup_r+0x4a>
 8009b54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b58:	4299      	cmp	r1, r3
 8009b5a:	d002      	beq.n	8009b62 <__swsetup_r+0x46>
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f7fe ff27 	bl	80089b0 <_free_r>
 8009b62:	2300      	movs	r3, #0
 8009b64:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b6c:	81a3      	strh	r3, [r4, #12]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6063      	str	r3, [r4, #4]
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	f043 0308 	orr.w	r3, r3, #8
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	6923      	ldr	r3, [r4, #16]
 8009b80:	b94b      	cbnz	r3, 8009b96 <__swsetup_r+0x7a>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b8c:	d003      	beq.n	8009b96 <__swsetup_r+0x7a>
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4628      	mov	r0, r5
 8009b92:	f000 f883 	bl	8009c9c <__smakebuf_r>
 8009b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b9a:	f013 0201 	ands.w	r2, r3, #1
 8009b9e:	d00a      	beq.n	8009bb6 <__swsetup_r+0x9a>
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	60a2      	str	r2, [r4, #8]
 8009ba4:	6962      	ldr	r2, [r4, #20]
 8009ba6:	4252      	negs	r2, r2
 8009ba8:	61a2      	str	r2, [r4, #24]
 8009baa:	6922      	ldr	r2, [r4, #16]
 8009bac:	b942      	cbnz	r2, 8009bc0 <__swsetup_r+0xa4>
 8009bae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009bb2:	d1c5      	bne.n	8009b40 <__swsetup_r+0x24>
 8009bb4:	bd38      	pop	{r3, r4, r5, pc}
 8009bb6:	0799      	lsls	r1, r3, #30
 8009bb8:	bf58      	it	pl
 8009bba:	6962      	ldrpl	r2, [r4, #20]
 8009bbc:	60a2      	str	r2, [r4, #8]
 8009bbe:	e7f4      	b.n	8009baa <__swsetup_r+0x8e>
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	e7f7      	b.n	8009bb4 <__swsetup_r+0x98>
 8009bc4:	20000040 	.word	0x20000040

08009bc8 <_raise_r>:
 8009bc8:	291f      	cmp	r1, #31
 8009bca:	b538      	push	{r3, r4, r5, lr}
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	d904      	bls.n	8009bdc <_raise_r+0x14>
 8009bd2:	2316      	movs	r3, #22
 8009bd4:	6003      	str	r3, [r0, #0]
 8009bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bde:	b112      	cbz	r2, 8009be6 <_raise_r+0x1e>
 8009be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009be4:	b94b      	cbnz	r3, 8009bfa <_raise_r+0x32>
 8009be6:	4628      	mov	r0, r5
 8009be8:	f000 f830 	bl	8009c4c <_getpid_r>
 8009bec:	4622      	mov	r2, r4
 8009bee:	4601      	mov	r1, r0
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bf6:	f000 b817 	b.w	8009c28 <_kill_r>
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d00a      	beq.n	8009c14 <_raise_r+0x4c>
 8009bfe:	1c59      	adds	r1, r3, #1
 8009c00:	d103      	bne.n	8009c0a <_raise_r+0x42>
 8009c02:	2316      	movs	r3, #22
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	2001      	movs	r0, #1
 8009c08:	e7e7      	b.n	8009bda <_raise_r+0x12>
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c10:	4620      	mov	r0, r4
 8009c12:	4798      	blx	r3
 8009c14:	2000      	movs	r0, #0
 8009c16:	e7e0      	b.n	8009bda <_raise_r+0x12>

08009c18 <raise>:
 8009c18:	4b02      	ldr	r3, [pc, #8]	@ (8009c24 <raise+0xc>)
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	6818      	ldr	r0, [r3, #0]
 8009c1e:	f7ff bfd3 	b.w	8009bc8 <_raise_r>
 8009c22:	bf00      	nop
 8009c24:	20000040 	.word	0x20000040

08009c28 <_kill_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d07      	ldr	r5, [pc, #28]	@ (8009c48 <_kill_r+0x20>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	4611      	mov	r1, r2
 8009c34:	602b      	str	r3, [r5, #0]
 8009c36:	f7f8 f9a3 	bl	8001f80 <_kill>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	d102      	bne.n	8009c44 <_kill_r+0x1c>
 8009c3e:	682b      	ldr	r3, [r5, #0]
 8009c40:	b103      	cbz	r3, 8009c44 <_kill_r+0x1c>
 8009c42:	6023      	str	r3, [r4, #0]
 8009c44:	bd38      	pop	{r3, r4, r5, pc}
 8009c46:	bf00      	nop
 8009c48:	20001320 	.word	0x20001320

08009c4c <_getpid_r>:
 8009c4c:	f7f8 b990 	b.w	8001f70 <_getpid>

08009c50 <__swhatbuf_r>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	460c      	mov	r4, r1
 8009c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	b096      	sub	sp, #88	@ 0x58
 8009c5c:	4615      	mov	r5, r2
 8009c5e:	461e      	mov	r6, r3
 8009c60:	da0d      	bge.n	8009c7e <__swhatbuf_r+0x2e>
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c68:	f04f 0100 	mov.w	r1, #0
 8009c6c:	bf14      	ite	ne
 8009c6e:	2340      	movne	r3, #64	@ 0x40
 8009c70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c74:	2000      	movs	r0, #0
 8009c76:	6031      	str	r1, [r6, #0]
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	b016      	add	sp, #88	@ 0x58
 8009c7c:	bd70      	pop	{r4, r5, r6, pc}
 8009c7e:	466a      	mov	r2, sp
 8009c80:	f000 f848 	bl	8009d14 <_fstat_r>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	dbec      	blt.n	8009c62 <__swhatbuf_r+0x12>
 8009c88:	9901      	ldr	r1, [sp, #4]
 8009c8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c92:	4259      	negs	r1, r3
 8009c94:	4159      	adcs	r1, r3
 8009c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c9a:	e7eb      	b.n	8009c74 <__swhatbuf_r+0x24>

08009c9c <__smakebuf_r>:
 8009c9c:	898b      	ldrh	r3, [r1, #12]
 8009c9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ca0:	079d      	lsls	r5, r3, #30
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	460c      	mov	r4, r1
 8009ca6:	d507      	bpl.n	8009cb8 <__smakebuf_r+0x1c>
 8009ca8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	6123      	str	r3, [r4, #16]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	6163      	str	r3, [r4, #20]
 8009cb4:	b003      	add	sp, #12
 8009cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb8:	ab01      	add	r3, sp, #4
 8009cba:	466a      	mov	r2, sp
 8009cbc:	f7ff ffc8 	bl	8009c50 <__swhatbuf_r>
 8009cc0:	9f00      	ldr	r7, [sp, #0]
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	4639      	mov	r1, r7
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f7fe fee6 	bl	8008a98 <_malloc_r>
 8009ccc:	b948      	cbnz	r0, 8009ce2 <__smakebuf_r+0x46>
 8009cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd2:	059a      	lsls	r2, r3, #22
 8009cd4:	d4ee      	bmi.n	8009cb4 <__smakebuf_r+0x18>
 8009cd6:	f023 0303 	bic.w	r3, r3, #3
 8009cda:	f043 0302 	orr.w	r3, r3, #2
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	e7e2      	b.n	8009ca8 <__smakebuf_r+0xc>
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	6020      	str	r0, [r4, #0]
 8009ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cea:	81a3      	strh	r3, [r4, #12]
 8009cec:	9b01      	ldr	r3, [sp, #4]
 8009cee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cf2:	b15b      	cbz	r3, 8009d0c <__smakebuf_r+0x70>
 8009cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f000 f81d 	bl	8009d38 <_isatty_r>
 8009cfe:	b128      	cbz	r0, 8009d0c <__smakebuf_r+0x70>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	f023 0303 	bic.w	r3, r3, #3
 8009d06:	f043 0301 	orr.w	r3, r3, #1
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	431d      	orrs	r5, r3
 8009d10:	81a5      	strh	r5, [r4, #12]
 8009d12:	e7cf      	b.n	8009cb4 <__smakebuf_r+0x18>

08009d14 <_fstat_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d07      	ldr	r5, [pc, #28]	@ (8009d34 <_fstat_r+0x20>)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	4611      	mov	r1, r2
 8009d20:	602b      	str	r3, [r5, #0]
 8009d22:	f7f8 f98d 	bl	8002040 <_fstat>
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	d102      	bne.n	8009d30 <_fstat_r+0x1c>
 8009d2a:	682b      	ldr	r3, [r5, #0]
 8009d2c:	b103      	cbz	r3, 8009d30 <_fstat_r+0x1c>
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	bd38      	pop	{r3, r4, r5, pc}
 8009d32:	bf00      	nop
 8009d34:	20001320 	.word	0x20001320

08009d38 <_isatty_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d06      	ldr	r5, [pc, #24]	@ (8009d54 <_isatty_r+0x1c>)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	602b      	str	r3, [r5, #0]
 8009d44:	f7f8 f98c 	bl	8002060 <_isatty>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_isatty_r+0x1a>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_isatty_r+0x1a>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	20001320 	.word	0x20001320

08009d58 <_init>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	bf00      	nop
 8009d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5e:	bc08      	pop	{r3}
 8009d60:	469e      	mov	lr, r3
 8009d62:	4770      	bx	lr

08009d64 <_fini>:
 8009d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d66:	bf00      	nop
 8009d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6a:	bc08      	pop	{r3}
 8009d6c:	469e      	mov	lr, r3
 8009d6e:	4770      	bx	lr
